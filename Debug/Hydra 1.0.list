
Hydra 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007518  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  080075d4  080075d4  000175d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800788c  0800788c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007894  08007894  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007894  08007894  00017894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800789c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a88  20000070  0800790c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  0800790c  00020af8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c8e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d43  00000000  00000000  00034d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  00037a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  00038c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017f7e  00000000  00000000  00039c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000104d4  00000000  00000000  00051ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a52f  00000000  00000000  0006207a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fc5a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004638  00000000  00000000  000fc624  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080075bc 	.word	0x080075bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080075bc 	.word	0x080075bc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fab5 	bl	8000968 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fa37 	bl	800087c <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 faa7 	bl	8000968 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fa9d 	bl	8000968 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fa45 	bl	80008cc <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fa3b 	bl	80008cc <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	1c08      	adds	r0, r1, #0
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	; (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	; (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f81e 	bl	80004d4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_f2uiz>:
 80004a4:	219e      	movs	r1, #158	; 0x9e
 80004a6:	b510      	push	{r4, lr}
 80004a8:	05c9      	lsls	r1, r1, #23
 80004aa:	1c04      	adds	r4, r0, #0
 80004ac:	f7ff ffd0 	bl	8000450 <__aeabi_fcmpge>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d103      	bne.n	80004bc <__aeabi_f2uiz+0x18>
 80004b4:	1c20      	adds	r0, r4, #0
 80004b6:	f000 fd9d 	bl	8000ff4 <__aeabi_f2iz>
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	219e      	movs	r1, #158	; 0x9e
 80004be:	1c20      	adds	r0, r4, #0
 80004c0:	05c9      	lsls	r1, r1, #23
 80004c2:	f000 fbd3 	bl	8000c6c <__aeabi_fsub>
 80004c6:	f000 fd95 	bl	8000ff4 <__aeabi_f2iz>
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	469c      	mov	ip, r3
 80004d0:	4460      	add	r0, ip
 80004d2:	e7f2      	b.n	80004ba <__aeabi_f2uiz+0x16>

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	464f      	mov	r7, r9
 80004d8:	4646      	mov	r6, r8
 80004da:	46d6      	mov	lr, sl
 80004dc:	b5c0      	push	{r6, r7, lr}
 80004de:	0004      	movs	r4, r0
 80004e0:	b082      	sub	sp, #8
 80004e2:	000d      	movs	r5, r1
 80004e4:	4691      	mov	r9, r2
 80004e6:	4698      	mov	r8, r3
 80004e8:	428b      	cmp	r3, r1
 80004ea:	d82f      	bhi.n	800054c <__udivmoddi4+0x78>
 80004ec:	d02c      	beq.n	8000548 <__udivmoddi4+0x74>
 80004ee:	4641      	mov	r1, r8
 80004f0:	4648      	mov	r0, r9
 80004f2:	f000 fdfd 	bl	80010f0 <__clzdi2>
 80004f6:	0029      	movs	r1, r5
 80004f8:	0006      	movs	r6, r0
 80004fa:	0020      	movs	r0, r4
 80004fc:	f000 fdf8 	bl	80010f0 <__clzdi2>
 8000500:	1a33      	subs	r3, r6, r0
 8000502:	469c      	mov	ip, r3
 8000504:	3b20      	subs	r3, #32
 8000506:	469a      	mov	sl, r3
 8000508:	d500      	bpl.n	800050c <__udivmoddi4+0x38>
 800050a:	e076      	b.n	80005fa <__udivmoddi4+0x126>
 800050c:	464b      	mov	r3, r9
 800050e:	4652      	mov	r2, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001f      	movs	r7, r3
 8000514:	464b      	mov	r3, r9
 8000516:	4662      	mov	r2, ip
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d828      	bhi.n	8000572 <__udivmoddi4+0x9e>
 8000520:	d025      	beq.n	800056e <__udivmoddi4+0x9a>
 8000522:	4653      	mov	r3, sl
 8000524:	1ba4      	subs	r4, r4, r6
 8000526:	41bd      	sbcs	r5, r7
 8000528:	2b00      	cmp	r3, #0
 800052a:	da00      	bge.n	800052e <__udivmoddi4+0x5a>
 800052c:	e07b      	b.n	8000626 <__udivmoddi4+0x152>
 800052e:	2200      	movs	r2, #0
 8000530:	2300      	movs	r3, #0
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	4652      	mov	r2, sl
 800053a:	4093      	lsls	r3, r2
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2301      	movs	r3, #1
 8000540:	4662      	mov	r2, ip
 8000542:	4093      	lsls	r3, r2
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	e018      	b.n	800057a <__udivmoddi4+0xa6>
 8000548:	4282      	cmp	r2, r0
 800054a:	d9d0      	bls.n	80004ee <__udivmoddi4+0x1a>
 800054c:	2200      	movs	r2, #0
 800054e:	2300      	movs	r3, #0
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <__udivmoddi4+0x8a>
 800055a:	601c      	str	r4, [r3, #0]
 800055c:	605d      	str	r5, [r3, #4]
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	b002      	add	sp, #8
 8000564:	bc1c      	pop	{r2, r3, r4}
 8000566:	4690      	mov	r8, r2
 8000568:	4699      	mov	r9, r3
 800056a:	46a2      	mov	sl, r4
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	42a3      	cmp	r3, r4
 8000570:	d9d7      	bls.n	8000522 <__udivmoddi4+0x4e>
 8000572:	2200      	movs	r2, #0
 8000574:	2300      	movs	r3, #0
 8000576:	9200      	str	r2, [sp, #0]
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	4663      	mov	r3, ip
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0e9      	beq.n	8000554 <__udivmoddi4+0x80>
 8000580:	07fb      	lsls	r3, r7, #31
 8000582:	4698      	mov	r8, r3
 8000584:	4641      	mov	r1, r8
 8000586:	0872      	lsrs	r2, r6, #1
 8000588:	430a      	orrs	r2, r1
 800058a:	087b      	lsrs	r3, r7, #1
 800058c:	4666      	mov	r6, ip
 800058e:	e00e      	b.n	80005ae <__udivmoddi4+0xda>
 8000590:	42ab      	cmp	r3, r5
 8000592:	d101      	bne.n	8000598 <__udivmoddi4+0xc4>
 8000594:	42a2      	cmp	r2, r4
 8000596:	d80c      	bhi.n	80005b2 <__udivmoddi4+0xde>
 8000598:	1aa4      	subs	r4, r4, r2
 800059a:	419d      	sbcs	r5, r3
 800059c:	2001      	movs	r0, #1
 800059e:	1924      	adds	r4, r4, r4
 80005a0:	416d      	adcs	r5, r5
 80005a2:	2100      	movs	r1, #0
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1824      	adds	r4, r4, r0
 80005a8:	414d      	adcs	r5, r1
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d006      	beq.n	80005bc <__udivmoddi4+0xe8>
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	d9ee      	bls.n	8000590 <__udivmoddi4+0xbc>
 80005b2:	3e01      	subs	r6, #1
 80005b4:	1924      	adds	r4, r4, r4
 80005b6:	416d      	adcs	r5, r5
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d1f8      	bne.n	80005ae <__udivmoddi4+0xda>
 80005bc:	9800      	ldr	r0, [sp, #0]
 80005be:	9901      	ldr	r1, [sp, #4]
 80005c0:	4653      	mov	r3, sl
 80005c2:	1900      	adds	r0, r0, r4
 80005c4:	4169      	adcs	r1, r5
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db23      	blt.n	8000612 <__udivmoddi4+0x13e>
 80005ca:	002b      	movs	r3, r5
 80005cc:	4652      	mov	r2, sl
 80005ce:	40d3      	lsrs	r3, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	4664      	mov	r4, ip
 80005d4:	40e2      	lsrs	r2, r4
 80005d6:	001c      	movs	r4, r3
 80005d8:	4653      	mov	r3, sl
 80005da:	0015      	movs	r5, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db2d      	blt.n	800063c <__udivmoddi4+0x168>
 80005e0:	0026      	movs	r6, r4
 80005e2:	4657      	mov	r7, sl
 80005e4:	40be      	lsls	r6, r7
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4667      	mov	r7, ip
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e7ac      	b.n	8000554 <__udivmoddi4+0x80>
 80005fa:	4662      	mov	r2, ip
 80005fc:	2320      	movs	r3, #32
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	464a      	mov	r2, r9
 8000602:	40da      	lsrs	r2, r3
 8000604:	4661      	mov	r1, ip
 8000606:	0013      	movs	r3, r2
 8000608:	4642      	mov	r2, r8
 800060a:	408a      	lsls	r2, r1
 800060c:	0017      	movs	r7, r2
 800060e:	431f      	orrs	r7, r3
 8000610:	e780      	b.n	8000514 <__udivmoddi4+0x40>
 8000612:	4662      	mov	r2, ip
 8000614:	2320      	movs	r3, #32
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	4666      	mov	r6, ip
 800061c:	409a      	lsls	r2, r3
 800061e:	0023      	movs	r3, r4
 8000620:	40f3      	lsrs	r3, r6
 8000622:	4313      	orrs	r3, r2
 8000624:	e7d4      	b.n	80005d0 <__udivmoddi4+0xfc>
 8000626:	4662      	mov	r2, ip
 8000628:	2320      	movs	r3, #32
 800062a:	2100      	movs	r1, #0
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	2200      	movs	r2, #0
 8000630:	9100      	str	r1, [sp, #0]
 8000632:	9201      	str	r2, [sp, #4]
 8000634:	2201      	movs	r2, #1
 8000636:	40da      	lsrs	r2, r3
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	e780      	b.n	800053e <__udivmoddi4+0x6a>
 800063c:	2320      	movs	r3, #32
 800063e:	4662      	mov	r2, ip
 8000640:	0026      	movs	r6, r4
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	002f      	movs	r7, r5
 8000648:	46b0      	mov	r8, r6
 800064a:	4666      	mov	r6, ip
 800064c:	40b7      	lsls	r7, r6
 800064e:	4646      	mov	r6, r8
 8000650:	003b      	movs	r3, r7
 8000652:	4333      	orrs	r3, r6
 8000654:	e7c8      	b.n	80005e8 <__udivmoddi4+0x114>
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__aeabi_fdiv>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	4657      	mov	r7, sl
 800065c:	464e      	mov	r6, r9
 800065e:	4645      	mov	r5, r8
 8000660:	46de      	mov	lr, fp
 8000662:	0244      	lsls	r4, r0, #9
 8000664:	b5e0      	push	{r5, r6, r7, lr}
 8000666:	0046      	lsls	r6, r0, #1
 8000668:	4688      	mov	r8, r1
 800066a:	0a64      	lsrs	r4, r4, #9
 800066c:	0e36      	lsrs	r6, r6, #24
 800066e:	0fc7      	lsrs	r7, r0, #31
 8000670:	2e00      	cmp	r6, #0
 8000672:	d063      	beq.n	800073c <__aeabi_fdiv+0xe4>
 8000674:	2eff      	cmp	r6, #255	; 0xff
 8000676:	d024      	beq.n	80006c2 <__aeabi_fdiv+0x6a>
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	00e4      	lsls	r4, r4, #3
 800067c:	04db      	lsls	r3, r3, #19
 800067e:	431c      	orrs	r4, r3
 8000680:	2300      	movs	r3, #0
 8000682:	4699      	mov	r9, r3
 8000684:	469b      	mov	fp, r3
 8000686:	3e7f      	subs	r6, #127	; 0x7f
 8000688:	4643      	mov	r3, r8
 800068a:	4642      	mov	r2, r8
 800068c:	025d      	lsls	r5, r3, #9
 800068e:	0fd2      	lsrs	r2, r2, #31
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	0a6d      	lsrs	r5, r5, #9
 8000694:	0e1b      	lsrs	r3, r3, #24
 8000696:	4690      	mov	r8, r2
 8000698:	4692      	mov	sl, r2
 800069a:	d065      	beq.n	8000768 <__aeabi_fdiv+0x110>
 800069c:	2bff      	cmp	r3, #255	; 0xff
 800069e:	d055      	beq.n	800074c <__aeabi_fdiv+0xf4>
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	2100      	movs	r1, #0
 80006a4:	00ed      	lsls	r5, r5, #3
 80006a6:	04d2      	lsls	r2, r2, #19
 80006a8:	3b7f      	subs	r3, #127	; 0x7f
 80006aa:	4315      	orrs	r5, r2
 80006ac:	1af6      	subs	r6, r6, r3
 80006ae:	4643      	mov	r3, r8
 80006b0:	464a      	mov	r2, r9
 80006b2:	407b      	eors	r3, r7
 80006b4:	2a0f      	cmp	r2, #15
 80006b6:	d900      	bls.n	80006ba <__aeabi_fdiv+0x62>
 80006b8:	e08d      	b.n	80007d6 <__aeabi_fdiv+0x17e>
 80006ba:	486d      	ldr	r0, [pc, #436]	; (8000870 <__aeabi_fdiv+0x218>)
 80006bc:	0092      	lsls	r2, r2, #2
 80006be:	5882      	ldr	r2, [r0, r2]
 80006c0:	4697      	mov	pc, r2
 80006c2:	2c00      	cmp	r4, #0
 80006c4:	d154      	bne.n	8000770 <__aeabi_fdiv+0x118>
 80006c6:	2308      	movs	r3, #8
 80006c8:	4699      	mov	r9, r3
 80006ca:	3b06      	subs	r3, #6
 80006cc:	26ff      	movs	r6, #255	; 0xff
 80006ce:	469b      	mov	fp, r3
 80006d0:	e7da      	b.n	8000688 <__aeabi_fdiv+0x30>
 80006d2:	2500      	movs	r5, #0
 80006d4:	4653      	mov	r3, sl
 80006d6:	2902      	cmp	r1, #2
 80006d8:	d01b      	beq.n	8000712 <__aeabi_fdiv+0xba>
 80006da:	2903      	cmp	r1, #3
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fdiv+0x88>
 80006de:	e0bf      	b.n	8000860 <__aeabi_fdiv+0x208>
 80006e0:	2901      	cmp	r1, #1
 80006e2:	d028      	beq.n	8000736 <__aeabi_fdiv+0xde>
 80006e4:	0030      	movs	r0, r6
 80006e6:	307f      	adds	r0, #127	; 0x7f
 80006e8:	2800      	cmp	r0, #0
 80006ea:	dd20      	ble.n	800072e <__aeabi_fdiv+0xd6>
 80006ec:	076a      	lsls	r2, r5, #29
 80006ee:	d004      	beq.n	80006fa <__aeabi_fdiv+0xa2>
 80006f0:	220f      	movs	r2, #15
 80006f2:	402a      	ands	r2, r5
 80006f4:	2a04      	cmp	r2, #4
 80006f6:	d000      	beq.n	80006fa <__aeabi_fdiv+0xa2>
 80006f8:	3504      	adds	r5, #4
 80006fa:	012a      	lsls	r2, r5, #4
 80006fc:	d503      	bpl.n	8000706 <__aeabi_fdiv+0xae>
 80006fe:	0030      	movs	r0, r6
 8000700:	4a5c      	ldr	r2, [pc, #368]	; (8000874 <__aeabi_fdiv+0x21c>)
 8000702:	3080      	adds	r0, #128	; 0x80
 8000704:	4015      	ands	r5, r2
 8000706:	28fe      	cmp	r0, #254	; 0xfe
 8000708:	dc03      	bgt.n	8000712 <__aeabi_fdiv+0xba>
 800070a:	01ac      	lsls	r4, r5, #6
 800070c:	0a64      	lsrs	r4, r4, #9
 800070e:	b2c2      	uxtb	r2, r0
 8000710:	e001      	b.n	8000716 <__aeabi_fdiv+0xbe>
 8000712:	22ff      	movs	r2, #255	; 0xff
 8000714:	2400      	movs	r4, #0
 8000716:	0264      	lsls	r4, r4, #9
 8000718:	05d2      	lsls	r2, r2, #23
 800071a:	0a60      	lsrs	r0, r4, #9
 800071c:	07db      	lsls	r3, r3, #31
 800071e:	4310      	orrs	r0, r2
 8000720:	4318      	orrs	r0, r3
 8000722:	bc3c      	pop	{r2, r3, r4, r5}
 8000724:	4690      	mov	r8, r2
 8000726:	4699      	mov	r9, r3
 8000728:	46a2      	mov	sl, r4
 800072a:	46ab      	mov	fp, r5
 800072c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800072e:	2201      	movs	r2, #1
 8000730:	1a10      	subs	r0, r2, r0
 8000732:	281b      	cmp	r0, #27
 8000734:	dd7c      	ble.n	8000830 <__aeabi_fdiv+0x1d8>
 8000736:	2200      	movs	r2, #0
 8000738:	2400      	movs	r4, #0
 800073a:	e7ec      	b.n	8000716 <__aeabi_fdiv+0xbe>
 800073c:	2c00      	cmp	r4, #0
 800073e:	d11d      	bne.n	800077c <__aeabi_fdiv+0x124>
 8000740:	2304      	movs	r3, #4
 8000742:	4699      	mov	r9, r3
 8000744:	3b03      	subs	r3, #3
 8000746:	2600      	movs	r6, #0
 8000748:	469b      	mov	fp, r3
 800074a:	e79d      	b.n	8000688 <__aeabi_fdiv+0x30>
 800074c:	3eff      	subs	r6, #255	; 0xff
 800074e:	2d00      	cmp	r5, #0
 8000750:	d120      	bne.n	8000794 <__aeabi_fdiv+0x13c>
 8000752:	2102      	movs	r1, #2
 8000754:	4643      	mov	r3, r8
 8000756:	464a      	mov	r2, r9
 8000758:	407b      	eors	r3, r7
 800075a:	430a      	orrs	r2, r1
 800075c:	2a0f      	cmp	r2, #15
 800075e:	d8d8      	bhi.n	8000712 <__aeabi_fdiv+0xba>
 8000760:	4845      	ldr	r0, [pc, #276]	; (8000878 <__aeabi_fdiv+0x220>)
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	5882      	ldr	r2, [r0, r2]
 8000766:	4697      	mov	pc, r2
 8000768:	2d00      	cmp	r5, #0
 800076a:	d119      	bne.n	80007a0 <__aeabi_fdiv+0x148>
 800076c:	2101      	movs	r1, #1
 800076e:	e7f1      	b.n	8000754 <__aeabi_fdiv+0xfc>
 8000770:	230c      	movs	r3, #12
 8000772:	4699      	mov	r9, r3
 8000774:	3b09      	subs	r3, #9
 8000776:	26ff      	movs	r6, #255	; 0xff
 8000778:	469b      	mov	fp, r3
 800077a:	e785      	b.n	8000688 <__aeabi_fdiv+0x30>
 800077c:	0020      	movs	r0, r4
 800077e:	f000 fc99 	bl	80010b4 <__clzsi2>
 8000782:	2676      	movs	r6, #118	; 0x76
 8000784:	1f43      	subs	r3, r0, #5
 8000786:	409c      	lsls	r4, r3
 8000788:	2300      	movs	r3, #0
 800078a:	4276      	negs	r6, r6
 800078c:	1a36      	subs	r6, r6, r0
 800078e:	4699      	mov	r9, r3
 8000790:	469b      	mov	fp, r3
 8000792:	e779      	b.n	8000688 <__aeabi_fdiv+0x30>
 8000794:	464a      	mov	r2, r9
 8000796:	2303      	movs	r3, #3
 8000798:	431a      	orrs	r2, r3
 800079a:	4691      	mov	r9, r2
 800079c:	2103      	movs	r1, #3
 800079e:	e786      	b.n	80006ae <__aeabi_fdiv+0x56>
 80007a0:	0028      	movs	r0, r5
 80007a2:	f000 fc87 	bl	80010b4 <__clzsi2>
 80007a6:	1f43      	subs	r3, r0, #5
 80007a8:	1836      	adds	r6, r6, r0
 80007aa:	409d      	lsls	r5, r3
 80007ac:	3676      	adds	r6, #118	; 0x76
 80007ae:	2100      	movs	r1, #0
 80007b0:	e77d      	b.n	80006ae <__aeabi_fdiv+0x56>
 80007b2:	2480      	movs	r4, #128	; 0x80
 80007b4:	2300      	movs	r3, #0
 80007b6:	03e4      	lsls	r4, r4, #15
 80007b8:	22ff      	movs	r2, #255	; 0xff
 80007ba:	e7ac      	b.n	8000716 <__aeabi_fdiv+0xbe>
 80007bc:	2500      	movs	r5, #0
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	03db      	lsls	r3, r3, #15
 80007c2:	421c      	tst	r4, r3
 80007c4:	d028      	beq.n	8000818 <__aeabi_fdiv+0x1c0>
 80007c6:	421d      	tst	r5, r3
 80007c8:	d126      	bne.n	8000818 <__aeabi_fdiv+0x1c0>
 80007ca:	432b      	orrs	r3, r5
 80007cc:	025c      	lsls	r4, r3, #9
 80007ce:	0a64      	lsrs	r4, r4, #9
 80007d0:	4643      	mov	r3, r8
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	e79f      	b.n	8000716 <__aeabi_fdiv+0xbe>
 80007d6:	0162      	lsls	r2, r4, #5
 80007d8:	016c      	lsls	r4, r5, #5
 80007da:	42a2      	cmp	r2, r4
 80007dc:	d224      	bcs.n	8000828 <__aeabi_fdiv+0x1d0>
 80007de:	211b      	movs	r1, #27
 80007e0:	2500      	movs	r5, #0
 80007e2:	3e01      	subs	r6, #1
 80007e4:	2701      	movs	r7, #1
 80007e6:	0010      	movs	r0, r2
 80007e8:	006d      	lsls	r5, r5, #1
 80007ea:	0052      	lsls	r2, r2, #1
 80007ec:	2800      	cmp	r0, #0
 80007ee:	db01      	blt.n	80007f4 <__aeabi_fdiv+0x19c>
 80007f0:	4294      	cmp	r4, r2
 80007f2:	d801      	bhi.n	80007f8 <__aeabi_fdiv+0x1a0>
 80007f4:	1b12      	subs	r2, r2, r4
 80007f6:	433d      	orrs	r5, r7
 80007f8:	3901      	subs	r1, #1
 80007fa:	2900      	cmp	r1, #0
 80007fc:	d1f3      	bne.n	80007e6 <__aeabi_fdiv+0x18e>
 80007fe:	0014      	movs	r4, r2
 8000800:	1e62      	subs	r2, r4, #1
 8000802:	4194      	sbcs	r4, r2
 8000804:	4325      	orrs	r5, r4
 8000806:	e76d      	b.n	80006e4 <__aeabi_fdiv+0x8c>
 8000808:	46ba      	mov	sl, r7
 800080a:	4659      	mov	r1, fp
 800080c:	0025      	movs	r5, r4
 800080e:	4653      	mov	r3, sl
 8000810:	2902      	cmp	r1, #2
 8000812:	d000      	beq.n	8000816 <__aeabi_fdiv+0x1be>
 8000814:	e761      	b.n	80006da <__aeabi_fdiv+0x82>
 8000816:	e77c      	b.n	8000712 <__aeabi_fdiv+0xba>
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	03db      	lsls	r3, r3, #15
 800081c:	431c      	orrs	r4, r3
 800081e:	0264      	lsls	r4, r4, #9
 8000820:	0a64      	lsrs	r4, r4, #9
 8000822:	003b      	movs	r3, r7
 8000824:	22ff      	movs	r2, #255	; 0xff
 8000826:	e776      	b.n	8000716 <__aeabi_fdiv+0xbe>
 8000828:	1b12      	subs	r2, r2, r4
 800082a:	211a      	movs	r1, #26
 800082c:	2501      	movs	r5, #1
 800082e:	e7d9      	b.n	80007e4 <__aeabi_fdiv+0x18c>
 8000830:	369e      	adds	r6, #158	; 0x9e
 8000832:	002a      	movs	r2, r5
 8000834:	40b5      	lsls	r5, r6
 8000836:	002c      	movs	r4, r5
 8000838:	40c2      	lsrs	r2, r0
 800083a:	1e65      	subs	r5, r4, #1
 800083c:	41ac      	sbcs	r4, r5
 800083e:	4314      	orrs	r4, r2
 8000840:	0762      	lsls	r2, r4, #29
 8000842:	d004      	beq.n	800084e <__aeabi_fdiv+0x1f6>
 8000844:	220f      	movs	r2, #15
 8000846:	4022      	ands	r2, r4
 8000848:	2a04      	cmp	r2, #4
 800084a:	d000      	beq.n	800084e <__aeabi_fdiv+0x1f6>
 800084c:	3404      	adds	r4, #4
 800084e:	0162      	lsls	r2, r4, #5
 8000850:	d403      	bmi.n	800085a <__aeabi_fdiv+0x202>
 8000852:	01a4      	lsls	r4, r4, #6
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	2200      	movs	r2, #0
 8000858:	e75d      	b.n	8000716 <__aeabi_fdiv+0xbe>
 800085a:	2201      	movs	r2, #1
 800085c:	2400      	movs	r4, #0
 800085e:	e75a      	b.n	8000716 <__aeabi_fdiv+0xbe>
 8000860:	2480      	movs	r4, #128	; 0x80
 8000862:	03e4      	lsls	r4, r4, #15
 8000864:	432c      	orrs	r4, r5
 8000866:	0264      	lsls	r4, r4, #9
 8000868:	0a64      	lsrs	r4, r4, #9
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	e753      	b.n	8000716 <__aeabi_fdiv+0xbe>
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	08007608 	.word	0x08007608
 8000874:	f7ffffff 	.word	0xf7ffffff
 8000878:	08007648 	.word	0x08007648

0800087c <__eqsf2>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	0042      	lsls	r2, r0, #1
 8000880:	024e      	lsls	r6, r1, #9
 8000882:	004c      	lsls	r4, r1, #1
 8000884:	0245      	lsls	r5, r0, #9
 8000886:	0a6d      	lsrs	r5, r5, #9
 8000888:	0e12      	lsrs	r2, r2, #24
 800088a:	0fc3      	lsrs	r3, r0, #31
 800088c:	0a76      	lsrs	r6, r6, #9
 800088e:	0e24      	lsrs	r4, r4, #24
 8000890:	0fc9      	lsrs	r1, r1, #31
 8000892:	2aff      	cmp	r2, #255	; 0xff
 8000894:	d00f      	beq.n	80008b6 <__eqsf2+0x3a>
 8000896:	2cff      	cmp	r4, #255	; 0xff
 8000898:	d011      	beq.n	80008be <__eqsf2+0x42>
 800089a:	2001      	movs	r0, #1
 800089c:	42a2      	cmp	r2, r4
 800089e:	d000      	beq.n	80008a2 <__eqsf2+0x26>
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	42b5      	cmp	r5, r6
 80008a4:	d1fc      	bne.n	80008a0 <__eqsf2+0x24>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d00d      	beq.n	80008c6 <__eqsf2+0x4a>
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d1f8      	bne.n	80008a0 <__eqsf2+0x24>
 80008ae:	0028      	movs	r0, r5
 80008b0:	1e45      	subs	r5, r0, #1
 80008b2:	41a8      	sbcs	r0, r5
 80008b4:	e7f4      	b.n	80008a0 <__eqsf2+0x24>
 80008b6:	2001      	movs	r0, #1
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d1f1      	bne.n	80008a0 <__eqsf2+0x24>
 80008bc:	e7eb      	b.n	8000896 <__eqsf2+0x1a>
 80008be:	2001      	movs	r0, #1
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	d1ed      	bne.n	80008a0 <__eqsf2+0x24>
 80008c4:	e7e9      	b.n	800089a <__eqsf2+0x1e>
 80008c6:	2000      	movs	r0, #0
 80008c8:	e7ea      	b.n	80008a0 <__eqsf2+0x24>
 80008ca:	46c0      	nop			; (mov r8, r8)

080008cc <__gesf2>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	004a      	lsls	r2, r1, #1
 80008d0:	024e      	lsls	r6, r1, #9
 80008d2:	0245      	lsls	r5, r0, #9
 80008d4:	0044      	lsls	r4, r0, #1
 80008d6:	0a6d      	lsrs	r5, r5, #9
 80008d8:	0e24      	lsrs	r4, r4, #24
 80008da:	0fc3      	lsrs	r3, r0, #31
 80008dc:	0a76      	lsrs	r6, r6, #9
 80008de:	0e12      	lsrs	r2, r2, #24
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	2cff      	cmp	r4, #255	; 0xff
 80008e4:	d015      	beq.n	8000912 <__gesf2+0x46>
 80008e6:	2aff      	cmp	r2, #255	; 0xff
 80008e8:	d00e      	beq.n	8000908 <__gesf2+0x3c>
 80008ea:	2c00      	cmp	r4, #0
 80008ec:	d115      	bne.n	800091a <__gesf2+0x4e>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d101      	bne.n	80008f6 <__gesf2+0x2a>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d01c      	beq.n	8000930 <__gesf2+0x64>
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d014      	beq.n	8000924 <__gesf2+0x58>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d027      	beq.n	800094e <__gesf2+0x82>
 80008fe:	2002      	movs	r0, #2
 8000900:	3b01      	subs	r3, #1
 8000902:	4018      	ands	r0, r3
 8000904:	3801      	subs	r0, #1
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	2e00      	cmp	r6, #0
 800090a:	d0ee      	beq.n	80008ea <__gesf2+0x1e>
 800090c:	2002      	movs	r0, #2
 800090e:	4240      	negs	r0, r0
 8000910:	e7f9      	b.n	8000906 <__gesf2+0x3a>
 8000912:	2d00      	cmp	r5, #0
 8000914:	d1fa      	bne.n	800090c <__gesf2+0x40>
 8000916:	2aff      	cmp	r2, #255	; 0xff
 8000918:	d00e      	beq.n	8000938 <__gesf2+0x6c>
 800091a:	2a00      	cmp	r2, #0
 800091c:	d10e      	bne.n	800093c <__gesf2+0x70>
 800091e:	2e00      	cmp	r6, #0
 8000920:	d0ed      	beq.n	80008fe <__gesf2+0x32>
 8000922:	e00b      	b.n	800093c <__gesf2+0x70>
 8000924:	2301      	movs	r3, #1
 8000926:	3901      	subs	r1, #1
 8000928:	4399      	bics	r1, r3
 800092a:	0008      	movs	r0, r1
 800092c:	3001      	adds	r0, #1
 800092e:	e7ea      	b.n	8000906 <__gesf2+0x3a>
 8000930:	2000      	movs	r0, #0
 8000932:	2d00      	cmp	r5, #0
 8000934:	d0e7      	beq.n	8000906 <__gesf2+0x3a>
 8000936:	e7e2      	b.n	80008fe <__gesf2+0x32>
 8000938:	2e00      	cmp	r6, #0
 800093a:	d1e7      	bne.n	800090c <__gesf2+0x40>
 800093c:	428b      	cmp	r3, r1
 800093e:	d1de      	bne.n	80008fe <__gesf2+0x32>
 8000940:	4294      	cmp	r4, r2
 8000942:	dd05      	ble.n	8000950 <__gesf2+0x84>
 8000944:	2102      	movs	r1, #2
 8000946:	1e58      	subs	r0, r3, #1
 8000948:	4008      	ands	r0, r1
 800094a:	3801      	subs	r0, #1
 800094c:	e7db      	b.n	8000906 <__gesf2+0x3a>
 800094e:	2400      	movs	r4, #0
 8000950:	42a2      	cmp	r2, r4
 8000952:	dc04      	bgt.n	800095e <__gesf2+0x92>
 8000954:	42b5      	cmp	r5, r6
 8000956:	d8d2      	bhi.n	80008fe <__gesf2+0x32>
 8000958:	2000      	movs	r0, #0
 800095a:	42b5      	cmp	r5, r6
 800095c:	d2d3      	bcs.n	8000906 <__gesf2+0x3a>
 800095e:	1e58      	subs	r0, r3, #1
 8000960:	2301      	movs	r3, #1
 8000962:	4398      	bics	r0, r3
 8000964:	3001      	adds	r0, #1
 8000966:	e7ce      	b.n	8000906 <__gesf2+0x3a>

08000968 <__lesf2>:
 8000968:	b530      	push	{r4, r5, lr}
 800096a:	0042      	lsls	r2, r0, #1
 800096c:	0244      	lsls	r4, r0, #9
 800096e:	024d      	lsls	r5, r1, #9
 8000970:	0fc3      	lsrs	r3, r0, #31
 8000972:	0048      	lsls	r0, r1, #1
 8000974:	0a64      	lsrs	r4, r4, #9
 8000976:	0e12      	lsrs	r2, r2, #24
 8000978:	0a6d      	lsrs	r5, r5, #9
 800097a:	0e00      	lsrs	r0, r0, #24
 800097c:	0fc9      	lsrs	r1, r1, #31
 800097e:	2aff      	cmp	r2, #255	; 0xff
 8000980:	d012      	beq.n	80009a8 <__lesf2+0x40>
 8000982:	28ff      	cmp	r0, #255	; 0xff
 8000984:	d00c      	beq.n	80009a0 <__lesf2+0x38>
 8000986:	2a00      	cmp	r2, #0
 8000988:	d112      	bne.n	80009b0 <__lesf2+0x48>
 800098a:	2800      	cmp	r0, #0
 800098c:	d119      	bne.n	80009c2 <__lesf2+0x5a>
 800098e:	2d00      	cmp	r5, #0
 8000990:	d117      	bne.n	80009c2 <__lesf2+0x5a>
 8000992:	2c00      	cmp	r4, #0
 8000994:	d02b      	beq.n	80009ee <__lesf2+0x86>
 8000996:	2002      	movs	r0, #2
 8000998:	3b01      	subs	r3, #1
 800099a:	4018      	ands	r0, r3
 800099c:	3801      	subs	r0, #1
 800099e:	e026      	b.n	80009ee <__lesf2+0x86>
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0f0      	beq.n	8000986 <__lesf2+0x1e>
 80009a4:	2002      	movs	r0, #2
 80009a6:	e022      	b.n	80009ee <__lesf2+0x86>
 80009a8:	2c00      	cmp	r4, #0
 80009aa:	d1fb      	bne.n	80009a4 <__lesf2+0x3c>
 80009ac:	28ff      	cmp	r0, #255	; 0xff
 80009ae:	d01f      	beq.n	80009f0 <__lesf2+0x88>
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d11f      	bne.n	80009f4 <__lesf2+0x8c>
 80009b4:	2d00      	cmp	r5, #0
 80009b6:	d11d      	bne.n	80009f4 <__lesf2+0x8c>
 80009b8:	2002      	movs	r0, #2
 80009ba:	3b01      	subs	r3, #1
 80009bc:	4018      	ands	r0, r3
 80009be:	3801      	subs	r0, #1
 80009c0:	e015      	b.n	80009ee <__lesf2+0x86>
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d00e      	beq.n	80009e4 <__lesf2+0x7c>
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d1e5      	bne.n	8000996 <__lesf2+0x2e>
 80009ca:	2200      	movs	r2, #0
 80009cc:	4290      	cmp	r0, r2
 80009ce:	dc04      	bgt.n	80009da <__lesf2+0x72>
 80009d0:	42ac      	cmp	r4, r5
 80009d2:	d8e0      	bhi.n	8000996 <__lesf2+0x2e>
 80009d4:	2000      	movs	r0, #0
 80009d6:	42ac      	cmp	r4, r5
 80009d8:	d209      	bcs.n	80009ee <__lesf2+0x86>
 80009da:	1e58      	subs	r0, r3, #1
 80009dc:	2301      	movs	r3, #1
 80009de:	4398      	bics	r0, r3
 80009e0:	3001      	adds	r0, #1
 80009e2:	e004      	b.n	80009ee <__lesf2+0x86>
 80009e4:	2301      	movs	r3, #1
 80009e6:	3901      	subs	r1, #1
 80009e8:	4399      	bics	r1, r3
 80009ea:	0008      	movs	r0, r1
 80009ec:	3001      	adds	r0, #1
 80009ee:	bd30      	pop	{r4, r5, pc}
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d1d7      	bne.n	80009a4 <__lesf2+0x3c>
 80009f4:	428b      	cmp	r3, r1
 80009f6:	d1ce      	bne.n	8000996 <__lesf2+0x2e>
 80009f8:	4282      	cmp	r2, r0
 80009fa:	dde7      	ble.n	80009cc <__lesf2+0x64>
 80009fc:	2102      	movs	r1, #2
 80009fe:	1e58      	subs	r0, r3, #1
 8000a00:	4008      	ands	r0, r1
 8000a02:	3801      	subs	r0, #1
 8000a04:	e7f3      	b.n	80009ee <__lesf2+0x86>
 8000a06:	46c0      	nop			; (mov r8, r8)

08000a08 <__aeabi_fmul>:
 8000a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0a:	464e      	mov	r6, r9
 8000a0c:	4657      	mov	r7, sl
 8000a0e:	4645      	mov	r5, r8
 8000a10:	46de      	mov	lr, fp
 8000a12:	b5e0      	push	{r5, r6, r7, lr}
 8000a14:	0243      	lsls	r3, r0, #9
 8000a16:	0a5b      	lsrs	r3, r3, #9
 8000a18:	0045      	lsls	r5, r0, #1
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	1c0f      	adds	r7, r1, #0
 8000a1e:	4699      	mov	r9, r3
 8000a20:	0e2d      	lsrs	r5, r5, #24
 8000a22:	0fc6      	lsrs	r6, r0, #31
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	d057      	beq.n	8000ad8 <__aeabi_fmul+0xd0>
 8000a28:	2dff      	cmp	r5, #255	; 0xff
 8000a2a:	d024      	beq.n	8000a76 <__aeabi_fmul+0x6e>
 8000a2c:	2080      	movs	r0, #128	; 0x80
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	04c0      	lsls	r0, r0, #19
 8000a32:	4318      	orrs	r0, r3
 8000a34:	2300      	movs	r3, #0
 8000a36:	4681      	mov	r9, r0
 8000a38:	469a      	mov	sl, r3
 8000a3a:	469b      	mov	fp, r3
 8000a3c:	3d7f      	subs	r5, #127	; 0x7f
 8000a3e:	027c      	lsls	r4, r7, #9
 8000a40:	007a      	lsls	r2, r7, #1
 8000a42:	0ffb      	lsrs	r3, r7, #31
 8000a44:	0a64      	lsrs	r4, r4, #9
 8000a46:	0e12      	lsrs	r2, r2, #24
 8000a48:	4698      	mov	r8, r3
 8000a4a:	d023      	beq.n	8000a94 <__aeabi_fmul+0x8c>
 8000a4c:	2aff      	cmp	r2, #255	; 0xff
 8000a4e:	d04b      	beq.n	8000ae8 <__aeabi_fmul+0xe0>
 8000a50:	00e3      	lsls	r3, r4, #3
 8000a52:	2480      	movs	r4, #128	; 0x80
 8000a54:	2000      	movs	r0, #0
 8000a56:	04e4      	lsls	r4, r4, #19
 8000a58:	3a7f      	subs	r2, #127	; 0x7f
 8000a5a:	431c      	orrs	r4, r3
 8000a5c:	18ad      	adds	r5, r5, r2
 8000a5e:	1c6b      	adds	r3, r5, #1
 8000a60:	4647      	mov	r7, r8
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	4653      	mov	r3, sl
 8000a66:	4077      	eors	r7, r6
 8000a68:	003a      	movs	r2, r7
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	d848      	bhi.n	8000b00 <__aeabi_fmul+0xf8>
 8000a6e:	497d      	ldr	r1, [pc, #500]	; (8000c64 <__aeabi_fmul+0x25c>)
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	58cb      	ldr	r3, [r1, r3]
 8000a74:	469f      	mov	pc, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d000      	beq.n	8000a7c <__aeabi_fmul+0x74>
 8000a7a:	e085      	b.n	8000b88 <__aeabi_fmul+0x180>
 8000a7c:	3308      	adds	r3, #8
 8000a7e:	469a      	mov	sl, r3
 8000a80:	3b06      	subs	r3, #6
 8000a82:	469b      	mov	fp, r3
 8000a84:	027c      	lsls	r4, r7, #9
 8000a86:	007a      	lsls	r2, r7, #1
 8000a88:	0ffb      	lsrs	r3, r7, #31
 8000a8a:	25ff      	movs	r5, #255	; 0xff
 8000a8c:	0a64      	lsrs	r4, r4, #9
 8000a8e:	0e12      	lsrs	r2, r2, #24
 8000a90:	4698      	mov	r8, r3
 8000a92:	d1db      	bne.n	8000a4c <__aeabi_fmul+0x44>
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d000      	beq.n	8000a9a <__aeabi_fmul+0x92>
 8000a98:	e090      	b.n	8000bbc <__aeabi_fmul+0x1b4>
 8000a9a:	4652      	mov	r2, sl
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	4692      	mov	sl, r2
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	e7db      	b.n	8000a5e <__aeabi_fmul+0x56>
 8000aa6:	464c      	mov	r4, r9
 8000aa8:	4658      	mov	r0, fp
 8000aaa:	0017      	movs	r7, r2
 8000aac:	2802      	cmp	r0, #2
 8000aae:	d024      	beq.n	8000afa <__aeabi_fmul+0xf2>
 8000ab0:	2803      	cmp	r0, #3
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fmul+0xae>
 8000ab4:	e0cf      	b.n	8000c56 <__aeabi_fmul+0x24e>
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2300      	movs	r3, #0
 8000aba:	2801      	cmp	r0, #1
 8000abc:	d14d      	bne.n	8000b5a <__aeabi_fmul+0x152>
 8000abe:	0258      	lsls	r0, r3, #9
 8000ac0:	05d2      	lsls	r2, r2, #23
 8000ac2:	0a40      	lsrs	r0, r0, #9
 8000ac4:	07ff      	lsls	r7, r7, #31
 8000ac6:	4310      	orrs	r0, r2
 8000ac8:	4338      	orrs	r0, r7
 8000aca:	b003      	add	sp, #12
 8000acc:	bc3c      	pop	{r2, r3, r4, r5}
 8000ace:	4690      	mov	r8, r2
 8000ad0:	4699      	mov	r9, r3
 8000ad2:	46a2      	mov	sl, r4
 8000ad4:	46ab      	mov	fp, r5
 8000ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d15b      	bne.n	8000b94 <__aeabi_fmul+0x18c>
 8000adc:	2304      	movs	r3, #4
 8000ade:	469a      	mov	sl, r3
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	469b      	mov	fp, r3
 8000ae6:	e7aa      	b.n	8000a3e <__aeabi_fmul+0x36>
 8000ae8:	35ff      	adds	r5, #255	; 0xff
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d160      	bne.n	8000bb0 <__aeabi_fmul+0x1a8>
 8000aee:	4652      	mov	r2, sl
 8000af0:	2302      	movs	r3, #2
 8000af2:	431a      	orrs	r2, r3
 8000af4:	4692      	mov	sl, r2
 8000af6:	2002      	movs	r0, #2
 8000af8:	e7b1      	b.n	8000a5e <__aeabi_fmul+0x56>
 8000afa:	22ff      	movs	r2, #255	; 0xff
 8000afc:	2300      	movs	r3, #0
 8000afe:	e7de      	b.n	8000abe <__aeabi_fmul+0xb6>
 8000b00:	464b      	mov	r3, r9
 8000b02:	0c1b      	lsrs	r3, r3, #16
 8000b04:	469c      	mov	ip, r3
 8000b06:	464b      	mov	r3, r9
 8000b08:	0426      	lsls	r6, r4, #16
 8000b0a:	0c36      	lsrs	r6, r6, #16
 8000b0c:	0418      	lsls	r0, r3, #16
 8000b0e:	4661      	mov	r1, ip
 8000b10:	0033      	movs	r3, r6
 8000b12:	0c22      	lsrs	r2, r4, #16
 8000b14:	4664      	mov	r4, ip
 8000b16:	0c00      	lsrs	r0, r0, #16
 8000b18:	4343      	muls	r3, r0
 8000b1a:	434e      	muls	r6, r1
 8000b1c:	4350      	muls	r0, r2
 8000b1e:	4354      	muls	r4, r2
 8000b20:	1980      	adds	r0, r0, r6
 8000b22:	0c1a      	lsrs	r2, r3, #16
 8000b24:	1812      	adds	r2, r2, r0
 8000b26:	4296      	cmp	r6, r2
 8000b28:	d903      	bls.n	8000b32 <__aeabi_fmul+0x12a>
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	0249      	lsls	r1, r1, #9
 8000b2e:	468c      	mov	ip, r1
 8000b30:	4464      	add	r4, ip
 8000b32:	041b      	lsls	r3, r3, #16
 8000b34:	0c1b      	lsrs	r3, r3, #16
 8000b36:	0410      	lsls	r0, r2, #16
 8000b38:	18c0      	adds	r0, r0, r3
 8000b3a:	0183      	lsls	r3, r0, #6
 8000b3c:	1e5e      	subs	r6, r3, #1
 8000b3e:	41b3      	sbcs	r3, r6
 8000b40:	0e80      	lsrs	r0, r0, #26
 8000b42:	4318      	orrs	r0, r3
 8000b44:	0c13      	lsrs	r3, r2, #16
 8000b46:	191b      	adds	r3, r3, r4
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	4303      	orrs	r3, r0
 8000b4c:	001c      	movs	r4, r3
 8000b4e:	0123      	lsls	r3, r4, #4
 8000b50:	d579      	bpl.n	8000c46 <__aeabi_fmul+0x23e>
 8000b52:	2301      	movs	r3, #1
 8000b54:	0862      	lsrs	r2, r4, #1
 8000b56:	401c      	ands	r4, r3
 8000b58:	4314      	orrs	r4, r2
 8000b5a:	9a01      	ldr	r2, [sp, #4]
 8000b5c:	327f      	adds	r2, #127	; 0x7f
 8000b5e:	2a00      	cmp	r2, #0
 8000b60:	dd4d      	ble.n	8000bfe <__aeabi_fmul+0x1f6>
 8000b62:	0763      	lsls	r3, r4, #29
 8000b64:	d004      	beq.n	8000b70 <__aeabi_fmul+0x168>
 8000b66:	230f      	movs	r3, #15
 8000b68:	4023      	ands	r3, r4
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d000      	beq.n	8000b70 <__aeabi_fmul+0x168>
 8000b6e:	3404      	adds	r4, #4
 8000b70:	0123      	lsls	r3, r4, #4
 8000b72:	d503      	bpl.n	8000b7c <__aeabi_fmul+0x174>
 8000b74:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <__aeabi_fmul+0x260>)
 8000b76:	9a01      	ldr	r2, [sp, #4]
 8000b78:	401c      	ands	r4, r3
 8000b7a:	3280      	adds	r2, #128	; 0x80
 8000b7c:	2afe      	cmp	r2, #254	; 0xfe
 8000b7e:	dcbc      	bgt.n	8000afa <__aeabi_fmul+0xf2>
 8000b80:	01a3      	lsls	r3, r4, #6
 8000b82:	0a5b      	lsrs	r3, r3, #9
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	e79a      	b.n	8000abe <__aeabi_fmul+0xb6>
 8000b88:	230c      	movs	r3, #12
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	3b09      	subs	r3, #9
 8000b8e:	25ff      	movs	r5, #255	; 0xff
 8000b90:	469b      	mov	fp, r3
 8000b92:	e754      	b.n	8000a3e <__aeabi_fmul+0x36>
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fa8d 	bl	80010b4 <__clzsi2>
 8000b9a:	464a      	mov	r2, r9
 8000b9c:	1f43      	subs	r3, r0, #5
 8000b9e:	2576      	movs	r5, #118	; 0x76
 8000ba0:	409a      	lsls	r2, r3
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	426d      	negs	r5, r5
 8000ba6:	4691      	mov	r9, r2
 8000ba8:	1a2d      	subs	r5, r5, r0
 8000baa:	469a      	mov	sl, r3
 8000bac:	469b      	mov	fp, r3
 8000bae:	e746      	b.n	8000a3e <__aeabi_fmul+0x36>
 8000bb0:	4652      	mov	r2, sl
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	2003      	movs	r0, #3
 8000bba:	e750      	b.n	8000a5e <__aeabi_fmul+0x56>
 8000bbc:	0020      	movs	r0, r4
 8000bbe:	f000 fa79 	bl	80010b4 <__clzsi2>
 8000bc2:	1f43      	subs	r3, r0, #5
 8000bc4:	1a2d      	subs	r5, r5, r0
 8000bc6:	409c      	lsls	r4, r3
 8000bc8:	3d76      	subs	r5, #118	; 0x76
 8000bca:	2000      	movs	r0, #0
 8000bcc:	e747      	b.n	8000a5e <__aeabi_fmul+0x56>
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	03db      	lsls	r3, r3, #15
 8000bd4:	22ff      	movs	r2, #255	; 0xff
 8000bd6:	e772      	b.n	8000abe <__aeabi_fmul+0xb6>
 8000bd8:	4642      	mov	r2, r8
 8000bda:	e766      	b.n	8000aaa <__aeabi_fmul+0xa2>
 8000bdc:	464c      	mov	r4, r9
 8000bde:	0032      	movs	r2, r6
 8000be0:	4658      	mov	r0, fp
 8000be2:	e762      	b.n	8000aaa <__aeabi_fmul+0xa2>
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	464a      	mov	r2, r9
 8000be8:	03db      	lsls	r3, r3, #15
 8000bea:	421a      	tst	r2, r3
 8000bec:	d022      	beq.n	8000c34 <__aeabi_fmul+0x22c>
 8000bee:	421c      	tst	r4, r3
 8000bf0:	d120      	bne.n	8000c34 <__aeabi_fmul+0x22c>
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	025b      	lsls	r3, r3, #9
 8000bf6:	0a5b      	lsrs	r3, r3, #9
 8000bf8:	4647      	mov	r7, r8
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	e75f      	b.n	8000abe <__aeabi_fmul+0xb6>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	1a9a      	subs	r2, r3, r2
 8000c02:	2a1b      	cmp	r2, #27
 8000c04:	dc21      	bgt.n	8000c4a <__aeabi_fmul+0x242>
 8000c06:	0023      	movs	r3, r4
 8000c08:	9901      	ldr	r1, [sp, #4]
 8000c0a:	40d3      	lsrs	r3, r2
 8000c0c:	319e      	adds	r1, #158	; 0x9e
 8000c0e:	408c      	lsls	r4, r1
 8000c10:	001a      	movs	r2, r3
 8000c12:	0023      	movs	r3, r4
 8000c14:	1e5c      	subs	r4, r3, #1
 8000c16:	41a3      	sbcs	r3, r4
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	075a      	lsls	r2, r3, #29
 8000c1c:	d004      	beq.n	8000c28 <__aeabi_fmul+0x220>
 8000c1e:	220f      	movs	r2, #15
 8000c20:	401a      	ands	r2, r3
 8000c22:	2a04      	cmp	r2, #4
 8000c24:	d000      	beq.n	8000c28 <__aeabi_fmul+0x220>
 8000c26:	3304      	adds	r3, #4
 8000c28:	015a      	lsls	r2, r3, #5
 8000c2a:	d411      	bmi.n	8000c50 <__aeabi_fmul+0x248>
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	0a5b      	lsrs	r3, r3, #9
 8000c30:	2200      	movs	r2, #0
 8000c32:	e744      	b.n	8000abe <__aeabi_fmul+0xb6>
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	464a      	mov	r2, r9
 8000c38:	03db      	lsls	r3, r3, #15
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	025b      	lsls	r3, r3, #9
 8000c3e:	0a5b      	lsrs	r3, r3, #9
 8000c40:	0037      	movs	r7, r6
 8000c42:	22ff      	movs	r2, #255	; 0xff
 8000c44:	e73b      	b.n	8000abe <__aeabi_fmul+0xb6>
 8000c46:	9501      	str	r5, [sp, #4]
 8000c48:	e787      	b.n	8000b5a <__aeabi_fmul+0x152>
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e736      	b.n	8000abe <__aeabi_fmul+0xb6>
 8000c50:	2201      	movs	r2, #1
 8000c52:	2300      	movs	r3, #0
 8000c54:	e733      	b.n	8000abe <__aeabi_fmul+0xb6>
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	03db      	lsls	r3, r3, #15
 8000c5a:	4323      	orrs	r3, r4
 8000c5c:	025b      	lsls	r3, r3, #9
 8000c5e:	0a5b      	lsrs	r3, r3, #9
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	e72c      	b.n	8000abe <__aeabi_fmul+0xb6>
 8000c64:	08007688 	.word	0x08007688
 8000c68:	f7ffffff 	.word	0xf7ffffff

08000c6c <__aeabi_fsub>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	4647      	mov	r7, r8
 8000c70:	46ce      	mov	lr, r9
 8000c72:	0044      	lsls	r4, r0, #1
 8000c74:	0fc2      	lsrs	r2, r0, #31
 8000c76:	b580      	push	{r7, lr}
 8000c78:	0247      	lsls	r7, r0, #9
 8000c7a:	0248      	lsls	r0, r1, #9
 8000c7c:	0a40      	lsrs	r0, r0, #9
 8000c7e:	4684      	mov	ip, r0
 8000c80:	4666      	mov	r6, ip
 8000c82:	0048      	lsls	r0, r1, #1
 8000c84:	0a7f      	lsrs	r7, r7, #9
 8000c86:	0e24      	lsrs	r4, r4, #24
 8000c88:	00f6      	lsls	r6, r6, #3
 8000c8a:	0025      	movs	r5, r4
 8000c8c:	4690      	mov	r8, r2
 8000c8e:	00fb      	lsls	r3, r7, #3
 8000c90:	0e00      	lsrs	r0, r0, #24
 8000c92:	0fc9      	lsrs	r1, r1, #31
 8000c94:	46b1      	mov	r9, r6
 8000c96:	28ff      	cmp	r0, #255	; 0xff
 8000c98:	d100      	bne.n	8000c9c <__aeabi_fsub+0x30>
 8000c9a:	e085      	b.n	8000da8 <__aeabi_fsub+0x13c>
 8000c9c:	2601      	movs	r6, #1
 8000c9e:	4071      	eors	r1, r6
 8000ca0:	1a26      	subs	r6, r4, r0
 8000ca2:	4291      	cmp	r1, r2
 8000ca4:	d057      	beq.n	8000d56 <__aeabi_fsub+0xea>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	dd43      	ble.n	8000d32 <__aeabi_fsub+0xc6>
 8000caa:	2800      	cmp	r0, #0
 8000cac:	d000      	beq.n	8000cb0 <__aeabi_fsub+0x44>
 8000cae:	e07f      	b.n	8000db0 <__aeabi_fsub+0x144>
 8000cb0:	4649      	mov	r1, r9
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fsub+0x4c>
 8000cb6:	e0aa      	b.n	8000e0e <__aeabi_fsub+0x1a2>
 8000cb8:	3e01      	subs	r6, #1
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_fsub+0x54>
 8000cbe:	e0f7      	b.n	8000eb0 <__aeabi_fsub+0x244>
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	015a      	lsls	r2, r3, #5
 8000cc4:	d400      	bmi.n	8000cc8 <__aeabi_fsub+0x5c>
 8000cc6:	e08b      	b.n	8000de0 <__aeabi_fsub+0x174>
 8000cc8:	019b      	lsls	r3, r3, #6
 8000cca:	099c      	lsrs	r4, r3, #6
 8000ccc:	0020      	movs	r0, r4
 8000cce:	f000 f9f1 	bl	80010b4 <__clzsi2>
 8000cd2:	3805      	subs	r0, #5
 8000cd4:	4084      	lsls	r4, r0
 8000cd6:	4285      	cmp	r5, r0
 8000cd8:	dd00      	ble.n	8000cdc <__aeabi_fsub+0x70>
 8000cda:	e0d3      	b.n	8000e84 <__aeabi_fsub+0x218>
 8000cdc:	1b45      	subs	r5, r0, r5
 8000cde:	0023      	movs	r3, r4
 8000ce0:	2020      	movs	r0, #32
 8000ce2:	3501      	adds	r5, #1
 8000ce4:	40eb      	lsrs	r3, r5
 8000ce6:	1b45      	subs	r5, r0, r5
 8000ce8:	40ac      	lsls	r4, r5
 8000cea:	1e62      	subs	r2, r4, #1
 8000cec:	4194      	sbcs	r4, r2
 8000cee:	4323      	orrs	r3, r4
 8000cf0:	2407      	movs	r4, #7
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	401c      	ands	r4, r3
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4641      	mov	r1, r8
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	2c00      	cmp	r4, #0
 8000cfe:	d004      	beq.n	8000d0a <__aeabi_fsub+0x9e>
 8000d00:	210f      	movs	r1, #15
 8000d02:	4019      	ands	r1, r3
 8000d04:	2904      	cmp	r1, #4
 8000d06:	d000      	beq.n	8000d0a <__aeabi_fsub+0x9e>
 8000d08:	3304      	adds	r3, #4
 8000d0a:	0159      	lsls	r1, r3, #5
 8000d0c:	d400      	bmi.n	8000d10 <__aeabi_fsub+0xa4>
 8000d0e:	e080      	b.n	8000e12 <__aeabi_fsub+0x1a6>
 8000d10:	3501      	adds	r5, #1
 8000d12:	b2ec      	uxtb	r4, r5
 8000d14:	2dff      	cmp	r5, #255	; 0xff
 8000d16:	d000      	beq.n	8000d1a <__aeabi_fsub+0xae>
 8000d18:	e0a3      	b.n	8000e62 <__aeabi_fsub+0x1f6>
 8000d1a:	24ff      	movs	r4, #255	; 0xff
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	025b      	lsls	r3, r3, #9
 8000d20:	05e4      	lsls	r4, r4, #23
 8000d22:	0a58      	lsrs	r0, r3, #9
 8000d24:	07d2      	lsls	r2, r2, #31
 8000d26:	4320      	orrs	r0, r4
 8000d28:	4310      	orrs	r0, r2
 8000d2a:	bc0c      	pop	{r2, r3}
 8000d2c:	4690      	mov	r8, r2
 8000d2e:	4699      	mov	r9, r3
 8000d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d174      	bne.n	8000e20 <__aeabi_fsub+0x1b4>
 8000d36:	1c60      	adds	r0, r4, #1
 8000d38:	b2c0      	uxtb	r0, r0
 8000d3a:	2801      	cmp	r0, #1
 8000d3c:	dc00      	bgt.n	8000d40 <__aeabi_fsub+0xd4>
 8000d3e:	e0a7      	b.n	8000e90 <__aeabi_fsub+0x224>
 8000d40:	464a      	mov	r2, r9
 8000d42:	1a9c      	subs	r4, r3, r2
 8000d44:	0162      	lsls	r2, r4, #5
 8000d46:	d500      	bpl.n	8000d4a <__aeabi_fsub+0xde>
 8000d48:	e0b6      	b.n	8000eb8 <__aeabi_fsub+0x24c>
 8000d4a:	2c00      	cmp	r4, #0
 8000d4c:	d1be      	bne.n	8000ccc <__aeabi_fsub+0x60>
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2400      	movs	r4, #0
 8000d52:	2300      	movs	r3, #0
 8000d54:	e7e3      	b.n	8000d1e <__aeabi_fsub+0xb2>
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	dc00      	bgt.n	8000d5c <__aeabi_fsub+0xf0>
 8000d5a:	e085      	b.n	8000e68 <__aeabi_fsub+0x1fc>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d046      	beq.n	8000dee <__aeabi_fsub+0x182>
 8000d60:	2cff      	cmp	r4, #255	; 0xff
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fsub+0x18c>
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	4648      	mov	r0, r9
 8000d68:	04d2      	lsls	r2, r2, #19
 8000d6a:	4310      	orrs	r0, r2
 8000d6c:	4681      	mov	r9, r0
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2e1b      	cmp	r6, #27
 8000d72:	dc09      	bgt.n	8000d88 <__aeabi_fsub+0x11c>
 8000d74:	2020      	movs	r0, #32
 8000d76:	464c      	mov	r4, r9
 8000d78:	1b80      	subs	r0, r0, r6
 8000d7a:	4084      	lsls	r4, r0
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	0020      	movs	r0, r4
 8000d80:	40f2      	lsrs	r2, r6
 8000d82:	1e44      	subs	r4, r0, #1
 8000d84:	41a0      	sbcs	r0, r4
 8000d86:	4302      	orrs	r2, r0
 8000d88:	189b      	adds	r3, r3, r2
 8000d8a:	015a      	lsls	r2, r3, #5
 8000d8c:	d528      	bpl.n	8000de0 <__aeabi_fsub+0x174>
 8000d8e:	3501      	adds	r5, #1
 8000d90:	2dff      	cmp	r5, #255	; 0xff
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x12a>
 8000d94:	e0a8      	b.n	8000ee8 <__aeabi_fsub+0x27c>
 8000d96:	2201      	movs	r2, #1
 8000d98:	2407      	movs	r4, #7
 8000d9a:	4994      	ldr	r1, [pc, #592]	; (8000fec <__aeabi_fsub+0x380>)
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	085b      	lsrs	r3, r3, #1
 8000da0:	400b      	ands	r3, r1
 8000da2:	4313      	orrs	r3, r2
 8000da4:	401c      	ands	r4, r3
 8000da6:	e7a6      	b.n	8000cf6 <__aeabi_fsub+0x8a>
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d000      	beq.n	8000dae <__aeabi_fsub+0x142>
 8000dac:	e778      	b.n	8000ca0 <__aeabi_fsub+0x34>
 8000dae:	e775      	b.n	8000c9c <__aeabi_fsub+0x30>
 8000db0:	2cff      	cmp	r4, #255	; 0xff
 8000db2:	d054      	beq.n	8000e5e <__aeabi_fsub+0x1f2>
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	4649      	mov	r1, r9
 8000db8:	04d2      	lsls	r2, r2, #19
 8000dba:	4311      	orrs	r1, r2
 8000dbc:	4689      	mov	r9, r1
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2e1b      	cmp	r6, #27
 8000dc2:	dc09      	bgt.n	8000dd8 <__aeabi_fsub+0x16c>
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	4648      	mov	r0, r9
 8000dc8:	1b89      	subs	r1, r1, r6
 8000dca:	4088      	lsls	r0, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0001      	movs	r1, r0
 8000dd0:	40f2      	lsrs	r2, r6
 8000dd2:	1e48      	subs	r0, r1, #1
 8000dd4:	4181      	sbcs	r1, r0
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	015a      	lsls	r2, r3, #5
 8000ddc:	d500      	bpl.n	8000de0 <__aeabi_fsub+0x174>
 8000dde:	e773      	b.n	8000cc8 <__aeabi_fsub+0x5c>
 8000de0:	2201      	movs	r2, #1
 8000de2:	4641      	mov	r1, r8
 8000de4:	400a      	ands	r2, r1
 8000de6:	0759      	lsls	r1, r3, #29
 8000de8:	d000      	beq.n	8000dec <__aeabi_fsub+0x180>
 8000dea:	e789      	b.n	8000d00 <__aeabi_fsub+0x94>
 8000dec:	e011      	b.n	8000e12 <__aeabi_fsub+0x1a6>
 8000dee:	4648      	mov	r0, r9
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d158      	bne.n	8000ea6 <__aeabi_fsub+0x23a>
 8000df4:	2cff      	cmp	r4, #255	; 0xff
 8000df6:	d10c      	bne.n	8000e12 <__aeabi_fsub+0x1a6>
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_fsub+0x194>
 8000dfe:	e78c      	b.n	8000d1a <__aeabi_fsub+0xae>
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	03c0      	lsls	r0, r0, #15
 8000e04:	4303      	orrs	r3, r0
 8000e06:	025b      	lsls	r3, r3, #9
 8000e08:	0a5b      	lsrs	r3, r3, #9
 8000e0a:	24ff      	movs	r4, #255	; 0xff
 8000e0c:	e787      	b.n	8000d1e <__aeabi_fsub+0xb2>
 8000e0e:	2cff      	cmp	r4, #255	; 0xff
 8000e10:	d025      	beq.n	8000e5e <__aeabi_fsub+0x1f2>
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	2dff      	cmp	r5, #255	; 0xff
 8000e16:	d0f0      	beq.n	8000dfa <__aeabi_fsub+0x18e>
 8000e18:	025b      	lsls	r3, r3, #9
 8000e1a:	0a5b      	lsrs	r3, r3, #9
 8000e1c:	b2ec      	uxtb	r4, r5
 8000e1e:	e77e      	b.n	8000d1e <__aeabi_fsub+0xb2>
 8000e20:	2c00      	cmp	r4, #0
 8000e22:	d04d      	beq.n	8000ec0 <__aeabi_fsub+0x254>
 8000e24:	28ff      	cmp	r0, #255	; 0xff
 8000e26:	d018      	beq.n	8000e5a <__aeabi_fsub+0x1ee>
 8000e28:	2480      	movs	r4, #128	; 0x80
 8000e2a:	04e4      	lsls	r4, r4, #19
 8000e2c:	4272      	negs	r2, r6
 8000e2e:	4323      	orrs	r3, r4
 8000e30:	2a1b      	cmp	r2, #27
 8000e32:	dd00      	ble.n	8000e36 <__aeabi_fsub+0x1ca>
 8000e34:	e0c4      	b.n	8000fc0 <__aeabi_fsub+0x354>
 8000e36:	001c      	movs	r4, r3
 8000e38:	2520      	movs	r5, #32
 8000e3a:	40d4      	lsrs	r4, r2
 8000e3c:	1aaa      	subs	r2, r5, r2
 8000e3e:	4093      	lsls	r3, r2
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	4193      	sbcs	r3, r2
 8000e44:	4323      	orrs	r3, r4
 8000e46:	464a      	mov	r2, r9
 8000e48:	0005      	movs	r5, r0
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	4688      	mov	r8, r1
 8000e4e:	e738      	b.n	8000cc2 <__aeabi_fsub+0x56>
 8000e50:	1c72      	adds	r2, r6, #1
 8000e52:	d0f8      	beq.n	8000e46 <__aeabi_fsub+0x1da>
 8000e54:	43f2      	mvns	r2, r6
 8000e56:	28ff      	cmp	r0, #255	; 0xff
 8000e58:	d1ea      	bne.n	8000e30 <__aeabi_fsub+0x1c4>
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	464b      	mov	r3, r9
 8000e5e:	25ff      	movs	r5, #255	; 0xff
 8000e60:	e7d7      	b.n	8000e12 <__aeabi_fsub+0x1a6>
 8000e62:	019b      	lsls	r3, r3, #6
 8000e64:	0a5b      	lsrs	r3, r3, #9
 8000e66:	e75a      	b.n	8000d1e <__aeabi_fsub+0xb2>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d141      	bne.n	8000ef0 <__aeabi_fsub+0x284>
 8000e6c:	1c65      	adds	r5, r4, #1
 8000e6e:	b2e9      	uxtb	r1, r5
 8000e70:	2901      	cmp	r1, #1
 8000e72:	dd45      	ble.n	8000f00 <__aeabi_fsub+0x294>
 8000e74:	2dff      	cmp	r5, #255	; 0xff
 8000e76:	d100      	bne.n	8000e7a <__aeabi_fsub+0x20e>
 8000e78:	e74f      	b.n	8000d1a <__aeabi_fsub+0xae>
 8000e7a:	2407      	movs	r4, #7
 8000e7c:	444b      	add	r3, r9
 8000e7e:	085b      	lsrs	r3, r3, #1
 8000e80:	401c      	ands	r4, r3
 8000e82:	e738      	b.n	8000cf6 <__aeabi_fsub+0x8a>
 8000e84:	2207      	movs	r2, #7
 8000e86:	4b5a      	ldr	r3, [pc, #360]	; (8000ff0 <__aeabi_fsub+0x384>)
 8000e88:	1a2d      	subs	r5, r5, r0
 8000e8a:	4023      	ands	r3, r4
 8000e8c:	4014      	ands	r4, r2
 8000e8e:	e732      	b.n	8000cf6 <__aeabi_fsub+0x8a>
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d11d      	bne.n	8000ed0 <__aeabi_fsub+0x264>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d17a      	bne.n	8000f8e <__aeabi_fsub+0x322>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_fsub+0x234>
 8000e9e:	e091      	b.n	8000fc4 <__aeabi_fsub+0x358>
 8000ea0:	000a      	movs	r2, r1
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	e7b5      	b.n	8000e12 <__aeabi_fsub+0x1a6>
 8000ea6:	3e01      	subs	r6, #1
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d119      	bne.n	8000ee0 <__aeabi_fsub+0x274>
 8000eac:	444b      	add	r3, r9
 8000eae:	e76c      	b.n	8000d8a <__aeabi_fsub+0x11e>
 8000eb0:	2cff      	cmp	r4, #255	; 0xff
 8000eb2:	d184      	bne.n	8000dbe <__aeabi_fsub+0x152>
 8000eb4:	25ff      	movs	r5, #255	; 0xff
 8000eb6:	e7ac      	b.n	8000e12 <__aeabi_fsub+0x1a6>
 8000eb8:	464a      	mov	r2, r9
 8000eba:	4688      	mov	r8, r1
 8000ebc:	1ad4      	subs	r4, r2, r3
 8000ebe:	e705      	b.n	8000ccc <__aeabi_fsub+0x60>
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1c5      	bne.n	8000e50 <__aeabi_fsub+0x1e4>
 8000ec4:	000a      	movs	r2, r1
 8000ec6:	28ff      	cmp	r0, #255	; 0xff
 8000ec8:	d0c8      	beq.n	8000e5c <__aeabi_fsub+0x1f0>
 8000eca:	0005      	movs	r5, r0
 8000ecc:	464b      	mov	r3, r9
 8000ece:	e7a0      	b.n	8000e12 <__aeabi_fsub+0x1a6>
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d149      	bne.n	8000f68 <__aeabi_fsub+0x2fc>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d077      	beq.n	8000fca <__aeabi_fsub+0x35e>
 8000eda:	000a      	movs	r2, r1
 8000edc:	25ff      	movs	r5, #255	; 0xff
 8000ede:	e798      	b.n	8000e12 <__aeabi_fsub+0x1a6>
 8000ee0:	2cff      	cmp	r4, #255	; 0xff
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_fsub+0x27a>
 8000ee4:	e743      	b.n	8000d6e <__aeabi_fsub+0x102>
 8000ee6:	e787      	b.n	8000df8 <__aeabi_fsub+0x18c>
 8000ee8:	000a      	movs	r2, r1
 8000eea:	24ff      	movs	r4, #255	; 0xff
 8000eec:	2300      	movs	r3, #0
 8000eee:	e716      	b.n	8000d1e <__aeabi_fsub+0xb2>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d115      	bne.n	8000f20 <__aeabi_fsub+0x2b4>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d157      	bne.n	8000fa8 <__aeabi_fsub+0x33c>
 8000ef8:	28ff      	cmp	r0, #255	; 0xff
 8000efa:	d1e6      	bne.n	8000eca <__aeabi_fsub+0x25e>
 8000efc:	464b      	mov	r3, r9
 8000efe:	e77b      	b.n	8000df8 <__aeabi_fsub+0x18c>
 8000f00:	2c00      	cmp	r4, #0
 8000f02:	d120      	bne.n	8000f46 <__aeabi_fsub+0x2da>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d057      	beq.n	8000fb8 <__aeabi_fsub+0x34c>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	2900      	cmp	r1, #0
 8000f0c:	d053      	beq.n	8000fb6 <__aeabi_fsub+0x34a>
 8000f0e:	444b      	add	r3, r9
 8000f10:	015a      	lsls	r2, r3, #5
 8000f12:	d568      	bpl.n	8000fe6 <__aeabi_fsub+0x37a>
 8000f14:	2407      	movs	r4, #7
 8000f16:	4a36      	ldr	r2, [pc, #216]	; (8000ff0 <__aeabi_fsub+0x384>)
 8000f18:	401c      	ands	r4, r3
 8000f1a:	2501      	movs	r5, #1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	e6ea      	b.n	8000cf6 <__aeabi_fsub+0x8a>
 8000f20:	28ff      	cmp	r0, #255	; 0xff
 8000f22:	d0eb      	beq.n	8000efc <__aeabi_fsub+0x290>
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	04d2      	lsls	r2, r2, #19
 8000f28:	4276      	negs	r6, r6
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	2e1b      	cmp	r6, #27
 8000f2e:	dc53      	bgt.n	8000fd8 <__aeabi_fsub+0x36c>
 8000f30:	2520      	movs	r5, #32
 8000f32:	1bad      	subs	r5, r5, r6
 8000f34:	001a      	movs	r2, r3
 8000f36:	40ab      	lsls	r3, r5
 8000f38:	40f2      	lsrs	r2, r6
 8000f3a:	1e5c      	subs	r4, r3, #1
 8000f3c:	41a3      	sbcs	r3, r4
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	444b      	add	r3, r9
 8000f42:	0005      	movs	r5, r0
 8000f44:	e721      	b.n	8000d8a <__aeabi_fsub+0x11e>
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0d8      	beq.n	8000efc <__aeabi_fsub+0x290>
 8000f4a:	4649      	mov	r1, r9
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_fsub+0x2e6>
 8000f50:	e752      	b.n	8000df8 <__aeabi_fsub+0x18c>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	03c9      	lsls	r1, r1, #15
 8000f56:	420f      	tst	r7, r1
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x2f0>
 8000f5a:	e74d      	b.n	8000df8 <__aeabi_fsub+0x18c>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	4208      	tst	r0, r1
 8000f60:	d000      	beq.n	8000f64 <__aeabi_fsub+0x2f8>
 8000f62:	e749      	b.n	8000df8 <__aeabi_fsub+0x18c>
 8000f64:	464b      	mov	r3, r9
 8000f66:	e747      	b.n	8000df8 <__aeabi_fsub+0x18c>
 8000f68:	4648      	mov	r0, r9
 8000f6a:	25ff      	movs	r5, #255	; 0xff
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_fsub+0x306>
 8000f70:	e74f      	b.n	8000e12 <__aeabi_fsub+0x1a6>
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	03d2      	lsls	r2, r2, #15
 8000f76:	4217      	tst	r7, r2
 8000f78:	d004      	beq.n	8000f84 <__aeabi_fsub+0x318>
 8000f7a:	4660      	mov	r0, ip
 8000f7c:	4210      	tst	r0, r2
 8000f7e:	d101      	bne.n	8000f84 <__aeabi_fsub+0x318>
 8000f80:	464b      	mov	r3, r9
 8000f82:	4688      	mov	r8, r1
 8000f84:	2201      	movs	r2, #1
 8000f86:	4641      	mov	r1, r8
 8000f88:	25ff      	movs	r5, #255	; 0xff
 8000f8a:	400a      	ands	r2, r1
 8000f8c:	e741      	b.n	8000e12 <__aeabi_fsub+0x1a6>
 8000f8e:	4648      	mov	r0, r9
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d01f      	beq.n	8000fd4 <__aeabi_fsub+0x368>
 8000f94:	1a1a      	subs	r2, r3, r0
 8000f96:	0150      	lsls	r0, r2, #5
 8000f98:	d520      	bpl.n	8000fdc <__aeabi_fsub+0x370>
 8000f9a:	464a      	mov	r2, r9
 8000f9c:	2407      	movs	r4, #7
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	401c      	ands	r4, r3
 8000fa2:	4688      	mov	r8, r1
 8000fa4:	2500      	movs	r5, #0
 8000fa6:	e6a6      	b.n	8000cf6 <__aeabi_fsub+0x8a>
 8000fa8:	1c74      	adds	r4, r6, #1
 8000faa:	d0c9      	beq.n	8000f40 <__aeabi_fsub+0x2d4>
 8000fac:	43f6      	mvns	r6, r6
 8000fae:	28ff      	cmp	r0, #255	; 0xff
 8000fb0:	d1bc      	bne.n	8000f2c <__aeabi_fsub+0x2c0>
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	e720      	b.n	8000df8 <__aeabi_fsub+0x18c>
 8000fb6:	4699      	mov	r9, r3
 8000fb8:	464b      	mov	r3, r9
 8000fba:	2500      	movs	r5, #0
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	e72b      	b.n	8000e18 <__aeabi_fsub+0x1ac>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e740      	b.n	8000e46 <__aeabi_fsub+0x1da>
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e6a9      	b.n	8000d1e <__aeabi_fsub+0xb2>
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	2200      	movs	r2, #0
 8000fce:	03db      	lsls	r3, r3, #15
 8000fd0:	24ff      	movs	r4, #255	; 0xff
 8000fd2:	e6a4      	b.n	8000d1e <__aeabi_fsub+0xb2>
 8000fd4:	2500      	movs	r5, #0
 8000fd6:	e71c      	b.n	8000e12 <__aeabi_fsub+0x1a6>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e7b1      	b.n	8000f40 <__aeabi_fsub+0x2d4>
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	d0f1      	beq.n	8000fc4 <__aeabi_fsub+0x358>
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	2500      	movs	r5, #0
 8000fe4:	e6fc      	b.n	8000de0 <__aeabi_fsub+0x174>
 8000fe6:	2500      	movs	r5, #0
 8000fe8:	e6fa      	b.n	8000de0 <__aeabi_fsub+0x174>
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	7dffffff 	.word	0x7dffffff
 8000ff0:	fbffffff 	.word	0xfbffffff

08000ff4 <__aeabi_f2iz>:
 8000ff4:	0241      	lsls	r1, r0, #9
 8000ff6:	0042      	lsls	r2, r0, #1
 8000ff8:	0fc3      	lsrs	r3, r0, #31
 8000ffa:	0a49      	lsrs	r1, r1, #9
 8000ffc:	0e12      	lsrs	r2, r2, #24
 8000ffe:	2000      	movs	r0, #0
 8001000:	2a7e      	cmp	r2, #126	; 0x7e
 8001002:	d90d      	bls.n	8001020 <__aeabi_f2iz+0x2c>
 8001004:	2a9d      	cmp	r2, #157	; 0x9d
 8001006:	d80c      	bhi.n	8001022 <__aeabi_f2iz+0x2e>
 8001008:	2080      	movs	r0, #128	; 0x80
 800100a:	0400      	lsls	r0, r0, #16
 800100c:	4301      	orrs	r1, r0
 800100e:	2a95      	cmp	r2, #149	; 0x95
 8001010:	dc0a      	bgt.n	8001028 <__aeabi_f2iz+0x34>
 8001012:	2096      	movs	r0, #150	; 0x96
 8001014:	1a82      	subs	r2, r0, r2
 8001016:	40d1      	lsrs	r1, r2
 8001018:	4248      	negs	r0, r1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d100      	bne.n	8001020 <__aeabi_f2iz+0x2c>
 800101e:	0008      	movs	r0, r1
 8001020:	4770      	bx	lr
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <__aeabi_f2iz+0x3c>)
 8001024:	1898      	adds	r0, r3, r2
 8001026:	e7fb      	b.n	8001020 <__aeabi_f2iz+0x2c>
 8001028:	3a96      	subs	r2, #150	; 0x96
 800102a:	4091      	lsls	r1, r2
 800102c:	e7f4      	b.n	8001018 <__aeabi_f2iz+0x24>
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	7fffffff 	.word	0x7fffffff

08001034 <__aeabi_ui2f>:
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	1e04      	subs	r4, r0, #0
 8001038:	d034      	beq.n	80010a4 <__aeabi_ui2f+0x70>
 800103a:	f000 f83b 	bl	80010b4 <__clzsi2>
 800103e:	229e      	movs	r2, #158	; 0x9e
 8001040:	1a12      	subs	r2, r2, r0
 8001042:	2a96      	cmp	r2, #150	; 0x96
 8001044:	dc07      	bgt.n	8001056 <__aeabi_ui2f+0x22>
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	2808      	cmp	r0, #8
 800104a:	dd2e      	ble.n	80010aa <__aeabi_ui2f+0x76>
 800104c:	3808      	subs	r0, #8
 800104e:	4084      	lsls	r4, r0
 8001050:	0260      	lsls	r0, r4, #9
 8001052:	0a40      	lsrs	r0, r0, #9
 8001054:	e021      	b.n	800109a <__aeabi_ui2f+0x66>
 8001056:	2a99      	cmp	r2, #153	; 0x99
 8001058:	dd09      	ble.n	800106e <__aeabi_ui2f+0x3a>
 800105a:	0003      	movs	r3, r0
 800105c:	0021      	movs	r1, r4
 800105e:	331b      	adds	r3, #27
 8001060:	4099      	lsls	r1, r3
 8001062:	1e4b      	subs	r3, r1, #1
 8001064:	4199      	sbcs	r1, r3
 8001066:	2305      	movs	r3, #5
 8001068:	1a1b      	subs	r3, r3, r0
 800106a:	40dc      	lsrs	r4, r3
 800106c:	430c      	orrs	r4, r1
 800106e:	2805      	cmp	r0, #5
 8001070:	dd01      	ble.n	8001076 <__aeabi_ui2f+0x42>
 8001072:	1f43      	subs	r3, r0, #5
 8001074:	409c      	lsls	r4, r3
 8001076:	0023      	movs	r3, r4
 8001078:	490d      	ldr	r1, [pc, #52]	; (80010b0 <__aeabi_ui2f+0x7c>)
 800107a:	400b      	ands	r3, r1
 800107c:	0765      	lsls	r5, r4, #29
 800107e:	d009      	beq.n	8001094 <__aeabi_ui2f+0x60>
 8001080:	250f      	movs	r5, #15
 8001082:	402c      	ands	r4, r5
 8001084:	2c04      	cmp	r4, #4
 8001086:	d005      	beq.n	8001094 <__aeabi_ui2f+0x60>
 8001088:	3304      	adds	r3, #4
 800108a:	015c      	lsls	r4, r3, #5
 800108c:	d502      	bpl.n	8001094 <__aeabi_ui2f+0x60>
 800108e:	229f      	movs	r2, #159	; 0x9f
 8001090:	400b      	ands	r3, r1
 8001092:	1a12      	subs	r2, r2, r0
 8001094:	019b      	lsls	r3, r3, #6
 8001096:	0a58      	lsrs	r0, r3, #9
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	0240      	lsls	r0, r0, #9
 800109c:	05d2      	lsls	r2, r2, #23
 800109e:	0a40      	lsrs	r0, r0, #9
 80010a0:	4310      	orrs	r0, r2
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
 80010a4:	2200      	movs	r2, #0
 80010a6:	2000      	movs	r0, #0
 80010a8:	e7f7      	b.n	800109a <__aeabi_ui2f+0x66>
 80010aa:	0260      	lsls	r0, r4, #9
 80010ac:	0a40      	lsrs	r0, r0, #9
 80010ae:	e7f4      	b.n	800109a <__aeabi_ui2f+0x66>
 80010b0:	fbffffff 	.word	0xfbffffff

080010b4 <__clzsi2>:
 80010b4:	211c      	movs	r1, #28
 80010b6:	2301      	movs	r3, #1
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	4298      	cmp	r0, r3
 80010bc:	d301      	bcc.n	80010c2 <__clzsi2+0xe>
 80010be:	0c00      	lsrs	r0, r0, #16
 80010c0:	3910      	subs	r1, #16
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	4298      	cmp	r0, r3
 80010c6:	d301      	bcc.n	80010cc <__clzsi2+0x18>
 80010c8:	0a00      	lsrs	r0, r0, #8
 80010ca:	3908      	subs	r1, #8
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	4298      	cmp	r0, r3
 80010d0:	d301      	bcc.n	80010d6 <__clzsi2+0x22>
 80010d2:	0900      	lsrs	r0, r0, #4
 80010d4:	3904      	subs	r1, #4
 80010d6:	a202      	add	r2, pc, #8	; (adr r2, 80010e0 <__clzsi2+0x2c>)
 80010d8:	5c10      	ldrb	r0, [r2, r0]
 80010da:	1840      	adds	r0, r0, r1
 80010dc:	4770      	bx	lr
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	02020304 	.word	0x02020304
 80010e4:	01010101 	.word	0x01010101
	...

080010f0 <__clzdi2>:
 80010f0:	b510      	push	{r4, lr}
 80010f2:	2900      	cmp	r1, #0
 80010f4:	d103      	bne.n	80010fe <__clzdi2+0xe>
 80010f6:	f7ff ffdd 	bl	80010b4 <__clzsi2>
 80010fa:	3020      	adds	r0, #32
 80010fc:	e002      	b.n	8001104 <__clzdi2+0x14>
 80010fe:	1c08      	adds	r0, r1, #0
 8001100:	f7ff ffd8 	bl	80010b4 <__clzsi2>
 8001104:	bd10      	pop	{r4, pc}
 8001106:	46c0      	nop			; (mov r8, r8)

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110e:	f001 f9c9 	bl	80024a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001112:	f000 f823 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001116:	f000 fad7 	bl	80016c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800111a:	f000 fab7 	bl	800168c <MX_DMA_Init>
  MX_I2C2_Init();
 800111e:	f000 f90b 	bl	8001338 <MX_I2C2_Init>
  MX_RTC_Init();
 8001122:	f000 f949 	bl	80013b8 <MX_RTC_Init>
  MX_SPI1_Init();
 8001126:	f000 f9b3 	bl	8001490 <MX_SPI1_Init>
  MX_SPI2_Init();
 800112a:	f000 f9ef 	bl	800150c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800112e:	f000 fa2b 	bl	8001588 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001132:	f000 fa77 	bl	8001624 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001136:	f000 f893 	bl	8001260 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf( "Hydra Management Processor Running\r\n" );
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <main+0x50>)
 800113c:	0018      	movs	r0, r3
 800113e:	f005 fdf5 	bl	8006d2c <puts>
  system_init();
 8001142:	f001 f94d 	bl	80023e0 <system_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		current_time = HAL_GetTick();
 8001146:	f001 fa27 	bl	8002598 <HAL_GetTick>
 800114a:	0003      	movs	r3, r0
 800114c:	607b      	str	r3, [r7, #4]
	  /*
	   * Operate each module as a state machine so that they can perform different small tasks each time
	   */
	  // process_wifi_module();
	  // process_i2c();
	  process_led_display( current_time );
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	0018      	movs	r0, r3
 8001152:	f000 fe8d 	bl	8001e70 <process_led_display>
		current_time = HAL_GetTick();
 8001156:	e7f6      	b.n	8001146 <main+0x3e>
 8001158:	080075d4 	.word	0x080075d4

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b09d      	sub	sp, #116	; 0x74
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	2438      	movs	r4, #56	; 0x38
 8001164:	193b      	adds	r3, r7, r4
 8001166:	0018      	movs	r0, r3
 8001168:	2338      	movs	r3, #56	; 0x38
 800116a:	001a      	movs	r2, r3
 800116c:	2100      	movs	r1, #0
 800116e:	f005 fd75 	bl	8006c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001172:	2328      	movs	r3, #40	; 0x28
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	0018      	movs	r0, r3
 8001178:	2310      	movs	r3, #16
 800117a:	001a      	movs	r2, r3
 800117c:	2100      	movs	r1, #0
 800117e:	f005 fd6d 	bl	8006c5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001182:	003b      	movs	r3, r7
 8001184:	0018      	movs	r0, r3
 8001186:	2328      	movs	r3, #40	; 0x28
 8001188:	001a      	movs	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	f005 fd66 	bl	8006c5c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	0018      	movs	r0, r3
 8001196:	f002 fc7d 	bl	8003a94 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800119a:	193b      	adds	r3, r7, r4
 800119c:	220a      	movs	r2, #10
 800119e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80011a8:	0021      	movs	r1, r4
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2240      	movs	r2, #64	; 0x40
 80011b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2201      	movs	r2, #1
 80011ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2202      	movs	r2, #2
 80011c0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2202      	movs	r2, #2
 80011c6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2210      	movs	r2, #16
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	0292      	lsls	r2, r2, #10
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2280      	movs	r2, #128	; 0x80
 80011e0:	0492      	lsls	r2, r2, #18
 80011e2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	0612      	lsls	r2, r2, #24
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	0018      	movs	r0, r3
 80011f0:	f002 fc9c 	bl	8003b2c <HAL_RCC_OscConfig>
 80011f4:	1e03      	subs	r3, r0, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80011f8:	f000 fb36 	bl	8001868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	2128      	movs	r1, #40	; 0x28
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2202      	movs	r2, #2
 8001208:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	187b      	adds	r3, r7, r1
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2102      	movs	r1, #2
 800121a:	0018      	movs	r0, r3
 800121c:	f002 ffa6 	bl	800416c <HAL_RCC_ClockConfig>
 8001220:	1e03      	subs	r3, r0, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001224:	f000 fb20 	bl	8001868 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8001228:	003b      	movs	r3, r7
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <SystemClock_Config+0x100>)
 800122c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800122e:	003b      	movs	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001234:	003b      	movs	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800123a:	003b      	movs	r3, r7
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001242:	003b      	movs	r3, r7
 8001244:	0018      	movs	r0, r3
 8001246:	f003 f93b 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800124e:	f000 fb0b 	bl	8001868 <Error_Handler>
  }
}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b01d      	add	sp, #116	; 0x74
 8001258:	bd90      	pop	{r4, r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	00024001 	.word	0x00024001

08001260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	0018      	movs	r0, r3
 800126a:	230c      	movs	r3, #12
 800126c:	001a      	movs	r2, r3
 800126e:	2100      	movs	r1, #0
 8001270:	f005 fcf4 	bl	8006c5c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <MX_ADC1_Init+0xcc>)
 8001276:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <MX_ADC1_Init+0xd0>)
 8001278:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <MX_ADC1_Init+0xcc>)
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	05d2      	lsls	r2, r2, #23
 8001280:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <MX_ADC1_Init+0xcc>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <MX_ADC1_Init+0xcc>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <MX_ADC1_Init+0xcc>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <MX_ADC1_Init+0xcc>)
 8001296:	2204      	movs	r2, #4
 8001298:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <MX_ADC1_Init+0xcc>)
 800129c:	2200      	movs	r2, #0
 800129e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80012a0:	4b22      	ldr	r3, [pc, #136]	; (800132c <MX_ADC1_Init+0xcc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <MX_ADC1_Init+0xcc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <MX_ADC1_Init+0xcc>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <MX_ADC1_Init+0xcc>)
 80012b4:	2220      	movs	r2, #32
 80012b6:	2100      	movs	r1, #0
 80012b8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <MX_ADC1_Init+0xcc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_ADC1_Init+0xcc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_ADC1_Init+0xcc>)
 80012c8:	222c      	movs	r2, #44	; 0x2c
 80012ca:	2100      	movs	r1, #0
 80012cc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <MX_ADC1_Init+0xcc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_ADC1_Init+0xcc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_ADC1_Init+0xcc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_ADC1_Init+0xcc>)
 80012e2:	223c      	movs	r2, #60	; 0x3c
 80012e4:	2100      	movs	r1, #0
 80012e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <MX_ADC1_Init+0xcc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_ADC1_Init+0xcc>)
 80012f0:	0018      	movs	r0, r3
 80012f2:	f001 fa43 	bl	800277c <HAL_ADC_Init>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80012fa:	f000 fab5 	bl	8001868 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <MX_ADC1_Init+0xd4>)
 8001302:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001310:	1d3a      	adds	r2, r7, #4
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_ADC1_Init+0xcc>)
 8001314:	0011      	movs	r1, r2
 8001316:	0018      	movs	r0, r3
 8001318:	f001 fc06 	bl	8002b28 <HAL_ADC_ConfigChannel>
 800131c:	1e03      	subs	r3, r0, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001320:	f000 faa2 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	b004      	add	sp, #16
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200007f4 	.word	0x200007f4
 8001330:	40012400 	.word	0x40012400
 8001334:	20000100 	.word	0x20000100

08001338 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_I2C2_Init+0x74>)
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_I2C2_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0F7FE;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_I2C2_Init+0x74>)
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <MX_I2C2_Init+0x7c>)
 8001346:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_I2C2_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_I2C2_Init+0x74>)
 8001350:	2201      	movs	r2, #1
 8001352:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_I2C2_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_I2C2_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C2_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_I2C2_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C2_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_I2C2_Init+0x74>)
 8001374:	0018      	movs	r0, r3
 8001376:	f002 fa5f 	bl	8003838 <HAL_I2C_Init>
 800137a:	1e03      	subs	r3, r0, #0
 800137c:	d001      	beq.n	8001382 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800137e:	f000 fa73 	bl	8001868 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_I2C2_Init+0x74>)
 8001384:	2100      	movs	r1, #0
 8001386:	0018      	movs	r0, r3
 8001388:	f002 faec 	bl	8003964 <HAL_I2CEx_ConfigAnalogFilter>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d001      	beq.n	8001394 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001390:	f000 fa6a 	bl	8001868 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <MX_I2C2_Init+0x74>)
 8001396:	2100      	movs	r1, #0
 8001398:	0018      	movs	r0, r3
 800139a:	f002 fb2f 	bl	80039fc <HAL_I2CEx_ConfigDigitalFilter>
 800139e:	1e03      	subs	r3, r0, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f000 fa61 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200007a8 	.word	0x200007a8
 80013b0:	40005800 	.word	0x40005800
 80013b4:	00c0f7fe 	.word	0x00c0f7fe

080013b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	0018      	movs	r0, r3
 80013c2:	2314      	movs	r3, #20
 80013c4:	001a      	movs	r2, r3
 80013c6:	2100      	movs	r1, #0
 80013c8:	f005 fc48 	bl	8006c5c <memset>
  RTC_DateTypeDef sDate = {0};
 80013cc:	003b      	movs	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <MX_RTC_Init+0xd0>)
 80013d4:	4a2d      	ldr	r2, [pc, #180]	; (800148c <MX_RTC_Init+0xd4>)
 80013d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <MX_RTC_Init+0xd0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <MX_RTC_Init+0xd0>)
 80013e0:	227f      	movs	r2, #127	; 0x7f
 80013e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <MX_RTC_Init+0xd0>)
 80013e6:	22ff      	movs	r2, #255	; 0xff
 80013e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <MX_RTC_Init+0xd0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <MX_RTC_Init+0xd0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <MX_RTC_Init+0xd0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_RTC_Init+0xd0>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	05d2      	lsls	r2, r2, #23
 8001402:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_RTC_Init+0xd0>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_RTC_Init+0xd0>)
 800140c:	0018      	movs	r0, r3
 800140e:	f003 f9d1 	bl	80047b4 <HAL_RTC_Init>
 8001412:	1e03      	subs	r3, r0, #0
 8001414:	d001      	beq.n	800141a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001416:	f000 fa27 	bl	8001868 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800143e:	1d39      	adds	r1, r7, #4
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_RTC_Init+0xd0>)
 8001442:	2201      	movs	r2, #1
 8001444:	0018      	movs	r0, r3
 8001446:	f003 fa4b 	bl	80048e0 <HAL_RTC_SetTime>
 800144a:	1e03      	subs	r3, r0, #0
 800144c:	d001      	beq.n	8001452 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800144e:	f000 fa0b 	bl	8001868 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001452:	003b      	movs	r3, r7
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001458:	003b      	movs	r3, r7
 800145a:	2201      	movs	r2, #1
 800145c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800145e:	003b      	movs	r3, r7
 8001460:	2201      	movs	r2, #1
 8001462:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001464:	003b      	movs	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800146a:	0039      	movs	r1, r7
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_RTC_Init+0xd0>)
 800146e:	2201      	movs	r2, #1
 8001470:	0018      	movs	r0, r3
 8001472:	f003 fadd 	bl	8004a30 <HAL_RTC_SetDate>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d001      	beq.n	800147e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800147a:	f000 f9f5 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b006      	add	sp, #24
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	200008e4 	.word	0x200008e4
 800148c:	40002800 	.word	0x40002800

08001490 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_SPI1_Init+0x74>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <MX_SPI1_Init+0x78>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_SPI1_Init+0x74>)
 800149c:	2282      	movs	r2, #130	; 0x82
 800149e:	0052      	lsls	r2, r2, #1
 80014a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_SPI1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_SPI1_Init+0x74>)
 80014aa:	22e0      	movs	r2, #224	; 0xe0
 80014ac:	00d2      	lsls	r2, r2, #3
 80014ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_SPI1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_SPI1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_SPI1_Init+0x74>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_SPI1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_SPI1_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_SPI1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_SPI1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_SPI1_Init+0x74>)
 80014de:	2207      	movs	r2, #7
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_SPI1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_SPI1_Init+0x74>)
 80014ea:	2208      	movs	r2, #8
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <MX_SPI1_Init+0x74>)
 80014f0:	0018      	movs	r0, r3
 80014f2:	f003 fc09 	bl	8004d08 <HAL_SPI_Init>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d001      	beq.n	80014fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f000 f9b5 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000910 	.word	0x20000910
 8001508:	40013000 	.word	0x40013000

0800150c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_SPI2_Init+0x74>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <MX_SPI2_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_SPI2_Init+0x74>)
 8001518:	2282      	movs	r2, #130	; 0x82
 800151a:	0052      	lsls	r2, r2, #1
 800151c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_SPI2_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_SPI2_Init+0x74>)
 8001526:	22e0      	movs	r2, #224	; 0xe0
 8001528:	00d2      	lsls	r2, r2, #3
 800152a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_SPI2_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_SPI2_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_SPI2_Init+0x74>)
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_SPI2_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_SPI2_Init+0x74>)
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_SPI2_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_SPI2_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_SPI2_Init+0x74>)
 800155a:	2207      	movs	r2, #7
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_SPI2_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_SPI2_Init+0x74>)
 8001566:	2208      	movs	r2, #8
 8001568:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <MX_SPI2_Init+0x74>)
 800156c:	0018      	movs	r0, r3
 800156e:	f003 fbcb 	bl	8004d08 <HAL_SPI_Init>
 8001572:	1e03      	subs	r3, r0, #0
 8001574:	d001      	beq.n	800157a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001576:	f000 f977 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200005c4 	.word	0x200005c4
 8001584:	40003800 	.word	0x40003800

08001588 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <MX_USART1_UART_Init+0x94>)
 800158e:	4a24      	ldr	r2, [pc, #144]	; (8001620 <MX_USART1_UART_Init+0x98>)
 8001590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_USART1_UART_Init+0x94>)
 8001594:	22e1      	movs	r2, #225	; 0xe1
 8001596:	0252      	lsls	r2, r2, #9
 8001598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_USART1_UART_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015d2:	0018      	movs	r0, r3
 80015d4:	f003 fef8 	bl	80053c8 <HAL_UART_Init>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015dc:	f000 f944 	bl	8001868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015e2:	2100      	movs	r1, #0
 80015e4:	0018      	movs	r0, r3
 80015e6:	f005 fa23 	bl	8006a30 <HAL_UARTEx_SetTxFifoThreshold>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015ee:	f000 f93b 	bl	8001868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_USART1_UART_Init+0x94>)
 80015f4:	2100      	movs	r1, #0
 80015f6:	0018      	movs	r0, r3
 80015f8:	f005 fa5a 	bl	8006ab0 <HAL_UARTEx_SetRxFifoThreshold>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001600:	f000 f932 	bl	8001868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <MX_USART1_UART_Init+0x94>)
 8001606:	0018      	movs	r0, r3
 8001608:	f005 f9d8 	bl	80069bc <HAL_UARTEx_DisableFifoMode>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d001      	beq.n	8001614 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001610:	f000 f92a 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	20000858 	.word	0x20000858
 8001620:	40013800 	.word	0x40013800

08001624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_USART2_UART_Init+0x60>)
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <MX_USART2_UART_Init+0x64>)
 800162c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_USART2_UART_Init+0x60>)
 8001630:	22e1      	movs	r2, #225	; 0xe1
 8001632:	0252      	lsls	r2, r2, #9
 8001634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_USART2_UART_Init+0x60>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART2_UART_Init+0x60>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_USART2_UART_Init+0x60>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART2_UART_Init+0x60>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <MX_USART2_UART_Init+0x60>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART2_UART_Init+0x60>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <MX_USART2_UART_Init+0x60>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART2_UART_Init+0x60>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <MX_USART2_UART_Init+0x60>)
 8001668:	2200      	movs	r2, #0
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <MX_USART2_UART_Init+0x60>)
 800166e:	0018      	movs	r0, r3
 8001670:	f003 feaa 	bl	80053c8 <HAL_UART_Init>
 8001674:	1e03      	subs	r3, r0, #0
 8001676:	d001      	beq.n	800167c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001678:	f000 f8f6 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	20000974 	.word	0x20000974
 8001688:	40004400 	.word	0x40004400

0800168c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_DMA_Init+0x38>)
 8001694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_DMA_Init+0x38>)
 8001698:	2101      	movs	r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	639a      	str	r2, [r3, #56]	; 0x38
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_DMA_Init+0x38>)
 80016a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a2:	2201      	movs	r2, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2009      	movs	r0, #9
 80016b0:	f001 fcba 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b4:	2009      	movs	r0, #9
 80016b6:	f001 fccc 	bl	8003052 <HAL_NVIC_EnableIRQ>

}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40021000 	.word	0x40021000

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	240c      	movs	r4, #12
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	0018      	movs	r0, r3
 80016d4:	2314      	movs	r3, #20
 80016d6:	001a      	movs	r2, r3
 80016d8:	2100      	movs	r1, #0
 80016da:	f005 fabf 	bl	8006c5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <MX_GPIO_Init+0x168>)
 80016e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e2:	4b53      	ldr	r3, [pc, #332]	; (8001830 <MX_GPIO_Init+0x168>)
 80016e4:	2102      	movs	r1, #2
 80016e6:	430a      	orrs	r2, r1
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ea:	4b51      	ldr	r3, [pc, #324]	; (8001830 <MX_GPIO_Init+0x168>)
 80016ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ee:	2202      	movs	r2, #2
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4b4e      	ldr	r3, [pc, #312]	; (8001830 <MX_GPIO_Init+0x168>)
 80016f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fa:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <MX_GPIO_Init+0x168>)
 80016fc:	2101      	movs	r1, #1
 80016fe:	430a      	orrs	r2, r1
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
 8001702:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <MX_GPIO_Init+0x168>)
 8001704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001706:	2201      	movs	r2, #1
 8001708:	4013      	ands	r3, r2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b48      	ldr	r3, [pc, #288]	; (8001830 <MX_GPIO_Init+0x168>)
 8001710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <MX_GPIO_Init+0x168>)
 8001714:	2104      	movs	r1, #4
 8001716:	430a      	orrs	r2, r1
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
 800171a:	4b45      	ldr	r3, [pc, #276]	; (8001830 <MX_GPIO_Init+0x168>)
 800171c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171e:	2204      	movs	r2, #4
 8001720:	4013      	ands	r3, r2
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable_Comm_Processor_3V3_Pin|LED_Array_Enable___Pin|LED_Power_Enable_Pin, GPIO_PIN_RESET);
 8001726:	238c      	movs	r3, #140	; 0x8c
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4842      	ldr	r0, [pc, #264]	; (8001834 <MX_GPIO_Init+0x16c>)
 800172c:	2200      	movs	r2, #0
 800172e:	0019      	movs	r1, r3
 8001730:	f002 f864 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Enable_Comm_Processor_3V3_Pin LED_Array_Enable___Pin LED_Power_Enable_Pin */
  GPIO_InitStruct.Pin = Enable_Comm_Processor_3V3_Pin|LED_Array_Enable___Pin|LED_Power_Enable_Pin;
 8001734:	193b      	adds	r3, r7, r4
 8001736:	228c      	movs	r2, #140	; 0x8c
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	193b      	adds	r3, r7, r4
 800173e:	2201      	movs	r2, #1
 8001740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	193b      	adds	r3, r7, r4
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	193b      	adds	r3, r7, r4
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	193b      	adds	r3, r7, r4
 8001750:	4a38      	ldr	r2, [pc, #224]	; (8001834 <MX_GPIO_Init+0x16c>)
 8001752:	0019      	movs	r1, r3
 8001754:	0010      	movs	r0, r2
 8001756:	f001 feed 	bl	8003534 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Status_Pin */
  GPIO_InitStruct.Pin = Charge_Status_Pin;
 800175a:	193b      	adds	r3, r7, r4
 800175c:	2202      	movs	r2, #2
 800175e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001760:	193b      	adds	r3, r7, r4
 8001762:	2203      	movs	r2, #3
 8001764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	193b      	adds	r3, r7, r4
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charge_Status_GPIO_Port, &GPIO_InitStruct);
 800176c:	193a      	adds	r2, r7, r4
 800176e:	23a0      	movs	r3, #160	; 0xa0
 8001770:	05db      	lsls	r3, r3, #23
 8001772:	0011      	movs	r1, r2
 8001774:	0018      	movs	r0, r3
 8001776:	f001 fedd 	bl	8003534 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SFLASH_CS_Pin */
  GPIO_InitStruct.Pin = SPI_SFLASH_CS_Pin;
 800177a:	193b      	adds	r3, r7, r4
 800177c:	2210      	movs	r2, #16
 800177e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001780:	193b      	adds	r3, r7, r4
 8001782:	4a2d      	ldr	r2, [pc, #180]	; (8001838 <MX_GPIO_Init+0x170>)
 8001784:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	193b      	adds	r3, r7, r4
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI_SFLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800178c:	193a      	adds	r2, r7, r4
 800178e:	23a0      	movs	r3, #160	; 0xa0
 8001790:	05db      	lsls	r3, r3, #23
 8001792:	0011      	movs	r1, r2
 8001794:	0018      	movs	r0, r3
 8001796:	f001 fecd 	bl	8003534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMID___4_Pin VSYS___2_Pin */
  GPIO_InitStruct.Pin = PMID___4_Pin|VSYS___2_Pin;
 800179a:	193b      	adds	r3, r7, r4
 800179c:	220c      	movs	r2, #12
 800179e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	2203      	movs	r2, #3
 80017a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	4a21      	ldr	r2, [pc, #132]	; (8001834 <MX_GPIO_Init+0x16c>)
 80017b0:	0019      	movs	r1, r3
 80017b2:	0010      	movs	r0, r2
 80017b4:	f001 febe 	bl	8003534 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charge_INT___Pin Power_Down___Pin UFP_Fault___Pin */
  GPIO_InitStruct.Pin = Charge_INT___Pin|Power_Down___Pin|UFP_Fault___Pin;
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	2283      	movs	r2, #131	; 0x83
 80017bc:	0212      	lsls	r2, r2, #8
 80017be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	193a      	adds	r2, r7, r4
 80017ce:	23a0      	movs	r3, #160	; 0xa0
 80017d0:	05db      	lsls	r3, r3, #23
 80017d2:	0011      	movs	r1, r2
 80017d4:	0018      	movs	r0, r3
 80017d6:	f001 fead 	bl	8003534 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dead_Battery___Pin */
  GPIO_InitStruct.Pin = Dead_Battery___Pin;
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	2240      	movs	r2, #64	; 0x40
 80017de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	193b      	adds	r3, r7, r4
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Dead_Battery___GPIO_Port, &GPIO_InitStruct);
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <MX_GPIO_Init+0x174>)
 80017f0:	0019      	movs	r1, r3
 80017f2:	0010      	movs	r0, r2
 80017f4:	f001 fe9e 	bl	8003534 <HAL_GPIO_Init>

  /*Configure GPIO pin : Beeper_Pin */
  GPIO_InitStruct.Pin = Beeper_Pin;
 80017f8:	0021      	movs	r1, r4
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	0052      	lsls	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2202      	movs	r2, #2
 8001806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001814:	187b      	adds	r3, r7, r1
 8001816:	2202      	movs	r2, #2
 8001818:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(Beeper_GPIO_Port, &GPIO_InitStruct);
 800181a:	187b      	adds	r3, r7, r1
 800181c:	4a05      	ldr	r2, [pc, #20]	; (8001834 <MX_GPIO_Init+0x16c>)
 800181e:	0019      	movs	r1, r3
 8001820:	0010      	movs	r0, r2
 8001822:	f001 fe87 	bl	8003534 <HAL_GPIO_Init>

}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b009      	add	sp, #36	; 0x24
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	40021000 	.word	0x40021000
 8001834:	50000400 	.word	0x50000400
 8001838:	10110000 	.word	0x10110000
 800183c:	50000800 	.word	0x50000800

08001840 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <__io_putchar+0x20>)
 800184a:	1d39      	adds	r1, r7, #4
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <__io_putchar+0x24>)
 800184e:	2201      	movs	r2, #1
 8001850:	f003 fe10 	bl	8005474 <HAL_UART_Transmit>

  return ch;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	0000ffff 	.word	0x0000ffff
 8001864:	20000974 	.word	0x20000974

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_MspInit+0x44>)
 800187c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_MspInit+0x44>)
 8001880:	2101      	movs	r1, #1
 8001882:	430a      	orrs	r2, r1
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_MspInit+0x44>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	2201      	movs	r2, #1
 800188c:	4013      	ands	r3, r2
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_MspInit+0x44>)
 8001894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_MspInit+0x44>)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	0549      	lsls	r1, r1, #21
 800189c:	430a      	orrs	r2, r1
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_MspInit+0x44>)
 80018a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	055b      	lsls	r3, r3, #21
 80018a8:	4013      	ands	r3, r2
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	2314      	movs	r3, #20
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	0018      	movs	r0, r3
 80018ca:	2314      	movs	r3, #20
 80018cc:	001a      	movs	r2, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	f005 f9c4 	bl	8006c5c <memset>
  if(hadc->Instance==ADC1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_ADC_MspInit+0x80>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d129      	bne.n	8001932 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_ADC_MspInit+0x84>)
 80018e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_ADC_MspInit+0x84>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0349      	lsls	r1, r1, #13
 80018e8:	430a      	orrs	r2, r1
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_ADC_MspInit+0x84>)
 80018ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	035b      	lsls	r3, r3, #13
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_ADC_MspInit+0x84>)
 80018fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_ADC_MspInit+0x84>)
 8001900:	2102      	movs	r1, #2
 8001902:	430a      	orrs	r2, r1
 8001904:	635a      	str	r2, [r3, #52]	; 0x34
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_ADC_MspInit+0x84>)
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = USB_C_in_1_Pin|USB_C_in_2_Pin;
 8001912:	2114      	movs	r1, #20
 8001914:	187b      	adds	r3, r7, r1
 8001916:	2203      	movs	r2, #3
 8001918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191a:	187b      	adds	r3, r7, r1
 800191c:	2203      	movs	r2, #3
 800191e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	187b      	adds	r3, r7, r1
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_ADC_MspInit+0x88>)
 800192a:	0019      	movs	r1, r3
 800192c:	0010      	movs	r0, r2
 800192e:	f001 fe01 	bl	8003534 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b00a      	add	sp, #40	; 0x28
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	40012400 	.word	0x40012400
 8001940:	40021000 	.word	0x40021000
 8001944:	50000400 	.word	0x50000400

08001948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	2314      	movs	r3, #20
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	0018      	movs	r0, r3
 8001956:	2314      	movs	r3, #20
 8001958:	001a      	movs	r2, r3
 800195a:	2100      	movs	r1, #0
 800195c:	f005 f97e 	bl	8006c5c <memset>
  if(hi2c->Instance==I2C2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_I2C_MspInit+0x90>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d131      	bne.n	80019ce <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_I2C_MspInit+0x94>)
 800196c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_I2C_MspInit+0x94>)
 8001970:	2101      	movs	r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	635a      	str	r2, [r3, #52]	; 0x34
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_I2C_MspInit+0x94>)
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	2201      	movs	r2, #1
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001982:	2114      	movs	r1, #20
 8001984:	187b      	adds	r3, r7, r1
 8001986:	22c0      	movs	r2, #192	; 0xc0
 8001988:	0152      	lsls	r2, r2, #5
 800198a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2212      	movs	r2, #18
 8001990:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2201      	movs	r2, #1
 8001996:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	187b      	adds	r3, r7, r1
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	2206      	movs	r2, #6
 80019a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	187a      	adds	r2, r7, r1
 80019a6:	23a0      	movs	r3, #160	; 0xa0
 80019a8:	05db      	lsls	r3, r3, #23
 80019aa:	0011      	movs	r1, r2
 80019ac:	0018      	movs	r0, r3
 80019ae:	f001 fdc1 	bl	8003534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_I2C_MspInit+0x94>)
 80019b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_I2C_MspInit+0x94>)
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	03c9      	lsls	r1, r1, #15
 80019bc:	430a      	orrs	r2, r1
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_I2C_MspInit+0x94>)
 80019c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	03db      	lsls	r3, r3, #15
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b00a      	add	sp, #40	; 0x28
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	40005800 	.word	0x40005800
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_RTC_MspInit+0x44>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d114      	bne.n	8001a1c <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_RTC_MspInit+0x48>)
 80019f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_RTC_MspInit+0x48>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0209      	lsls	r1, r1, #8
 80019fc:	430a      	orrs	r2, r1
 80019fe:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RTC_MspInit+0x48>)
 8001a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_RTC_MspInit+0x48>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	00c9      	lsls	r1, r1, #3
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_RTC_MspInit+0x48>)
 8001a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b004      	add	sp, #16
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40002800 	.word	0x40002800
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	; 0x30
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	231c      	movs	r3, #28
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	0018      	movs	r0, r3
 8001a3a:	2314      	movs	r3, #20
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	2100      	movs	r1, #0
 8001a40:	f005 f90c 	bl	8006c5c <memset>
  if(hspi->Instance==SPI1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a4b      	ldr	r2, [pc, #300]	; (8001b78 <HAL_SPI_MspInit+0x14c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d131      	bne.n	8001ab2 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a52:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0149      	lsls	r1, r1, #5
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a5c:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	015b      	lsls	r3, r3, #5
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
 8001a76:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI_SFLASH_CLK_Pin|SPI_SFLASH_MISO_Pin|SPI_SFLASH_MOSI_Pin;
 8001a82:	211c      	movs	r1, #28
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	22e0      	movs	r2, #224	; 0xe0
 8001a88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	187a      	adds	r2, r7, r1
 8001aa4:	23a0      	movs	r3, #160	; 0xa0
 8001aa6:	05db      	lsls	r3, r3, #23
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f001 fd42 	bl	8003534 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ab0:	e05e      	b.n	8001b70 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <HAL_SPI_MspInit+0x154>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d159      	bne.n	8001b70 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001abc:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	01c9      	lsls	r1, r1, #7
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aca:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	01db      	lsls	r3, r3, #7
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_SPI_MspInit+0x150>)
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_CLK___Not_Used_Pin|SPI2_OUT_LED_Display_Pin;
 8001af0:	211c      	movs	r1, #28
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	4a23      	ldr	r2, [pc, #140]	; (8001b84 <HAL_SPI_MspInit+0x158>)
 8001af6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2202      	movs	r2, #2
 8001afc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	187a      	adds	r2, r7, r1
 8001b12:	23a0      	movs	r3, #160	; 0xa0
 8001b14:	05db      	lsls	r3, r3, #23
 8001b16:	0011      	movs	r1, r2
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f001 fd0b 	bl	8003534 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b20:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <HAL_SPI_MspInit+0x160>)
 8001b22:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b26:	2213      	movs	r2, #19
 8001b28:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b56:	0018      	movs	r0, r3
 8001b58:	f001 fa98 	bl	800308c <HAL_DMA_Init>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8001b60:	f7ff fe82 	bl	8001868 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_SPI_MspInit+0x15c>)
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b00c      	add	sp, #48	; 0x30
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40013000 	.word	0x40013000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40003800 	.word	0x40003800
 8001b84:	00000401 	.word	0x00000401
 8001b88:	20000a00 	.word	0x20000a00
 8001b8c:	40020008 	.word	0x40020008

08001b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	231c      	movs	r3, #28
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	2314      	movs	r3, #20
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	f005 f85a 	bl	8006c5c <memset>
  if(huart->Instance==USART1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a36      	ldr	r2, [pc, #216]	; (8001c88 <HAL_UART_MspInit+0xf8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d130      	bne.n	8001c14 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb6:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	01c9      	lsls	r1, r1, #7
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	01db      	lsls	r3, r3, #7
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_to_Comm_Processor_Pin|RX_from_Comm_Processor_Pin;
 8001be6:	211c      	movs	r1, #28
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	22c0      	movs	r2, #192	; 0xc0
 8001bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <HAL_UART_MspInit+0x100>)
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	0010      	movs	r0, r2
 8001c0e:	f001 fc91 	bl	8003534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c12:	e035      	b.n	8001c80 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <HAL_UART_MspInit+0x104>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d130      	bne.n	8001c80 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	0289      	lsls	r1, r1, #10
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	430a      	orrs	r2, r1
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
 8001c52:	211c      	movs	r1, #28
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	2201      	movs	r2, #1
 8001c70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	187a      	adds	r2, r7, r1
 8001c74:	23a0      	movs	r3, #160	; 0xa0
 8001c76:	05db      	lsls	r3, r3, #23
 8001c78:	0011      	movs	r1, r2
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f001 fc5a 	bl	8003534 <HAL_GPIO_Init>
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b00c      	add	sp, #48	; 0x30
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40013800 	.word	0x40013800
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	50000400 	.word	0x50000400
 8001c94:	40004400 	.word	0x40004400

08001c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <HardFault_Handler+0x4>

08001ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc0:	f000 fc5a 	bl	8002578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <DMA1_Channel1_IRQHandler+0x18>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f001 faec 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  LED_display_update_completed = true;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <DMA1_Channel1_IRQHandler+0x1c>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000a00 	.word	0x20000a00
 8001ce8:	20000a5c 	.word	0x20000a5c

08001cec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e00a      	b.n	8001d14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cfe:	e000      	b.n	8001d02 <_read+0x16>
 8001d00:	bf00      	nop
 8001d02:	0001      	movs	r1, r0
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60ba      	str	r2, [r7, #8]
 8001d0a:	b2ca      	uxtb	r2, r1
 8001d0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3301      	adds	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	dbf0      	blt.n	8001cfe <_read+0x12>
	}

return len;
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b006      	add	sp, #24
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e009      	b.n	8001d4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60ba      	str	r2, [r7, #8]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff fd7d 	bl	8001840 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbf1      	blt.n	8001d38 <_write+0x12>
	}
	return len;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b006      	add	sp, #24
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_close>:

int _close(int file)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
	return -1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	425b      	negs	r3, r3
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b002      	add	sp, #8
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	0192      	lsls	r2, r2, #6
 8001d82:	605a      	str	r2, [r3, #4]
	return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_isatty>:

int _isatty(int file)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
	return 1;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
	return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b004      	add	sp, #16
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <_sbrk+0x50>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x16>
		heap_end = &end;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <_sbrk+0x50>)
 8001dca:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <_sbrk+0x54>)
 8001dcc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <_sbrk+0x50>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <_sbrk+0x50>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	18d3      	adds	r3, r2, r3
 8001ddc:	466a      	mov	r2, sp
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d907      	bls.n	8001df2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001de2:	f004 ff11 	bl	8006c08 <__errno>
 8001de6:	0003      	movs	r3, r0
 8001de8:	220c      	movs	r2, #12
 8001dea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	425b      	negs	r3, r3
 8001df0:	e006      	b.n	8001e00 <_sbrk+0x48>
	}

	heap_end += incr;
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <_sbrk+0x50>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	18d2      	adds	r2, r2, r3
 8001dfa:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <_sbrk+0x50>)
 8001dfc:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b004      	add	sp, #16
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000008c 	.word	0x2000008c
 8001e0c:	20000af8 	.word	0x20000af8

08001e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <SystemInit+0x14>)
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	0512      	lsls	r2, r2, #20
 8001e1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <led_init>:
  * @brief	Initialize the LED Display
  * @param  None
  * @retval : None
  */
void led_init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	/*
	 * Set flag to indicate that the SPI is available to load new data
	 */
	LED_display_update_completed = true;
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <led_init+0x40>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
	hs.led_bar_state = LED_BAR_INIT;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <led_init+0x44>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	721a      	strb	r2, [r3, #8]
    hs.ev_display_scan_mode = true;
 8001e38:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <led_init+0x44>)
 8001e3a:	23be      	movs	r3, #190	; 0xbe
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	5cd1      	ldrb	r1, [r2, r3]
 8001e40:	2002      	movs	r0, #2
 8001e42:	4301      	orrs	r1, r0
 8001e44:	54d1      	strb	r1, [r2, r3]
    hs.led_bar_display_status = true;
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <led_init+0x44>)
 8001e48:	23be      	movs	r3, #190	; 0xbe
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	5cd1      	ldrb	r1, [r2, r3]
 8001e4e:	2001      	movs	r0, #1
 8001e50:	4301      	orrs	r1, r0
 8001e52:	54d1      	strb	r1, [r2, r3]
    led_bar_breath_setup( green_blend_scan[ 0 ], green_blend_scan[ 1 ], green_blend_scan[ 2 ], 20 );
 8001e54:	2000      	movs	r0, #0
 8001e56:	21ff      	movs	r1, #255	; 0xff
 8001e58:	2255      	movs	r2, #85	; 0x55
 8001e5a:	2314      	movs	r3, #20
 8001e5c:	f000 f87e 	bl	8001f5c <led_bar_breath_setup>
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	20000a5c 	.word	0x20000a5c
 8001e6c:	20000628 	.word	0x20000628

08001e70 <process_led_display>:
  * @brief	Process the LED Display
  * @param  None
  * @retval : None
  */
void process_led_display( uint32_t current_time )
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
//	led_bar_test();
	led_bar_breath_mode( current_time );
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f000 f8b0 	bl	8001fe0 <led_bar_breath_mode>
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <set_led_bar_raw>:
  * @brief set_led_bar_raw
  * @param  LED, Color Values R G B
  * @retval : None
  */
void set_led_bar_raw( uint8_t led, uint16_t raw_red_level, uint16_t raw_green_level, uint16_t raw_blue_level )
{
 8001e88:	b5b0      	push	{r4, r5, r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	0005      	movs	r5, r0
 8001e90:	000c      	movs	r4, r1
 8001e92:	0010      	movs	r0, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	1dfb      	adds	r3, r7, #7
 8001e98:	1c2a      	adds	r2, r5, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	1c22      	adds	r2, r4, #0
 8001ea0:	801a      	strh	r2, [r3, #0]
 8001ea2:	1cbb      	adds	r3, r7, #2
 8001ea4:	1c02      	adds	r2, r0, #0
 8001ea6:	801a      	strh	r2, [r3, #0]
 8001ea8:	003b      	movs	r3, r7
 8001eaa:	1c0a      	adds	r2, r1, #0
 8001eac:	801a      	strh	r2, [r3, #0]
     *
     * Adjust based on https://www.ledsmagazine.com/smart-lighting-iot/color-tuning/article/16695054/understand-rgb-led-mixing-ratios-to-realize-optimal-color-in-signs-and-displays-magazine
     *
     * Color values and scale
     */
	if( raw_red_level > 255 )
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	2bff      	cmp	r3, #255	; 0xff
 8001eb4:	d902      	bls.n	8001ebc <set_led_bar_raw+0x34>
		raw_red_level = 255;
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	22ff      	movs	r2, #255	; 0xff
 8001eba:	801a      	strh	r2, [r3, #0]
	if( raw_green_level > 255 )
 8001ebc:	1cbb      	adds	r3, r7, #2
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	2bff      	cmp	r3, #255	; 0xff
 8001ec2:	d902      	bls.n	8001eca <set_led_bar_raw+0x42>
		raw_green_level = 255;
 8001ec4:	1cbb      	adds	r3, r7, #2
 8001ec6:	22ff      	movs	r2, #255	; 0xff
 8001ec8:	801a      	strh	r2, [r3, #0]
	if( raw_blue_level > 255 )
 8001eca:	003b      	movs	r3, r7
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	2bff      	cmp	r3, #255	; 0xff
 8001ed0:	d902      	bls.n	8001ed8 <set_led_bar_raw+0x50>
		raw_blue_level = 255;
 8001ed2:	003b      	movs	r3, r7
 8001ed4:	22ff      	movs	r2, #255	; 0xff
 8001ed6:	801a      	strh	r2, [r3, #0]

    if( led < LED_BAR_NO_LEDS ) {
 8001ed8:	1dfb      	adds	r3, r7, #7
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b0b      	cmp	r3, #11
 8001ede:	d82d      	bhi.n	8001f3c <set_led_bar_raw+0xb4>
        led_display[ led ][ EV_LED_RED ] =  cie[ raw_red_level ];		// (uint8_t) (float) ( raw_red_level * ( 4.0 * ( 255 / 1020 ) ) );
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <set_led_bar_raw+0xbc>)
 8001ee6:	5cd1      	ldrb	r1, [r2, r3]
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	b288      	uxth	r0, r1
 8001eee:	4916      	ldr	r1, [pc, #88]	; (8001f48 <set_led_bar_raw+0xc0>)
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	189b      	adds	r3, r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	18cb      	adds	r3, r1, r3
 8001efa:	3302      	adds	r3, #2
 8001efc:	1c02      	adds	r2, r0, #0
 8001efe:	801a      	strh	r2, [r3, #0]
        led_display[ led ][ EV_LED_GREEN ] =  cie[ raw_green_level ];	// (uint8_t) (float) ( raw_green_level * ( 3.0 * ( 255 / 1020 ) ) );
 8001f00:	1cbb      	adds	r3, r7, #2
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <set_led_bar_raw+0xbc>)
 8001f06:	5cd1      	ldrb	r1, [r2, r3]
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	b288      	uxth	r0, r1
 8001f0e:	490e      	ldr	r1, [pc, #56]	; (8001f48 <set_led_bar_raw+0xc0>)
 8001f10:	0013      	movs	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	189b      	adds	r3, r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	1c02      	adds	r2, r0, #0
 8001f1a:	525a      	strh	r2, [r3, r1]
        led_display[ led ][ EV_LED_BLUE ] =  cie[ raw_blue_level ];	// (uint8_t) (float) ( raw_blue_level * ( 1.0 * ( 255 / 1020 ) ) );
 8001f1c:	003b      	movs	r3, r7
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <set_led_bar_raw+0xbc>)
 8001f22:	5cd1      	ldrb	r1, [r2, r3]
 8001f24:	1dfb      	adds	r3, r7, #7
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	b288      	uxth	r0, r1
 8001f2a:	4907      	ldr	r1, [pc, #28]	; (8001f48 <set_led_bar_raw+0xc0>)
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	189b      	adds	r3, r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	18cb      	adds	r3, r1, r3
 8001f36:	3304      	adds	r3, #4
 8001f38:	1c02      	adds	r2, r0, #0
 8001f3a:	801a      	strh	r2, [r3, #0]
    }
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bdb0      	pop	{r4, r5, r7, pc}
 8001f44:	08007728 	.word	0x08007728
 8001f48:	20000a60 	.word	0x20000a60

08001f4c <init_led_bar>:
  * @brief init_led_bar
  * @param  None
  * @retval : None
  */
void init_led_bar(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
    led_bar_off();
 8001f50:	f000 f968 	bl	8002224 <led_bar_off>
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <led_bar_breath_setup>:
  * @brief led_bar_scan_setup
  * @param  None
  * @retval : None
  */
void led_bar_breath_setup( uint16_t red, uint16_t green, uint16_t blue, uint16_t transision_period )
{
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	0005      	movs	r5, r0
 8001f64:	000c      	movs	r4, r1
 8001f66:	0010      	movs	r0, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	1dbb      	adds	r3, r7, #6
 8001f6c:	1c2a      	adds	r2, r5, #0
 8001f6e:	801a      	strh	r2, [r3, #0]
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	1c22      	adds	r2, r4, #0
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	1cbb      	adds	r3, r7, #2
 8001f78:	1c02      	adds	r2, r0, #0
 8001f7a:	801a      	strh	r2, [r3, #0]
 8001f7c:	003b      	movs	r3, r7
 8001f7e:	1c0a      	adds	r2, r1, #0
 8001f80:	801a      	strh	r2, [r3, #0]
    /*
     * Set Max levels
     */
	display_state_levels[ 0 ][ EV_LED_RED ] = red;
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <led_bar_breath_setup+0x7c>)
 8001f84:	1dba      	adds	r2, r7, #6
 8001f86:	8812      	ldrh	r2, [r2, #0]
 8001f88:	805a      	strh	r2, [r3, #2]
	display_state_levels[ 0 ][ EV_LED_GREEN ] = green;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <led_bar_breath_setup+0x7c>)
 8001f8c:	1d3a      	adds	r2, r7, #4
 8001f8e:	8812      	ldrh	r2, [r2, #0]
 8001f90:	801a      	strh	r2, [r3, #0]
	display_state_levels[ 0 ][ EV_LED_BLUE ] = blue;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <led_bar_breath_setup+0x7c>)
 8001f94:	1cba      	adds	r2, r7, #2
 8001f96:	8812      	ldrh	r2, [r2, #0]
 8001f98:	809a      	strh	r2, [r3, #4]

    hs.tansistion_time = transision_period;
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <led_bar_breath_setup+0x80>)
 8001f9c:	003a      	movs	r2, r7
 8001f9e:	8812      	ldrh	r2, [r2, #0]
 8001fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    hs.led_bar_state = LED_BAR_INIT;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <led_bar_breath_setup+0x80>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	721a      	strb	r2, [r3, #8]
    hs.ev_display_scan_mode = true;
 8001fa8:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <led_bar_breath_setup+0x80>)
 8001faa:	23be      	movs	r3, #190	; 0xbe
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	5cd1      	ldrb	r1, [r2, r3]
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	4301      	orrs	r1, r0
 8001fb4:	54d1      	strb	r1, [r2, r3]
    hs.led_bar_display_status = true;
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <led_bar_breath_setup+0x80>)
 8001fb8:	23be      	movs	r3, #190	; 0xbe
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	5cd1      	ldrb	r1, [r2, r3]
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	4301      	orrs	r1, r0
 8001fc2:	54d1      	strb	r1, [r2, r3]
    led_bar_off();
 8001fc4:	f000 f92e 	bl	8002224 <led_bar_off>
    hs.max_loop_count = 1;
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <led_bar_breath_setup+0x80>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	825a      	strh	r2, [r3, #18]
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	20000aa8 	.word	0x20000aa8
 8001fdc:	20000628 	.word	0x20000628

08001fe0 <led_bar_breath_mode>:
  * @brief Do the LED BAR Scanning alternate forward / backwards function 2 X
  * @param  None
  * @retval : None
  */
void led_bar_breath_mode( uint32_t current_time )
{
 8001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	int16_t i;
	float factor;
    /*
     * Show a Wi Fi Setup display
     */
    switch( hs.led_bar_state ) {
 8001fe8:	4b8b      	ldr	r3, [pc, #556]	; (8002218 <led_bar_breath_mode+0x238>)
 8001fea:	7a1b      	ldrb	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d011      	beq.n	8002014 <led_bar_breath_mode+0x34>
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d100      	bne.n	8001ff6 <led_bar_breath_mode+0x16>
 8001ff4:	e08b      	b.n	800210e <led_bar_breath_mode+0x12e>
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d000      	beq.n	8001ffc <led_bar_breath_mode+0x1c>
 8001ffa:	e102      	b.n	8002202 <led_bar_breath_mode+0x222>
        case LED_BAR_INIT :
            hs.led_bar_display_state = MIN_BREATH_LEVEL;
 8001ffc:	4b86      	ldr	r3, [pc, #536]	; (8002218 <led_bar_breath_mode+0x238>)
 8001ffe:	2232      	movs	r2, #50	; 0x32
 8002000:	801a      	strh	r2, [r3, #0]
            hs.led_bar_last_update = current_time;
 8002002:	4b85      	ldr	r3, [pc, #532]	; (8002218 <led_bar_breath_mode+0x238>)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]
            led_bar_off();      // Start in known state
 8002008:	f000 f90c 	bl	8002224 <led_bar_off>
            hs.led_bar_state = LED_BAR_SCAN_LEFT;
 800200c:	4b82      	ldr	r3, [pc, #520]	; (8002218 <led_bar_breath_mode+0x238>)
 800200e:	2201      	movs	r2, #1
 8002010:	721a      	strb	r2, [r3, #8]
            break;
 8002012:	e0fd      	b.n	8002210 <led_bar_breath_mode+0x230>
        case LED_BAR_SCAN_LEFT :
            if( imx_is_later( current_time, hs.led_bar_last_update + hs.tansistion_time ) ) {
 8002014:	4b80      	ldr	r3, [pc, #512]	; (8002218 <led_bar_breath_mode+0x238>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a7f      	ldr	r2, [pc, #508]	; (8002218 <led_bar_breath_mode+0x238>)
 800201a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800201c:	189a      	adds	r2, r3, r2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0011      	movs	r1, r2
 8002022:	0018      	movs	r0, r3
 8002024:	f000 f9e5 	bl	80023f2 <imx_is_later>
 8002028:	1e03      	subs	r3, r0, #0
 800202a:	d100      	bne.n	800202e <led_bar_breath_mode+0x4e>
 800202c:	e0ed      	b.n	800220a <led_bar_breath_mode+0x22a>
                for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 800202e:	230e      	movs	r3, #14
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2200      	movs	r2, #0
 8002034:	801a      	strh	r2, [r3, #0]
 8002036:	e04d      	b.n	80020d4 <led_bar_breath_mode+0xf4>
                	factor = (float)( hs.led_bar_display_state ) / (float) (NO_BREATH_STEPS);
 8002038:	4b77      	ldr	r3, [pc, #476]	; (8002218 <led_bar_breath_mode+0x238>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe fff9 	bl	8001034 <__aeabi_ui2f>
 8002042:	1c03      	adds	r3, r0, #0
 8002044:	4975      	ldr	r1, [pc, #468]	; (800221c <led_bar_breath_mode+0x23c>)
 8002046:	1c18      	adds	r0, r3, #0
 8002048:	f7fe fb06 	bl	8000658 <__aeabi_fdiv>
 800204c:	1c03      	adds	r3, r0, #0
 800204e:	60bb      	str	r3, [r7, #8]
                	set_led_bar_raw( i, (uint16_t) ( (float)display_state_levels[ 0 ][ EV_LED_RED ] * factor ),
 8002050:	210e      	movs	r1, #14
 8002052:	187b      	adds	r3, r7, r1
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b2dc      	uxtb	r4, r3
 8002058:	4b71      	ldr	r3, [pc, #452]	; (8002220 <led_bar_breath_mode+0x240>)
 800205a:	885b      	ldrh	r3, [r3, #2]
 800205c:	0018      	movs	r0, r3
 800205e:	f7fe ffe9 	bl	8001034 <__aeabi_ui2f>
 8002062:	1c03      	adds	r3, r0, #0
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	1c18      	adds	r0, r3, #0
 8002068:	f7fe fcce 	bl	8000a08 <__aeabi_fmul>
 800206c:	1c03      	adds	r3, r0, #0
 800206e:	1c18      	adds	r0, r3, #0
 8002070:	f7fe fa18 	bl	80004a4 <__aeabi_f2uiz>
 8002074:	0003      	movs	r3, r0
 8002076:	b29d      	uxth	r5, r3
                			(uint16_t) ( (float) display_state_levels[ 0 ][ EV_LED_GREEN ] * factor ),
 8002078:	4b69      	ldr	r3, [pc, #420]	; (8002220 <led_bar_breath_mode+0x240>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	0018      	movs	r0, r3
 800207e:	f7fe ffd9 	bl	8001034 <__aeabi_ui2f>
 8002082:	1c03      	adds	r3, r0, #0
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	1c18      	adds	r0, r3, #0
 8002088:	f7fe fcbe 	bl	8000a08 <__aeabi_fmul>
 800208c:	1c03      	adds	r3, r0, #0
                	set_led_bar_raw( i, (uint16_t) ( (float)display_state_levels[ 0 ][ EV_LED_RED ] * factor ),
 800208e:	1c18      	adds	r0, r3, #0
 8002090:	f7fe fa08 	bl	80004a4 <__aeabi_f2uiz>
 8002094:	0003      	movs	r3, r0
 8002096:	b29e      	uxth	r6, r3
							(uint16_t) ( (float) display_state_levels[ 0 ][ EV_LED_BLUE ] * factor ) );
 8002098:	4b61      	ldr	r3, [pc, #388]	; (8002220 <led_bar_breath_mode+0x240>)
 800209a:	889b      	ldrh	r3, [r3, #4]
 800209c:	0018      	movs	r0, r3
 800209e:	f7fe ffc9 	bl	8001034 <__aeabi_ui2f>
 80020a2:	1c03      	adds	r3, r0, #0
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	1c18      	adds	r0, r3, #0
 80020a8:	f7fe fcae 	bl	8000a08 <__aeabi_fmul>
 80020ac:	1c03      	adds	r3, r0, #0
                	set_led_bar_raw( i, (uint16_t) ( (float)display_state_levels[ 0 ][ EV_LED_RED ] * factor ),
 80020ae:	1c18      	adds	r0, r3, #0
 80020b0:	f7fe f9f8 	bl	80004a4 <__aeabi_f2uiz>
 80020b4:	0003      	movs	r3, r0
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	0032      	movs	r2, r6
 80020ba:	0029      	movs	r1, r5
 80020bc:	0020      	movs	r0, r4
 80020be:	f7ff fee3 	bl	8001e88 <set_led_bar_raw>
                for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 80020c2:	210e      	movs	r1, #14
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2200      	movs	r2, #0
 80020c8:	5e9b      	ldrsh	r3, [r3, r2]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	230e      	movs	r3, #14
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	2200      	movs	r2, #0
 80020da:	5e9b      	ldrsh	r3, [r3, r2]
 80020dc:	2b0b      	cmp	r3, #11
 80020de:	ddab      	ble.n	8002038 <led_bar_breath_mode+0x58>
                }
                update_led_bar();
 80020e0:	f000 f95e 	bl	80023a0 <update_led_bar>
                hs.led_bar_last_update = current_time;
 80020e4:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <led_bar_breath_mode+0x238>)
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	60da      	str	r2, [r3, #12]
                hs.led_bar_display_state += 1;
 80020ea:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <led_bar_breath_mode+0x238>)
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	4b49      	ldr	r3, [pc, #292]	; (8002218 <led_bar_breath_mode+0x238>)
 80020f4:	801a      	strh	r2, [r3, #0]
                /*
                 * Check if we have done a full lap
                 */
                if( hs.led_bar_display_state >= NO_BREATH_STEPS ) {
 80020f6:	4b48      	ldr	r3, [pc, #288]	; (8002218 <led_bar_breath_mode+0x238>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	2bc7      	cmp	r3, #199	; 0xc7
 80020fc:	d800      	bhi.n	8002100 <led_bar_breath_mode+0x120>
 80020fe:	e084      	b.n	800220a <led_bar_breath_mode+0x22a>
                	hs.led_bar_display_state = NO_BREATH_STEPS - 1;
 8002100:	4b45      	ldr	r3, [pc, #276]	; (8002218 <led_bar_breath_mode+0x238>)
 8002102:	22c7      	movs	r2, #199	; 0xc7
 8002104:	801a      	strh	r2, [r3, #0]
                	hs.led_bar_state = LED_BAR_SCAN_RIGHT;
 8002106:	4b44      	ldr	r3, [pc, #272]	; (8002218 <led_bar_breath_mode+0x238>)
 8002108:	2202      	movs	r2, #2
 800210a:	721a      	strb	r2, [r3, #8]
                }
            }
            break;
 800210c:	e07d      	b.n	800220a <led_bar_breath_mode+0x22a>
        case LED_BAR_SCAN_RIGHT :
            if( imx_is_later( current_time, hs.led_bar_last_update + hs.tansistion_time ) ) {
 800210e:	4b42      	ldr	r3, [pc, #264]	; (8002218 <led_bar_breath_mode+0x238>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	4a41      	ldr	r2, [pc, #260]	; (8002218 <led_bar_breath_mode+0x238>)
 8002114:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002116:	189a      	adds	r2, r3, r2
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0011      	movs	r1, r2
 800211c:	0018      	movs	r0, r3
 800211e:	f000 f968 	bl	80023f2 <imx_is_later>
 8002122:	1e03      	subs	r3, r0, #0
 8002124:	d100      	bne.n	8002128 <led_bar_breath_mode+0x148>
 8002126:	e072      	b.n	800220e <led_bar_breath_mode+0x22e>
                for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 8002128:	230e      	movs	r3, #14
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2200      	movs	r2, #0
 800212e:	801a      	strh	r2, [r3, #0]
 8002130:	e04d      	b.n	80021ce <led_bar_breath_mode+0x1ee>
                	factor = (float)( hs.led_bar_display_state ) / (float) (NO_BREATH_STEPS);
 8002132:	4b39      	ldr	r3, [pc, #228]	; (8002218 <led_bar_breath_mode+0x238>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	0018      	movs	r0, r3
 8002138:	f7fe ff7c 	bl	8001034 <__aeabi_ui2f>
 800213c:	1c03      	adds	r3, r0, #0
 800213e:	4937      	ldr	r1, [pc, #220]	; (800221c <led_bar_breath_mode+0x23c>)
 8002140:	1c18      	adds	r0, r3, #0
 8002142:	f7fe fa89 	bl	8000658 <__aeabi_fdiv>
 8002146:	1c03      	adds	r3, r0, #0
 8002148:	60bb      	str	r3, [r7, #8]
                	set_led_bar_raw( i, (uint16_t) ( (float)display_state_levels[ 0 ][ EV_LED_RED ] * factor ),
 800214a:	210e      	movs	r1, #14
 800214c:	187b      	adds	r3, r7, r1
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b2dc      	uxtb	r4, r3
 8002152:	4b33      	ldr	r3, [pc, #204]	; (8002220 <led_bar_breath_mode+0x240>)
 8002154:	885b      	ldrh	r3, [r3, #2]
 8002156:	0018      	movs	r0, r3
 8002158:	f7fe ff6c 	bl	8001034 <__aeabi_ui2f>
 800215c:	1c03      	adds	r3, r0, #0
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	1c18      	adds	r0, r3, #0
 8002162:	f7fe fc51 	bl	8000a08 <__aeabi_fmul>
 8002166:	1c03      	adds	r3, r0, #0
 8002168:	1c18      	adds	r0, r3, #0
 800216a:	f7fe f99b 	bl	80004a4 <__aeabi_f2uiz>
 800216e:	0003      	movs	r3, r0
 8002170:	b29d      	uxth	r5, r3
                			(uint16_t) ( (float) display_state_levels[ 0 ][ EV_LED_GREEN ] * factor ),
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <led_bar_breath_mode+0x240>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	0018      	movs	r0, r3
 8002178:	f7fe ff5c 	bl	8001034 <__aeabi_ui2f>
 800217c:	1c03      	adds	r3, r0, #0
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	1c18      	adds	r0, r3, #0
 8002182:	f7fe fc41 	bl	8000a08 <__aeabi_fmul>
 8002186:	1c03      	adds	r3, r0, #0
                	set_led_bar_raw( i, (uint16_t) ( (float)display_state_levels[ 0 ][ EV_LED_RED ] * factor ),
 8002188:	1c18      	adds	r0, r3, #0
 800218a:	f7fe f98b 	bl	80004a4 <__aeabi_f2uiz>
 800218e:	0003      	movs	r3, r0
 8002190:	b29e      	uxth	r6, r3
							(uint16_t) ( (float) display_state_levels[ 0 ][ EV_LED_BLUE ] * factor ) );
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <led_bar_breath_mode+0x240>)
 8002194:	889b      	ldrh	r3, [r3, #4]
 8002196:	0018      	movs	r0, r3
 8002198:	f7fe ff4c 	bl	8001034 <__aeabi_ui2f>
 800219c:	1c03      	adds	r3, r0, #0
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	1c18      	adds	r0, r3, #0
 80021a2:	f7fe fc31 	bl	8000a08 <__aeabi_fmul>
 80021a6:	1c03      	adds	r3, r0, #0
                	set_led_bar_raw( i, (uint16_t) ( (float)display_state_levels[ 0 ][ EV_LED_RED ] * factor ),
 80021a8:	1c18      	adds	r0, r3, #0
 80021aa:	f7fe f97b 	bl	80004a4 <__aeabi_f2uiz>
 80021ae:	0003      	movs	r3, r0
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	0032      	movs	r2, r6
 80021b4:	0029      	movs	r1, r5
 80021b6:	0020      	movs	r0, r4
 80021b8:	f7ff fe66 	bl	8001e88 <set_led_bar_raw>
                for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 80021bc:	210e      	movs	r1, #14
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2200      	movs	r2, #0
 80021c2:	5e9b      	ldrsh	r3, [r3, r2]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	230e      	movs	r3, #14
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2200      	movs	r2, #0
 80021d4:	5e9b      	ldrsh	r3, [r3, r2]
 80021d6:	2b0b      	cmp	r3, #11
 80021d8:	ddab      	ble.n	8002132 <led_bar_breath_mode+0x152>
                }
                update_led_bar();
 80021da:	f000 f8e1 	bl	80023a0 <update_led_bar>
                hs.led_bar_last_update = current_time;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <led_bar_breath_mode+0x238>)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	60da      	str	r2, [r3, #12]
                /*
                 * Check if we have done a full lap
                 */
                if( hs.led_bar_display_state == MIN_BREATH_LEVEL ) {
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <led_bar_breath_mode+0x238>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2b32      	cmp	r3, #50	; 0x32
 80021ea:	d103      	bne.n	80021f4 <led_bar_breath_mode+0x214>
                	hs.led_bar_state = LED_BAR_SCAN_LEFT;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <led_bar_breath_mode+0x238>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	721a      	strb	r2, [r3, #8]
                } else {
                    hs.led_bar_display_state -= 1;
                }
            }
            break;
 80021f2:	e00c      	b.n	800220e <led_bar_breath_mode+0x22e>
                    hs.led_bar_display_state -= 1;
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <led_bar_breath_mode+0x238>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <led_bar_breath_mode+0x238>)
 80021fe:	801a      	strh	r2, [r3, #0]
            break;
 8002200:	e005      	b.n	800220e <led_bar_breath_mode+0x22e>
        default :
        	hs.led_bar_state = LED_BAR_INIT;
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <led_bar_breath_mode+0x238>)
 8002204:	2200      	movs	r2, #0
 8002206:	721a      	strb	r2, [r3, #8]
            break;
 8002208:	e002      	b.n	8002210 <led_bar_breath_mode+0x230>
            break;
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	e000      	b.n	8002210 <led_bar_breath_mode+0x230>
            break;
 800220e:	46c0      	nop			; (mov r8, r8)
    }
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b005      	add	sp, #20
 8002216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002218:	20000628 	.word	0x20000628
 800221c:	43480000 	.word	0x43480000
 8002220:	20000aa8 	.word	0x20000aa8

08002224 <led_bar_off>:
  * @brief led_bar_off
  * @param  None
  * @retval : None
  */
void led_bar_off(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
    memset( &led_display, 0x00, sizeof( led_display ) );
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <led_bar_off+0x1c>)
 800222a:	2248      	movs	r2, #72	; 0x48
 800222c:	2100      	movs	r1, #0
 800222e:	0018      	movs	r0, r3
 8002230:	f004 fd14 	bl	8006c5c <memset>
    update_led_bar();
 8002234:	f000 f8b4 	bl	80023a0 <update_led_bar>
}/*
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	20000a60 	.word	0x20000a60

08002244 <generate_led_pwm>:
  * @brief Generate the PWM levels based on lux level
  * @param  None
  * @retval : None
  */
void generate_led_pwm(void)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
    uint8_t led_level, mask;
    int16_t i, j, index;
    float lux_scale;

    if( hs.valid_lux_level == true ) {
 800224a:	4a4f      	ldr	r2, [pc, #316]	; (8002388 <generate_led_pwm+0x144>)
 800224c:	23be      	movs	r3, #190	; 0xbe
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	227f      	movs	r2, #127	; 0x7f
 8002254:	4393      	bics	r3, r2
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <generate_led_pwm+0x20>
        lux_scale = 0.5;        // determine correct levels later - use a calculation
 800225c:	23fc      	movs	r3, #252	; 0xfc
 800225e:	059b      	lsls	r3, r3, #22
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	e002      	b.n	800226a <generate_led_pwm+0x26>
    } else
        lux_scale = 0.5;
 8002264:	23fc      	movs	r3, #252	; 0xfc
 8002266:	059b      	lsls	r3, r3, #22
 8002268:	607b      	str	r3, [r7, #4]
    /*
     * Output PWM Bits are sent for the last LED first and each of the 24 bits are sent in order of G R B bit order 7-0
     *
     * The Array contains additional byte to generate reload of data
     */
    memset( (void *) &ld.pwm_output, 0x00, sizeof( ld.pwm_output ) );
 800226a:	23a4      	movs	r3, #164	; 0xa4
 800226c:	00da      	lsls	r2, r3, #3
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <generate_led_pwm+0x148>)
 8002270:	2100      	movs	r1, #0
 8002272:	0018      	movs	r0, r3
 8002274:	f004 fcf2 	bl	8006c5c <memset>
    index = WS2812B_RESET_TIME;   // Start after some preamble
 8002278:	2308      	movs	r3, #8
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2214      	movs	r2, #20
 800227e:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < LED_BAR_NO_LEDS;  i++ ) {
 8002280:	230c      	movs	r3, #12
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2200      	movs	r2, #0
 8002286:	801a      	strh	r2, [r3, #0]
 8002288:	e074      	b.n	8002374 <generate_led_pwm+0x130>
        for( j = 0; j < LEDS_NO_LEDS; j++ ) {
 800228a:	230a      	movs	r3, #10
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2200      	movs	r2, #0
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	e060      	b.n	8002356 <generate_led_pwm+0x112>
            led_level = (uint8_t) ( lux_scale * (float) led_display[ i ][ j ] );
 8002294:	230c      	movs	r3, #12
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2200      	movs	r2, #0
 800229a:	5e9a      	ldrsh	r2, [r3, r2]
 800229c:	230a      	movs	r3, #10
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2000      	movs	r0, #0
 80022a2:	5e18      	ldrsh	r0, [r3, r0]
 80022a4:	493a      	ldr	r1, [pc, #232]	; (8002390 <generate_led_pwm+0x14c>)
 80022a6:	0013      	movs	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	189b      	adds	r3, r3, r2
 80022ac:	181b      	adds	r3, r3, r0
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	5a5b      	ldrh	r3, [r3, r1]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f7fe febe 	bl	8001034 <__aeabi_ui2f>
 80022b8:	1c03      	adds	r3, r0, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	1c18      	adds	r0, r3, #0
 80022be:	f7fe fba3 	bl	8000a08 <__aeabi_fmul>
 80022c2:	1c03      	adds	r3, r0, #0
 80022c4:	1cfc      	adds	r4, r7, #3
 80022c6:	1c18      	adds	r0, r3, #0
 80022c8:	f7fe f8ec 	bl	80004a4 <__aeabi_f2uiz>
 80022cc:	0003      	movs	r3, r0
 80022ce:	7023      	strb	r3, [r4, #0]
            for( mask = 0x80; mask != 0 ; mask >>= 1 ) {
 80022d0:	230f      	movs	r3, #15
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e02f      	b.n	800233a <generate_led_pwm+0xf6>
                if( ( led_level & mask ) == 0x00 ) {
 80022da:	1cfb      	adds	r3, r7, #3
 80022dc:	220f      	movs	r2, #15
 80022de:	18ba      	adds	r2, r7, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	4013      	ands	r3, r2
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d110      	bne.n	800230e <generate_led_pwm+0xca>
                    ld.pwm_output[ index++ ] = NZR_0;
 80022ec:	2008      	movs	r0, #8
 80022ee:	183b      	adds	r3, r7, r0
 80022f0:	2200      	movs	r2, #0
 80022f2:	5e9a      	ldrsh	r2, [r3, r2]
 80022f4:	b293      	uxth	r3, r2
 80022f6:	3301      	adds	r3, #1
 80022f8:	b299      	uxth	r1, r3
 80022fa:	183b      	adds	r3, r7, r0
 80022fc:	8019      	strh	r1, [r3, #0]
 80022fe:	0013      	movs	r3, r2
 8002300:	4a24      	ldr	r2, [pc, #144]	; (8002394 <generate_led_pwm+0x150>)
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	18d3      	adds	r3, r2, r3
 8002306:	3304      	adds	r3, #4
 8002308:	4a23      	ldr	r2, [pc, #140]	; (8002398 <generate_led_pwm+0x154>)
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e00f      	b.n	800232e <generate_led_pwm+0xea>
                } else {
                    ld.pwm_output[ index++ ] = NZR_1;
 800230e:	2008      	movs	r0, #8
 8002310:	183b      	adds	r3, r7, r0
 8002312:	2200      	movs	r2, #0
 8002314:	5e9a      	ldrsh	r2, [r3, r2]
 8002316:	b293      	uxth	r3, r2
 8002318:	3301      	adds	r3, #1
 800231a:	b299      	uxth	r1, r3
 800231c:	183b      	adds	r3, r7, r0
 800231e:	8019      	strh	r1, [r3, #0]
 8002320:	0013      	movs	r3, r2
 8002322:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <generate_led_pwm+0x150>)
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	18d3      	adds	r3, r2, r3
 8002328:	3304      	adds	r3, #4
 800232a:	4a1c      	ldr	r2, [pc, #112]	; (800239c <generate_led_pwm+0x158>)
 800232c:	601a      	str	r2, [r3, #0]
            for( mask = 0x80; mask != 0 ; mask >>= 1 ) {
 800232e:	220f      	movs	r2, #15
 8002330:	18bb      	adds	r3, r7, r2
 8002332:	18ba      	adds	r2, r7, r2
 8002334:	7812      	ldrb	r2, [r2, #0]
 8002336:	0852      	lsrs	r2, r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	230f      	movs	r3, #15
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ca      	bne.n	80022da <generate_led_pwm+0x96>
        for( j = 0; j < LEDS_NO_LEDS; j++ ) {
 8002344:	210a      	movs	r1, #10
 8002346:	187b      	adds	r3, r7, r1
 8002348:	2200      	movs	r2, #0
 800234a:	5e9b      	ldrsh	r3, [r3, r2]
 800234c:	b29b      	uxth	r3, r3
 800234e:	3301      	adds	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	187b      	adds	r3, r7, r1
 8002354:	801a      	strh	r2, [r3, #0]
 8002356:	230a      	movs	r3, #10
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2200      	movs	r2, #0
 800235c:	5e9b      	ldrsh	r3, [r3, r2]
 800235e:	2b02      	cmp	r3, #2
 8002360:	dd98      	ble.n	8002294 <generate_led_pwm+0x50>
    for( i = 0; i < LED_BAR_NO_LEDS;  i++ ) {
 8002362:	210c      	movs	r1, #12
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2200      	movs	r2, #0
 8002368:	5e9b      	ldrsh	r3, [r3, r2]
 800236a:	b29b      	uxth	r3, r3
 800236c:	3301      	adds	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	187b      	adds	r3, r7, r1
 8002372:	801a      	strh	r2, [r3, #0]
 8002374:	230c      	movs	r3, #12
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2200      	movs	r2, #0
 800237a:	5e9b      	ldrsh	r3, [r3, r2]
 800237c:	2b0b      	cmp	r3, #11
 800237e:	dd84      	ble.n	800228a <generate_led_pwm+0x46>
                }
            }
        }
    }
}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b005      	add	sp, #20
 8002386:	bd90      	pop	{r4, r7, pc}
 8002388:	20000628 	.word	0x20000628
 800238c:	20000094 	.word	0x20000094
 8002390:	20000a60 	.word	0x20000a60
 8002394:	20000090 	.word	0x20000090
 8002398:	ffc00000 	.word	0xffc00000
 800239c:	fffff000 	.word	0xfffff000

080023a0 <update_led_bar>:
  * @brief update_led_bar
  * @param  None
  * @retval : None
  */
void update_led_bar(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	/*
	 * Generate PWM Waveform
	 */
	generate_led_pwm();
 80023a4:	f7ff ff4e 	bl	8002244 <generate_led_pwm>
	/*
	 * Take the data that has been prepared using generate pwm and output over SPI 2
	 */
	LED_display_update_completed = false;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <update_led_bar+0x34>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
	/*
	 * Initiate Transfer
	 */
	HAL_SPI_Transmit_DMA( &hspi2, (uint8_t *) ld.pwm_output, sizeof( ld.pwm_output ) );
 80023ae:	23a4      	movs	r3, #164	; 0xa4
 80023b0:	00da      	lsls	r2, r3, #3
 80023b2:	4909      	ldr	r1, [pc, #36]	; (80023d8 <update_led_bar+0x38>)
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <update_led_bar+0x3c>)
 80023b6:	0018      	movs	r0, r3
 80023b8:	f002 fd40 	bl	8004e3c <HAL_SPI_Transmit_DMA>
	/*
	 * Wait for it to complete - Later make this checked in main loop for LED management to speed operations up
	 */
	while( LED_display_update_completed == false )
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <update_led_bar+0x34>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2201      	movs	r2, #1
 80023c6:	4053      	eors	r3, r2
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f7      	bne.n	80023be <update_led_bar+0x1e>
		;
}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000a5c 	.word	0x20000a5c
 80023d8:	20000094 	.word	0x20000094
 80023dc:	200005c4 	.word	0x200005c4

080023e0 <system_init>:
  * @brief	Initialize all elements of the system
  * @param  None
  * @retval : None
  */
void system_init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	/*
	 * Initialize each of the sub systems
	 */
	led_init();
 80023e4:	f7ff fd20 	bl	8001e28 <led_init>
	init_led_bar();
 80023e8:	f7ff fdb0 	bl	8001f4c <init_led_bar>
}
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <imx_is_later>:
 * NOTE: Assume that the two times are no more than a quarter of the possible range of values apart.
 *
 * written by Eric Thelin 29 June 2016
 */
bool imx_is_later( uint32_t time1, uint32_t time2 )
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
	const uint32_t range_top_quarter = 0xC0000000;
 80023fc:	23c0      	movs	r3, #192	; 0xc0
 80023fe:	061b      	lsls	r3, r3, #24
 8002400:	617b      	str	r3, [r7, #20]
	const uint32_t range_mid_point =   0x80000000;
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	613b      	str	r3, [r7, #16]
	const uint32_t range_low_quarter = 0x40000000;
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	05db      	lsls	r3, r3, #23
 800240c:	60fb      	str	r3, [r7, #12]

	if ( time1 >= range_mid_point ) {
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	429a      	cmp	r2, r3
 8002414:	d30c      	bcc.n	8002430 <imx_is_later+0x3e>
		if ( time2 >= range_low_quarter ) {
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	429a      	cmp	r2, r3
 800241c:	d306      	bcc.n	800242c <imx_is_later+0x3a>
			return ( time1 > time2 );
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	419b      	sbcs	r3, r3
 8002426:	425b      	negs	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e00d      	b.n	8002448 <imx_is_later+0x56>
		}
		else {// Assume that time2 has rolled over and is really the bigger number
			return false;
 800242c:	2300      	movs	r3, #0
 800242e:	e00b      	b.n	8002448 <imx_is_later+0x56>
		}
	}
	else {// time1 is in the low half of the range

		if ( time2 <= range_top_quarter ) {
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	429a      	cmp	r2, r3
 8002436:	d806      	bhi.n	8002446 <imx_is_later+0x54>
			return ( time1 > time2 );
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	419b      	sbcs	r3, r3
 8002440:	425b      	negs	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	e000      	b.n	8002448 <imx_is_later+0x56>
		}
		else {// Assume time1 has rolled over and is really the bigger number
			return true;
 8002446:	2301      	movs	r3, #1
		}
	}
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b006      	add	sp, #24
 800244e:	bd80      	pop	{r7, pc}

08002450 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002452:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002454:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002456:	e003      	b.n	8002460 <LoopCopyDataInit>

08002458 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800245a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800245c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800245e:	3104      	adds	r1, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002460:	480b      	ldr	r0, [pc, #44]	; (8002490 <LoopForever+0xa>)
  ldr r3, =_edata
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <LoopForever+0xe>)
  adds r2, r0, r1
 8002464:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002466:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002468:	d3f6      	bcc.n	8002458 <CopyDataInit>
  ldr r2, =_sbss
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <LoopForever+0x12>)
  b LoopFillZerobss
 800246c:	e002      	b.n	8002474 <LoopFillZerobss>

0800246e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  str  r3, [r2]
 8002470:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002472:	3204      	adds	r2, #4

08002474 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <LoopForever+0x16>)
  cmp r2, r3
 8002476:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002478:	d3f9      	bcc.n	800246e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800247a:	f7ff fcc9 	bl	8001e10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800247e:	f004 fbc9 	bl	8006c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002482:	f7fe fe41 	bl	8001108 <main>

08002486 <LoopForever>:

LoopForever:
    b LoopForever
 8002486:	e7fe      	b.n	8002486 <LoopForever>
  ldr   r0, =_estack
 8002488:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 800248c:	0800789c 	.word	0x0800789c
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002494:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002498:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800249c:	20000af8 	.word	0x20000af8

080024a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC1_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_Init+0x3c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_Init+0x3c>)
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	0049      	lsls	r1, r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 f810 	bl	80024e4 <HAL_InitTick>
 80024c4:	1e03      	subs	r3, r0, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e001      	b.n	80024d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80024d0:	f7ff f9d0 	bl	8001874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024d4:	1dfb      	adds	r3, r7, #7
 80024d6:	781b      	ldrb	r3, [r3, #0]
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40022000 	.word	0x40022000

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024ec:	230f      	movs	r3, #15
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_InitTick+0x88>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d02b      	beq.n	8002554 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80024fc:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <HAL_InitTick+0x8c>)
 80024fe:	681c      	ldr	r4, [r3, #0]
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_InitTick+0x88>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0019      	movs	r1, r3
 8002506:	23fa      	movs	r3, #250	; 0xfa
 8002508:	0098      	lsls	r0, r3, #2
 800250a:	f7fd fdfb 	bl	8000104 <__udivsi3>
 800250e:	0003      	movs	r3, r0
 8002510:	0019      	movs	r1, r3
 8002512:	0020      	movs	r0, r4
 8002514:	f7fd fdf6 	bl	8000104 <__udivsi3>
 8002518:	0003      	movs	r3, r0
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fda9 	bl	8003072 <HAL_SYSTICK_Config>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d112      	bne.n	800254a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d80a      	bhi.n	8002540 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	2301      	movs	r3, #1
 800252e:	425b      	negs	r3, r3
 8002530:	2200      	movs	r2, #0
 8002532:	0018      	movs	r0, r3
 8002534:	f000 fd78 	bl	8003028 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_InitTick+0x90>)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	e00d      	b.n	800255c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002540:	230f      	movs	r3, #15
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e008      	b.n	800255c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800254a:	230f      	movs	r3, #15
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e003      	b.n	800255c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002554:	230f      	movs	r3, #15
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800255c:	230f      	movs	r3, #15
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	781b      	ldrb	r3, [r3, #0]
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b005      	add	sp, #20
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	20000008 	.word	0x20000008
 8002570:	20000000 	.word	0x20000000
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_IncTick+0x18>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <HAL_IncTick+0x1c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	18d2      	adds	r2, r2, r3
 8002586:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_IncTick+0x18>)
 8002588:	601a      	str	r2, [r3, #0]
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000af0 	.word	0x20000af0
 8002594:	20000008 	.word	0x20000008

08002598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  return uwTick;
 800259c:	4b02      	ldr	r3, [pc, #8]	; (80025a8 <HAL_GetTick+0x10>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	20000af0 	.word	0x20000af0

080025ac <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80025bc:	401a      	ands	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	fe3fffff 	.word	0xfe3fffff

080025d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	23e0      	movs	r3, #224	; 0xe0
 80025e2:	045b      	lsls	r3, r3, #17
 80025e4:	4013      	ands	r3, r2
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b002      	add	sp, #8
 80025ec:	bd80      	pop	{r7, pc}

080025ee <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	2104      	movs	r1, #4
 8002602:	400a      	ands	r2, r1
 8002604:	2107      	movs	r1, #7
 8002606:	4091      	lsls	r1, r2
 8002608:	000a      	movs	r2, r1
 800260a:	43d2      	mvns	r2, r2
 800260c:	401a      	ands	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2104      	movs	r1, #4
 8002612:	400b      	ands	r3, r1
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4099      	lsls	r1, r3
 8002618:	000b      	movs	r3, r1
 800261a:	431a      	orrs	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}

08002628 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	211f      	movs	r1, #31
 800263c:	400a      	ands	r2, r1
 800263e:	210f      	movs	r1, #15
 8002640:	4091      	lsls	r1, r2
 8002642:	000a      	movs	r2, r1
 8002644:	43d2      	mvns	r2, r2
 8002646:	401a      	ands	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0e9b      	lsrs	r3, r3, #26
 800264c:	210f      	movs	r1, #15
 800264e:	4019      	ands	r1, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	201f      	movs	r0, #31
 8002654:	4003      	ands	r3, r0
 8002656:	4099      	lsls	r1, r3
 8002658:	000b      	movs	r3, r1
 800265a:	431a      	orrs	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b004      	add	sp, #16
 8002666:	bd80      	pop	{r7, pc}

08002668 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	035b      	lsls	r3, r3, #13
 800267a:	0b5b      	lsrs	r3, r3, #13
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b002      	add	sp, #8
 8002688:	bd80      	pop	{r7, pc}

0800268a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	0352      	lsls	r2, r2, #13
 800269c:	0b52      	lsrs	r2, r2, #13
 800269e:	43d2      	mvns	r2, r2
 80026a0:	401a      	ands	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b002      	add	sp, #8
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	0212      	lsls	r2, r2, #8
 80026c4:	43d2      	mvns	r2, r2
 80026c6:	401a      	ands	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	400b      	ands	r3, r1
 80026d0:	4904      	ldr	r1, [pc, #16]	; (80026e4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80026d2:	400b      	ands	r3, r1
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b004      	add	sp, #16
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	07ffff00 	.word	0x07ffff00

080026e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a05      	ldr	r2, [pc, #20]	; (800270c <LL_ADC_EnableInternalRegulator+0x24>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	0552      	lsls	r2, r2, #21
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b002      	add	sp, #8
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	6fffffe8 	.word	0x6fffffe8

08002710 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	055b      	lsls	r3, r3, #21
 8002720:	401a      	ands	r2, r3
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	055b      	lsls	r3, r3, #21
 8002726:	429a      	cmp	r2, r3
 8002728:	d101      	bne.n	800272e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800272e:	2300      	movs	r3, #0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}

08002738 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2201      	movs	r2, #1
 8002746:	4013      	ands	r3, r2
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <LL_ADC_IsEnabled+0x18>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <LL_ADC_IsEnabled+0x1a>
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}

0800275a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2204      	movs	r2, #4
 8002768:	4013      	ands	r3, r2
 800276a:	2b04      	cmp	r3, #4
 800276c:	d101      	bne.n	8002772 <LL_ADC_REG_IsConversionOngoing+0x18>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002772:	2300      	movs	r3, #0
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b002      	add	sp, #8
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002784:	231f      	movs	r3, #31
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e1aa      	b.n	8002af8 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10a      	bne.n	80027c0 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7ff f885 	bl	80018bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2254      	movs	r2, #84	; 0x54
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7ff ffa3 	bl	8002710 <LL_ADC_IsInternalRegulatorEnabled>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d114      	bne.n	80027f8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7ff ff88 	bl	80026e8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027d8:	4bc9      	ldr	r3, [pc, #804]	; (8002b00 <HAL_ADC_Init+0x384>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	49c9      	ldr	r1, [pc, #804]	; (8002b04 <HAL_ADC_Init+0x388>)
 80027de:	0018      	movs	r0, r3
 80027e0:	f7fd fc90 	bl	8000104 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80027ea:	e002      	b.n	80027f2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f9      	bne.n	80027ec <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7ff ff87 	bl	8002710 <LL_ADC_IsInternalRegulatorEnabled>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d10f      	bne.n	8002826 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	2210      	movs	r2, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2201      	movs	r2, #1
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 800281e:	231f      	movs	r3, #31
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff ff95 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002830:	0003      	movs	r3, r0
 8002832:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	2210      	movs	r2, #16
 800283a:	4013      	ands	r3, r2
 800283c:	d000      	beq.n	8002840 <HAL_ADC_Init+0xc4>
 800283e:	e14e      	b.n	8002ade <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d000      	beq.n	8002848 <HAL_ADC_Init+0xcc>
 8002846:	e14a      	b.n	8002ade <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	4aae      	ldr	r2, [pc, #696]	; (8002b08 <HAL_ADC_Init+0x38c>)
 800284e:	4013      	ands	r3, r2
 8002850:	2202      	movs	r2, #2
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0018      	movs	r0, r3
 800285e:	f7ff ff6b 	bl	8002738 <LL_ADC_IsEnabled>
 8002862:	1e03      	subs	r3, r0, #0
 8002864:	d137      	bne.n	80028d6 <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2218      	movs	r2, #24
 800286e:	4393      	bics	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	0899      	lsrs	r1, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	0f9b      	lsrs	r3, r3, #30
 800288e:	079a      	lsls	r2, r3, #30
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	23c0      	movs	r3, #192	; 0xc0
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d018      	beq.n	80028d6 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	05db      	lsls	r3, r3, #23
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d012      	beq.n	80028d6 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	061b      	lsls	r3, r3, #24
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d00c      	beq.n	80028d6 <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80028bc:	4b93      	ldr	r3, [pc, #588]	; (8002b0c <HAL_ADC_Init+0x390>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a93      	ldr	r2, [pc, #588]	; (8002b10 <HAL_ADC_Init+0x394>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	23f0      	movs	r3, #240	; 0xf0
 80028cc:	039b      	lsls	r3, r3, #14
 80028ce:	401a      	ands	r2, r3
 80028d0:	4b8e      	ldr	r3, [pc, #568]	; (8002b0c <HAL_ADC_Init+0x390>)
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7e1b      	ldrb	r3, [r3, #24]
 80028da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7e5b      	ldrb	r3, [r3, #25]
 80028e0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7e9b      	ldrb	r3, [r3, #26]
 80028e8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80028ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_ADC_Init+0x17e>
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	e000      	b.n	80028fc <HAL_ADC_Init+0x180>
 80028fa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80028fc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002902:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	da04      	bge.n	8002916 <HAL_ADC_Init+0x19a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	e001      	b.n	800291a <HAL_ADC_Init+0x19e>
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 800291a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	5c5b      	ldrb	r3, [r3, r1]
 8002922:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002924:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	5c9b      	ldrb	r3, [r3, r2]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d115      	bne.n	8002962 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7e9b      	ldrb	r3, [r3, #26]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	0252      	lsls	r2, r2, #9
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	e00b      	b.n	8002962 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	2220      	movs	r2, #32
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	2201      	movs	r2, #1
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296e:	23e0      	movs	r3, #224	; 0xe0
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002978:	4313      	orrs	r3, r2
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8002988:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 800298e:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8002994:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	223c      	movs	r2, #60	; 0x3c
 80029a0:	5c9b      	ldrb	r3, [r3, r2]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d103      	bne.n	80029ae <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2201      	movs	r2, #1
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4a57      	ldr	r2, [pc, #348]	; (8002b14 <HAL_ADC_Init+0x398>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	0019      	movs	r1, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	4a53      	ldr	r2, [pc, #332]	; (8002b18 <HAL_ADC_Init+0x39c>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	001a      	movs	r2, r3
 80029e4:	2100      	movs	r1, #0
 80029e6:	f7ff fe02 	bl	80025ee <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	494a      	ldr	r1, [pc, #296]	; (8002b1c <HAL_ADC_Init+0x3a0>)
 80029f4:	001a      	movs	r2, r3
 80029f6:	f7ff fdfa 	bl	80025ee <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2110      	movs	r1, #16
 8002a0e:	4249      	negs	r1, r1
 8002a10:	430a      	orrs	r2, r1
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28
 8002a14:	e03c      	b.n	8002a90 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	039b      	lsls	r3, r3, #14
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d136      	bne.n	8002a90 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	e00c      	b.n	8002a42 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	40da      	lsrs	r2, r3
 8002a32:	0013      	movs	r3, r2
 8002a34:	220f      	movs	r2, #15
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d006      	beq.n	8002a4a <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b07      	cmp	r3, #7
 8002a46:	d9ef      	bls.n	8002a28 <HAL_ADC_Init+0x2ac>
 8002a48:	e000      	b.n	8002a4c <HAL_ADC_Init+0x2d0>
        {
          break;
 8002a4a:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d109      	bne.n	8002a66 <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2110      	movs	r1, #16
 8002a5e:	4249      	negs	r1, r1
 8002a60:	430a      	orrs	r2, r1
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
 8002a64:	e014      	b.n	8002a90 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	4a2b      	ldr	r2, [pc, #172]	; (8002b20 <HAL_ADC_Init+0x3a4>)
 8002a72:	4694      	mov	ip, r2
 8002a74:	4463      	add	r3, ip
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	221c      	movs	r2, #28
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	4252      	negs	r2, r2
 8002a80:	409a      	lsls	r2, r3
 8002a82:	0011      	movs	r1, r2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4a23      	ldr	r2, [pc, #140]	; (8002b24 <HAL_ADC_Init+0x3a8>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	2203      	movs	r2, #3
 8002aac:	4393      	bics	r3, r2
 8002aae:	2201      	movs	r2, #1
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ab6:	e01c      	b.n	8002af2 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	2212      	movs	r2, #18
 8002abe:	4393      	bics	r3, r2
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2201      	movs	r2, #1
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8002ad4:	231f      	movs	r3, #31
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002adc:	e009      	b.n	8002af2 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8002aea:	231f      	movs	r3, #31
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002af2:	231f      	movs	r3, #31
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	781b      	ldrb	r3, [r3, #0]
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b008      	add	sp, #32
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000000 	.word	0x20000000
 8002b04:	00030d40 	.word	0x00030d40
 8002b08:	fffffefd 	.word	0xfffffefd
 8002b0c:	40012708 	.word	0x40012708
 8002b10:	ffc3ffff 	.word	0xffc3ffff
 8002b14:	fffe0219 	.word	0xfffe0219
 8002b18:	dffffc02 	.word	0xdffffc02
 8002b1c:	07ffff04 	.word	0x07ffff04
 8002b20:	3fffffff 	.word	0x3fffffff
 8002b24:	833fffe7 	.word	0x833fffe7

08002b28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b32:	2317      	movs	r3, #23
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2254      	movs	r2, #84	; 0x54
 8002b42:	5c9b      	ldrb	r3, [r3, r2]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x24>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e1bc      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x39e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2254      	movs	r2, #84	; 0x54
 8002b50:	2101      	movs	r1, #1
 8002b52:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7ff fdfe 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002b5e:	1e03      	subs	r3, r0, #0
 8002b60:	d000      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x3c>
 8002b62:	e19f      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d100      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x46>
 8002b6c:	e13e      	b.n	8002dec <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d004      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b7e:	4abf      	ldr	r2, [pc, #764]	; (8002e7c <HAL_ADC_ConfigChannel+0x354>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	0010      	movs	r0, r2
 8002b90:	f7ff fd6a 	bl	8002668 <LL_ADC_REG_SetSequencerChAdd>
 8002b94:	e0c9      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	211f      	movs	r1, #31
 8002ba0:	400b      	ands	r3, r1
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	4099      	lsls	r1, r3
 8002ba6:	000b      	movs	r3, r1
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	035b      	lsls	r3, r3, #13
 8002bb4:	0b5b      	lsrs	r3, r3, #13
 8002bb6:	d105      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x9c>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	221f      	movs	r2, #31
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	e098      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d000      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0xa8>
 8002bce:	e091      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x1cc>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d000      	beq.n	8002bdc <HAL_ADC_ConfigChannel+0xb4>
 8002bda:	e089      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x1c8>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2204      	movs	r2, #4
 8002be2:	4013      	ands	r3, r2
 8002be4:	d000      	beq.n	8002be8 <HAL_ADC_ConfigChannel+0xc0>
 8002be6:	e081      	b.n	8002cec <HAL_ADC_ConfigChannel+0x1c4>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2208      	movs	r2, #8
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d000      	beq.n	8002bf4 <HAL_ADC_ConfigChannel+0xcc>
 8002bf2:	e079      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x1c0>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d000      	beq.n	8002c00 <HAL_ADC_ConfigChannel+0xd8>
 8002bfe:	e071      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x1bc>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2220      	movs	r2, #32
 8002c06:	4013      	ands	r3, r2
 8002c08:	d000      	beq.n	8002c0c <HAL_ADC_ConfigChannel+0xe4>
 8002c0a:	e069      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x1b8>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2240      	movs	r2, #64	; 0x40
 8002c12:	4013      	ands	r3, r2
 8002c14:	d000      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0xf0>
 8002c16:	e061      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x1b4>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d000      	beq.n	8002c24 <HAL_ADC_ConfigChannel+0xfc>
 8002c22:	e059      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x1b0>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d151      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x1ac>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d149      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x1a8>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4013      	ands	r3, r2
 8002c46:	d141      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x1a4>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	4013      	ands	r3, r2
 8002c52:	d139      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x1a0>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	015b      	lsls	r3, r3, #5
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d131      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x19c>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	019b      	lsls	r3, r3, #6
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d129      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x198>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	01db      	lsls	r3, r3, #7
 8002c74:	4013      	ands	r3, r2
 8002c76:	d121      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x194>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	4013      	ands	r3, r2
 8002c82:	d119      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x190>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	025b      	lsls	r3, r3, #9
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d111      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x18c>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d109      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x188>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	02db      	lsls	r3, r3, #11
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d001      	beq.n	8002cac <HAL_ADC_ConfigChannel+0x184>
 8002ca8:	2312      	movs	r3, #18
 8002caa:	e024      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cac:	2300      	movs	r3, #0
 8002cae:	e022      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cb0:	2311      	movs	r3, #17
 8002cb2:	e020      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	e01e      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cb8:	230f      	movs	r3, #15
 8002cba:	e01c      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cbc:	230e      	movs	r3, #14
 8002cbe:	e01a      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cc0:	230d      	movs	r3, #13
 8002cc2:	e018      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	e016      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cc8:	230b      	movs	r3, #11
 8002cca:	e014      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002ccc:	230a      	movs	r3, #10
 8002cce:	e012      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cd0:	2309      	movs	r3, #9
 8002cd2:	e010      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	e00e      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cd8:	2307      	movs	r3, #7
 8002cda:	e00c      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cdc:	2306      	movs	r3, #6
 8002cde:	e00a      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002ce0:	2305      	movs	r3, #5
 8002ce2:	e008      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	e006      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e004      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e002      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1ce>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	6852      	ldr	r2, [r2, #4]
 8002cfa:	201f      	movs	r0, #31
 8002cfc:	4002      	ands	r2, r0
 8002cfe:	4093      	lsls	r3, r2
 8002d00:	000a      	movs	r2, r1
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d808      	bhi.n	8002d2a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	001a      	movs	r2, r3
 8002d26:	f7ff fc7f 	bl	8002628 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	001a      	movs	r2, r3
 8002d38:	f7ff fcba 	bl	80026b0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db00      	blt.n	8002d46 <HAL_ADC_ConfigChannel+0x21e>
 8002d44:	e0b8      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d46:	4b4e      	ldr	r3, [pc, #312]	; (8002e80 <HAL_ADC_ConfigChannel+0x358>)
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7ff fc43 	bl	80025d4 <LL_ADC_GetCommonPathInternalCh>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a4b      	ldr	r2, [pc, #300]	; (8002e84 <HAL_ADC_ConfigChannel+0x35c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d11d      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x270>
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	4013      	ands	r3, r2
 8002d64:	d118      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	0412      	lsls	r2, r2, #16
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	4a44      	ldr	r2, [pc, #272]	; (8002e80 <HAL_ADC_ConfigChannel+0x358>)
 8002d70:	0019      	movs	r1, r3
 8002d72:	0010      	movs	r0, r2
 8002d74:	f7ff fc1a 	bl	80025ac <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_ADC_ConfigChannel+0x360>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4943      	ldr	r1, [pc, #268]	; (8002e8c <HAL_ADC_ConfigChannel+0x364>)
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f7fd f9c0 	bl	8000104 <__udivsi3>
 8002d84:	0003      	movs	r3, r0
 8002d86:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8002d88:	e002      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f9      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d96:	e08f      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a3c      	ldr	r2, [pc, #240]	; (8002e90 <HAL_ADC_ConfigChannel+0x368>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10e      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x298>
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	045b      	lsls	r3, r3, #17
 8002da8:	4013      	ands	r3, r2
 8002daa:	d109      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	0452      	lsls	r2, r2, #17
 8002db2:	4313      	orrs	r3, r2
 8002db4:	4a32      	ldr	r2, [pc, #200]	; (8002e80 <HAL_ADC_ConfigChannel+0x358>)
 8002db6:	0019      	movs	r1, r3
 8002db8:	0010      	movs	r0, r2
 8002dba:	f7ff fbf7 	bl	80025ac <LL_ADC_SetCommonPathInternalCh>
 8002dbe:	e07b      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a33      	ldr	r2, [pc, #204]	; (8002e94 <HAL_ADC_ConfigChannel+0x36c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d000      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x2a4>
 8002dca:	e075      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	03db      	lsls	r3, r3, #15
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d000      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x2b0>
 8002dd6:	e06f      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	03d2      	lsls	r2, r2, #15
 8002dde:	4313      	orrs	r3, r2
 8002de0:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <HAL_ADC_ConfigChannel+0x358>)
 8002de2:	0019      	movs	r1, r3
 8002de4:	0010      	movs	r0, r2
 8002de6:	f7ff fbe1 	bl	80025ac <LL_ADC_SetCommonPathInternalCh>
 8002dea:	e065      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	061b      	lsls	r3, r3, #24
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d004      	beq.n	8002e02 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002dfc:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <HAL_ADC_ConfigChannel+0x354>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d107      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	0010      	movs	r0, r2
 8002e0e:	f7ff fc3c 	bl	800268a <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da4e      	bge.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_ADC_ConfigChannel+0x358>)
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f7ff fbd9 	bl	80025d4 <LL_ADC_GetCommonPathInternalCh>
 8002e22:	0003      	movs	r3, r0
 8002e24:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a16      	ldr	r2, [pc, #88]	; (8002e84 <HAL_ADC_ConfigChannel+0x35c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d108      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <HAL_ADC_ConfigChannel+0x370>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <HAL_ADC_ConfigChannel+0x358>)
 8002e38:	0019      	movs	r1, r3
 8002e3a:	0010      	movs	r0, r2
 8002e3c:	f7ff fbb6 	bl	80025ac <LL_ADC_SetCommonPathInternalCh>
 8002e40:	e03a      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <HAL_ADC_ConfigChannel+0x368>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d108      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <HAL_ADC_ConfigChannel+0x374>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <HAL_ADC_ConfigChannel+0x358>)
 8002e54:	0019      	movs	r1, r3
 8002e56:	0010      	movs	r0, r2
 8002e58:	f7ff fba8 	bl	80025ac <LL_ADC_SetCommonPathInternalCh>
 8002e5c:	e02c      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <HAL_ADC_ConfigChannel+0x36c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d127      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <HAL_ADC_ConfigChannel+0x378>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <HAL_ADC_ConfigChannel+0x358>)
 8002e70:	0019      	movs	r1, r3
 8002e72:	0010      	movs	r0, r2
 8002e74:	f7ff fb9a 	bl	80025ac <LL_ADC_SetCommonPathInternalCh>
 8002e78:	e01e      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x390>
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	80000004 	.word	0x80000004
 8002e80:	40012708 	.word	0x40012708
 8002e84:	b0001000 	.word	0xb0001000
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	00030d40 	.word	0x00030d40
 8002e90:	b8004000 	.word	0xb8004000
 8002e94:	b4002000 	.word	0xb4002000
 8002e98:	ff7fffff 	.word	0xff7fffff
 8002e9c:	feffffff 	.word	0xfeffffff
 8002ea0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8002eb0:	2317      	movs	r3, #23
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2254      	movs	r2, #84	; 0x54
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002ec0:	2317      	movs	r3, #23
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	781b      	ldrb	r3, [r3, #0]
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b006      	add	sp, #24
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)

08002ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ee2:	d809      	bhi.n	8002ef8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee4:	1dfb      	adds	r3, r7, #7
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	001a      	movs	r2, r3
 8002eea:	231f      	movs	r3, #31
 8002eec:	401a      	ands	r2, r3
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <__NVIC_EnableIRQ+0x30>)
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4091      	lsls	r1, r2
 8002ef4:	000a      	movs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
  }
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	1dfb      	adds	r3, r7, #7
 8002f10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b7f      	cmp	r3, #127	; 0x7f
 8002f18:	d828      	bhi.n	8002f6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <__NVIC_SetPriority+0xd4>)
 8002f1c:	1dfb      	adds	r3, r7, #7
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b25b      	sxtb	r3, r3
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	33c0      	adds	r3, #192	; 0xc0
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	589b      	ldr	r3, [r3, r2]
 8002f2a:	1dfa      	adds	r2, r7, #7
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	0011      	movs	r1, r2
 8002f30:	2203      	movs	r2, #3
 8002f32:	400a      	ands	r2, r1
 8002f34:	00d2      	lsls	r2, r2, #3
 8002f36:	21ff      	movs	r1, #255	; 0xff
 8002f38:	4091      	lsls	r1, r2
 8002f3a:	000a      	movs	r2, r1
 8002f3c:	43d2      	mvns	r2, r2
 8002f3e:	401a      	ands	r2, r3
 8002f40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	019b      	lsls	r3, r3, #6
 8002f46:	22ff      	movs	r2, #255	; 0xff
 8002f48:	401a      	ands	r2, r3
 8002f4a:	1dfb      	adds	r3, r7, #7
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	2303      	movs	r3, #3
 8002f52:	4003      	ands	r3, r0
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f58:	481f      	ldr	r0, [pc, #124]	; (8002fd8 <__NVIC_SetPriority+0xd4>)
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	430a      	orrs	r2, r1
 8002f64:	33c0      	adds	r3, #192	; 0xc0
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f6a:	e031      	b.n	8002fd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <__NVIC_SetPriority+0xd8>)
 8002f6e:	1dfb      	adds	r3, r7, #7
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	0019      	movs	r1, r3
 8002f74:	230f      	movs	r3, #15
 8002f76:	400b      	ands	r3, r1
 8002f78:	3b08      	subs	r3, #8
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3306      	adds	r3, #6
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	18d3      	adds	r3, r2, r3
 8002f82:	3304      	adds	r3, #4
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1dfa      	adds	r2, r7, #7
 8002f88:	7812      	ldrb	r2, [r2, #0]
 8002f8a:	0011      	movs	r1, r2
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	400a      	ands	r2, r1
 8002f90:	00d2      	lsls	r2, r2, #3
 8002f92:	21ff      	movs	r1, #255	; 0xff
 8002f94:	4091      	lsls	r1, r2
 8002f96:	000a      	movs	r2, r1
 8002f98:	43d2      	mvns	r2, r2
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	019b      	lsls	r3, r3, #6
 8002fa2:	22ff      	movs	r2, #255	; 0xff
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	0018      	movs	r0, r3
 8002fac:	2303      	movs	r3, #3
 8002fae:	4003      	ands	r3, r0
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb4:	4809      	ldr	r0, [pc, #36]	; (8002fdc <__NVIC_SetPriority+0xd8>)
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	001c      	movs	r4, r3
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	4023      	ands	r3, r4
 8002fc0:	3b08      	subs	r3, #8
 8002fc2:	089b      	lsrs	r3, r3, #2
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	3306      	adds	r3, #6
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	18c3      	adds	r3, r0, r3
 8002fcc:	3304      	adds	r3, #4
 8002fce:	601a      	str	r2, [r3, #0]
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b003      	add	sp, #12
 8002fd6:	bd90      	pop	{r4, r7, pc}
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	4a0c      	ldr	r2, [pc, #48]	; (8003020 <SysTick_Config+0x40>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e010      	b.n	8003018 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <SysTick_Config+0x44>)
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	3a01      	subs	r2, #1
 8002ffc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffe:	2301      	movs	r3, #1
 8003000:	425b      	negs	r3, r3
 8003002:	2103      	movs	r1, #3
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff ff7d 	bl	8002f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <SysTick_Config+0x44>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <SysTick_Config+0x44>)
 8003012:	2207      	movs	r2, #7
 8003014:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003016:	2300      	movs	r3, #0
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	b002      	add	sp, #8
 800301e:	bd80      	pop	{r7, pc}
 8003020:	00ffffff 	.word	0x00ffffff
 8003024:	e000e010 	.word	0xe000e010

08003028 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	210f      	movs	r1, #15
 8003034:	187b      	adds	r3, r7, r1
 8003036:	1c02      	adds	r2, r0, #0
 8003038:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	187b      	adds	r3, r7, r1
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	b25b      	sxtb	r3, r3
 8003042:	0011      	movs	r1, r2
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff ff5d 	bl	8002f04 <__NVIC_SetPriority>
}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	46bd      	mov	sp, r7
 800304e:	b004      	add	sp, #16
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	0002      	movs	r2, r0
 800305a:	1dfb      	adds	r3, r7, #7
 800305c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	b25b      	sxtb	r3, r3
 8003064:	0018      	movs	r0, r3
 8003066:	f7ff ff33 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b002      	add	sp, #8
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	0018      	movs	r0, r3
 800307e:	f7ff ffaf 	bl	8002fe0 <SysTick_Config>
 8003082:	0003      	movs	r3, r0
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b002      	add	sp, #8
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e077      	b.n	800318e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3d      	ldr	r2, [pc, #244]	; (8003198 <HAL_DMA_Init+0x10c>)
 80030a4:	4694      	mov	ip, r2
 80030a6:	4463      	add	r3, ip
 80030a8:	2114      	movs	r1, #20
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7fd f82a 	bl	8000104 <__udivsi3>
 80030b0:	0003      	movs	r3, r0
 80030b2:	009a      	lsls	r2, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2225      	movs	r2, #37	; 0x25
 80030bc:	2102      	movs	r1, #2
 80030be:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4934      	ldr	r1, [pc, #208]	; (800319c <HAL_DMA_Init+0x110>)
 80030cc:	400a      	ands	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0018      	movs	r0, r3
 800310a:	f000 f9c3 	bl	8003494 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	01db      	lsls	r3, r3, #7
 8003116:	429a      	cmp	r2, r3
 8003118:	d102      	bne.n	8003120 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	21ff      	movs	r1, #255	; 0xff
 800312a:	400a      	ands	r2, r1
 800312c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003136:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d011      	beq.n	8003164 <HAL_DMA_Init+0xd8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d80d      	bhi.n	8003164 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	0018      	movs	r0, r3
 800314c:	f000 f9ce 	bl	80034ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	e008      	b.n	8003176 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2225      	movs	r2, #37	; 0x25
 8003180:	2101      	movs	r1, #1
 8003182:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	; 0x24
 8003188:	2100      	movs	r1, #0
 800318a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	bffdfff8 	.word	0xbffdfff8
 800319c:	ffff800f 	.word	0xffff800f

080031a0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ae:	2317      	movs	r3, #23
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2224      	movs	r2, #36	; 0x24
 80031ba:	5c9b      	ldrb	r3, [r3, r2]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_DMA_Start_IT+0x24>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e070      	b.n	80032a6 <HAL_DMA_Start_IT+0x106>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	2101      	movs	r1, #1
 80031ca:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2225      	movs	r2, #37	; 0x25
 80031d0:	5c9b      	ldrb	r3, [r3, r2]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d157      	bne.n	8003288 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2225      	movs	r2, #37	; 0x25
 80031dc:	2102      	movs	r1, #2
 80031de:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	438a      	bics	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f909 	bl	8003414 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	210e      	movs	r1, #14
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e00f      	b.n	800323c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2104      	movs	r1, #4
 8003228:	438a      	bics	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	210a      	movs	r1, #10
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	025b      	lsls	r3, r3, #9
 8003246:	4013      	ands	r3, r2
 8003248:	d008      	beq.n	800325c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	0049      	lsls	r1, r1, #1
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	0049      	lsls	r1, r1, #1
 8003272:	430a      	orrs	r2, r1
 8003274:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e007      	b.n	8003298 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2224      	movs	r2, #36	; 0x24
 800328c:	2100      	movs	r1, #0
 800328e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003290:	2317      	movs	r3, #23
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2224      	movs	r2, #36	; 0x24
 800329c:	2100      	movs	r1, #0
 800329e:	5499      	strb	r1, [r3, r2]

  return status;
 80032a0:	2317      	movs	r3, #23
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	781b      	ldrb	r3, [r3, #0]
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b006      	add	sp, #24
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80032b8:	4b55      	ldr	r3, [pc, #340]	; (8003410 <HAL_DMA_IRQHandler+0x160>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	221c      	movs	r2, #28
 80032cc:	4013      	ands	r3, r2
 80032ce:	2204      	movs	r2, #4
 80032d0:	409a      	lsls	r2, r3
 80032d2:	0013      	movs	r3, r2
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	d027      	beq.n	800332a <HAL_DMA_IRQHandler+0x7a>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2204      	movs	r2, #4
 80032de:	4013      	ands	r3, r2
 80032e0:	d023      	beq.n	800332a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2220      	movs	r2, #32
 80032ea:	4013      	ands	r3, r2
 80032ec:	d107      	bne.n	80032fe <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2104      	movs	r1, #4
 80032fa:	438a      	bics	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80032fe:	4b44      	ldr	r3, [pc, #272]	; (8003410 <HAL_DMA_IRQHandler+0x160>)
 8003300:	6859      	ldr	r1, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	221c      	movs	r2, #28
 8003308:	4013      	ands	r3, r2
 800330a:	2204      	movs	r2, #4
 800330c:	409a      	lsls	r2, r3
 800330e:	4b40      	ldr	r3, [pc, #256]	; (8003410 <HAL_DMA_IRQHandler+0x160>)
 8003310:	430a      	orrs	r2, r1
 8003312:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	2b00      	cmp	r3, #0
 800331a:	d100      	bne.n	800331e <HAL_DMA_IRQHandler+0x6e>
 800331c:	e073      	b.n	8003406 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	0010      	movs	r0, r2
 8003326:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003328:	e06d      	b.n	8003406 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	221c      	movs	r2, #28
 8003330:	4013      	ands	r3, r2
 8003332:	2202      	movs	r2, #2
 8003334:	409a      	lsls	r2, r3
 8003336:	0013      	movs	r3, r2
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4013      	ands	r3, r2
 800333c:	d02e      	beq.n	800339c <HAL_DMA_IRQHandler+0xec>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2202      	movs	r2, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d02a      	beq.n	800339c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2220      	movs	r2, #32
 800334e:	4013      	ands	r3, r2
 8003350:	d10b      	bne.n	800336a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	210a      	movs	r1, #10
 800335e:	438a      	bics	r2, r1
 8003360:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2225      	movs	r2, #37	; 0x25
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800336a:	4b29      	ldr	r3, [pc, #164]	; (8003410 <HAL_DMA_IRQHandler+0x160>)
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	221c      	movs	r2, #28
 8003374:	4013      	ands	r3, r2
 8003376:	2202      	movs	r2, #2
 8003378:	409a      	lsls	r2, r3
 800337a:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_DMA_IRQHandler+0x160>)
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2224      	movs	r2, #36	; 0x24
 8003384:	2100      	movs	r1, #0
 8003386:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d03a      	beq.n	8003406 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	0010      	movs	r0, r2
 8003398:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800339a:	e034      	b.n	8003406 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	221c      	movs	r2, #28
 80033a2:	4013      	ands	r3, r2
 80033a4:	2208      	movs	r2, #8
 80033a6:	409a      	lsls	r2, r3
 80033a8:	0013      	movs	r3, r2
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	d02b      	beq.n	8003408 <HAL_DMA_IRQHandler+0x158>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2208      	movs	r2, #8
 80033b4:	4013      	ands	r3, r2
 80033b6:	d027      	beq.n	8003408 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	210e      	movs	r1, #14
 80033c4:	438a      	bics	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 80033c8:	4b11      	ldr	r3, [pc, #68]	; (8003410 <HAL_DMA_IRQHandler+0x160>)
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	221c      	movs	r2, #28
 80033d2:	4013      	ands	r3, r2
 80033d4:	2201      	movs	r2, #1
 80033d6:	409a      	lsls	r2, r3
 80033d8:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_DMA_IRQHandler+0x160>)
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2225      	movs	r2, #37	; 0x25
 80033e8:	2101      	movs	r1, #1
 80033ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	; 0x24
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	0010      	movs	r0, r2
 8003404:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46c0      	nop			; (mov r8, r8)
}
 800340a:	46bd      	mov	sp, r7
 800340c:	b004      	add	sp, #16
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40020000 	.word	0x40020000

08003414 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800342a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800343c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <DMA_SetConfig+0x7c>)
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	221c      	movs	r2, #28
 8003448:	4013      	ands	r3, r2
 800344a:	2201      	movs	r2, #1
 800344c:	409a      	lsls	r2, r3
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <DMA_SetConfig+0x7c>)
 8003450:	430a      	orrs	r2, r1
 8003452:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b10      	cmp	r3, #16
 8003462:	d108      	bne.n	8003476 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003474:	e007      	b.n	8003486 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	60da      	str	r2, [r3, #12]
}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	46bd      	mov	sp, r7
 800348a:	b004      	add	sp, #16
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	40020000 	.word	0x40020000

08003494 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	001a      	movs	r2, r3
 80034a2:	23ff      	movs	r3, #255	; 0xff
 80034a4:	4013      	ands	r3, r2
 80034a6:	3b08      	subs	r3, #8
 80034a8:	2114      	movs	r1, #20
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fc fe2a 	bl	8000104 <__udivsi3>
 80034b0:	0003      	movs	r3, r0
 80034b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	089b      	lsrs	r3, r3, #2
 80034ba:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80034bc:	4694      	mov	ip, r2
 80034be:	4463      	add	r3, ip
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	001a      	movs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80034cc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	221c      	movs	r2, #28
 80034d2:	4013      	ands	r3, r2
 80034d4:	2201      	movs	r2, #1
 80034d6:	409a      	lsls	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b004      	add	sp, #16
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	10008200 	.word	0x10008200
 80034e8:	40020880 	.word	0x40020880

080034ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	22ff      	movs	r2, #255	; 0xff
 80034fa:	4013      	ands	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003502:	4694      	mov	ip, r2
 8003504:	4463      	add	r3, ip
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	001a      	movs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a07      	ldr	r2, [pc, #28]	; (8003530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003512:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3b01      	subs	r3, #1
 8003518:	2203      	movs	r2, #3
 800351a:	4013      	ands	r3, r2
 800351c:	2201      	movs	r2, #1
 800351e:	409a      	lsls	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b004      	add	sp, #16
 800352a:	bd80      	pop	{r7, pc}
 800352c:	1000823f 	.word	0x1000823f
 8003530:	40020940 	.word	0x40020940

08003534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003542:	e147      	b.n	80037d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2101      	movs	r1, #1
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4091      	lsls	r1, r2
 800354e:	000a      	movs	r2, r1
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d100      	bne.n	800355c <HAL_GPIO_Init+0x28>
 800355a:	e138      	b.n	80037ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x38>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b12      	cmp	r3, #18
 800356a:	d123      	bne.n	80035b4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	08da      	lsrs	r2, r3, #3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3208      	adds	r2, #8
 8003574:	0092      	lsls	r2, r2, #2
 8003576:	58d3      	ldr	r3, [r2, r3]
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2207      	movs	r2, #7
 800357e:	4013      	ands	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	220f      	movs	r2, #15
 8003584:	409a      	lsls	r2, r3
 8003586:	0013      	movs	r3, r2
 8003588:	43da      	mvns	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2107      	movs	r1, #7
 8003598:	400b      	ands	r3, r1
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	409a      	lsls	r2, r3
 800359e:	0013      	movs	r3, r2
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	08da      	lsrs	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3208      	adds	r2, #8
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	6939      	ldr	r1, [r7, #16]
 80035b2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	409a      	lsls	r2, r3
 80035c2:	0013      	movs	r3, r2
 80035c4:	43da      	mvns	r2, r3
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2203      	movs	r2, #3
 80035d2:	401a      	ands	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	409a      	lsls	r2, r3
 80035da:	0013      	movs	r3, r2
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d00b      	beq.n	8003608 <HAL_GPIO_Init+0xd4>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d007      	beq.n	8003608 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035fc:	2b11      	cmp	r3, #17
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b12      	cmp	r3, #18
 8003606:	d130      	bne.n	800366a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	409a      	lsls	r2, r3
 8003616:	0013      	movs	r3, r2
 8003618:	43da      	mvns	r2, r3
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	409a      	lsls	r2, r3
 800362a:	0013      	movs	r3, r2
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800363e:	2201      	movs	r2, #1
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
 8003644:	0013      	movs	r3, r2
 8003646:	43da      	mvns	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	2201      	movs	r2, #1
 8003656:	401a      	ands	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	409a      	lsls	r2, r3
 800365c:	0013      	movs	r3, r2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	409a      	lsls	r2, r3
 8003678:	0013      	movs	r3, r2
 800367a:	43da      	mvns	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	409a      	lsls	r2, r3
 800368c:	0013      	movs	r3, r2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	055b      	lsls	r3, r3, #21
 80036a2:	4013      	ands	r3, r2
 80036a4:	d100      	bne.n	80036a8 <HAL_GPIO_Init+0x174>
 80036a6:	e092      	b.n	80037ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80036a8:	4a50      	ldr	r2, [pc, #320]	; (80037ec <HAL_GPIO_Init+0x2b8>)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	3318      	adds	r3, #24
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	589b      	ldr	r3, [r3, r2]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2203      	movs	r2, #3
 80036ba:	4013      	ands	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	220f      	movs	r2, #15
 80036c0:	409a      	lsls	r2, r3
 80036c2:	0013      	movs	r3, r2
 80036c4:	43da      	mvns	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	23a0      	movs	r3, #160	; 0xa0
 80036d0:	05db      	lsls	r3, r3, #23
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d013      	beq.n	80036fe <HAL_GPIO_Init+0x1ca>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a45      	ldr	r2, [pc, #276]	; (80037f0 <HAL_GPIO_Init+0x2bc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00d      	beq.n	80036fa <HAL_GPIO_Init+0x1c6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a44      	ldr	r2, [pc, #272]	; (80037f4 <HAL_GPIO_Init+0x2c0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <HAL_GPIO_Init+0x1c2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a43      	ldr	r2, [pc, #268]	; (80037f8 <HAL_GPIO_Init+0x2c4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_GPIO_Init+0x1be>
 80036ee:	2303      	movs	r3, #3
 80036f0:	e006      	b.n	8003700 <HAL_GPIO_Init+0x1cc>
 80036f2:	2305      	movs	r3, #5
 80036f4:	e004      	b.n	8003700 <HAL_GPIO_Init+0x1cc>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e002      	b.n	8003700 <HAL_GPIO_Init+0x1cc>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_GPIO_Init+0x1cc>
 80036fe:	2300      	movs	r3, #0
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	2103      	movs	r1, #3
 8003704:	400a      	ands	r2, r1
 8003706:	00d2      	lsls	r2, r2, #3
 8003708:	4093      	lsls	r3, r2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003710:	4936      	ldr	r1, [pc, #216]	; (80037ec <HAL_GPIO_Init+0x2b8>)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	3318      	adds	r3, #24
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800371e:	4a33      	ldr	r2, [pc, #204]	; (80037ec <HAL_GPIO_Init+0x2b8>)
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	58d3      	ldr	r3, [r2, r3]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43da      	mvns	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	025b      	lsls	r3, r3, #9
 8003738:	4013      	ands	r3, r2
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003744:	4929      	ldr	r1, [pc, #164]	; (80037ec <HAL_GPIO_Init+0x2b8>)
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800374c:	4a27      	ldr	r2, [pc, #156]	; (80037ec <HAL_GPIO_Init+0x2b8>)
 800374e:	2384      	movs	r3, #132	; 0x84
 8003750:	58d3      	ldr	r3, [r2, r3]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43da      	mvns	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	029b      	lsls	r3, r3, #10
 8003766:	4013      	ands	r3, r2
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003772:	491e      	ldr	r1, [pc, #120]	; (80037ec <HAL_GPIO_Init+0x2b8>)
 8003774:	2284      	movs	r2, #132	; 0x84
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <HAL_GPIO_Init+0x2b8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43da      	mvns	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	035b      	lsls	r3, r3, #13
 8003792:	4013      	ands	r3, r2
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <HAL_GPIO_Init+0x2b8>)
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_GPIO_Init+0x2b8>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43da      	mvns	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	039b      	lsls	r3, r3, #14
 80037bc:	4013      	ands	r3, r2
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037c8:	4b08      	ldr	r3, [pc, #32]	; (80037ec <HAL_GPIO_Init+0x2b8>)
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3301      	adds	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	40da      	lsrs	r2, r3
 80037dc:	1e13      	subs	r3, r2, #0
 80037de:	d000      	beq.n	80037e2 <HAL_GPIO_Init+0x2ae>
 80037e0:	e6b0      	b.n	8003544 <HAL_GPIO_Init+0x10>
  }
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b006      	add	sp, #24
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	40021800 	.word	0x40021800
 80037f0:	50000400 	.word	0x50000400
 80037f4:	50000800 	.word	0x50000800
 80037f8:	50000c00 	.word	0x50000c00

080037fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	0008      	movs	r0, r1
 8003806:	0011      	movs	r1, r2
 8003808:	1cbb      	adds	r3, r7, #2
 800380a:	1c02      	adds	r2, r0, #0
 800380c:	801a      	strh	r2, [r3, #0]
 800380e:	1c7b      	adds	r3, r7, #1
 8003810:	1c0a      	adds	r2, r1, #0
 8003812:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003814:	1c7b      	adds	r3, r7, #1
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800381c:	1cbb      	adds	r3, r7, #2
 800381e:	881a      	ldrh	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003824:	e003      	b.n	800382e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003826:	1cbb      	adds	r3, r7, #2
 8003828:	881a      	ldrh	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b002      	add	sp, #8
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e082      	b.n	8003950 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2241      	movs	r2, #65	; 0x41
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2240      	movs	r2, #64	; 0x40
 800385a:	2100      	movs	r1, #0
 800385c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f7fe f871 	bl	8001948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2241      	movs	r2, #65	; 0x41
 800386a:	2124      	movs	r1, #36	; 0x24
 800386c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2101      	movs	r1, #1
 800387a:	438a      	bics	r2, r1
 800387c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4934      	ldr	r1, [pc, #208]	; (8003958 <HAL_I2C_Init+0x120>)
 8003888:	400a      	ands	r2, r1
 800388a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4931      	ldr	r1, [pc, #196]	; (800395c <HAL_I2C_Init+0x124>)
 8003898:	400a      	ands	r2, r1
 800389a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d108      	bne.n	80038b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2180      	movs	r1, #128	; 0x80
 80038ae:	0209      	lsls	r1, r1, #8
 80038b0:	430a      	orrs	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	e007      	b.n	80038c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2184      	movs	r1, #132	; 0x84
 80038c0:	0209      	lsls	r1, r1, #8
 80038c2:	430a      	orrs	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d104      	bne.n	80038d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	0112      	lsls	r2, r2, #4
 80038d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	491f      	ldr	r1, [pc, #124]	; (8003960 <HAL_I2C_Init+0x128>)
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	491a      	ldr	r1, [pc, #104]	; (800395c <HAL_I2C_Init+0x124>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	431a      	orrs	r2, r3
 8003902:	0011      	movs	r1, r2
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	021a      	lsls	r2, r3, #8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69d9      	ldr	r1, [r3, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	430a      	orrs	r2, r1
 8003930:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2241      	movs	r2, #65	; 0x41
 800393c:	2120      	movs	r1, #32
 800393e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2242      	movs	r2, #66	; 0x42
 800394a:	2100      	movs	r1, #0
 800394c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}
 8003958:	f0ffffff 	.word	0xf0ffffff
 800395c:	ffff7fff 	.word	0xffff7fff
 8003960:	02008000 	.word	0x02008000

08003964 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2241      	movs	r2, #65	; 0x41
 8003972:	5c9b      	ldrb	r3, [r3, r2]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b20      	cmp	r3, #32
 8003978:	d138      	bne.n	80039ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003984:	2302      	movs	r3, #2
 8003986:	e032      	b.n	80039ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	2101      	movs	r1, #1
 800398e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2241      	movs	r2, #65	; 0x41
 8003994:	2124      	movs	r1, #36	; 0x24
 8003996:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2101      	movs	r1, #1
 80039a4:	438a      	bics	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4911      	ldr	r1, [pc, #68]	; (80039f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2101      	movs	r1, #1
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2241      	movs	r2, #65	; 0x41
 80039dc:	2120      	movs	r1, #32
 80039de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2240      	movs	r2, #64	; 0x40
 80039e4:	2100      	movs	r1, #0
 80039e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b002      	add	sp, #8
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	ffffefff 	.word	0xffffefff

080039fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2241      	movs	r2, #65	; 0x41
 8003a0a:	5c9b      	ldrb	r3, [r3, r2]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d139      	bne.n	8003a86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2240      	movs	r2, #64	; 0x40
 8003a16:	5c9b      	ldrb	r3, [r3, r2]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e033      	b.n	8003a88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2240      	movs	r2, #64	; 0x40
 8003a24:	2101      	movs	r1, #1
 8003a26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2241      	movs	r2, #65	; 0x41
 8003a2c:	2124      	movs	r1, #36	; 0x24
 8003a2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	438a      	bics	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2241      	movs	r2, #65	; 0x41
 8003a76:	2120      	movs	r1, #32
 8003a78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2240      	movs	r2, #64	; 0x40
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e000      	b.n	8003a88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
  }
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b004      	add	sp, #16
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	fffff0ff 	.word	0xfffff0ff

08003a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a9c:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d11f      	bne.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	0013      	movs	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4912      	ldr	r1, [pc, #72]	; (8003b10 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7fc fb1c 	bl	8000104 <__udivsi3>
 8003acc:	0003      	movs	r3, r0
 8003ace:	3301      	adds	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ad2:	e008      	b.n	8003ae6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e001      	b.n	8003ae6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e009      	b.n	8003afa <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	401a      	ands	r2, r3
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d0ed      	beq.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b004      	add	sp, #16
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	40007000 	.word	0x40007000
 8003b08:	fffff9ff 	.word	0xfffff9ff
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	000f4240 	.word	0x000f4240

08003b14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	23e0      	movs	r3, #224	; 0xe0
 8003b1e:	01db      	lsls	r3, r3, #7
 8003b20:	4013      	ands	r3, r2
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000

08003b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e304      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2201      	movs	r2, #1
 8003b44:	4013      	ands	r3, r2
 8003b46:	d100      	bne.n	8003b4a <HAL_RCC_OscConfig+0x1e>
 8003b48:	e07c      	b.n	8003c44 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4a:	4bc3      	ldr	r3, [pc, #780]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2238      	movs	r2, #56	; 0x38
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b54:	4bc0      	ldr	r3, [pc, #768]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d102      	bne.n	8003b6a <HAL_RCC_OscConfig+0x3e>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d002      	beq.n	8003b70 <HAL_RCC_OscConfig+0x44>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	4bb9      	ldr	r3, [pc, #740]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	029b      	lsls	r3, r3, #10
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d062      	beq.n	8003c42 <HAL_RCC_OscConfig+0x116>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d15e      	bne.n	8003c42 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e2df      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	025b      	lsls	r3, r3, #9
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x78>
 8003b94:	4bb0      	ldr	r3, [pc, #704]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4baf      	ldr	r3, [pc, #700]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	0249      	lsls	r1, r1, #9
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e020      	b.n	8003be6 <HAL_RCC_OscConfig+0xba>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	23a0      	movs	r3, #160	; 0xa0
 8003baa:	02db      	lsls	r3, r3, #11
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d10e      	bne.n	8003bce <HAL_RCC_OscConfig+0xa2>
 8003bb0:	4ba9      	ldr	r3, [pc, #676]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4ba8      	ldr	r3, [pc, #672]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	02c9      	lsls	r1, r1, #11
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	4ba6      	ldr	r3, [pc, #664]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4ba5      	ldr	r3, [pc, #660]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	0249      	lsls	r1, r1, #9
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCC_OscConfig+0xba>
 8003bce:	4ba2      	ldr	r3, [pc, #648]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4ba1      	ldr	r3, [pc, #644]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bd4:	49a1      	ldr	r1, [pc, #644]	; (8003e5c <HAL_RCC_OscConfig+0x330>)
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	4b9f      	ldr	r3, [pc, #636]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b9e      	ldr	r3, [pc, #632]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003be0:	499f      	ldr	r1, [pc, #636]	; (8003e60 <HAL_RCC_OscConfig+0x334>)
 8003be2:	400a      	ands	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d014      	beq.n	8003c18 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fe fcd3 	bl	8002598 <HAL_GetTick>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fcce 	bl	8002598 <HAL_GetTick>
 8003bfc:	0002      	movs	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e29e      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c0a:	4b93      	ldr	r3, [pc, #588]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	029b      	lsls	r3, r3, #10
 8003c12:	4013      	ands	r3, r2
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xcc>
 8003c16:	e015      	b.n	8003c44 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe fcbe 	bl	8002598 <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c22:	f7fe fcb9 	bl	8002598 <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b64      	cmp	r3, #100	; 0x64
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e289      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c34:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	029b      	lsls	r3, r3, #10
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0xf6>
 8003c40:	e000      	b.n	8003c44 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d100      	bne.n	8003c50 <HAL_RCC_OscConfig+0x124>
 8003c4e:	e099      	b.n	8003d84 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c50:	4b81      	ldr	r3, [pc, #516]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2238      	movs	r2, #56	; 0x38
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c5a:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2203      	movs	r2, #3
 8003c60:	4013      	ands	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d102      	bne.n	8003c70 <HAL_RCC_OscConfig+0x144>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d002      	beq.n	8003c76 <HAL_RCC_OscConfig+0x14a>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d135      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c76:	4b78      	ldr	r3, [pc, #480]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d005      	beq.n	8003c8e <HAL_RCC_OscConfig+0x162>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e25c      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4a74      	ldr	r2, [pc, #464]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	021a      	lsls	r2, r3, #8
 8003c9e:	4b6e      	ldr	r3, [pc, #440]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d112      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003caa:	4b6b      	ldr	r3, [pc, #428]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6e      	ldr	r2, [pc, #440]	; (8003e68 <HAL_RCC_OscConfig+0x33c>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	4b67      	ldr	r3, [pc, #412]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003cbe:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	0adb      	lsrs	r3, r3, #11
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	4a68      	ldr	r2, [pc, #416]	; (8003e6c <HAL_RCC_OscConfig+0x340>)
 8003cca:	40da      	lsrs	r2, r3
 8003ccc:	4b68      	ldr	r3, [pc, #416]	; (8003e70 <HAL_RCC_OscConfig+0x344>)
 8003cce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cd0:	4b68      	ldr	r3, [pc, #416]	; (8003e74 <HAL_RCC_OscConfig+0x348>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fe fc05 	bl	80024e4 <HAL_InitTick>
 8003cda:	1e03      	subs	r3, r0, #0
 8003cdc:	d051      	beq.n	8003d82 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e232      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d030      	beq.n	8003d4c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003cea:	4b5b      	ldr	r3, [pc, #364]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a5e      	ldr	r2, [pc, #376]	; (8003e68 <HAL_RCC_OscConfig+0x33c>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	0019      	movs	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003cfe:	4b56      	ldr	r3, [pc, #344]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b55      	ldr	r3, [pc, #340]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	0049      	lsls	r1, r1, #1
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fc44 	bl	8002598 <HAL_GetTick>
 8003d10:	0003      	movs	r3, r0
 8003d12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d16:	f7fe fc3f 	bl	8002598 <HAL_GetTick>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e20f      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4013      	ands	r3, r2
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	4b48      	ldr	r3, [pc, #288]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4a4a      	ldr	r2, [pc, #296]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	021a      	lsls	r2, r3, #8
 8003d44:	4b44      	ldr	r3, [pc, #272]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	e01b      	b.n	8003d84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d52:	4949      	ldr	r1, [pc, #292]	; (8003e78 <HAL_RCC_OscConfig+0x34c>)
 8003d54:	400a      	ands	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fe fc1e 	bl	8002598 <HAL_GetTick>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d62:	f7fe fc19 	bl	8002598 <HAL_GetTick>
 8003d66:	0002      	movs	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e1e9      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d74:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x236>
 8003d80:	e000      	b.n	8003d84 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2208      	movs	r2, #8
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d047      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003d8e:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2238      	movs	r2, #56	; 0x38
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b18      	cmp	r3, #24
 8003d98:	d10a      	bne.n	8003db0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9e:	2202      	movs	r2, #2
 8003da0:	4013      	ands	r3, r2
 8003da2:	d03c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2f2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d138      	bne.n	8003e1e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e1cb      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d019      	beq.n	8003dec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003db8:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003dba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dbc:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fbe8 	bl	8002598 <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dce:	f7fe fbe3 	bl	8002598 <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e1b3      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de4:	2202      	movs	r2, #2
 8003de6:	4013      	ands	r3, r2
 8003de8:	d0f1      	beq.n	8003dce <HAL_RCC_OscConfig+0x2a2>
 8003dea:	e018      	b.n	8003e1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003df2:	2101      	movs	r1, #1
 8003df4:	438a      	bics	r2, r1
 8003df6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe fbce 	bl	8002598 <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e02:	f7fe fbc9 	bl	8002598 <HAL_GetTick>
 8003e06:	0002      	movs	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e199      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e14:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e18:	2202      	movs	r2, #2
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d1f1      	bne.n	8003e02 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2204      	movs	r2, #4
 8003e24:	4013      	ands	r3, r2
 8003e26:	d100      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2fe>
 8003e28:	e0c6      	b.n	8003fb8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	231f      	movs	r3, #31
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2238      	movs	r2, #56	; 0x38
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d11e      	bne.n	8003e7c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	2202      	movs	r2, #2
 8003e44:	4013      	ands	r3, r2
 8003e46:	d100      	bne.n	8003e4a <HAL_RCC_OscConfig+0x31e>
 8003e48:	e0b6      	b.n	8003fb8 <HAL_RCC_OscConfig+0x48c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d000      	beq.n	8003e54 <HAL_RCC_OscConfig+0x328>
 8003e52:	e0b1      	b.n	8003fb8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e177      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	fffeffff 	.word	0xfffeffff
 8003e60:	fffbffff 	.word	0xfffbffff
 8003e64:	ffff80ff 	.word	0xffff80ff
 8003e68:	ffffc7ff 	.word	0xffffc7ff
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	20000000 	.word	0x20000000
 8003e74:	20000004 	.word	0x20000004
 8003e78:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e7c:	4bb4      	ldr	r3, [pc, #720]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	055b      	lsls	r3, r3, #21
 8003e84:	4013      	ands	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_OscConfig+0x360>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x362>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d011      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	4baf      	ldr	r3, [pc, #700]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e96:	4bae      	ldr	r3, [pc, #696]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	0549      	lsls	r1, r1, #21
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ea0:	4bab      	ldr	r3, [pc, #684]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	055b      	lsls	r3, r3, #21
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003eae:	231f      	movs	r3, #31
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb6:	4ba7      	ldr	r3, [pc, #668]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d11a      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec2:	4ba4      	ldr	r3, [pc, #656]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4ba3      	ldr	r3, [pc, #652]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8003ec8:	2180      	movs	r1, #128	; 0x80
 8003eca:	0049      	lsls	r1, r1, #1
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fb62 	bl	8002598 <HAL_GetTick>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eda:	f7fe fb5d 	bl	8002598 <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e12d      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eec:	4b99      	ldr	r3, [pc, #612]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d106      	bne.n	8003f0e <HAL_RCC_OscConfig+0x3e2>
 8003f00:	4b93      	ldr	r3, [pc, #588]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f04:	4b92      	ldr	r3, [pc, #584]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f06:	2101      	movs	r1, #1
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f0c:	e01c      	b.n	8003f48 <HAL_RCC_OscConfig+0x41c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x404>
 8003f16:	4b8e      	ldr	r3, [pc, #568]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f1a:	4b8d      	ldr	r3, [pc, #564]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f1c:	2104      	movs	r1, #4
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f22:	4b8b      	ldr	r3, [pc, #556]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f26:	4b8a      	ldr	r3, [pc, #552]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f28:	2101      	movs	r1, #1
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0x41c>
 8003f30:	4b87      	ldr	r3, [pc, #540]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f34:	4b86      	ldr	r3, [pc, #536]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f36:	2101      	movs	r1, #1
 8003f38:	438a      	bics	r2, r1
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f3c:	4b84      	ldr	r3, [pc, #528]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f40:	4b83      	ldr	r3, [pc, #524]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f42:	2104      	movs	r1, #4
 8003f44:	438a      	bics	r2, r1
 8003f46:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d014      	beq.n	8003f7a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe fb22 	bl	8002598 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f58:	e009      	b.n	8003f6e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5a:	f7fe fb1d 	bl	8002598 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	4a7c      	ldr	r2, [pc, #496]	; (8004158 <HAL_RCC_OscConfig+0x62c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0ec      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f6e:	4b78      	ldr	r3, [pc, #480]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	2202      	movs	r2, #2
 8003f74:	4013      	ands	r3, r2
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x42e>
 8003f78:	e013      	b.n	8003fa2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fe fb0d 	bl	8002598 <HAL_GetTick>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f82:	e009      	b.n	8003f98 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fe fb08 	bl	8002598 <HAL_GetTick>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	4a72      	ldr	r2, [pc, #456]	; (8004158 <HAL_RCC_OscConfig+0x62c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e0d7      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f98:	4b6d      	ldr	r3, [pc, #436]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003fa2:	231f      	movs	r3, #31
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d105      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003fac:	4b68      	ldr	r3, [pc, #416]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb0:	4b67      	ldr	r3, [pc, #412]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003fb2:	496a      	ldr	r1, [pc, #424]	; (800415c <HAL_RCC_OscConfig+0x630>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d100      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x496>
 8003fc0:	e0c1      	b.n	8004146 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2238      	movs	r2, #56	; 0x38
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d100      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4a4>
 8003fce:	e081      	b.n	80040d4 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d156      	bne.n	8004086 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd8:	4b5d      	ldr	r3, [pc, #372]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b5c      	ldr	r3, [pc, #368]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8003fde:	4960      	ldr	r1, [pc, #384]	; (8004160 <HAL_RCC_OscConfig+0x634>)
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fad8 	bl	8002598 <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fe fad3 	bl	8002598 <HAL_GetTick>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e0a3      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004000:	4b53      	ldr	r3, [pc, #332]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	049b      	lsls	r3, r3, #18
 8004008:	4013      	ands	r3, r2
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400c:	4b50      	ldr	r3, [pc, #320]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a54      	ldr	r2, [pc, #336]	; (8004164 <HAL_RCC_OscConfig+0x638>)
 8004012:	4013      	ands	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1a      	ldr	r2, [r3, #32]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	431a      	orrs	r2, r3
 800403a:	4b45      	ldr	r3, [pc, #276]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 800403c:	430a      	orrs	r2, r1
 800403e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004040:	4b43      	ldr	r3, [pc, #268]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b42      	ldr	r3, [pc, #264]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	0449      	lsls	r1, r1, #17
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800404e:	4b40      	ldr	r3, [pc, #256]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	4b3f      	ldr	r3, [pc, #252]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8004054:	2180      	movs	r1, #128	; 0x80
 8004056:	0549      	lsls	r1, r1, #21
 8004058:	430a      	orrs	r2, r1
 800405a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe fa9c 	bl	8002598 <HAL_GetTick>
 8004060:	0003      	movs	r3, r0
 8004062:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004066:	f7fe fa97 	bl	8002598 <HAL_GetTick>
 800406a:	0002      	movs	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e067      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	049b      	lsls	r3, r3, #18
 8004080:	4013      	ands	r3, r2
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x53a>
 8004084:	e05f      	b.n	8004146 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b32      	ldr	r3, [pc, #200]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b31      	ldr	r3, [pc, #196]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 800408c:	4934      	ldr	r1, [pc, #208]	; (8004160 <HAL_RCC_OscConfig+0x634>)
 800408e:	400a      	ands	r2, r1
 8004090:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004092:	4b2f      	ldr	r3, [pc, #188]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	4b2e      	ldr	r3, [pc, #184]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8004098:	2103      	movs	r1, #3
 800409a:	438a      	bics	r2, r1
 800409c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800409e:	4b2c      	ldr	r3, [pc, #176]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 80040a4:	4930      	ldr	r1, [pc, #192]	; (8004168 <HAL_RCC_OscConfig+0x63c>)
 80040a6:	400a      	ands	r2, r1
 80040a8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fe fa75 	bl	8002598 <HAL_GetTick>
 80040ae:	0003      	movs	r3, r0
 80040b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fe fa70 	bl	8002598 <HAL_GetTick>
 80040b8:	0002      	movs	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e040      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c6:	4b22      	ldr	r3, [pc, #136]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	049b      	lsls	r3, r3, #18
 80040ce:	4013      	ands	r3, r2
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x588>
 80040d2:	e038      	b.n	8004146 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e033      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80040e0:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2203      	movs	r2, #3
 80040ea:	401a      	ands	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d126      	bne.n	8004142 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2270      	movs	r2, #112	; 0x70
 80040f8:	401a      	ands	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d11f      	bne.n	8004142 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	23fe      	movs	r3, #254	; 0xfe
 8004106:	01db      	lsls	r3, r3, #7
 8004108:	401a      	ands	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d116      	bne.n	8004142 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	23f8      	movs	r3, #248	; 0xf8
 8004118:	039b      	lsls	r3, r3, #14
 800411a:	401a      	ands	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d10e      	bne.n	8004142 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	23e0      	movs	r3, #224	; 0xe0
 8004128:	051b      	lsls	r3, r3, #20
 800412a:	401a      	ands	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d106      	bne.n	8004142 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	0f5b      	lsrs	r3, r3, #29
 8004138:	075a      	lsls	r2, r3, #29
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800413e:	429a      	cmp	r2, r3
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	0018      	movs	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	b008      	add	sp, #32
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	40007000 	.word	0x40007000
 8004158:	00001388 	.word	0x00001388
 800415c:	efffffff 	.word	0xefffffff
 8004160:	feffffff 	.word	0xfeffffff
 8004164:	11c1808c 	.word	0x11c1808c
 8004168:	eefeffff 	.word	0xeefeffff

0800416c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0e9      	b.n	8004354 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	4b76      	ldr	r3, [pc, #472]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2207      	movs	r2, #7
 8004186:	4013      	ands	r3, r2
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d91e      	bls.n	80041cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b73      	ldr	r3, [pc, #460]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2207      	movs	r2, #7
 8004194:	4393      	bics	r3, r2
 8004196:	0019      	movs	r1, r3
 8004198:	4b70      	ldr	r3, [pc, #448]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041a0:	f7fe f9fa 	bl	8002598 <HAL_GetTick>
 80041a4:	0003      	movs	r3, r0
 80041a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041a8:	e009      	b.n	80041be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041aa:	f7fe f9f5 	bl	8002598 <HAL_GetTick>
 80041ae:	0002      	movs	r2, r0
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	4a6a      	ldr	r2, [pc, #424]	; (8004360 <HAL_RCC_ClockConfig+0x1f4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0ca      	b.n	8004354 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041be:	4b67      	ldr	r3, [pc, #412]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2207      	movs	r2, #7
 80041c4:	4013      	ands	r3, r2
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1ee      	bne.n	80041aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2202      	movs	r2, #2
 80041d2:	4013      	ands	r3, r2
 80041d4:	d015      	beq.n	8004202 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2204      	movs	r2, #4
 80041dc:	4013      	ands	r3, r2
 80041de:	d006      	beq.n	80041ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041e0:	4b60      	ldr	r3, [pc, #384]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	4b5f      	ldr	r3, [pc, #380]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 80041e6:	21e0      	movs	r1, #224	; 0xe0
 80041e8:	01c9      	lsls	r1, r1, #7
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ee:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	4a5d      	ldr	r2, [pc, #372]	; (8004368 <HAL_RCC_ClockConfig+0x1fc>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	4b59      	ldr	r3, [pc, #356]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 80041fe:	430a      	orrs	r2, r1
 8004200:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2201      	movs	r2, #1
 8004208:	4013      	ands	r3, r2
 800420a:	d057      	beq.n	80042bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d107      	bne.n	8004224 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004214:	4b53      	ldr	r3, [pc, #332]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	029b      	lsls	r3, r3, #10
 800421c:	4013      	ands	r3, r2
 800421e:	d12b      	bne.n	8004278 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e097      	b.n	8004354 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d107      	bne.n	800423c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422c:	4b4d      	ldr	r3, [pc, #308]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	049b      	lsls	r3, r3, #18
 8004234:	4013      	ands	r3, r2
 8004236:	d11f      	bne.n	8004278 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e08b      	b.n	8004354 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d107      	bne.n	8004254 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004244:	4b47      	ldr	r3, [pc, #284]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4013      	ands	r3, r2
 800424e:	d113      	bne.n	8004278 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e07f      	b.n	8004354 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d106      	bne.n	800426a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800425c:	4b41      	ldr	r3, [pc, #260]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 800425e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004260:	2202      	movs	r2, #2
 8004262:	4013      	ands	r3, r2
 8004264:	d108      	bne.n	8004278 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e074      	b.n	8004354 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426a:	4b3e      	ldr	r3, [pc, #248]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 800426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426e:	2202      	movs	r2, #2
 8004270:	4013      	ands	r3, r2
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e06d      	b.n	8004354 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004278:	4b3a      	ldr	r3, [pc, #232]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2207      	movs	r2, #7
 800427e:	4393      	bics	r3, r2
 8004280:	0019      	movs	r1, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	4b37      	ldr	r3, [pc, #220]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 8004288:	430a      	orrs	r2, r1
 800428a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428c:	f7fe f984 	bl	8002598 <HAL_GetTick>
 8004290:	0003      	movs	r3, r0
 8004292:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004294:	e009      	b.n	80042aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004296:	f7fe f97f 	bl	8002598 <HAL_GetTick>
 800429a:	0002      	movs	r2, r0
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	4a2f      	ldr	r2, [pc, #188]	; (8004360 <HAL_RCC_ClockConfig+0x1f4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e054      	b.n	8004354 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2238      	movs	r2, #56	; 0x38
 80042b0:	401a      	ands	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d1ec      	bne.n	8004296 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2207      	movs	r2, #7
 80042c2:	4013      	ands	r3, r2
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d21e      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2207      	movs	r2, #7
 80042d0:	4393      	bics	r3, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	4b21      	ldr	r3, [pc, #132]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042dc:	f7fe f95c 	bl	8002598 <HAL_GetTick>
 80042e0:	0003      	movs	r3, r0
 80042e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042e4:	e009      	b.n	80042fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e6:	f7fe f957 	bl	8002598 <HAL_GetTick>
 80042ea:	0002      	movs	r2, r0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <HAL_RCC_ClockConfig+0x1f4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e02c      	b.n	8004354 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042fa:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2207      	movs	r2, #7
 8004300:	4013      	ands	r3, r2
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d1ee      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2204      	movs	r2, #4
 800430e:	4013      	ands	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4a15      	ldr	r2, [pc, #84]	; (800436c <HAL_RCC_ClockConfig+0x200>)
 8004318:	4013      	ands	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004326:	f000 f829 	bl	800437c <HAL_RCC_GetSysClockFreq>
 800432a:	0001      	movs	r1, r0
 800432c:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	220f      	movs	r2, #15
 8004334:	401a      	ands	r2, r3
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <HAL_RCC_ClockConfig+0x204>)
 8004338:	0092      	lsls	r2, r2, #2
 800433a:	58d3      	ldr	r3, [r2, r3]
 800433c:	221f      	movs	r2, #31
 800433e:	4013      	ands	r3, r2
 8004340:	000a      	movs	r2, r1
 8004342:	40da      	lsrs	r2, r3
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_RCC_ClockConfig+0x208>)
 8004346:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_ClockConfig+0x20c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	0018      	movs	r0, r3
 800434e:	f7fe f8c9 	bl	80024e4 <HAL_InitTick>
 8004352:	0003      	movs	r3, r0
}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	b004      	add	sp, #16
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40022000 	.word	0x40022000
 8004360:	00001388 	.word	0x00001388
 8004364:	40021000 	.word	0x40021000
 8004368:	fffff0ff 	.word	0xfffff0ff
 800436c:	ffff8fff 	.word	0xffff8fff
 8004370:	080076c8 	.word	0x080076c8
 8004374:	20000000 	.word	0x20000000
 8004378:	20000004 	.word	0x20000004

0800437c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004382:	4b3c      	ldr	r3, [pc, #240]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2238      	movs	r2, #56	; 0x38
 8004388:	4013      	ands	r3, r2
 800438a:	d10f      	bne.n	80043ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800438c:	4b39      	ldr	r3, [pc, #228]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0adb      	lsrs	r3, r3, #11
 8004392:	2207      	movs	r2, #7
 8004394:	4013      	ands	r3, r2
 8004396:	2201      	movs	r2, #1
 8004398:	409a      	lsls	r2, r3
 800439a:	0013      	movs	r3, r2
 800439c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800439e:	6839      	ldr	r1, [r7, #0]
 80043a0:	4835      	ldr	r0, [pc, #212]	; (8004478 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043a2:	f7fb feaf 	bl	8000104 <__udivsi3>
 80043a6:	0003      	movs	r3, r0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	e05d      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043ac:	4b31      	ldr	r3, [pc, #196]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2238      	movs	r2, #56	; 0x38
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d102      	bne.n	80043be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043b8:	4b30      	ldr	r3, [pc, #192]	; (800447c <HAL_RCC_GetSysClockFreq+0x100>)
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	e054      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043be:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2238      	movs	r2, #56	; 0x38
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d138      	bne.n	800443c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80043ca:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2203      	movs	r2, #3
 80043d0:	4013      	ands	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d4:	4b27      	ldr	r3, [pc, #156]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	2207      	movs	r2, #7
 80043dc:	4013      	ands	r3, r2
 80043de:	3301      	adds	r3, #1
 80043e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d10d      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4824      	ldr	r0, [pc, #144]	; (800447c <HAL_RCC_GetSysClockFreq+0x100>)
 80043ec:	f7fb fe8a 	bl	8000104 <__udivsi3>
 80043f0:	0003      	movs	r3, r0
 80043f2:	0019      	movs	r1, r3
 80043f4:	4b1f      	ldr	r3, [pc, #124]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	227f      	movs	r2, #127	; 0x7f
 80043fc:	4013      	ands	r3, r2
 80043fe:	434b      	muls	r3, r1
 8004400:	617b      	str	r3, [r7, #20]
        break;
 8004402:	e00d      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	481c      	ldr	r0, [pc, #112]	; (8004478 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004408:	f7fb fe7c 	bl	8000104 <__udivsi3>
 800440c:	0003      	movs	r3, r0
 800440e:	0019      	movs	r1, r3
 8004410:	4b18      	ldr	r3, [pc, #96]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	227f      	movs	r2, #127	; 0x7f
 8004418:	4013      	ands	r3, r2
 800441a:	434b      	muls	r3, r1
 800441c:	617b      	str	r3, [r7, #20]
        break;
 800441e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004420:	4b14      	ldr	r3, [pc, #80]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0f5b      	lsrs	r3, r3, #29
 8004426:	2207      	movs	r2, #7
 8004428:	4013      	ands	r3, r2
 800442a:	3301      	adds	r3, #1
 800442c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	6978      	ldr	r0, [r7, #20]
 8004432:	f7fb fe67 	bl	8000104 <__udivsi3>
 8004436:	0003      	movs	r3, r0
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	e015      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800443c:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2238      	movs	r2, #56	; 0x38
 8004442:	4013      	ands	r3, r2
 8004444:	2b20      	cmp	r3, #32
 8004446:	d103      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	e00b      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2238      	movs	r2, #56	; 0x38
 8004456:	4013      	ands	r3, r2
 8004458:	2b18      	cmp	r3, #24
 800445a:	d103      	bne.n	8004464 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800445c:	23fa      	movs	r3, #250	; 0xfa
 800445e:	01db      	lsls	r3, r3, #7
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e001      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004468:	693b      	ldr	r3, [r7, #16]
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b006      	add	sp, #24
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	40021000 	.word	0x40021000
 8004478:	00f42400 	.word	0x00f42400
 800447c:	007a1200 	.word	0x007a1200

08004480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004484:	4b02      	ldr	r3, [pc, #8]	; (8004490 <HAL_RCC_GetHCLKFreq+0x10>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	20000000 	.word	0x20000000

08004494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004494:	b5b0      	push	{r4, r5, r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004498:	f7ff fff2 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 800449c:	0004      	movs	r4, r0
 800449e:	f7ff fb39 	bl	8003b14 <LL_RCC_GetAPB1Prescaler>
 80044a2:	0003      	movs	r3, r0
 80044a4:	0b1a      	lsrs	r2, r3, #12
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80044a8:	0092      	lsls	r2, r2, #2
 80044aa:	58d3      	ldr	r3, [r2, r3]
 80044ac:	221f      	movs	r2, #31
 80044ae:	4013      	ands	r3, r2
 80044b0:	40dc      	lsrs	r4, r3
 80044b2:	0023      	movs	r3, r4
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bdb0      	pop	{r4, r5, r7, pc}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	08007708 	.word	0x08007708

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80044c8:	2313      	movs	r3, #19
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044d0:	2312      	movs	r3, #18
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	029b      	lsls	r3, r3, #10
 80044e0:	4013      	ands	r3, r2
 80044e2:	d100      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80044e4:	e0a4      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e6:	2311      	movs	r3, #17
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ee:	4ba5      	ldr	r3, [pc, #660]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	055b      	lsls	r3, r3, #21
 80044f6:	4013      	ands	r3, r2
 80044f8:	d111      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fa:	4ba2      	ldr	r3, [pc, #648]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fe:	4ba1      	ldr	r3, [pc, #644]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	0549      	lsls	r1, r1, #21
 8004504:	430a      	orrs	r2, r1
 8004506:	63da      	str	r2, [r3, #60]	; 0x3c
 8004508:	4b9e      	ldr	r3, [pc, #632]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800450a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	055b      	lsls	r3, r3, #21
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004516:	2311      	movs	r3, #17
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800451e:	4b9a      	ldr	r3, [pc, #616]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4b99      	ldr	r3, [pc, #612]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	0049      	lsls	r1, r1, #1
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800452c:	f7fe f834 	bl	8002598 <HAL_GetTick>
 8004530:	0003      	movs	r3, r0
 8004532:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004534:	e00b      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004536:	f7fe f82f 	bl	8002598 <HAL_GetTick>
 800453a:	0002      	movs	r2, r0
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d904      	bls.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8004544:	2313      	movs	r3, #19
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2203      	movs	r2, #3
 800454a:	701a      	strb	r2, [r3, #0]
        break;
 800454c:	e005      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454e:	4b8e      	ldr	r3, [pc, #568]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4013      	ands	r3, r2
 8004558:	d0ed      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800455a:	2313      	movs	r3, #19
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d154      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004564:	4b87      	ldr	r3, [pc, #540]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004568:	23c0      	movs	r3, #192	; 0xc0
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4013      	ands	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d019      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	429a      	cmp	r2, r3
 800457e:	d014      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004580:	4b80      	ldr	r3, [pc, #512]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	4a81      	ldr	r2, [pc, #516]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004586:	4013      	ands	r3, r2
 8004588:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800458a:	4b7e      	ldr	r3, [pc, #504]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800458c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800458e:	4b7d      	ldr	r3, [pc, #500]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004590:	2180      	movs	r1, #128	; 0x80
 8004592:	0249      	lsls	r1, r1, #9
 8004594:	430a      	orrs	r2, r1
 8004596:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004598:	4b7a      	ldr	r3, [pc, #488]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800459a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800459c:	4b79      	ldr	r3, [pc, #484]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800459e:	497c      	ldr	r1, [pc, #496]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80045a0:	400a      	ands	r2, r1
 80045a2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045a4:	4b77      	ldr	r3, [pc, #476]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2201      	movs	r2, #1
 80045ae:	4013      	ands	r3, r2
 80045b0:	d016      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b2:	f7fd fff1 	bl	8002598 <HAL_GetTick>
 80045b6:	0003      	movs	r3, r0
 80045b8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ba:	e00c      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fd ffec 	bl	8002598 <HAL_GetTick>
 80045c0:	0002      	movs	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	4a73      	ldr	r2, [pc, #460]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d904      	bls.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80045cc:	2313      	movs	r3, #19
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	2203      	movs	r2, #3
 80045d2:	701a      	strb	r2, [r3, #0]
            break;
 80045d4:	e004      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d6:	4b6b      	ldr	r3, [pc, #428]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045da:	2202      	movs	r2, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	d0ed      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80045e0:	2313      	movs	r3, #19
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ea:	4b66      	ldr	r3, [pc, #408]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ee:	4a67      	ldr	r2, [pc, #412]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045f8:	4b62      	ldr	r3, [pc, #392]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045fa:	430a      	orrs	r2, r1
 80045fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80045fe:	e00c      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004600:	2312      	movs	r3, #18
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	2213      	movs	r2, #19
 8004606:	18ba      	adds	r2, r7, r2
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e005      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460e:	2312      	movs	r3, #18
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	2213      	movs	r2, #19
 8004614:	18ba      	adds	r2, r7, r2
 8004616:	7812      	ldrb	r2, [r2, #0]
 8004618:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800461a:	2311      	movs	r3, #17
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d105      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004624:	4b57      	ldr	r3, [pc, #348]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004628:	4b56      	ldr	r3, [pc, #344]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800462a:	495b      	ldr	r1, [pc, #364]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800462c:	400a      	ands	r2, r1
 800462e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2201      	movs	r2, #1
 8004636:	4013      	ands	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463a:	4b52      	ldr	r3, [pc, #328]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	2203      	movs	r2, #3
 8004640:	4393      	bics	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	4b4e      	ldr	r3, [pc, #312]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800464a:	430a      	orrs	r2, r1
 800464c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2220      	movs	r2, #32
 8004654:	4013      	ands	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004658:	4b4a      	ldr	r3, [pc, #296]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	4a4f      	ldr	r2, [pc, #316]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800465e:	4013      	ands	r3, r2
 8004660:	0019      	movs	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004668:	430a      	orrs	r2, r1
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4013      	ands	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004678:	4b42      	ldr	r3, [pc, #264]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	4a48      	ldr	r2, [pc, #288]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800467e:	4013      	ands	r3, r2
 8004680:	0019      	movs	r1, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004688:	430a      	orrs	r2, r1
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4013      	ands	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004698:	4b3a      	ldr	r3, [pc, #232]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	4a41      	ldr	r2, [pc, #260]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800469e:	4013      	ands	r3, r2
 80046a0:	0019      	movs	r1, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	4b37      	ldr	r3, [pc, #220]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046a8:	430a      	orrs	r2, r1
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2240      	movs	r2, #64	; 0x40
 80046b2:	4013      	ands	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b6:	4b33      	ldr	r3, [pc, #204]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046bc:	4013      	ands	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046c6:	430a      	orrs	r2, r1
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	01db      	lsls	r3, r3, #7
 80046d2:	4013      	ands	r3, r2
 80046d4:	d015      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046d6:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	0899      	lsrs	r1, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046e4:	430a      	orrs	r2, r1
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	05db      	lsls	r3, r3, #23
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d106      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046f4:	4b23      	ldr	r3, [pc, #140]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4b22      	ldr	r3, [pc, #136]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046fa:	2180      	movs	r1, #128	; 0x80
 80046fc:	0249      	lsls	r1, r1, #9
 80046fe:	430a      	orrs	r2, r1
 8004700:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	039b      	lsls	r3, r3, #14
 800470a:	4013      	ands	r3, r2
 800470c:	d016      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	4a26      	ldr	r2, [pc, #152]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004714:	4013      	ands	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1a      	ldr	r2, [r3, #32]
 800471c:	4b19      	ldr	r3, [pc, #100]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800471e:	430a      	orrs	r2, r1
 8004720:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1a      	ldr	r2, [r3, #32]
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	03db      	lsls	r3, r3, #15
 800472a:	429a      	cmp	r2, r3
 800472c:	d106      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800472e:	4b15      	ldr	r3, [pc, #84]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	0449      	lsls	r1, r1, #17
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	4013      	ands	r3, r2
 8004746:	d016      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800474e:	4013      	ands	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004758:	430a      	orrs	r2, r1
 800475a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	01db      	lsls	r3, r3, #7
 8004764:	429a      	cmp	r2, r3
 8004766:	d106      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800476e:	2180      	movs	r1, #128	; 0x80
 8004770:	0249      	lsls	r1, r1, #9
 8004772:	430a      	orrs	r2, r1
 8004774:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8004776:	2312      	movs	r3, #18
 8004778:	18fb      	adds	r3, r7, r3
 800477a:	781b      	ldrb	r3, [r3, #0]
}
 800477c:	0018      	movs	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	b006      	add	sp, #24
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000
 8004788:	40007000 	.word	0x40007000
 800478c:	fffffcff 	.word	0xfffffcff
 8004790:	fffeffff 	.word	0xfffeffff
 8004794:	00001388 	.word	0x00001388
 8004798:	efffffff 	.word	0xefffffff
 800479c:	fffff3ff 	.word	0xfffff3ff
 80047a0:	fff3ffff 	.word	0xfff3ffff
 80047a4:	ffcfffff 	.word	0xffcfffff
 80047a8:	ffffcfff 	.word	0xffffcfff
 80047ac:	ffbfffff 	.word	0xffbfffff
 80047b0:	ffff3fff 	.word	0xffff3fff

080047b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047b4:	b5b0      	push	{r4, r5, r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047bc:	230f      	movs	r3, #15
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d100      	bne.n	80047cc <HAL_RTC_Init+0x18>
 80047ca:	e07f      	b.n	80048cc <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2229      	movs	r2, #41	; 0x29
 80047d0:	5c9b      	ldrb	r3, [r3, r2]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2228      	movs	r2, #40	; 0x28
 80047dc:	2100      	movs	r1, #0
 80047de:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2288      	movs	r2, #136	; 0x88
 80047e4:	0212      	lsls	r2, r2, #8
 80047e6:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7fd f8f8 	bl	80019e0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2229      	movs	r2, #41	; 0x29
 80047f4:	2102      	movs	r1, #2
 80047f6:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	22ca      	movs	r2, #202	; 0xca
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2253      	movs	r2, #83	; 0x53
 8004806:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004808:	250f      	movs	r5, #15
 800480a:	197c      	adds	r4, r7, r5
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 f9c7 	bl	8004ba2 <RTC_EnterInitMode>
 8004814:	0003      	movs	r3, r0
 8004816:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8004818:	197b      	adds	r3, r7, r5
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d148      	bne.n	80048b2 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	492c      	ldr	r1, [pc, #176]	; (80048dc <HAL_RTC_Init+0x128>)
 800482c:	400a      	ands	r2, r1
 800482e:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6999      	ldr	r1, [r3, #24]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6912      	ldr	r2, [r2, #16]
 8004856:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6919      	ldr	r1, [r3, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	041a      	lsls	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800486c:	250f      	movs	r5, #15
 800486e:	197c      	adds	r4, r7, r5
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0018      	movs	r0, r3
 8004874:	f000 f9d8 	bl	8004c28 <RTC_ExitInitMode>
 8004878:	0003      	movs	r3, r0
 800487a:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800487c:	197b      	adds	r3, r7, r5
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d116      	bne.n	80048b2 <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	00d2      	lsls	r2, r2, #3
 8004890:	08d2      	lsrs	r2, r2, #3
 8004892:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6999      	ldr	r1, [r3, #24]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	22ff      	movs	r2, #255	; 0xff
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80048ba:	230f      	movs	r3, #15
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d103      	bne.n	80048cc <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2229      	movs	r2, #41	; 0x29
 80048c8:	2101      	movs	r1, #1
 80048ca:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80048cc:	230f      	movs	r3, #15
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	781b      	ldrb	r3, [r3, #0]
}
 80048d2:	0018      	movs	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b004      	add	sp, #16
 80048d8:	bdb0      	pop	{r4, r5, r7, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	fb8fffbf 	.word	0xfb8fffbf

080048e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048e0:	b5b0      	push	{r4, r5, r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2228      	movs	r2, #40	; 0x28
 80048f0:	5c9b      	ldrb	r3, [r3, r2]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_RTC_SetTime+0x1a>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e092      	b.n	8004a20 <HAL_RTC_SetTime+0x140>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2228      	movs	r2, #40	; 0x28
 80048fe:	2101      	movs	r1, #1
 8004900:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2229      	movs	r2, #41	; 0x29
 8004906:	2102      	movs	r1, #2
 8004908:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	22ca      	movs	r2, #202	; 0xca
 8004910:	625a      	str	r2, [r3, #36]	; 0x24
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2253      	movs	r2, #83	; 0x53
 8004918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800491a:	2513      	movs	r5, #19
 800491c:	197c      	adds	r4, r7, r5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	0018      	movs	r0, r3
 8004922:	f000 f93e 	bl	8004ba2 <RTC_EnterInitMode>
 8004926:	0003      	movs	r3, r0
 8004928:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800492a:	197b      	adds	r3, r7, r5
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d162      	bne.n	80049f8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d125      	bne.n	8004984 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2240      	movs	r2, #64	; 0x40
 8004940:	4013      	ands	r3, r2
 8004942:	d102      	bne.n	800494a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2200      	movs	r2, #0
 8004948:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	0018      	movs	r0, r3
 8004950:	f000 f9b0 	bl	8004cb4 <RTC_ByteToBcd2>
 8004954:	0003      	movs	r3, r0
 8004956:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	0018      	movs	r0, r3
 800495e:	f000 f9a9 	bl	8004cb4 <RTC_ByteToBcd2>
 8004962:	0003      	movs	r3, r0
 8004964:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004966:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	789b      	ldrb	r3, [r3, #2]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 f9a1 	bl	8004cb4 <RTC_ByteToBcd2>
 8004972:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004974:	0022      	movs	r2, r4
 8004976:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	78db      	ldrb	r3, [r3, #3]
 800497c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	e017      	b.n	80049b4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2240      	movs	r2, #64	; 0x40
 800498c:	4013      	ands	r3, r2
 800498e:	d102      	bne.n	8004996 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2200      	movs	r2, #0
 8004994:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	785b      	ldrb	r3, [r3, #1]
 80049a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	78db      	ldrb	r3, [r3, #3]
 80049ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	491b      	ldr	r1, [pc, #108]	; (8004a28 <HAL_RTC_SetTime+0x148>)
 80049bc:	400a      	ands	r2, r1
 80049be:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4918      	ldr	r1, [pc, #96]	; (8004a2c <HAL_RTC_SetTime+0x14c>)
 80049cc:	400a      	ands	r2, r1
 80049ce:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6999      	ldr	r1, [r3, #24]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	431a      	orrs	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049e8:	2313      	movs	r3, #19
 80049ea:	18fc      	adds	r4, r7, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 f91a 	bl	8004c28 <RTC_ExitInitMode>
 80049f4:	0003      	movs	r3, r0
 80049f6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004a00:	2313      	movs	r3, #19
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d103      	bne.n	8004a12 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2229      	movs	r2, #41	; 0x29
 8004a0e:	2101      	movs	r1, #1
 8004a10:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2228      	movs	r2, #40	; 0x28
 8004a16:	2100      	movs	r1, #0
 8004a18:	5499      	strb	r1, [r3, r2]

  return status;
 8004a1a:	2313      	movs	r3, #19
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	781b      	ldrb	r3, [r3, #0]
}
 8004a20:	0018      	movs	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b006      	add	sp, #24
 8004a26:	bdb0      	pop	{r4, r5, r7, pc}
 8004a28:	007f7f7f 	.word	0x007f7f7f
 8004a2c:	fffbffff 	.word	0xfffbffff

08004a30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a30:	b5b0      	push	{r4, r5, r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2228      	movs	r2, #40	; 0x28
 8004a40:	5c9b      	ldrb	r3, [r3, r2]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_RTC_SetDate+0x1a>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e07e      	b.n	8004b48 <HAL_RTC_SetDate+0x118>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2228      	movs	r2, #40	; 0x28
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2229      	movs	r2, #41	; 0x29
 8004a56:	2102      	movs	r1, #2
 8004a58:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10e      	bne.n	8004a7e <HAL_RTC_SetDate+0x4e>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	785b      	ldrb	r3, [r3, #1]
 8004a64:	001a      	movs	r2, r3
 8004a66:	2310      	movs	r3, #16
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d008      	beq.n	8004a7e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	785b      	ldrb	r3, [r3, #1]
 8004a70:	2210      	movs	r2, #16
 8004a72:	4393      	bics	r3, r2
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	330a      	adds	r3, #10
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d11c      	bne.n	8004abe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	78db      	ldrb	r3, [r3, #3]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 f913 	bl	8004cb4 <RTC_ByteToBcd2>
 8004a8e:	0003      	movs	r3, r0
 8004a90:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f90c 	bl	8004cb4 <RTC_ByteToBcd2>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004aa0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	789b      	ldrb	r3, [r3, #2]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 f904 	bl	8004cb4 <RTC_ByteToBcd2>
 8004aac:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004aae:	0022      	movs	r2, r4
 8004ab0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e00e      	b.n	8004adc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	78db      	ldrb	r3, [r3, #3]
 8004ac2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004aca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004ad0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	22ca      	movs	r2, #202	; 0xca
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2253      	movs	r2, #83	; 0x53
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004aec:	2513      	movs	r5, #19
 8004aee:	197c      	adds	r4, r7, r5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	0018      	movs	r0, r3
 8004af4:	f000 f855 	bl	8004ba2 <RTC_EnterInitMode>
 8004af8:	0003      	movs	r3, r0
 8004afa:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004afc:	197b      	adds	r3, r7, r5
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10d      	bne.n	8004b20 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4911      	ldr	r1, [pc, #68]	; (8004b50 <HAL_RTC_SetDate+0x120>)
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b10:	2313      	movs	r3, #19
 8004b12:	18fc      	adds	r4, r7, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	0018      	movs	r0, r3
 8004b18:	f000 f886 	bl	8004c28 <RTC_ExitInitMode>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	22ff      	movs	r2, #255	; 0xff
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004b28:	2313      	movs	r3, #19
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2229      	movs	r2, #41	; 0x29
 8004b36:	2101      	movs	r1, #1
 8004b38:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2228      	movs	r2, #40	; 0x28
 8004b3e:	2100      	movs	r1, #0
 8004b40:	5499      	strb	r1, [r3, r2]

  return status;
 8004b42:	2313      	movs	r3, #19
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	781b      	ldrb	r3, [r3, #0]
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b006      	add	sp, #24
 8004b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b50:	00ffff3f 	.word	0x00ffff3f

08004b54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	21a0      	movs	r1, #160	; 0xa0
 8004b68:	438a      	bics	r2, r1
 8004b6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004b6c:	f7fd fd14 	bl	8002598 <HAL_GetTick>
 8004b70:	0003      	movs	r3, r0
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004b74:	e00a      	b.n	8004b8c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b76:	f7fd fd0f 	bl	8002598 <HAL_GetTick>
 8004b7a:	0002      	movs	r2, r0
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	23fa      	movs	r3, #250	; 0xfa
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d901      	bls.n	8004b8c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e006      	b.n	8004b9a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	4013      	ands	r3, r2
 8004b96:	d0ee      	beq.n	8004b76 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004baa:	230f      	movs	r3, #15
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2240      	movs	r2, #64	; 0x40
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d12d      	bne.n	8004c1a <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2180      	movs	r1, #128	; 0x80
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004bce:	f7fd fce3 	bl	8002598 <HAL_GetTick>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004bd6:	e015      	b.n	8004c04 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bd8:	f7fd fcde 	bl	8002598 <HAL_GetTick>
 8004bdc:	0002      	movs	r2, r0
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	1ad2      	subs	r2, r2, r3
 8004be2:	210f      	movs	r1, #15
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	1879      	adds	r1, r7, r1
 8004be8:	7809      	ldrb	r1, [r1, #0]
 8004bea:	7019      	strb	r1, [r3, #0]
 8004bec:	23fa      	movs	r3, #250	; 0xfa
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d907      	bls.n	8004c04 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8004bf4:	230f      	movs	r3, #15
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2229      	movs	r2, #41	; 0x29
 8004c00:	2103      	movs	r1, #3
 8004c02:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	2240      	movs	r2, #64	; 0x40
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d104      	bne.n	8004c1a <RTC_EnterInitMode+0x78>
 8004c10:	230f      	movs	r3, #15
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d1de      	bne.n	8004bd8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004c1a:	230f      	movs	r3, #15
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	781b      	ldrb	r3, [r3, #0]
}
 8004c20:	0018      	movs	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b004      	add	sp, #16
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c30:	230f      	movs	r3, #15
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004c38:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <RTC_ExitInitMode+0x88>)
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	4b1c      	ldr	r3, [pc, #112]	; (8004cb0 <RTC_ExitInitMode+0x88>)
 8004c3e:	2180      	movs	r1, #128	; 0x80
 8004c40:	438a      	bics	r2, r1
 8004c42:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004c44:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <RTC_ExitInitMode+0x88>)
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d10e      	bne.n	8004c6c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7ff ff7f 	bl	8004b54 <HAL_RTC_WaitForSynchro>
 8004c56:	1e03      	subs	r3, r0, #0
 8004c58:	d022      	beq.n	8004ca0 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2229      	movs	r2, #41	; 0x29
 8004c5e:	2103      	movs	r1, #3
 8004c60:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004c62:	230f      	movs	r3, #15
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	2203      	movs	r2, #3
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e019      	b.n	8004ca0 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <RTC_ExitInitMode+0x88>)
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <RTC_ExitInitMode+0x88>)
 8004c72:	2120      	movs	r1, #32
 8004c74:	438a      	bics	r2, r1
 8004c76:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f7ff ff6a 	bl	8004b54 <HAL_RTC_WaitForSynchro>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d007      	beq.n	8004c94 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2229      	movs	r2, #41	; 0x29
 8004c88:	2103      	movs	r1, #3
 8004c8a:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004c8c:	230f      	movs	r3, #15
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2203      	movs	r2, #3
 8004c92:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <RTC_ExitInitMode+0x88>)
 8004c96:	699a      	ldr	r2, [r3, #24]
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <RTC_ExitInitMode+0x88>)
 8004c9a:	2120      	movs	r1, #32
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004ca0:	230f      	movs	r3, #15
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	781b      	ldrb	r3, [r3, #0]
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b004      	add	sp, #16
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	40002800 	.word	0x40002800

08004cb4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	0002      	movs	r2, r0
 8004cbc:	1dfb      	adds	r3, r7, #7
 8004cbe:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004cc4:	230b      	movs	r3, #11
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	1dfa      	adds	r2, r7, #7
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004cce:	e008      	b.n	8004ce2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004cd6:	220b      	movs	r2, #11
 8004cd8:	18bb      	adds	r3, r7, r2
 8004cda:	18ba      	adds	r2, r7, r2
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	3a0a      	subs	r2, #10
 8004ce0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004ce2:	230b      	movs	r3, #11
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b09      	cmp	r3, #9
 8004cea:	d8f1      	bhi.n	8004cd0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	230b      	movs	r3, #11
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	b2db      	uxtb	r3, r3
}
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b004      	add	sp, #16
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e08a      	b.n	8004e30 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	225d      	movs	r2, #93	; 0x5d
 8004d24:	5c9b      	ldrb	r3, [r3, r2]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	225c      	movs	r2, #92	; 0x5c
 8004d30:	2100      	movs	r1, #0
 8004d32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7fc fe78 	bl	8001a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	225d      	movs	r2, #93	; 0x5d
 8004d40:	2102      	movs	r1, #2
 8004d42:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2140      	movs	r1, #64	; 0x40
 8004d50:	438a      	bics	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	23e0      	movs	r3, #224	; 0xe0
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d902      	bls.n	8004d66 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e002      	b.n	8004d6c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	015b      	lsls	r3, r3, #5
 8004d6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	23f0      	movs	r3, #240	; 0xf0
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d008      	beq.n	8004d8a <HAL_SPI_Init+0x82>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	23e0      	movs	r3, #224	; 0xe0
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d002      	beq.n	8004d8a <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10c      	bne.n	8004dac <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	23e0      	movs	r3, #224	; 0xe0
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d903      	bls.n	8004da6 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
 8004da4:	e002      	b.n	8004dac <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6999      	ldr	r1, [r3, #24]
 8004dc6:	2380      	movs	r3, #128	; 0x80
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	400b      	ands	r3, r1
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	0011      	movs	r1, r2
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	0c1b      	lsrs	r3, r3, #16
 8004dee:	2204      	movs	r2, #4
 8004df0:	401a      	ands	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	0011      	movs	r1, r2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69da      	ldr	r2, [r3, #28]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4907      	ldr	r1, [pc, #28]	; (8004e38 <HAL_SPI_Init+0x130>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	225d      	movs	r2, #93	; 0x5d
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b004      	add	sp, #16
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	fffff7ff 	.word	0xfffff7ff

08004e3c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	1dbb      	adds	r3, r7, #6
 8004e48:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e4a:	2317      	movs	r3, #23
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	225c      	movs	r2, #92	; 0x5c
 8004e56:	5c9b      	ldrb	r3, [r3, r2]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_SPI_Transmit_DMA+0x24>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e0df      	b.n	8005020 <HAL_SPI_Transmit_DMA+0x1e4>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	225c      	movs	r2, #92	; 0x5c
 8004e64:	2101      	movs	r1, #1
 8004e66:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	225d      	movs	r2, #93	; 0x5d
 8004e6c:	5c9b      	ldrb	r3, [r3, r2]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d004      	beq.n	8004e7e <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8004e74:	2317      	movs	r3, #23
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	2202      	movs	r2, #2
 8004e7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e7c:	e0c9      	b.n	8005012 <HAL_SPI_Transmit_DMA+0x1d6>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_SPI_Transmit_DMA+0x50>
 8004e84:	1dbb      	adds	r3, r7, #6
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8004e8c:	2317      	movs	r3, #23
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	2201      	movs	r2, #1
 8004e92:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e94:	e0bd      	b.n	8005012 <HAL_SPI_Transmit_DMA+0x1d6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	225d      	movs	r2, #93	; 0x5d
 8004e9a:	2103      	movs	r1, #3
 8004e9c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1dba      	adds	r2, r7, #6
 8004eae:	8812      	ldrh	r2, [r2, #0]
 8004eb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1dba      	adds	r2, r7, #6
 8004eb6:	8812      	ldrh	r2, [r2, #0]
 8004eb8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2244      	movs	r2, #68	; 0x44
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2246      	movs	r2, #70	; 0x46
 8004ed8:	2100      	movs	r1, #0
 8004eda:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d108      	bne.n	8004efa <HAL_SPI_Transmit_DMA+0xbe>
  {
    SPI_1LINE_TX(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2180      	movs	r1, #128	; 0x80
 8004ef4:	01c9      	lsls	r1, r1, #7
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	4a4a      	ldr	r2, [pc, #296]	; (8005028 <HAL_SPI_Transmit_DMA+0x1ec>)
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	4a49      	ldr	r2, [pc, #292]	; (800502c <HAL_SPI_Transmit_DMA+0x1f0>)
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	4a48      	ldr	r2, [pc, #288]	; (8005030 <HAL_SPI_Transmit_DMA+0x1f4>)
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	2200      	movs	r2, #0
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4943      	ldr	r1, [pc, #268]	; (8005034 <HAL_SPI_Transmit_DMA+0x1f8>)
 8004f26:	400a      	ands	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	23e0      	movs	r3, #224	; 0xe0
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d82f      	bhi.n	8004f96 <HAL_SPI_Transmit_DMA+0x15a>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	699a      	ldr	r2, [r3, #24]
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d128      	bne.n	8004f96 <HAL_SPI_Transmit_DMA+0x15a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d10f      	bne.n	8004f72 <HAL_SPI_Transmit_DMA+0x136>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4935      	ldr	r1, [pc, #212]	; (8005034 <HAL_SPI_Transmit_DMA+0x1f8>)
 8004f5e:	400a      	ands	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f70:	e011      	b.n	8004f96 <HAL_SPI_Transmit_DMA+0x15a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2180      	movs	r1, #128	; 0x80
 8004f7e:	01c9      	lsls	r1, r1, #7
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	001a      	movs	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f7fe f8f7 	bl	80031a0 <HAL_DMA_Start_IT>
 8004fb2:	1e03      	subs	r3, r0, #0
 8004fb4:	d00e      	beq.n	8004fd4 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fba:	2210      	movs	r2, #16
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004fc2:	2317      	movs	r3, #23
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	225d      	movs	r2, #93	; 0x5d
 8004fce:	2101      	movs	r1, #1
 8004fd0:	5499      	strb	r1, [r3, r2]
    goto error;
 8004fd2:	e01e      	b.n	8005012 <HAL_SPI_Transmit_DMA+0x1d6>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2240      	movs	r2, #64	; 0x40
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d007      	beq.n	8004ff2 <HAL_SPI_Transmit_DMA+0x1b6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2140      	movs	r1, #64	; 0x40
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2120      	movs	r1, #32
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2102      	movs	r1, #2
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	225c      	movs	r2, #92	; 0x5c
 8005016:	2100      	movs	r1, #0
 8005018:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800501a:	2317      	movs	r3, #23
 800501c:	18fb      	adds	r3, r7, r3
 800501e:	781b      	ldrb	r3, [r3, #0]
}
 8005020:	0018      	movs	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	b006      	add	sp, #24
 8005026:	bd80      	pop	{r7, pc}
 8005028:	08005115 	.word	0x08005115
 800502c:	08005069 	.word	0x08005069
 8005030:	08005133 	.word	0x08005133
 8005034:	ffffbfff 	.word	0xffffbfff

08005038 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b002      	add	sp, #8
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005050:	46c0      	nop			; (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	b002      	add	sp, #8
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005060:	46c0      	nop			; (mov r8, r8)
 8005062:	46bd      	mov	sp, r7
 8005064:	b002      	add	sp, #8
 8005066:	bd80      	pop	{r7, pc}

08005068 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005076:	f7fd fa8f 	bl	8002598 <HAL_GetTick>
 800507a:	0003      	movs	r3, r0
 800507c:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2220      	movs	r2, #32
 8005086:	4013      	ands	r3, r2
 8005088:	2b20      	cmp	r3, #32
 800508a:	d03c      	beq.n	8005106 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2120      	movs	r1, #32
 8005098:	438a      	bics	r2, r1
 800509a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2102      	movs	r1, #2
 80050a8:	438a      	bics	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2164      	movs	r1, #100	; 0x64
 80050b2:	0018      	movs	r0, r3
 80050b4:	f000 f942 	bl	800533c <SPI_EndRxTxTransaction>
 80050b8:	1e03      	subs	r3, r0, #0
 80050ba:	d005      	beq.n	80050c8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c0:	2220      	movs	r2, #32
 80050c2:	431a      	orrs	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	225d      	movs	r2, #93	; 0x5d
 80050f0:	2101      	movs	r1, #1
 80050f2:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	0018      	movs	r0, r3
 8005100:	f7ff ffaa 	bl	8005058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005104:	e003      	b.n	800510e <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	0018      	movs	r0, r3
 800510a:	f7ff ff95 	bl	8005038 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800510e:	46bd      	mov	sp, r7
 8005110:	b006      	add	sp, #24
 8005112:	bd80      	pop	{r7, pc}

08005114 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	0018      	movs	r0, r3
 8005126:	f7ff ff8f 	bl	8005048 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	46bd      	mov	sp, r7
 800512e:	b004      	add	sp, #16
 8005130:	bd80      	pop	{r7, pc}

08005132 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2103      	movs	r1, #3
 800514c:	438a      	bics	r2, r1
 800514e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005154:	2210      	movs	r2, #16
 8005156:	431a      	orrs	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	225d      	movs	r2, #93	; 0x5d
 8005160:	2101      	movs	r1, #1
 8005162:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	0018      	movs	r0, r3
 8005168:	f7ff ff76 	bl	8005058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800516c:	46c0      	nop			; (mov r8, r8)
 800516e:	46bd      	mov	sp, r7
 8005170:	b004      	add	sp, #16
 8005172:	bd80      	pop	{r7, pc}

08005174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	1dfb      	adds	r3, r7, #7
 8005182:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005184:	e050      	b.n	8005228 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	d04d      	beq.n	8005228 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800518c:	f7fd fa04 	bl	8002598 <HAL_GetTick>
 8005190:	0002      	movs	r2, r0
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d902      	bls.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d142      	bne.n	8005228 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	21e0      	movs	r1, #224	; 0xe0
 80051ae:	438a      	bics	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	2382      	movs	r3, #130	; 0x82
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d113      	bne.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0x72>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d005      	beq.n	80051d6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d107      	bne.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2140      	movs	r1, #64	; 0x40
 80051e2:	438a      	bics	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	019b      	lsls	r3, r3, #6
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d110      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4914      	ldr	r1, [pc, #80]	; (8005250 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80051fe:	400a      	ands	r2, r1
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2180      	movs	r1, #128	; 0x80
 800520e:	0189      	lsls	r1, r1, #6
 8005210:	430a      	orrs	r2, r1
 8005212:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	225d      	movs	r2, #93	; 0x5d
 8005218:	2101      	movs	r1, #1
 800521a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	225c      	movs	r2, #92	; 0x5c
 8005220:	2100      	movs	r1, #0
 8005222:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e00f      	b.n	8005248 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	4013      	ands	r3, r2
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	425a      	negs	r2, r3
 8005238:	4153      	adcs	r3, r2
 800523a:	b2db      	uxtb	r3, r3
 800523c:	001a      	movs	r2, r3
 800523e:	1dfb      	adds	r3, r7, #7
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d19f      	bne.n	8005186 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	0018      	movs	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	b004      	add	sp, #16
 800524e:	bd80      	pop	{r7, pc}
 8005250:	ffffdfff 	.word	0xffffdfff

08005254 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005262:	e05c      	b.n	800531e <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	23c0      	movs	r3, #192	; 0xc0
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	429a      	cmp	r2, r3
 800526c:	d106      	bne.n	800527c <SPI_WaitFifoStateUntilTimeout+0x28>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d103      	bne.n	800527c <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	3301      	adds	r3, #1
 8005280:	d04d      	beq.n	800531e <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005282:	f7fd f989 	bl	8002598 <HAL_GetTick>
 8005286:	0002      	movs	r2, r0
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d902      	bls.n	8005298 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d142      	bne.n	800531e <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	21e0      	movs	r1, #224	; 0xe0
 80052a4:	438a      	bics	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	2382      	movs	r3, #130	; 0x82
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d113      	bne.n	80052dc <SPI_WaitFifoStateUntilTimeout+0x88>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	429a      	cmp	r2, r3
 80052be:	d005      	beq.n	80052cc <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d107      	bne.n	80052dc <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2140      	movs	r1, #64	; 0x40
 80052d8:	438a      	bics	r2, r1
 80052da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	019b      	lsls	r3, r3, #6
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d110      	bne.n	800530a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4911      	ldr	r1, [pc, #68]	; (8005338 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80052f4:	400a      	ands	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2180      	movs	r1, #128	; 0x80
 8005304:	0189      	lsls	r1, r1, #6
 8005306:	430a      	orrs	r2, r1
 8005308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	225d      	movs	r2, #93	; 0x5d
 800530e:	2101      	movs	r1, #1
 8005310:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	225c      	movs	r2, #92	; 0x5c
 8005316:	2100      	movs	r1, #0
 8005318:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e008      	b.n	8005330 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	4013      	ands	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d19a      	bne.n	8005264 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	0018      	movs	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	b004      	add	sp, #16
 8005336:	bd80      	pop	{r7, pc}
 8005338:	ffffdfff 	.word	0xffffdfff

0800533c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	23c0      	movs	r3, #192	; 0xc0
 800534c:	0159      	lsls	r1, r3, #5
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	0013      	movs	r3, r2
 8005356:	2200      	movs	r2, #0
 8005358:	f7ff ff7c 	bl	8005254 <SPI_WaitFifoStateUntilTimeout>
 800535c:	1e03      	subs	r3, r0, #0
 800535e:	d007      	beq.n	8005370 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005364:	2220      	movs	r2, #32
 8005366:	431a      	orrs	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e027      	b.n	80053c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	0013      	movs	r3, r2
 800537a:	2200      	movs	r2, #0
 800537c:	2180      	movs	r1, #128	; 0x80
 800537e:	f7ff fef9 	bl	8005174 <SPI_WaitFlagStateUntilTimeout>
 8005382:	1e03      	subs	r3, r0, #0
 8005384:	d007      	beq.n	8005396 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538a:	2220      	movs	r2, #32
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e014      	b.n	80053c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	23c0      	movs	r3, #192	; 0xc0
 800539a:	00d9      	lsls	r1, r3, #3
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	0013      	movs	r3, r2
 80053a4:	2200      	movs	r2, #0
 80053a6:	f7ff ff55 	bl	8005254 <SPI_WaitFifoStateUntilTimeout>
 80053aa:	1e03      	subs	r3, r0, #0
 80053ac:	d007      	beq.n	80053be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b2:	2220      	movs	r2, #32
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e000      	b.n	80053c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b004      	add	sp, #16
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e046      	b.n	8005468 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2280      	movs	r2, #128	; 0x80
 80053de:	589b      	ldr	r3, [r3, r2]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d107      	bne.n	80053f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	227c      	movs	r2, #124	; 0x7c
 80053e8:	2100      	movs	r1, #0
 80053ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f7fc fbce 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2280      	movs	r2, #128	; 0x80
 80053f8:	2124      	movs	r1, #36	; 0x24
 80053fa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2101      	movs	r1, #1
 8005408:	438a      	bics	r2, r1
 800540a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	0018      	movs	r0, r3
 8005410:	f000 f8dc 	bl	80055cc <UART_SetConfig>
 8005414:	0003      	movs	r3, r0
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e024      	b.n	8005468 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	0018      	movs	r0, r3
 800542a:	f001 f97d 	bl	8006728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	490d      	ldr	r1, [pc, #52]	; (8005470 <HAL_UART_Init+0xa8>)
 800543a:	400a      	ands	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	212a      	movs	r1, #42	; 0x2a
 800544a:	438a      	bics	r2, r1
 800544c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2101      	movs	r1, #1
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	0018      	movs	r0, r3
 8005462:	f001 fa15 	bl	8006890 <UART_CheckIdleState>
 8005466:	0003      	movs	r3, r0
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b002      	add	sp, #8
 800546e:	bd80      	pop	{r7, pc}
 8005470:	ffffb7ff 	.word	0xffffb7ff

08005474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	1dbb      	adds	r3, r7, #6
 8005482:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2280      	movs	r2, #128	; 0x80
 8005488:	589b      	ldr	r3, [r3, r2]
 800548a:	2b20      	cmp	r3, #32
 800548c:	d000      	beq.n	8005490 <HAL_UART_Transmit+0x1c>
 800548e:	e097      	b.n	80055c0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_UART_Transmit+0x2a>
 8005496:	1dbb      	adds	r3, r7, #6
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e08f      	b.n	80055c2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	015b      	lsls	r3, r3, #5
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d109      	bne.n	80054c2 <HAL_UART_Transmit+0x4e>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d105      	bne.n	80054c2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2201      	movs	r2, #1
 80054ba:	4013      	ands	r3, r2
 80054bc:	d001      	beq.n	80054c2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e07f      	b.n	80055c2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	227c      	movs	r2, #124	; 0x7c
 80054c6:	5c9b      	ldrb	r3, [r3, r2]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_UART_Transmit+0x5c>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e078      	b.n	80055c2 <HAL_UART_Transmit+0x14e>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	227c      	movs	r2, #124	; 0x7c
 80054d4:	2101      	movs	r1, #1
 80054d6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2288      	movs	r2, #136	; 0x88
 80054dc:	2100      	movs	r1, #0
 80054de:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2280      	movs	r2, #128	; 0x80
 80054e4:	2121      	movs	r1, #33	; 0x21
 80054e6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80054e8:	f7fd f856 	bl	8002598 <HAL_GetTick>
 80054ec:	0003      	movs	r3, r0
 80054ee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1dba      	adds	r2, r7, #6
 80054f4:	2154      	movs	r1, #84	; 0x54
 80054f6:	8812      	ldrh	r2, [r2, #0]
 80054f8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1dba      	adds	r2, r7, #6
 80054fe:	2156      	movs	r1, #86	; 0x56
 8005500:	8812      	ldrh	r2, [r2, #0]
 8005502:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	015b      	lsls	r3, r3, #5
 800550c:	429a      	cmp	r2, r3
 800550e:	d108      	bne.n	8005522 <HAL_UART_Transmit+0xae>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005518:	2300      	movs	r3, #0
 800551a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e003      	b.n	800552a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800552a:	e02c      	b.n	8005586 <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	0013      	movs	r3, r2
 8005536:	2200      	movs	r2, #0
 8005538:	2180      	movs	r1, #128	; 0x80
 800553a:	f001 f9f3 	bl	8006924 <UART_WaitOnFlagUntilTimeout>
 800553e:	1e03      	subs	r3, r0, #0
 8005540:	d001      	beq.n	8005546 <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e03d      	b.n	80055c2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	001a      	movs	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	05d2      	lsls	r2, r2, #23
 8005558:	0dd2      	lsrs	r2, r2, #23
 800555a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	3302      	adds	r3, #2
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	e007      	b.n	8005574 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	781a      	ldrb	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3301      	adds	r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2256      	movs	r2, #86	; 0x56
 8005578:	5a9b      	ldrh	r3, [r3, r2]
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b299      	uxth	r1, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2256      	movs	r2, #86	; 0x56
 8005584:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2256      	movs	r2, #86	; 0x56
 800558a:	5a9b      	ldrh	r3, [r3, r2]
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1cc      	bne.n	800552c <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	0013      	movs	r3, r2
 800559c:	2200      	movs	r2, #0
 800559e:	2140      	movs	r1, #64	; 0x40
 80055a0:	f001 f9c0 	bl	8006924 <UART_WaitOnFlagUntilTimeout>
 80055a4:	1e03      	subs	r3, r0, #0
 80055a6:	d001      	beq.n	80055ac <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e00a      	b.n	80055c2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	2120      	movs	r1, #32
 80055b2:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	227c      	movs	r2, #124	; 0x7c
 80055b8:	2100      	movs	r1, #0
 80055ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	e000      	b.n	80055c2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80055c0:	2302      	movs	r3, #2
  }
}
 80055c2:	0018      	movs	r0, r3
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b008      	add	sp, #32
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ce:	b0a1      	sub	sp, #132	; 0x84
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80055d8:	231b      	movs	r3, #27
 80055da:	2258      	movs	r2, #88	; 0x58
 80055dc:	18ba      	adds	r2, r7, r2
 80055de:	18d2      	adds	r2, r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8005600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005602:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005604:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005606:	4313      	orrs	r3, r2
 8005608:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800560a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4bbe      	ldr	r3, [pc, #760]	; (800590c <UART_SetConfig+0x340>)
 8005612:	401a      	ands	r2, r3
 8005614:	0011      	movs	r1, r2
 8005616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800561c:	430b      	orrs	r3, r1
 800561e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4bba      	ldr	r3, [pc, #744]	; (8005910 <UART_SetConfig+0x344>)
 8005628:	401a      	ands	r2, r3
 800562a:	0010      	movs	r0, r2
 800562c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800562e:	68d9      	ldr	r1, [r3, #12]
 8005630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	0003      	movs	r3, r0
 8005636:	430b      	orrs	r3, r1
 8005638:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800563a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4bb3      	ldr	r3, [pc, #716]	; (8005914 <UART_SetConfig+0x348>)
 8005646:	429a      	cmp	r2, r3
 8005648:	d004      	beq.n	8005654 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800564a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005650:	4313      	orrs	r3, r2
 8005652:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	4baf      	ldr	r3, [pc, #700]	; (8005918 <UART_SetConfig+0x34c>)
 800565c:	401a      	ands	r2, r3
 800565e:	0011      	movs	r1, r2
 8005660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005666:	430b      	orrs	r3, r1
 8005668:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800566a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	230f      	movs	r3, #15
 8005672:	439a      	bics	r2, r3
 8005674:	0010      	movs	r0, r2
 8005676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005678:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800567a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	0003      	movs	r3, r0
 8005680:	430b      	orrs	r3, r1
 8005682:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4ba4      	ldr	r3, [pc, #656]	; (800591c <UART_SetConfig+0x350>)
 800568a:	429a      	cmp	r2, r3
 800568c:	d12f      	bne.n	80056ee <UART_SetConfig+0x122>
 800568e:	4ba4      	ldr	r3, [pc, #656]	; (8005920 <UART_SetConfig+0x354>)
 8005690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005692:	2303      	movs	r3, #3
 8005694:	4013      	ands	r3, r2
 8005696:	2b01      	cmp	r3, #1
 8005698:	d013      	beq.n	80056c2 <UART_SetConfig+0xf6>
 800569a:	d304      	bcc.n	80056a6 <UART_SetConfig+0xda>
 800569c:	2b02      	cmp	r3, #2
 800569e:	d009      	beq.n	80056b4 <UART_SetConfig+0xe8>
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d015      	beq.n	80056d0 <UART_SetConfig+0x104>
 80056a4:	e01b      	b.n	80056de <UART_SetConfig+0x112>
 80056a6:	2323      	movs	r3, #35	; 0x23
 80056a8:	2258      	movs	r2, #88	; 0x58
 80056aa:	18ba      	adds	r2, r7, r2
 80056ac:	18d2      	adds	r2, r2, r3
 80056ae:	2300      	movs	r3, #0
 80056b0:	7013      	strb	r3, [r2, #0]
 80056b2:	e070      	b.n	8005796 <UART_SetConfig+0x1ca>
 80056b4:	2323      	movs	r3, #35	; 0x23
 80056b6:	2258      	movs	r2, #88	; 0x58
 80056b8:	18ba      	adds	r2, r7, r2
 80056ba:	18d2      	adds	r2, r2, r3
 80056bc:	2302      	movs	r3, #2
 80056be:	7013      	strb	r3, [r2, #0]
 80056c0:	e069      	b.n	8005796 <UART_SetConfig+0x1ca>
 80056c2:	2323      	movs	r3, #35	; 0x23
 80056c4:	2258      	movs	r2, #88	; 0x58
 80056c6:	18ba      	adds	r2, r7, r2
 80056c8:	18d2      	adds	r2, r2, r3
 80056ca:	2304      	movs	r3, #4
 80056cc:	7013      	strb	r3, [r2, #0]
 80056ce:	e062      	b.n	8005796 <UART_SetConfig+0x1ca>
 80056d0:	2323      	movs	r3, #35	; 0x23
 80056d2:	2258      	movs	r2, #88	; 0x58
 80056d4:	18ba      	adds	r2, r7, r2
 80056d6:	18d2      	adds	r2, r2, r3
 80056d8:	2308      	movs	r3, #8
 80056da:	7013      	strb	r3, [r2, #0]
 80056dc:	e05b      	b.n	8005796 <UART_SetConfig+0x1ca>
 80056de:	2323      	movs	r3, #35	; 0x23
 80056e0:	2258      	movs	r2, #88	; 0x58
 80056e2:	18ba      	adds	r2, r7, r2
 80056e4:	18d2      	adds	r2, r2, r3
 80056e6:	2310      	movs	r3, #16
 80056e8:	7013      	strb	r3, [r2, #0]
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	e053      	b.n	8005796 <UART_SetConfig+0x1ca>
 80056ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b8c      	ldr	r3, [pc, #560]	; (8005924 <UART_SetConfig+0x358>)
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d106      	bne.n	8005706 <UART_SetConfig+0x13a>
 80056f8:	2323      	movs	r3, #35	; 0x23
 80056fa:	2258      	movs	r2, #88	; 0x58
 80056fc:	18ba      	adds	r2, r7, r2
 80056fe:	18d2      	adds	r2, r2, r3
 8005700:	2300      	movs	r3, #0
 8005702:	7013      	strb	r3, [r2, #0]
 8005704:	e047      	b.n	8005796 <UART_SetConfig+0x1ca>
 8005706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b82      	ldr	r3, [pc, #520]	; (8005914 <UART_SetConfig+0x348>)
 800570c:	429a      	cmp	r2, r3
 800570e:	d13c      	bne.n	800578a <UART_SetConfig+0x1be>
 8005710:	4b83      	ldr	r3, [pc, #524]	; (8005920 <UART_SetConfig+0x354>)
 8005712:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005714:	23c0      	movs	r3, #192	; 0xc0
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	401a      	ands	r2, r3
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	429a      	cmp	r2, r3
 8005720:	d01d      	beq.n	800575e <UART_SetConfig+0x192>
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	429a      	cmp	r2, r3
 8005728:	d802      	bhi.n	8005730 <UART_SetConfig+0x164>
 800572a:	2a00      	cmp	r2, #0
 800572c:	d009      	beq.n	8005742 <UART_SetConfig+0x176>
 800572e:	e024      	b.n	800577a <UART_SetConfig+0x1ae>
 8005730:	2380      	movs	r3, #128	; 0x80
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	429a      	cmp	r2, r3
 8005736:	d00b      	beq.n	8005750 <UART_SetConfig+0x184>
 8005738:	23c0      	movs	r3, #192	; 0xc0
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	429a      	cmp	r2, r3
 800573e:	d015      	beq.n	800576c <UART_SetConfig+0x1a0>
 8005740:	e01b      	b.n	800577a <UART_SetConfig+0x1ae>
 8005742:	2323      	movs	r3, #35	; 0x23
 8005744:	2258      	movs	r2, #88	; 0x58
 8005746:	18ba      	adds	r2, r7, r2
 8005748:	18d2      	adds	r2, r2, r3
 800574a:	2300      	movs	r3, #0
 800574c:	7013      	strb	r3, [r2, #0]
 800574e:	e022      	b.n	8005796 <UART_SetConfig+0x1ca>
 8005750:	2323      	movs	r3, #35	; 0x23
 8005752:	2258      	movs	r2, #88	; 0x58
 8005754:	18ba      	adds	r2, r7, r2
 8005756:	18d2      	adds	r2, r2, r3
 8005758:	2302      	movs	r3, #2
 800575a:	7013      	strb	r3, [r2, #0]
 800575c:	e01b      	b.n	8005796 <UART_SetConfig+0x1ca>
 800575e:	2323      	movs	r3, #35	; 0x23
 8005760:	2258      	movs	r2, #88	; 0x58
 8005762:	18ba      	adds	r2, r7, r2
 8005764:	18d2      	adds	r2, r2, r3
 8005766:	2304      	movs	r3, #4
 8005768:	7013      	strb	r3, [r2, #0]
 800576a:	e014      	b.n	8005796 <UART_SetConfig+0x1ca>
 800576c:	2323      	movs	r3, #35	; 0x23
 800576e:	2258      	movs	r2, #88	; 0x58
 8005770:	18ba      	adds	r2, r7, r2
 8005772:	18d2      	adds	r2, r2, r3
 8005774:	2308      	movs	r3, #8
 8005776:	7013      	strb	r3, [r2, #0]
 8005778:	e00d      	b.n	8005796 <UART_SetConfig+0x1ca>
 800577a:	2323      	movs	r3, #35	; 0x23
 800577c:	2258      	movs	r2, #88	; 0x58
 800577e:	18ba      	adds	r2, r7, r2
 8005780:	18d2      	adds	r2, r2, r3
 8005782:	2310      	movs	r3, #16
 8005784:	7013      	strb	r3, [r2, #0]
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	e005      	b.n	8005796 <UART_SetConfig+0x1ca>
 800578a:	2323      	movs	r3, #35	; 0x23
 800578c:	2258      	movs	r2, #88	; 0x58
 800578e:	18ba      	adds	r2, r7, r2
 8005790:	18d2      	adds	r2, r2, r3
 8005792:	2310      	movs	r3, #16
 8005794:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b5e      	ldr	r3, [pc, #376]	; (8005914 <UART_SetConfig+0x348>)
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <UART_SetConfig+0x1d8>
 80057a0:	f000 fbe8 	bl	8005f74 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057a4:	2323      	movs	r3, #35	; 0x23
 80057a6:	2258      	movs	r2, #88	; 0x58
 80057a8:	4694      	mov	ip, r2
 80057aa:	44bc      	add	ip, r7
 80057ac:	4463      	add	r3, ip
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d100      	bne.n	80057b6 <UART_SetConfig+0x1ea>
 80057b4:	e05e      	b.n	8005874 <UART_SetConfig+0x2a8>
 80057b6:	dc02      	bgt.n	80057be <UART_SetConfig+0x1f2>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <UART_SetConfig+0x200>
 80057bc:	e174      	b.n	8005aa8 <UART_SetConfig+0x4dc>
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d100      	bne.n	80057c4 <UART_SetConfig+0x1f8>
 80057c2:	e0c9      	b.n	8005958 <UART_SetConfig+0x38c>
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d100      	bne.n	80057ca <UART_SetConfig+0x1fe>
 80057c8:	e11a      	b.n	8005a00 <UART_SetConfig+0x434>
 80057ca:	e16d      	b.n	8005aa8 <UART_SetConfig+0x4dc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80057cc:	f7fe fe62 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 80057d0:	0002      	movs	r2, r0
 80057d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d044      	beq.n	8005864 <UART_SetConfig+0x298>
 80057da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d03e      	beq.n	8005860 <UART_SetConfig+0x294>
 80057e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d038      	beq.n	800585c <UART_SetConfig+0x290>
 80057ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d032      	beq.n	8005858 <UART_SetConfig+0x28c>
 80057f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d02c      	beq.n	8005854 <UART_SetConfig+0x288>
 80057fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d026      	beq.n	8005850 <UART_SetConfig+0x284>
 8005802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	2b06      	cmp	r3, #6
 8005808:	d020      	beq.n	800584c <UART_SetConfig+0x280>
 800580a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	2b07      	cmp	r3, #7
 8005810:	d01a      	beq.n	8005848 <UART_SetConfig+0x27c>
 8005812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	2b08      	cmp	r3, #8
 8005818:	d014      	beq.n	8005844 <UART_SetConfig+0x278>
 800581a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	2b09      	cmp	r3, #9
 8005820:	d00e      	beq.n	8005840 <UART_SetConfig+0x274>
 8005822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	2b0a      	cmp	r3, #10
 8005828:	d008      	beq.n	800583c <UART_SetConfig+0x270>
 800582a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	2b0b      	cmp	r3, #11
 8005830:	d102      	bne.n	8005838 <UART_SetConfig+0x26c>
 8005832:	2380      	movs	r3, #128	; 0x80
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	e016      	b.n	8005866 <UART_SetConfig+0x29a>
 8005838:	2301      	movs	r3, #1
 800583a:	e014      	b.n	8005866 <UART_SetConfig+0x29a>
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	e012      	b.n	8005866 <UART_SetConfig+0x29a>
 8005840:	2340      	movs	r3, #64	; 0x40
 8005842:	e010      	b.n	8005866 <UART_SetConfig+0x29a>
 8005844:	2320      	movs	r3, #32
 8005846:	e00e      	b.n	8005866 <UART_SetConfig+0x29a>
 8005848:	2310      	movs	r3, #16
 800584a:	e00c      	b.n	8005866 <UART_SetConfig+0x29a>
 800584c:	230c      	movs	r3, #12
 800584e:	e00a      	b.n	8005866 <UART_SetConfig+0x29a>
 8005850:	230a      	movs	r3, #10
 8005852:	e008      	b.n	8005866 <UART_SetConfig+0x29a>
 8005854:	2308      	movs	r3, #8
 8005856:	e006      	b.n	8005866 <UART_SetConfig+0x29a>
 8005858:	2306      	movs	r3, #6
 800585a:	e004      	b.n	8005866 <UART_SetConfig+0x29a>
 800585c:	2304      	movs	r3, #4
 800585e:	e002      	b.n	8005866 <UART_SetConfig+0x29a>
 8005860:	2302      	movs	r3, #2
 8005862:	e000      	b.n	8005866 <UART_SetConfig+0x29a>
 8005864:	2301      	movs	r3, #1
 8005866:	0019      	movs	r1, r3
 8005868:	0010      	movs	r0, r2
 800586a:	f7fa fc4b 	bl	8000104 <__udivsi3>
 800586e:	0003      	movs	r3, r0
 8005870:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8005872:	e120      	b.n	8005ab6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	d043      	beq.n	8005904 <UART_SetConfig+0x338>
 800587c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b01      	cmp	r3, #1
 8005882:	d03d      	beq.n	8005900 <UART_SetConfig+0x334>
 8005884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	2b02      	cmp	r3, #2
 800588a:	d037      	beq.n	80058fc <UART_SetConfig+0x330>
 800588c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	2b03      	cmp	r3, #3
 8005892:	d031      	beq.n	80058f8 <UART_SetConfig+0x32c>
 8005894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	2b04      	cmp	r3, #4
 800589a:	d02b      	beq.n	80058f4 <UART_SetConfig+0x328>
 800589c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	2b05      	cmp	r3, #5
 80058a2:	d025      	beq.n	80058f0 <UART_SetConfig+0x324>
 80058a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d01f      	beq.n	80058ec <UART_SetConfig+0x320>
 80058ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	2b07      	cmp	r3, #7
 80058b2:	d019      	beq.n	80058e8 <UART_SetConfig+0x31c>
 80058b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d013      	beq.n	80058e4 <UART_SetConfig+0x318>
 80058bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b09      	cmp	r3, #9
 80058c2:	d00d      	beq.n	80058e0 <UART_SetConfig+0x314>
 80058c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b0a      	cmp	r3, #10
 80058ca:	d007      	beq.n	80058dc <UART_SetConfig+0x310>
 80058cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b0b      	cmp	r3, #11
 80058d2:	d101      	bne.n	80058d8 <UART_SetConfig+0x30c>
 80058d4:	4b14      	ldr	r3, [pc, #80]	; (8005928 <UART_SetConfig+0x35c>)
 80058d6:	e016      	b.n	8005906 <UART_SetConfig+0x33a>
 80058d8:	4b14      	ldr	r3, [pc, #80]	; (800592c <UART_SetConfig+0x360>)
 80058da:	e014      	b.n	8005906 <UART_SetConfig+0x33a>
 80058dc:	4b14      	ldr	r3, [pc, #80]	; (8005930 <UART_SetConfig+0x364>)
 80058de:	e012      	b.n	8005906 <UART_SetConfig+0x33a>
 80058e0:	4b14      	ldr	r3, [pc, #80]	; (8005934 <UART_SetConfig+0x368>)
 80058e2:	e010      	b.n	8005906 <UART_SetConfig+0x33a>
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <UART_SetConfig+0x36c>)
 80058e6:	e00e      	b.n	8005906 <UART_SetConfig+0x33a>
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <UART_SetConfig+0x370>)
 80058ea:	e00c      	b.n	8005906 <UART_SetConfig+0x33a>
 80058ec:	4b14      	ldr	r3, [pc, #80]	; (8005940 <UART_SetConfig+0x374>)
 80058ee:	e00a      	b.n	8005906 <UART_SetConfig+0x33a>
 80058f0:	4b14      	ldr	r3, [pc, #80]	; (8005944 <UART_SetConfig+0x378>)
 80058f2:	e008      	b.n	8005906 <UART_SetConfig+0x33a>
 80058f4:	4b14      	ldr	r3, [pc, #80]	; (8005948 <UART_SetConfig+0x37c>)
 80058f6:	e006      	b.n	8005906 <UART_SetConfig+0x33a>
 80058f8:	4b14      	ldr	r3, [pc, #80]	; (800594c <UART_SetConfig+0x380>)
 80058fa:	e004      	b.n	8005906 <UART_SetConfig+0x33a>
 80058fc:	4b14      	ldr	r3, [pc, #80]	; (8005950 <UART_SetConfig+0x384>)
 80058fe:	e002      	b.n	8005906 <UART_SetConfig+0x33a>
 8005900:	4b14      	ldr	r3, [pc, #80]	; (8005954 <UART_SetConfig+0x388>)
 8005902:	e000      	b.n	8005906 <UART_SetConfig+0x33a>
 8005904:	4b09      	ldr	r3, [pc, #36]	; (800592c <UART_SetConfig+0x360>)
 8005906:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8005908:	e0d5      	b.n	8005ab6 <UART_SetConfig+0x4ea>
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	cfff69f3 	.word	0xcfff69f3
 8005910:	ffffcfff 	.word	0xffffcfff
 8005914:	40008000 	.word	0x40008000
 8005918:	11fff4ff 	.word	0x11fff4ff
 800591c:	40013800 	.word	0x40013800
 8005920:	40021000 	.word	0x40021000
 8005924:	40004400 	.word	0x40004400
 8005928:	0000f424 	.word	0x0000f424
 800592c:	00f42400 	.word	0x00f42400
 8005930:	0001e848 	.word	0x0001e848
 8005934:	0003d090 	.word	0x0003d090
 8005938:	0007a120 	.word	0x0007a120
 800593c:	000f4240 	.word	0x000f4240
 8005940:	00145855 	.word	0x00145855
 8005944:	00186a00 	.word	0x00186a00
 8005948:	001e8480 	.word	0x001e8480
 800594c:	0028b0aa 	.word	0x0028b0aa
 8005950:	003d0900 	.word	0x003d0900
 8005954:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005958:	f7fe fd10 	bl	800437c <HAL_RCC_GetSysClockFreq>
 800595c:	0002      	movs	r2, r0
 800595e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2b00      	cmp	r3, #0
 8005964:	d044      	beq.n	80059f0 <UART_SetConfig+0x424>
 8005966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b01      	cmp	r3, #1
 800596c:	d03e      	beq.n	80059ec <UART_SetConfig+0x420>
 800596e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b02      	cmp	r3, #2
 8005974:	d038      	beq.n	80059e8 <UART_SetConfig+0x41c>
 8005976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b03      	cmp	r3, #3
 800597c:	d032      	beq.n	80059e4 <UART_SetConfig+0x418>
 800597e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b04      	cmp	r3, #4
 8005984:	d02c      	beq.n	80059e0 <UART_SetConfig+0x414>
 8005986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b05      	cmp	r3, #5
 800598c:	d026      	beq.n	80059dc <UART_SetConfig+0x410>
 800598e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b06      	cmp	r3, #6
 8005994:	d020      	beq.n	80059d8 <UART_SetConfig+0x40c>
 8005996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b07      	cmp	r3, #7
 800599c:	d01a      	beq.n	80059d4 <UART_SetConfig+0x408>
 800599e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d014      	beq.n	80059d0 <UART_SetConfig+0x404>
 80059a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b09      	cmp	r3, #9
 80059ac:	d00e      	beq.n	80059cc <UART_SetConfig+0x400>
 80059ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b0a      	cmp	r3, #10
 80059b4:	d008      	beq.n	80059c8 <UART_SetConfig+0x3fc>
 80059b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2b0b      	cmp	r3, #11
 80059bc:	d102      	bne.n	80059c4 <UART_SetConfig+0x3f8>
 80059be:	2380      	movs	r3, #128	; 0x80
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	e016      	b.n	80059f2 <UART_SetConfig+0x426>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e014      	b.n	80059f2 <UART_SetConfig+0x426>
 80059c8:	2380      	movs	r3, #128	; 0x80
 80059ca:	e012      	b.n	80059f2 <UART_SetConfig+0x426>
 80059cc:	2340      	movs	r3, #64	; 0x40
 80059ce:	e010      	b.n	80059f2 <UART_SetConfig+0x426>
 80059d0:	2320      	movs	r3, #32
 80059d2:	e00e      	b.n	80059f2 <UART_SetConfig+0x426>
 80059d4:	2310      	movs	r3, #16
 80059d6:	e00c      	b.n	80059f2 <UART_SetConfig+0x426>
 80059d8:	230c      	movs	r3, #12
 80059da:	e00a      	b.n	80059f2 <UART_SetConfig+0x426>
 80059dc:	230a      	movs	r3, #10
 80059de:	e008      	b.n	80059f2 <UART_SetConfig+0x426>
 80059e0:	2308      	movs	r3, #8
 80059e2:	e006      	b.n	80059f2 <UART_SetConfig+0x426>
 80059e4:	2306      	movs	r3, #6
 80059e6:	e004      	b.n	80059f2 <UART_SetConfig+0x426>
 80059e8:	2304      	movs	r3, #4
 80059ea:	e002      	b.n	80059f2 <UART_SetConfig+0x426>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e000      	b.n	80059f2 <UART_SetConfig+0x426>
 80059f0:	2301      	movs	r3, #1
 80059f2:	0019      	movs	r1, r3
 80059f4:	0010      	movs	r0, r2
 80059f6:	f7fa fb85 	bl	8000104 <__udivsi3>
 80059fa:	0003      	movs	r3, r0
 80059fc:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80059fe:	e05a      	b.n	8005ab6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d04b      	beq.n	8005aa0 <UART_SetConfig+0x4d4>
 8005a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d044      	beq.n	8005a9a <UART_SetConfig+0x4ce>
 8005a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d03d      	beq.n	8005a94 <UART_SetConfig+0x4c8>
 8005a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d037      	beq.n	8005a90 <UART_SetConfig+0x4c4>
 8005a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d030      	beq.n	8005a8a <UART_SetConfig+0x4be>
 8005a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b05      	cmp	r3, #5
 8005a2e:	d02a      	beq.n	8005a86 <UART_SetConfig+0x4ba>
 8005a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b06      	cmp	r3, #6
 8005a36:	d024      	beq.n	8005a82 <UART_SetConfig+0x4b6>
 8005a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b07      	cmp	r3, #7
 8005a3e:	d01d      	beq.n	8005a7c <UART_SetConfig+0x4b0>
 8005a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d016      	beq.n	8005a76 <UART_SetConfig+0x4aa>
 8005a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d00f      	beq.n	8005a70 <UART_SetConfig+0x4a4>
 8005a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b0a      	cmp	r3, #10
 8005a56:	d008      	beq.n	8005a6a <UART_SetConfig+0x49e>
 8005a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b0b      	cmp	r3, #11
 8005a5e:	d101      	bne.n	8005a64 <UART_SetConfig+0x498>
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	e01f      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	e01c      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a6a:	2380      	movs	r3, #128	; 0x80
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	e019      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	e016      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a76:	2380      	movs	r3, #128	; 0x80
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	e013      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	e010      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a82:	4bbf      	ldr	r3, [pc, #764]	; (8005d80 <UART_SetConfig+0x7b4>)
 8005a84:	e00e      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a86:	4bbf      	ldr	r3, [pc, #764]	; (8005d84 <UART_SetConfig+0x7b8>)
 8005a88:	e00c      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	015b      	lsls	r3, r3, #5
 8005a8e:	e009      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a90:	4bbd      	ldr	r3, [pc, #756]	; (8005d88 <UART_SetConfig+0x7bc>)
 8005a92:	e007      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a94:	2380      	movs	r3, #128	; 0x80
 8005a96:	019b      	lsls	r3, r3, #6
 8005a98:	e004      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	01db      	lsls	r3, r3, #7
 8005a9e:	e001      	b.n	8005aa4 <UART_SetConfig+0x4d8>
 8005aa0:	2380      	movs	r3, #128	; 0x80
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8005aa6:	e006      	b.n	8005ab6 <UART_SetConfig+0x4ea>
      default:
        ret = HAL_ERROR;
 8005aa8:	231b      	movs	r3, #27
 8005aaa:	2258      	movs	r2, #88	; 0x58
 8005aac:	18ba      	adds	r2, r7, r2
 8005aae:	18d2      	adds	r2, r2, r3
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	7013      	strb	r3, [r2, #0]
        break;
 8005ab4:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <UART_SetConfig+0x4f4>
 8005abc:	f000 fe14 	bl	80066e8 <UART_SetConfig+0x111c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	0013      	movs	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	189a      	adds	r2, r3, r2
 8005aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d305      	bcc.n	8005adc <UART_SetConfig+0x510>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d908      	bls.n	8005aee <UART_SetConfig+0x522>
      {
        ret = HAL_ERROR;
 8005adc:	231b      	movs	r3, #27
 8005ade:	2258      	movs	r2, #88	; 0x58
 8005ae0:	4694      	mov	ip, r2
 8005ae2:	44bc      	add	ip, r7
 8005ae4:	4463      	add	r3, ip
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	f000 fdfd 	bl	80066e8 <UART_SetConfig+0x111c>
      }
      else
      {
        switch (clocksource)
 8005aee:	2323      	movs	r3, #35	; 0x23
 8005af0:	2258      	movs	r2, #88	; 0x58
 8005af2:	4694      	mov	ip, r2
 8005af4:	44bc      	add	ip, r7
 8005af6:	4463      	add	r3, ip
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d100      	bne.n	8005b00 <UART_SetConfig+0x534>
 8005afe:	e08c      	b.n	8005c1a <UART_SetConfig+0x64e>
 8005b00:	dc02      	bgt.n	8005b08 <UART_SetConfig+0x53c>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <UART_SetConfig+0x54a>
 8005b06:	e216      	b.n	8005f36 <UART_SetConfig+0x96a>
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d100      	bne.n	8005b0e <UART_SetConfig+0x542>
 8005b0c:	e0f2      	b.n	8005cf4 <UART_SetConfig+0x728>
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d100      	bne.n	8005b14 <UART_SetConfig+0x548>
 8005b12:	e199      	b.n	8005e48 <UART_SetConfig+0x87c>
 8005b14:	e20f      	b.n	8005f36 <UART_SetConfig+0x96a>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005b16:	f7fe fcbd 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 8005b1a:	0003      	movs	r3, r0
 8005b1c:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b22:	2300      	movs	r3, #0
 8005b24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d050      	beq.n	8005bd0 <UART_SetConfig+0x604>
 8005b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d049      	beq.n	8005bca <UART_SetConfig+0x5fe>
 8005b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d042      	beq.n	8005bc4 <UART_SetConfig+0x5f8>
 8005b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d03b      	beq.n	8005bbe <UART_SetConfig+0x5f2>
 8005b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d034      	beq.n	8005bb8 <UART_SetConfig+0x5ec>
 8005b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	d02d      	beq.n	8005bb2 <UART_SetConfig+0x5e6>
 8005b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b06      	cmp	r3, #6
 8005b5c:	d026      	beq.n	8005bac <UART_SetConfig+0x5e0>
 8005b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2b07      	cmp	r3, #7
 8005b64:	d01f      	beq.n	8005ba6 <UART_SetConfig+0x5da>
 8005b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d018      	beq.n	8005ba0 <UART_SetConfig+0x5d4>
 8005b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b09      	cmp	r3, #9
 8005b74:	d011      	beq.n	8005b9a <UART_SetConfig+0x5ce>
 8005b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b0a      	cmp	r3, #10
 8005b7c:	d00a      	beq.n	8005b94 <UART_SetConfig+0x5c8>
 8005b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b0b      	cmp	r3, #11
 8005b84:	d103      	bne.n	8005b8e <UART_SetConfig+0x5c2>
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	2400      	movs	r4, #0
 8005b8c:	e022      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	2400      	movs	r4, #0
 8005b92:	e01f      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	2400      	movs	r4, #0
 8005b98:	e01c      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005b9a:	2340      	movs	r3, #64	; 0x40
 8005b9c:	2400      	movs	r4, #0
 8005b9e:	e019      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	2400      	movs	r4, #0
 8005ba4:	e016      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005ba6:	2310      	movs	r3, #16
 8005ba8:	2400      	movs	r4, #0
 8005baa:	e013      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005bac:	230c      	movs	r3, #12
 8005bae:	2400      	movs	r4, #0
 8005bb0:	e010      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005bb2:	230a      	movs	r3, #10
 8005bb4:	2400      	movs	r4, #0
 8005bb6:	e00d      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	2400      	movs	r4, #0
 8005bbc:	e00a      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005bbe:	2306      	movs	r3, #6
 8005bc0:	2400      	movs	r4, #0
 8005bc2:	e007      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	2400      	movs	r4, #0
 8005bc8:	e004      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	2400      	movs	r4, #0
 8005bce:	e001      	b.n	8005bd4 <UART_SetConfig+0x608>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	2400      	movs	r4, #0
 8005bd4:	001a      	movs	r2, r3
 8005bd6:	0023      	movs	r3, r4
 8005bd8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005bda:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005bdc:	f7fa fc42 	bl	8000464 <__aeabi_uldivmod>
 8005be0:	0003      	movs	r3, r0
 8005be2:	000c      	movs	r4, r1
 8005be4:	0e1a      	lsrs	r2, r3, #24
 8005be6:	0226      	lsls	r6, r4, #8
 8005be8:	4316      	orrs	r6, r2
 8005bea:	021d      	lsls	r5, r3, #8
 8005bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8005bf8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005bfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bfc:	1940      	adds	r0, r0, r5
 8005bfe:	4171      	adcs	r1, r6
 8005c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c06:	2300      	movs	r3, #0
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0e:	f7fa fc29 	bl	8000464 <__aeabi_uldivmod>
 8005c12:	0003      	movs	r3, r0
 8005c14:	000c      	movs	r4, r1
 8005c16:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8005c18:	e195      	b.n	8005f46 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d04f      	beq.n	8005cc2 <UART_SetConfig+0x6f6>
 8005c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d048      	beq.n	8005cbc <UART_SetConfig+0x6f0>
 8005c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d041      	beq.n	8005cb6 <UART_SetConfig+0x6ea>
 8005c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d03a      	beq.n	8005cb0 <UART_SetConfig+0x6e4>
 8005c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d033      	beq.n	8005caa <UART_SetConfig+0x6de>
 8005c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d02c      	beq.n	8005ca4 <UART_SetConfig+0x6d8>
 8005c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	2b06      	cmp	r3, #6
 8005c50:	d025      	beq.n	8005c9e <UART_SetConfig+0x6d2>
 8005c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2b07      	cmp	r3, #7
 8005c58:	d01e      	beq.n	8005c98 <UART_SetConfig+0x6cc>
 8005c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d017      	beq.n	8005c92 <UART_SetConfig+0x6c6>
 8005c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	d010      	beq.n	8005c8c <UART_SetConfig+0x6c0>
 8005c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2b0a      	cmp	r3, #10
 8005c70:	d009      	beq.n	8005c86 <UART_SetConfig+0x6ba>
 8005c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	2b0b      	cmp	r3, #11
 8005c78:	d102      	bne.n	8005c80 <UART_SetConfig+0x6b4>
 8005c7a:	4b44      	ldr	r3, [pc, #272]	; (8005d8c <UART_SetConfig+0x7c0>)
 8005c7c:	2400      	movs	r4, #0
 8005c7e:	e022      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005c80:	4b43      	ldr	r3, [pc, #268]	; (8005d90 <UART_SetConfig+0x7c4>)
 8005c82:	2400      	movs	r4, #0
 8005c84:	e01f      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005c86:	4b43      	ldr	r3, [pc, #268]	; (8005d94 <UART_SetConfig+0x7c8>)
 8005c88:	2400      	movs	r4, #0
 8005c8a:	e01c      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005c8c:	4b42      	ldr	r3, [pc, #264]	; (8005d98 <UART_SetConfig+0x7cc>)
 8005c8e:	2400      	movs	r4, #0
 8005c90:	e019      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005c92:	4b42      	ldr	r3, [pc, #264]	; (8005d9c <UART_SetConfig+0x7d0>)
 8005c94:	2400      	movs	r4, #0
 8005c96:	e016      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005c98:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <UART_SetConfig+0x7d4>)
 8005c9a:	2400      	movs	r4, #0
 8005c9c:	e013      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005c9e:	4b41      	ldr	r3, [pc, #260]	; (8005da4 <UART_SetConfig+0x7d8>)
 8005ca0:	2400      	movs	r4, #0
 8005ca2:	e010      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005ca4:	4b40      	ldr	r3, [pc, #256]	; (8005da8 <UART_SetConfig+0x7dc>)
 8005ca6:	2400      	movs	r4, #0
 8005ca8:	e00d      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005caa:	4b40      	ldr	r3, [pc, #256]	; (8005dac <UART_SetConfig+0x7e0>)
 8005cac:	2400      	movs	r4, #0
 8005cae:	e00a      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005cb0:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <UART_SetConfig+0x7e4>)
 8005cb2:	2400      	movs	r4, #0
 8005cb4:	e007      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005cb6:	4b3f      	ldr	r3, [pc, #252]	; (8005db4 <UART_SetConfig+0x7e8>)
 8005cb8:	2400      	movs	r4, #0
 8005cba:	e004      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005cbc:	4b3e      	ldr	r3, [pc, #248]	; (8005db8 <UART_SetConfig+0x7ec>)
 8005cbe:	2400      	movs	r4, #0
 8005cc0:	e001      	b.n	8005cc6 <UART_SetConfig+0x6fa>
 8005cc2:	4b33      	ldr	r3, [pc, #204]	; (8005d90 <UART_SetConfig+0x7c4>)
 8005cc4:	2400      	movs	r4, #0
 8005cc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cc8:	6852      	ldr	r2, [r2, #4]
 8005cca:	0852      	lsrs	r2, r2, #1
 8005ccc:	633a      	str	r2, [r7, #48]	; 0x30
 8005cce:	2200      	movs	r2, #0
 8005cd0:	637a      	str	r2, [r7, #52]	; 0x34
 8005cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cd6:	18c0      	adds	r0, r0, r3
 8005cd8:	4161      	adcs	r1, r4
 8005cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	f7fa fbbc 	bl	8000464 <__aeabi_uldivmod>
 8005cec:	0003      	movs	r3, r0
 8005cee:	000c      	movs	r4, r1
 8005cf0:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8005cf2:	e128      	b.n	8005f46 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005cf4:	f7fe fb42 	bl	800437c <HAL_RCC_GetSysClockFreq>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cfe:	623b      	str	r3, [r7, #32]
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
 8005d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d100      	bne.n	8005d0e <UART_SetConfig+0x742>
 8005d0c:	e071      	b.n	8005df2 <UART_SetConfig+0x826>
 8005d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d100      	bne.n	8005d18 <UART_SetConfig+0x74c>
 8005d16:	e069      	b.n	8005dec <UART_SetConfig+0x820>
 8005d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d100      	bne.n	8005d22 <UART_SetConfig+0x756>
 8005d20:	e061      	b.n	8005de6 <UART_SetConfig+0x81a>
 8005d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d05a      	beq.n	8005de0 <UART_SetConfig+0x814>
 8005d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d053      	beq.n	8005dda <UART_SetConfig+0x80e>
 8005d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d04c      	beq.n	8005dd4 <UART_SetConfig+0x808>
 8005d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	2b06      	cmp	r3, #6
 8005d40:	d045      	beq.n	8005dce <UART_SetConfig+0x802>
 8005d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b07      	cmp	r3, #7
 8005d48:	d03e      	beq.n	8005dc8 <UART_SetConfig+0x7fc>
 8005d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d037      	beq.n	8005dc2 <UART_SetConfig+0x7f6>
 8005d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b09      	cmp	r3, #9
 8005d58:	d030      	beq.n	8005dbc <UART_SetConfig+0x7f0>
 8005d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b0a      	cmp	r3, #10
 8005d60:	d00a      	beq.n	8005d78 <UART_SetConfig+0x7ac>
 8005d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b0b      	cmp	r3, #11
 8005d68:	d103      	bne.n	8005d72 <UART_SetConfig+0x7a6>
 8005d6a:	2380      	movs	r3, #128	; 0x80
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	2400      	movs	r4, #0
 8005d70:	e041      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005d72:	2301      	movs	r3, #1
 8005d74:	2400      	movs	r4, #0
 8005d76:	e03e      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005d78:	2380      	movs	r3, #128	; 0x80
 8005d7a:	2400      	movs	r4, #0
 8005d7c:	e03b      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	00000aaa 	.word	0x00000aaa
 8005d84:	00000ccc 	.word	0x00000ccc
 8005d88:	00001555 	.word	0x00001555
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	f4240000 	.word	0xf4240000
 8005d94:	01e84800 	.word	0x01e84800
 8005d98:	03d09000 	.word	0x03d09000
 8005d9c:	07a12000 	.word	0x07a12000
 8005da0:	0f424000 	.word	0x0f424000
 8005da4:	14585500 	.word	0x14585500
 8005da8:	186a0000 	.word	0x186a0000
 8005dac:	1e848000 	.word	0x1e848000
 8005db0:	28b0aa00 	.word	0x28b0aa00
 8005db4:	3d090000 	.word	0x3d090000
 8005db8:	7a120000 	.word	0x7a120000
 8005dbc:	2340      	movs	r3, #64	; 0x40
 8005dbe:	2400      	movs	r4, #0
 8005dc0:	e019      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005dc2:	2320      	movs	r3, #32
 8005dc4:	2400      	movs	r4, #0
 8005dc6:	e016      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	2400      	movs	r4, #0
 8005dcc:	e013      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005dce:	230c      	movs	r3, #12
 8005dd0:	2400      	movs	r4, #0
 8005dd2:	e010      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005dd4:	230a      	movs	r3, #10
 8005dd6:	2400      	movs	r4, #0
 8005dd8:	e00d      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005dda:	2308      	movs	r3, #8
 8005ddc:	2400      	movs	r4, #0
 8005dde:	e00a      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005de0:	2306      	movs	r3, #6
 8005de2:	2400      	movs	r4, #0
 8005de4:	e007      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005de6:	2304      	movs	r3, #4
 8005de8:	2400      	movs	r4, #0
 8005dea:	e004      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005dec:	2302      	movs	r3, #2
 8005dee:	2400      	movs	r4, #0
 8005df0:	e001      	b.n	8005df6 <UART_SetConfig+0x82a>
 8005df2:	2301      	movs	r3, #1
 8005df4:	2400      	movs	r4, #0
 8005df6:	001a      	movs	r2, r3
 8005df8:	0023      	movs	r3, r4
 8005dfa:	6a38      	ldr	r0, [r7, #32]
 8005dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dfe:	f7fa fb31 	bl	8000464 <__aeabi_uldivmod>
 8005e02:	0003      	movs	r3, r0
 8005e04:	000c      	movs	r4, r1
 8005e06:	0e1a      	lsrs	r2, r3, #24
 8005e08:	0221      	lsls	r1, r4, #8
 8005e0a:	6579      	str	r1, [r7, #84]	; 0x54
 8005e0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e0e:	4311      	orrs	r1, r2
 8005e10:	6579      	str	r1, [r7, #84]	; 0x54
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	653b      	str	r3, [r7, #80]	; 0x50
 8005e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005e24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	69fc      	ldr	r4, [r7, #28]
 8005e2a:	18c0      	adds	r0, r0, r3
 8005e2c:	4161      	adcs	r1, r4
 8005e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f7fa fb12 	bl	8000464 <__aeabi_uldivmod>
 8005e40:	0003      	movs	r3, r0
 8005e42:	000c      	movs	r4, r1
 8005e44:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8005e46:	e07e      	b.n	8005f46 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d058      	beq.n	8005f02 <UART_SetConfig+0x936>
 8005e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d050      	beq.n	8005efa <UART_SetConfig+0x92e>
 8005e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d048      	beq.n	8005ef2 <UART_SetConfig+0x926>
 8005e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d041      	beq.n	8005eec <UART_SetConfig+0x920>
 8005e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d039      	beq.n	8005ee4 <UART_SetConfig+0x918>
 8005e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	2b05      	cmp	r3, #5
 8005e76:	d032      	beq.n	8005ede <UART_SetConfig+0x912>
 8005e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	2b06      	cmp	r3, #6
 8005e7e:	d02b      	beq.n	8005ed8 <UART_SetConfig+0x90c>
 8005e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	2b07      	cmp	r3, #7
 8005e86:	d023      	beq.n	8005ed0 <UART_SetConfig+0x904>
 8005e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d01b      	beq.n	8005ec8 <UART_SetConfig+0x8fc>
 8005e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d013      	beq.n	8005ec0 <UART_SetConfig+0x8f4>
 8005e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	2b0a      	cmp	r3, #10
 8005e9e:	d00b      	beq.n	8005eb8 <UART_SetConfig+0x8ec>
 8005ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	2b0b      	cmp	r3, #11
 8005ea6:	d103      	bne.n	8005eb0 <UART_SetConfig+0x8e4>
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	2400      	movs	r4, #0
 8005eae:	e02b      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	041b      	lsls	r3, r3, #16
 8005eb4:	2400      	movs	r4, #0
 8005eb6:	e027      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005eb8:	2380      	movs	r3, #128	; 0x80
 8005eba:	025b      	lsls	r3, r3, #9
 8005ebc:	2400      	movs	r4, #0
 8005ebe:	e023      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005ec0:	2380      	movs	r3, #128	; 0x80
 8005ec2:	029b      	lsls	r3, r3, #10
 8005ec4:	2400      	movs	r4, #0
 8005ec6:	e01f      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	02db      	lsls	r3, r3, #11
 8005ecc:	2400      	movs	r4, #0
 8005ece:	e01b      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	031b      	lsls	r3, r3, #12
 8005ed4:	2400      	movs	r4, #0
 8005ed6:	e017      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005ed8:	4bb7      	ldr	r3, [pc, #732]	; (80061b8 <UART_SetConfig+0xbec>)
 8005eda:	2400      	movs	r4, #0
 8005edc:	e014      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005ede:	4bb7      	ldr	r3, [pc, #732]	; (80061bc <UART_SetConfig+0xbf0>)
 8005ee0:	2400      	movs	r4, #0
 8005ee2:	e011      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	035b      	lsls	r3, r3, #13
 8005ee8:	2400      	movs	r4, #0
 8005eea:	e00d      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005eec:	4bb4      	ldr	r3, [pc, #720]	; (80061c0 <UART_SetConfig+0xbf4>)
 8005eee:	2400      	movs	r4, #0
 8005ef0:	e00a      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	039b      	lsls	r3, r3, #14
 8005ef6:	2400      	movs	r4, #0
 8005ef8:	e006      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005efa:	2380      	movs	r3, #128	; 0x80
 8005efc:	03db      	lsls	r3, r3, #15
 8005efe:	2400      	movs	r4, #0
 8005f00:	e002      	b.n	8005f08 <UART_SetConfig+0x93c>
 8005f02:	2380      	movs	r3, #128	; 0x80
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	2400      	movs	r4, #0
 8005f08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f0a:	6852      	ldr	r2, [r2, #4]
 8005f0c:	0852      	lsrs	r2, r2, #1
 8005f0e:	60ba      	str	r2, [r7, #8]
 8005f10:	2200      	movs	r2, #0
 8005f12:	60fa      	str	r2, [r7, #12]
 8005f14:	68b8      	ldr	r0, [r7, #8]
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	18c0      	adds	r0, r0, r3
 8005f1a:	4161      	adcs	r1, r4
 8005f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f7fa fa9b 	bl	8000464 <__aeabi_uldivmod>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	000c      	movs	r4, r1
 8005f32:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8005f34:	e007      	b.n	8005f46 <UART_SetConfig+0x97a>
          default:
            ret = HAL_ERROR;
 8005f36:	231b      	movs	r3, #27
 8005f38:	2258      	movs	r2, #88	; 0x58
 8005f3a:	4694      	mov	ip, r2
 8005f3c:	44bc      	add	ip, r7
 8005f3e:	4463      	add	r3, ip
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
            break;
 8005f44:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f48:	4a9e      	ldr	r2, [pc, #632]	; (80061c4 <UART_SetConfig+0xbf8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d909      	bls.n	8005f62 <UART_SetConfig+0x996>
 8005f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f50:	4a9d      	ldr	r2, [pc, #628]	; (80061c8 <UART_SetConfig+0xbfc>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d805      	bhi.n	8005f62 <UART_SetConfig+0x996>
        {
          huart->Instance->BRR = usartdiv;
 8005f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f5c:	60da      	str	r2, [r3, #12]
 8005f5e:	f000 fbc3 	bl	80066e8 <UART_SetConfig+0x111c>
        }
        else
        {
          ret = HAL_ERROR;
 8005f62:	231b      	movs	r3, #27
 8005f64:	2258      	movs	r2, #88	; 0x58
 8005f66:	4694      	mov	ip, r2
 8005f68:	44bc      	add	ip, r7
 8005f6a:	4463      	add	r3, ip
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	f000 fbba 	bl	80066e8 <UART_SetConfig+0x111c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	2380      	movs	r3, #128	; 0x80
 8005f7a:	021b      	lsls	r3, r3, #8
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d000      	beq.n	8005f82 <UART_SetConfig+0x9b6>
 8005f80:	e1e6      	b.n	8006350 <UART_SetConfig+0xd84>
  {
    switch (clocksource)
 8005f82:	2323      	movs	r3, #35	; 0x23
 8005f84:	2258      	movs	r2, #88	; 0x58
 8005f86:	4694      	mov	ip, r2
 8005f88:	44bc      	add	ip, r7
 8005f8a:	4463      	add	r3, ip
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d100      	bne.n	8005f94 <UART_SetConfig+0x9c8>
 8005f92:	e06c      	b.n	800606e <UART_SetConfig+0xaa2>
 8005f94:	dc02      	bgt.n	8005f9c <UART_SetConfig+0x9d0>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <UART_SetConfig+0x9de>
 8005f9a:	e1a5      	b.n	80062e8 <UART_SetConfig+0xd1c>
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d100      	bne.n	8005fa2 <UART_SetConfig+0x9d6>
 8005fa0:	e0bc      	b.n	800611c <UART_SetConfig+0xb50>
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d100      	bne.n	8005fa8 <UART_SetConfig+0x9dc>
 8005fa6:	e13e      	b.n	8006226 <UART_SetConfig+0xc5a>
 8005fa8:	e19e      	b.n	80062e8 <UART_SetConfig+0xd1c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005faa:	f7fe fa73 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d044      	beq.n	8006044 <UART_SetConfig+0xa78>
 8005fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d03e      	beq.n	8006040 <UART_SetConfig+0xa74>
 8005fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d038      	beq.n	800603c <UART_SetConfig+0xa70>
 8005fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d032      	beq.n	8006038 <UART_SetConfig+0xa6c>
 8005fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d02c      	beq.n	8006034 <UART_SetConfig+0xa68>
 8005fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d026      	beq.n	8006030 <UART_SetConfig+0xa64>
 8005fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	2b06      	cmp	r3, #6
 8005fe8:	d020      	beq.n	800602c <UART_SetConfig+0xa60>
 8005fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	2b07      	cmp	r3, #7
 8005ff0:	d01a      	beq.n	8006028 <UART_SetConfig+0xa5c>
 8005ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d014      	beq.n	8006024 <UART_SetConfig+0xa58>
 8005ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	2b09      	cmp	r3, #9
 8006000:	d00e      	beq.n	8006020 <UART_SetConfig+0xa54>
 8006002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	2b0a      	cmp	r3, #10
 8006008:	d008      	beq.n	800601c <UART_SetConfig+0xa50>
 800600a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b0b      	cmp	r3, #11
 8006010:	d102      	bne.n	8006018 <UART_SetConfig+0xa4c>
 8006012:	2380      	movs	r3, #128	; 0x80
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	e016      	b.n	8006046 <UART_SetConfig+0xa7a>
 8006018:	2301      	movs	r3, #1
 800601a:	e014      	b.n	8006046 <UART_SetConfig+0xa7a>
 800601c:	2380      	movs	r3, #128	; 0x80
 800601e:	e012      	b.n	8006046 <UART_SetConfig+0xa7a>
 8006020:	2340      	movs	r3, #64	; 0x40
 8006022:	e010      	b.n	8006046 <UART_SetConfig+0xa7a>
 8006024:	2320      	movs	r3, #32
 8006026:	e00e      	b.n	8006046 <UART_SetConfig+0xa7a>
 8006028:	2310      	movs	r3, #16
 800602a:	e00c      	b.n	8006046 <UART_SetConfig+0xa7a>
 800602c:	230c      	movs	r3, #12
 800602e:	e00a      	b.n	8006046 <UART_SetConfig+0xa7a>
 8006030:	230a      	movs	r3, #10
 8006032:	e008      	b.n	8006046 <UART_SetConfig+0xa7a>
 8006034:	2308      	movs	r3, #8
 8006036:	e006      	b.n	8006046 <UART_SetConfig+0xa7a>
 8006038:	2306      	movs	r3, #6
 800603a:	e004      	b.n	8006046 <UART_SetConfig+0xa7a>
 800603c:	2304      	movs	r3, #4
 800603e:	e002      	b.n	8006046 <UART_SetConfig+0xa7a>
 8006040:	2302      	movs	r3, #2
 8006042:	e000      	b.n	8006046 <UART_SetConfig+0xa7a>
 8006044:	2301      	movs	r3, #1
 8006046:	0019      	movs	r1, r3
 8006048:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800604a:	f7fa f85b 	bl	8000104 <__udivsi3>
 800604e:	0003      	movs	r3, r0
 8006050:	005a      	lsls	r2, r3, #1
 8006052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	18d2      	adds	r2, r2, r3
 800605a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	0019      	movs	r1, r3
 8006060:	0010      	movs	r0, r2
 8006062:	f7fa f84f 	bl	8000104 <__udivsi3>
 8006066:	0003      	movs	r3, r0
 8006068:	b29b      	uxth	r3, r3
 800606a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800606c:	e144      	b.n	80062f8 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b00      	cmp	r3, #0
 8006074:	d043      	beq.n	80060fe <UART_SetConfig+0xb32>
 8006076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b01      	cmp	r3, #1
 800607c:	d03d      	beq.n	80060fa <UART_SetConfig+0xb2e>
 800607e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	2b02      	cmp	r3, #2
 8006084:	d037      	beq.n	80060f6 <UART_SetConfig+0xb2a>
 8006086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	2b03      	cmp	r3, #3
 800608c:	d031      	beq.n	80060f2 <UART_SetConfig+0xb26>
 800608e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	2b04      	cmp	r3, #4
 8006094:	d02b      	beq.n	80060ee <UART_SetConfig+0xb22>
 8006096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	2b05      	cmp	r3, #5
 800609c:	d025      	beq.n	80060ea <UART_SetConfig+0xb1e>
 800609e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	2b06      	cmp	r3, #6
 80060a4:	d01f      	beq.n	80060e6 <UART_SetConfig+0xb1a>
 80060a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b07      	cmp	r3, #7
 80060ac:	d019      	beq.n	80060e2 <UART_SetConfig+0xb16>
 80060ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d013      	beq.n	80060de <UART_SetConfig+0xb12>
 80060b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	2b09      	cmp	r3, #9
 80060bc:	d00d      	beq.n	80060da <UART_SetConfig+0xb0e>
 80060be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2b0a      	cmp	r3, #10
 80060c4:	d007      	beq.n	80060d6 <UART_SetConfig+0xb0a>
 80060c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	2b0b      	cmp	r3, #11
 80060cc:	d101      	bne.n	80060d2 <UART_SetConfig+0xb06>
 80060ce:	4b3f      	ldr	r3, [pc, #252]	; (80061cc <UART_SetConfig+0xc00>)
 80060d0:	e016      	b.n	8006100 <UART_SetConfig+0xb34>
 80060d2:	4b3f      	ldr	r3, [pc, #252]	; (80061d0 <UART_SetConfig+0xc04>)
 80060d4:	e014      	b.n	8006100 <UART_SetConfig+0xb34>
 80060d6:	4b3f      	ldr	r3, [pc, #252]	; (80061d4 <UART_SetConfig+0xc08>)
 80060d8:	e012      	b.n	8006100 <UART_SetConfig+0xb34>
 80060da:	4b3f      	ldr	r3, [pc, #252]	; (80061d8 <UART_SetConfig+0xc0c>)
 80060dc:	e010      	b.n	8006100 <UART_SetConfig+0xb34>
 80060de:	4b3f      	ldr	r3, [pc, #252]	; (80061dc <UART_SetConfig+0xc10>)
 80060e0:	e00e      	b.n	8006100 <UART_SetConfig+0xb34>
 80060e2:	4b3f      	ldr	r3, [pc, #252]	; (80061e0 <UART_SetConfig+0xc14>)
 80060e4:	e00c      	b.n	8006100 <UART_SetConfig+0xb34>
 80060e6:	4b3f      	ldr	r3, [pc, #252]	; (80061e4 <UART_SetConfig+0xc18>)
 80060e8:	e00a      	b.n	8006100 <UART_SetConfig+0xb34>
 80060ea:	4b3f      	ldr	r3, [pc, #252]	; (80061e8 <UART_SetConfig+0xc1c>)
 80060ec:	e008      	b.n	8006100 <UART_SetConfig+0xb34>
 80060ee:	4b3f      	ldr	r3, [pc, #252]	; (80061ec <UART_SetConfig+0xc20>)
 80060f0:	e006      	b.n	8006100 <UART_SetConfig+0xb34>
 80060f2:	4b3f      	ldr	r3, [pc, #252]	; (80061f0 <UART_SetConfig+0xc24>)
 80060f4:	e004      	b.n	8006100 <UART_SetConfig+0xb34>
 80060f6:	4b3f      	ldr	r3, [pc, #252]	; (80061f4 <UART_SetConfig+0xc28>)
 80060f8:	e002      	b.n	8006100 <UART_SetConfig+0xb34>
 80060fa:	4b3f      	ldr	r3, [pc, #252]	; (80061f8 <UART_SetConfig+0xc2c>)
 80060fc:	e000      	b.n	8006100 <UART_SetConfig+0xb34>
 80060fe:	4b34      	ldr	r3, [pc, #208]	; (80061d0 <UART_SetConfig+0xc04>)
 8006100:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006102:	6852      	ldr	r2, [r2, #4]
 8006104:	0852      	lsrs	r2, r2, #1
 8006106:	189a      	adds	r2, r3, r2
 8006108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	0019      	movs	r1, r3
 800610e:	0010      	movs	r0, r2
 8006110:	f7f9 fff8 	bl	8000104 <__udivsi3>
 8006114:	0003      	movs	r3, r0
 8006116:	b29b      	uxth	r3, r3
 8006118:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800611a:	e0ed      	b.n	80062f8 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611c:	f7fe f92e 	bl	800437c <HAL_RCC_GetSysClockFreq>
 8006120:	0003      	movs	r3, r0
 8006122:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	d100      	bne.n	800612e <UART_SetConfig+0xb62>
 800612c:	e066      	b.n	80061fc <UART_SetConfig+0xc30>
 800612e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	2b01      	cmp	r3, #1
 8006134:	d03e      	beq.n	80061b4 <UART_SetConfig+0xbe8>
 8006136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	2b02      	cmp	r3, #2
 800613c:	d038      	beq.n	80061b0 <UART_SetConfig+0xbe4>
 800613e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	2b03      	cmp	r3, #3
 8006144:	d032      	beq.n	80061ac <UART_SetConfig+0xbe0>
 8006146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	2b04      	cmp	r3, #4
 800614c:	d02c      	beq.n	80061a8 <UART_SetConfig+0xbdc>
 800614e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	2b05      	cmp	r3, #5
 8006154:	d026      	beq.n	80061a4 <UART_SetConfig+0xbd8>
 8006156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	2b06      	cmp	r3, #6
 800615c:	d020      	beq.n	80061a0 <UART_SetConfig+0xbd4>
 800615e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2b07      	cmp	r3, #7
 8006164:	d01a      	beq.n	800619c <UART_SetConfig+0xbd0>
 8006166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	2b08      	cmp	r3, #8
 800616c:	d014      	beq.n	8006198 <UART_SetConfig+0xbcc>
 800616e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b09      	cmp	r3, #9
 8006174:	d00e      	beq.n	8006194 <UART_SetConfig+0xbc8>
 8006176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	2b0a      	cmp	r3, #10
 800617c:	d008      	beq.n	8006190 <UART_SetConfig+0xbc4>
 800617e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	2b0b      	cmp	r3, #11
 8006184:	d102      	bne.n	800618c <UART_SetConfig+0xbc0>
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	e038      	b.n	80061fe <UART_SetConfig+0xc32>
 800618c:	2301      	movs	r3, #1
 800618e:	e036      	b.n	80061fe <UART_SetConfig+0xc32>
 8006190:	2380      	movs	r3, #128	; 0x80
 8006192:	e034      	b.n	80061fe <UART_SetConfig+0xc32>
 8006194:	2340      	movs	r3, #64	; 0x40
 8006196:	e032      	b.n	80061fe <UART_SetConfig+0xc32>
 8006198:	2320      	movs	r3, #32
 800619a:	e030      	b.n	80061fe <UART_SetConfig+0xc32>
 800619c:	2310      	movs	r3, #16
 800619e:	e02e      	b.n	80061fe <UART_SetConfig+0xc32>
 80061a0:	230c      	movs	r3, #12
 80061a2:	e02c      	b.n	80061fe <UART_SetConfig+0xc32>
 80061a4:	230a      	movs	r3, #10
 80061a6:	e02a      	b.n	80061fe <UART_SetConfig+0xc32>
 80061a8:	2308      	movs	r3, #8
 80061aa:	e028      	b.n	80061fe <UART_SetConfig+0xc32>
 80061ac:	2306      	movs	r3, #6
 80061ae:	e026      	b.n	80061fe <UART_SetConfig+0xc32>
 80061b0:	2304      	movs	r3, #4
 80061b2:	e024      	b.n	80061fe <UART_SetConfig+0xc32>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e022      	b.n	80061fe <UART_SetConfig+0xc32>
 80061b8:	000aaa00 	.word	0x000aaa00
 80061bc:	000ccc00 	.word	0x000ccc00
 80061c0:	00155500 	.word	0x00155500
 80061c4:	000002ff 	.word	0x000002ff
 80061c8:	000fffff 	.word	0x000fffff
 80061cc:	0001e848 	.word	0x0001e848
 80061d0:	01e84800 	.word	0x01e84800
 80061d4:	0003d090 	.word	0x0003d090
 80061d8:	0007a120 	.word	0x0007a120
 80061dc:	000f4240 	.word	0x000f4240
 80061e0:	001e8480 	.word	0x001e8480
 80061e4:	0028b0aa 	.word	0x0028b0aa
 80061e8:	0030d400 	.word	0x0030d400
 80061ec:	003d0900 	.word	0x003d0900
 80061f0:	00516154 	.word	0x00516154
 80061f4:	007a1200 	.word	0x007a1200
 80061f8:	00f42400 	.word	0x00f42400
 80061fc:	2301      	movs	r3, #1
 80061fe:	0019      	movs	r1, r3
 8006200:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006202:	f7f9 ff7f 	bl	8000104 <__udivsi3>
 8006206:	0003      	movs	r3, r0
 8006208:	005a      	lsls	r2, r3, #1
 800620a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	18d2      	adds	r2, r2, r3
 8006212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	0019      	movs	r1, r3
 8006218:	0010      	movs	r0, r2
 800621a:	f7f9 ff73 	bl	8000104 <__udivsi3>
 800621e:	0003      	movs	r3, r0
 8006220:	b29b      	uxth	r3, r3
 8006222:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8006224:	e068      	b.n	80062f8 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	2b00      	cmp	r3, #0
 800622c:	d04c      	beq.n	80062c8 <UART_SetConfig+0xcfc>
 800622e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	2b01      	cmp	r3, #1
 8006234:	d045      	beq.n	80062c2 <UART_SetConfig+0xcf6>
 8006236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	2b02      	cmp	r3, #2
 800623c:	d03e      	beq.n	80062bc <UART_SetConfig+0xcf0>
 800623e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	2b03      	cmp	r3, #3
 8006244:	d038      	beq.n	80062b8 <UART_SetConfig+0xcec>
 8006246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	2b04      	cmp	r3, #4
 800624c:	d031      	beq.n	80062b2 <UART_SetConfig+0xce6>
 800624e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	2b05      	cmp	r3, #5
 8006254:	d02b      	beq.n	80062ae <UART_SetConfig+0xce2>
 8006256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2b06      	cmp	r3, #6
 800625c:	d025      	beq.n	80062aa <UART_SetConfig+0xcde>
 800625e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	2b07      	cmp	r3, #7
 8006264:	d01e      	beq.n	80062a4 <UART_SetConfig+0xcd8>
 8006266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	2b08      	cmp	r3, #8
 800626c:	d017      	beq.n	800629e <UART_SetConfig+0xcd2>
 800626e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	2b09      	cmp	r3, #9
 8006274:	d010      	beq.n	8006298 <UART_SetConfig+0xccc>
 8006276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	2b0a      	cmp	r3, #10
 800627c:	d009      	beq.n	8006292 <UART_SetConfig+0xcc6>
 800627e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2b0b      	cmp	r3, #11
 8006284:	d102      	bne.n	800628c <UART_SetConfig+0xcc0>
 8006286:	2380      	movs	r3, #128	; 0x80
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	e01f      	b.n	80062cc <UART_SetConfig+0xd00>
 800628c:	2380      	movs	r3, #128	; 0x80
 800628e:	025b      	lsls	r3, r3, #9
 8006290:	e01c      	b.n	80062cc <UART_SetConfig+0xd00>
 8006292:	2380      	movs	r3, #128	; 0x80
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	e019      	b.n	80062cc <UART_SetConfig+0xd00>
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	e016      	b.n	80062cc <UART_SetConfig+0xd00>
 800629e:	2380      	movs	r3, #128	; 0x80
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	e013      	b.n	80062cc <UART_SetConfig+0xd00>
 80062a4:	2380      	movs	r3, #128	; 0x80
 80062a6:	015b      	lsls	r3, r3, #5
 80062a8:	e010      	b.n	80062cc <UART_SetConfig+0xd00>
 80062aa:	4bb7      	ldr	r3, [pc, #732]	; (8006588 <UART_SetConfig+0xfbc>)
 80062ac:	e00e      	b.n	80062cc <UART_SetConfig+0xd00>
 80062ae:	4bb7      	ldr	r3, [pc, #732]	; (800658c <UART_SetConfig+0xfc0>)
 80062b0:	e00c      	b.n	80062cc <UART_SetConfig+0xd00>
 80062b2:	2380      	movs	r3, #128	; 0x80
 80062b4:	019b      	lsls	r3, r3, #6
 80062b6:	e009      	b.n	80062cc <UART_SetConfig+0xd00>
 80062b8:	4bb5      	ldr	r3, [pc, #724]	; (8006590 <UART_SetConfig+0xfc4>)
 80062ba:	e007      	b.n	80062cc <UART_SetConfig+0xd00>
 80062bc:	2380      	movs	r3, #128	; 0x80
 80062be:	01db      	lsls	r3, r3, #7
 80062c0:	e004      	b.n	80062cc <UART_SetConfig+0xd00>
 80062c2:	2380      	movs	r3, #128	; 0x80
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	e001      	b.n	80062cc <UART_SetConfig+0xd00>
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	025b      	lsls	r3, r3, #9
 80062cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062ce:	6852      	ldr	r2, [r2, #4]
 80062d0:	0852      	lsrs	r2, r2, #1
 80062d2:	189a      	adds	r2, r3, r2
 80062d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	0019      	movs	r1, r3
 80062da:	0010      	movs	r0, r2
 80062dc:	f7f9 ff12 	bl	8000104 <__udivsi3>
 80062e0:	0003      	movs	r3, r0
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80062e6:	e007      	b.n	80062f8 <UART_SetConfig+0xd2c>
      default:
        ret = HAL_ERROR;
 80062e8:	231b      	movs	r3, #27
 80062ea:	2258      	movs	r2, #88	; 0x58
 80062ec:	4694      	mov	ip, r2
 80062ee:	44bc      	add	ip, r7
 80062f0:	4463      	add	r3, ip
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
        break;
 80062f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062fa:	2b0f      	cmp	r3, #15
 80062fc:	d920      	bls.n	8006340 <UART_SetConfig+0xd74>
 80062fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006300:	4aa4      	ldr	r2, [pc, #656]	; (8006594 <UART_SetConfig+0xfc8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d81c      	bhi.n	8006340 <UART_SetConfig+0xd74>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006308:	b29a      	uxth	r2, r3
 800630a:	200e      	movs	r0, #14
 800630c:	2458      	movs	r4, #88	; 0x58
 800630e:	193b      	adds	r3, r7, r4
 8006310:	181b      	adds	r3, r3, r0
 8006312:	210f      	movs	r1, #15
 8006314:	438a      	bics	r2, r1
 8006316:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800631a:	085b      	lsrs	r3, r3, #1
 800631c:	b29b      	uxth	r3, r3
 800631e:	2207      	movs	r2, #7
 8006320:	4013      	ands	r3, r2
 8006322:	b299      	uxth	r1, r3
 8006324:	193b      	adds	r3, r7, r4
 8006326:	181b      	adds	r3, r3, r0
 8006328:	193a      	adds	r2, r7, r4
 800632a:	1812      	adds	r2, r2, r0
 800632c:	8812      	ldrh	r2, [r2, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8006332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	193a      	adds	r2, r7, r4
 8006338:	1812      	adds	r2, r2, r0
 800633a:	8812      	ldrh	r2, [r2, #0]
 800633c:	60da      	str	r2, [r3, #12]
 800633e:	e1d3      	b.n	80066e8 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8006340:	231b      	movs	r3, #27
 8006342:	2258      	movs	r2, #88	; 0x58
 8006344:	4694      	mov	ip, r2
 8006346:	44bc      	add	ip, r7
 8006348:	4463      	add	r3, ip
 800634a:	2201      	movs	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e1cb      	b.n	80066e8 <UART_SetConfig+0x111c>
    }
  }
  else
  {
    switch (clocksource)
 8006350:	2323      	movs	r3, #35	; 0x23
 8006352:	2258      	movs	r2, #88	; 0x58
 8006354:	4694      	mov	ip, r2
 8006356:	44bc      	add	ip, r7
 8006358:	4463      	add	r3, ip
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d100      	bne.n	8006362 <UART_SetConfig+0xd96>
 8006360:	e06c      	b.n	800643c <UART_SetConfig+0xe70>
 8006362:	dc02      	bgt.n	800636a <UART_SetConfig+0xd9e>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <UART_SetConfig+0xdac>
 8006368:	e1a3      	b.n	80066b2 <UART_SetConfig+0x10e6>
 800636a:	2b04      	cmp	r3, #4
 800636c:	d100      	bne.n	8006370 <UART_SetConfig+0xda4>
 800636e:	e0bc      	b.n	80064ea <UART_SetConfig+0xf1e>
 8006370:	2b08      	cmp	r3, #8
 8006372:	d100      	bne.n	8006376 <UART_SetConfig+0xdaa>
 8006374:	e13d      	b.n	80065f2 <UART_SetConfig+0x1026>
 8006376:	e19c      	b.n	80066b2 <UART_SetConfig+0x10e6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006378:	f7fe f88c 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 800637c:	0003      	movs	r3, r0
 800637e:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d044      	beq.n	8006412 <UART_SetConfig+0xe46>
 8006388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	2b01      	cmp	r3, #1
 800638e:	d03e      	beq.n	800640e <UART_SetConfig+0xe42>
 8006390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	2b02      	cmp	r3, #2
 8006396:	d038      	beq.n	800640a <UART_SetConfig+0xe3e>
 8006398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	2b03      	cmp	r3, #3
 800639e:	d032      	beq.n	8006406 <UART_SetConfig+0xe3a>
 80063a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d02c      	beq.n	8006402 <UART_SetConfig+0xe36>
 80063a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	2b05      	cmp	r3, #5
 80063ae:	d026      	beq.n	80063fe <UART_SetConfig+0xe32>
 80063b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	2b06      	cmp	r3, #6
 80063b6:	d020      	beq.n	80063fa <UART_SetConfig+0xe2e>
 80063b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	2b07      	cmp	r3, #7
 80063be:	d01a      	beq.n	80063f6 <UART_SetConfig+0xe2a>
 80063c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d014      	beq.n	80063f2 <UART_SetConfig+0xe26>
 80063c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	2b09      	cmp	r3, #9
 80063ce:	d00e      	beq.n	80063ee <UART_SetConfig+0xe22>
 80063d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	2b0a      	cmp	r3, #10
 80063d6:	d008      	beq.n	80063ea <UART_SetConfig+0xe1e>
 80063d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	2b0b      	cmp	r3, #11
 80063de:	d102      	bne.n	80063e6 <UART_SetConfig+0xe1a>
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	e016      	b.n	8006414 <UART_SetConfig+0xe48>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e014      	b.n	8006414 <UART_SetConfig+0xe48>
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	e012      	b.n	8006414 <UART_SetConfig+0xe48>
 80063ee:	2340      	movs	r3, #64	; 0x40
 80063f0:	e010      	b.n	8006414 <UART_SetConfig+0xe48>
 80063f2:	2320      	movs	r3, #32
 80063f4:	e00e      	b.n	8006414 <UART_SetConfig+0xe48>
 80063f6:	2310      	movs	r3, #16
 80063f8:	e00c      	b.n	8006414 <UART_SetConfig+0xe48>
 80063fa:	230c      	movs	r3, #12
 80063fc:	e00a      	b.n	8006414 <UART_SetConfig+0xe48>
 80063fe:	230a      	movs	r3, #10
 8006400:	e008      	b.n	8006414 <UART_SetConfig+0xe48>
 8006402:	2308      	movs	r3, #8
 8006404:	e006      	b.n	8006414 <UART_SetConfig+0xe48>
 8006406:	2306      	movs	r3, #6
 8006408:	e004      	b.n	8006414 <UART_SetConfig+0xe48>
 800640a:	2304      	movs	r3, #4
 800640c:	e002      	b.n	8006414 <UART_SetConfig+0xe48>
 800640e:	2302      	movs	r3, #2
 8006410:	e000      	b.n	8006414 <UART_SetConfig+0xe48>
 8006412:	2301      	movs	r3, #1
 8006414:	0019      	movs	r1, r3
 8006416:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006418:	f7f9 fe74 	bl	8000104 <__udivsi3>
 800641c:	0003      	movs	r3, r0
 800641e:	001a      	movs	r2, r3
 8006420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	085b      	lsrs	r3, r3, #1
 8006426:	18d2      	adds	r2, r2, r3
 8006428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	0019      	movs	r1, r3
 800642e:	0010      	movs	r0, r2
 8006430:	f7f9 fe68 	bl	8000104 <__udivsi3>
 8006434:	0003      	movs	r3, r0
 8006436:	b29b      	uxth	r3, r3
 8006438:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800643a:	e142      	b.n	80066c2 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800643c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d043      	beq.n	80064cc <UART_SetConfig+0xf00>
 8006444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	2b01      	cmp	r3, #1
 800644a:	d03d      	beq.n	80064c8 <UART_SetConfig+0xefc>
 800644c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b02      	cmp	r3, #2
 8006452:	d037      	beq.n	80064c4 <UART_SetConfig+0xef8>
 8006454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	2b03      	cmp	r3, #3
 800645a:	d031      	beq.n	80064c0 <UART_SetConfig+0xef4>
 800645c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	2b04      	cmp	r3, #4
 8006462:	d02b      	beq.n	80064bc <UART_SetConfig+0xef0>
 8006464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	2b05      	cmp	r3, #5
 800646a:	d025      	beq.n	80064b8 <UART_SetConfig+0xeec>
 800646c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	2b06      	cmp	r3, #6
 8006472:	d01f      	beq.n	80064b4 <UART_SetConfig+0xee8>
 8006474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	2b07      	cmp	r3, #7
 800647a:	d019      	beq.n	80064b0 <UART_SetConfig+0xee4>
 800647c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	2b08      	cmp	r3, #8
 8006482:	d013      	beq.n	80064ac <UART_SetConfig+0xee0>
 8006484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	2b09      	cmp	r3, #9
 800648a:	d00d      	beq.n	80064a8 <UART_SetConfig+0xedc>
 800648c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	2b0a      	cmp	r3, #10
 8006492:	d007      	beq.n	80064a4 <UART_SetConfig+0xed8>
 8006494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	2b0b      	cmp	r3, #11
 800649a:	d101      	bne.n	80064a0 <UART_SetConfig+0xed4>
 800649c:	4b3e      	ldr	r3, [pc, #248]	; (8006598 <UART_SetConfig+0xfcc>)
 800649e:	e016      	b.n	80064ce <UART_SetConfig+0xf02>
 80064a0:	4b3e      	ldr	r3, [pc, #248]	; (800659c <UART_SetConfig+0xfd0>)
 80064a2:	e014      	b.n	80064ce <UART_SetConfig+0xf02>
 80064a4:	4b3e      	ldr	r3, [pc, #248]	; (80065a0 <UART_SetConfig+0xfd4>)
 80064a6:	e012      	b.n	80064ce <UART_SetConfig+0xf02>
 80064a8:	4b3e      	ldr	r3, [pc, #248]	; (80065a4 <UART_SetConfig+0xfd8>)
 80064aa:	e010      	b.n	80064ce <UART_SetConfig+0xf02>
 80064ac:	4b3e      	ldr	r3, [pc, #248]	; (80065a8 <UART_SetConfig+0xfdc>)
 80064ae:	e00e      	b.n	80064ce <UART_SetConfig+0xf02>
 80064b0:	4b3e      	ldr	r3, [pc, #248]	; (80065ac <UART_SetConfig+0xfe0>)
 80064b2:	e00c      	b.n	80064ce <UART_SetConfig+0xf02>
 80064b4:	4b3e      	ldr	r3, [pc, #248]	; (80065b0 <UART_SetConfig+0xfe4>)
 80064b6:	e00a      	b.n	80064ce <UART_SetConfig+0xf02>
 80064b8:	4b3e      	ldr	r3, [pc, #248]	; (80065b4 <UART_SetConfig+0xfe8>)
 80064ba:	e008      	b.n	80064ce <UART_SetConfig+0xf02>
 80064bc:	4b3e      	ldr	r3, [pc, #248]	; (80065b8 <UART_SetConfig+0xfec>)
 80064be:	e006      	b.n	80064ce <UART_SetConfig+0xf02>
 80064c0:	4b3e      	ldr	r3, [pc, #248]	; (80065bc <UART_SetConfig+0xff0>)
 80064c2:	e004      	b.n	80064ce <UART_SetConfig+0xf02>
 80064c4:	4b3e      	ldr	r3, [pc, #248]	; (80065c0 <UART_SetConfig+0xff4>)
 80064c6:	e002      	b.n	80064ce <UART_SetConfig+0xf02>
 80064c8:	4b3e      	ldr	r3, [pc, #248]	; (80065c4 <UART_SetConfig+0xff8>)
 80064ca:	e000      	b.n	80064ce <UART_SetConfig+0xf02>
 80064cc:	4b33      	ldr	r3, [pc, #204]	; (800659c <UART_SetConfig+0xfd0>)
 80064ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064d0:	6852      	ldr	r2, [r2, #4]
 80064d2:	0852      	lsrs	r2, r2, #1
 80064d4:	189a      	adds	r2, r3, r2
 80064d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	0019      	movs	r1, r3
 80064dc:	0010      	movs	r0, r2
 80064de:	f7f9 fe11 	bl	8000104 <__udivsi3>
 80064e2:	0003      	movs	r3, r0
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80064e8:	e0eb      	b.n	80066c2 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fd ff47 	bl	800437c <HAL_RCC_GetSysClockFreq>
 80064ee:	0003      	movs	r3, r0
 80064f0:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d100      	bne.n	80064fc <UART_SetConfig+0xf30>
 80064fa:	e065      	b.n	80065c8 <UART_SetConfig+0xffc>
 80064fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	2b01      	cmp	r3, #1
 8006502:	d03e      	beq.n	8006582 <UART_SetConfig+0xfb6>
 8006504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	2b02      	cmp	r3, #2
 800650a:	d038      	beq.n	800657e <UART_SetConfig+0xfb2>
 800650c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	2b03      	cmp	r3, #3
 8006512:	d032      	beq.n	800657a <UART_SetConfig+0xfae>
 8006514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	2b04      	cmp	r3, #4
 800651a:	d02c      	beq.n	8006576 <UART_SetConfig+0xfaa>
 800651c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	2b05      	cmp	r3, #5
 8006522:	d026      	beq.n	8006572 <UART_SetConfig+0xfa6>
 8006524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	2b06      	cmp	r3, #6
 800652a:	d020      	beq.n	800656e <UART_SetConfig+0xfa2>
 800652c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2b07      	cmp	r3, #7
 8006532:	d01a      	beq.n	800656a <UART_SetConfig+0xf9e>
 8006534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	2b08      	cmp	r3, #8
 800653a:	d014      	beq.n	8006566 <UART_SetConfig+0xf9a>
 800653c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	2b09      	cmp	r3, #9
 8006542:	d00e      	beq.n	8006562 <UART_SetConfig+0xf96>
 8006544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	2b0a      	cmp	r3, #10
 800654a:	d008      	beq.n	800655e <UART_SetConfig+0xf92>
 800654c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	2b0b      	cmp	r3, #11
 8006552:	d102      	bne.n	800655a <UART_SetConfig+0xf8e>
 8006554:	2380      	movs	r3, #128	; 0x80
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	e037      	b.n	80065ca <UART_SetConfig+0xffe>
 800655a:	2301      	movs	r3, #1
 800655c:	e035      	b.n	80065ca <UART_SetConfig+0xffe>
 800655e:	2380      	movs	r3, #128	; 0x80
 8006560:	e033      	b.n	80065ca <UART_SetConfig+0xffe>
 8006562:	2340      	movs	r3, #64	; 0x40
 8006564:	e031      	b.n	80065ca <UART_SetConfig+0xffe>
 8006566:	2320      	movs	r3, #32
 8006568:	e02f      	b.n	80065ca <UART_SetConfig+0xffe>
 800656a:	2310      	movs	r3, #16
 800656c:	e02d      	b.n	80065ca <UART_SetConfig+0xffe>
 800656e:	230c      	movs	r3, #12
 8006570:	e02b      	b.n	80065ca <UART_SetConfig+0xffe>
 8006572:	230a      	movs	r3, #10
 8006574:	e029      	b.n	80065ca <UART_SetConfig+0xffe>
 8006576:	2308      	movs	r3, #8
 8006578:	e027      	b.n	80065ca <UART_SetConfig+0xffe>
 800657a:	2306      	movs	r3, #6
 800657c:	e025      	b.n	80065ca <UART_SetConfig+0xffe>
 800657e:	2304      	movs	r3, #4
 8006580:	e023      	b.n	80065ca <UART_SetConfig+0xffe>
 8006582:	2302      	movs	r3, #2
 8006584:	e021      	b.n	80065ca <UART_SetConfig+0xffe>
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	00001554 	.word	0x00001554
 800658c:	00001998 	.word	0x00001998
 8006590:	00002aaa 	.word	0x00002aaa
 8006594:	0000ffff 	.word	0x0000ffff
 8006598:	0000f424 	.word	0x0000f424
 800659c:	00f42400 	.word	0x00f42400
 80065a0:	0001e848 	.word	0x0001e848
 80065a4:	0003d090 	.word	0x0003d090
 80065a8:	0007a120 	.word	0x0007a120
 80065ac:	000f4240 	.word	0x000f4240
 80065b0:	00145855 	.word	0x00145855
 80065b4:	00186a00 	.word	0x00186a00
 80065b8:	001e8480 	.word	0x001e8480
 80065bc:	0028b0aa 	.word	0x0028b0aa
 80065c0:	003d0900 	.word	0x003d0900
 80065c4:	007a1200 	.word	0x007a1200
 80065c8:	2301      	movs	r3, #1
 80065ca:	0019      	movs	r1, r3
 80065cc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80065ce:	f7f9 fd99 	bl	8000104 <__udivsi3>
 80065d2:	0003      	movs	r3, r0
 80065d4:	001a      	movs	r2, r3
 80065d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	18d2      	adds	r2, r2, r3
 80065de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	0019      	movs	r1, r3
 80065e4:	0010      	movs	r0, r2
 80065e6:	f7f9 fd8d 	bl	8000104 <__udivsi3>
 80065ea:	0003      	movs	r3, r0
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80065f0:	e067      	b.n	80066c2 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d04b      	beq.n	8006692 <UART_SetConfig+0x10c6>
 80065fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d044      	beq.n	800668c <UART_SetConfig+0x10c0>
 8006602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	2b02      	cmp	r3, #2
 8006608:	d03d      	beq.n	8006686 <UART_SetConfig+0x10ba>
 800660a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	2b03      	cmp	r3, #3
 8006610:	d037      	beq.n	8006682 <UART_SetConfig+0x10b6>
 8006612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	2b04      	cmp	r3, #4
 8006618:	d030      	beq.n	800667c <UART_SetConfig+0x10b0>
 800661a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	2b05      	cmp	r3, #5
 8006620:	d02a      	beq.n	8006678 <UART_SetConfig+0x10ac>
 8006622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	2b06      	cmp	r3, #6
 8006628:	d024      	beq.n	8006674 <UART_SetConfig+0x10a8>
 800662a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	2b07      	cmp	r3, #7
 8006630:	d01d      	beq.n	800666e <UART_SetConfig+0x10a2>
 8006632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	2b08      	cmp	r3, #8
 8006638:	d016      	beq.n	8006668 <UART_SetConfig+0x109c>
 800663a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	2b09      	cmp	r3, #9
 8006640:	d00f      	beq.n	8006662 <UART_SetConfig+0x1096>
 8006642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	2b0a      	cmp	r3, #10
 8006648:	d008      	beq.n	800665c <UART_SetConfig+0x1090>
 800664a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	2b0b      	cmp	r3, #11
 8006650:	d101      	bne.n	8006656 <UART_SetConfig+0x108a>
 8006652:	2380      	movs	r3, #128	; 0x80
 8006654:	e01f      	b.n	8006696 <UART_SetConfig+0x10ca>
 8006656:	2380      	movs	r3, #128	; 0x80
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	e01c      	b.n	8006696 <UART_SetConfig+0x10ca>
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	e019      	b.n	8006696 <UART_SetConfig+0x10ca>
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	e016      	b.n	8006696 <UART_SetConfig+0x10ca>
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	e013      	b.n	8006696 <UART_SetConfig+0x10ca>
 800666e:	2380      	movs	r3, #128	; 0x80
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	e010      	b.n	8006696 <UART_SetConfig+0x10ca>
 8006674:	4b28      	ldr	r3, [pc, #160]	; (8006718 <UART_SetConfig+0x114c>)
 8006676:	e00e      	b.n	8006696 <UART_SetConfig+0x10ca>
 8006678:	4b28      	ldr	r3, [pc, #160]	; (800671c <UART_SetConfig+0x1150>)
 800667a:	e00c      	b.n	8006696 <UART_SetConfig+0x10ca>
 800667c:	2380      	movs	r3, #128	; 0x80
 800667e:	015b      	lsls	r3, r3, #5
 8006680:	e009      	b.n	8006696 <UART_SetConfig+0x10ca>
 8006682:	4b27      	ldr	r3, [pc, #156]	; (8006720 <UART_SetConfig+0x1154>)
 8006684:	e007      	b.n	8006696 <UART_SetConfig+0x10ca>
 8006686:	2380      	movs	r3, #128	; 0x80
 8006688:	019b      	lsls	r3, r3, #6
 800668a:	e004      	b.n	8006696 <UART_SetConfig+0x10ca>
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	01db      	lsls	r3, r3, #7
 8006690:	e001      	b.n	8006696 <UART_SetConfig+0x10ca>
 8006692:	2380      	movs	r3, #128	; 0x80
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006698:	6852      	ldr	r2, [r2, #4]
 800669a:	0852      	lsrs	r2, r2, #1
 800669c:	189a      	adds	r2, r3, r2
 800669e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	0019      	movs	r1, r3
 80066a4:	0010      	movs	r0, r2
 80066a6:	f7f9 fd2d 	bl	8000104 <__udivsi3>
 80066aa:	0003      	movs	r3, r0
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80066b0:	e007      	b.n	80066c2 <UART_SetConfig+0x10f6>
      default:
        ret = HAL_ERROR;
 80066b2:	231b      	movs	r3, #27
 80066b4:	2258      	movs	r2, #88	; 0x58
 80066b6:	4694      	mov	ip, r2
 80066b8:	44bc      	add	ip, r7
 80066ba:	4463      	add	r3, ip
 80066bc:	2201      	movs	r2, #1
 80066be:	701a      	strb	r2, [r3, #0]
        break;
 80066c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066c4:	2b0f      	cmp	r3, #15
 80066c6:	d908      	bls.n	80066da <UART_SetConfig+0x110e>
 80066c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ca:	4a16      	ldr	r2, [pc, #88]	; (8006724 <UART_SetConfig+0x1158>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d804      	bhi.n	80066da <UART_SetConfig+0x110e>
    {
      huart->Instance->BRR = usartdiv;
 80066d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80066d6:	60da      	str	r2, [r3, #12]
 80066d8:	e006      	b.n	80066e8 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 80066da:	231b      	movs	r3, #27
 80066dc:	2258      	movs	r2, #88	; 0x58
 80066de:	4694      	mov	ip, r2
 80066e0:	44bc      	add	ip, r7
 80066e2:	4463      	add	r3, ip
 80066e4:	2201      	movs	r2, #1
 80066e6:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ea:	226a      	movs	r2, #106	; 0x6a
 80066ec:	2101      	movs	r1, #1
 80066ee:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80066f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f2:	2268      	movs	r2, #104	; 0x68
 80066f4:	2101      	movs	r1, #1
 80066f6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066fa:	2200      	movs	r2, #0
 80066fc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80066fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006700:	2200      	movs	r2, #0
 8006702:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006704:	231b      	movs	r3, #27
 8006706:	2258      	movs	r2, #88	; 0x58
 8006708:	4694      	mov	ip, r2
 800670a:	44bc      	add	ip, r7
 800670c:	4463      	add	r3, ip
 800670e:	781b      	ldrb	r3, [r3, #0]
}
 8006710:	0018      	movs	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	b021      	add	sp, #132	; 0x84
 8006716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006718:	00000aaa 	.word	0x00000aaa
 800671c:	00000ccc 	.word	0x00000ccc
 8006720:	00001555 	.word	0x00001555
 8006724:	0000ffff 	.word	0x0000ffff

08006728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	2201      	movs	r2, #1
 8006736:	4013      	ands	r3, r2
 8006738:	d00b      	beq.n	8006752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	4a4a      	ldr	r2, [pc, #296]	; (800686c <UART_AdvFeatureConfig+0x144>)
 8006742:	4013      	ands	r3, r2
 8006744:	0019      	movs	r1, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	2202      	movs	r2, #2
 8006758:	4013      	ands	r3, r2
 800675a:	d00b      	beq.n	8006774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	4a43      	ldr	r2, [pc, #268]	; (8006870 <UART_AdvFeatureConfig+0x148>)
 8006764:	4013      	ands	r3, r2
 8006766:	0019      	movs	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	2204      	movs	r2, #4
 800677a:	4013      	ands	r3, r2
 800677c:	d00b      	beq.n	8006796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	4a3b      	ldr	r2, [pc, #236]	; (8006874 <UART_AdvFeatureConfig+0x14c>)
 8006786:	4013      	ands	r3, r2
 8006788:	0019      	movs	r1, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	2208      	movs	r2, #8
 800679c:	4013      	ands	r3, r2
 800679e:	d00b      	beq.n	80067b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4a34      	ldr	r2, [pc, #208]	; (8006878 <UART_AdvFeatureConfig+0x150>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	0019      	movs	r1, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	2210      	movs	r2, #16
 80067be:	4013      	ands	r3, r2
 80067c0:	d00b      	beq.n	80067da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a2c      	ldr	r2, [pc, #176]	; (800687c <UART_AdvFeatureConfig+0x154>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	0019      	movs	r1, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	2220      	movs	r2, #32
 80067e0:	4013      	ands	r3, r2
 80067e2:	d00b      	beq.n	80067fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	4a25      	ldr	r2, [pc, #148]	; (8006880 <UART_AdvFeatureConfig+0x158>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	0019      	movs	r1, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006800:	2240      	movs	r2, #64	; 0x40
 8006802:	4013      	ands	r3, r2
 8006804:	d01d      	beq.n	8006842 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	4a1d      	ldr	r2, [pc, #116]	; (8006884 <UART_AdvFeatureConfig+0x15c>)
 800680e:	4013      	ands	r3, r2
 8006810:	0019      	movs	r1, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006822:	2380      	movs	r3, #128	; 0x80
 8006824:	035b      	lsls	r3, r3, #13
 8006826:	429a      	cmp	r2, r3
 8006828:	d10b      	bne.n	8006842 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4a15      	ldr	r2, [pc, #84]	; (8006888 <UART_AdvFeatureConfig+0x160>)
 8006832:	4013      	ands	r3, r2
 8006834:	0019      	movs	r1, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	2280      	movs	r2, #128	; 0x80
 8006848:	4013      	ands	r3, r2
 800684a:	d00b      	beq.n	8006864 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	4a0e      	ldr	r2, [pc, #56]	; (800688c <UART_AdvFeatureConfig+0x164>)
 8006854:	4013      	ands	r3, r2
 8006856:	0019      	movs	r1, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	605a      	str	r2, [r3, #4]
  }
}
 8006864:	46c0      	nop			; (mov r8, r8)
 8006866:	46bd      	mov	sp, r7
 8006868:	b002      	add	sp, #8
 800686a:	bd80      	pop	{r7, pc}
 800686c:	fffdffff 	.word	0xfffdffff
 8006870:	fffeffff 	.word	0xfffeffff
 8006874:	fffbffff 	.word	0xfffbffff
 8006878:	ffff7fff 	.word	0xffff7fff
 800687c:	ffffefff 	.word	0xffffefff
 8006880:	ffffdfff 	.word	0xffffdfff
 8006884:	ffefffff 	.word	0xffefffff
 8006888:	ff9fffff 	.word	0xff9fffff
 800688c:	fff7ffff 	.word	0xfff7ffff

08006890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af02      	add	r7, sp, #8
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2288      	movs	r2, #136	; 0x88
 800689c:	2100      	movs	r1, #0
 800689e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80068a0:	f7fb fe7a 	bl	8002598 <HAL_GetTick>
 80068a4:	0003      	movs	r3, r0
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2208      	movs	r2, #8
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d10d      	bne.n	80068d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	2380      	movs	r3, #128	; 0x80
 80068ba:	0399      	lsls	r1, r3, #14
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4b18      	ldr	r3, [pc, #96]	; (8006920 <UART_CheckIdleState+0x90>)
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	0013      	movs	r3, r2
 80068c4:	2200      	movs	r2, #0
 80068c6:	f000 f82d 	bl	8006924 <UART_WaitOnFlagUntilTimeout>
 80068ca:	1e03      	subs	r3, r0, #0
 80068cc:	d001      	beq.n	80068d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e021      	b.n	8006916 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2204      	movs	r2, #4
 80068da:	4013      	ands	r3, r2
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d10d      	bne.n	80068fc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	2380      	movs	r3, #128	; 0x80
 80068e4:	03d9      	lsls	r1, r3, #15
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <UART_CheckIdleState+0x90>)
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	0013      	movs	r3, r2
 80068ee:	2200      	movs	r2, #0
 80068f0:	f000 f818 	bl	8006924 <UART_WaitOnFlagUntilTimeout>
 80068f4:	1e03      	subs	r3, r0, #0
 80068f6:	d001      	beq.n	80068fc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e00c      	b.n	8006916 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2280      	movs	r2, #128	; 0x80
 8006900:	2120      	movs	r1, #32
 8006902:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2284      	movs	r2, #132	; 0x84
 8006908:	2120      	movs	r1, #32
 800690a:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	227c      	movs	r2, #124	; 0x7c
 8006910:	2100      	movs	r1, #0
 8006912:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	0018      	movs	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	b004      	add	sp, #16
 800691c:	bd80      	pop	{r7, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	01ffffff 	.word	0x01ffffff

08006924 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	603b      	str	r3, [r7, #0]
 8006930:	1dfb      	adds	r3, r7, #7
 8006932:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006934:	e02b      	b.n	800698e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	3301      	adds	r3, #1
 800693a:	d028      	beq.n	800698e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693c:	f7fb fe2c 	bl	8002598 <HAL_GetTick>
 8006940:	0002      	movs	r2, r0
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	429a      	cmp	r2, r3
 800694a:	d302      	bcc.n	8006952 <UART_WaitOnFlagUntilTimeout+0x2e>
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d11d      	bne.n	800698e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4916      	ldr	r1, [pc, #88]	; (80069b8 <UART_WaitOnFlagUntilTimeout+0x94>)
 800695e:	400a      	ands	r2, r1
 8006960:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2101      	movs	r1, #1
 800696e:	438a      	bics	r2, r1
 8006970:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2280      	movs	r2, #128	; 0x80
 8006976:	2120      	movs	r1, #32
 8006978:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2284      	movs	r2, #132	; 0x84
 800697e:	2120      	movs	r1, #32
 8006980:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	227c      	movs	r2, #124	; 0x7c
 8006986:	2100      	movs	r1, #0
 8006988:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e00f      	b.n	80069ae <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	4013      	ands	r3, r2
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	425a      	negs	r2, r3
 800699e:	4153      	adcs	r3, r2
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	001a      	movs	r2, r3
 80069a4:	1dfb      	adds	r3, r7, #7
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d0c4      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	0018      	movs	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b004      	add	sp, #16
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	fffffe5f 	.word	0xfffffe5f

080069bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	227c      	movs	r2, #124	; 0x7c
 80069c8:	5c9b      	ldrb	r3, [r3, r2]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e027      	b.n	8006a22 <HAL_UARTEx_DisableFifoMode+0x66>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	227c      	movs	r2, #124	; 0x7c
 80069d6:	2101      	movs	r1, #1
 80069d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2280      	movs	r2, #128	; 0x80
 80069de:	2124      	movs	r1, #36	; 0x24
 80069e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2101      	movs	r1, #1
 80069f6:	438a      	bics	r2, r1
 80069f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4a0b      	ldr	r2, [pc, #44]	; (8006a2c <HAL_UARTEx_DisableFifoMode+0x70>)
 80069fe:	4013      	ands	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2280      	movs	r2, #128	; 0x80
 8006a14:	2120      	movs	r1, #32
 8006a16:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	227c      	movs	r2, #124	; 0x7c
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	0018      	movs	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b004      	add	sp, #16
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	dfffffff 	.word	0xdfffffff

08006a30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	227c      	movs	r2, #124	; 0x7c
 8006a3e:	5c9b      	ldrb	r3, [r3, r2]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e02e      	b.n	8006aa6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	227c      	movs	r2, #124	; 0x7c
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2280      	movs	r2, #128	; 0x80
 8006a54:	2124      	movs	r1, #36	; 0x24
 8006a56:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	438a      	bics	r2, r1
 8006a6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	08d9      	lsrs	r1, r3, #3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	0018      	movs	r0, r3
 8006a88:	f000 f854 	bl	8006b34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2280      	movs	r2, #128	; 0x80
 8006a98:	2120      	movs	r1, #32
 8006a9a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	227c      	movs	r2, #124	; 0x7c
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	b004      	add	sp, #16
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	227c      	movs	r2, #124	; 0x7c
 8006abe:	5c9b      	ldrb	r3, [r3, r2]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e02f      	b.n	8006b28 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	227c      	movs	r2, #124	; 0x7c
 8006acc:	2101      	movs	r1, #1
 8006ace:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2280      	movs	r2, #128	; 0x80
 8006ad4:	2124      	movs	r1, #36	; 0x24
 8006ad6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2101      	movs	r1, #1
 8006aec:	438a      	bics	r2, r1
 8006aee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	4a0e      	ldr	r2, [pc, #56]	; (8006b30 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	0019      	movs	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f000 f813 	bl	8006b34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2280      	movs	r2, #128	; 0x80
 8006b1a:	2120      	movs	r1, #32
 8006b1c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	227c      	movs	r2, #124	; 0x7c
 8006b22:	2100      	movs	r1, #0
 8006b24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	0018      	movs	r0, r3
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	b004      	add	sp, #16
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	f1ffffff 	.word	0xf1ffffff

08006b34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b36:	b089      	sub	sp, #36	; 0x24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006b3c:	2314      	movs	r3, #20
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	4a2f      	ldr	r2, [pc, #188]	; (8006c00 <UARTEx_SetNbDataToProcess+0xcc>)
 8006b42:	ca03      	ldmia	r2!, {r0, r1}
 8006b44:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006b46:	230c      	movs	r3, #12
 8006b48:	18fb      	adds	r3, r7, r3
 8006b4a:	4a2e      	ldr	r2, [pc, #184]	; (8006c04 <UARTEx_SetNbDataToProcess+0xd0>)
 8006b4c:	ca03      	ldmia	r2!, {r0, r1}
 8006b4e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d108      	bne.n	8006b6a <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	226a      	movs	r2, #106	; 0x6a
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2268      	movs	r2, #104	; 0x68
 8006b64:	2101      	movs	r1, #1
 8006b66:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b68:	e046      	b.n	8006bf8 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b6a:	261f      	movs	r6, #31
 8006b6c:	19bb      	adds	r3, r7, r6
 8006b6e:	2208      	movs	r2, #8
 8006b70:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b72:	201e      	movs	r0, #30
 8006b74:	183b      	adds	r3, r7, r0
 8006b76:	2208      	movs	r2, #8
 8006b78:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	0e5b      	lsrs	r3, r3, #25
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	241d      	movs	r4, #29
 8006b86:	193b      	adds	r3, r7, r4
 8006b88:	2107      	movs	r1, #7
 8006b8a:	400a      	ands	r2, r1
 8006b8c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	0f5b      	lsrs	r3, r3, #29
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	251c      	movs	r5, #28
 8006b9a:	197b      	adds	r3, r7, r5
 8006b9c:	2107      	movs	r1, #7
 8006b9e:	400a      	ands	r2, r1
 8006ba0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006ba2:	183b      	adds	r3, r7, r0
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	197a      	adds	r2, r7, r5
 8006ba8:	7812      	ldrb	r2, [r2, #0]
 8006baa:	2114      	movs	r1, #20
 8006bac:	1879      	adds	r1, r7, r1
 8006bae:	5c8a      	ldrb	r2, [r1, r2]
 8006bb0:	435a      	muls	r2, r3
 8006bb2:	0010      	movs	r0, r2
 8006bb4:	197b      	adds	r3, r7, r5
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	250c      	movs	r5, #12
 8006bba:	197a      	adds	r2, r7, r5
 8006bbc:	5cd3      	ldrb	r3, [r2, r3]
 8006bbe:	0019      	movs	r1, r3
 8006bc0:	f7f9 fb2a 	bl	8000218 <__divsi3>
 8006bc4:	0003      	movs	r3, r0
 8006bc6:	b299      	uxth	r1, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	226a      	movs	r2, #106	; 0x6a
 8006bcc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006bce:	19bb      	adds	r3, r7, r6
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	193a      	adds	r2, r7, r4
 8006bd4:	7812      	ldrb	r2, [r2, #0]
 8006bd6:	2114      	movs	r1, #20
 8006bd8:	1879      	adds	r1, r7, r1
 8006bda:	5c8a      	ldrb	r2, [r1, r2]
 8006bdc:	435a      	muls	r2, r3
 8006bde:	0010      	movs	r0, r2
 8006be0:	193b      	adds	r3, r7, r4
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	197a      	adds	r2, r7, r5
 8006be6:	5cd3      	ldrb	r3, [r2, r3]
 8006be8:	0019      	movs	r1, r3
 8006bea:	f7f9 fb15 	bl	8000218 <__divsi3>
 8006bee:	0003      	movs	r3, r0
 8006bf0:	b299      	uxth	r1, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2268      	movs	r2, #104	; 0x68
 8006bf6:	5299      	strh	r1, [r3, r2]
}
 8006bf8:	46c0      	nop			; (mov r8, r8)
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	b009      	add	sp, #36	; 0x24
 8006bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c00:	080075f8 	.word	0x080075f8
 8006c04:	08007600 	.word	0x08007600

08006c08 <__errno>:
 8006c08:	4b01      	ldr	r3, [pc, #4]	; (8006c10 <__errno+0x8>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	4770      	bx	lr
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	2000000c 	.word	0x2000000c

08006c14 <__libc_init_array>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	2600      	movs	r6, #0
 8006c18:	4d0c      	ldr	r5, [pc, #48]	; (8006c4c <__libc_init_array+0x38>)
 8006c1a:	4c0d      	ldr	r4, [pc, #52]	; (8006c50 <__libc_init_array+0x3c>)
 8006c1c:	1b64      	subs	r4, r4, r5
 8006c1e:	10a4      	asrs	r4, r4, #2
 8006c20:	42a6      	cmp	r6, r4
 8006c22:	d109      	bne.n	8006c38 <__libc_init_array+0x24>
 8006c24:	2600      	movs	r6, #0
 8006c26:	f000 fcc9 	bl	80075bc <_init>
 8006c2a:	4d0a      	ldr	r5, [pc, #40]	; (8006c54 <__libc_init_array+0x40>)
 8006c2c:	4c0a      	ldr	r4, [pc, #40]	; (8006c58 <__libc_init_array+0x44>)
 8006c2e:	1b64      	subs	r4, r4, r5
 8006c30:	10a4      	asrs	r4, r4, #2
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	d105      	bne.n	8006c42 <__libc_init_array+0x2e>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	00b3      	lsls	r3, r6, #2
 8006c3a:	58eb      	ldr	r3, [r5, r3]
 8006c3c:	4798      	blx	r3
 8006c3e:	3601      	adds	r6, #1
 8006c40:	e7ee      	b.n	8006c20 <__libc_init_array+0xc>
 8006c42:	00b3      	lsls	r3, r6, #2
 8006c44:	58eb      	ldr	r3, [r5, r3]
 8006c46:	4798      	blx	r3
 8006c48:	3601      	adds	r6, #1
 8006c4a:	e7f2      	b.n	8006c32 <__libc_init_array+0x1e>
 8006c4c:	08007894 	.word	0x08007894
 8006c50:	08007894 	.word	0x08007894
 8006c54:	08007894 	.word	0x08007894
 8006c58:	08007898 	.word	0x08007898

08006c5c <memset>:
 8006c5c:	0003      	movs	r3, r0
 8006c5e:	1812      	adds	r2, r2, r0
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d100      	bne.n	8006c66 <memset+0xa>
 8006c64:	4770      	bx	lr
 8006c66:	7019      	strb	r1, [r3, #0]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	e7f9      	b.n	8006c60 <memset+0x4>

08006c6c <_puts_r>:
 8006c6c:	b570      	push	{r4, r5, r6, lr}
 8006c6e:	0005      	movs	r5, r0
 8006c70:	000e      	movs	r6, r1
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d004      	beq.n	8006c80 <_puts_r+0x14>
 8006c76:	6983      	ldr	r3, [r0, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <_puts_r+0x14>
 8006c7c:	f000 fa24 	bl	80070c8 <__sinit>
 8006c80:	69ab      	ldr	r3, [r5, #24]
 8006c82:	68ac      	ldr	r4, [r5, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <_puts_r+0x22>
 8006c88:	0028      	movs	r0, r5
 8006c8a:	f000 fa1d 	bl	80070c8 <__sinit>
 8006c8e:	4b24      	ldr	r3, [pc, #144]	; (8006d20 <_puts_r+0xb4>)
 8006c90:	429c      	cmp	r4, r3
 8006c92:	d10f      	bne.n	8006cb4 <_puts_r+0x48>
 8006c94:	686c      	ldr	r4, [r5, #4]
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	071b      	lsls	r3, r3, #28
 8006c9a:	d502      	bpl.n	8006ca2 <_puts_r+0x36>
 8006c9c:	6923      	ldr	r3, [r4, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d11f      	bne.n	8006ce2 <_puts_r+0x76>
 8006ca2:	0021      	movs	r1, r4
 8006ca4:	0028      	movs	r0, r5
 8006ca6:	f000 f8a1 	bl	8006dec <__swsetup_r>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d019      	beq.n	8006ce2 <_puts_r+0x76>
 8006cae:	2001      	movs	r0, #1
 8006cb0:	4240      	negs	r0, r0
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}
 8006cb4:	4b1b      	ldr	r3, [pc, #108]	; (8006d24 <_puts_r+0xb8>)
 8006cb6:	429c      	cmp	r4, r3
 8006cb8:	d101      	bne.n	8006cbe <_puts_r+0x52>
 8006cba:	68ac      	ldr	r4, [r5, #8]
 8006cbc:	e7eb      	b.n	8006c96 <_puts_r+0x2a>
 8006cbe:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <_puts_r+0xbc>)
 8006cc0:	429c      	cmp	r4, r3
 8006cc2:	d1e8      	bne.n	8006c96 <_puts_r+0x2a>
 8006cc4:	68ec      	ldr	r4, [r5, #12]
 8006cc6:	e7e6      	b.n	8006c96 <_puts_r+0x2a>
 8006cc8:	3601      	adds	r6, #1
 8006cca:	60a3      	str	r3, [r4, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	da04      	bge.n	8006cda <_puts_r+0x6e>
 8006cd0:	69a2      	ldr	r2, [r4, #24]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	dc16      	bgt.n	8006d04 <_puts_r+0x98>
 8006cd6:	290a      	cmp	r1, #10
 8006cd8:	d014      	beq.n	8006d04 <_puts_r+0x98>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	6022      	str	r2, [r4, #0]
 8006ce0:	7019      	strb	r1, [r3, #0]
 8006ce2:	68a3      	ldr	r3, [r4, #8]
 8006ce4:	7831      	ldrb	r1, [r6, #0]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	d1ed      	bne.n	8006cc8 <_puts_r+0x5c>
 8006cec:	60a3      	str	r3, [r4, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	da0f      	bge.n	8006d12 <_puts_r+0xa6>
 8006cf2:	0022      	movs	r2, r4
 8006cf4:	310a      	adds	r1, #10
 8006cf6:	0028      	movs	r0, r5
 8006cf8:	f000 f822 	bl	8006d40 <__swbuf_r>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d0d6      	beq.n	8006cae <_puts_r+0x42>
 8006d00:	200a      	movs	r0, #10
 8006d02:	e7d6      	b.n	8006cb2 <_puts_r+0x46>
 8006d04:	0022      	movs	r2, r4
 8006d06:	0028      	movs	r0, r5
 8006d08:	f000 f81a 	bl	8006d40 <__swbuf_r>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d1e8      	bne.n	8006ce2 <_puts_r+0x76>
 8006d10:	e7cd      	b.n	8006cae <_puts_r+0x42>
 8006d12:	200a      	movs	r0, #10
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	6022      	str	r2, [r4, #0]
 8006d1a:	7018      	strb	r0, [r3, #0]
 8006d1c:	e7c9      	b.n	8006cb2 <_puts_r+0x46>
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	0800784c 	.word	0x0800784c
 8006d24:	0800786c 	.word	0x0800786c
 8006d28:	0800782c 	.word	0x0800782c

08006d2c <puts>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <puts+0x10>)
 8006d30:	0001      	movs	r1, r0
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	f7ff ff9a 	bl	8006c6c <_puts_r>
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	2000000c 	.word	0x2000000c

08006d40 <__swbuf_r>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	0005      	movs	r5, r0
 8006d44:	000e      	movs	r6, r1
 8006d46:	0014      	movs	r4, r2
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d004      	beq.n	8006d56 <__swbuf_r+0x16>
 8006d4c:	6983      	ldr	r3, [r0, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <__swbuf_r+0x16>
 8006d52:	f000 f9b9 	bl	80070c8 <__sinit>
 8006d56:	4b22      	ldr	r3, [pc, #136]	; (8006de0 <__swbuf_r+0xa0>)
 8006d58:	429c      	cmp	r4, r3
 8006d5a:	d12d      	bne.n	8006db8 <__swbuf_r+0x78>
 8006d5c:	686c      	ldr	r4, [r5, #4]
 8006d5e:	69a3      	ldr	r3, [r4, #24]
 8006d60:	60a3      	str	r3, [r4, #8]
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	071b      	lsls	r3, r3, #28
 8006d66:	d531      	bpl.n	8006dcc <__swbuf_r+0x8c>
 8006d68:	6923      	ldr	r3, [r4, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d02e      	beq.n	8006dcc <__swbuf_r+0x8c>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	6922      	ldr	r2, [r4, #16]
 8006d72:	b2f7      	uxtb	r7, r6
 8006d74:	1a98      	subs	r0, r3, r2
 8006d76:	6963      	ldr	r3, [r4, #20]
 8006d78:	b2f6      	uxtb	r6, r6
 8006d7a:	4283      	cmp	r3, r0
 8006d7c:	dc05      	bgt.n	8006d8a <__swbuf_r+0x4a>
 8006d7e:	0021      	movs	r1, r4
 8006d80:	0028      	movs	r0, r5
 8006d82:	f000 f933 	bl	8006fec <_fflush_r>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d126      	bne.n	8006dd8 <__swbuf_r+0x98>
 8006d8a:	68a3      	ldr	r3, [r4, #8]
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	60a3      	str	r3, [r4, #8]
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	6022      	str	r2, [r4, #0]
 8006d98:	701f      	strb	r7, [r3, #0]
 8006d9a:	6963      	ldr	r3, [r4, #20]
 8006d9c:	4283      	cmp	r3, r0
 8006d9e:	d004      	beq.n	8006daa <__swbuf_r+0x6a>
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	07db      	lsls	r3, r3, #31
 8006da4:	d51a      	bpl.n	8006ddc <__swbuf_r+0x9c>
 8006da6:	2e0a      	cmp	r6, #10
 8006da8:	d118      	bne.n	8006ddc <__swbuf_r+0x9c>
 8006daa:	0021      	movs	r1, r4
 8006dac:	0028      	movs	r0, r5
 8006dae:	f000 f91d 	bl	8006fec <_fflush_r>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d012      	beq.n	8006ddc <__swbuf_r+0x9c>
 8006db6:	e00f      	b.n	8006dd8 <__swbuf_r+0x98>
 8006db8:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <__swbuf_r+0xa4>)
 8006dba:	429c      	cmp	r4, r3
 8006dbc:	d101      	bne.n	8006dc2 <__swbuf_r+0x82>
 8006dbe:	68ac      	ldr	r4, [r5, #8]
 8006dc0:	e7cd      	b.n	8006d5e <__swbuf_r+0x1e>
 8006dc2:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <__swbuf_r+0xa8>)
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	d1ca      	bne.n	8006d5e <__swbuf_r+0x1e>
 8006dc8:	68ec      	ldr	r4, [r5, #12]
 8006dca:	e7c8      	b.n	8006d5e <__swbuf_r+0x1e>
 8006dcc:	0021      	movs	r1, r4
 8006dce:	0028      	movs	r0, r5
 8006dd0:	f000 f80c 	bl	8006dec <__swsetup_r>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d0ca      	beq.n	8006d6e <__swbuf_r+0x2e>
 8006dd8:	2601      	movs	r6, #1
 8006dda:	4276      	negs	r6, r6
 8006ddc:	0030      	movs	r0, r6
 8006dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de0:	0800784c 	.word	0x0800784c
 8006de4:	0800786c 	.word	0x0800786c
 8006de8:	0800782c 	.word	0x0800782c

08006dec <__swsetup_r>:
 8006dec:	4b36      	ldr	r3, [pc, #216]	; (8006ec8 <__swsetup_r+0xdc>)
 8006dee:	b570      	push	{r4, r5, r6, lr}
 8006df0:	681d      	ldr	r5, [r3, #0]
 8006df2:	0006      	movs	r6, r0
 8006df4:	000c      	movs	r4, r1
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	d005      	beq.n	8006e06 <__swsetup_r+0x1a>
 8006dfa:	69ab      	ldr	r3, [r5, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d102      	bne.n	8006e06 <__swsetup_r+0x1a>
 8006e00:	0028      	movs	r0, r5
 8006e02:	f000 f961 	bl	80070c8 <__sinit>
 8006e06:	4b31      	ldr	r3, [pc, #196]	; (8006ecc <__swsetup_r+0xe0>)
 8006e08:	429c      	cmp	r4, r3
 8006e0a:	d10f      	bne.n	8006e2c <__swsetup_r+0x40>
 8006e0c:	686c      	ldr	r4, [r5, #4]
 8006e0e:	230c      	movs	r3, #12
 8006e10:	5ee2      	ldrsh	r2, [r4, r3]
 8006e12:	b293      	uxth	r3, r2
 8006e14:	0719      	lsls	r1, r3, #28
 8006e16:	d42d      	bmi.n	8006e74 <__swsetup_r+0x88>
 8006e18:	06d9      	lsls	r1, r3, #27
 8006e1a:	d411      	bmi.n	8006e40 <__swsetup_r+0x54>
 8006e1c:	2309      	movs	r3, #9
 8006e1e:	2001      	movs	r0, #1
 8006e20:	6033      	str	r3, [r6, #0]
 8006e22:	3337      	adds	r3, #55	; 0x37
 8006e24:	4313      	orrs	r3, r2
 8006e26:	81a3      	strh	r3, [r4, #12]
 8006e28:	4240      	negs	r0, r0
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	4b28      	ldr	r3, [pc, #160]	; (8006ed0 <__swsetup_r+0xe4>)
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	d101      	bne.n	8006e36 <__swsetup_r+0x4a>
 8006e32:	68ac      	ldr	r4, [r5, #8]
 8006e34:	e7eb      	b.n	8006e0e <__swsetup_r+0x22>
 8006e36:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <__swsetup_r+0xe8>)
 8006e38:	429c      	cmp	r4, r3
 8006e3a:	d1e8      	bne.n	8006e0e <__swsetup_r+0x22>
 8006e3c:	68ec      	ldr	r4, [r5, #12]
 8006e3e:	e7e6      	b.n	8006e0e <__swsetup_r+0x22>
 8006e40:	075b      	lsls	r3, r3, #29
 8006e42:	d513      	bpl.n	8006e6c <__swsetup_r+0x80>
 8006e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e46:	2900      	cmp	r1, #0
 8006e48:	d008      	beq.n	8006e5c <__swsetup_r+0x70>
 8006e4a:	0023      	movs	r3, r4
 8006e4c:	3344      	adds	r3, #68	; 0x44
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	d002      	beq.n	8006e58 <__swsetup_r+0x6c>
 8006e52:	0030      	movs	r0, r6
 8006e54:	f000 fa38 	bl	80072c8 <_free_r>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	6363      	str	r3, [r4, #52]	; 0x34
 8006e5c:	2224      	movs	r2, #36	; 0x24
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	4393      	bics	r3, r2
 8006e62:	81a3      	strh	r3, [r4, #12]
 8006e64:	2300      	movs	r3, #0
 8006e66:	6063      	str	r3, [r4, #4]
 8006e68:	6923      	ldr	r3, [r4, #16]
 8006e6a:	6023      	str	r3, [r4, #0]
 8006e6c:	2308      	movs	r3, #8
 8006e6e:	89a2      	ldrh	r2, [r4, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	81a3      	strh	r3, [r4, #12]
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10b      	bne.n	8006e92 <__swsetup_r+0xa6>
 8006e7a:	21a0      	movs	r1, #160	; 0xa0
 8006e7c:	2280      	movs	r2, #128	; 0x80
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	0089      	lsls	r1, r1, #2
 8006e82:	0092      	lsls	r2, r2, #2
 8006e84:	400b      	ands	r3, r1
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d003      	beq.n	8006e92 <__swsetup_r+0xa6>
 8006e8a:	0021      	movs	r1, r4
 8006e8c:	0030      	movs	r0, r6
 8006e8e:	f000 f9d7 	bl	8007240 <__smakebuf_r>
 8006e92:	2301      	movs	r3, #1
 8006e94:	89a2      	ldrh	r2, [r4, #12]
 8006e96:	4013      	ands	r3, r2
 8006e98:	d011      	beq.n	8006ebe <__swsetup_r+0xd2>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60a3      	str	r3, [r4, #8]
 8006e9e:	6963      	ldr	r3, [r4, #20]
 8006ea0:	425b      	negs	r3, r3
 8006ea2:	61a3      	str	r3, [r4, #24]
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	4283      	cmp	r3, r0
 8006eaa:	d1be      	bne.n	8006e2a <__swsetup_r+0x3e>
 8006eac:	230c      	movs	r3, #12
 8006eae:	5ee2      	ldrsh	r2, [r4, r3]
 8006eb0:	0613      	lsls	r3, r2, #24
 8006eb2:	d5ba      	bpl.n	8006e2a <__swsetup_r+0x3e>
 8006eb4:	2340      	movs	r3, #64	; 0x40
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	3801      	subs	r0, #1
 8006ebc:	e7b5      	b.n	8006e2a <__swsetup_r+0x3e>
 8006ebe:	0792      	lsls	r2, r2, #30
 8006ec0:	d400      	bmi.n	8006ec4 <__swsetup_r+0xd8>
 8006ec2:	6963      	ldr	r3, [r4, #20]
 8006ec4:	60a3      	str	r3, [r4, #8]
 8006ec6:	e7ed      	b.n	8006ea4 <__swsetup_r+0xb8>
 8006ec8:	2000000c 	.word	0x2000000c
 8006ecc:	0800784c 	.word	0x0800784c
 8006ed0:	0800786c 	.word	0x0800786c
 8006ed4:	0800782c 	.word	0x0800782c

08006ed8 <__sflush_r>:
 8006ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eda:	898a      	ldrh	r2, [r1, #12]
 8006edc:	0005      	movs	r5, r0
 8006ede:	000c      	movs	r4, r1
 8006ee0:	0713      	lsls	r3, r2, #28
 8006ee2:	d460      	bmi.n	8006fa6 <__sflush_r+0xce>
 8006ee4:	684b      	ldr	r3, [r1, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	dc04      	bgt.n	8006ef4 <__sflush_r+0x1c>
 8006eea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	dc01      	bgt.n	8006ef4 <__sflush_r+0x1c>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ef4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006ef6:	2f00      	cmp	r7, #0
 8006ef8:	d0fa      	beq.n	8006ef0 <__sflush_r+0x18>
 8006efa:	2300      	movs	r3, #0
 8006efc:	682e      	ldr	r6, [r5, #0]
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	2380      	movs	r3, #128	; 0x80
 8006f02:	015b      	lsls	r3, r3, #5
 8006f04:	6a21      	ldr	r1, [r4, #32]
 8006f06:	401a      	ands	r2, r3
 8006f08:	d034      	beq.n	8006f74 <__sflush_r+0x9c>
 8006f0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	075b      	lsls	r3, r3, #29
 8006f10:	d506      	bpl.n	8006f20 <__sflush_r+0x48>
 8006f12:	6863      	ldr	r3, [r4, #4]
 8006f14:	1ac0      	subs	r0, r0, r3
 8006f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <__sflush_r+0x48>
 8006f1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f1e:	1ac0      	subs	r0, r0, r3
 8006f20:	0002      	movs	r2, r0
 8006f22:	6a21      	ldr	r1, [r4, #32]
 8006f24:	2300      	movs	r3, #0
 8006f26:	0028      	movs	r0, r5
 8006f28:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006f2a:	47b8      	blx	r7
 8006f2c:	89a1      	ldrh	r1, [r4, #12]
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d106      	bne.n	8006f40 <__sflush_r+0x68>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	2b1d      	cmp	r3, #29
 8006f36:	d830      	bhi.n	8006f9a <__sflush_r+0xc2>
 8006f38:	4a2b      	ldr	r2, [pc, #172]	; (8006fe8 <__sflush_r+0x110>)
 8006f3a:	40da      	lsrs	r2, r3
 8006f3c:	07d3      	lsls	r3, r2, #31
 8006f3e:	d52c      	bpl.n	8006f9a <__sflush_r+0xc2>
 8006f40:	2300      	movs	r3, #0
 8006f42:	6063      	str	r3, [r4, #4]
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	04cb      	lsls	r3, r1, #19
 8006f4a:	d505      	bpl.n	8006f58 <__sflush_r+0x80>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <__sflush_r+0x7e>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d100      	bne.n	8006f58 <__sflush_r+0x80>
 8006f56:	6560      	str	r0, [r4, #84]	; 0x54
 8006f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f5a:	602e      	str	r6, [r5, #0]
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	d0c7      	beq.n	8006ef0 <__sflush_r+0x18>
 8006f60:	0023      	movs	r3, r4
 8006f62:	3344      	adds	r3, #68	; 0x44
 8006f64:	4299      	cmp	r1, r3
 8006f66:	d002      	beq.n	8006f6e <__sflush_r+0x96>
 8006f68:	0028      	movs	r0, r5
 8006f6a:	f000 f9ad 	bl	80072c8 <_free_r>
 8006f6e:	2000      	movs	r0, #0
 8006f70:	6360      	str	r0, [r4, #52]	; 0x34
 8006f72:	e7be      	b.n	8006ef2 <__sflush_r+0x1a>
 8006f74:	2301      	movs	r3, #1
 8006f76:	0028      	movs	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	d1c6      	bne.n	8006f0c <__sflush_r+0x34>
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0c3      	beq.n	8006f0c <__sflush_r+0x34>
 8006f84:	2b1d      	cmp	r3, #29
 8006f86:	d001      	beq.n	8006f8c <__sflush_r+0xb4>
 8006f88:	2b16      	cmp	r3, #22
 8006f8a:	d101      	bne.n	8006f90 <__sflush_r+0xb8>
 8006f8c:	602e      	str	r6, [r5, #0]
 8006f8e:	e7af      	b.n	8006ef0 <__sflush_r+0x18>
 8006f90:	2340      	movs	r3, #64	; 0x40
 8006f92:	89a2      	ldrh	r2, [r4, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	e7ab      	b.n	8006ef2 <__sflush_r+0x1a>
 8006f9a:	2340      	movs	r3, #64	; 0x40
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	4240      	negs	r0, r0
 8006fa4:	e7a5      	b.n	8006ef2 <__sflush_r+0x1a>
 8006fa6:	690f      	ldr	r7, [r1, #16]
 8006fa8:	2f00      	cmp	r7, #0
 8006faa:	d0a1      	beq.n	8006ef0 <__sflush_r+0x18>
 8006fac:	680b      	ldr	r3, [r1, #0]
 8006fae:	600f      	str	r7, [r1, #0]
 8006fb0:	1bdb      	subs	r3, r3, r7
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	0792      	lsls	r2, r2, #30
 8006fb8:	d100      	bne.n	8006fbc <__sflush_r+0xe4>
 8006fba:	694b      	ldr	r3, [r1, #20]
 8006fbc:	60a3      	str	r3, [r4, #8]
 8006fbe:	9b01      	ldr	r3, [sp, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dc00      	bgt.n	8006fc6 <__sflush_r+0xee>
 8006fc4:	e794      	b.n	8006ef0 <__sflush_r+0x18>
 8006fc6:	9b01      	ldr	r3, [sp, #4]
 8006fc8:	003a      	movs	r2, r7
 8006fca:	6a21      	ldr	r1, [r4, #32]
 8006fcc:	0028      	movs	r0, r5
 8006fce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fd0:	47b0      	blx	r6
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	dc03      	bgt.n	8006fde <__sflush_r+0x106>
 8006fd6:	2340      	movs	r3, #64	; 0x40
 8006fd8:	89a2      	ldrh	r2, [r4, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	e7df      	b.n	8006f9e <__sflush_r+0xc6>
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	183f      	adds	r7, r7, r0
 8006fe2:	1a1b      	subs	r3, r3, r0
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	e7ea      	b.n	8006fbe <__sflush_r+0xe6>
 8006fe8:	20400001 	.word	0x20400001

08006fec <_fflush_r>:
 8006fec:	690b      	ldr	r3, [r1, #16]
 8006fee:	b570      	push	{r4, r5, r6, lr}
 8006ff0:	0005      	movs	r5, r0
 8006ff2:	000c      	movs	r4, r1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <_fflush_r+0x10>
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d004      	beq.n	800700a <_fflush_r+0x1e>
 8007000:	6983      	ldr	r3, [r0, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <_fflush_r+0x1e>
 8007006:	f000 f85f 	bl	80070c8 <__sinit>
 800700a:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <_fflush_r+0x4c>)
 800700c:	429c      	cmp	r4, r3
 800700e:	d109      	bne.n	8007024 <_fflush_r+0x38>
 8007010:	686c      	ldr	r4, [r5, #4]
 8007012:	220c      	movs	r2, #12
 8007014:	5ea3      	ldrsh	r3, [r4, r2]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0ee      	beq.n	8006ff8 <_fflush_r+0xc>
 800701a:	0021      	movs	r1, r4
 800701c:	0028      	movs	r0, r5
 800701e:	f7ff ff5b 	bl	8006ed8 <__sflush_r>
 8007022:	e7ea      	b.n	8006ffa <_fflush_r+0xe>
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <_fflush_r+0x50>)
 8007026:	429c      	cmp	r4, r3
 8007028:	d101      	bne.n	800702e <_fflush_r+0x42>
 800702a:	68ac      	ldr	r4, [r5, #8]
 800702c:	e7f1      	b.n	8007012 <_fflush_r+0x26>
 800702e:	4b04      	ldr	r3, [pc, #16]	; (8007040 <_fflush_r+0x54>)
 8007030:	429c      	cmp	r4, r3
 8007032:	d1ee      	bne.n	8007012 <_fflush_r+0x26>
 8007034:	68ec      	ldr	r4, [r5, #12]
 8007036:	e7ec      	b.n	8007012 <_fflush_r+0x26>
 8007038:	0800784c 	.word	0x0800784c
 800703c:	0800786c 	.word	0x0800786c
 8007040:	0800782c 	.word	0x0800782c

08007044 <std>:
 8007044:	2300      	movs	r3, #0
 8007046:	b510      	push	{r4, lr}
 8007048:	0004      	movs	r4, r0
 800704a:	6003      	str	r3, [r0, #0]
 800704c:	6043      	str	r3, [r0, #4]
 800704e:	6083      	str	r3, [r0, #8]
 8007050:	8181      	strh	r1, [r0, #12]
 8007052:	6643      	str	r3, [r0, #100]	; 0x64
 8007054:	81c2      	strh	r2, [r0, #14]
 8007056:	6103      	str	r3, [r0, #16]
 8007058:	6143      	str	r3, [r0, #20]
 800705a:	6183      	str	r3, [r0, #24]
 800705c:	0019      	movs	r1, r3
 800705e:	2208      	movs	r2, #8
 8007060:	305c      	adds	r0, #92	; 0x5c
 8007062:	f7ff fdfb 	bl	8006c5c <memset>
 8007066:	4b05      	ldr	r3, [pc, #20]	; (800707c <std+0x38>)
 8007068:	6224      	str	r4, [r4, #32]
 800706a:	6263      	str	r3, [r4, #36]	; 0x24
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <std+0x3c>)
 800706e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007070:	4b04      	ldr	r3, [pc, #16]	; (8007084 <std+0x40>)
 8007072:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007074:	4b04      	ldr	r3, [pc, #16]	; (8007088 <std+0x44>)
 8007076:	6323      	str	r3, [r4, #48]	; 0x30
 8007078:	bd10      	pop	{r4, pc}
 800707a:	46c0      	nop			; (mov r8, r8)
 800707c:	0800743d 	.word	0x0800743d
 8007080:	08007465 	.word	0x08007465
 8007084:	0800749d 	.word	0x0800749d
 8007088:	080074c9 	.word	0x080074c9

0800708c <_cleanup_r>:
 800708c:	b510      	push	{r4, lr}
 800708e:	4902      	ldr	r1, [pc, #8]	; (8007098 <_cleanup_r+0xc>)
 8007090:	f000 f88c 	bl	80071ac <_fwalk_reent>
 8007094:	bd10      	pop	{r4, pc}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	08006fed 	.word	0x08006fed

0800709c <__sfmoreglue>:
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	2568      	movs	r5, #104	; 0x68
 80070a0:	1e4a      	subs	r2, r1, #1
 80070a2:	4355      	muls	r5, r2
 80070a4:	000e      	movs	r6, r1
 80070a6:	0029      	movs	r1, r5
 80070a8:	3174      	adds	r1, #116	; 0x74
 80070aa:	f000 f957 	bl	800735c <_malloc_r>
 80070ae:	1e04      	subs	r4, r0, #0
 80070b0:	d008      	beq.n	80070c4 <__sfmoreglue+0x28>
 80070b2:	2100      	movs	r1, #0
 80070b4:	002a      	movs	r2, r5
 80070b6:	6001      	str	r1, [r0, #0]
 80070b8:	6046      	str	r6, [r0, #4]
 80070ba:	300c      	adds	r0, #12
 80070bc:	60a0      	str	r0, [r4, #8]
 80070be:	3268      	adds	r2, #104	; 0x68
 80070c0:	f7ff fdcc 	bl	8006c5c <memset>
 80070c4:	0020      	movs	r0, r4
 80070c6:	bd70      	pop	{r4, r5, r6, pc}

080070c8 <__sinit>:
 80070c8:	6983      	ldr	r3, [r0, #24]
 80070ca:	b513      	push	{r0, r1, r4, lr}
 80070cc:	0004      	movs	r4, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d128      	bne.n	8007124 <__sinit+0x5c>
 80070d2:	6483      	str	r3, [r0, #72]	; 0x48
 80070d4:	64c3      	str	r3, [r0, #76]	; 0x4c
 80070d6:	6503      	str	r3, [r0, #80]	; 0x50
 80070d8:	4b13      	ldr	r3, [pc, #76]	; (8007128 <__sinit+0x60>)
 80070da:	4a14      	ldr	r2, [pc, #80]	; (800712c <__sinit+0x64>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6282      	str	r2, [r0, #40]	; 0x28
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	4298      	cmp	r0, r3
 80070e4:	d101      	bne.n	80070ea <__sinit+0x22>
 80070e6:	2301      	movs	r3, #1
 80070e8:	6183      	str	r3, [r0, #24]
 80070ea:	0020      	movs	r0, r4
 80070ec:	f000 f820 	bl	8007130 <__sfp>
 80070f0:	6060      	str	r0, [r4, #4]
 80070f2:	0020      	movs	r0, r4
 80070f4:	f000 f81c 	bl	8007130 <__sfp>
 80070f8:	60a0      	str	r0, [r4, #8]
 80070fa:	0020      	movs	r0, r4
 80070fc:	f000 f818 	bl	8007130 <__sfp>
 8007100:	2200      	movs	r2, #0
 8007102:	60e0      	str	r0, [r4, #12]
 8007104:	2104      	movs	r1, #4
 8007106:	6860      	ldr	r0, [r4, #4]
 8007108:	f7ff ff9c 	bl	8007044 <std>
 800710c:	2201      	movs	r2, #1
 800710e:	2109      	movs	r1, #9
 8007110:	68a0      	ldr	r0, [r4, #8]
 8007112:	f7ff ff97 	bl	8007044 <std>
 8007116:	2202      	movs	r2, #2
 8007118:	2112      	movs	r1, #18
 800711a:	68e0      	ldr	r0, [r4, #12]
 800711c:	f7ff ff92 	bl	8007044 <std>
 8007120:	2301      	movs	r3, #1
 8007122:	61a3      	str	r3, [r4, #24]
 8007124:	bd13      	pop	{r0, r1, r4, pc}
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	08007828 	.word	0x08007828
 800712c:	0800708d 	.word	0x0800708d

08007130 <__sfp>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	4b1c      	ldr	r3, [pc, #112]	; (80071a4 <__sfp+0x74>)
 8007134:	0007      	movs	r7, r0
 8007136:	681e      	ldr	r6, [r3, #0]
 8007138:	69b3      	ldr	r3, [r6, #24]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <__sfp+0x14>
 800713e:	0030      	movs	r0, r6
 8007140:	f7ff ffc2 	bl	80070c8 <__sinit>
 8007144:	3648      	adds	r6, #72	; 0x48
 8007146:	68b4      	ldr	r4, [r6, #8]
 8007148:	6873      	ldr	r3, [r6, #4]
 800714a:	3b01      	subs	r3, #1
 800714c:	d504      	bpl.n	8007158 <__sfp+0x28>
 800714e:	6833      	ldr	r3, [r6, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d007      	beq.n	8007164 <__sfp+0x34>
 8007154:	6836      	ldr	r6, [r6, #0]
 8007156:	e7f6      	b.n	8007146 <__sfp+0x16>
 8007158:	220c      	movs	r2, #12
 800715a:	5ea5      	ldrsh	r5, [r4, r2]
 800715c:	2d00      	cmp	r5, #0
 800715e:	d00d      	beq.n	800717c <__sfp+0x4c>
 8007160:	3468      	adds	r4, #104	; 0x68
 8007162:	e7f2      	b.n	800714a <__sfp+0x1a>
 8007164:	2104      	movs	r1, #4
 8007166:	0038      	movs	r0, r7
 8007168:	f7ff ff98 	bl	800709c <__sfmoreglue>
 800716c:	6030      	str	r0, [r6, #0]
 800716e:	2800      	cmp	r0, #0
 8007170:	d1f0      	bne.n	8007154 <__sfp+0x24>
 8007172:	230c      	movs	r3, #12
 8007174:	0004      	movs	r4, r0
 8007176:	603b      	str	r3, [r7, #0]
 8007178:	0020      	movs	r0, r4
 800717a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800717c:	0020      	movs	r0, r4
 800717e:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <__sfp+0x78>)
 8007180:	6665      	str	r5, [r4, #100]	; 0x64
 8007182:	6025      	str	r5, [r4, #0]
 8007184:	6065      	str	r5, [r4, #4]
 8007186:	60a5      	str	r5, [r4, #8]
 8007188:	60e3      	str	r3, [r4, #12]
 800718a:	6125      	str	r5, [r4, #16]
 800718c:	6165      	str	r5, [r4, #20]
 800718e:	61a5      	str	r5, [r4, #24]
 8007190:	2208      	movs	r2, #8
 8007192:	0029      	movs	r1, r5
 8007194:	305c      	adds	r0, #92	; 0x5c
 8007196:	f7ff fd61 	bl	8006c5c <memset>
 800719a:	6365      	str	r5, [r4, #52]	; 0x34
 800719c:	63a5      	str	r5, [r4, #56]	; 0x38
 800719e:	64a5      	str	r5, [r4, #72]	; 0x48
 80071a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80071a2:	e7e9      	b.n	8007178 <__sfp+0x48>
 80071a4:	08007828 	.word	0x08007828
 80071a8:	ffff0001 	.word	0xffff0001

080071ac <_fwalk_reent>:
 80071ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ae:	0004      	movs	r4, r0
 80071b0:	0007      	movs	r7, r0
 80071b2:	2600      	movs	r6, #0
 80071b4:	9101      	str	r1, [sp, #4]
 80071b6:	3448      	adds	r4, #72	; 0x48
 80071b8:	2c00      	cmp	r4, #0
 80071ba:	d101      	bne.n	80071c0 <_fwalk_reent+0x14>
 80071bc:	0030      	movs	r0, r6
 80071be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071c0:	6863      	ldr	r3, [r4, #4]
 80071c2:	68a5      	ldr	r5, [r4, #8]
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	9b00      	ldr	r3, [sp, #0]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	d501      	bpl.n	80071d2 <_fwalk_reent+0x26>
 80071ce:	6824      	ldr	r4, [r4, #0]
 80071d0:	e7f2      	b.n	80071b8 <_fwalk_reent+0xc>
 80071d2:	89ab      	ldrh	r3, [r5, #12]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d908      	bls.n	80071ea <_fwalk_reent+0x3e>
 80071d8:	220e      	movs	r2, #14
 80071da:	5eab      	ldrsh	r3, [r5, r2]
 80071dc:	3301      	adds	r3, #1
 80071de:	d004      	beq.n	80071ea <_fwalk_reent+0x3e>
 80071e0:	0029      	movs	r1, r5
 80071e2:	0038      	movs	r0, r7
 80071e4:	9b01      	ldr	r3, [sp, #4]
 80071e6:	4798      	blx	r3
 80071e8:	4306      	orrs	r6, r0
 80071ea:	3568      	adds	r5, #104	; 0x68
 80071ec:	e7eb      	b.n	80071c6 <_fwalk_reent+0x1a>
	...

080071f0 <__swhatbuf_r>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	000e      	movs	r6, r1
 80071f4:	001d      	movs	r5, r3
 80071f6:	230e      	movs	r3, #14
 80071f8:	5ec9      	ldrsh	r1, [r1, r3]
 80071fa:	b096      	sub	sp, #88	; 0x58
 80071fc:	0014      	movs	r4, r2
 80071fe:	2900      	cmp	r1, #0
 8007200:	da07      	bge.n	8007212 <__swhatbuf_r+0x22>
 8007202:	2300      	movs	r3, #0
 8007204:	602b      	str	r3, [r5, #0]
 8007206:	89b3      	ldrh	r3, [r6, #12]
 8007208:	061b      	lsls	r3, r3, #24
 800720a:	d411      	bmi.n	8007230 <__swhatbuf_r+0x40>
 800720c:	2380      	movs	r3, #128	; 0x80
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	e00f      	b.n	8007232 <__swhatbuf_r+0x42>
 8007212:	466a      	mov	r2, sp
 8007214:	f000 f984 	bl	8007520 <_fstat_r>
 8007218:	2800      	cmp	r0, #0
 800721a:	dbf2      	blt.n	8007202 <__swhatbuf_r+0x12>
 800721c:	22f0      	movs	r2, #240	; 0xf0
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	0212      	lsls	r2, r2, #8
 8007222:	4013      	ands	r3, r2
 8007224:	4a05      	ldr	r2, [pc, #20]	; (800723c <__swhatbuf_r+0x4c>)
 8007226:	189b      	adds	r3, r3, r2
 8007228:	425a      	negs	r2, r3
 800722a:	4153      	adcs	r3, r2
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	e7ed      	b.n	800720c <__swhatbuf_r+0x1c>
 8007230:	2340      	movs	r3, #64	; 0x40
 8007232:	2000      	movs	r0, #0
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	b016      	add	sp, #88	; 0x58
 8007238:	bd70      	pop	{r4, r5, r6, pc}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	ffffe000 	.word	0xffffe000

08007240 <__smakebuf_r>:
 8007240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007242:	2602      	movs	r6, #2
 8007244:	898b      	ldrh	r3, [r1, #12]
 8007246:	0005      	movs	r5, r0
 8007248:	000c      	movs	r4, r1
 800724a:	4233      	tst	r3, r6
 800724c:	d006      	beq.n	800725c <__smakebuf_r+0x1c>
 800724e:	0023      	movs	r3, r4
 8007250:	3347      	adds	r3, #71	; 0x47
 8007252:	6023      	str	r3, [r4, #0]
 8007254:	6123      	str	r3, [r4, #16]
 8007256:	2301      	movs	r3, #1
 8007258:	6163      	str	r3, [r4, #20]
 800725a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800725c:	ab01      	add	r3, sp, #4
 800725e:	466a      	mov	r2, sp
 8007260:	f7ff ffc6 	bl	80071f0 <__swhatbuf_r>
 8007264:	9900      	ldr	r1, [sp, #0]
 8007266:	0007      	movs	r7, r0
 8007268:	0028      	movs	r0, r5
 800726a:	f000 f877 	bl	800735c <_malloc_r>
 800726e:	2800      	cmp	r0, #0
 8007270:	d108      	bne.n	8007284 <__smakebuf_r+0x44>
 8007272:	220c      	movs	r2, #12
 8007274:	5ea3      	ldrsh	r3, [r4, r2]
 8007276:	059a      	lsls	r2, r3, #22
 8007278:	d4ef      	bmi.n	800725a <__smakebuf_r+0x1a>
 800727a:	2203      	movs	r2, #3
 800727c:	4393      	bics	r3, r2
 800727e:	431e      	orrs	r6, r3
 8007280:	81a6      	strh	r6, [r4, #12]
 8007282:	e7e4      	b.n	800724e <__smakebuf_r+0xe>
 8007284:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <__smakebuf_r+0x84>)
 8007286:	62ab      	str	r3, [r5, #40]	; 0x28
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	89a2      	ldrh	r2, [r4, #12]
 800728c:	6020      	str	r0, [r4, #0]
 800728e:	4313      	orrs	r3, r2
 8007290:	81a3      	strh	r3, [r4, #12]
 8007292:	9b00      	ldr	r3, [sp, #0]
 8007294:	6120      	str	r0, [r4, #16]
 8007296:	6163      	str	r3, [r4, #20]
 8007298:	9b01      	ldr	r3, [sp, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00d      	beq.n	80072ba <__smakebuf_r+0x7a>
 800729e:	230e      	movs	r3, #14
 80072a0:	5ee1      	ldrsh	r1, [r4, r3]
 80072a2:	0028      	movs	r0, r5
 80072a4:	f000 f94e 	bl	8007544 <_isatty_r>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d006      	beq.n	80072ba <__smakebuf_r+0x7a>
 80072ac:	2203      	movs	r2, #3
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	4393      	bics	r3, r2
 80072b2:	001a      	movs	r2, r3
 80072b4:	2301      	movs	r3, #1
 80072b6:	4313      	orrs	r3, r2
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	89a0      	ldrh	r0, [r4, #12]
 80072bc:	4338      	orrs	r0, r7
 80072be:	81a0      	strh	r0, [r4, #12]
 80072c0:	e7cb      	b.n	800725a <__smakebuf_r+0x1a>
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	0800708d 	.word	0x0800708d

080072c8 <_free_r>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	0005      	movs	r5, r0
 80072cc:	2900      	cmp	r1, #0
 80072ce:	d010      	beq.n	80072f2 <_free_r+0x2a>
 80072d0:	1f0c      	subs	r4, r1, #4
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da00      	bge.n	80072da <_free_r+0x12>
 80072d8:	18e4      	adds	r4, r4, r3
 80072da:	0028      	movs	r0, r5
 80072dc:	f000 f958 	bl	8007590 <__malloc_lock>
 80072e0:	4a1d      	ldr	r2, [pc, #116]	; (8007358 <_free_r+0x90>)
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d105      	bne.n	80072f4 <_free_r+0x2c>
 80072e8:	6063      	str	r3, [r4, #4]
 80072ea:	6014      	str	r4, [r2, #0]
 80072ec:	0028      	movs	r0, r5
 80072ee:	f000 f950 	bl	8007592 <__malloc_unlock>
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	d909      	bls.n	800730c <_free_r+0x44>
 80072f8:	6821      	ldr	r1, [r4, #0]
 80072fa:	1860      	adds	r0, r4, r1
 80072fc:	4283      	cmp	r3, r0
 80072fe:	d1f3      	bne.n	80072e8 <_free_r+0x20>
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	1841      	adds	r1, r0, r1
 8007306:	6021      	str	r1, [r4, #0]
 8007308:	e7ee      	b.n	80072e8 <_free_r+0x20>
 800730a:	0013      	movs	r3, r2
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	2a00      	cmp	r2, #0
 8007310:	d001      	beq.n	8007316 <_free_r+0x4e>
 8007312:	42a2      	cmp	r2, r4
 8007314:	d9f9      	bls.n	800730a <_free_r+0x42>
 8007316:	6819      	ldr	r1, [r3, #0]
 8007318:	1858      	adds	r0, r3, r1
 800731a:	42a0      	cmp	r0, r4
 800731c:	d10b      	bne.n	8007336 <_free_r+0x6e>
 800731e:	6820      	ldr	r0, [r4, #0]
 8007320:	1809      	adds	r1, r1, r0
 8007322:	1858      	adds	r0, r3, r1
 8007324:	6019      	str	r1, [r3, #0]
 8007326:	4282      	cmp	r2, r0
 8007328:	d1e0      	bne.n	80072ec <_free_r+0x24>
 800732a:	6810      	ldr	r0, [r2, #0]
 800732c:	6852      	ldr	r2, [r2, #4]
 800732e:	1841      	adds	r1, r0, r1
 8007330:	6019      	str	r1, [r3, #0]
 8007332:	605a      	str	r2, [r3, #4]
 8007334:	e7da      	b.n	80072ec <_free_r+0x24>
 8007336:	42a0      	cmp	r0, r4
 8007338:	d902      	bls.n	8007340 <_free_r+0x78>
 800733a:	230c      	movs	r3, #12
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	e7d5      	b.n	80072ec <_free_r+0x24>
 8007340:	6821      	ldr	r1, [r4, #0]
 8007342:	1860      	adds	r0, r4, r1
 8007344:	4282      	cmp	r2, r0
 8007346:	d103      	bne.n	8007350 <_free_r+0x88>
 8007348:	6810      	ldr	r0, [r2, #0]
 800734a:	6852      	ldr	r2, [r2, #4]
 800734c:	1841      	adds	r1, r0, r1
 800734e:	6021      	str	r1, [r4, #0]
 8007350:	6062      	str	r2, [r4, #4]
 8007352:	605c      	str	r4, [r3, #4]
 8007354:	e7ca      	b.n	80072ec <_free_r+0x24>
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	200005bc 	.word	0x200005bc

0800735c <_malloc_r>:
 800735c:	2303      	movs	r3, #3
 800735e:	b570      	push	{r4, r5, r6, lr}
 8007360:	1ccd      	adds	r5, r1, #3
 8007362:	439d      	bics	r5, r3
 8007364:	3508      	adds	r5, #8
 8007366:	0006      	movs	r6, r0
 8007368:	2d0c      	cmp	r5, #12
 800736a:	d21e      	bcs.n	80073aa <_malloc_r+0x4e>
 800736c:	250c      	movs	r5, #12
 800736e:	42a9      	cmp	r1, r5
 8007370:	d81d      	bhi.n	80073ae <_malloc_r+0x52>
 8007372:	0030      	movs	r0, r6
 8007374:	f000 f90c 	bl	8007590 <__malloc_lock>
 8007378:	4a25      	ldr	r2, [pc, #148]	; (8007410 <_malloc_r+0xb4>)
 800737a:	6814      	ldr	r4, [r2, #0]
 800737c:	0021      	movs	r1, r4
 800737e:	2900      	cmp	r1, #0
 8007380:	d119      	bne.n	80073b6 <_malloc_r+0x5a>
 8007382:	4c24      	ldr	r4, [pc, #144]	; (8007414 <_malloc_r+0xb8>)
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <_malloc_r+0x36>
 800738a:	0030      	movs	r0, r6
 800738c:	f000 f844 	bl	8007418 <_sbrk_r>
 8007390:	6020      	str	r0, [r4, #0]
 8007392:	0029      	movs	r1, r5
 8007394:	0030      	movs	r0, r6
 8007396:	f000 f83f 	bl	8007418 <_sbrk_r>
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	d12b      	bne.n	80073f6 <_malloc_r+0x9a>
 800739e:	230c      	movs	r3, #12
 80073a0:	0030      	movs	r0, r6
 80073a2:	6033      	str	r3, [r6, #0]
 80073a4:	f000 f8f5 	bl	8007592 <__malloc_unlock>
 80073a8:	e003      	b.n	80073b2 <_malloc_r+0x56>
 80073aa:	2d00      	cmp	r5, #0
 80073ac:	dadf      	bge.n	800736e <_malloc_r+0x12>
 80073ae:	230c      	movs	r3, #12
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	2000      	movs	r0, #0
 80073b4:	bd70      	pop	{r4, r5, r6, pc}
 80073b6:	680b      	ldr	r3, [r1, #0]
 80073b8:	1b5b      	subs	r3, r3, r5
 80073ba:	d419      	bmi.n	80073f0 <_malloc_r+0x94>
 80073bc:	2b0b      	cmp	r3, #11
 80073be:	d903      	bls.n	80073c8 <_malloc_r+0x6c>
 80073c0:	600b      	str	r3, [r1, #0]
 80073c2:	18cc      	adds	r4, r1, r3
 80073c4:	6025      	str	r5, [r4, #0]
 80073c6:	e003      	b.n	80073d0 <_malloc_r+0x74>
 80073c8:	684b      	ldr	r3, [r1, #4]
 80073ca:	428c      	cmp	r4, r1
 80073cc:	d10d      	bne.n	80073ea <_malloc_r+0x8e>
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	0030      	movs	r0, r6
 80073d2:	f000 f8de 	bl	8007592 <__malloc_unlock>
 80073d6:	0020      	movs	r0, r4
 80073d8:	2207      	movs	r2, #7
 80073da:	300b      	adds	r0, #11
 80073dc:	1d23      	adds	r3, r4, #4
 80073de:	4390      	bics	r0, r2
 80073e0:	1ac3      	subs	r3, r0, r3
 80073e2:	d0e7      	beq.n	80073b4 <_malloc_r+0x58>
 80073e4:	425a      	negs	r2, r3
 80073e6:	50e2      	str	r2, [r4, r3]
 80073e8:	e7e4      	b.n	80073b4 <_malloc_r+0x58>
 80073ea:	6063      	str	r3, [r4, #4]
 80073ec:	000c      	movs	r4, r1
 80073ee:	e7ef      	b.n	80073d0 <_malloc_r+0x74>
 80073f0:	000c      	movs	r4, r1
 80073f2:	6849      	ldr	r1, [r1, #4]
 80073f4:	e7c3      	b.n	800737e <_malloc_r+0x22>
 80073f6:	2303      	movs	r3, #3
 80073f8:	1cc4      	adds	r4, r0, #3
 80073fa:	439c      	bics	r4, r3
 80073fc:	42a0      	cmp	r0, r4
 80073fe:	d0e1      	beq.n	80073c4 <_malloc_r+0x68>
 8007400:	1a21      	subs	r1, r4, r0
 8007402:	0030      	movs	r0, r6
 8007404:	f000 f808 	bl	8007418 <_sbrk_r>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d1db      	bne.n	80073c4 <_malloc_r+0x68>
 800740c:	e7c7      	b.n	800739e <_malloc_r+0x42>
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	200005bc 	.word	0x200005bc
 8007414:	200005c0 	.word	0x200005c0

08007418 <_sbrk_r>:
 8007418:	2300      	movs	r3, #0
 800741a:	b570      	push	{r4, r5, r6, lr}
 800741c:	4c06      	ldr	r4, [pc, #24]	; (8007438 <_sbrk_r+0x20>)
 800741e:	0005      	movs	r5, r0
 8007420:	0008      	movs	r0, r1
 8007422:	6023      	str	r3, [r4, #0]
 8007424:	f7fa fcc8 	bl	8001db8 <_sbrk>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d103      	bne.n	8007434 <_sbrk_r+0x1c>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d000      	beq.n	8007434 <_sbrk_r+0x1c>
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	bd70      	pop	{r4, r5, r6, pc}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	20000af4 	.word	0x20000af4

0800743c <__sread>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	000c      	movs	r4, r1
 8007440:	250e      	movs	r5, #14
 8007442:	5f49      	ldrsh	r1, [r1, r5]
 8007444:	f000 f8a6 	bl	8007594 <_read_r>
 8007448:	2800      	cmp	r0, #0
 800744a:	db03      	blt.n	8007454 <__sread+0x18>
 800744c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800744e:	181b      	adds	r3, r3, r0
 8007450:	6563      	str	r3, [r4, #84]	; 0x54
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	4a02      	ldr	r2, [pc, #8]	; (8007460 <__sread+0x24>)
 8007458:	4013      	ands	r3, r2
 800745a:	81a3      	strh	r3, [r4, #12]
 800745c:	e7f9      	b.n	8007452 <__sread+0x16>
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	ffffefff 	.word	0xffffefff

08007464 <__swrite>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	001f      	movs	r7, r3
 8007468:	898b      	ldrh	r3, [r1, #12]
 800746a:	0005      	movs	r5, r0
 800746c:	000c      	movs	r4, r1
 800746e:	0016      	movs	r6, r2
 8007470:	05db      	lsls	r3, r3, #23
 8007472:	d505      	bpl.n	8007480 <__swrite+0x1c>
 8007474:	230e      	movs	r3, #14
 8007476:	5ec9      	ldrsh	r1, [r1, r3]
 8007478:	2200      	movs	r2, #0
 800747a:	2302      	movs	r3, #2
 800747c:	f000 f874 	bl	8007568 <_lseek_r>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	4a05      	ldr	r2, [pc, #20]	; (8007498 <__swrite+0x34>)
 8007484:	0028      	movs	r0, r5
 8007486:	4013      	ands	r3, r2
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	0032      	movs	r2, r6
 800748c:	230e      	movs	r3, #14
 800748e:	5ee1      	ldrsh	r1, [r4, r3]
 8007490:	003b      	movs	r3, r7
 8007492:	f000 f81f 	bl	80074d4 <_write_r>
 8007496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007498:	ffffefff 	.word	0xffffefff

0800749c <__sseek>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	000c      	movs	r4, r1
 80074a0:	250e      	movs	r5, #14
 80074a2:	5f49      	ldrsh	r1, [r1, r5]
 80074a4:	f000 f860 	bl	8007568 <_lseek_r>
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	1c42      	adds	r2, r0, #1
 80074ac:	d103      	bne.n	80074b6 <__sseek+0x1a>
 80074ae:	4a05      	ldr	r2, [pc, #20]	; (80074c4 <__sseek+0x28>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
 80074b6:	2280      	movs	r2, #128	; 0x80
 80074b8:	0152      	lsls	r2, r2, #5
 80074ba:	4313      	orrs	r3, r2
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	6560      	str	r0, [r4, #84]	; 0x54
 80074c0:	e7f8      	b.n	80074b4 <__sseek+0x18>
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	ffffefff 	.word	0xffffefff

080074c8 <__sclose>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	230e      	movs	r3, #14
 80074cc:	5ec9      	ldrsh	r1, [r1, r3]
 80074ce:	f000 f815 	bl	80074fc <_close_r>
 80074d2:	bd10      	pop	{r4, pc}

080074d4 <_write_r>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	0005      	movs	r5, r0
 80074d8:	0008      	movs	r0, r1
 80074da:	0011      	movs	r1, r2
 80074dc:	2200      	movs	r2, #0
 80074de:	4c06      	ldr	r4, [pc, #24]	; (80074f8 <_write_r+0x24>)
 80074e0:	6022      	str	r2, [r4, #0]
 80074e2:	001a      	movs	r2, r3
 80074e4:	f7fa fc1f 	bl	8001d26 <_write>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d103      	bne.n	80074f4 <_write_r+0x20>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d000      	beq.n	80074f4 <_write_r+0x20>
 80074f2:	602b      	str	r3, [r5, #0]
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	20000af4 	.word	0x20000af4

080074fc <_close_r>:
 80074fc:	2300      	movs	r3, #0
 80074fe:	b570      	push	{r4, r5, r6, lr}
 8007500:	4c06      	ldr	r4, [pc, #24]	; (800751c <_close_r+0x20>)
 8007502:	0005      	movs	r5, r0
 8007504:	0008      	movs	r0, r1
 8007506:	6023      	str	r3, [r4, #0]
 8007508:	f7fa fc29 	bl	8001d5e <_close>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d103      	bne.n	8007518 <_close_r+0x1c>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d000      	beq.n	8007518 <_close_r+0x1c>
 8007516:	602b      	str	r3, [r5, #0]
 8007518:	bd70      	pop	{r4, r5, r6, pc}
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	20000af4 	.word	0x20000af4

08007520 <_fstat_r>:
 8007520:	2300      	movs	r3, #0
 8007522:	b570      	push	{r4, r5, r6, lr}
 8007524:	4c06      	ldr	r4, [pc, #24]	; (8007540 <_fstat_r+0x20>)
 8007526:	0005      	movs	r5, r0
 8007528:	0008      	movs	r0, r1
 800752a:	0011      	movs	r1, r2
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	f7fa fc20 	bl	8001d72 <_fstat>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	d103      	bne.n	800753e <_fstat_r+0x1e>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d000      	beq.n	800753e <_fstat_r+0x1e>
 800753c:	602b      	str	r3, [r5, #0]
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	20000af4 	.word	0x20000af4

08007544 <_isatty_r>:
 8007544:	2300      	movs	r3, #0
 8007546:	b570      	push	{r4, r5, r6, lr}
 8007548:	4c06      	ldr	r4, [pc, #24]	; (8007564 <_isatty_r+0x20>)
 800754a:	0005      	movs	r5, r0
 800754c:	0008      	movs	r0, r1
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	f7fa fc1d 	bl	8001d8e <_isatty>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d103      	bne.n	8007560 <_isatty_r+0x1c>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d000      	beq.n	8007560 <_isatty_r+0x1c>
 800755e:	602b      	str	r3, [r5, #0]
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	20000af4 	.word	0x20000af4

08007568 <_lseek_r>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	0005      	movs	r5, r0
 800756c:	0008      	movs	r0, r1
 800756e:	0011      	movs	r1, r2
 8007570:	2200      	movs	r2, #0
 8007572:	4c06      	ldr	r4, [pc, #24]	; (800758c <_lseek_r+0x24>)
 8007574:	6022      	str	r2, [r4, #0]
 8007576:	001a      	movs	r2, r3
 8007578:	f7fa fc12 	bl	8001da0 <_lseek>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d103      	bne.n	8007588 <_lseek_r+0x20>
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d000      	beq.n	8007588 <_lseek_r+0x20>
 8007586:	602b      	str	r3, [r5, #0]
 8007588:	bd70      	pop	{r4, r5, r6, pc}
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	20000af4 	.word	0x20000af4

08007590 <__malloc_lock>:
 8007590:	4770      	bx	lr

08007592 <__malloc_unlock>:
 8007592:	4770      	bx	lr

08007594 <_read_r>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	0005      	movs	r5, r0
 8007598:	0008      	movs	r0, r1
 800759a:	0011      	movs	r1, r2
 800759c:	2200      	movs	r2, #0
 800759e:	4c06      	ldr	r4, [pc, #24]	; (80075b8 <_read_r+0x24>)
 80075a0:	6022      	str	r2, [r4, #0]
 80075a2:	001a      	movs	r2, r3
 80075a4:	f7fa fba2 	bl	8001cec <_read>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d103      	bne.n	80075b4 <_read_r+0x20>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d000      	beq.n	80075b4 <_read_r+0x20>
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	bd70      	pop	{r4, r5, r6, pc}
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	20000af4 	.word	0x20000af4

080075bc <_init>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c2:	bc08      	pop	{r3}
 80075c4:	469e      	mov	lr, r3
 80075c6:	4770      	bx	lr

080075c8 <_fini>:
 80075c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ce:	bc08      	pop	{r3}
 80075d0:	469e      	mov	lr, r3
 80075d2:	4770      	bx	lr

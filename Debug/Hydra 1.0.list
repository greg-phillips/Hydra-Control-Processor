
Hydra 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008458  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08008514  08008514  00018514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800870c  0800870c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800870c  0800870c  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008714  08008714  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008718  08008718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800871c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  20000070  0800878c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  0800878c  00020868  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139a5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a16  00000000  00000000  00033a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  00036458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe0  00000000  00000000  00037590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017bd4  00000000  00000000  00038570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa1a  00000000  00000000  00050144  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a43c  00000000  00000000  0005fb5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9f9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  000fa018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080084fc 	.word	0x080084fc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080084fc 	.word	0x080084fc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fad3 	bl	80009a4 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fa55 	bl	80008b8 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fac5 	bl	80009a4 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fabb 	bl	80009a4 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fa63 	bl	8000908 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fa59 	bl	8000908 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	1c08      	adds	r0, r1, #0
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	; (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	; (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f83c 	bl	8000510 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_f2uiz>:
 80004a4:	219e      	movs	r1, #158	; 0x9e
 80004a6:	b510      	push	{r4, lr}
 80004a8:	05c9      	lsls	r1, r1, #23
 80004aa:	1c04      	adds	r4, r0, #0
 80004ac:	f7ff ffd0 	bl	8000450 <__aeabi_fcmpge>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d103      	bne.n	80004bc <__aeabi_f2uiz+0x18>
 80004b4:	1c20      	adds	r0, r4, #0
 80004b6:	f000 fdbb 	bl	8001030 <__aeabi_f2iz>
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	219e      	movs	r1, #158	; 0x9e
 80004be:	1c20      	adds	r0, r4, #0
 80004c0:	05c9      	lsls	r1, r1, #23
 80004c2:	f000 fbf1 	bl	8000ca8 <__aeabi_fsub>
 80004c6:	f000 fdb3 	bl	8001030 <__aeabi_f2iz>
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	469c      	mov	ip, r3
 80004d0:	4460      	add	r0, ip
 80004d2:	e7f2      	b.n	80004ba <__aeabi_f2uiz+0x16>

080004d4 <__aeabi_d2uiz>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2200      	movs	r2, #0
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <__aeabi_d2uiz+0x38>)
 80004da:	0004      	movs	r4, r0
 80004dc:	000d      	movs	r5, r1
 80004de:	f001 fd3b 	bl	8001f58 <__aeabi_dcmpge>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d104      	bne.n	80004f0 <__aeabi_d2uiz+0x1c>
 80004e6:	0020      	movs	r0, r4
 80004e8:	0029      	movs	r1, r5
 80004ea:	f001 fbbb 	bl	8001c64 <__aeabi_d2iz>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <__aeabi_d2uiz+0x38>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0020      	movs	r0, r4
 80004f6:	0029      	movs	r1, r5
 80004f8:	f001 f86c 	bl	80015d4 <__aeabi_dsub>
 80004fc:	f001 fbb2 	bl	8001c64 <__aeabi_d2iz>
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	469c      	mov	ip, r3
 8000506:	4460      	add	r0, ip
 8000508:	e7f1      	b.n	80004ee <__aeabi_d2uiz+0x1a>
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	41e00000 	.word	0x41e00000

08000510 <__udivmoddi4>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	464f      	mov	r7, r9
 8000514:	4646      	mov	r6, r8
 8000516:	46d6      	mov	lr, sl
 8000518:	b5c0      	push	{r6, r7, lr}
 800051a:	0004      	movs	r4, r0
 800051c:	b082      	sub	sp, #8
 800051e:	000d      	movs	r5, r1
 8000520:	4691      	mov	r9, r2
 8000522:	4698      	mov	r8, r3
 8000524:	428b      	cmp	r3, r1
 8000526:	d82f      	bhi.n	8000588 <__udivmoddi4+0x78>
 8000528:	d02c      	beq.n	8000584 <__udivmoddi4+0x74>
 800052a:	4641      	mov	r1, r8
 800052c:	4648      	mov	r0, r9
 800052e:	f001 fd3b 	bl	8001fa8 <__clzdi2>
 8000532:	0029      	movs	r1, r5
 8000534:	0006      	movs	r6, r0
 8000536:	0020      	movs	r0, r4
 8000538:	f001 fd36 	bl	8001fa8 <__clzdi2>
 800053c:	1a33      	subs	r3, r6, r0
 800053e:	469c      	mov	ip, r3
 8000540:	3b20      	subs	r3, #32
 8000542:	469a      	mov	sl, r3
 8000544:	d500      	bpl.n	8000548 <__udivmoddi4+0x38>
 8000546:	e076      	b.n	8000636 <__udivmoddi4+0x126>
 8000548:	464b      	mov	r3, r9
 800054a:	4652      	mov	r2, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001f      	movs	r7, r3
 8000550:	464b      	mov	r3, r9
 8000552:	4662      	mov	r2, ip
 8000554:	4093      	lsls	r3, r2
 8000556:	001e      	movs	r6, r3
 8000558:	42af      	cmp	r7, r5
 800055a:	d828      	bhi.n	80005ae <__udivmoddi4+0x9e>
 800055c:	d025      	beq.n	80005aa <__udivmoddi4+0x9a>
 800055e:	4653      	mov	r3, sl
 8000560:	1ba4      	subs	r4, r4, r6
 8000562:	41bd      	sbcs	r5, r7
 8000564:	2b00      	cmp	r3, #0
 8000566:	da00      	bge.n	800056a <__udivmoddi4+0x5a>
 8000568:	e07b      	b.n	8000662 <__udivmoddi4+0x152>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	4652      	mov	r2, sl
 8000576:	4093      	lsls	r3, r2
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	4662      	mov	r2, ip
 800057e:	4093      	lsls	r3, r2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	e018      	b.n	80005b6 <__udivmoddi4+0xa6>
 8000584:	4282      	cmp	r2, r0
 8000586:	d9d0      	bls.n	800052a <__udivmoddi4+0x1a>
 8000588:	2200      	movs	r2, #0
 800058a:	2300      	movs	r3, #0
 800058c:	9200      	str	r2, [sp, #0]
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <__udivmoddi4+0x8a>
 8000596:	601c      	str	r4, [r3, #0]
 8000598:	605d      	str	r5, [r3, #4]
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	b002      	add	sp, #8
 80005a0:	bc1c      	pop	{r2, r3, r4}
 80005a2:	4690      	mov	r8, r2
 80005a4:	4699      	mov	r9, r3
 80005a6:	46a2      	mov	sl, r4
 80005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d9d7      	bls.n	800055e <__udivmoddi4+0x4e>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	4663      	mov	r3, ip
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e9      	beq.n	8000590 <__udivmoddi4+0x80>
 80005bc:	07fb      	lsls	r3, r7, #31
 80005be:	4698      	mov	r8, r3
 80005c0:	4641      	mov	r1, r8
 80005c2:	0872      	lsrs	r2, r6, #1
 80005c4:	430a      	orrs	r2, r1
 80005c6:	087b      	lsrs	r3, r7, #1
 80005c8:	4666      	mov	r6, ip
 80005ca:	e00e      	b.n	80005ea <__udivmoddi4+0xda>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d101      	bne.n	80005d4 <__udivmoddi4+0xc4>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	d80c      	bhi.n	80005ee <__udivmoddi4+0xde>
 80005d4:	1aa4      	subs	r4, r4, r2
 80005d6:	419d      	sbcs	r5, r3
 80005d8:	2001      	movs	r0, #1
 80005da:	1924      	adds	r4, r4, r4
 80005dc:	416d      	adcs	r5, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1824      	adds	r4, r4, r0
 80005e4:	414d      	adcs	r5, r1
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d006      	beq.n	80005f8 <__udivmoddi4+0xe8>
 80005ea:	42ab      	cmp	r3, r5
 80005ec:	d9ee      	bls.n	80005cc <__udivmoddi4+0xbc>
 80005ee:	3e01      	subs	r6, #1
 80005f0:	1924      	adds	r4, r4, r4
 80005f2:	416d      	adcs	r5, r5
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d1f8      	bne.n	80005ea <__udivmoddi4+0xda>
 80005f8:	9800      	ldr	r0, [sp, #0]
 80005fa:	9901      	ldr	r1, [sp, #4]
 80005fc:	4653      	mov	r3, sl
 80005fe:	1900      	adds	r0, r0, r4
 8000600:	4169      	adcs	r1, r5
 8000602:	2b00      	cmp	r3, #0
 8000604:	db23      	blt.n	800064e <__udivmoddi4+0x13e>
 8000606:	002b      	movs	r3, r5
 8000608:	4652      	mov	r2, sl
 800060a:	40d3      	lsrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4664      	mov	r4, ip
 8000610:	40e2      	lsrs	r2, r4
 8000612:	001c      	movs	r4, r3
 8000614:	4653      	mov	r3, sl
 8000616:	0015      	movs	r5, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	db2d      	blt.n	8000678 <__udivmoddi4+0x168>
 800061c:	0026      	movs	r6, r4
 800061e:	4657      	mov	r7, sl
 8000620:	40be      	lsls	r6, r7
 8000622:	0033      	movs	r3, r6
 8000624:	0026      	movs	r6, r4
 8000626:	4667      	mov	r7, ip
 8000628:	40be      	lsls	r6, r7
 800062a:	0032      	movs	r2, r6
 800062c:	1a80      	subs	r0, r0, r2
 800062e:	4199      	sbcs	r1, r3
 8000630:	9000      	str	r0, [sp, #0]
 8000632:	9101      	str	r1, [sp, #4]
 8000634:	e7ac      	b.n	8000590 <__udivmoddi4+0x80>
 8000636:	4662      	mov	r2, ip
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	464a      	mov	r2, r9
 800063e:	40da      	lsrs	r2, r3
 8000640:	4661      	mov	r1, ip
 8000642:	0013      	movs	r3, r2
 8000644:	4642      	mov	r2, r8
 8000646:	408a      	lsls	r2, r1
 8000648:	0017      	movs	r7, r2
 800064a:	431f      	orrs	r7, r3
 800064c:	e780      	b.n	8000550 <__udivmoddi4+0x40>
 800064e:	4662      	mov	r2, ip
 8000650:	2320      	movs	r3, #32
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	002a      	movs	r2, r5
 8000656:	4666      	mov	r6, ip
 8000658:	409a      	lsls	r2, r3
 800065a:	0023      	movs	r3, r4
 800065c:	40f3      	lsrs	r3, r6
 800065e:	4313      	orrs	r3, r2
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0xfc>
 8000662:	4662      	mov	r2, ip
 8000664:	2320      	movs	r3, #32
 8000666:	2100      	movs	r1, #0
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	2200      	movs	r2, #0
 800066c:	9100      	str	r1, [sp, #0]
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	2201      	movs	r2, #1
 8000672:	40da      	lsrs	r2, r3
 8000674:	9201      	str	r2, [sp, #4]
 8000676:	e780      	b.n	800057a <__udivmoddi4+0x6a>
 8000678:	2320      	movs	r3, #32
 800067a:	4662      	mov	r2, ip
 800067c:	0026      	movs	r6, r4
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	40de      	lsrs	r6, r3
 8000682:	002f      	movs	r7, r5
 8000684:	46b0      	mov	r8, r6
 8000686:	4666      	mov	r6, ip
 8000688:	40b7      	lsls	r7, r6
 800068a:	4646      	mov	r6, r8
 800068c:	003b      	movs	r3, r7
 800068e:	4333      	orrs	r3, r6
 8000690:	e7c8      	b.n	8000624 <__udivmoddi4+0x114>
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <__aeabi_fdiv>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	4657      	mov	r7, sl
 8000698:	464e      	mov	r6, r9
 800069a:	4645      	mov	r5, r8
 800069c:	46de      	mov	lr, fp
 800069e:	0244      	lsls	r4, r0, #9
 80006a0:	b5e0      	push	{r5, r6, r7, lr}
 80006a2:	0046      	lsls	r6, r0, #1
 80006a4:	4688      	mov	r8, r1
 80006a6:	0a64      	lsrs	r4, r4, #9
 80006a8:	0e36      	lsrs	r6, r6, #24
 80006aa:	0fc7      	lsrs	r7, r0, #31
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d063      	beq.n	8000778 <__aeabi_fdiv+0xe4>
 80006b0:	2eff      	cmp	r6, #255	; 0xff
 80006b2:	d024      	beq.n	80006fe <__aeabi_fdiv+0x6a>
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	00e4      	lsls	r4, r4, #3
 80006b8:	04db      	lsls	r3, r3, #19
 80006ba:	431c      	orrs	r4, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	4699      	mov	r9, r3
 80006c0:	469b      	mov	fp, r3
 80006c2:	3e7f      	subs	r6, #127	; 0x7f
 80006c4:	4643      	mov	r3, r8
 80006c6:	4642      	mov	r2, r8
 80006c8:	025d      	lsls	r5, r3, #9
 80006ca:	0fd2      	lsrs	r2, r2, #31
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	0a6d      	lsrs	r5, r5, #9
 80006d0:	0e1b      	lsrs	r3, r3, #24
 80006d2:	4690      	mov	r8, r2
 80006d4:	4692      	mov	sl, r2
 80006d6:	d065      	beq.n	80007a4 <__aeabi_fdiv+0x110>
 80006d8:	2bff      	cmp	r3, #255	; 0xff
 80006da:	d055      	beq.n	8000788 <__aeabi_fdiv+0xf4>
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	2100      	movs	r1, #0
 80006e0:	00ed      	lsls	r5, r5, #3
 80006e2:	04d2      	lsls	r2, r2, #19
 80006e4:	3b7f      	subs	r3, #127	; 0x7f
 80006e6:	4315      	orrs	r5, r2
 80006e8:	1af6      	subs	r6, r6, r3
 80006ea:	4643      	mov	r3, r8
 80006ec:	464a      	mov	r2, r9
 80006ee:	407b      	eors	r3, r7
 80006f0:	2a0f      	cmp	r2, #15
 80006f2:	d900      	bls.n	80006f6 <__aeabi_fdiv+0x62>
 80006f4:	e08d      	b.n	8000812 <__aeabi_fdiv+0x17e>
 80006f6:	486d      	ldr	r0, [pc, #436]	; (80008ac <__aeabi_fdiv+0x218>)
 80006f8:	0092      	lsls	r2, r2, #2
 80006fa:	5882      	ldr	r2, [r0, r2]
 80006fc:	4697      	mov	pc, r2
 80006fe:	2c00      	cmp	r4, #0
 8000700:	d154      	bne.n	80007ac <__aeabi_fdiv+0x118>
 8000702:	2308      	movs	r3, #8
 8000704:	4699      	mov	r9, r3
 8000706:	3b06      	subs	r3, #6
 8000708:	26ff      	movs	r6, #255	; 0xff
 800070a:	469b      	mov	fp, r3
 800070c:	e7da      	b.n	80006c4 <__aeabi_fdiv+0x30>
 800070e:	2500      	movs	r5, #0
 8000710:	4653      	mov	r3, sl
 8000712:	2902      	cmp	r1, #2
 8000714:	d01b      	beq.n	800074e <__aeabi_fdiv+0xba>
 8000716:	2903      	cmp	r1, #3
 8000718:	d100      	bne.n	800071c <__aeabi_fdiv+0x88>
 800071a:	e0bf      	b.n	800089c <__aeabi_fdiv+0x208>
 800071c:	2901      	cmp	r1, #1
 800071e:	d028      	beq.n	8000772 <__aeabi_fdiv+0xde>
 8000720:	0030      	movs	r0, r6
 8000722:	307f      	adds	r0, #127	; 0x7f
 8000724:	2800      	cmp	r0, #0
 8000726:	dd20      	ble.n	800076a <__aeabi_fdiv+0xd6>
 8000728:	076a      	lsls	r2, r5, #29
 800072a:	d004      	beq.n	8000736 <__aeabi_fdiv+0xa2>
 800072c:	220f      	movs	r2, #15
 800072e:	402a      	ands	r2, r5
 8000730:	2a04      	cmp	r2, #4
 8000732:	d000      	beq.n	8000736 <__aeabi_fdiv+0xa2>
 8000734:	3504      	adds	r5, #4
 8000736:	012a      	lsls	r2, r5, #4
 8000738:	d503      	bpl.n	8000742 <__aeabi_fdiv+0xae>
 800073a:	0030      	movs	r0, r6
 800073c:	4a5c      	ldr	r2, [pc, #368]	; (80008b0 <__aeabi_fdiv+0x21c>)
 800073e:	3080      	adds	r0, #128	; 0x80
 8000740:	4015      	ands	r5, r2
 8000742:	28fe      	cmp	r0, #254	; 0xfe
 8000744:	dc03      	bgt.n	800074e <__aeabi_fdiv+0xba>
 8000746:	01ac      	lsls	r4, r5, #6
 8000748:	0a64      	lsrs	r4, r4, #9
 800074a:	b2c2      	uxtb	r2, r0
 800074c:	e001      	b.n	8000752 <__aeabi_fdiv+0xbe>
 800074e:	22ff      	movs	r2, #255	; 0xff
 8000750:	2400      	movs	r4, #0
 8000752:	0264      	lsls	r4, r4, #9
 8000754:	05d2      	lsls	r2, r2, #23
 8000756:	0a60      	lsrs	r0, r4, #9
 8000758:	07db      	lsls	r3, r3, #31
 800075a:	4310      	orrs	r0, r2
 800075c:	4318      	orrs	r0, r3
 800075e:	bc3c      	pop	{r2, r3, r4, r5}
 8000760:	4690      	mov	r8, r2
 8000762:	4699      	mov	r9, r3
 8000764:	46a2      	mov	sl, r4
 8000766:	46ab      	mov	fp, r5
 8000768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800076a:	2201      	movs	r2, #1
 800076c:	1a10      	subs	r0, r2, r0
 800076e:	281b      	cmp	r0, #27
 8000770:	dd7c      	ble.n	800086c <__aeabi_fdiv+0x1d8>
 8000772:	2200      	movs	r2, #0
 8000774:	2400      	movs	r4, #0
 8000776:	e7ec      	b.n	8000752 <__aeabi_fdiv+0xbe>
 8000778:	2c00      	cmp	r4, #0
 800077a:	d11d      	bne.n	80007b8 <__aeabi_fdiv+0x124>
 800077c:	2304      	movs	r3, #4
 800077e:	4699      	mov	r9, r3
 8000780:	3b03      	subs	r3, #3
 8000782:	2600      	movs	r6, #0
 8000784:	469b      	mov	fp, r3
 8000786:	e79d      	b.n	80006c4 <__aeabi_fdiv+0x30>
 8000788:	3eff      	subs	r6, #255	; 0xff
 800078a:	2d00      	cmp	r5, #0
 800078c:	d120      	bne.n	80007d0 <__aeabi_fdiv+0x13c>
 800078e:	2102      	movs	r1, #2
 8000790:	4643      	mov	r3, r8
 8000792:	464a      	mov	r2, r9
 8000794:	407b      	eors	r3, r7
 8000796:	430a      	orrs	r2, r1
 8000798:	2a0f      	cmp	r2, #15
 800079a:	d8d8      	bhi.n	800074e <__aeabi_fdiv+0xba>
 800079c:	4845      	ldr	r0, [pc, #276]	; (80008b4 <__aeabi_fdiv+0x220>)
 800079e:	0092      	lsls	r2, r2, #2
 80007a0:	5882      	ldr	r2, [r0, r2]
 80007a2:	4697      	mov	pc, r2
 80007a4:	2d00      	cmp	r5, #0
 80007a6:	d119      	bne.n	80007dc <__aeabi_fdiv+0x148>
 80007a8:	2101      	movs	r1, #1
 80007aa:	e7f1      	b.n	8000790 <__aeabi_fdiv+0xfc>
 80007ac:	230c      	movs	r3, #12
 80007ae:	4699      	mov	r9, r3
 80007b0:	3b09      	subs	r3, #9
 80007b2:	26ff      	movs	r6, #255	; 0xff
 80007b4:	469b      	mov	fp, r3
 80007b6:	e785      	b.n	80006c4 <__aeabi_fdiv+0x30>
 80007b8:	0020      	movs	r0, r4
 80007ba:	f001 fbd7 	bl	8001f6c <__clzsi2>
 80007be:	2676      	movs	r6, #118	; 0x76
 80007c0:	1f43      	subs	r3, r0, #5
 80007c2:	409c      	lsls	r4, r3
 80007c4:	2300      	movs	r3, #0
 80007c6:	4276      	negs	r6, r6
 80007c8:	1a36      	subs	r6, r6, r0
 80007ca:	4699      	mov	r9, r3
 80007cc:	469b      	mov	fp, r3
 80007ce:	e779      	b.n	80006c4 <__aeabi_fdiv+0x30>
 80007d0:	464a      	mov	r2, r9
 80007d2:	2303      	movs	r3, #3
 80007d4:	431a      	orrs	r2, r3
 80007d6:	4691      	mov	r9, r2
 80007d8:	2103      	movs	r1, #3
 80007da:	e786      	b.n	80006ea <__aeabi_fdiv+0x56>
 80007dc:	0028      	movs	r0, r5
 80007de:	f001 fbc5 	bl	8001f6c <__clzsi2>
 80007e2:	1f43      	subs	r3, r0, #5
 80007e4:	1836      	adds	r6, r6, r0
 80007e6:	409d      	lsls	r5, r3
 80007e8:	3676      	adds	r6, #118	; 0x76
 80007ea:	2100      	movs	r1, #0
 80007ec:	e77d      	b.n	80006ea <__aeabi_fdiv+0x56>
 80007ee:	2480      	movs	r4, #128	; 0x80
 80007f0:	2300      	movs	r3, #0
 80007f2:	03e4      	lsls	r4, r4, #15
 80007f4:	22ff      	movs	r2, #255	; 0xff
 80007f6:	e7ac      	b.n	8000752 <__aeabi_fdiv+0xbe>
 80007f8:	2500      	movs	r5, #0
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	03db      	lsls	r3, r3, #15
 80007fe:	421c      	tst	r4, r3
 8000800:	d028      	beq.n	8000854 <__aeabi_fdiv+0x1c0>
 8000802:	421d      	tst	r5, r3
 8000804:	d126      	bne.n	8000854 <__aeabi_fdiv+0x1c0>
 8000806:	432b      	orrs	r3, r5
 8000808:	025c      	lsls	r4, r3, #9
 800080a:	0a64      	lsrs	r4, r4, #9
 800080c:	4643      	mov	r3, r8
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	e79f      	b.n	8000752 <__aeabi_fdiv+0xbe>
 8000812:	0162      	lsls	r2, r4, #5
 8000814:	016c      	lsls	r4, r5, #5
 8000816:	42a2      	cmp	r2, r4
 8000818:	d224      	bcs.n	8000864 <__aeabi_fdiv+0x1d0>
 800081a:	211b      	movs	r1, #27
 800081c:	2500      	movs	r5, #0
 800081e:	3e01      	subs	r6, #1
 8000820:	2701      	movs	r7, #1
 8000822:	0010      	movs	r0, r2
 8000824:	006d      	lsls	r5, r5, #1
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	2800      	cmp	r0, #0
 800082a:	db01      	blt.n	8000830 <__aeabi_fdiv+0x19c>
 800082c:	4294      	cmp	r4, r2
 800082e:	d801      	bhi.n	8000834 <__aeabi_fdiv+0x1a0>
 8000830:	1b12      	subs	r2, r2, r4
 8000832:	433d      	orrs	r5, r7
 8000834:	3901      	subs	r1, #1
 8000836:	2900      	cmp	r1, #0
 8000838:	d1f3      	bne.n	8000822 <__aeabi_fdiv+0x18e>
 800083a:	0014      	movs	r4, r2
 800083c:	1e62      	subs	r2, r4, #1
 800083e:	4194      	sbcs	r4, r2
 8000840:	4325      	orrs	r5, r4
 8000842:	e76d      	b.n	8000720 <__aeabi_fdiv+0x8c>
 8000844:	46ba      	mov	sl, r7
 8000846:	4659      	mov	r1, fp
 8000848:	0025      	movs	r5, r4
 800084a:	4653      	mov	r3, sl
 800084c:	2902      	cmp	r1, #2
 800084e:	d000      	beq.n	8000852 <__aeabi_fdiv+0x1be>
 8000850:	e761      	b.n	8000716 <__aeabi_fdiv+0x82>
 8000852:	e77c      	b.n	800074e <__aeabi_fdiv+0xba>
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	03db      	lsls	r3, r3, #15
 8000858:	431c      	orrs	r4, r3
 800085a:	0264      	lsls	r4, r4, #9
 800085c:	0a64      	lsrs	r4, r4, #9
 800085e:	003b      	movs	r3, r7
 8000860:	22ff      	movs	r2, #255	; 0xff
 8000862:	e776      	b.n	8000752 <__aeabi_fdiv+0xbe>
 8000864:	1b12      	subs	r2, r2, r4
 8000866:	211a      	movs	r1, #26
 8000868:	2501      	movs	r5, #1
 800086a:	e7d9      	b.n	8000820 <__aeabi_fdiv+0x18c>
 800086c:	369e      	adds	r6, #158	; 0x9e
 800086e:	002a      	movs	r2, r5
 8000870:	40b5      	lsls	r5, r6
 8000872:	002c      	movs	r4, r5
 8000874:	40c2      	lsrs	r2, r0
 8000876:	1e65      	subs	r5, r4, #1
 8000878:	41ac      	sbcs	r4, r5
 800087a:	4314      	orrs	r4, r2
 800087c:	0762      	lsls	r2, r4, #29
 800087e:	d004      	beq.n	800088a <__aeabi_fdiv+0x1f6>
 8000880:	220f      	movs	r2, #15
 8000882:	4022      	ands	r2, r4
 8000884:	2a04      	cmp	r2, #4
 8000886:	d000      	beq.n	800088a <__aeabi_fdiv+0x1f6>
 8000888:	3404      	adds	r4, #4
 800088a:	0162      	lsls	r2, r4, #5
 800088c:	d403      	bmi.n	8000896 <__aeabi_fdiv+0x202>
 800088e:	01a4      	lsls	r4, r4, #6
 8000890:	0a64      	lsrs	r4, r4, #9
 8000892:	2200      	movs	r2, #0
 8000894:	e75d      	b.n	8000752 <__aeabi_fdiv+0xbe>
 8000896:	2201      	movs	r2, #1
 8000898:	2400      	movs	r4, #0
 800089a:	e75a      	b.n	8000752 <__aeabi_fdiv+0xbe>
 800089c:	2480      	movs	r4, #128	; 0x80
 800089e:	03e4      	lsls	r4, r4, #15
 80008a0:	432c      	orrs	r4, r5
 80008a2:	0264      	lsls	r4, r4, #9
 80008a4:	0a64      	lsrs	r4, r4, #9
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	e753      	b.n	8000752 <__aeabi_fdiv+0xbe>
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	08008548 	.word	0x08008548
 80008b0:	f7ffffff 	.word	0xf7ffffff
 80008b4:	08008588 	.word	0x08008588

080008b8 <__eqsf2>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	0042      	lsls	r2, r0, #1
 80008bc:	024e      	lsls	r6, r1, #9
 80008be:	004c      	lsls	r4, r1, #1
 80008c0:	0245      	lsls	r5, r0, #9
 80008c2:	0a6d      	lsrs	r5, r5, #9
 80008c4:	0e12      	lsrs	r2, r2, #24
 80008c6:	0fc3      	lsrs	r3, r0, #31
 80008c8:	0a76      	lsrs	r6, r6, #9
 80008ca:	0e24      	lsrs	r4, r4, #24
 80008cc:	0fc9      	lsrs	r1, r1, #31
 80008ce:	2aff      	cmp	r2, #255	; 0xff
 80008d0:	d00f      	beq.n	80008f2 <__eqsf2+0x3a>
 80008d2:	2cff      	cmp	r4, #255	; 0xff
 80008d4:	d011      	beq.n	80008fa <__eqsf2+0x42>
 80008d6:	2001      	movs	r0, #1
 80008d8:	42a2      	cmp	r2, r4
 80008da:	d000      	beq.n	80008de <__eqsf2+0x26>
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	42b5      	cmp	r5, r6
 80008e0:	d1fc      	bne.n	80008dc <__eqsf2+0x24>
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d00d      	beq.n	8000902 <__eqsf2+0x4a>
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d1f8      	bne.n	80008dc <__eqsf2+0x24>
 80008ea:	0028      	movs	r0, r5
 80008ec:	1e45      	subs	r5, r0, #1
 80008ee:	41a8      	sbcs	r0, r5
 80008f0:	e7f4      	b.n	80008dc <__eqsf2+0x24>
 80008f2:	2001      	movs	r0, #1
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d1f1      	bne.n	80008dc <__eqsf2+0x24>
 80008f8:	e7eb      	b.n	80008d2 <__eqsf2+0x1a>
 80008fa:	2001      	movs	r0, #1
 80008fc:	2e00      	cmp	r6, #0
 80008fe:	d1ed      	bne.n	80008dc <__eqsf2+0x24>
 8000900:	e7e9      	b.n	80008d6 <__eqsf2+0x1e>
 8000902:	2000      	movs	r0, #0
 8000904:	e7ea      	b.n	80008dc <__eqsf2+0x24>
 8000906:	46c0      	nop			; (mov r8, r8)

08000908 <__gesf2>:
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	004a      	lsls	r2, r1, #1
 800090c:	024e      	lsls	r6, r1, #9
 800090e:	0245      	lsls	r5, r0, #9
 8000910:	0044      	lsls	r4, r0, #1
 8000912:	0a6d      	lsrs	r5, r5, #9
 8000914:	0e24      	lsrs	r4, r4, #24
 8000916:	0fc3      	lsrs	r3, r0, #31
 8000918:	0a76      	lsrs	r6, r6, #9
 800091a:	0e12      	lsrs	r2, r2, #24
 800091c:	0fc9      	lsrs	r1, r1, #31
 800091e:	2cff      	cmp	r4, #255	; 0xff
 8000920:	d015      	beq.n	800094e <__gesf2+0x46>
 8000922:	2aff      	cmp	r2, #255	; 0xff
 8000924:	d00e      	beq.n	8000944 <__gesf2+0x3c>
 8000926:	2c00      	cmp	r4, #0
 8000928:	d115      	bne.n	8000956 <__gesf2+0x4e>
 800092a:	2a00      	cmp	r2, #0
 800092c:	d101      	bne.n	8000932 <__gesf2+0x2a>
 800092e:	2e00      	cmp	r6, #0
 8000930:	d01c      	beq.n	800096c <__gesf2+0x64>
 8000932:	2d00      	cmp	r5, #0
 8000934:	d014      	beq.n	8000960 <__gesf2+0x58>
 8000936:	428b      	cmp	r3, r1
 8000938:	d027      	beq.n	800098a <__gesf2+0x82>
 800093a:	2002      	movs	r0, #2
 800093c:	3b01      	subs	r3, #1
 800093e:	4018      	ands	r0, r3
 8000940:	3801      	subs	r0, #1
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	2e00      	cmp	r6, #0
 8000946:	d0ee      	beq.n	8000926 <__gesf2+0x1e>
 8000948:	2002      	movs	r0, #2
 800094a:	4240      	negs	r0, r0
 800094c:	e7f9      	b.n	8000942 <__gesf2+0x3a>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d1fa      	bne.n	8000948 <__gesf2+0x40>
 8000952:	2aff      	cmp	r2, #255	; 0xff
 8000954:	d00e      	beq.n	8000974 <__gesf2+0x6c>
 8000956:	2a00      	cmp	r2, #0
 8000958:	d10e      	bne.n	8000978 <__gesf2+0x70>
 800095a:	2e00      	cmp	r6, #0
 800095c:	d0ed      	beq.n	800093a <__gesf2+0x32>
 800095e:	e00b      	b.n	8000978 <__gesf2+0x70>
 8000960:	2301      	movs	r3, #1
 8000962:	3901      	subs	r1, #1
 8000964:	4399      	bics	r1, r3
 8000966:	0008      	movs	r0, r1
 8000968:	3001      	adds	r0, #1
 800096a:	e7ea      	b.n	8000942 <__gesf2+0x3a>
 800096c:	2000      	movs	r0, #0
 800096e:	2d00      	cmp	r5, #0
 8000970:	d0e7      	beq.n	8000942 <__gesf2+0x3a>
 8000972:	e7e2      	b.n	800093a <__gesf2+0x32>
 8000974:	2e00      	cmp	r6, #0
 8000976:	d1e7      	bne.n	8000948 <__gesf2+0x40>
 8000978:	428b      	cmp	r3, r1
 800097a:	d1de      	bne.n	800093a <__gesf2+0x32>
 800097c:	4294      	cmp	r4, r2
 800097e:	dd05      	ble.n	800098c <__gesf2+0x84>
 8000980:	2102      	movs	r1, #2
 8000982:	1e58      	subs	r0, r3, #1
 8000984:	4008      	ands	r0, r1
 8000986:	3801      	subs	r0, #1
 8000988:	e7db      	b.n	8000942 <__gesf2+0x3a>
 800098a:	2400      	movs	r4, #0
 800098c:	42a2      	cmp	r2, r4
 800098e:	dc04      	bgt.n	800099a <__gesf2+0x92>
 8000990:	42b5      	cmp	r5, r6
 8000992:	d8d2      	bhi.n	800093a <__gesf2+0x32>
 8000994:	2000      	movs	r0, #0
 8000996:	42b5      	cmp	r5, r6
 8000998:	d2d3      	bcs.n	8000942 <__gesf2+0x3a>
 800099a:	1e58      	subs	r0, r3, #1
 800099c:	2301      	movs	r3, #1
 800099e:	4398      	bics	r0, r3
 80009a0:	3001      	adds	r0, #1
 80009a2:	e7ce      	b.n	8000942 <__gesf2+0x3a>

080009a4 <__lesf2>:
 80009a4:	b530      	push	{r4, r5, lr}
 80009a6:	0042      	lsls	r2, r0, #1
 80009a8:	0244      	lsls	r4, r0, #9
 80009aa:	024d      	lsls	r5, r1, #9
 80009ac:	0fc3      	lsrs	r3, r0, #31
 80009ae:	0048      	lsls	r0, r1, #1
 80009b0:	0a64      	lsrs	r4, r4, #9
 80009b2:	0e12      	lsrs	r2, r2, #24
 80009b4:	0a6d      	lsrs	r5, r5, #9
 80009b6:	0e00      	lsrs	r0, r0, #24
 80009b8:	0fc9      	lsrs	r1, r1, #31
 80009ba:	2aff      	cmp	r2, #255	; 0xff
 80009bc:	d012      	beq.n	80009e4 <__lesf2+0x40>
 80009be:	28ff      	cmp	r0, #255	; 0xff
 80009c0:	d00c      	beq.n	80009dc <__lesf2+0x38>
 80009c2:	2a00      	cmp	r2, #0
 80009c4:	d112      	bne.n	80009ec <__lesf2+0x48>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d119      	bne.n	80009fe <__lesf2+0x5a>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d117      	bne.n	80009fe <__lesf2+0x5a>
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	d02b      	beq.n	8000a2a <__lesf2+0x86>
 80009d2:	2002      	movs	r0, #2
 80009d4:	3b01      	subs	r3, #1
 80009d6:	4018      	ands	r0, r3
 80009d8:	3801      	subs	r0, #1
 80009da:	e026      	b.n	8000a2a <__lesf2+0x86>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d0f0      	beq.n	80009c2 <__lesf2+0x1e>
 80009e0:	2002      	movs	r0, #2
 80009e2:	e022      	b.n	8000a2a <__lesf2+0x86>
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d1fb      	bne.n	80009e0 <__lesf2+0x3c>
 80009e8:	28ff      	cmp	r0, #255	; 0xff
 80009ea:	d01f      	beq.n	8000a2c <__lesf2+0x88>
 80009ec:	2800      	cmp	r0, #0
 80009ee:	d11f      	bne.n	8000a30 <__lesf2+0x8c>
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d11d      	bne.n	8000a30 <__lesf2+0x8c>
 80009f4:	2002      	movs	r0, #2
 80009f6:	3b01      	subs	r3, #1
 80009f8:	4018      	ands	r0, r3
 80009fa:	3801      	subs	r0, #1
 80009fc:	e015      	b.n	8000a2a <__lesf2+0x86>
 80009fe:	2c00      	cmp	r4, #0
 8000a00:	d00e      	beq.n	8000a20 <__lesf2+0x7c>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d1e5      	bne.n	80009d2 <__lesf2+0x2e>
 8000a06:	2200      	movs	r2, #0
 8000a08:	4290      	cmp	r0, r2
 8000a0a:	dc04      	bgt.n	8000a16 <__lesf2+0x72>
 8000a0c:	42ac      	cmp	r4, r5
 8000a0e:	d8e0      	bhi.n	80009d2 <__lesf2+0x2e>
 8000a10:	2000      	movs	r0, #0
 8000a12:	42ac      	cmp	r4, r5
 8000a14:	d209      	bcs.n	8000a2a <__lesf2+0x86>
 8000a16:	1e58      	subs	r0, r3, #1
 8000a18:	2301      	movs	r3, #1
 8000a1a:	4398      	bics	r0, r3
 8000a1c:	3001      	adds	r0, #1
 8000a1e:	e004      	b.n	8000a2a <__lesf2+0x86>
 8000a20:	2301      	movs	r3, #1
 8000a22:	3901      	subs	r1, #1
 8000a24:	4399      	bics	r1, r3
 8000a26:	0008      	movs	r0, r1
 8000a28:	3001      	adds	r0, #1
 8000a2a:	bd30      	pop	{r4, r5, pc}
 8000a2c:	2d00      	cmp	r5, #0
 8000a2e:	d1d7      	bne.n	80009e0 <__lesf2+0x3c>
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d1ce      	bne.n	80009d2 <__lesf2+0x2e>
 8000a34:	4282      	cmp	r2, r0
 8000a36:	dde7      	ble.n	8000a08 <__lesf2+0x64>
 8000a38:	2102      	movs	r1, #2
 8000a3a:	1e58      	subs	r0, r3, #1
 8000a3c:	4008      	ands	r0, r1
 8000a3e:	3801      	subs	r0, #1
 8000a40:	e7f3      	b.n	8000a2a <__lesf2+0x86>
 8000a42:	46c0      	nop			; (mov r8, r8)

08000a44 <__aeabi_fmul>:
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	464e      	mov	r6, r9
 8000a48:	4657      	mov	r7, sl
 8000a4a:	4645      	mov	r5, r8
 8000a4c:	46de      	mov	lr, fp
 8000a4e:	b5e0      	push	{r5, r6, r7, lr}
 8000a50:	0243      	lsls	r3, r0, #9
 8000a52:	0a5b      	lsrs	r3, r3, #9
 8000a54:	0045      	lsls	r5, r0, #1
 8000a56:	b083      	sub	sp, #12
 8000a58:	1c0f      	adds	r7, r1, #0
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	0e2d      	lsrs	r5, r5, #24
 8000a5e:	0fc6      	lsrs	r6, r0, #31
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d057      	beq.n	8000b14 <__aeabi_fmul+0xd0>
 8000a64:	2dff      	cmp	r5, #255	; 0xff
 8000a66:	d024      	beq.n	8000ab2 <__aeabi_fmul+0x6e>
 8000a68:	2080      	movs	r0, #128	; 0x80
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	04c0      	lsls	r0, r0, #19
 8000a6e:	4318      	orrs	r0, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	4681      	mov	r9, r0
 8000a74:	469a      	mov	sl, r3
 8000a76:	469b      	mov	fp, r3
 8000a78:	3d7f      	subs	r5, #127	; 0x7f
 8000a7a:	027c      	lsls	r4, r7, #9
 8000a7c:	007a      	lsls	r2, r7, #1
 8000a7e:	0ffb      	lsrs	r3, r7, #31
 8000a80:	0a64      	lsrs	r4, r4, #9
 8000a82:	0e12      	lsrs	r2, r2, #24
 8000a84:	4698      	mov	r8, r3
 8000a86:	d023      	beq.n	8000ad0 <__aeabi_fmul+0x8c>
 8000a88:	2aff      	cmp	r2, #255	; 0xff
 8000a8a:	d04b      	beq.n	8000b24 <__aeabi_fmul+0xe0>
 8000a8c:	00e3      	lsls	r3, r4, #3
 8000a8e:	2480      	movs	r4, #128	; 0x80
 8000a90:	2000      	movs	r0, #0
 8000a92:	04e4      	lsls	r4, r4, #19
 8000a94:	3a7f      	subs	r2, #127	; 0x7f
 8000a96:	431c      	orrs	r4, r3
 8000a98:	18ad      	adds	r5, r5, r2
 8000a9a:	1c6b      	adds	r3, r5, #1
 8000a9c:	4647      	mov	r7, r8
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	4653      	mov	r3, sl
 8000aa2:	4077      	eors	r7, r6
 8000aa4:	003a      	movs	r2, r7
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d848      	bhi.n	8000b3c <__aeabi_fmul+0xf8>
 8000aaa:	497d      	ldr	r1, [pc, #500]	; (8000ca0 <__aeabi_fmul+0x25c>)
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	58cb      	ldr	r3, [r1, r3]
 8000ab0:	469f      	mov	pc, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_fmul+0x74>
 8000ab6:	e085      	b.n	8000bc4 <__aeabi_fmul+0x180>
 8000ab8:	3308      	adds	r3, #8
 8000aba:	469a      	mov	sl, r3
 8000abc:	3b06      	subs	r3, #6
 8000abe:	469b      	mov	fp, r3
 8000ac0:	027c      	lsls	r4, r7, #9
 8000ac2:	007a      	lsls	r2, r7, #1
 8000ac4:	0ffb      	lsrs	r3, r7, #31
 8000ac6:	25ff      	movs	r5, #255	; 0xff
 8000ac8:	0a64      	lsrs	r4, r4, #9
 8000aca:	0e12      	lsrs	r2, r2, #24
 8000acc:	4698      	mov	r8, r3
 8000ace:	d1db      	bne.n	8000a88 <__aeabi_fmul+0x44>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fmul+0x92>
 8000ad4:	e090      	b.n	8000bf8 <__aeabi_fmul+0x1b4>
 8000ad6:	4652      	mov	r2, sl
 8000ad8:	2301      	movs	r3, #1
 8000ada:	431a      	orrs	r2, r3
 8000adc:	4692      	mov	sl, r2
 8000ade:	2001      	movs	r0, #1
 8000ae0:	e7db      	b.n	8000a9a <__aeabi_fmul+0x56>
 8000ae2:	464c      	mov	r4, r9
 8000ae4:	4658      	mov	r0, fp
 8000ae6:	0017      	movs	r7, r2
 8000ae8:	2802      	cmp	r0, #2
 8000aea:	d024      	beq.n	8000b36 <__aeabi_fmul+0xf2>
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d100      	bne.n	8000af2 <__aeabi_fmul+0xae>
 8000af0:	e0cf      	b.n	8000c92 <__aeabi_fmul+0x24e>
 8000af2:	2200      	movs	r2, #0
 8000af4:	2300      	movs	r3, #0
 8000af6:	2801      	cmp	r0, #1
 8000af8:	d14d      	bne.n	8000b96 <__aeabi_fmul+0x152>
 8000afa:	0258      	lsls	r0, r3, #9
 8000afc:	05d2      	lsls	r2, r2, #23
 8000afe:	0a40      	lsrs	r0, r0, #9
 8000b00:	07ff      	lsls	r7, r7, #31
 8000b02:	4310      	orrs	r0, r2
 8000b04:	4338      	orrs	r0, r7
 8000b06:	b003      	add	sp, #12
 8000b08:	bc3c      	pop	{r2, r3, r4, r5}
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	4699      	mov	r9, r3
 8000b0e:	46a2      	mov	sl, r4
 8000b10:	46ab      	mov	fp, r5
 8000b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d15b      	bne.n	8000bd0 <__aeabi_fmul+0x18c>
 8000b18:	2304      	movs	r3, #4
 8000b1a:	469a      	mov	sl, r3
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	2500      	movs	r5, #0
 8000b20:	469b      	mov	fp, r3
 8000b22:	e7aa      	b.n	8000a7a <__aeabi_fmul+0x36>
 8000b24:	35ff      	adds	r5, #255	; 0xff
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d160      	bne.n	8000bec <__aeabi_fmul+0x1a8>
 8000b2a:	4652      	mov	r2, sl
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	4692      	mov	sl, r2
 8000b32:	2002      	movs	r0, #2
 8000b34:	e7b1      	b.n	8000a9a <__aeabi_fmul+0x56>
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e7de      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000b3c:	464b      	mov	r3, r9
 8000b3e:	0c1b      	lsrs	r3, r3, #16
 8000b40:	469c      	mov	ip, r3
 8000b42:	464b      	mov	r3, r9
 8000b44:	0426      	lsls	r6, r4, #16
 8000b46:	0c36      	lsrs	r6, r6, #16
 8000b48:	0418      	lsls	r0, r3, #16
 8000b4a:	4661      	mov	r1, ip
 8000b4c:	0033      	movs	r3, r6
 8000b4e:	0c22      	lsrs	r2, r4, #16
 8000b50:	4664      	mov	r4, ip
 8000b52:	0c00      	lsrs	r0, r0, #16
 8000b54:	4343      	muls	r3, r0
 8000b56:	434e      	muls	r6, r1
 8000b58:	4350      	muls	r0, r2
 8000b5a:	4354      	muls	r4, r2
 8000b5c:	1980      	adds	r0, r0, r6
 8000b5e:	0c1a      	lsrs	r2, r3, #16
 8000b60:	1812      	adds	r2, r2, r0
 8000b62:	4296      	cmp	r6, r2
 8000b64:	d903      	bls.n	8000b6e <__aeabi_fmul+0x12a>
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	0249      	lsls	r1, r1, #9
 8000b6a:	468c      	mov	ip, r1
 8000b6c:	4464      	add	r4, ip
 8000b6e:	041b      	lsls	r3, r3, #16
 8000b70:	0c1b      	lsrs	r3, r3, #16
 8000b72:	0410      	lsls	r0, r2, #16
 8000b74:	18c0      	adds	r0, r0, r3
 8000b76:	0183      	lsls	r3, r0, #6
 8000b78:	1e5e      	subs	r6, r3, #1
 8000b7a:	41b3      	sbcs	r3, r6
 8000b7c:	0e80      	lsrs	r0, r0, #26
 8000b7e:	4318      	orrs	r0, r3
 8000b80:	0c13      	lsrs	r3, r2, #16
 8000b82:	191b      	adds	r3, r3, r4
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	4303      	orrs	r3, r0
 8000b88:	001c      	movs	r4, r3
 8000b8a:	0123      	lsls	r3, r4, #4
 8000b8c:	d579      	bpl.n	8000c82 <__aeabi_fmul+0x23e>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	0862      	lsrs	r2, r4, #1
 8000b92:	401c      	ands	r4, r3
 8000b94:	4314      	orrs	r4, r2
 8000b96:	9a01      	ldr	r2, [sp, #4]
 8000b98:	327f      	adds	r2, #127	; 0x7f
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	dd4d      	ble.n	8000c3a <__aeabi_fmul+0x1f6>
 8000b9e:	0763      	lsls	r3, r4, #29
 8000ba0:	d004      	beq.n	8000bac <__aeabi_fmul+0x168>
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	4023      	ands	r3, r4
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d000      	beq.n	8000bac <__aeabi_fmul+0x168>
 8000baa:	3404      	adds	r4, #4
 8000bac:	0123      	lsls	r3, r4, #4
 8000bae:	d503      	bpl.n	8000bb8 <__aeabi_fmul+0x174>
 8000bb0:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <__aeabi_fmul+0x260>)
 8000bb2:	9a01      	ldr	r2, [sp, #4]
 8000bb4:	401c      	ands	r4, r3
 8000bb6:	3280      	adds	r2, #128	; 0x80
 8000bb8:	2afe      	cmp	r2, #254	; 0xfe
 8000bba:	dcbc      	bgt.n	8000b36 <__aeabi_fmul+0xf2>
 8000bbc:	01a3      	lsls	r3, r4, #6
 8000bbe:	0a5b      	lsrs	r3, r3, #9
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	e79a      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	469a      	mov	sl, r3
 8000bc8:	3b09      	subs	r3, #9
 8000bca:	25ff      	movs	r5, #255	; 0xff
 8000bcc:	469b      	mov	fp, r3
 8000bce:	e754      	b.n	8000a7a <__aeabi_fmul+0x36>
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f001 f9cb 	bl	8001f6c <__clzsi2>
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	1f43      	subs	r3, r0, #5
 8000bda:	2576      	movs	r5, #118	; 0x76
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	2300      	movs	r3, #0
 8000be0:	426d      	negs	r5, r5
 8000be2:	4691      	mov	r9, r2
 8000be4:	1a2d      	subs	r5, r5, r0
 8000be6:	469a      	mov	sl, r3
 8000be8:	469b      	mov	fp, r3
 8000bea:	e746      	b.n	8000a7a <__aeabi_fmul+0x36>
 8000bec:	4652      	mov	r2, sl
 8000bee:	2303      	movs	r3, #3
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	4692      	mov	sl, r2
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	e750      	b.n	8000a9a <__aeabi_fmul+0x56>
 8000bf8:	0020      	movs	r0, r4
 8000bfa:	f001 f9b7 	bl	8001f6c <__clzsi2>
 8000bfe:	1f43      	subs	r3, r0, #5
 8000c00:	1a2d      	subs	r5, r5, r0
 8000c02:	409c      	lsls	r4, r3
 8000c04:	3d76      	subs	r5, #118	; 0x76
 8000c06:	2000      	movs	r0, #0
 8000c08:	e747      	b.n	8000a9a <__aeabi_fmul+0x56>
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	03db      	lsls	r3, r3, #15
 8000c10:	22ff      	movs	r2, #255	; 0xff
 8000c12:	e772      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c14:	4642      	mov	r2, r8
 8000c16:	e766      	b.n	8000ae6 <__aeabi_fmul+0xa2>
 8000c18:	464c      	mov	r4, r9
 8000c1a:	0032      	movs	r2, r6
 8000c1c:	4658      	mov	r0, fp
 8000c1e:	e762      	b.n	8000ae6 <__aeabi_fmul+0xa2>
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	464a      	mov	r2, r9
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	421a      	tst	r2, r3
 8000c28:	d022      	beq.n	8000c70 <__aeabi_fmul+0x22c>
 8000c2a:	421c      	tst	r4, r3
 8000c2c:	d120      	bne.n	8000c70 <__aeabi_fmul+0x22c>
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	0a5b      	lsrs	r3, r3, #9
 8000c34:	4647      	mov	r7, r8
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	e75f      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	1a9a      	subs	r2, r3, r2
 8000c3e:	2a1b      	cmp	r2, #27
 8000c40:	dc21      	bgt.n	8000c86 <__aeabi_fmul+0x242>
 8000c42:	0023      	movs	r3, r4
 8000c44:	9901      	ldr	r1, [sp, #4]
 8000c46:	40d3      	lsrs	r3, r2
 8000c48:	319e      	adds	r1, #158	; 0x9e
 8000c4a:	408c      	lsls	r4, r1
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	0023      	movs	r3, r4
 8000c50:	1e5c      	subs	r4, r3, #1
 8000c52:	41a3      	sbcs	r3, r4
 8000c54:	4313      	orrs	r3, r2
 8000c56:	075a      	lsls	r2, r3, #29
 8000c58:	d004      	beq.n	8000c64 <__aeabi_fmul+0x220>
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	2a04      	cmp	r2, #4
 8000c60:	d000      	beq.n	8000c64 <__aeabi_fmul+0x220>
 8000c62:	3304      	adds	r3, #4
 8000c64:	015a      	lsls	r2, r3, #5
 8000c66:	d411      	bmi.n	8000c8c <__aeabi_fmul+0x248>
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	0a5b      	lsrs	r3, r3, #9
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	e744      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	464a      	mov	r2, r9
 8000c74:	03db      	lsls	r3, r3, #15
 8000c76:	4313      	orrs	r3, r2
 8000c78:	025b      	lsls	r3, r3, #9
 8000c7a:	0a5b      	lsrs	r3, r3, #9
 8000c7c:	0037      	movs	r7, r6
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	e73b      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c82:	9501      	str	r5, [sp, #4]
 8000c84:	e787      	b.n	8000b96 <__aeabi_fmul+0x152>
 8000c86:	2200      	movs	r2, #0
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e736      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e733      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	03db      	lsls	r3, r3, #15
 8000c96:	4323      	orrs	r3, r4
 8000c98:	025b      	lsls	r3, r3, #9
 8000c9a:	0a5b      	lsrs	r3, r3, #9
 8000c9c:	22ff      	movs	r2, #255	; 0xff
 8000c9e:	e72c      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000ca0:	080085c8 	.word	0x080085c8
 8000ca4:	f7ffffff 	.word	0xf7ffffff

08000ca8 <__aeabi_fsub>:
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	4647      	mov	r7, r8
 8000cac:	46ce      	mov	lr, r9
 8000cae:	0044      	lsls	r4, r0, #1
 8000cb0:	0fc2      	lsrs	r2, r0, #31
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	0247      	lsls	r7, r0, #9
 8000cb6:	0248      	lsls	r0, r1, #9
 8000cb8:	0a40      	lsrs	r0, r0, #9
 8000cba:	4684      	mov	ip, r0
 8000cbc:	4666      	mov	r6, ip
 8000cbe:	0048      	lsls	r0, r1, #1
 8000cc0:	0a7f      	lsrs	r7, r7, #9
 8000cc2:	0e24      	lsrs	r4, r4, #24
 8000cc4:	00f6      	lsls	r6, r6, #3
 8000cc6:	0025      	movs	r5, r4
 8000cc8:	4690      	mov	r8, r2
 8000cca:	00fb      	lsls	r3, r7, #3
 8000ccc:	0e00      	lsrs	r0, r0, #24
 8000cce:	0fc9      	lsrs	r1, r1, #31
 8000cd0:	46b1      	mov	r9, r6
 8000cd2:	28ff      	cmp	r0, #255	; 0xff
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_fsub+0x30>
 8000cd6:	e085      	b.n	8000de4 <__aeabi_fsub+0x13c>
 8000cd8:	2601      	movs	r6, #1
 8000cda:	4071      	eors	r1, r6
 8000cdc:	1a26      	subs	r6, r4, r0
 8000cde:	4291      	cmp	r1, r2
 8000ce0:	d057      	beq.n	8000d92 <__aeabi_fsub+0xea>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	dd43      	ble.n	8000d6e <__aeabi_fsub+0xc6>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	d000      	beq.n	8000cec <__aeabi_fsub+0x44>
 8000cea:	e07f      	b.n	8000dec <__aeabi_fsub+0x144>
 8000cec:	4649      	mov	r1, r9
 8000cee:	2900      	cmp	r1, #0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x4c>
 8000cf2:	e0aa      	b.n	8000e4a <__aeabi_fsub+0x1a2>
 8000cf4:	3e01      	subs	r6, #1
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_fsub+0x54>
 8000cfa:	e0f7      	b.n	8000eec <__aeabi_fsub+0x244>
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	015a      	lsls	r2, r3, #5
 8000d00:	d400      	bmi.n	8000d04 <__aeabi_fsub+0x5c>
 8000d02:	e08b      	b.n	8000e1c <__aeabi_fsub+0x174>
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	099c      	lsrs	r4, r3, #6
 8000d08:	0020      	movs	r0, r4
 8000d0a:	f001 f92f 	bl	8001f6c <__clzsi2>
 8000d0e:	3805      	subs	r0, #5
 8000d10:	4084      	lsls	r4, r0
 8000d12:	4285      	cmp	r5, r0
 8000d14:	dd00      	ble.n	8000d18 <__aeabi_fsub+0x70>
 8000d16:	e0d3      	b.n	8000ec0 <__aeabi_fsub+0x218>
 8000d18:	1b45      	subs	r5, r0, r5
 8000d1a:	0023      	movs	r3, r4
 8000d1c:	2020      	movs	r0, #32
 8000d1e:	3501      	adds	r5, #1
 8000d20:	40eb      	lsrs	r3, r5
 8000d22:	1b45      	subs	r5, r0, r5
 8000d24:	40ac      	lsls	r4, r5
 8000d26:	1e62      	subs	r2, r4, #1
 8000d28:	4194      	sbcs	r4, r2
 8000d2a:	4323      	orrs	r3, r4
 8000d2c:	2407      	movs	r4, #7
 8000d2e:	2500      	movs	r5, #0
 8000d30:	401c      	ands	r4, r3
 8000d32:	2201      	movs	r2, #1
 8000d34:	4641      	mov	r1, r8
 8000d36:	400a      	ands	r2, r1
 8000d38:	2c00      	cmp	r4, #0
 8000d3a:	d004      	beq.n	8000d46 <__aeabi_fsub+0x9e>
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	4019      	ands	r1, r3
 8000d40:	2904      	cmp	r1, #4
 8000d42:	d000      	beq.n	8000d46 <__aeabi_fsub+0x9e>
 8000d44:	3304      	adds	r3, #4
 8000d46:	0159      	lsls	r1, r3, #5
 8000d48:	d400      	bmi.n	8000d4c <__aeabi_fsub+0xa4>
 8000d4a:	e080      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000d4c:	3501      	adds	r5, #1
 8000d4e:	b2ec      	uxtb	r4, r5
 8000d50:	2dff      	cmp	r5, #255	; 0xff
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fsub+0xae>
 8000d54:	e0a3      	b.n	8000e9e <__aeabi_fsub+0x1f6>
 8000d56:	24ff      	movs	r4, #255	; 0xff
 8000d58:	2300      	movs	r3, #0
 8000d5a:	025b      	lsls	r3, r3, #9
 8000d5c:	05e4      	lsls	r4, r4, #23
 8000d5e:	0a58      	lsrs	r0, r3, #9
 8000d60:	07d2      	lsls	r2, r2, #31
 8000d62:	4320      	orrs	r0, r4
 8000d64:	4310      	orrs	r0, r2
 8000d66:	bc0c      	pop	{r2, r3}
 8000d68:	4690      	mov	r8, r2
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d174      	bne.n	8000e5c <__aeabi_fsub+0x1b4>
 8000d72:	1c60      	adds	r0, r4, #1
 8000d74:	b2c0      	uxtb	r0, r0
 8000d76:	2801      	cmp	r0, #1
 8000d78:	dc00      	bgt.n	8000d7c <__aeabi_fsub+0xd4>
 8000d7a:	e0a7      	b.n	8000ecc <__aeabi_fsub+0x224>
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	1a9c      	subs	r4, r3, r2
 8000d80:	0162      	lsls	r2, r4, #5
 8000d82:	d500      	bpl.n	8000d86 <__aeabi_fsub+0xde>
 8000d84:	e0b6      	b.n	8000ef4 <__aeabi_fsub+0x24c>
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d1be      	bne.n	8000d08 <__aeabi_fsub+0x60>
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2400      	movs	r4, #0
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e7e3      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	dc00      	bgt.n	8000d98 <__aeabi_fsub+0xf0>
 8000d96:	e085      	b.n	8000ea4 <__aeabi_fsub+0x1fc>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d046      	beq.n	8000e2a <__aeabi_fsub+0x182>
 8000d9c:	2cff      	cmp	r4, #255	; 0xff
 8000d9e:	d049      	beq.n	8000e34 <__aeabi_fsub+0x18c>
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	4648      	mov	r0, r9
 8000da4:	04d2      	lsls	r2, r2, #19
 8000da6:	4310      	orrs	r0, r2
 8000da8:	4681      	mov	r9, r0
 8000daa:	2201      	movs	r2, #1
 8000dac:	2e1b      	cmp	r6, #27
 8000dae:	dc09      	bgt.n	8000dc4 <__aeabi_fsub+0x11c>
 8000db0:	2020      	movs	r0, #32
 8000db2:	464c      	mov	r4, r9
 8000db4:	1b80      	subs	r0, r0, r6
 8000db6:	4084      	lsls	r4, r0
 8000db8:	464a      	mov	r2, r9
 8000dba:	0020      	movs	r0, r4
 8000dbc:	40f2      	lsrs	r2, r6
 8000dbe:	1e44      	subs	r4, r0, #1
 8000dc0:	41a0      	sbcs	r0, r4
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	189b      	adds	r3, r3, r2
 8000dc6:	015a      	lsls	r2, r3, #5
 8000dc8:	d528      	bpl.n	8000e1c <__aeabi_fsub+0x174>
 8000dca:	3501      	adds	r5, #1
 8000dcc:	2dff      	cmp	r5, #255	; 0xff
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_fsub+0x12a>
 8000dd0:	e0a8      	b.n	8000f24 <__aeabi_fsub+0x27c>
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2407      	movs	r4, #7
 8000dd6:	4994      	ldr	r1, [pc, #592]	; (8001028 <__aeabi_fsub+0x380>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	085b      	lsrs	r3, r3, #1
 8000ddc:	400b      	ands	r3, r1
 8000dde:	4313      	orrs	r3, r2
 8000de0:	401c      	ands	r4, r3
 8000de2:	e7a6      	b.n	8000d32 <__aeabi_fsub+0x8a>
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	d000      	beq.n	8000dea <__aeabi_fsub+0x142>
 8000de8:	e778      	b.n	8000cdc <__aeabi_fsub+0x34>
 8000dea:	e775      	b.n	8000cd8 <__aeabi_fsub+0x30>
 8000dec:	2cff      	cmp	r4, #255	; 0xff
 8000dee:	d054      	beq.n	8000e9a <__aeabi_fsub+0x1f2>
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	4649      	mov	r1, r9
 8000df4:	04d2      	lsls	r2, r2, #19
 8000df6:	4311      	orrs	r1, r2
 8000df8:	4689      	mov	r9, r1
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2e1b      	cmp	r6, #27
 8000dfe:	dc09      	bgt.n	8000e14 <__aeabi_fsub+0x16c>
 8000e00:	2120      	movs	r1, #32
 8000e02:	4648      	mov	r0, r9
 8000e04:	1b89      	subs	r1, r1, r6
 8000e06:	4088      	lsls	r0, r1
 8000e08:	464a      	mov	r2, r9
 8000e0a:	0001      	movs	r1, r0
 8000e0c:	40f2      	lsrs	r2, r6
 8000e0e:	1e48      	subs	r0, r1, #1
 8000e10:	4181      	sbcs	r1, r0
 8000e12:	430a      	orrs	r2, r1
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	015a      	lsls	r2, r3, #5
 8000e18:	d500      	bpl.n	8000e1c <__aeabi_fsub+0x174>
 8000e1a:	e773      	b.n	8000d04 <__aeabi_fsub+0x5c>
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4641      	mov	r1, r8
 8000e20:	400a      	ands	r2, r1
 8000e22:	0759      	lsls	r1, r3, #29
 8000e24:	d000      	beq.n	8000e28 <__aeabi_fsub+0x180>
 8000e26:	e789      	b.n	8000d3c <__aeabi_fsub+0x94>
 8000e28:	e011      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000e2a:	4648      	mov	r0, r9
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	d158      	bne.n	8000ee2 <__aeabi_fsub+0x23a>
 8000e30:	2cff      	cmp	r4, #255	; 0xff
 8000e32:	d10c      	bne.n	8000e4e <__aeabi_fsub+0x1a6>
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0x194>
 8000e3a:	e78c      	b.n	8000d56 <__aeabi_fsub+0xae>
 8000e3c:	2080      	movs	r0, #128	; 0x80
 8000e3e:	03c0      	lsls	r0, r0, #15
 8000e40:	4303      	orrs	r3, r0
 8000e42:	025b      	lsls	r3, r3, #9
 8000e44:	0a5b      	lsrs	r3, r3, #9
 8000e46:	24ff      	movs	r4, #255	; 0xff
 8000e48:	e787      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8000e4a:	2cff      	cmp	r4, #255	; 0xff
 8000e4c:	d025      	beq.n	8000e9a <__aeabi_fsub+0x1f2>
 8000e4e:	08db      	lsrs	r3, r3, #3
 8000e50:	2dff      	cmp	r5, #255	; 0xff
 8000e52:	d0f0      	beq.n	8000e36 <__aeabi_fsub+0x18e>
 8000e54:	025b      	lsls	r3, r3, #9
 8000e56:	0a5b      	lsrs	r3, r3, #9
 8000e58:	b2ec      	uxtb	r4, r5
 8000e5a:	e77e      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8000e5c:	2c00      	cmp	r4, #0
 8000e5e:	d04d      	beq.n	8000efc <__aeabi_fsub+0x254>
 8000e60:	28ff      	cmp	r0, #255	; 0xff
 8000e62:	d018      	beq.n	8000e96 <__aeabi_fsub+0x1ee>
 8000e64:	2480      	movs	r4, #128	; 0x80
 8000e66:	04e4      	lsls	r4, r4, #19
 8000e68:	4272      	negs	r2, r6
 8000e6a:	4323      	orrs	r3, r4
 8000e6c:	2a1b      	cmp	r2, #27
 8000e6e:	dd00      	ble.n	8000e72 <__aeabi_fsub+0x1ca>
 8000e70:	e0c4      	b.n	8000ffc <__aeabi_fsub+0x354>
 8000e72:	001c      	movs	r4, r3
 8000e74:	2520      	movs	r5, #32
 8000e76:	40d4      	lsrs	r4, r2
 8000e78:	1aaa      	subs	r2, r5, r2
 8000e7a:	4093      	lsls	r3, r2
 8000e7c:	1e5a      	subs	r2, r3, #1
 8000e7e:	4193      	sbcs	r3, r2
 8000e80:	4323      	orrs	r3, r4
 8000e82:	464a      	mov	r2, r9
 8000e84:	0005      	movs	r5, r0
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	4688      	mov	r8, r1
 8000e8a:	e738      	b.n	8000cfe <__aeabi_fsub+0x56>
 8000e8c:	1c72      	adds	r2, r6, #1
 8000e8e:	d0f8      	beq.n	8000e82 <__aeabi_fsub+0x1da>
 8000e90:	43f2      	mvns	r2, r6
 8000e92:	28ff      	cmp	r0, #255	; 0xff
 8000e94:	d1ea      	bne.n	8000e6c <__aeabi_fsub+0x1c4>
 8000e96:	000a      	movs	r2, r1
 8000e98:	464b      	mov	r3, r9
 8000e9a:	25ff      	movs	r5, #255	; 0xff
 8000e9c:	e7d7      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000e9e:	019b      	lsls	r3, r3, #6
 8000ea0:	0a5b      	lsrs	r3, r3, #9
 8000ea2:	e75a      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8000ea4:	2e00      	cmp	r6, #0
 8000ea6:	d141      	bne.n	8000f2c <__aeabi_fsub+0x284>
 8000ea8:	1c65      	adds	r5, r4, #1
 8000eaa:	b2e9      	uxtb	r1, r5
 8000eac:	2901      	cmp	r1, #1
 8000eae:	dd45      	ble.n	8000f3c <__aeabi_fsub+0x294>
 8000eb0:	2dff      	cmp	r5, #255	; 0xff
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_fsub+0x20e>
 8000eb4:	e74f      	b.n	8000d56 <__aeabi_fsub+0xae>
 8000eb6:	2407      	movs	r4, #7
 8000eb8:	444b      	add	r3, r9
 8000eba:	085b      	lsrs	r3, r3, #1
 8000ebc:	401c      	ands	r4, r3
 8000ebe:	e738      	b.n	8000d32 <__aeabi_fsub+0x8a>
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	4b5a      	ldr	r3, [pc, #360]	; (800102c <__aeabi_fsub+0x384>)
 8000ec4:	1a2d      	subs	r5, r5, r0
 8000ec6:	4023      	ands	r3, r4
 8000ec8:	4014      	ands	r4, r2
 8000eca:	e732      	b.n	8000d32 <__aeabi_fsub+0x8a>
 8000ecc:	2c00      	cmp	r4, #0
 8000ece:	d11d      	bne.n	8000f0c <__aeabi_fsub+0x264>
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d17a      	bne.n	8000fca <__aeabi_fsub+0x322>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x234>
 8000eda:	e091      	b.n	8001000 <__aeabi_fsub+0x358>
 8000edc:	000a      	movs	r2, r1
 8000ede:	2500      	movs	r5, #0
 8000ee0:	e7b5      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000ee2:	3e01      	subs	r6, #1
 8000ee4:	2e00      	cmp	r6, #0
 8000ee6:	d119      	bne.n	8000f1c <__aeabi_fsub+0x274>
 8000ee8:	444b      	add	r3, r9
 8000eea:	e76c      	b.n	8000dc6 <__aeabi_fsub+0x11e>
 8000eec:	2cff      	cmp	r4, #255	; 0xff
 8000eee:	d184      	bne.n	8000dfa <__aeabi_fsub+0x152>
 8000ef0:	25ff      	movs	r5, #255	; 0xff
 8000ef2:	e7ac      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000ef4:	464a      	mov	r2, r9
 8000ef6:	4688      	mov	r8, r1
 8000ef8:	1ad4      	subs	r4, r2, r3
 8000efa:	e705      	b.n	8000d08 <__aeabi_fsub+0x60>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1c5      	bne.n	8000e8c <__aeabi_fsub+0x1e4>
 8000f00:	000a      	movs	r2, r1
 8000f02:	28ff      	cmp	r0, #255	; 0xff
 8000f04:	d0c8      	beq.n	8000e98 <__aeabi_fsub+0x1f0>
 8000f06:	0005      	movs	r5, r0
 8000f08:	464b      	mov	r3, r9
 8000f0a:	e7a0      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d149      	bne.n	8000fa4 <__aeabi_fsub+0x2fc>
 8000f10:	464b      	mov	r3, r9
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d077      	beq.n	8001006 <__aeabi_fsub+0x35e>
 8000f16:	000a      	movs	r2, r1
 8000f18:	25ff      	movs	r5, #255	; 0xff
 8000f1a:	e798      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000f1c:	2cff      	cmp	r4, #255	; 0xff
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fsub+0x27a>
 8000f20:	e743      	b.n	8000daa <__aeabi_fsub+0x102>
 8000f22:	e787      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000f24:	000a      	movs	r2, r1
 8000f26:	24ff      	movs	r4, #255	; 0xff
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e716      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d115      	bne.n	8000f5c <__aeabi_fsub+0x2b4>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d157      	bne.n	8000fe4 <__aeabi_fsub+0x33c>
 8000f34:	28ff      	cmp	r0, #255	; 0xff
 8000f36:	d1e6      	bne.n	8000f06 <__aeabi_fsub+0x25e>
 8000f38:	464b      	mov	r3, r9
 8000f3a:	e77b      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000f3c:	2c00      	cmp	r4, #0
 8000f3e:	d120      	bne.n	8000f82 <__aeabi_fsub+0x2da>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d057      	beq.n	8000ff4 <__aeabi_fsub+0x34c>
 8000f44:	4649      	mov	r1, r9
 8000f46:	2900      	cmp	r1, #0
 8000f48:	d053      	beq.n	8000ff2 <__aeabi_fsub+0x34a>
 8000f4a:	444b      	add	r3, r9
 8000f4c:	015a      	lsls	r2, r3, #5
 8000f4e:	d568      	bpl.n	8001022 <__aeabi_fsub+0x37a>
 8000f50:	2407      	movs	r4, #7
 8000f52:	4a36      	ldr	r2, [pc, #216]	; (800102c <__aeabi_fsub+0x384>)
 8000f54:	401c      	ands	r4, r3
 8000f56:	2501      	movs	r5, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	e6ea      	b.n	8000d32 <__aeabi_fsub+0x8a>
 8000f5c:	28ff      	cmp	r0, #255	; 0xff
 8000f5e:	d0eb      	beq.n	8000f38 <__aeabi_fsub+0x290>
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	04d2      	lsls	r2, r2, #19
 8000f64:	4276      	negs	r6, r6
 8000f66:	4313      	orrs	r3, r2
 8000f68:	2e1b      	cmp	r6, #27
 8000f6a:	dc53      	bgt.n	8001014 <__aeabi_fsub+0x36c>
 8000f6c:	2520      	movs	r5, #32
 8000f6e:	1bad      	subs	r5, r5, r6
 8000f70:	001a      	movs	r2, r3
 8000f72:	40ab      	lsls	r3, r5
 8000f74:	40f2      	lsrs	r2, r6
 8000f76:	1e5c      	subs	r4, r3, #1
 8000f78:	41a3      	sbcs	r3, r4
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	444b      	add	r3, r9
 8000f7e:	0005      	movs	r5, r0
 8000f80:	e721      	b.n	8000dc6 <__aeabi_fsub+0x11e>
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0d8      	beq.n	8000f38 <__aeabi_fsub+0x290>
 8000f86:	4649      	mov	r1, r9
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x2e6>
 8000f8c:	e752      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	03c9      	lsls	r1, r1, #15
 8000f92:	420f      	tst	r7, r1
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x2f0>
 8000f96:	e74d      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000f98:	4660      	mov	r0, ip
 8000f9a:	4208      	tst	r0, r1
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_fsub+0x2f8>
 8000f9e:	e749      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000fa0:	464b      	mov	r3, r9
 8000fa2:	e747      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000fa4:	4648      	mov	r0, r9
 8000fa6:	25ff      	movs	r5, #255	; 0xff
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x306>
 8000fac:	e74f      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	03d2      	lsls	r2, r2, #15
 8000fb2:	4217      	tst	r7, r2
 8000fb4:	d004      	beq.n	8000fc0 <__aeabi_fsub+0x318>
 8000fb6:	4660      	mov	r0, ip
 8000fb8:	4210      	tst	r0, r2
 8000fba:	d101      	bne.n	8000fc0 <__aeabi_fsub+0x318>
 8000fbc:	464b      	mov	r3, r9
 8000fbe:	4688      	mov	r8, r1
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4641      	mov	r1, r8
 8000fc4:	25ff      	movs	r5, #255	; 0xff
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	e741      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000fca:	4648      	mov	r0, r9
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d01f      	beq.n	8001010 <__aeabi_fsub+0x368>
 8000fd0:	1a1a      	subs	r2, r3, r0
 8000fd2:	0150      	lsls	r0, r2, #5
 8000fd4:	d520      	bpl.n	8001018 <__aeabi_fsub+0x370>
 8000fd6:	464a      	mov	r2, r9
 8000fd8:	2407      	movs	r4, #7
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	401c      	ands	r4, r3
 8000fde:	4688      	mov	r8, r1
 8000fe0:	2500      	movs	r5, #0
 8000fe2:	e6a6      	b.n	8000d32 <__aeabi_fsub+0x8a>
 8000fe4:	1c74      	adds	r4, r6, #1
 8000fe6:	d0c9      	beq.n	8000f7c <__aeabi_fsub+0x2d4>
 8000fe8:	43f6      	mvns	r6, r6
 8000fea:	28ff      	cmp	r0, #255	; 0xff
 8000fec:	d1bc      	bne.n	8000f68 <__aeabi_fsub+0x2c0>
 8000fee:	464b      	mov	r3, r9
 8000ff0:	e720      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000ff2:	4699      	mov	r9, r3
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	e72b      	b.n	8000e54 <__aeabi_fsub+0x1ac>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e740      	b.n	8000e82 <__aeabi_fsub+0x1da>
 8001000:	2200      	movs	r2, #0
 8001002:	2300      	movs	r3, #0
 8001004:	e6a9      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	2200      	movs	r2, #0
 800100a:	03db      	lsls	r3, r3, #15
 800100c:	24ff      	movs	r4, #255	; 0xff
 800100e:	e6a4      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8001010:	2500      	movs	r5, #0
 8001012:	e71c      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8001014:	2301      	movs	r3, #1
 8001016:	e7b1      	b.n	8000f7c <__aeabi_fsub+0x2d4>
 8001018:	2a00      	cmp	r2, #0
 800101a:	d0f1      	beq.n	8001000 <__aeabi_fsub+0x358>
 800101c:	0013      	movs	r3, r2
 800101e:	2500      	movs	r5, #0
 8001020:	e6fc      	b.n	8000e1c <__aeabi_fsub+0x174>
 8001022:	2500      	movs	r5, #0
 8001024:	e6fa      	b.n	8000e1c <__aeabi_fsub+0x174>
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	7dffffff 	.word	0x7dffffff
 800102c:	fbffffff 	.word	0xfbffffff

08001030 <__aeabi_f2iz>:
 8001030:	0241      	lsls	r1, r0, #9
 8001032:	0042      	lsls	r2, r0, #1
 8001034:	0fc3      	lsrs	r3, r0, #31
 8001036:	0a49      	lsrs	r1, r1, #9
 8001038:	0e12      	lsrs	r2, r2, #24
 800103a:	2000      	movs	r0, #0
 800103c:	2a7e      	cmp	r2, #126	; 0x7e
 800103e:	d90d      	bls.n	800105c <__aeabi_f2iz+0x2c>
 8001040:	2a9d      	cmp	r2, #157	; 0x9d
 8001042:	d80c      	bhi.n	800105e <__aeabi_f2iz+0x2e>
 8001044:	2080      	movs	r0, #128	; 0x80
 8001046:	0400      	lsls	r0, r0, #16
 8001048:	4301      	orrs	r1, r0
 800104a:	2a95      	cmp	r2, #149	; 0x95
 800104c:	dc0a      	bgt.n	8001064 <__aeabi_f2iz+0x34>
 800104e:	2096      	movs	r0, #150	; 0x96
 8001050:	1a82      	subs	r2, r0, r2
 8001052:	40d1      	lsrs	r1, r2
 8001054:	4248      	negs	r0, r1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d100      	bne.n	800105c <__aeabi_f2iz+0x2c>
 800105a:	0008      	movs	r0, r1
 800105c:	4770      	bx	lr
 800105e:	4a03      	ldr	r2, [pc, #12]	; (800106c <__aeabi_f2iz+0x3c>)
 8001060:	1898      	adds	r0, r3, r2
 8001062:	e7fb      	b.n	800105c <__aeabi_f2iz+0x2c>
 8001064:	3a96      	subs	r2, #150	; 0x96
 8001066:	4091      	lsls	r1, r2
 8001068:	e7f4      	b.n	8001054 <__aeabi_f2iz+0x24>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	7fffffff 	.word	0x7fffffff

08001070 <__aeabi_ui2f>:
 8001070:	b570      	push	{r4, r5, r6, lr}
 8001072:	1e04      	subs	r4, r0, #0
 8001074:	d034      	beq.n	80010e0 <__aeabi_ui2f+0x70>
 8001076:	f000 ff79 	bl	8001f6c <__clzsi2>
 800107a:	229e      	movs	r2, #158	; 0x9e
 800107c:	1a12      	subs	r2, r2, r0
 800107e:	2a96      	cmp	r2, #150	; 0x96
 8001080:	dc07      	bgt.n	8001092 <__aeabi_ui2f+0x22>
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	2808      	cmp	r0, #8
 8001086:	dd2e      	ble.n	80010e6 <__aeabi_ui2f+0x76>
 8001088:	3808      	subs	r0, #8
 800108a:	4084      	lsls	r4, r0
 800108c:	0260      	lsls	r0, r4, #9
 800108e:	0a40      	lsrs	r0, r0, #9
 8001090:	e021      	b.n	80010d6 <__aeabi_ui2f+0x66>
 8001092:	2a99      	cmp	r2, #153	; 0x99
 8001094:	dd09      	ble.n	80010aa <__aeabi_ui2f+0x3a>
 8001096:	0003      	movs	r3, r0
 8001098:	0021      	movs	r1, r4
 800109a:	331b      	adds	r3, #27
 800109c:	4099      	lsls	r1, r3
 800109e:	1e4b      	subs	r3, r1, #1
 80010a0:	4199      	sbcs	r1, r3
 80010a2:	2305      	movs	r3, #5
 80010a4:	1a1b      	subs	r3, r3, r0
 80010a6:	40dc      	lsrs	r4, r3
 80010a8:	430c      	orrs	r4, r1
 80010aa:	2805      	cmp	r0, #5
 80010ac:	dd01      	ble.n	80010b2 <__aeabi_ui2f+0x42>
 80010ae:	1f43      	subs	r3, r0, #5
 80010b0:	409c      	lsls	r4, r3
 80010b2:	0023      	movs	r3, r4
 80010b4:	490d      	ldr	r1, [pc, #52]	; (80010ec <__aeabi_ui2f+0x7c>)
 80010b6:	400b      	ands	r3, r1
 80010b8:	0765      	lsls	r5, r4, #29
 80010ba:	d009      	beq.n	80010d0 <__aeabi_ui2f+0x60>
 80010bc:	250f      	movs	r5, #15
 80010be:	402c      	ands	r4, r5
 80010c0:	2c04      	cmp	r4, #4
 80010c2:	d005      	beq.n	80010d0 <__aeabi_ui2f+0x60>
 80010c4:	3304      	adds	r3, #4
 80010c6:	015c      	lsls	r4, r3, #5
 80010c8:	d502      	bpl.n	80010d0 <__aeabi_ui2f+0x60>
 80010ca:	229f      	movs	r2, #159	; 0x9f
 80010cc:	400b      	ands	r3, r1
 80010ce:	1a12      	subs	r2, r2, r0
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	0a58      	lsrs	r0, r3, #9
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	0240      	lsls	r0, r0, #9
 80010d8:	05d2      	lsls	r2, r2, #23
 80010da:	0a40      	lsrs	r0, r0, #9
 80010dc:	4310      	orrs	r0, r2
 80010de:	bd70      	pop	{r4, r5, r6, pc}
 80010e0:	2200      	movs	r2, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	e7f7      	b.n	80010d6 <__aeabi_ui2f+0x66>
 80010e6:	0260      	lsls	r0, r4, #9
 80010e8:	0a40      	lsrs	r0, r0, #9
 80010ea:	e7f4      	b.n	80010d6 <__aeabi_ui2f+0x66>
 80010ec:	fbffffff 	.word	0xfbffffff

080010f0 <__aeabi_dmul>:
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	4657      	mov	r7, sl
 80010f4:	46de      	mov	lr, fp
 80010f6:	464e      	mov	r6, r9
 80010f8:	4645      	mov	r5, r8
 80010fa:	b5e0      	push	{r5, r6, r7, lr}
 80010fc:	4683      	mov	fp, r0
 80010fe:	0006      	movs	r6, r0
 8001100:	030f      	lsls	r7, r1, #12
 8001102:	0048      	lsls	r0, r1, #1
 8001104:	b087      	sub	sp, #28
 8001106:	4692      	mov	sl, r2
 8001108:	001d      	movs	r5, r3
 800110a:	0b3f      	lsrs	r7, r7, #12
 800110c:	0d40      	lsrs	r0, r0, #21
 800110e:	0fcc      	lsrs	r4, r1, #31
 8001110:	2800      	cmp	r0, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dmul+0x26>
 8001114:	e06f      	b.n	80011f6 <__aeabi_dmul+0x106>
 8001116:	4bde      	ldr	r3, [pc, #888]	; (8001490 <__aeabi_dmul+0x3a0>)
 8001118:	4298      	cmp	r0, r3
 800111a:	d038      	beq.n	800118e <__aeabi_dmul+0x9e>
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	00ff      	lsls	r7, r7, #3
 8001120:	041b      	lsls	r3, r3, #16
 8001122:	431f      	orrs	r7, r3
 8001124:	0f73      	lsrs	r3, r6, #29
 8001126:	433b      	orrs	r3, r7
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	4bda      	ldr	r3, [pc, #872]	; (8001494 <__aeabi_dmul+0x3a4>)
 800112c:	2700      	movs	r7, #0
 800112e:	4699      	mov	r9, r3
 8001130:	2300      	movs	r3, #0
 8001132:	469b      	mov	fp, r3
 8001134:	00f6      	lsls	r6, r6, #3
 8001136:	4481      	add	r9, r0
 8001138:	032b      	lsls	r3, r5, #12
 800113a:	0069      	lsls	r1, r5, #1
 800113c:	0b1b      	lsrs	r3, r3, #12
 800113e:	4652      	mov	r2, sl
 8001140:	4698      	mov	r8, r3
 8001142:	0d49      	lsrs	r1, r1, #21
 8001144:	0fed      	lsrs	r5, r5, #31
 8001146:	2900      	cmp	r1, #0
 8001148:	d100      	bne.n	800114c <__aeabi_dmul+0x5c>
 800114a:	e085      	b.n	8001258 <__aeabi_dmul+0x168>
 800114c:	4bd0      	ldr	r3, [pc, #832]	; (8001490 <__aeabi_dmul+0x3a0>)
 800114e:	4299      	cmp	r1, r3
 8001150:	d100      	bne.n	8001154 <__aeabi_dmul+0x64>
 8001152:	e073      	b.n	800123c <__aeabi_dmul+0x14c>
 8001154:	4643      	mov	r3, r8
 8001156:	00da      	lsls	r2, r3, #3
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	041b      	lsls	r3, r3, #16
 800115c:	4313      	orrs	r3, r2
 800115e:	4652      	mov	r2, sl
 8001160:	48cc      	ldr	r0, [pc, #816]	; (8001494 <__aeabi_dmul+0x3a4>)
 8001162:	0f52      	lsrs	r2, r2, #29
 8001164:	4684      	mov	ip, r0
 8001166:	4313      	orrs	r3, r2
 8001168:	4652      	mov	r2, sl
 800116a:	2000      	movs	r0, #0
 800116c:	4461      	add	r1, ip
 800116e:	00d2      	lsls	r2, r2, #3
 8001170:	4489      	add	r9, r1
 8001172:	0021      	movs	r1, r4
 8001174:	4069      	eors	r1, r5
 8001176:	9100      	str	r1, [sp, #0]
 8001178:	468c      	mov	ip, r1
 800117a:	2101      	movs	r1, #1
 800117c:	4449      	add	r1, r9
 800117e:	468a      	mov	sl, r1
 8001180:	2f0f      	cmp	r7, #15
 8001182:	d900      	bls.n	8001186 <__aeabi_dmul+0x96>
 8001184:	e090      	b.n	80012a8 <__aeabi_dmul+0x1b8>
 8001186:	49c4      	ldr	r1, [pc, #784]	; (8001498 <__aeabi_dmul+0x3a8>)
 8001188:	00bf      	lsls	r7, r7, #2
 800118a:	59cf      	ldr	r7, [r1, r7]
 800118c:	46bf      	mov	pc, r7
 800118e:	465b      	mov	r3, fp
 8001190:	433b      	orrs	r3, r7
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	d000      	beq.n	8001198 <__aeabi_dmul+0xa8>
 8001196:	e16a      	b.n	800146e <__aeabi_dmul+0x37e>
 8001198:	2302      	movs	r3, #2
 800119a:	2708      	movs	r7, #8
 800119c:	2600      	movs	r6, #0
 800119e:	4681      	mov	r9, r0
 80011a0:	469b      	mov	fp, r3
 80011a2:	e7c9      	b.n	8001138 <__aeabi_dmul+0x48>
 80011a4:	0032      	movs	r2, r6
 80011a6:	4658      	mov	r0, fp
 80011a8:	9b01      	ldr	r3, [sp, #4]
 80011aa:	4661      	mov	r1, ip
 80011ac:	9100      	str	r1, [sp, #0]
 80011ae:	2802      	cmp	r0, #2
 80011b0:	d100      	bne.n	80011b4 <__aeabi_dmul+0xc4>
 80011b2:	e075      	b.n	80012a0 <__aeabi_dmul+0x1b0>
 80011b4:	2803      	cmp	r0, #3
 80011b6:	d100      	bne.n	80011ba <__aeabi_dmul+0xca>
 80011b8:	e1fe      	b.n	80015b8 <__aeabi_dmul+0x4c8>
 80011ba:	2801      	cmp	r0, #1
 80011bc:	d000      	beq.n	80011c0 <__aeabi_dmul+0xd0>
 80011be:	e12c      	b.n	800141a <__aeabi_dmul+0x32a>
 80011c0:	2300      	movs	r3, #0
 80011c2:	2700      	movs	r7, #0
 80011c4:	2600      	movs	r6, #0
 80011c6:	2500      	movs	r5, #0
 80011c8:	033f      	lsls	r7, r7, #12
 80011ca:	0d2a      	lsrs	r2, r5, #20
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	48b3      	ldr	r0, [pc, #716]	; (800149c <__aeabi_dmul+0x3ac>)
 80011d0:	0512      	lsls	r2, r2, #20
 80011d2:	433a      	orrs	r2, r7
 80011d4:	4002      	ands	r2, r0
 80011d6:	051b      	lsls	r3, r3, #20
 80011d8:	4313      	orrs	r3, r2
 80011da:	9a00      	ldr	r2, [sp, #0]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	07d1      	lsls	r1, r2, #31
 80011e0:	085b      	lsrs	r3, r3, #1
 80011e2:	430b      	orrs	r3, r1
 80011e4:	0030      	movs	r0, r6
 80011e6:	0019      	movs	r1, r3
 80011e8:	b007      	add	sp, #28
 80011ea:	bc3c      	pop	{r2, r3, r4, r5}
 80011ec:	4690      	mov	r8, r2
 80011ee:	4699      	mov	r9, r3
 80011f0:	46a2      	mov	sl, r4
 80011f2:	46ab      	mov	fp, r5
 80011f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f6:	465b      	mov	r3, fp
 80011f8:	433b      	orrs	r3, r7
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	d100      	bne.n	8001200 <__aeabi_dmul+0x110>
 80011fe:	e12f      	b.n	8001460 <__aeabi_dmul+0x370>
 8001200:	2f00      	cmp	r7, #0
 8001202:	d100      	bne.n	8001206 <__aeabi_dmul+0x116>
 8001204:	e1a5      	b.n	8001552 <__aeabi_dmul+0x462>
 8001206:	0038      	movs	r0, r7
 8001208:	f000 feb0 	bl	8001f6c <__clzsi2>
 800120c:	0003      	movs	r3, r0
 800120e:	3b0b      	subs	r3, #11
 8001210:	2b1c      	cmp	r3, #28
 8001212:	dd00      	ble.n	8001216 <__aeabi_dmul+0x126>
 8001214:	e196      	b.n	8001544 <__aeabi_dmul+0x454>
 8001216:	221d      	movs	r2, #29
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	465a      	mov	r2, fp
 800121c:	0001      	movs	r1, r0
 800121e:	40da      	lsrs	r2, r3
 8001220:	465e      	mov	r6, fp
 8001222:	3908      	subs	r1, #8
 8001224:	408f      	lsls	r7, r1
 8001226:	0013      	movs	r3, r2
 8001228:	408e      	lsls	r6, r1
 800122a:	433b      	orrs	r3, r7
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b9c      	ldr	r3, [pc, #624]	; (80014a0 <__aeabi_dmul+0x3b0>)
 8001230:	2700      	movs	r7, #0
 8001232:	1a1b      	subs	r3, r3, r0
 8001234:	4699      	mov	r9, r3
 8001236:	2300      	movs	r3, #0
 8001238:	469b      	mov	fp, r3
 800123a:	e77d      	b.n	8001138 <__aeabi_dmul+0x48>
 800123c:	4641      	mov	r1, r8
 800123e:	4653      	mov	r3, sl
 8001240:	430b      	orrs	r3, r1
 8001242:	4993      	ldr	r1, [pc, #588]	; (8001490 <__aeabi_dmul+0x3a0>)
 8001244:	468c      	mov	ip, r1
 8001246:	44e1      	add	r9, ip
 8001248:	2b00      	cmp	r3, #0
 800124a:	d000      	beq.n	800124e <__aeabi_dmul+0x15e>
 800124c:	e11a      	b.n	8001484 <__aeabi_dmul+0x394>
 800124e:	2202      	movs	r2, #2
 8001250:	2002      	movs	r0, #2
 8001252:	4317      	orrs	r7, r2
 8001254:	2200      	movs	r2, #0
 8001256:	e78c      	b.n	8001172 <__aeabi_dmul+0x82>
 8001258:	4313      	orrs	r3, r2
 800125a:	d100      	bne.n	800125e <__aeabi_dmul+0x16e>
 800125c:	e10d      	b.n	800147a <__aeabi_dmul+0x38a>
 800125e:	4643      	mov	r3, r8
 8001260:	2b00      	cmp	r3, #0
 8001262:	d100      	bne.n	8001266 <__aeabi_dmul+0x176>
 8001264:	e181      	b.n	800156a <__aeabi_dmul+0x47a>
 8001266:	4640      	mov	r0, r8
 8001268:	f000 fe80 	bl	8001f6c <__clzsi2>
 800126c:	0002      	movs	r2, r0
 800126e:	3a0b      	subs	r2, #11
 8001270:	2a1c      	cmp	r2, #28
 8001272:	dd00      	ble.n	8001276 <__aeabi_dmul+0x186>
 8001274:	e172      	b.n	800155c <__aeabi_dmul+0x46c>
 8001276:	0001      	movs	r1, r0
 8001278:	4643      	mov	r3, r8
 800127a:	3908      	subs	r1, #8
 800127c:	408b      	lsls	r3, r1
 800127e:	4698      	mov	r8, r3
 8001280:	231d      	movs	r3, #29
 8001282:	1a9a      	subs	r2, r3, r2
 8001284:	4653      	mov	r3, sl
 8001286:	40d3      	lsrs	r3, r2
 8001288:	001a      	movs	r2, r3
 800128a:	4643      	mov	r3, r8
 800128c:	4313      	orrs	r3, r2
 800128e:	4652      	mov	r2, sl
 8001290:	408a      	lsls	r2, r1
 8001292:	4649      	mov	r1, r9
 8001294:	1a08      	subs	r0, r1, r0
 8001296:	4982      	ldr	r1, [pc, #520]	; (80014a0 <__aeabi_dmul+0x3b0>)
 8001298:	4689      	mov	r9, r1
 800129a:	4481      	add	r9, r0
 800129c:	2000      	movs	r0, #0
 800129e:	e768      	b.n	8001172 <__aeabi_dmul+0x82>
 80012a0:	4b7b      	ldr	r3, [pc, #492]	; (8001490 <__aeabi_dmul+0x3a0>)
 80012a2:	2700      	movs	r7, #0
 80012a4:	2600      	movs	r6, #0
 80012a6:	e78e      	b.n	80011c6 <__aeabi_dmul+0xd6>
 80012a8:	0c14      	lsrs	r4, r2, #16
 80012aa:	0412      	lsls	r2, r2, #16
 80012ac:	0c12      	lsrs	r2, r2, #16
 80012ae:	0011      	movs	r1, r2
 80012b0:	0c37      	lsrs	r7, r6, #16
 80012b2:	0436      	lsls	r6, r6, #16
 80012b4:	0c35      	lsrs	r5, r6, #16
 80012b6:	4379      	muls	r1, r7
 80012b8:	0028      	movs	r0, r5
 80012ba:	468c      	mov	ip, r1
 80012bc:	002e      	movs	r6, r5
 80012be:	4360      	muls	r0, r4
 80012c0:	4460      	add	r0, ip
 80012c2:	4683      	mov	fp, r0
 80012c4:	4356      	muls	r6, r2
 80012c6:	0021      	movs	r1, r4
 80012c8:	0c30      	lsrs	r0, r6, #16
 80012ca:	4680      	mov	r8, r0
 80012cc:	4658      	mov	r0, fp
 80012ce:	4379      	muls	r1, r7
 80012d0:	4440      	add	r0, r8
 80012d2:	9102      	str	r1, [sp, #8]
 80012d4:	4584      	cmp	ip, r0
 80012d6:	d906      	bls.n	80012e6 <__aeabi_dmul+0x1f6>
 80012d8:	4688      	mov	r8, r1
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	0249      	lsls	r1, r1, #9
 80012de:	468c      	mov	ip, r1
 80012e0:	44e0      	add	r8, ip
 80012e2:	4641      	mov	r1, r8
 80012e4:	9102      	str	r1, [sp, #8]
 80012e6:	0436      	lsls	r6, r6, #16
 80012e8:	0c01      	lsrs	r1, r0, #16
 80012ea:	0c36      	lsrs	r6, r6, #16
 80012ec:	0400      	lsls	r0, r0, #16
 80012ee:	468b      	mov	fp, r1
 80012f0:	1981      	adds	r1, r0, r6
 80012f2:	0c1e      	lsrs	r6, r3, #16
 80012f4:	041b      	lsls	r3, r3, #16
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	9103      	str	r1, [sp, #12]
 80012fa:	0019      	movs	r1, r3
 80012fc:	4379      	muls	r1, r7
 80012fe:	468c      	mov	ip, r1
 8001300:	0028      	movs	r0, r5
 8001302:	4375      	muls	r5, r6
 8001304:	4465      	add	r5, ip
 8001306:	46a8      	mov	r8, r5
 8001308:	4358      	muls	r0, r3
 800130a:	0c05      	lsrs	r5, r0, #16
 800130c:	4445      	add	r5, r8
 800130e:	4377      	muls	r7, r6
 8001310:	42a9      	cmp	r1, r5
 8001312:	d903      	bls.n	800131c <__aeabi_dmul+0x22c>
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	0249      	lsls	r1, r1, #9
 8001318:	468c      	mov	ip, r1
 800131a:	4467      	add	r7, ip
 800131c:	0c29      	lsrs	r1, r5, #16
 800131e:	468c      	mov	ip, r1
 8001320:	0039      	movs	r1, r7
 8001322:	0400      	lsls	r0, r0, #16
 8001324:	0c00      	lsrs	r0, r0, #16
 8001326:	042d      	lsls	r5, r5, #16
 8001328:	182d      	adds	r5, r5, r0
 800132a:	4461      	add	r1, ip
 800132c:	44ab      	add	fp, r5
 800132e:	9105      	str	r1, [sp, #20]
 8001330:	4659      	mov	r1, fp
 8001332:	9104      	str	r1, [sp, #16]
 8001334:	9901      	ldr	r1, [sp, #4]
 8001336:	040f      	lsls	r7, r1, #16
 8001338:	0c3f      	lsrs	r7, r7, #16
 800133a:	0c08      	lsrs	r0, r1, #16
 800133c:	0039      	movs	r1, r7
 800133e:	4351      	muls	r1, r2
 8001340:	4342      	muls	r2, r0
 8001342:	4690      	mov	r8, r2
 8001344:	0002      	movs	r2, r0
 8001346:	468c      	mov	ip, r1
 8001348:	0c09      	lsrs	r1, r1, #16
 800134a:	468b      	mov	fp, r1
 800134c:	4362      	muls	r2, r4
 800134e:	437c      	muls	r4, r7
 8001350:	4444      	add	r4, r8
 8001352:	445c      	add	r4, fp
 8001354:	45a0      	cmp	r8, r4
 8001356:	d903      	bls.n	8001360 <__aeabi_dmul+0x270>
 8001358:	2180      	movs	r1, #128	; 0x80
 800135a:	0249      	lsls	r1, r1, #9
 800135c:	4688      	mov	r8, r1
 800135e:	4442      	add	r2, r8
 8001360:	0c21      	lsrs	r1, r4, #16
 8001362:	4688      	mov	r8, r1
 8001364:	4661      	mov	r1, ip
 8001366:	0409      	lsls	r1, r1, #16
 8001368:	0c09      	lsrs	r1, r1, #16
 800136a:	468c      	mov	ip, r1
 800136c:	0039      	movs	r1, r7
 800136e:	4359      	muls	r1, r3
 8001370:	4343      	muls	r3, r0
 8001372:	4370      	muls	r0, r6
 8001374:	437e      	muls	r6, r7
 8001376:	0c0f      	lsrs	r7, r1, #16
 8001378:	18f6      	adds	r6, r6, r3
 800137a:	0424      	lsls	r4, r4, #16
 800137c:	19be      	adds	r6, r7, r6
 800137e:	4464      	add	r4, ip
 8001380:	4442      	add	r2, r8
 8001382:	468c      	mov	ip, r1
 8001384:	42b3      	cmp	r3, r6
 8001386:	d903      	bls.n	8001390 <__aeabi_dmul+0x2a0>
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	025b      	lsls	r3, r3, #9
 800138c:	4698      	mov	r8, r3
 800138e:	4440      	add	r0, r8
 8001390:	9b02      	ldr	r3, [sp, #8]
 8001392:	4661      	mov	r1, ip
 8001394:	4698      	mov	r8, r3
 8001396:	9b04      	ldr	r3, [sp, #16]
 8001398:	0437      	lsls	r7, r6, #16
 800139a:	4443      	add	r3, r8
 800139c:	469b      	mov	fp, r3
 800139e:	45ab      	cmp	fp, r5
 80013a0:	41ad      	sbcs	r5, r5
 80013a2:	426b      	negs	r3, r5
 80013a4:	040d      	lsls	r5, r1, #16
 80013a6:	9905      	ldr	r1, [sp, #20]
 80013a8:	0c2d      	lsrs	r5, r5, #16
 80013aa:	468c      	mov	ip, r1
 80013ac:	197f      	adds	r7, r7, r5
 80013ae:	4467      	add	r7, ip
 80013b0:	18fd      	adds	r5, r7, r3
 80013b2:	46a8      	mov	r8, r5
 80013b4:	465d      	mov	r5, fp
 80013b6:	192d      	adds	r5, r5, r4
 80013b8:	42a5      	cmp	r5, r4
 80013ba:	41a4      	sbcs	r4, r4
 80013bc:	4693      	mov	fp, r2
 80013be:	4264      	negs	r4, r4
 80013c0:	46a4      	mov	ip, r4
 80013c2:	44c3      	add	fp, r8
 80013c4:	44dc      	add	ip, fp
 80013c6:	428f      	cmp	r7, r1
 80013c8:	41bf      	sbcs	r7, r7
 80013ca:	4598      	cmp	r8, r3
 80013cc:	419b      	sbcs	r3, r3
 80013ce:	4593      	cmp	fp, r2
 80013d0:	4192      	sbcs	r2, r2
 80013d2:	45a4      	cmp	ip, r4
 80013d4:	41a4      	sbcs	r4, r4
 80013d6:	425b      	negs	r3, r3
 80013d8:	427f      	negs	r7, r7
 80013da:	431f      	orrs	r7, r3
 80013dc:	0c36      	lsrs	r6, r6, #16
 80013de:	4252      	negs	r2, r2
 80013e0:	4264      	negs	r4, r4
 80013e2:	19bf      	adds	r7, r7, r6
 80013e4:	4322      	orrs	r2, r4
 80013e6:	18bf      	adds	r7, r7, r2
 80013e8:	4662      	mov	r2, ip
 80013ea:	1838      	adds	r0, r7, r0
 80013ec:	0243      	lsls	r3, r0, #9
 80013ee:	0dd2      	lsrs	r2, r2, #23
 80013f0:	9903      	ldr	r1, [sp, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	026a      	lsls	r2, r5, #9
 80013f6:	430a      	orrs	r2, r1
 80013f8:	1e50      	subs	r0, r2, #1
 80013fa:	4182      	sbcs	r2, r0
 80013fc:	4661      	mov	r1, ip
 80013fe:	0ded      	lsrs	r5, r5, #23
 8001400:	432a      	orrs	r2, r5
 8001402:	024e      	lsls	r6, r1, #9
 8001404:	4332      	orrs	r2, r6
 8001406:	01d9      	lsls	r1, r3, #7
 8001408:	d400      	bmi.n	800140c <__aeabi_dmul+0x31c>
 800140a:	e0b3      	b.n	8001574 <__aeabi_dmul+0x484>
 800140c:	2601      	movs	r6, #1
 800140e:	0850      	lsrs	r0, r2, #1
 8001410:	4032      	ands	r2, r6
 8001412:	4302      	orrs	r2, r0
 8001414:	07de      	lsls	r6, r3, #31
 8001416:	4332      	orrs	r2, r6
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	4c22      	ldr	r4, [pc, #136]	; (80014a4 <__aeabi_dmul+0x3b4>)
 800141c:	4454      	add	r4, sl
 800141e:	2c00      	cmp	r4, #0
 8001420:	dd62      	ble.n	80014e8 <__aeabi_dmul+0x3f8>
 8001422:	0751      	lsls	r1, r2, #29
 8001424:	d009      	beq.n	800143a <__aeabi_dmul+0x34a>
 8001426:	200f      	movs	r0, #15
 8001428:	4010      	ands	r0, r2
 800142a:	2804      	cmp	r0, #4
 800142c:	d005      	beq.n	800143a <__aeabi_dmul+0x34a>
 800142e:	1d10      	adds	r0, r2, #4
 8001430:	4290      	cmp	r0, r2
 8001432:	4192      	sbcs	r2, r2
 8001434:	4252      	negs	r2, r2
 8001436:	189b      	adds	r3, r3, r2
 8001438:	0002      	movs	r2, r0
 800143a:	01d9      	lsls	r1, r3, #7
 800143c:	d504      	bpl.n	8001448 <__aeabi_dmul+0x358>
 800143e:	2480      	movs	r4, #128	; 0x80
 8001440:	4819      	ldr	r0, [pc, #100]	; (80014a8 <__aeabi_dmul+0x3b8>)
 8001442:	00e4      	lsls	r4, r4, #3
 8001444:	4003      	ands	r3, r0
 8001446:	4454      	add	r4, sl
 8001448:	4818      	ldr	r0, [pc, #96]	; (80014ac <__aeabi_dmul+0x3bc>)
 800144a:	4284      	cmp	r4, r0
 800144c:	dd00      	ble.n	8001450 <__aeabi_dmul+0x360>
 800144e:	e727      	b.n	80012a0 <__aeabi_dmul+0x1b0>
 8001450:	075e      	lsls	r6, r3, #29
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	08d2      	lsrs	r2, r2, #3
 8001456:	0b1f      	lsrs	r7, r3, #12
 8001458:	0563      	lsls	r3, r4, #21
 800145a:	4316      	orrs	r6, r2
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	e6b2      	b.n	80011c6 <__aeabi_dmul+0xd6>
 8001460:	2300      	movs	r3, #0
 8001462:	4699      	mov	r9, r3
 8001464:	3301      	adds	r3, #1
 8001466:	2704      	movs	r7, #4
 8001468:	2600      	movs	r6, #0
 800146a:	469b      	mov	fp, r3
 800146c:	e664      	b.n	8001138 <__aeabi_dmul+0x48>
 800146e:	2303      	movs	r3, #3
 8001470:	9701      	str	r7, [sp, #4]
 8001472:	4681      	mov	r9, r0
 8001474:	270c      	movs	r7, #12
 8001476:	469b      	mov	fp, r3
 8001478:	e65e      	b.n	8001138 <__aeabi_dmul+0x48>
 800147a:	2201      	movs	r2, #1
 800147c:	2001      	movs	r0, #1
 800147e:	4317      	orrs	r7, r2
 8001480:	2200      	movs	r2, #0
 8001482:	e676      	b.n	8001172 <__aeabi_dmul+0x82>
 8001484:	2303      	movs	r3, #3
 8001486:	2003      	movs	r0, #3
 8001488:	431f      	orrs	r7, r3
 800148a:	4643      	mov	r3, r8
 800148c:	e671      	b.n	8001172 <__aeabi_dmul+0x82>
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	000007ff 	.word	0x000007ff
 8001494:	fffffc01 	.word	0xfffffc01
 8001498:	08008608 	.word	0x08008608
 800149c:	800fffff 	.word	0x800fffff
 80014a0:	fffffc0d 	.word	0xfffffc0d
 80014a4:	000003ff 	.word	0x000003ff
 80014a8:	feffffff 	.word	0xfeffffff
 80014ac:	000007fe 	.word	0x000007fe
 80014b0:	2300      	movs	r3, #0
 80014b2:	2780      	movs	r7, #128	; 0x80
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	033f      	lsls	r7, r7, #12
 80014b8:	2600      	movs	r6, #0
 80014ba:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <__aeabi_dmul+0x4d8>)
 80014bc:	e683      	b.n	80011c6 <__aeabi_dmul+0xd6>
 80014be:	9b01      	ldr	r3, [sp, #4]
 80014c0:	0032      	movs	r2, r6
 80014c2:	46a4      	mov	ip, r4
 80014c4:	4658      	mov	r0, fp
 80014c6:	e670      	b.n	80011aa <__aeabi_dmul+0xba>
 80014c8:	46ac      	mov	ip, r5
 80014ca:	e66e      	b.n	80011aa <__aeabi_dmul+0xba>
 80014cc:	2780      	movs	r7, #128	; 0x80
 80014ce:	9901      	ldr	r1, [sp, #4]
 80014d0:	033f      	lsls	r7, r7, #12
 80014d2:	4239      	tst	r1, r7
 80014d4:	d02d      	beq.n	8001532 <__aeabi_dmul+0x442>
 80014d6:	423b      	tst	r3, r7
 80014d8:	d12b      	bne.n	8001532 <__aeabi_dmul+0x442>
 80014da:	431f      	orrs	r7, r3
 80014dc:	033f      	lsls	r7, r7, #12
 80014de:	0b3f      	lsrs	r7, r7, #12
 80014e0:	9500      	str	r5, [sp, #0]
 80014e2:	0016      	movs	r6, r2
 80014e4:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <__aeabi_dmul+0x4d8>)
 80014e6:	e66e      	b.n	80011c6 <__aeabi_dmul+0xd6>
 80014e8:	2501      	movs	r5, #1
 80014ea:	1b2d      	subs	r5, r5, r4
 80014ec:	2d38      	cmp	r5, #56	; 0x38
 80014ee:	dd00      	ble.n	80014f2 <__aeabi_dmul+0x402>
 80014f0:	e666      	b.n	80011c0 <__aeabi_dmul+0xd0>
 80014f2:	2d1f      	cmp	r5, #31
 80014f4:	dc40      	bgt.n	8001578 <__aeabi_dmul+0x488>
 80014f6:	4835      	ldr	r0, [pc, #212]	; (80015cc <__aeabi_dmul+0x4dc>)
 80014f8:	001c      	movs	r4, r3
 80014fa:	4450      	add	r0, sl
 80014fc:	0016      	movs	r6, r2
 80014fe:	4082      	lsls	r2, r0
 8001500:	4084      	lsls	r4, r0
 8001502:	40ee      	lsrs	r6, r5
 8001504:	1e50      	subs	r0, r2, #1
 8001506:	4182      	sbcs	r2, r0
 8001508:	4334      	orrs	r4, r6
 800150a:	4314      	orrs	r4, r2
 800150c:	40eb      	lsrs	r3, r5
 800150e:	0762      	lsls	r2, r4, #29
 8001510:	d009      	beq.n	8001526 <__aeabi_dmul+0x436>
 8001512:	220f      	movs	r2, #15
 8001514:	4022      	ands	r2, r4
 8001516:	2a04      	cmp	r2, #4
 8001518:	d005      	beq.n	8001526 <__aeabi_dmul+0x436>
 800151a:	0022      	movs	r2, r4
 800151c:	1d14      	adds	r4, r2, #4
 800151e:	4294      	cmp	r4, r2
 8001520:	4180      	sbcs	r0, r0
 8001522:	4240      	negs	r0, r0
 8001524:	181b      	adds	r3, r3, r0
 8001526:	021a      	lsls	r2, r3, #8
 8001528:	d53e      	bpl.n	80015a8 <__aeabi_dmul+0x4b8>
 800152a:	2301      	movs	r3, #1
 800152c:	2700      	movs	r7, #0
 800152e:	2600      	movs	r6, #0
 8001530:	e649      	b.n	80011c6 <__aeabi_dmul+0xd6>
 8001532:	2780      	movs	r7, #128	; 0x80
 8001534:	9b01      	ldr	r3, [sp, #4]
 8001536:	033f      	lsls	r7, r7, #12
 8001538:	431f      	orrs	r7, r3
 800153a:	033f      	lsls	r7, r7, #12
 800153c:	0b3f      	lsrs	r7, r7, #12
 800153e:	9400      	str	r4, [sp, #0]
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <__aeabi_dmul+0x4d8>)
 8001542:	e640      	b.n	80011c6 <__aeabi_dmul+0xd6>
 8001544:	0003      	movs	r3, r0
 8001546:	465a      	mov	r2, fp
 8001548:	3b28      	subs	r3, #40	; 0x28
 800154a:	409a      	lsls	r2, r3
 800154c:	2600      	movs	r6, #0
 800154e:	9201      	str	r2, [sp, #4]
 8001550:	e66d      	b.n	800122e <__aeabi_dmul+0x13e>
 8001552:	4658      	mov	r0, fp
 8001554:	f000 fd0a 	bl	8001f6c <__clzsi2>
 8001558:	3020      	adds	r0, #32
 800155a:	e657      	b.n	800120c <__aeabi_dmul+0x11c>
 800155c:	0003      	movs	r3, r0
 800155e:	4652      	mov	r2, sl
 8001560:	3b28      	subs	r3, #40	; 0x28
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	2200      	movs	r2, #0
 8001568:	e693      	b.n	8001292 <__aeabi_dmul+0x1a2>
 800156a:	4650      	mov	r0, sl
 800156c:	f000 fcfe 	bl	8001f6c <__clzsi2>
 8001570:	3020      	adds	r0, #32
 8001572:	e67b      	b.n	800126c <__aeabi_dmul+0x17c>
 8001574:	46ca      	mov	sl, r9
 8001576:	e750      	b.n	800141a <__aeabi_dmul+0x32a>
 8001578:	201f      	movs	r0, #31
 800157a:	001e      	movs	r6, r3
 800157c:	4240      	negs	r0, r0
 800157e:	1b04      	subs	r4, r0, r4
 8001580:	40e6      	lsrs	r6, r4
 8001582:	2d20      	cmp	r5, #32
 8001584:	d003      	beq.n	800158e <__aeabi_dmul+0x49e>
 8001586:	4c12      	ldr	r4, [pc, #72]	; (80015d0 <__aeabi_dmul+0x4e0>)
 8001588:	4454      	add	r4, sl
 800158a:	40a3      	lsls	r3, r4
 800158c:	431a      	orrs	r2, r3
 800158e:	1e50      	subs	r0, r2, #1
 8001590:	4182      	sbcs	r2, r0
 8001592:	4332      	orrs	r2, r6
 8001594:	2607      	movs	r6, #7
 8001596:	2700      	movs	r7, #0
 8001598:	4016      	ands	r6, r2
 800159a:	d009      	beq.n	80015b0 <__aeabi_dmul+0x4c0>
 800159c:	200f      	movs	r0, #15
 800159e:	2300      	movs	r3, #0
 80015a0:	4010      	ands	r0, r2
 80015a2:	0014      	movs	r4, r2
 80015a4:	2804      	cmp	r0, #4
 80015a6:	d1b9      	bne.n	800151c <__aeabi_dmul+0x42c>
 80015a8:	0022      	movs	r2, r4
 80015aa:	075e      	lsls	r6, r3, #29
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	0b1f      	lsrs	r7, r3, #12
 80015b0:	08d2      	lsrs	r2, r2, #3
 80015b2:	4316      	orrs	r6, r2
 80015b4:	2300      	movs	r3, #0
 80015b6:	e606      	b.n	80011c6 <__aeabi_dmul+0xd6>
 80015b8:	2780      	movs	r7, #128	; 0x80
 80015ba:	033f      	lsls	r7, r7, #12
 80015bc:	431f      	orrs	r7, r3
 80015be:	033f      	lsls	r7, r7, #12
 80015c0:	0b3f      	lsrs	r7, r7, #12
 80015c2:	0016      	movs	r6, r2
 80015c4:	4b00      	ldr	r3, [pc, #0]	; (80015c8 <__aeabi_dmul+0x4d8>)
 80015c6:	e5fe      	b.n	80011c6 <__aeabi_dmul+0xd6>
 80015c8:	000007ff 	.word	0x000007ff
 80015cc:	0000041e 	.word	0x0000041e
 80015d0:	0000043e 	.word	0x0000043e

080015d4 <__aeabi_dsub>:
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	4657      	mov	r7, sl
 80015d8:	464e      	mov	r6, r9
 80015da:	4645      	mov	r5, r8
 80015dc:	46de      	mov	lr, fp
 80015de:	000c      	movs	r4, r1
 80015e0:	0309      	lsls	r1, r1, #12
 80015e2:	b5e0      	push	{r5, r6, r7, lr}
 80015e4:	0a49      	lsrs	r1, r1, #9
 80015e6:	0f46      	lsrs	r6, r0, #29
 80015e8:	005f      	lsls	r7, r3, #1
 80015ea:	4331      	orrs	r1, r6
 80015ec:	031e      	lsls	r6, r3, #12
 80015ee:	0fdb      	lsrs	r3, r3, #31
 80015f0:	0a76      	lsrs	r6, r6, #9
 80015f2:	469b      	mov	fp, r3
 80015f4:	0f53      	lsrs	r3, r2, #29
 80015f6:	4333      	orrs	r3, r6
 80015f8:	4ec8      	ldr	r6, [pc, #800]	; (800191c <__aeabi_dsub+0x348>)
 80015fa:	0065      	lsls	r5, r4, #1
 80015fc:	00c0      	lsls	r0, r0, #3
 80015fe:	0fe4      	lsrs	r4, r4, #31
 8001600:	00d2      	lsls	r2, r2, #3
 8001602:	0d6d      	lsrs	r5, r5, #21
 8001604:	46a2      	mov	sl, r4
 8001606:	4681      	mov	r9, r0
 8001608:	0d7f      	lsrs	r7, r7, #21
 800160a:	469c      	mov	ip, r3
 800160c:	4690      	mov	r8, r2
 800160e:	42b7      	cmp	r7, r6
 8001610:	d100      	bne.n	8001614 <__aeabi_dsub+0x40>
 8001612:	e0b9      	b.n	8001788 <__aeabi_dsub+0x1b4>
 8001614:	465b      	mov	r3, fp
 8001616:	2601      	movs	r6, #1
 8001618:	4073      	eors	r3, r6
 800161a:	469b      	mov	fp, r3
 800161c:	1bee      	subs	r6, r5, r7
 800161e:	45a3      	cmp	fp, r4
 8001620:	d100      	bne.n	8001624 <__aeabi_dsub+0x50>
 8001622:	e083      	b.n	800172c <__aeabi_dsub+0x158>
 8001624:	2e00      	cmp	r6, #0
 8001626:	dd63      	ble.n	80016f0 <__aeabi_dsub+0x11c>
 8001628:	2f00      	cmp	r7, #0
 800162a:	d000      	beq.n	800162e <__aeabi_dsub+0x5a>
 800162c:	e0b1      	b.n	8001792 <__aeabi_dsub+0x1be>
 800162e:	4663      	mov	r3, ip
 8001630:	4313      	orrs	r3, r2
 8001632:	d100      	bne.n	8001636 <__aeabi_dsub+0x62>
 8001634:	e123      	b.n	800187e <__aeabi_dsub+0x2aa>
 8001636:	1e73      	subs	r3, r6, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d000      	beq.n	800163e <__aeabi_dsub+0x6a>
 800163c:	e1ba      	b.n	80019b4 <__aeabi_dsub+0x3e0>
 800163e:	1a86      	subs	r6, r0, r2
 8001640:	4663      	mov	r3, ip
 8001642:	42b0      	cmp	r0, r6
 8001644:	4180      	sbcs	r0, r0
 8001646:	2501      	movs	r5, #1
 8001648:	1ac9      	subs	r1, r1, r3
 800164a:	4240      	negs	r0, r0
 800164c:	1a09      	subs	r1, r1, r0
 800164e:	020b      	lsls	r3, r1, #8
 8001650:	d400      	bmi.n	8001654 <__aeabi_dsub+0x80>
 8001652:	e147      	b.n	80018e4 <__aeabi_dsub+0x310>
 8001654:	0249      	lsls	r1, r1, #9
 8001656:	0a4b      	lsrs	r3, r1, #9
 8001658:	4698      	mov	r8, r3
 800165a:	4643      	mov	r3, r8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d100      	bne.n	8001662 <__aeabi_dsub+0x8e>
 8001660:	e189      	b.n	8001976 <__aeabi_dsub+0x3a2>
 8001662:	4640      	mov	r0, r8
 8001664:	f000 fc82 	bl	8001f6c <__clzsi2>
 8001668:	0003      	movs	r3, r0
 800166a:	3b08      	subs	r3, #8
 800166c:	2b1f      	cmp	r3, #31
 800166e:	dd00      	ble.n	8001672 <__aeabi_dsub+0x9e>
 8001670:	e17c      	b.n	800196c <__aeabi_dsub+0x398>
 8001672:	2220      	movs	r2, #32
 8001674:	0030      	movs	r0, r6
 8001676:	1ad2      	subs	r2, r2, r3
 8001678:	4641      	mov	r1, r8
 800167a:	40d0      	lsrs	r0, r2
 800167c:	4099      	lsls	r1, r3
 800167e:	0002      	movs	r2, r0
 8001680:	409e      	lsls	r6, r3
 8001682:	430a      	orrs	r2, r1
 8001684:	429d      	cmp	r5, r3
 8001686:	dd00      	ble.n	800168a <__aeabi_dsub+0xb6>
 8001688:	e16a      	b.n	8001960 <__aeabi_dsub+0x38c>
 800168a:	1b5d      	subs	r5, r3, r5
 800168c:	1c6b      	adds	r3, r5, #1
 800168e:	2b1f      	cmp	r3, #31
 8001690:	dd00      	ble.n	8001694 <__aeabi_dsub+0xc0>
 8001692:	e194      	b.n	80019be <__aeabi_dsub+0x3ea>
 8001694:	2120      	movs	r1, #32
 8001696:	0010      	movs	r0, r2
 8001698:	0035      	movs	r5, r6
 800169a:	1ac9      	subs	r1, r1, r3
 800169c:	408e      	lsls	r6, r1
 800169e:	40da      	lsrs	r2, r3
 80016a0:	4088      	lsls	r0, r1
 80016a2:	40dd      	lsrs	r5, r3
 80016a4:	1e71      	subs	r1, r6, #1
 80016a6:	418e      	sbcs	r6, r1
 80016a8:	0011      	movs	r1, r2
 80016aa:	2207      	movs	r2, #7
 80016ac:	4328      	orrs	r0, r5
 80016ae:	2500      	movs	r5, #0
 80016b0:	4306      	orrs	r6, r0
 80016b2:	4032      	ands	r2, r6
 80016b4:	2a00      	cmp	r2, #0
 80016b6:	d009      	beq.n	80016cc <__aeabi_dsub+0xf8>
 80016b8:	230f      	movs	r3, #15
 80016ba:	4033      	ands	r3, r6
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d005      	beq.n	80016cc <__aeabi_dsub+0xf8>
 80016c0:	1d33      	adds	r3, r6, #4
 80016c2:	42b3      	cmp	r3, r6
 80016c4:	41b6      	sbcs	r6, r6
 80016c6:	4276      	negs	r6, r6
 80016c8:	1989      	adds	r1, r1, r6
 80016ca:	001e      	movs	r6, r3
 80016cc:	020b      	lsls	r3, r1, #8
 80016ce:	d400      	bmi.n	80016d2 <__aeabi_dsub+0xfe>
 80016d0:	e23d      	b.n	8001b4e <__aeabi_dsub+0x57a>
 80016d2:	1c6a      	adds	r2, r5, #1
 80016d4:	4b91      	ldr	r3, [pc, #580]	; (800191c <__aeabi_dsub+0x348>)
 80016d6:	0555      	lsls	r5, r2, #21
 80016d8:	0d6d      	lsrs	r5, r5, #21
 80016da:	429a      	cmp	r2, r3
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dsub+0x10c>
 80016de:	e119      	b.n	8001914 <__aeabi_dsub+0x340>
 80016e0:	4a8f      	ldr	r2, [pc, #572]	; (8001920 <__aeabi_dsub+0x34c>)
 80016e2:	08f6      	lsrs	r6, r6, #3
 80016e4:	400a      	ands	r2, r1
 80016e6:	0757      	lsls	r7, r2, #29
 80016e8:	0252      	lsls	r2, r2, #9
 80016ea:	4337      	orrs	r7, r6
 80016ec:	0b12      	lsrs	r2, r2, #12
 80016ee:	e09b      	b.n	8001828 <__aeabi_dsub+0x254>
 80016f0:	2e00      	cmp	r6, #0
 80016f2:	d000      	beq.n	80016f6 <__aeabi_dsub+0x122>
 80016f4:	e0c5      	b.n	8001882 <__aeabi_dsub+0x2ae>
 80016f6:	1c6e      	adds	r6, r5, #1
 80016f8:	0576      	lsls	r6, r6, #21
 80016fa:	0d76      	lsrs	r6, r6, #21
 80016fc:	2e01      	cmp	r6, #1
 80016fe:	dc00      	bgt.n	8001702 <__aeabi_dsub+0x12e>
 8001700:	e148      	b.n	8001994 <__aeabi_dsub+0x3c0>
 8001702:	4667      	mov	r7, ip
 8001704:	1a86      	subs	r6, r0, r2
 8001706:	1bcb      	subs	r3, r1, r7
 8001708:	42b0      	cmp	r0, r6
 800170a:	41bf      	sbcs	r7, r7
 800170c:	427f      	negs	r7, r7
 800170e:	46b8      	mov	r8, r7
 8001710:	001f      	movs	r7, r3
 8001712:	4643      	mov	r3, r8
 8001714:	1aff      	subs	r7, r7, r3
 8001716:	003b      	movs	r3, r7
 8001718:	46b8      	mov	r8, r7
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	d500      	bpl.n	8001720 <__aeabi_dsub+0x14c>
 800171e:	e15f      	b.n	80019e0 <__aeabi_dsub+0x40c>
 8001720:	4337      	orrs	r7, r6
 8001722:	d19a      	bne.n	800165a <__aeabi_dsub+0x86>
 8001724:	2200      	movs	r2, #0
 8001726:	2400      	movs	r4, #0
 8001728:	2500      	movs	r5, #0
 800172a:	e079      	b.n	8001820 <__aeabi_dsub+0x24c>
 800172c:	2e00      	cmp	r6, #0
 800172e:	dc00      	bgt.n	8001732 <__aeabi_dsub+0x15e>
 8001730:	e0fa      	b.n	8001928 <__aeabi_dsub+0x354>
 8001732:	2f00      	cmp	r7, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dsub+0x164>
 8001736:	e08d      	b.n	8001854 <__aeabi_dsub+0x280>
 8001738:	4b78      	ldr	r3, [pc, #480]	; (800191c <__aeabi_dsub+0x348>)
 800173a:	429d      	cmp	r5, r3
 800173c:	d067      	beq.n	800180e <__aeabi_dsub+0x23a>
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	4667      	mov	r7, ip
 8001742:	041b      	lsls	r3, r3, #16
 8001744:	431f      	orrs	r7, r3
 8001746:	46bc      	mov	ip, r7
 8001748:	2e38      	cmp	r6, #56	; 0x38
 800174a:	dc00      	bgt.n	800174e <__aeabi_dsub+0x17a>
 800174c:	e152      	b.n	80019f4 <__aeabi_dsub+0x420>
 800174e:	4663      	mov	r3, ip
 8001750:	4313      	orrs	r3, r2
 8001752:	1e5a      	subs	r2, r3, #1
 8001754:	4193      	sbcs	r3, r2
 8001756:	181e      	adds	r6, r3, r0
 8001758:	4286      	cmp	r6, r0
 800175a:	4180      	sbcs	r0, r0
 800175c:	4240      	negs	r0, r0
 800175e:	1809      	adds	r1, r1, r0
 8001760:	020b      	lsls	r3, r1, #8
 8001762:	d400      	bmi.n	8001766 <__aeabi_dsub+0x192>
 8001764:	e0be      	b.n	80018e4 <__aeabi_dsub+0x310>
 8001766:	4b6d      	ldr	r3, [pc, #436]	; (800191c <__aeabi_dsub+0x348>)
 8001768:	3501      	adds	r5, #1
 800176a:	429d      	cmp	r5, r3
 800176c:	d100      	bne.n	8001770 <__aeabi_dsub+0x19c>
 800176e:	e0d2      	b.n	8001916 <__aeabi_dsub+0x342>
 8001770:	4a6b      	ldr	r2, [pc, #428]	; (8001920 <__aeabi_dsub+0x34c>)
 8001772:	0873      	lsrs	r3, r6, #1
 8001774:	400a      	ands	r2, r1
 8001776:	2101      	movs	r1, #1
 8001778:	400e      	ands	r6, r1
 800177a:	431e      	orrs	r6, r3
 800177c:	0851      	lsrs	r1, r2, #1
 800177e:	07d3      	lsls	r3, r2, #31
 8001780:	2207      	movs	r2, #7
 8001782:	431e      	orrs	r6, r3
 8001784:	4032      	ands	r2, r6
 8001786:	e795      	b.n	80016b4 <__aeabi_dsub+0xe0>
 8001788:	001e      	movs	r6, r3
 800178a:	4316      	orrs	r6, r2
 800178c:	d000      	beq.n	8001790 <__aeabi_dsub+0x1bc>
 800178e:	e745      	b.n	800161c <__aeabi_dsub+0x48>
 8001790:	e740      	b.n	8001614 <__aeabi_dsub+0x40>
 8001792:	4b62      	ldr	r3, [pc, #392]	; (800191c <__aeabi_dsub+0x348>)
 8001794:	429d      	cmp	r5, r3
 8001796:	d03a      	beq.n	800180e <__aeabi_dsub+0x23a>
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	4667      	mov	r7, ip
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	431f      	orrs	r7, r3
 80017a0:	46bc      	mov	ip, r7
 80017a2:	2e38      	cmp	r6, #56	; 0x38
 80017a4:	dd00      	ble.n	80017a8 <__aeabi_dsub+0x1d4>
 80017a6:	e0eb      	b.n	8001980 <__aeabi_dsub+0x3ac>
 80017a8:	2e1f      	cmp	r6, #31
 80017aa:	dc00      	bgt.n	80017ae <__aeabi_dsub+0x1da>
 80017ac:	e13a      	b.n	8001a24 <__aeabi_dsub+0x450>
 80017ae:	0033      	movs	r3, r6
 80017b0:	4667      	mov	r7, ip
 80017b2:	3b20      	subs	r3, #32
 80017b4:	40df      	lsrs	r7, r3
 80017b6:	003b      	movs	r3, r7
 80017b8:	2e20      	cmp	r6, #32
 80017ba:	d005      	beq.n	80017c8 <__aeabi_dsub+0x1f4>
 80017bc:	2740      	movs	r7, #64	; 0x40
 80017be:	1bbf      	subs	r7, r7, r6
 80017c0:	4666      	mov	r6, ip
 80017c2:	40be      	lsls	r6, r7
 80017c4:	4332      	orrs	r2, r6
 80017c6:	4690      	mov	r8, r2
 80017c8:	4646      	mov	r6, r8
 80017ca:	1e72      	subs	r2, r6, #1
 80017cc:	4196      	sbcs	r6, r2
 80017ce:	4333      	orrs	r3, r6
 80017d0:	e0da      	b.n	8001988 <__aeabi_dsub+0x3b4>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dsub+0x204>
 80017d6:	e214      	b.n	8001c02 <__aeabi_dsub+0x62e>
 80017d8:	4663      	mov	r3, ip
 80017da:	4313      	orrs	r3, r2
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dsub+0x20c>
 80017de:	e168      	b.n	8001ab2 <__aeabi_dsub+0x4de>
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	074e      	lsls	r6, r1, #29
 80017e4:	08c0      	lsrs	r0, r0, #3
 80017e6:	08c9      	lsrs	r1, r1, #3
 80017e8:	031b      	lsls	r3, r3, #12
 80017ea:	4306      	orrs	r6, r0
 80017ec:	4219      	tst	r1, r3
 80017ee:	d008      	beq.n	8001802 <__aeabi_dsub+0x22e>
 80017f0:	4660      	mov	r0, ip
 80017f2:	08c0      	lsrs	r0, r0, #3
 80017f4:	4218      	tst	r0, r3
 80017f6:	d104      	bne.n	8001802 <__aeabi_dsub+0x22e>
 80017f8:	4663      	mov	r3, ip
 80017fa:	0001      	movs	r1, r0
 80017fc:	08d2      	lsrs	r2, r2, #3
 80017fe:	075e      	lsls	r6, r3, #29
 8001800:	4316      	orrs	r6, r2
 8001802:	00f3      	lsls	r3, r6, #3
 8001804:	4699      	mov	r9, r3
 8001806:	00c9      	lsls	r1, r1, #3
 8001808:	0f72      	lsrs	r2, r6, #29
 800180a:	4d44      	ldr	r5, [pc, #272]	; (800191c <__aeabi_dsub+0x348>)
 800180c:	4311      	orrs	r1, r2
 800180e:	464b      	mov	r3, r9
 8001810:	08de      	lsrs	r6, r3, #3
 8001812:	4b42      	ldr	r3, [pc, #264]	; (800191c <__aeabi_dsub+0x348>)
 8001814:	074f      	lsls	r7, r1, #29
 8001816:	4337      	orrs	r7, r6
 8001818:	08ca      	lsrs	r2, r1, #3
 800181a:	429d      	cmp	r5, r3
 800181c:	d100      	bne.n	8001820 <__aeabi_dsub+0x24c>
 800181e:	e06e      	b.n	80018fe <__aeabi_dsub+0x32a>
 8001820:	0312      	lsls	r2, r2, #12
 8001822:	056d      	lsls	r5, r5, #21
 8001824:	0b12      	lsrs	r2, r2, #12
 8001826:	0d6d      	lsrs	r5, r5, #21
 8001828:	2100      	movs	r1, #0
 800182a:	0312      	lsls	r2, r2, #12
 800182c:	0b13      	lsrs	r3, r2, #12
 800182e:	0d0a      	lsrs	r2, r1, #20
 8001830:	0512      	lsls	r2, r2, #20
 8001832:	431a      	orrs	r2, r3
 8001834:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <__aeabi_dsub+0x350>)
 8001836:	052d      	lsls	r5, r5, #20
 8001838:	4013      	ands	r3, r2
 800183a:	432b      	orrs	r3, r5
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	07e4      	lsls	r4, r4, #31
 8001840:	085b      	lsrs	r3, r3, #1
 8001842:	4323      	orrs	r3, r4
 8001844:	0038      	movs	r0, r7
 8001846:	0019      	movs	r1, r3
 8001848:	bc3c      	pop	{r2, r3, r4, r5}
 800184a:	4690      	mov	r8, r2
 800184c:	4699      	mov	r9, r3
 800184e:	46a2      	mov	sl, r4
 8001850:	46ab      	mov	fp, r5
 8001852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001854:	4663      	mov	r3, ip
 8001856:	4313      	orrs	r3, r2
 8001858:	d011      	beq.n	800187e <__aeabi_dsub+0x2aa>
 800185a:	1e73      	subs	r3, r6, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d000      	beq.n	8001862 <__aeabi_dsub+0x28e>
 8001860:	e107      	b.n	8001a72 <__aeabi_dsub+0x49e>
 8001862:	1886      	adds	r6, r0, r2
 8001864:	4286      	cmp	r6, r0
 8001866:	4180      	sbcs	r0, r0
 8001868:	4461      	add	r1, ip
 800186a:	4240      	negs	r0, r0
 800186c:	1809      	adds	r1, r1, r0
 800186e:	2501      	movs	r5, #1
 8001870:	020b      	lsls	r3, r1, #8
 8001872:	d537      	bpl.n	80018e4 <__aeabi_dsub+0x310>
 8001874:	2502      	movs	r5, #2
 8001876:	e77b      	b.n	8001770 <__aeabi_dsub+0x19c>
 8001878:	003e      	movs	r6, r7
 800187a:	4661      	mov	r1, ip
 800187c:	4691      	mov	r9, r2
 800187e:	0035      	movs	r5, r6
 8001880:	e7c5      	b.n	800180e <__aeabi_dsub+0x23a>
 8001882:	465c      	mov	r4, fp
 8001884:	2d00      	cmp	r5, #0
 8001886:	d000      	beq.n	800188a <__aeabi_dsub+0x2b6>
 8001888:	e0e1      	b.n	8001a4e <__aeabi_dsub+0x47a>
 800188a:	000b      	movs	r3, r1
 800188c:	4303      	orrs	r3, r0
 800188e:	d0f3      	beq.n	8001878 <__aeabi_dsub+0x2a4>
 8001890:	1c73      	adds	r3, r6, #1
 8001892:	d100      	bne.n	8001896 <__aeabi_dsub+0x2c2>
 8001894:	e1ac      	b.n	8001bf0 <__aeabi_dsub+0x61c>
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <__aeabi_dsub+0x348>)
 8001898:	429f      	cmp	r7, r3
 800189a:	d100      	bne.n	800189e <__aeabi_dsub+0x2ca>
 800189c:	e13a      	b.n	8001b14 <__aeabi_dsub+0x540>
 800189e:	43f3      	mvns	r3, r6
 80018a0:	2b38      	cmp	r3, #56	; 0x38
 80018a2:	dd00      	ble.n	80018a6 <__aeabi_dsub+0x2d2>
 80018a4:	e16f      	b.n	8001b86 <__aeabi_dsub+0x5b2>
 80018a6:	2b1f      	cmp	r3, #31
 80018a8:	dd00      	ble.n	80018ac <__aeabi_dsub+0x2d8>
 80018aa:	e18c      	b.n	8001bc6 <__aeabi_dsub+0x5f2>
 80018ac:	2520      	movs	r5, #32
 80018ae:	000e      	movs	r6, r1
 80018b0:	1aed      	subs	r5, r5, r3
 80018b2:	40ae      	lsls	r6, r5
 80018b4:	46b0      	mov	r8, r6
 80018b6:	0006      	movs	r6, r0
 80018b8:	46aa      	mov	sl, r5
 80018ba:	40de      	lsrs	r6, r3
 80018bc:	4645      	mov	r5, r8
 80018be:	4335      	orrs	r5, r6
 80018c0:	002e      	movs	r6, r5
 80018c2:	4655      	mov	r5, sl
 80018c4:	40d9      	lsrs	r1, r3
 80018c6:	40a8      	lsls	r0, r5
 80018c8:	4663      	mov	r3, ip
 80018ca:	1e45      	subs	r5, r0, #1
 80018cc:	41a8      	sbcs	r0, r5
 80018ce:	1a5b      	subs	r3, r3, r1
 80018d0:	469c      	mov	ip, r3
 80018d2:	4330      	orrs	r0, r6
 80018d4:	1a16      	subs	r6, r2, r0
 80018d6:	42b2      	cmp	r2, r6
 80018d8:	4192      	sbcs	r2, r2
 80018da:	4663      	mov	r3, ip
 80018dc:	4252      	negs	r2, r2
 80018de:	1a99      	subs	r1, r3, r2
 80018e0:	003d      	movs	r5, r7
 80018e2:	e6b4      	b.n	800164e <__aeabi_dsub+0x7a>
 80018e4:	2207      	movs	r2, #7
 80018e6:	4032      	ands	r2, r6
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	d000      	beq.n	80018ee <__aeabi_dsub+0x31a>
 80018ec:	e6e4      	b.n	80016b8 <__aeabi_dsub+0xe4>
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <__aeabi_dsub+0x348>)
 80018f0:	08f6      	lsrs	r6, r6, #3
 80018f2:	074f      	lsls	r7, r1, #29
 80018f4:	4337      	orrs	r7, r6
 80018f6:	08ca      	lsrs	r2, r1, #3
 80018f8:	429d      	cmp	r5, r3
 80018fa:	d000      	beq.n	80018fe <__aeabi_dsub+0x32a>
 80018fc:	e790      	b.n	8001820 <__aeabi_dsub+0x24c>
 80018fe:	003b      	movs	r3, r7
 8001900:	4313      	orrs	r3, r2
 8001902:	d100      	bne.n	8001906 <__aeabi_dsub+0x332>
 8001904:	e1a6      	b.n	8001c54 <__aeabi_dsub+0x680>
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	031b      	lsls	r3, r3, #12
 800190a:	431a      	orrs	r2, r3
 800190c:	0312      	lsls	r2, r2, #12
 800190e:	0b12      	lsrs	r2, r2, #12
 8001910:	4d02      	ldr	r5, [pc, #8]	; (800191c <__aeabi_dsub+0x348>)
 8001912:	e789      	b.n	8001828 <__aeabi_dsub+0x254>
 8001914:	0015      	movs	r5, r2
 8001916:	2200      	movs	r2, #0
 8001918:	2700      	movs	r7, #0
 800191a:	e785      	b.n	8001828 <__aeabi_dsub+0x254>
 800191c:	000007ff 	.word	0x000007ff
 8001920:	ff7fffff 	.word	0xff7fffff
 8001924:	800fffff 	.word	0x800fffff
 8001928:	2e00      	cmp	r6, #0
 800192a:	d000      	beq.n	800192e <__aeabi_dsub+0x35a>
 800192c:	e0c7      	b.n	8001abe <__aeabi_dsub+0x4ea>
 800192e:	1c6b      	adds	r3, r5, #1
 8001930:	055e      	lsls	r6, r3, #21
 8001932:	0d76      	lsrs	r6, r6, #21
 8001934:	2e01      	cmp	r6, #1
 8001936:	dc00      	bgt.n	800193a <__aeabi_dsub+0x366>
 8001938:	e0f0      	b.n	8001b1c <__aeabi_dsub+0x548>
 800193a:	4dc8      	ldr	r5, [pc, #800]	; (8001c5c <__aeabi_dsub+0x688>)
 800193c:	42ab      	cmp	r3, r5
 800193e:	d100      	bne.n	8001942 <__aeabi_dsub+0x36e>
 8001940:	e0b9      	b.n	8001ab6 <__aeabi_dsub+0x4e2>
 8001942:	1885      	adds	r5, r0, r2
 8001944:	000a      	movs	r2, r1
 8001946:	4285      	cmp	r5, r0
 8001948:	4189      	sbcs	r1, r1
 800194a:	4462      	add	r2, ip
 800194c:	4249      	negs	r1, r1
 800194e:	1851      	adds	r1, r2, r1
 8001950:	2207      	movs	r2, #7
 8001952:	07ce      	lsls	r6, r1, #31
 8001954:	086d      	lsrs	r5, r5, #1
 8001956:	432e      	orrs	r6, r5
 8001958:	0849      	lsrs	r1, r1, #1
 800195a:	4032      	ands	r2, r6
 800195c:	001d      	movs	r5, r3
 800195e:	e6a9      	b.n	80016b4 <__aeabi_dsub+0xe0>
 8001960:	49bf      	ldr	r1, [pc, #764]	; (8001c60 <__aeabi_dsub+0x68c>)
 8001962:	1aed      	subs	r5, r5, r3
 8001964:	4011      	ands	r1, r2
 8001966:	2207      	movs	r2, #7
 8001968:	4032      	ands	r2, r6
 800196a:	e6a3      	b.n	80016b4 <__aeabi_dsub+0xe0>
 800196c:	0032      	movs	r2, r6
 800196e:	3828      	subs	r0, #40	; 0x28
 8001970:	4082      	lsls	r2, r0
 8001972:	2600      	movs	r6, #0
 8001974:	e686      	b.n	8001684 <__aeabi_dsub+0xb0>
 8001976:	0030      	movs	r0, r6
 8001978:	f000 faf8 	bl	8001f6c <__clzsi2>
 800197c:	3020      	adds	r0, #32
 800197e:	e673      	b.n	8001668 <__aeabi_dsub+0x94>
 8001980:	4663      	mov	r3, ip
 8001982:	4313      	orrs	r3, r2
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	4193      	sbcs	r3, r2
 8001988:	1ac6      	subs	r6, r0, r3
 800198a:	42b0      	cmp	r0, r6
 800198c:	4180      	sbcs	r0, r0
 800198e:	4240      	negs	r0, r0
 8001990:	1a09      	subs	r1, r1, r0
 8001992:	e65c      	b.n	800164e <__aeabi_dsub+0x7a>
 8001994:	000e      	movs	r6, r1
 8001996:	4667      	mov	r7, ip
 8001998:	4306      	orrs	r6, r0
 800199a:	4317      	orrs	r7, r2
 800199c:	2d00      	cmp	r5, #0
 800199e:	d15e      	bne.n	8001a5e <__aeabi_dsub+0x48a>
 80019a0:	2e00      	cmp	r6, #0
 80019a2:	d000      	beq.n	80019a6 <__aeabi_dsub+0x3d2>
 80019a4:	e0f3      	b.n	8001b8e <__aeabi_dsub+0x5ba>
 80019a6:	2f00      	cmp	r7, #0
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0x3d8>
 80019aa:	e11e      	b.n	8001bea <__aeabi_dsub+0x616>
 80019ac:	465c      	mov	r4, fp
 80019ae:	4661      	mov	r1, ip
 80019b0:	4691      	mov	r9, r2
 80019b2:	e72c      	b.n	800180e <__aeabi_dsub+0x23a>
 80019b4:	4fa9      	ldr	r7, [pc, #676]	; (8001c5c <__aeabi_dsub+0x688>)
 80019b6:	42be      	cmp	r6, r7
 80019b8:	d07b      	beq.n	8001ab2 <__aeabi_dsub+0x4de>
 80019ba:	001e      	movs	r6, r3
 80019bc:	e6f1      	b.n	80017a2 <__aeabi_dsub+0x1ce>
 80019be:	0010      	movs	r0, r2
 80019c0:	3d1f      	subs	r5, #31
 80019c2:	40e8      	lsrs	r0, r5
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d003      	beq.n	80019d0 <__aeabi_dsub+0x3fc>
 80019c8:	2140      	movs	r1, #64	; 0x40
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	409a      	lsls	r2, r3
 80019ce:	4316      	orrs	r6, r2
 80019d0:	1e73      	subs	r3, r6, #1
 80019d2:	419e      	sbcs	r6, r3
 80019d4:	2207      	movs	r2, #7
 80019d6:	4306      	orrs	r6, r0
 80019d8:	4032      	ands	r2, r6
 80019da:	2100      	movs	r1, #0
 80019dc:	2500      	movs	r5, #0
 80019de:	e783      	b.n	80018e8 <__aeabi_dsub+0x314>
 80019e0:	1a16      	subs	r6, r2, r0
 80019e2:	4663      	mov	r3, ip
 80019e4:	42b2      	cmp	r2, r6
 80019e6:	4180      	sbcs	r0, r0
 80019e8:	1a59      	subs	r1, r3, r1
 80019ea:	4240      	negs	r0, r0
 80019ec:	1a0b      	subs	r3, r1, r0
 80019ee:	4698      	mov	r8, r3
 80019f0:	465c      	mov	r4, fp
 80019f2:	e632      	b.n	800165a <__aeabi_dsub+0x86>
 80019f4:	2e1f      	cmp	r6, #31
 80019f6:	dd00      	ble.n	80019fa <__aeabi_dsub+0x426>
 80019f8:	e0ab      	b.n	8001b52 <__aeabi_dsub+0x57e>
 80019fa:	2720      	movs	r7, #32
 80019fc:	1bbb      	subs	r3, r7, r6
 80019fe:	469a      	mov	sl, r3
 8001a00:	4663      	mov	r3, ip
 8001a02:	4657      	mov	r7, sl
 8001a04:	40bb      	lsls	r3, r7
 8001a06:	4699      	mov	r9, r3
 8001a08:	0013      	movs	r3, r2
 8001a0a:	464f      	mov	r7, r9
 8001a0c:	40f3      	lsrs	r3, r6
 8001a0e:	431f      	orrs	r7, r3
 8001a10:	003b      	movs	r3, r7
 8001a12:	4657      	mov	r7, sl
 8001a14:	40ba      	lsls	r2, r7
 8001a16:	1e57      	subs	r7, r2, #1
 8001a18:	41ba      	sbcs	r2, r7
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	4662      	mov	r2, ip
 8001a1e:	40f2      	lsrs	r2, r6
 8001a20:	1889      	adds	r1, r1, r2
 8001a22:	e698      	b.n	8001756 <__aeabi_dsub+0x182>
 8001a24:	2720      	movs	r7, #32
 8001a26:	1bbb      	subs	r3, r7, r6
 8001a28:	469a      	mov	sl, r3
 8001a2a:	4663      	mov	r3, ip
 8001a2c:	4657      	mov	r7, sl
 8001a2e:	40bb      	lsls	r3, r7
 8001a30:	4699      	mov	r9, r3
 8001a32:	0013      	movs	r3, r2
 8001a34:	464f      	mov	r7, r9
 8001a36:	40f3      	lsrs	r3, r6
 8001a38:	431f      	orrs	r7, r3
 8001a3a:	003b      	movs	r3, r7
 8001a3c:	4657      	mov	r7, sl
 8001a3e:	40ba      	lsls	r2, r7
 8001a40:	1e57      	subs	r7, r2, #1
 8001a42:	41ba      	sbcs	r2, r7
 8001a44:	4313      	orrs	r3, r2
 8001a46:	4662      	mov	r2, ip
 8001a48:	40f2      	lsrs	r2, r6
 8001a4a:	1a89      	subs	r1, r1, r2
 8001a4c:	e79c      	b.n	8001988 <__aeabi_dsub+0x3b4>
 8001a4e:	4b83      	ldr	r3, [pc, #524]	; (8001c5c <__aeabi_dsub+0x688>)
 8001a50:	429f      	cmp	r7, r3
 8001a52:	d05f      	beq.n	8001b14 <__aeabi_dsub+0x540>
 8001a54:	2580      	movs	r5, #128	; 0x80
 8001a56:	042d      	lsls	r5, r5, #16
 8001a58:	4273      	negs	r3, r6
 8001a5a:	4329      	orrs	r1, r5
 8001a5c:	e720      	b.n	80018a0 <__aeabi_dsub+0x2cc>
 8001a5e:	2e00      	cmp	r6, #0
 8001a60:	d10c      	bne.n	8001a7c <__aeabi_dsub+0x4a8>
 8001a62:	2f00      	cmp	r7, #0
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dsub+0x494>
 8001a66:	e0d0      	b.n	8001c0a <__aeabi_dsub+0x636>
 8001a68:	465c      	mov	r4, fp
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	4d7b      	ldr	r5, [pc, #492]	; (8001c5c <__aeabi_dsub+0x688>)
 8001a70:	e6cd      	b.n	800180e <__aeabi_dsub+0x23a>
 8001a72:	4f7a      	ldr	r7, [pc, #488]	; (8001c5c <__aeabi_dsub+0x688>)
 8001a74:	42be      	cmp	r6, r7
 8001a76:	d01c      	beq.n	8001ab2 <__aeabi_dsub+0x4de>
 8001a78:	001e      	movs	r6, r3
 8001a7a:	e665      	b.n	8001748 <__aeabi_dsub+0x174>
 8001a7c:	2f00      	cmp	r7, #0
 8001a7e:	d018      	beq.n	8001ab2 <__aeabi_dsub+0x4de>
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	074e      	lsls	r6, r1, #29
 8001a84:	4306      	orrs	r6, r0
 8001a86:	2080      	movs	r0, #128	; 0x80
 8001a88:	08c9      	lsrs	r1, r1, #3
 8001a8a:	0300      	lsls	r0, r0, #12
 8001a8c:	4201      	tst	r1, r0
 8001a8e:	d008      	beq.n	8001aa2 <__aeabi_dsub+0x4ce>
 8001a90:	4663      	mov	r3, ip
 8001a92:	08dc      	lsrs	r4, r3, #3
 8001a94:	4204      	tst	r4, r0
 8001a96:	d104      	bne.n	8001aa2 <__aeabi_dsub+0x4ce>
 8001a98:	0021      	movs	r1, r4
 8001a9a:	46da      	mov	sl, fp
 8001a9c:	08d2      	lsrs	r2, r2, #3
 8001a9e:	075e      	lsls	r6, r3, #29
 8001aa0:	4316      	orrs	r6, r2
 8001aa2:	00f3      	lsls	r3, r6, #3
 8001aa4:	4699      	mov	r9, r3
 8001aa6:	2401      	movs	r4, #1
 8001aa8:	4653      	mov	r3, sl
 8001aaa:	00c9      	lsls	r1, r1, #3
 8001aac:	0f72      	lsrs	r2, r6, #29
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	401c      	ands	r4, r3
 8001ab2:	4d6a      	ldr	r5, [pc, #424]	; (8001c5c <__aeabi_dsub+0x688>)
 8001ab4:	e6ab      	b.n	800180e <__aeabi_dsub+0x23a>
 8001ab6:	001d      	movs	r5, r3
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2700      	movs	r7, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_dsub+0x254>
 8001abe:	2d00      	cmp	r5, #0
 8001ac0:	d159      	bne.n	8001b76 <__aeabi_dsub+0x5a2>
 8001ac2:	000b      	movs	r3, r1
 8001ac4:	4303      	orrs	r3, r0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x4f6>
 8001ac8:	e6d6      	b.n	8001878 <__aeabi_dsub+0x2a4>
 8001aca:	1c73      	adds	r3, r6, #1
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dsub+0x4fc>
 8001ace:	e0b2      	b.n	8001c36 <__aeabi_dsub+0x662>
 8001ad0:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <__aeabi_dsub+0x688>)
 8001ad2:	429f      	cmp	r7, r3
 8001ad4:	d01e      	beq.n	8001b14 <__aeabi_dsub+0x540>
 8001ad6:	43f3      	mvns	r3, r6
 8001ad8:	2b38      	cmp	r3, #56	; 0x38
 8001ada:	dc6f      	bgt.n	8001bbc <__aeabi_dsub+0x5e8>
 8001adc:	2b1f      	cmp	r3, #31
 8001ade:	dd00      	ble.n	8001ae2 <__aeabi_dsub+0x50e>
 8001ae0:	e097      	b.n	8001c12 <__aeabi_dsub+0x63e>
 8001ae2:	2520      	movs	r5, #32
 8001ae4:	000e      	movs	r6, r1
 8001ae6:	1aed      	subs	r5, r5, r3
 8001ae8:	40ae      	lsls	r6, r5
 8001aea:	46b0      	mov	r8, r6
 8001aec:	0006      	movs	r6, r0
 8001aee:	46aa      	mov	sl, r5
 8001af0:	40de      	lsrs	r6, r3
 8001af2:	4645      	mov	r5, r8
 8001af4:	4335      	orrs	r5, r6
 8001af6:	002e      	movs	r6, r5
 8001af8:	4655      	mov	r5, sl
 8001afa:	40a8      	lsls	r0, r5
 8001afc:	40d9      	lsrs	r1, r3
 8001afe:	1e45      	subs	r5, r0, #1
 8001b00:	41a8      	sbcs	r0, r5
 8001b02:	448c      	add	ip, r1
 8001b04:	4306      	orrs	r6, r0
 8001b06:	18b6      	adds	r6, r6, r2
 8001b08:	4296      	cmp	r6, r2
 8001b0a:	4192      	sbcs	r2, r2
 8001b0c:	4251      	negs	r1, r2
 8001b0e:	4461      	add	r1, ip
 8001b10:	003d      	movs	r5, r7
 8001b12:	e625      	b.n	8001760 <__aeabi_dsub+0x18c>
 8001b14:	003d      	movs	r5, r7
 8001b16:	4661      	mov	r1, ip
 8001b18:	4691      	mov	r9, r2
 8001b1a:	e678      	b.n	800180e <__aeabi_dsub+0x23a>
 8001b1c:	000b      	movs	r3, r1
 8001b1e:	4303      	orrs	r3, r0
 8001b20:	2d00      	cmp	r5, #0
 8001b22:	d000      	beq.n	8001b26 <__aeabi_dsub+0x552>
 8001b24:	e655      	b.n	80017d2 <__aeabi_dsub+0x1fe>
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f5      	beq.n	8001b16 <__aeabi_dsub+0x542>
 8001b2a:	4663      	mov	r3, ip
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x55e>
 8001b30:	e66d      	b.n	800180e <__aeabi_dsub+0x23a>
 8001b32:	1886      	adds	r6, r0, r2
 8001b34:	4286      	cmp	r6, r0
 8001b36:	4180      	sbcs	r0, r0
 8001b38:	4461      	add	r1, ip
 8001b3a:	4240      	negs	r0, r0
 8001b3c:	1809      	adds	r1, r1, r0
 8001b3e:	2200      	movs	r2, #0
 8001b40:	020b      	lsls	r3, r1, #8
 8001b42:	d400      	bmi.n	8001b46 <__aeabi_dsub+0x572>
 8001b44:	e6d0      	b.n	80018e8 <__aeabi_dsub+0x314>
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <__aeabi_dsub+0x68c>)
 8001b48:	3501      	adds	r5, #1
 8001b4a:	4019      	ands	r1, r3
 8001b4c:	e5b2      	b.n	80016b4 <__aeabi_dsub+0xe0>
 8001b4e:	46b1      	mov	r9, r6
 8001b50:	e65d      	b.n	800180e <__aeabi_dsub+0x23a>
 8001b52:	0033      	movs	r3, r6
 8001b54:	4667      	mov	r7, ip
 8001b56:	3b20      	subs	r3, #32
 8001b58:	40df      	lsrs	r7, r3
 8001b5a:	003b      	movs	r3, r7
 8001b5c:	2e20      	cmp	r6, #32
 8001b5e:	d005      	beq.n	8001b6c <__aeabi_dsub+0x598>
 8001b60:	2740      	movs	r7, #64	; 0x40
 8001b62:	1bbf      	subs	r7, r7, r6
 8001b64:	4666      	mov	r6, ip
 8001b66:	40be      	lsls	r6, r7
 8001b68:	4332      	orrs	r2, r6
 8001b6a:	4690      	mov	r8, r2
 8001b6c:	4646      	mov	r6, r8
 8001b6e:	1e72      	subs	r2, r6, #1
 8001b70:	4196      	sbcs	r6, r2
 8001b72:	4333      	orrs	r3, r6
 8001b74:	e5ef      	b.n	8001756 <__aeabi_dsub+0x182>
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <__aeabi_dsub+0x688>)
 8001b78:	429f      	cmp	r7, r3
 8001b7a:	d0cb      	beq.n	8001b14 <__aeabi_dsub+0x540>
 8001b7c:	2580      	movs	r5, #128	; 0x80
 8001b7e:	042d      	lsls	r5, r5, #16
 8001b80:	4273      	negs	r3, r6
 8001b82:	4329      	orrs	r1, r5
 8001b84:	e7a8      	b.n	8001ad8 <__aeabi_dsub+0x504>
 8001b86:	4308      	orrs	r0, r1
 8001b88:	1e41      	subs	r1, r0, #1
 8001b8a:	4188      	sbcs	r0, r1
 8001b8c:	e6a2      	b.n	80018d4 <__aeabi_dsub+0x300>
 8001b8e:	2f00      	cmp	r7, #0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x5c0>
 8001b92:	e63c      	b.n	800180e <__aeabi_dsub+0x23a>
 8001b94:	4663      	mov	r3, ip
 8001b96:	1a86      	subs	r6, r0, r2
 8001b98:	1acf      	subs	r7, r1, r3
 8001b9a:	42b0      	cmp	r0, r6
 8001b9c:	419b      	sbcs	r3, r3
 8001b9e:	425b      	negs	r3, r3
 8001ba0:	1afb      	subs	r3, r7, r3
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	d54e      	bpl.n	8001c46 <__aeabi_dsub+0x672>
 8001ba8:	1a16      	subs	r6, r2, r0
 8001baa:	4663      	mov	r3, ip
 8001bac:	42b2      	cmp	r2, r6
 8001bae:	4192      	sbcs	r2, r2
 8001bb0:	1a59      	subs	r1, r3, r1
 8001bb2:	4252      	negs	r2, r2
 8001bb4:	1a89      	subs	r1, r1, r2
 8001bb6:	465c      	mov	r4, fp
 8001bb8:	2200      	movs	r2, #0
 8001bba:	e57b      	b.n	80016b4 <__aeabi_dsub+0xe0>
 8001bbc:	4301      	orrs	r1, r0
 8001bbe:	000e      	movs	r6, r1
 8001bc0:	1e71      	subs	r1, r6, #1
 8001bc2:	418e      	sbcs	r6, r1
 8001bc4:	e79f      	b.n	8001b06 <__aeabi_dsub+0x532>
 8001bc6:	001d      	movs	r5, r3
 8001bc8:	000e      	movs	r6, r1
 8001bca:	3d20      	subs	r5, #32
 8001bcc:	40ee      	lsrs	r6, r5
 8001bce:	46b0      	mov	r8, r6
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d004      	beq.n	8001bde <__aeabi_dsub+0x60a>
 8001bd4:	2540      	movs	r5, #64	; 0x40
 8001bd6:	1aeb      	subs	r3, r5, r3
 8001bd8:	4099      	lsls	r1, r3
 8001bda:	4308      	orrs	r0, r1
 8001bdc:	4681      	mov	r9, r0
 8001bde:	4648      	mov	r0, r9
 8001be0:	4643      	mov	r3, r8
 8001be2:	1e41      	subs	r1, r0, #1
 8001be4:	4188      	sbcs	r0, r1
 8001be6:	4318      	orrs	r0, r3
 8001be8:	e674      	b.n	80018d4 <__aeabi_dsub+0x300>
 8001bea:	2200      	movs	r2, #0
 8001bec:	2400      	movs	r4, #0
 8001bee:	e617      	b.n	8001820 <__aeabi_dsub+0x24c>
 8001bf0:	1a16      	subs	r6, r2, r0
 8001bf2:	4663      	mov	r3, ip
 8001bf4:	42b2      	cmp	r2, r6
 8001bf6:	4192      	sbcs	r2, r2
 8001bf8:	1a59      	subs	r1, r3, r1
 8001bfa:	4252      	negs	r2, r2
 8001bfc:	1a89      	subs	r1, r1, r2
 8001bfe:	003d      	movs	r5, r7
 8001c00:	e525      	b.n	800164e <__aeabi_dsub+0x7a>
 8001c02:	4661      	mov	r1, ip
 8001c04:	4691      	mov	r9, r2
 8001c06:	4d15      	ldr	r5, [pc, #84]	; (8001c5c <__aeabi_dsub+0x688>)
 8001c08:	e601      	b.n	800180e <__aeabi_dsub+0x23a>
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	2400      	movs	r4, #0
 8001c0e:	0312      	lsls	r2, r2, #12
 8001c10:	e679      	b.n	8001906 <__aeabi_dsub+0x332>
 8001c12:	001d      	movs	r5, r3
 8001c14:	000e      	movs	r6, r1
 8001c16:	3d20      	subs	r5, #32
 8001c18:	40ee      	lsrs	r6, r5
 8001c1a:	46b0      	mov	r8, r6
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d004      	beq.n	8001c2a <__aeabi_dsub+0x656>
 8001c20:	2540      	movs	r5, #64	; 0x40
 8001c22:	1aeb      	subs	r3, r5, r3
 8001c24:	4099      	lsls	r1, r3
 8001c26:	4308      	orrs	r0, r1
 8001c28:	4681      	mov	r9, r0
 8001c2a:	464e      	mov	r6, r9
 8001c2c:	4643      	mov	r3, r8
 8001c2e:	1e71      	subs	r1, r6, #1
 8001c30:	418e      	sbcs	r6, r1
 8001c32:	431e      	orrs	r6, r3
 8001c34:	e767      	b.n	8001b06 <__aeabi_dsub+0x532>
 8001c36:	1886      	adds	r6, r0, r2
 8001c38:	4296      	cmp	r6, r2
 8001c3a:	419b      	sbcs	r3, r3
 8001c3c:	4461      	add	r1, ip
 8001c3e:	425b      	negs	r3, r3
 8001c40:	18c9      	adds	r1, r1, r3
 8001c42:	003d      	movs	r5, r7
 8001c44:	e58c      	b.n	8001760 <__aeabi_dsub+0x18c>
 8001c46:	4647      	mov	r7, r8
 8001c48:	4337      	orrs	r7, r6
 8001c4a:	d0ce      	beq.n	8001bea <__aeabi_dsub+0x616>
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	4641      	mov	r1, r8
 8001c50:	4032      	ands	r2, r6
 8001c52:	e649      	b.n	80018e8 <__aeabi_dsub+0x314>
 8001c54:	2700      	movs	r7, #0
 8001c56:	003a      	movs	r2, r7
 8001c58:	e5e6      	b.n	8001828 <__aeabi_dsub+0x254>
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	000007ff 	.word	0x000007ff
 8001c60:	ff7fffff 	.word	0xff7fffff

08001c64 <__aeabi_d2iz>:
 8001c64:	b530      	push	{r4, r5, lr}
 8001c66:	4d14      	ldr	r5, [pc, #80]	; (8001cb8 <__aeabi_d2iz+0x54>)
 8001c68:	030a      	lsls	r2, r1, #12
 8001c6a:	004b      	lsls	r3, r1, #1
 8001c6c:	0b12      	lsrs	r2, r2, #12
 8001c6e:	0d5b      	lsrs	r3, r3, #21
 8001c70:	0fc9      	lsrs	r1, r1, #31
 8001c72:	2400      	movs	r4, #0
 8001c74:	42ab      	cmp	r3, r5
 8001c76:	dd11      	ble.n	8001c9c <__aeabi_d2iz+0x38>
 8001c78:	4c10      	ldr	r4, [pc, #64]	; (8001cbc <__aeabi_d2iz+0x58>)
 8001c7a:	42a3      	cmp	r3, r4
 8001c7c:	dc10      	bgt.n	8001ca0 <__aeabi_d2iz+0x3c>
 8001c7e:	2480      	movs	r4, #128	; 0x80
 8001c80:	0364      	lsls	r4, r4, #13
 8001c82:	4322      	orrs	r2, r4
 8001c84:	4c0e      	ldr	r4, [pc, #56]	; (8001cc0 <__aeabi_d2iz+0x5c>)
 8001c86:	1ae4      	subs	r4, r4, r3
 8001c88:	2c1f      	cmp	r4, #31
 8001c8a:	dd0c      	ble.n	8001ca6 <__aeabi_d2iz+0x42>
 8001c8c:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <__aeabi_d2iz+0x60>)
 8001c8e:	1ac3      	subs	r3, r0, r3
 8001c90:	40da      	lsrs	r2, r3
 8001c92:	0013      	movs	r3, r2
 8001c94:	425c      	negs	r4, r3
 8001c96:	2900      	cmp	r1, #0
 8001c98:	d100      	bne.n	8001c9c <__aeabi_d2iz+0x38>
 8001c9a:	001c      	movs	r4, r3
 8001c9c:	0020      	movs	r0, r4
 8001c9e:	bd30      	pop	{r4, r5, pc}
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <__aeabi_d2iz+0x64>)
 8001ca2:	18cc      	adds	r4, r1, r3
 8001ca4:	e7fa      	b.n	8001c9c <__aeabi_d2iz+0x38>
 8001ca6:	4d09      	ldr	r5, [pc, #36]	; (8001ccc <__aeabi_d2iz+0x68>)
 8001ca8:	40e0      	lsrs	r0, r4
 8001caa:	46ac      	mov	ip, r5
 8001cac:	4463      	add	r3, ip
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	4303      	orrs	r3, r0
 8001cb4:	e7ee      	b.n	8001c94 <__aeabi_d2iz+0x30>
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	000003fe 	.word	0x000003fe
 8001cbc:	0000041d 	.word	0x0000041d
 8001cc0:	00000433 	.word	0x00000433
 8001cc4:	00000413 	.word	0x00000413
 8001cc8:	7fffffff 	.word	0x7fffffff
 8001ccc:	fffffbed 	.word	0xfffffbed

08001cd0 <__aeabi_i2d>:
 8001cd0:	b570      	push	{r4, r5, r6, lr}
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d02d      	beq.n	8001d32 <__aeabi_i2d+0x62>
 8001cd6:	17c3      	asrs	r3, r0, #31
 8001cd8:	18c5      	adds	r5, r0, r3
 8001cda:	405d      	eors	r5, r3
 8001cdc:	0fc4      	lsrs	r4, r0, #31
 8001cde:	0028      	movs	r0, r5
 8001ce0:	f000 f944 	bl	8001f6c <__clzsi2>
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <__aeabi_i2d+0x6c>)
 8001ce6:	1a1b      	subs	r3, r3, r0
 8001ce8:	055b      	lsls	r3, r3, #21
 8001cea:	0d5b      	lsrs	r3, r3, #21
 8001cec:	280a      	cmp	r0, #10
 8001cee:	dd15      	ble.n	8001d1c <__aeabi_i2d+0x4c>
 8001cf0:	380b      	subs	r0, #11
 8001cf2:	4085      	lsls	r5, r0
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	032d      	lsls	r5, r5, #12
 8001cf8:	0b2d      	lsrs	r5, r5, #12
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	0010      	movs	r0, r2
 8001cfe:	032d      	lsls	r5, r5, #12
 8001d00:	0d0a      	lsrs	r2, r1, #20
 8001d02:	0b2d      	lsrs	r5, r5, #12
 8001d04:	0512      	lsls	r2, r2, #20
 8001d06:	432a      	orrs	r2, r5
 8001d08:	4d0d      	ldr	r5, [pc, #52]	; (8001d40 <__aeabi_i2d+0x70>)
 8001d0a:	051b      	lsls	r3, r3, #20
 8001d0c:	402a      	ands	r2, r5
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	07e4      	lsls	r4, r4, #31
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	4323      	orrs	r3, r4
 8001d18:	0019      	movs	r1, r3
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	0029      	movs	r1, r5
 8001d20:	3215      	adds	r2, #21
 8001d22:	4091      	lsls	r1, r2
 8001d24:	000a      	movs	r2, r1
 8001d26:	210b      	movs	r1, #11
 8001d28:	1a08      	subs	r0, r1, r0
 8001d2a:	40c5      	lsrs	r5, r0
 8001d2c:	032d      	lsls	r5, r5, #12
 8001d2e:	0b2d      	lsrs	r5, r5, #12
 8001d30:	e7e3      	b.n	8001cfa <__aeabi_i2d+0x2a>
 8001d32:	2400      	movs	r4, #0
 8001d34:	2300      	movs	r3, #0
 8001d36:	2500      	movs	r5, #0
 8001d38:	2200      	movs	r2, #0
 8001d3a:	e7de      	b.n	8001cfa <__aeabi_i2d+0x2a>
 8001d3c:	0000041e 	.word	0x0000041e
 8001d40:	800fffff 	.word	0x800fffff

08001d44 <__aeabi_f2d>:
 8001d44:	0041      	lsls	r1, r0, #1
 8001d46:	0e09      	lsrs	r1, r1, #24
 8001d48:	1c4b      	adds	r3, r1, #1
 8001d4a:	b570      	push	{r4, r5, r6, lr}
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	0246      	lsls	r6, r0, #9
 8001d50:	0a75      	lsrs	r5, r6, #9
 8001d52:	0fc4      	lsrs	r4, r0, #31
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	dd14      	ble.n	8001d82 <__aeabi_f2d+0x3e>
 8001d58:	23e0      	movs	r3, #224	; 0xe0
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	076d      	lsls	r5, r5, #29
 8001d5e:	0b36      	lsrs	r6, r6, #12
 8001d60:	18cb      	adds	r3, r1, r3
 8001d62:	2100      	movs	r1, #0
 8001d64:	0d0a      	lsrs	r2, r1, #20
 8001d66:	0028      	movs	r0, r5
 8001d68:	0512      	lsls	r2, r2, #20
 8001d6a:	4d1c      	ldr	r5, [pc, #112]	; (8001ddc <__aeabi_f2d+0x98>)
 8001d6c:	4332      	orrs	r2, r6
 8001d6e:	055b      	lsls	r3, r3, #21
 8001d70:	402a      	ands	r2, r5
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	4313      	orrs	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	07e4      	lsls	r4, r4, #31
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	4323      	orrs	r3, r4
 8001d7e:	0019      	movs	r1, r3
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
 8001d82:	2900      	cmp	r1, #0
 8001d84:	d114      	bne.n	8001db0 <__aeabi_f2d+0x6c>
 8001d86:	2d00      	cmp	r5, #0
 8001d88:	d01e      	beq.n	8001dc8 <__aeabi_f2d+0x84>
 8001d8a:	0028      	movs	r0, r5
 8001d8c:	f000 f8ee 	bl	8001f6c <__clzsi2>
 8001d90:	280a      	cmp	r0, #10
 8001d92:	dc1c      	bgt.n	8001dce <__aeabi_f2d+0x8a>
 8001d94:	230b      	movs	r3, #11
 8001d96:	002a      	movs	r2, r5
 8001d98:	1a1b      	subs	r3, r3, r0
 8001d9a:	40da      	lsrs	r2, r3
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	3315      	adds	r3, #21
 8001da0:	409d      	lsls	r5, r3
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <__aeabi_f2d+0x9c>)
 8001da4:	0312      	lsls	r2, r2, #12
 8001da6:	1a1b      	subs	r3, r3, r0
 8001da8:	055b      	lsls	r3, r3, #21
 8001daa:	0b16      	lsrs	r6, r2, #12
 8001dac:	0d5b      	lsrs	r3, r3, #21
 8001dae:	e7d8      	b.n	8001d62 <__aeabi_f2d+0x1e>
 8001db0:	2d00      	cmp	r5, #0
 8001db2:	d006      	beq.n	8001dc2 <__aeabi_f2d+0x7e>
 8001db4:	0b32      	lsrs	r2, r6, #12
 8001db6:	2680      	movs	r6, #128	; 0x80
 8001db8:	0336      	lsls	r6, r6, #12
 8001dba:	076d      	lsls	r5, r5, #29
 8001dbc:	4316      	orrs	r6, r2
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <__aeabi_f2d+0xa0>)
 8001dc0:	e7cf      	b.n	8001d62 <__aeabi_f2d+0x1e>
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <__aeabi_f2d+0xa0>)
 8001dc4:	2600      	movs	r6, #0
 8001dc6:	e7cc      	b.n	8001d62 <__aeabi_f2d+0x1e>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2600      	movs	r6, #0
 8001dcc:	e7c9      	b.n	8001d62 <__aeabi_f2d+0x1e>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	002a      	movs	r2, r5
 8001dd2:	3b0b      	subs	r3, #11
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	2500      	movs	r5, #0
 8001dd8:	e7e3      	b.n	8001da2 <__aeabi_f2d+0x5e>
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	800fffff 	.word	0x800fffff
 8001de0:	00000389 	.word	0x00000389
 8001de4:	000007ff 	.word	0x000007ff

08001de8 <__aeabi_d2f>:
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	004c      	lsls	r4, r1, #1
 8001dec:	0d64      	lsrs	r4, r4, #21
 8001dee:	030b      	lsls	r3, r1, #12
 8001df0:	1c62      	adds	r2, r4, #1
 8001df2:	0a5b      	lsrs	r3, r3, #9
 8001df4:	0f46      	lsrs	r6, r0, #29
 8001df6:	0552      	lsls	r2, r2, #21
 8001df8:	0fc9      	lsrs	r1, r1, #31
 8001dfa:	431e      	orrs	r6, r3
 8001dfc:	00c5      	lsls	r5, r0, #3
 8001dfe:	0d52      	lsrs	r2, r2, #21
 8001e00:	2a01      	cmp	r2, #1
 8001e02:	dd29      	ble.n	8001e58 <__aeabi_d2f+0x70>
 8001e04:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <__aeabi_d2f+0xfc>)
 8001e06:	18e7      	adds	r7, r4, r3
 8001e08:	2ffe      	cmp	r7, #254	; 0xfe
 8001e0a:	dc1c      	bgt.n	8001e46 <__aeabi_d2f+0x5e>
 8001e0c:	2f00      	cmp	r7, #0
 8001e0e:	dd3b      	ble.n	8001e88 <__aeabi_d2f+0xa0>
 8001e10:	0180      	lsls	r0, r0, #6
 8001e12:	1e43      	subs	r3, r0, #1
 8001e14:	4198      	sbcs	r0, r3
 8001e16:	2207      	movs	r2, #7
 8001e18:	00f3      	lsls	r3, r6, #3
 8001e1a:	0f6d      	lsrs	r5, r5, #29
 8001e1c:	4303      	orrs	r3, r0
 8001e1e:	432b      	orrs	r3, r5
 8001e20:	401a      	ands	r2, r3
 8001e22:	2a00      	cmp	r2, #0
 8001e24:	d004      	beq.n	8001e30 <__aeabi_d2f+0x48>
 8001e26:	220f      	movs	r2, #15
 8001e28:	401a      	ands	r2, r3
 8001e2a:	2a04      	cmp	r2, #4
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_d2f+0x48>
 8001e2e:	3304      	adds	r3, #4
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	04d2      	lsls	r2, r2, #19
 8001e34:	401a      	ands	r2, r3
 8001e36:	d024      	beq.n	8001e82 <__aeabi_d2f+0x9a>
 8001e38:	3701      	adds	r7, #1
 8001e3a:	b2fa      	uxtb	r2, r7
 8001e3c:	2fff      	cmp	r7, #255	; 0xff
 8001e3e:	d002      	beq.n	8001e46 <__aeabi_d2f+0x5e>
 8001e40:	019b      	lsls	r3, r3, #6
 8001e42:	0a58      	lsrs	r0, r3, #9
 8001e44:	e001      	b.n	8001e4a <__aeabi_d2f+0x62>
 8001e46:	22ff      	movs	r2, #255	; 0xff
 8001e48:	2000      	movs	r0, #0
 8001e4a:	0240      	lsls	r0, r0, #9
 8001e4c:	05d2      	lsls	r2, r2, #23
 8001e4e:	0a40      	lsrs	r0, r0, #9
 8001e50:	07c9      	lsls	r1, r1, #31
 8001e52:	4310      	orrs	r0, r2
 8001e54:	4308      	orrs	r0, r1
 8001e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e58:	4335      	orrs	r5, r6
 8001e5a:	2c00      	cmp	r4, #0
 8001e5c:	d104      	bne.n	8001e68 <__aeabi_d2f+0x80>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d10a      	bne.n	8001e78 <__aeabi_d2f+0x90>
 8001e62:	2200      	movs	r2, #0
 8001e64:	2000      	movs	r0, #0
 8001e66:	e7f0      	b.n	8001e4a <__aeabi_d2f+0x62>
 8001e68:	2d00      	cmp	r5, #0
 8001e6a:	d0ec      	beq.n	8001e46 <__aeabi_d2f+0x5e>
 8001e6c:	2080      	movs	r0, #128	; 0x80
 8001e6e:	03c0      	lsls	r0, r0, #15
 8001e70:	4330      	orrs	r0, r6
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	e7e9      	b.n	8001e4a <__aeabi_d2f+0x62>
 8001e76:	2400      	movs	r4, #0
 8001e78:	2300      	movs	r3, #0
 8001e7a:	025b      	lsls	r3, r3, #9
 8001e7c:	0a58      	lsrs	r0, r3, #9
 8001e7e:	b2e2      	uxtb	r2, r4
 8001e80:	e7e3      	b.n	8001e4a <__aeabi_d2f+0x62>
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	003c      	movs	r4, r7
 8001e86:	e7f8      	b.n	8001e7a <__aeabi_d2f+0x92>
 8001e88:	003b      	movs	r3, r7
 8001e8a:	3317      	adds	r3, #23
 8001e8c:	dbf3      	blt.n	8001e76 <__aeabi_d2f+0x8e>
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	4333      	orrs	r3, r6
 8001e94:	261e      	movs	r6, #30
 8001e96:	1bf6      	subs	r6, r6, r7
 8001e98:	2e1f      	cmp	r6, #31
 8001e9a:	dd14      	ble.n	8001ec6 <__aeabi_d2f+0xde>
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4252      	negs	r2, r2
 8001ea0:	1bd7      	subs	r7, r2, r7
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	40fa      	lsrs	r2, r7
 8001ea6:	0017      	movs	r7, r2
 8001ea8:	2e20      	cmp	r6, #32
 8001eaa:	d004      	beq.n	8001eb6 <__aeabi_d2f+0xce>
 8001eac:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <__aeabi_d2f+0x100>)
 8001eae:	4694      	mov	ip, r2
 8001eb0:	4464      	add	r4, ip
 8001eb2:	40a3      	lsls	r3, r4
 8001eb4:	431d      	orrs	r5, r3
 8001eb6:	002b      	movs	r3, r5
 8001eb8:	1e5d      	subs	r5, r3, #1
 8001eba:	41ab      	sbcs	r3, r5
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	433b      	orrs	r3, r7
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	2700      	movs	r7, #0
 8001ec4:	e7ad      	b.n	8001e22 <__aeabi_d2f+0x3a>
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <__aeabi_d2f+0x104>)
 8001ec8:	0028      	movs	r0, r5
 8001eca:	18a2      	adds	r2, r4, r2
 8001ecc:	4095      	lsls	r5, r2
 8001ece:	4093      	lsls	r3, r2
 8001ed0:	1e6c      	subs	r4, r5, #1
 8001ed2:	41a5      	sbcs	r5, r4
 8001ed4:	40f0      	lsrs	r0, r6
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	432b      	orrs	r3, r5
 8001eda:	4303      	orrs	r3, r0
 8001edc:	401a      	ands	r2, r3
 8001ede:	2700      	movs	r7, #0
 8001ee0:	e79f      	b.n	8001e22 <__aeabi_d2f+0x3a>
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	fffffc80 	.word	0xfffffc80
 8001ee8:	fffffca2 	.word	0xfffffca2
 8001eec:	fffffc82 	.word	0xfffffc82

08001ef0 <__aeabi_cdrcmple>:
 8001ef0:	4684      	mov	ip, r0
 8001ef2:	1c10      	adds	r0, r2, #0
 8001ef4:	4662      	mov	r2, ip
 8001ef6:	468c      	mov	ip, r1
 8001ef8:	1c19      	adds	r1, r3, #0
 8001efa:	4663      	mov	r3, ip
 8001efc:	e000      	b.n	8001f00 <__aeabi_cdcmpeq>
 8001efe:	46c0      	nop			; (mov r8, r8)

08001f00 <__aeabi_cdcmpeq>:
 8001f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001f02:	f000 f8fd 	bl	8002100 <__ledf2>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d401      	bmi.n	8001f0e <__aeabi_cdcmpeq+0xe>
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	42c8      	cmn	r0, r1
 8001f0e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001f10 <__aeabi_dcmpeq>:
 8001f10:	b510      	push	{r4, lr}
 8001f12:	f000 f855 	bl	8001fc0 <__eqdf2>
 8001f16:	4240      	negs	r0, r0
 8001f18:	3001      	adds	r0, #1
 8001f1a:	bd10      	pop	{r4, pc}

08001f1c <__aeabi_dcmplt>:
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	f000 f8ef 	bl	8002100 <__ledf2>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	db01      	blt.n	8001f2a <__aeabi_dcmplt+0xe>
 8001f26:	2000      	movs	r0, #0
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)

08001f30 <__aeabi_dcmple>:
 8001f30:	b510      	push	{r4, lr}
 8001f32:	f000 f8e5 	bl	8002100 <__ledf2>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	dd01      	ble.n	8001f3e <__aeabi_dcmple+0xe>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	2001      	movs	r0, #1
 8001f40:	bd10      	pop	{r4, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)

08001f44 <__aeabi_dcmpgt>:
 8001f44:	b510      	push	{r4, lr}
 8001f46:	f000 f877 	bl	8002038 <__gedf2>
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	dc01      	bgt.n	8001f52 <__aeabi_dcmpgt+0xe>
 8001f4e:	2000      	movs	r0, #0
 8001f50:	bd10      	pop	{r4, pc}
 8001f52:	2001      	movs	r0, #1
 8001f54:	bd10      	pop	{r4, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)

08001f58 <__aeabi_dcmpge>:
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	f000 f86d 	bl	8002038 <__gedf2>
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	da01      	bge.n	8001f66 <__aeabi_dcmpge+0xe>
 8001f62:	2000      	movs	r0, #0
 8001f64:	bd10      	pop	{r4, pc}
 8001f66:	2001      	movs	r0, #1
 8001f68:	bd10      	pop	{r4, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)

08001f6c <__clzsi2>:
 8001f6c:	211c      	movs	r1, #28
 8001f6e:	2301      	movs	r3, #1
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	4298      	cmp	r0, r3
 8001f74:	d301      	bcc.n	8001f7a <__clzsi2+0xe>
 8001f76:	0c00      	lsrs	r0, r0, #16
 8001f78:	3910      	subs	r1, #16
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	4298      	cmp	r0, r3
 8001f7e:	d301      	bcc.n	8001f84 <__clzsi2+0x18>
 8001f80:	0a00      	lsrs	r0, r0, #8
 8001f82:	3908      	subs	r1, #8
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	4298      	cmp	r0, r3
 8001f88:	d301      	bcc.n	8001f8e <__clzsi2+0x22>
 8001f8a:	0900      	lsrs	r0, r0, #4
 8001f8c:	3904      	subs	r1, #4
 8001f8e:	a202      	add	r2, pc, #8	; (adr r2, 8001f98 <__clzsi2+0x2c>)
 8001f90:	5c10      	ldrb	r0, [r2, r0]
 8001f92:	1840      	adds	r0, r0, r1
 8001f94:	4770      	bx	lr
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	02020304 	.word	0x02020304
 8001f9c:	01010101 	.word	0x01010101
	...

08001fa8 <__clzdi2>:
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	2900      	cmp	r1, #0
 8001fac:	d103      	bne.n	8001fb6 <__clzdi2+0xe>
 8001fae:	f7ff ffdd 	bl	8001f6c <__clzsi2>
 8001fb2:	3020      	adds	r0, #32
 8001fb4:	e002      	b.n	8001fbc <__clzdi2+0x14>
 8001fb6:	1c08      	adds	r0, r1, #0
 8001fb8:	f7ff ffd8 	bl	8001f6c <__clzsi2>
 8001fbc:	bd10      	pop	{r4, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)

08001fc0 <__eqdf2>:
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	464f      	mov	r7, r9
 8001fc4:	4646      	mov	r6, r8
 8001fc6:	46d6      	mov	lr, sl
 8001fc8:	4684      	mov	ip, r0
 8001fca:	b5c0      	push	{r6, r7, lr}
 8001fcc:	4680      	mov	r8, r0
 8001fce:	4e19      	ldr	r6, [pc, #100]	; (8002034 <__eqdf2+0x74>)
 8001fd0:	0318      	lsls	r0, r3, #12
 8001fd2:	030f      	lsls	r7, r1, #12
 8001fd4:	004d      	lsls	r5, r1, #1
 8001fd6:	0b00      	lsrs	r0, r0, #12
 8001fd8:	005c      	lsls	r4, r3, #1
 8001fda:	4682      	mov	sl, r0
 8001fdc:	0b3f      	lsrs	r7, r7, #12
 8001fde:	0d6d      	lsrs	r5, r5, #21
 8001fe0:	0fc9      	lsrs	r1, r1, #31
 8001fe2:	4691      	mov	r9, r2
 8001fe4:	0d64      	lsrs	r4, r4, #21
 8001fe6:	0fdb      	lsrs	r3, r3, #31
 8001fe8:	2001      	movs	r0, #1
 8001fea:	42b5      	cmp	r5, r6
 8001fec:	d00a      	beq.n	8002004 <__eqdf2+0x44>
 8001fee:	42b4      	cmp	r4, r6
 8001ff0:	d003      	beq.n	8001ffa <__eqdf2+0x3a>
 8001ff2:	42a5      	cmp	r5, r4
 8001ff4:	d101      	bne.n	8001ffa <__eqdf2+0x3a>
 8001ff6:	4557      	cmp	r7, sl
 8001ff8:	d00c      	beq.n	8002014 <__eqdf2+0x54>
 8001ffa:	bc1c      	pop	{r2, r3, r4}
 8001ffc:	4690      	mov	r8, r2
 8001ffe:	4699      	mov	r9, r3
 8002000:	46a2      	mov	sl, r4
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002004:	4666      	mov	r6, ip
 8002006:	433e      	orrs	r6, r7
 8002008:	d1f7      	bne.n	8001ffa <__eqdf2+0x3a>
 800200a:	42ac      	cmp	r4, r5
 800200c:	d1f5      	bne.n	8001ffa <__eqdf2+0x3a>
 800200e:	4654      	mov	r4, sl
 8002010:	4314      	orrs	r4, r2
 8002012:	d1f2      	bne.n	8001ffa <__eqdf2+0x3a>
 8002014:	2001      	movs	r0, #1
 8002016:	45c8      	cmp	r8, r9
 8002018:	d1ef      	bne.n	8001ffa <__eqdf2+0x3a>
 800201a:	4299      	cmp	r1, r3
 800201c:	d007      	beq.n	800202e <__eqdf2+0x6e>
 800201e:	2d00      	cmp	r5, #0
 8002020:	d1eb      	bne.n	8001ffa <__eqdf2+0x3a>
 8002022:	4663      	mov	r3, ip
 8002024:	431f      	orrs	r7, r3
 8002026:	0038      	movs	r0, r7
 8002028:	1e47      	subs	r7, r0, #1
 800202a:	41b8      	sbcs	r0, r7
 800202c:	e7e5      	b.n	8001ffa <__eqdf2+0x3a>
 800202e:	2000      	movs	r0, #0
 8002030:	e7e3      	b.n	8001ffa <__eqdf2+0x3a>
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	000007ff 	.word	0x000007ff

08002038 <__gedf2>:
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	464f      	mov	r7, r9
 800203c:	4646      	mov	r6, r8
 800203e:	46d6      	mov	lr, sl
 8002040:	004d      	lsls	r5, r1, #1
 8002042:	b5c0      	push	{r6, r7, lr}
 8002044:	030e      	lsls	r6, r1, #12
 8002046:	0fc9      	lsrs	r1, r1, #31
 8002048:	468a      	mov	sl, r1
 800204a:	492c      	ldr	r1, [pc, #176]	; (80020fc <__gedf2+0xc4>)
 800204c:	031f      	lsls	r7, r3, #12
 800204e:	005c      	lsls	r4, r3, #1
 8002050:	4680      	mov	r8, r0
 8002052:	0b36      	lsrs	r6, r6, #12
 8002054:	0d6d      	lsrs	r5, r5, #21
 8002056:	4691      	mov	r9, r2
 8002058:	0b3f      	lsrs	r7, r7, #12
 800205a:	0d64      	lsrs	r4, r4, #21
 800205c:	0fdb      	lsrs	r3, r3, #31
 800205e:	428d      	cmp	r5, r1
 8002060:	d01e      	beq.n	80020a0 <__gedf2+0x68>
 8002062:	428c      	cmp	r4, r1
 8002064:	d016      	beq.n	8002094 <__gedf2+0x5c>
 8002066:	2d00      	cmp	r5, #0
 8002068:	d11e      	bne.n	80020a8 <__gedf2+0x70>
 800206a:	4330      	orrs	r0, r6
 800206c:	4684      	mov	ip, r0
 800206e:	2c00      	cmp	r4, #0
 8002070:	d101      	bne.n	8002076 <__gedf2+0x3e>
 8002072:	433a      	orrs	r2, r7
 8002074:	d023      	beq.n	80020be <__gedf2+0x86>
 8002076:	4662      	mov	r2, ip
 8002078:	2a00      	cmp	r2, #0
 800207a:	d01a      	beq.n	80020b2 <__gedf2+0x7a>
 800207c:	459a      	cmp	sl, r3
 800207e:	d029      	beq.n	80020d4 <__gedf2+0x9c>
 8002080:	4651      	mov	r1, sl
 8002082:	2002      	movs	r0, #2
 8002084:	3901      	subs	r1, #1
 8002086:	4008      	ands	r0, r1
 8002088:	3801      	subs	r0, #1
 800208a:	bc1c      	pop	{r2, r3, r4}
 800208c:	4690      	mov	r8, r2
 800208e:	4699      	mov	r9, r3
 8002090:	46a2      	mov	sl, r4
 8002092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002094:	0039      	movs	r1, r7
 8002096:	4311      	orrs	r1, r2
 8002098:	d0e5      	beq.n	8002066 <__gedf2+0x2e>
 800209a:	2002      	movs	r0, #2
 800209c:	4240      	negs	r0, r0
 800209e:	e7f4      	b.n	800208a <__gedf2+0x52>
 80020a0:	4330      	orrs	r0, r6
 80020a2:	d1fa      	bne.n	800209a <__gedf2+0x62>
 80020a4:	42ac      	cmp	r4, r5
 80020a6:	d00f      	beq.n	80020c8 <__gedf2+0x90>
 80020a8:	2c00      	cmp	r4, #0
 80020aa:	d10f      	bne.n	80020cc <__gedf2+0x94>
 80020ac:	433a      	orrs	r2, r7
 80020ae:	d0e7      	beq.n	8002080 <__gedf2+0x48>
 80020b0:	e00c      	b.n	80020cc <__gedf2+0x94>
 80020b2:	2201      	movs	r2, #1
 80020b4:	3b01      	subs	r3, #1
 80020b6:	4393      	bics	r3, r2
 80020b8:	0018      	movs	r0, r3
 80020ba:	3001      	adds	r0, #1
 80020bc:	e7e5      	b.n	800208a <__gedf2+0x52>
 80020be:	4663      	mov	r3, ip
 80020c0:	2000      	movs	r0, #0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0e1      	beq.n	800208a <__gedf2+0x52>
 80020c6:	e7db      	b.n	8002080 <__gedf2+0x48>
 80020c8:	433a      	orrs	r2, r7
 80020ca:	d1e6      	bne.n	800209a <__gedf2+0x62>
 80020cc:	459a      	cmp	sl, r3
 80020ce:	d1d7      	bne.n	8002080 <__gedf2+0x48>
 80020d0:	42a5      	cmp	r5, r4
 80020d2:	dcd5      	bgt.n	8002080 <__gedf2+0x48>
 80020d4:	42a5      	cmp	r5, r4
 80020d6:	db05      	blt.n	80020e4 <__gedf2+0xac>
 80020d8:	42be      	cmp	r6, r7
 80020da:	d8d1      	bhi.n	8002080 <__gedf2+0x48>
 80020dc:	d008      	beq.n	80020f0 <__gedf2+0xb8>
 80020de:	2000      	movs	r0, #0
 80020e0:	42be      	cmp	r6, r7
 80020e2:	d2d2      	bcs.n	800208a <__gedf2+0x52>
 80020e4:	4650      	mov	r0, sl
 80020e6:	2301      	movs	r3, #1
 80020e8:	3801      	subs	r0, #1
 80020ea:	4398      	bics	r0, r3
 80020ec:	3001      	adds	r0, #1
 80020ee:	e7cc      	b.n	800208a <__gedf2+0x52>
 80020f0:	45c8      	cmp	r8, r9
 80020f2:	d8c5      	bhi.n	8002080 <__gedf2+0x48>
 80020f4:	2000      	movs	r0, #0
 80020f6:	45c8      	cmp	r8, r9
 80020f8:	d3f4      	bcc.n	80020e4 <__gedf2+0xac>
 80020fa:	e7c6      	b.n	800208a <__gedf2+0x52>
 80020fc:	000007ff 	.word	0x000007ff

08002100 <__ledf2>:
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	464f      	mov	r7, r9
 8002104:	4646      	mov	r6, r8
 8002106:	46d6      	mov	lr, sl
 8002108:	004d      	lsls	r5, r1, #1
 800210a:	b5c0      	push	{r6, r7, lr}
 800210c:	030e      	lsls	r6, r1, #12
 800210e:	0fc9      	lsrs	r1, r1, #31
 8002110:	468a      	mov	sl, r1
 8002112:	492e      	ldr	r1, [pc, #184]	; (80021cc <__ledf2+0xcc>)
 8002114:	031f      	lsls	r7, r3, #12
 8002116:	005c      	lsls	r4, r3, #1
 8002118:	4680      	mov	r8, r0
 800211a:	0b36      	lsrs	r6, r6, #12
 800211c:	0d6d      	lsrs	r5, r5, #21
 800211e:	4691      	mov	r9, r2
 8002120:	0b3f      	lsrs	r7, r7, #12
 8002122:	0d64      	lsrs	r4, r4, #21
 8002124:	0fdb      	lsrs	r3, r3, #31
 8002126:	428d      	cmp	r5, r1
 8002128:	d018      	beq.n	800215c <__ledf2+0x5c>
 800212a:	428c      	cmp	r4, r1
 800212c:	d011      	beq.n	8002152 <__ledf2+0x52>
 800212e:	2d00      	cmp	r5, #0
 8002130:	d118      	bne.n	8002164 <__ledf2+0x64>
 8002132:	4330      	orrs	r0, r6
 8002134:	4684      	mov	ip, r0
 8002136:	2c00      	cmp	r4, #0
 8002138:	d11e      	bne.n	8002178 <__ledf2+0x78>
 800213a:	433a      	orrs	r2, r7
 800213c:	d11c      	bne.n	8002178 <__ledf2+0x78>
 800213e:	4663      	mov	r3, ip
 8002140:	2000      	movs	r0, #0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d030      	beq.n	80021a8 <__ledf2+0xa8>
 8002146:	4651      	mov	r1, sl
 8002148:	2002      	movs	r0, #2
 800214a:	3901      	subs	r1, #1
 800214c:	4008      	ands	r0, r1
 800214e:	3801      	subs	r0, #1
 8002150:	e02a      	b.n	80021a8 <__ledf2+0xa8>
 8002152:	0039      	movs	r1, r7
 8002154:	4311      	orrs	r1, r2
 8002156:	d0ea      	beq.n	800212e <__ledf2+0x2e>
 8002158:	2002      	movs	r0, #2
 800215a:	e025      	b.n	80021a8 <__ledf2+0xa8>
 800215c:	4330      	orrs	r0, r6
 800215e:	d1fb      	bne.n	8002158 <__ledf2+0x58>
 8002160:	42ac      	cmp	r4, r5
 8002162:	d026      	beq.n	80021b2 <__ledf2+0xb2>
 8002164:	2c00      	cmp	r4, #0
 8002166:	d126      	bne.n	80021b6 <__ledf2+0xb6>
 8002168:	433a      	orrs	r2, r7
 800216a:	d124      	bne.n	80021b6 <__ledf2+0xb6>
 800216c:	4651      	mov	r1, sl
 800216e:	2002      	movs	r0, #2
 8002170:	3901      	subs	r1, #1
 8002172:	4008      	ands	r0, r1
 8002174:	3801      	subs	r0, #1
 8002176:	e017      	b.n	80021a8 <__ledf2+0xa8>
 8002178:	4662      	mov	r2, ip
 800217a:	2a00      	cmp	r2, #0
 800217c:	d00f      	beq.n	800219e <__ledf2+0x9e>
 800217e:	459a      	cmp	sl, r3
 8002180:	d1e1      	bne.n	8002146 <__ledf2+0x46>
 8002182:	42a5      	cmp	r5, r4
 8002184:	db05      	blt.n	8002192 <__ledf2+0x92>
 8002186:	42be      	cmp	r6, r7
 8002188:	d8dd      	bhi.n	8002146 <__ledf2+0x46>
 800218a:	d019      	beq.n	80021c0 <__ledf2+0xc0>
 800218c:	2000      	movs	r0, #0
 800218e:	42be      	cmp	r6, r7
 8002190:	d20a      	bcs.n	80021a8 <__ledf2+0xa8>
 8002192:	4650      	mov	r0, sl
 8002194:	2301      	movs	r3, #1
 8002196:	3801      	subs	r0, #1
 8002198:	4398      	bics	r0, r3
 800219a:	3001      	adds	r0, #1
 800219c:	e004      	b.n	80021a8 <__ledf2+0xa8>
 800219e:	2201      	movs	r2, #1
 80021a0:	3b01      	subs	r3, #1
 80021a2:	4393      	bics	r3, r2
 80021a4:	0018      	movs	r0, r3
 80021a6:	3001      	adds	r0, #1
 80021a8:	bc1c      	pop	{r2, r3, r4}
 80021aa:	4690      	mov	r8, r2
 80021ac:	4699      	mov	r9, r3
 80021ae:	46a2      	mov	sl, r4
 80021b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b2:	433a      	orrs	r2, r7
 80021b4:	d1d0      	bne.n	8002158 <__ledf2+0x58>
 80021b6:	459a      	cmp	sl, r3
 80021b8:	d1c5      	bne.n	8002146 <__ledf2+0x46>
 80021ba:	42a5      	cmp	r5, r4
 80021bc:	dcc3      	bgt.n	8002146 <__ledf2+0x46>
 80021be:	e7e0      	b.n	8002182 <__ledf2+0x82>
 80021c0:	45c8      	cmp	r8, r9
 80021c2:	d8c0      	bhi.n	8002146 <__ledf2+0x46>
 80021c4:	2000      	movs	r0, #0
 80021c6:	45c8      	cmp	r8, r9
 80021c8:	d3e3      	bcc.n	8002192 <__ledf2+0x92>
 80021ca:	e7ed      	b.n	80021a8 <__ledf2+0xa8>
 80021cc:	000007ff 	.word	0x000007ff

080021d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021d4:	f001 f8e4 	bl	80033a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021d8:	f000 f81c 	bl	8002214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021dc:	f000 fad0 	bl	8002780 <MX_GPIO_Init>
  MX_DMA_Init();
 80021e0:	f000 fab0 	bl	8002744 <MX_DMA_Init>
  MX_I2C2_Init();
 80021e4:	f000 f904 	bl	80023f0 <MX_I2C2_Init>
  MX_RTC_Init();
 80021e8:	f000 f942 	bl	8002470 <MX_RTC_Init>
  MX_SPI1_Init();
 80021ec:	f000 f9ac 	bl	8002548 <MX_SPI1_Init>
  MX_SPI2_Init();
 80021f0:	f000 f9e8 	bl	80025c4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80021f4:	f000 fa24 	bl	8002640 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021f8:	f000 fa70 	bl	80026dc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80021fc:	f000 f88c 	bl	8002318 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf( "Hydra Management Processor Running\r\n" );
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <main+0x40>)
 8002202:	0018      	movs	r0, r3
 8002204:	f005 fd32 	bl	8007c6c <puts>
	  /*
	   * Operate each module as a state machine so that they can perform different small tasks each time
	   */
	  // process_wifi_module();
	  // process_i2c();
	  process_led_display();
 8002208:	f000 fe88 	bl	8002f1c <process_led_display>
 800220c:	e7fc      	b.n	8002208 <main+0x38>
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	08008514 	.word	0x08008514

08002214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b09d      	sub	sp, #116	; 0x74
 8002218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800221a:	2438      	movs	r4, #56	; 0x38
 800221c:	193b      	adds	r3, r7, r4
 800221e:	0018      	movs	r0, r3
 8002220:	2338      	movs	r3, #56	; 0x38
 8002222:	001a      	movs	r2, r3
 8002224:	2100      	movs	r1, #0
 8002226:	f005 fcb9 	bl	8007b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800222a:	2328      	movs	r3, #40	; 0x28
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	0018      	movs	r0, r3
 8002230:	2310      	movs	r3, #16
 8002232:	001a      	movs	r2, r3
 8002234:	2100      	movs	r1, #0
 8002236:	f005 fcb1 	bl	8007b9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800223a:	003b      	movs	r3, r7
 800223c:	0018      	movs	r0, r3
 800223e:	2328      	movs	r3, #40	; 0x28
 8002240:	001a      	movs	r2, r3
 8002242:	2100      	movs	r1, #0
 8002244:	f005 fcaa 	bl	8007b9c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	0018      	movs	r0, r3
 800224e:	f002 fbc1 	bl	80049d4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002252:	193b      	adds	r3, r7, r4
 8002254:	220a      	movs	r2, #10
 8002256:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002258:	193b      	adds	r3, r7, r4
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	0052      	lsls	r2, r2, #1
 800225e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002260:	0021      	movs	r1, r4
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002268:	187b      	adds	r3, r7, r1
 800226a:	2240      	movs	r2, #64	; 0x40
 800226c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800226e:	187b      	adds	r3, r7, r1
 8002270:	2201      	movs	r2, #1
 8002272:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2202      	movs	r2, #2
 8002278:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800227a:	187b      	adds	r3, r7, r1
 800227c:	2202      	movs	r2, #2
 800227e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002280:	187b      	adds	r3, r7, r1
 8002282:	2200      	movs	r2, #0
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002286:	187b      	adds	r3, r7, r1
 8002288:	2210      	movs	r2, #16
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800228c:	187b      	adds	r3, r7, r1
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	0292      	lsls	r2, r2, #10
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002294:	187b      	adds	r3, r7, r1
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	0492      	lsls	r2, r2, #18
 800229a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 800229c:	187b      	adds	r3, r7, r1
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	0612      	lsls	r2, r2, #24
 80022a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	0018      	movs	r0, r3
 80022a8:	f002 fbe0 	bl	8004a6c <HAL_RCC_OscConfig>
 80022ac:	1e03      	subs	r3, r0, #0
 80022ae:	d001      	beq.n	80022b4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80022b0:	f000 fb36 	bl	8002920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b4:	2128      	movs	r1, #40	; 0x28
 80022b6:	187b      	adds	r3, r7, r1
 80022b8:	2207      	movs	r2, #7
 80022ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	2202      	movs	r2, #2
 80022c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022c2:	187b      	adds	r3, r7, r1
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022c8:	187b      	adds	r3, r7, r1
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022ce:	187b      	adds	r3, r7, r1
 80022d0:	2102      	movs	r1, #2
 80022d2:	0018      	movs	r0, r3
 80022d4:	f002 feea 	bl	80050ac <HAL_RCC_ClockConfig>
 80022d8:	1e03      	subs	r3, r0, #0
 80022da:	d001      	beq.n	80022e0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80022dc:	f000 fb20 	bl	8002920 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80022e0:	003b      	movs	r3, r7
 80022e2:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <SystemClock_Config+0x100>)
 80022e4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80022e6:	003b      	movs	r3, r7
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80022ec:	003b      	movs	r3, r7
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022f2:	003b      	movs	r3, r7
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022fa:	003b      	movs	r3, r7
 80022fc:	0018      	movs	r0, r3
 80022fe:	f003 f87f 	bl	8005400 <HAL_RCCEx_PeriphCLKConfig>
 8002302:	1e03      	subs	r3, r0, #0
 8002304:	d001      	beq.n	800230a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002306:	f000 fb0b 	bl	8002920 <Error_Handler>
  }
}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b01d      	add	sp, #116	; 0x74
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	00024001 	.word	0x00024001

08002318 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	0018      	movs	r0, r3
 8002322:	230c      	movs	r3, #12
 8002324:	001a      	movs	r2, r3
 8002326:	2100      	movs	r1, #0
 8002328:	f005 fc38 	bl	8007b9c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <MX_ADC1_Init+0xcc>)
 800232e:	4a2e      	ldr	r2, [pc, #184]	; (80023e8 <MX_ADC1_Init+0xd0>)
 8002330:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002332:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <MX_ADC1_Init+0xcc>)
 8002334:	2280      	movs	r2, #128	; 0x80
 8002336:	05d2      	lsls	r2, r2, #23
 8002338:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <MX_ADC1_Init+0xcc>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002340:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <MX_ADC1_Init+0xcc>)
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <MX_ADC1_Init+0xcc>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <MX_ADC1_Init+0xcc>)
 800234e:	2204      	movs	r2, #4
 8002350:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <MX_ADC1_Init+0xcc>)
 8002354:	2200      	movs	r2, #0
 8002356:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <MX_ADC1_Init+0xcc>)
 800235a:	2200      	movs	r2, #0
 800235c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800235e:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <MX_ADC1_Init+0xcc>)
 8002360:	2200      	movs	r2, #0
 8002362:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <MX_ADC1_Init+0xcc>)
 8002366:	2201      	movs	r2, #1
 8002368:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <MX_ADC1_Init+0xcc>)
 800236c:	2220      	movs	r2, #32
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <MX_ADC1_Init+0xcc>)
 8002374:	2200      	movs	r2, #0
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_ADC1_Init+0xcc>)
 800237a:	2200      	movs	r2, #0
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <MX_ADC1_Init+0xcc>)
 8002380:	222c      	movs	r2, #44	; 0x2c
 8002382:	2100      	movs	r1, #0
 8002384:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <MX_ADC1_Init+0xcc>)
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <MX_ADC1_Init+0xcc>)
 800238e:	2200      	movs	r2, #0
 8002390:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MX_ADC1_Init+0xcc>)
 8002394:	2200      	movs	r2, #0
 8002396:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <MX_ADC1_Init+0xcc>)
 800239a:	223c      	movs	r2, #60	; 0x3c
 800239c:	2100      	movs	r1, #0
 800239e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80023a0:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <MX_ADC1_Init+0xcc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <MX_ADC1_Init+0xcc>)
 80023a8:	0018      	movs	r0, r3
 80023aa:	f001 f987 	bl	80036bc <HAL_ADC_Init>
 80023ae:	1e03      	subs	r3, r0, #0
 80023b0:	d001      	beq.n	80023b6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80023b2:	f000 fab5 	bl	8002920 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <MX_ADC1_Init+0xd4>)
 80023ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c8:	1d3a      	adds	r2, r7, #4
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <MX_ADC1_Init+0xcc>)
 80023cc:	0011      	movs	r1, r2
 80023ce:	0018      	movs	r0, r3
 80023d0:	f001 fb4a 	bl	8003a68 <HAL_ADC_ConfigChannel>
 80023d4:	1e03      	subs	r3, r0, #0
 80023d6:	d001      	beq.n	80023dc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80023d8:	f000 faa2 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b004      	add	sp, #16
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2000036c 	.word	0x2000036c
 80023e8:	40012400 	.word	0x40012400
 80023ec:	20000100 	.word	0x20000100

080023f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <MX_I2C2_Init+0x74>)
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <MX_I2C2_Init+0x78>)
 80023f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0F7FE;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MX_I2C2_Init+0x74>)
 80023fc:	4a1b      	ldr	r2, [pc, #108]	; (800246c <MX_I2C2_Init+0x7c>)
 80023fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <MX_I2C2_Init+0x74>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <MX_I2C2_Init+0x74>)
 8002408:	2201      	movs	r2, #1
 800240a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <MX_I2C2_Init+0x74>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <MX_I2C2_Init+0x74>)
 8002414:	2200      	movs	r2, #0
 8002416:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <MX_I2C2_Init+0x74>)
 800241a:	2200      	movs	r2, #0
 800241c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <MX_I2C2_Init+0x74>)
 8002420:	2200      	movs	r2, #0
 8002422:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <MX_I2C2_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <MX_I2C2_Init+0x74>)
 800242c:	0018      	movs	r0, r3
 800242e:	f002 f9a3 	bl	8004778 <HAL_I2C_Init>
 8002432:	1e03      	subs	r3, r0, #0
 8002434:	d001      	beq.n	800243a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002436:	f000 fa73 	bl	8002920 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <MX_I2C2_Init+0x74>)
 800243c:	2100      	movs	r1, #0
 800243e:	0018      	movs	r0, r3
 8002440:	f002 fa30 	bl	80048a4 <HAL_I2CEx_ConfigAnalogFilter>
 8002444:	1e03      	subs	r3, r0, #0
 8002446:	d001      	beq.n	800244c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002448:	f000 fa6a 	bl	8002920 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <MX_I2C2_Init+0x74>)
 800244e:	2100      	movs	r1, #0
 8002450:	0018      	movs	r0, r3
 8002452:	f002 fa73 	bl	800493c <HAL_I2CEx_ConfigDigitalFilter>
 8002456:	1e03      	subs	r3, r0, #0
 8002458:	d001      	beq.n	800245e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800245a:	f000 fa61 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000320 	.word	0x20000320
 8002468:	40005800 	.word	0x40005800
 800246c:	00c0f7fe 	.word	0x00c0f7fe

08002470 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	0018      	movs	r0, r3
 800247a:	2314      	movs	r3, #20
 800247c:	001a      	movs	r2, r3
 800247e:	2100      	movs	r1, #0
 8002480:	f005 fb8c 	bl	8007b9c <memset>
  RTC_DateTypeDef sDate = {0};
 8002484:	003b      	movs	r3, r7
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800248a:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <MX_RTC_Init+0xd0>)
 800248c:	4a2d      	ldr	r2, [pc, #180]	; (8002544 <MX_RTC_Init+0xd4>)
 800248e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002490:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <MX_RTC_Init+0xd0>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <MX_RTC_Init+0xd0>)
 8002498:	227f      	movs	r2, #127	; 0x7f
 800249a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800249c:	4b28      	ldr	r3, [pc, #160]	; (8002540 <MX_RTC_Init+0xd0>)
 800249e:	22ff      	movs	r2, #255	; 0xff
 80024a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <MX_RTC_Init+0xd0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <MX_RTC_Init+0xd0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <MX_RTC_Init+0xd0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <MX_RTC_Init+0xd0>)
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	05d2      	lsls	r2, r2, #23
 80024ba:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80024bc:	4b20      	ldr	r3, [pc, #128]	; (8002540 <MX_RTC_Init+0xd0>)
 80024be:	2200      	movs	r2, #0
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024c2:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <MX_RTC_Init+0xd0>)
 80024c4:	0018      	movs	r0, r3
 80024c6:	f003 f915 	bl	80056f4 <HAL_RTC_Init>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d001      	beq.n	80024d2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80024ce:	f000 fa27 	bl	8002920 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	2200      	movs	r2, #0
 80024dc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2200      	movs	r2, #0
 80024e2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024f6:	1d39      	adds	r1, r7, #4
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_RTC_Init+0xd0>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	0018      	movs	r0, r3
 80024fe:	f003 f98f 	bl	8005820 <HAL_RTC_SetTime>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d001      	beq.n	800250a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8002506:	f000 fa0b 	bl	8002920 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800250a:	003b      	movs	r3, r7
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002510:	003b      	movs	r3, r7
 8002512:	2201      	movs	r2, #1
 8002514:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002516:	003b      	movs	r3, r7
 8002518:	2201      	movs	r2, #1
 800251a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800251c:	003b      	movs	r3, r7
 800251e:	2200      	movs	r2, #0
 8002520:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002522:	0039      	movs	r1, r7
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <MX_RTC_Init+0xd0>)
 8002526:	2201      	movs	r2, #1
 8002528:	0018      	movs	r0, r3
 800252a:	f003 fa21 	bl	8005970 <HAL_RTC_SetDate>
 800252e:	1e03      	subs	r3, r0, #0
 8002530:	d001      	beq.n	8002536 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8002532:	f000 f9f5 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b006      	add	sp, #24
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	2000045c 	.word	0x2000045c
 8002544:	40002800 	.word	0x40002800

08002548 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <MX_SPI1_Init+0x74>)
 800254e:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <MX_SPI1_Init+0x78>)
 8002550:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <MX_SPI1_Init+0x74>)
 8002554:	2282      	movs	r2, #130	; 0x82
 8002556:	0052      	lsls	r2, r2, #1
 8002558:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800255a:	4b18      	ldr	r3, [pc, #96]	; (80025bc <MX_SPI1_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002560:	4b16      	ldr	r3, [pc, #88]	; (80025bc <MX_SPI1_Init+0x74>)
 8002562:	22e0      	movs	r2, #224	; 0xe0
 8002564:	00d2      	lsls	r2, r2, #3
 8002566:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <MX_SPI1_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <MX_SPI1_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <MX_SPI1_Init+0x74>)
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	0092      	lsls	r2, r2, #2
 800257a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <MX_SPI1_Init+0x74>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <MX_SPI1_Init+0x74>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <MX_SPI1_Init+0x74>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <MX_SPI1_Init+0x74>)
 8002590:	2200      	movs	r2, #0
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <MX_SPI1_Init+0x74>)
 8002596:	2207      	movs	r2, #7
 8002598:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <MX_SPI1_Init+0x74>)
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <MX_SPI1_Init+0x74>)
 80025a2:	2208      	movs	r2, #8
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <MX_SPI1_Init+0x74>)
 80025a8:	0018      	movs	r0, r3
 80025aa:	f003 fb4d 	bl	8005c48 <HAL_SPI_Init>
 80025ae:	1e03      	subs	r3, r0, #0
 80025b0:	d001      	beq.n	80025b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80025b2:	f000 f9b5 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000488 	.word	0x20000488
 80025c0:	40013000 	.word	0x40013000

080025c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <MX_SPI2_Init+0x74>)
 80025ca:	4a1c      	ldr	r2, [pc, #112]	; (800263c <MX_SPI2_Init+0x78>)
 80025cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <MX_SPI2_Init+0x74>)
 80025d0:	2282      	movs	r2, #130	; 0x82
 80025d2:	0052      	lsls	r2, r2, #1
 80025d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <MX_SPI2_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <MX_SPI2_Init+0x74>)
 80025de:	22e0      	movs	r2, #224	; 0xe0
 80025e0:	00d2      	lsls	r2, r2, #3
 80025e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <MX_SPI2_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <MX_SPI2_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_SPI2_Init+0x74>)
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	0092      	lsls	r2, r2, #2
 80025f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <MX_SPI2_Init+0x74>)
 80025fa:	2228      	movs	r2, #40	; 0x28
 80025fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_SPI2_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_SPI2_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <MX_SPI2_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_SPI2_Init+0x74>)
 8002612:	2207      	movs	r2, #7
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <MX_SPI2_Init+0x74>)
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_SPI2_Init+0x74>)
 800261e:	2208      	movs	r2, #8
 8002620:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <MX_SPI2_Init+0x74>)
 8002624:	0018      	movs	r0, r3
 8002626:	f003 fb0f 	bl	8005c48 <HAL_SPI_Init>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d001      	beq.n	8002632 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800262e:	f000 f977 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000140 	.word	0x20000140
 800263c:	40003800 	.word	0x40003800

08002640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002644:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 8002646:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <MX_USART1_UART_Init+0x98>)
 8002648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800264a:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 800264c:	22e1      	movs	r2, #225	; 0xe1
 800264e:	0252      	lsls	r2, r2, #9
 8002650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002658:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 8002666:	220c      	movs	r2, #12
 8002668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002670:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800267c:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 800267e:	2200      	movs	r2, #0
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 8002684:	2200      	movs	r2, #0
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 800268a:	0018      	movs	r0, r3
 800268c:	f003 fe3c 	bl	8006308 <HAL_UART_Init>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d001      	beq.n	8002698 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002694:	f000 f944 	bl	8002920 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 800269a:	2100      	movs	r1, #0
 800269c:	0018      	movs	r0, r3
 800269e:	f005 f967 	bl	8007970 <HAL_UARTEx_SetTxFifoThreshold>
 80026a2:	1e03      	subs	r3, r0, #0
 80026a4:	d001      	beq.n	80026aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026a6:	f000 f93b 	bl	8002920 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 80026ac:	2100      	movs	r1, #0
 80026ae:	0018      	movs	r0, r3
 80026b0:	f005 f99e 	bl	80079f0 <HAL_UARTEx_SetRxFifoThreshold>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d001      	beq.n	80026bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026b8:	f000 f932 	bl	8002920 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 80026be:	0018      	movs	r0, r3
 80026c0:	f005 f91c 	bl	80078fc <HAL_UARTEx_DisableFifoMode>
 80026c4:	1e03      	subs	r3, r0, #0
 80026c6:	d001      	beq.n	80026cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026c8:	f000 f92a 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	200003d0 	.word	0x200003d0
 80026d8:	40013800 	.word	0x40013800

080026dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <MX_USART2_UART_Init+0x60>)
 80026e2:	4a17      	ldr	r2, [pc, #92]	; (8002740 <MX_USART2_UART_Init+0x64>)
 80026e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <MX_USART2_UART_Init+0x60>)
 80026e8:	22e1      	movs	r2, #225	; 0xe1
 80026ea:	0252      	lsls	r2, r2, #9
 80026ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <MX_USART2_UART_Init+0x60>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <MX_USART2_UART_Init+0x60>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <MX_USART2_UART_Init+0x60>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <MX_USART2_UART_Init+0x60>)
 8002702:	220c      	movs	r2, #12
 8002704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <MX_USART2_UART_Init+0x60>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <MX_USART2_UART_Init+0x60>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <MX_USART2_UART_Init+0x60>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <MX_USART2_UART_Init+0x60>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <MX_USART2_UART_Init+0x60>)
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <MX_USART2_UART_Init+0x60>)
 8002726:	0018      	movs	r0, r3
 8002728:	f003 fdee 	bl	8006308 <HAL_UART_Init>
 800272c:	1e03      	subs	r3, r0, #0
 800272e:	d001      	beq.n	8002734 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002730:	f000 f8f6 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	200004ec 	.word	0x200004ec
 8002740:	40004400 	.word	0x40004400

08002744 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_DMA_Init+0x38>)
 800274c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <MX_DMA_Init+0x38>)
 8002750:	2101      	movs	r1, #1
 8002752:	430a      	orrs	r2, r1
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_DMA_Init+0x38>)
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	2201      	movs	r2, #1
 800275c:	4013      	ands	r3, r2
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	2009      	movs	r0, #9
 8002768:	f001 fbfe 	bl	8003f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800276c:	2009      	movs	r0, #9
 800276e:	f001 fc10 	bl	8003f92 <HAL_NVIC_EnableIRQ>

}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b002      	add	sp, #8
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	40021000 	.word	0x40021000

08002780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b089      	sub	sp, #36	; 0x24
 8002784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002786:	240c      	movs	r4, #12
 8002788:	193b      	adds	r3, r7, r4
 800278a:	0018      	movs	r0, r3
 800278c:	2314      	movs	r3, #20
 800278e:	001a      	movs	r2, r3
 8002790:	2100      	movs	r1, #0
 8002792:	f005 fa03 	bl	8007b9c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	4b54      	ldr	r3, [pc, #336]	; (80028e8 <MX_GPIO_Init+0x168>)
 8002798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800279a:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <MX_GPIO_Init+0x168>)
 800279c:	2102      	movs	r1, #2
 800279e:	430a      	orrs	r2, r1
 80027a0:	635a      	str	r2, [r3, #52]	; 0x34
 80027a2:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <MX_GPIO_Init+0x168>)
 80027a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a6:	2202      	movs	r2, #2
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <MX_GPIO_Init+0x168>)
 80027b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b2:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <MX_GPIO_Init+0x168>)
 80027b4:	2101      	movs	r1, #1
 80027b6:	430a      	orrs	r2, r1
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34
 80027ba:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <MX_GPIO_Init+0x168>)
 80027bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c6:	4b48      	ldr	r3, [pc, #288]	; (80028e8 <MX_GPIO_Init+0x168>)
 80027c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <MX_GPIO_Init+0x168>)
 80027cc:	2104      	movs	r1, #4
 80027ce:	430a      	orrs	r2, r1
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34
 80027d2:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <MX_GPIO_Init+0x168>)
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	2204      	movs	r2, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable_Comm_Processor_3V3_Pin|LED_Array_Enable___Pin|LED_Power_Enable_Pin, GPIO_PIN_RESET);
 80027de:	238c      	movs	r3, #140	; 0x8c
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4842      	ldr	r0, [pc, #264]	; (80028ec <MX_GPIO_Init+0x16c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	0019      	movs	r1, r3
 80027e8:	f001 ffa8 	bl	800473c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Enable_Comm_Processor_3V3_Pin LED_Array_Enable___Pin LED_Power_Enable_Pin */
  GPIO_InitStruct.Pin = Enable_Comm_Processor_3V3_Pin|LED_Array_Enable___Pin|LED_Power_Enable_Pin;
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	228c      	movs	r2, #140	; 0x8c
 80027f0:	0092      	lsls	r2, r2, #2
 80027f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f4:	193b      	adds	r3, r7, r4
 80027f6:	2201      	movs	r2, #1
 80027f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	193b      	adds	r3, r7, r4
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	193b      	adds	r3, r7, r4
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002806:	193b      	adds	r3, r7, r4
 8002808:	4a38      	ldr	r2, [pc, #224]	; (80028ec <MX_GPIO_Init+0x16c>)
 800280a:	0019      	movs	r1, r3
 800280c:	0010      	movs	r0, r2
 800280e:	f001 fe31 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Status_Pin */
  GPIO_InitStruct.Pin = Charge_Status_Pin;
 8002812:	193b      	adds	r3, r7, r4
 8002814:	2202      	movs	r2, #2
 8002816:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002818:	193b      	adds	r3, r7, r4
 800281a:	2203      	movs	r2, #3
 800281c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	193b      	adds	r3, r7, r4
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charge_Status_GPIO_Port, &GPIO_InitStruct);
 8002824:	193a      	adds	r2, r7, r4
 8002826:	23a0      	movs	r3, #160	; 0xa0
 8002828:	05db      	lsls	r3, r3, #23
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f001 fe21 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SFLASH_CS_Pin */
  GPIO_InitStruct.Pin = SPI_SFLASH_CS_Pin;
 8002832:	193b      	adds	r3, r7, r4
 8002834:	2210      	movs	r2, #16
 8002836:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002838:	193b      	adds	r3, r7, r4
 800283a:	4a2d      	ldr	r2, [pc, #180]	; (80028f0 <MX_GPIO_Init+0x170>)
 800283c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	193b      	adds	r3, r7, r4
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI_SFLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8002844:	193a      	adds	r2, r7, r4
 8002846:	23a0      	movs	r3, #160	; 0xa0
 8002848:	05db      	lsls	r3, r3, #23
 800284a:	0011      	movs	r1, r2
 800284c:	0018      	movs	r0, r3
 800284e:	f001 fe11 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMID___4_Pin VSYS___2_Pin */
  GPIO_InitStruct.Pin = PMID___4_Pin|VSYS___2_Pin;
 8002852:	193b      	adds	r3, r7, r4
 8002854:	220c      	movs	r2, #12
 8002856:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002858:	193b      	adds	r3, r7, r4
 800285a:	2203      	movs	r2, #3
 800285c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	193b      	adds	r3, r7, r4
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	193b      	adds	r3, r7, r4
 8002866:	4a21      	ldr	r2, [pc, #132]	; (80028ec <MX_GPIO_Init+0x16c>)
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	f001 fe02 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charge_INT___Pin Power_Down___Pin UFP_Fault___Pin */
  GPIO_InitStruct.Pin = Charge_INT___Pin|Power_Down___Pin|UFP_Fault___Pin;
 8002870:	193b      	adds	r3, r7, r4
 8002872:	2283      	movs	r2, #131	; 0x83
 8002874:	0212      	lsls	r2, r2, #8
 8002876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002878:	193b      	adds	r3, r7, r4
 800287a:	2200      	movs	r2, #0
 800287c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	193b      	adds	r3, r7, r4
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	193a      	adds	r2, r7, r4
 8002886:	23a0      	movs	r3, #160	; 0xa0
 8002888:	05db      	lsls	r3, r3, #23
 800288a:	0011      	movs	r1, r2
 800288c:	0018      	movs	r0, r3
 800288e:	f001 fdf1 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dead_Battery___Pin */
  GPIO_InitStruct.Pin = Dead_Battery___Pin;
 8002892:	193b      	adds	r3, r7, r4
 8002894:	2240      	movs	r2, #64	; 0x40
 8002896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002898:	193b      	adds	r3, r7, r4
 800289a:	2200      	movs	r2, #0
 800289c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	193b      	adds	r3, r7, r4
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Dead_Battery___GPIO_Port, &GPIO_InitStruct);
 80028a4:	193b      	adds	r3, r7, r4
 80028a6:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <MX_GPIO_Init+0x174>)
 80028a8:	0019      	movs	r1, r3
 80028aa:	0010      	movs	r0, r2
 80028ac:	f001 fde2 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : Beeper_Pin */
  GPIO_InitStruct.Pin = Beeper_Pin;
 80028b0:	0021      	movs	r1, r4
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	0052      	lsls	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	2202      	movs	r2, #2
 80028be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	2202      	movs	r2, #2
 80028d0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(Beeper_GPIO_Port, &GPIO_InitStruct);
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	4a05      	ldr	r2, [pc, #20]	; (80028ec <MX_GPIO_Init+0x16c>)
 80028d6:	0019      	movs	r1, r3
 80028d8:	0010      	movs	r0, r2
 80028da:	f001 fdcb 	bl	8004474 <HAL_GPIO_Init>

}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b009      	add	sp, #36	; 0x24
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	40021000 	.word	0x40021000
 80028ec:	50000400 	.word	0x50000400
 80028f0:	10110000 	.word	0x10110000
 80028f4:	50000800 	.word	0x50000800

080028f8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <__io_putchar+0x20>)
 8002902:	1d39      	adds	r1, r7, #4
 8002904:	4805      	ldr	r0, [pc, #20]	; (800291c <__io_putchar+0x24>)
 8002906:	2201      	movs	r2, #1
 8002908:	f003 fd54 	bl	80063b4 <HAL_UART_Transmit>

  return ch;
 800290c:	687b      	ldr	r3, [r7, #4]
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b002      	add	sp, #8
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	0000ffff 	.word	0x0000ffff
 800291c:	200004ec 	.word	0x200004ec

08002920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_MspInit+0x44>)
 8002934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_MspInit+0x44>)
 8002938:	2101      	movs	r1, #1
 800293a:	430a      	orrs	r2, r1
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_MspInit+0x44>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2201      	movs	r2, #1
 8002944:	4013      	ands	r3, r2
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_MspInit+0x44>)
 800294c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_MspInit+0x44>)
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	0549      	lsls	r1, r1, #21
 8002954:	430a      	orrs	r2, r1
 8002956:	63da      	str	r2, [r3, #60]	; 0x3c
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_MspInit+0x44>)
 800295a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	055b      	lsls	r3, r3, #21
 8002960:	4013      	ands	r3, r2
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	2314      	movs	r3, #20
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	0018      	movs	r0, r3
 8002982:	2314      	movs	r3, #20
 8002984:	001a      	movs	r2, r3
 8002986:	2100      	movs	r1, #0
 8002988:	f005 f908 	bl	8007b9c <memset>
  if(hadc->Instance==ADC1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_ADC_MspInit+0x80>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d129      	bne.n	80029ea <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_ADC_MspInit+0x84>)
 8002998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_ADC_MspInit+0x84>)
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	0349      	lsls	r1, r1, #13
 80029a0:	430a      	orrs	r2, r1
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_ADC_MspInit+0x84>)
 80029a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	035b      	lsls	r3, r3, #13
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_ADC_MspInit+0x84>)
 80029b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_ADC_MspInit+0x84>)
 80029b8:	2102      	movs	r1, #2
 80029ba:	430a      	orrs	r2, r1
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_ADC_MspInit+0x84>)
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	2202      	movs	r2, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = USB_C_in_1_Pin|USB_C_in_2_Pin;
 80029ca:	2114      	movs	r1, #20
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	2203      	movs	r2, #3
 80029d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029d2:	187b      	adds	r3, r7, r1
 80029d4:	2203      	movs	r2, #3
 80029d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029de:	187b      	adds	r3, r7, r1
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_ADC_MspInit+0x88>)
 80029e2:	0019      	movs	r1, r3
 80029e4:	0010      	movs	r0, r2
 80029e6:	f001 fd45 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b00a      	add	sp, #40	; 0x28
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	40012400 	.word	0x40012400
 80029f8:	40021000 	.word	0x40021000
 80029fc:	50000400 	.word	0x50000400

08002a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	2314      	movs	r3, #20
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	2314      	movs	r3, #20
 8002a10:	001a      	movs	r2, r3
 8002a12:	2100      	movs	r1, #0
 8002a14:	f005 f8c2 	bl	8007b9c <memset>
  if(hi2c->Instance==I2C2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <HAL_I2C_MspInit+0x90>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d131      	bne.n	8002a86 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <HAL_I2C_MspInit+0x94>)
 8002a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_I2C_MspInit+0x94>)
 8002a28:	2101      	movs	r1, #1
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_I2C_MspInit+0x94>)
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	2201      	movs	r2, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a3a:	2114      	movs	r1, #20
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	22c0      	movs	r2, #192	; 0xc0
 8002a40:	0152      	lsls	r2, r2, #5
 8002a42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	2212      	movs	r2, #18
 8002a48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	2206      	movs	r2, #6
 8002a5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5c:	187a      	adds	r2, r7, r1
 8002a5e:	23a0      	movs	r3, #160	; 0xa0
 8002a60:	05db      	lsls	r3, r3, #23
 8002a62:	0011      	movs	r1, r2
 8002a64:	0018      	movs	r0, r3
 8002a66:	f001 fd05 	bl	8004474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_I2C_MspInit+0x94>)
 8002a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_I2C_MspInit+0x94>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	03c9      	lsls	r1, r1, #15
 8002a74:	430a      	orrs	r2, r1
 8002a76:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_I2C_MspInit+0x94>)
 8002a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	03db      	lsls	r3, r3, #15
 8002a80:	4013      	ands	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b00a      	add	sp, #40	; 0x28
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	40005800 	.word	0x40005800
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <HAL_RTC_MspInit+0x44>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d114      	bne.n	8002ad4 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_RTC_MspInit+0x48>)
 8002aac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <HAL_RTC_MspInit+0x48>)
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	0209      	lsls	r1, r1, #8
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RTC_MspInit+0x48>)
 8002aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_RTC_MspInit+0x48>)
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	00c9      	lsls	r1, r1, #3
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_RTC_MspInit+0x48>)
 8002ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b004      	add	sp, #16
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40002800 	.word	0x40002800
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	; 0x30
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	231c      	movs	r3, #28
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	0018      	movs	r0, r3
 8002af2:	2314      	movs	r3, #20
 8002af4:	001a      	movs	r2, r3
 8002af6:	2100      	movs	r1, #0
 8002af8:	f005 f850 	bl	8007b9c <memset>
  if(hspi->Instance==SPI1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a4b      	ldr	r2, [pc, #300]	; (8002c30 <HAL_SPI_MspInit+0x14c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d131      	bne.n	8002b6a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b06:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	0149      	lsls	r1, r1, #5
 8002b10:	430a      	orrs	r2, r1
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
 8002b14:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	015b      	lsls	r3, r3, #5
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	4b44      	ldr	r3, [pc, #272]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b2e:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI_SFLASH_CLK_Pin|SPI_SFLASH_MISO_Pin|SPI_SFLASH_MOSI_Pin;
 8002b3a:	211c      	movs	r1, #28
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	22e0      	movs	r2, #224	; 0xe0
 8002b40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	187b      	adds	r3, r7, r1
 8002b44:	2202      	movs	r2, #2
 8002b46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	187b      	adds	r3, r7, r1
 8002b50:	2200      	movs	r2, #0
 8002b52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	187a      	adds	r2, r7, r1
 8002b5c:	23a0      	movs	r3, #160	; 0xa0
 8002b5e:	05db      	lsls	r3, r3, #23
 8002b60:	0011      	movs	r1, r2
 8002b62:	0018      	movs	r0, r3
 8002b64:	f001 fc86 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b68:	e05e      	b.n	8002c28 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a32      	ldr	r2, [pc, #200]	; (8002c38 <HAL_SPI_MspInit+0x154>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d159      	bne.n	8002c28 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b74:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b78:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	01c9      	lsls	r1, r1, #7
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	01db      	lsls	r3, r3, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	635a      	str	r2, [r3, #52]	; 0x34
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_SPI_MspInit+0x150>)
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_CLK___Not_Used_Pin|SPI2_OUT_LED_Display_Pin;
 8002ba8:	211c      	movs	r1, #28
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	4a23      	ldr	r2, [pc, #140]	; (8002c3c <HAL_SPI_MspInit+0x158>)
 8002bae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	187a      	adds	r2, r7, r1
 8002bca:	23a0      	movs	r3, #160	; 0xa0
 8002bcc:	05db      	lsls	r3, r3, #23
 8002bce:	0011      	movs	r1, r2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f001 fc4f 	bl	8004474 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002bd8:	4a1a      	ldr	r2, [pc, #104]	; (8002c44 <HAL_SPI_MspInit+0x160>)
 8002bda:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002bde:	2213      	movs	r2, #19
 8002be0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002be4:	2210      	movs	r2, #16
 8002be6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002bf0:	2280      	movs	r2, #128	; 0x80
 8002bf2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f001 f9dc 	bl	8003fcc <HAL_DMA_Init>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8002c18:	f7ff fe82 	bl	8002920 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <HAL_SPI_MspInit+0x15c>)
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b00c      	add	sp, #48	; 0x30
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40013000 	.word	0x40013000
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40003800 	.word	0x40003800
 8002c3c:	00000401 	.word	0x00000401
 8002c40:	20000578 	.word	0x20000578
 8002c44:	40020008 	.word	0x40020008

08002c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	; 0x30
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	231c      	movs	r3, #28
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	0018      	movs	r0, r3
 8002c56:	2314      	movs	r3, #20
 8002c58:	001a      	movs	r2, r3
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f004 ff9e 	bl	8007b9c <memset>
  if(huart->Instance==USART1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a36      	ldr	r2, [pc, #216]	; (8002d40 <HAL_UART_MspInit+0xf8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d130      	bne.n	8002ccc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c6a:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6e:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	01c9      	lsls	r1, r1, #7
 8002c74:	430a      	orrs	r2, r1
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
 8002c78:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	01db      	lsls	r3, r3, #7
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	4b2f      	ldr	r3, [pc, #188]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c96:	2202      	movs	r2, #2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_to_Comm_Processor_Pin|RX_from_Comm_Processor_Pin;
 8002c9e:	211c      	movs	r1, #28
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	22c0      	movs	r2, #192	; 0xc0
 8002ca4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	187b      	adds	r3, r7, r1
 8002ca8:	2202      	movs	r2, #2
 8002caa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2200      	movs	r2, #0
 8002cbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <HAL_UART_MspInit+0x100>)
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	f001 fbd5 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cca:	e035      	b.n	8002d38 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_UART_MspInit+0x104>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d130      	bne.n	8002d38 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002cdc:	2180      	movs	r1, #128	; 0x80
 8002cde:	0289      	lsls	r1, r1, #10
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce8:	2380      	movs	r3, #128	; 0x80
 8002cea:	029b      	lsls	r3, r3, #10
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_UART_MspInit+0xfc>)
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	2201      	movs	r2, #1
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
 8002d0a:	211c      	movs	r1, #28
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	220c      	movs	r2, #12
 8002d10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2202      	movs	r2, #2
 8002d16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2201      	movs	r2, #1
 8002d28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	187a      	adds	r2, r7, r1
 8002d2c:	23a0      	movs	r3, #160	; 0xa0
 8002d2e:	05db      	lsls	r3, r3, #23
 8002d30:	0011      	movs	r1, r2
 8002d32:	0018      	movs	r0, r3
 8002d34:	f001 fb9e 	bl	8004474 <HAL_GPIO_Init>
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b00c      	add	sp, #48	; 0x30
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40021000 	.word	0x40021000
 8002d48:	50000400 	.word	0x50000400
 8002d4c:	40004400 	.word	0x40004400

08002d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5e:	e7fe      	b.n	8002d5e <HardFault_Handler+0x4>

08002d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d78:	f000 fb7c 	bl	8003474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <DMA1_Channel1_IRQHandler+0x18>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f001 fa30 	bl	80041f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  LED_display_update_completed = true;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <DMA1_Channel1_IRQHandler+0x1c>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000578 	.word	0x20000578
 8002da0:	200005d4 	.word	0x200005d4

08002da4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e00a      	b.n	8002dcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002db6:	e000      	b.n	8002dba <_read+0x16>
 8002db8:	bf00      	nop
 8002dba:	0001      	movs	r1, r0
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	60ba      	str	r2, [r7, #8]
 8002dc2:	b2ca      	uxtb	r2, r1
 8002dc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	dbf0      	blt.n	8002db6 <_read+0x12>
	}

return len;
 8002dd4:	687b      	ldr	r3, [r7, #4]
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b006      	add	sp, #24
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	e009      	b.n	8002e04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	60ba      	str	r2, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff fd7d 	bl	80028f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3301      	adds	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	dbf1      	blt.n	8002df0 <_write+0x12>
	}
	return len;
 8002e0c:	687b      	ldr	r3, [r7, #4]
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b006      	add	sp, #24
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <_close>:

int _close(int file)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	425b      	negs	r3, r3
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b002      	add	sp, #8
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	0192      	lsls	r2, r2, #6
 8002e3a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b002      	add	sp, #8
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <_isatty>:

int _isatty(int file)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
	return 1;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
	return 0;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <_sbrk+0x50>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <_sbrk+0x16>
		heap_end = &end;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <_sbrk+0x50>)
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <_sbrk+0x54>)
 8002e84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <_sbrk+0x50>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <_sbrk+0x50>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	18d3      	adds	r3, r2, r3
 8002e94:	466a      	mov	r2, sp
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d907      	bls.n	8002eaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e9a:	f004 fe55 	bl	8007b48 <__errno>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	220c      	movs	r2, #12
 8002ea2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	425b      	negs	r3, r3
 8002ea8:	e006      	b.n	8002eb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <_sbrk+0x50>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	18d2      	adds	r2, r2, r3
 8002eb2:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <_sbrk+0x50>)
 8002eb4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b004      	add	sp, #16
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2000008c 	.word	0x2000008c
 8002ec4:	20000868 	.word	0x20000868

08002ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <SystemInit+0x14>)
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	0512      	lsls	r2, r2, #20
 8002ed2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <update_led_bar>:
  * @brief update_led_bar
  * @param  None
  * @retval : None
  */
void update_led_bar(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
	/*
	 * Take the data that has been prepared using generate pwm and output over SPI 2
	 */
	LED_display_update_completed = false;
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <update_led_bar+0x30>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
	/*
	 * Initiate Transfer
	 */
	HAL_SPI_Transmit_DMA( &hspi2, (uint8_t *) ld.pwm_output, NO_PWM_BYTES );
 8002eea:	490a      	ldr	r1, [pc, #40]	; (8002f14 <update_led_bar+0x34>)
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <update_led_bar+0x38>)
 8002eee:	226c      	movs	r2, #108	; 0x6c
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f002 ff43 	bl	8005d7c <HAL_SPI_Transmit_DMA>
	/*
	 * Wait for it to complete - Later make this checked in main loop for LED management to speed operations up
	 */
	while( LED_display_update_completed == false )
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <update_led_bar+0x30>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2201      	movs	r2, #1
 8002f00:	4053      	eors	r3, r2
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f7      	bne.n	8002ef8 <update_led_bar+0x18>
		;
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	200005d4 	.word	0x200005d4
 8002f14:	20000094 	.word	0x20000094
 8002f18:	20000140 	.word	0x20000140

08002f1c <process_led_display>:
  * @brief	Process the LED Display
  * @param  None
  * @retval : None
  */
void process_led_display(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
	led_bar_test();
 8002f20:	f000 f9b8 	bl	8003294 <led_bar_test>
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <set_led_bar>:
  * @brief set_led_bar_raw
  * @param  LED, Color Values R G B - 0 - 100 %
  * @retval : None
  */
void set_led_bar( uint8_t led, float red_level, float green_level, float blue_level )
{
 8002f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	260f      	movs	r6, #15
 8002f3a:	19bb      	adds	r3, r7, r6
 8002f3c:	1c02      	adds	r2, r0, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
    set_led_bar_raw( led, (uint16_t) ( ( red_level / 100 ) * 255.0  ), (uint16_t) ( ( green_level / 100 ) * 255.0 ), (uint16_t) ( ( blue_level / 100 ) *  255.0 ) );
 8002f40:	4923      	ldr	r1, [pc, #140]	; (8002fd0 <set_led_bar+0xa4>)
 8002f42:	68b8      	ldr	r0, [r7, #8]
 8002f44:	f7fd fba6 	bl	8000694 <__aeabi_fdiv>
 8002f48:	1c03      	adds	r3, r0, #0
 8002f4a:	1c18      	adds	r0, r3, #0
 8002f4c:	f7fe fefa 	bl	8001d44 <__aeabi_f2d>
 8002f50:	2200      	movs	r2, #0
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <set_led_bar+0xa8>)
 8002f54:	f7fe f8cc 	bl	80010f0 <__aeabi_dmul>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	000c      	movs	r4, r1
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	0021      	movs	r1, r4
 8002f60:	f7fd fab8 	bl	80004d4 <__aeabi_d2uiz>
 8002f64:	0003      	movs	r3, r0
 8002f66:	b29c      	uxth	r4, r3
 8002f68:	4919      	ldr	r1, [pc, #100]	; (8002fd0 <set_led_bar+0xa4>)
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fb92 	bl	8000694 <__aeabi_fdiv>
 8002f70:	1c03      	adds	r3, r0, #0
 8002f72:	1c18      	adds	r0, r3, #0
 8002f74:	f7fe fee6 	bl	8001d44 <__aeabi_f2d>
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <set_led_bar+0xa8>)
 8002f7c:	f7fe f8b8 	bl	80010f0 <__aeabi_dmul>
 8002f80:	0002      	movs	r2, r0
 8002f82:	000b      	movs	r3, r1
 8002f84:	0010      	movs	r0, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	f7fd faa4 	bl	80004d4 <__aeabi_d2uiz>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	b29d      	uxth	r5, r3
 8002f90:	490f      	ldr	r1, [pc, #60]	; (8002fd0 <set_led_bar+0xa4>)
 8002f92:	6838      	ldr	r0, [r7, #0]
 8002f94:	f7fd fb7e 	bl	8000694 <__aeabi_fdiv>
 8002f98:	1c03      	adds	r3, r0, #0
 8002f9a:	1c18      	adds	r0, r3, #0
 8002f9c:	f7fe fed2 	bl	8001d44 <__aeabi_f2d>
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <set_led_bar+0xa8>)
 8002fa4:	f7fe f8a4 	bl	80010f0 <__aeabi_dmul>
 8002fa8:	0002      	movs	r2, r0
 8002faa:	000b      	movs	r3, r1
 8002fac:	0010      	movs	r0, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	f7fd fa90 	bl	80004d4 <__aeabi_d2uiz>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	19bb      	adds	r3, r7, r6
 8002fba:	7818      	ldrb	r0, [r3, #0]
 8002fbc:	0013      	movs	r3, r2
 8002fbe:	002a      	movs	r2, r5
 8002fc0:	0021      	movs	r1, r4
 8002fc2:	f000 f809 	bl	8002fd8 <set_led_bar_raw>
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b005      	add	sp, #20
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	42c80000 	.word	0x42c80000
 8002fd4:	406fe000 	.word	0x406fe000

08002fd8 <set_led_bar_raw>:
  * @brief set_led_bar_raw
  * @param  LED, Color Values R G B
  * @retval : None
  */
void set_led_bar_raw( uint8_t led, uint16_t raw_red_level, uint16_t raw_green_level, uint16_t raw_blue_level )
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	0005      	movs	r5, r0
 8002fe0:	000c      	movs	r4, r1
 8002fe2:	0010      	movs	r0, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	1dfb      	adds	r3, r7, #7
 8002fe8:	1c2a      	adds	r2, r5, #0
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	1c22      	adds	r2, r4, #0
 8002ff0:	801a      	strh	r2, [r3, #0]
 8002ff2:	1cbb      	adds	r3, r7, #2
 8002ff4:	1c02      	adds	r2, r0, #0
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	003b      	movs	r3, r7
 8002ffa:	1c0a      	adds	r2, r1, #0
 8002ffc:	801a      	strh	r2, [r3, #0]
     *
     * Adjust based on https://www.ledsmagazine.com/smart-lighting-iot/color-tuning/article/16695054/understand-rgb-led-mixing-ratios-to-realize-optimal-color-in-signs-and-displays-magazine
     *
     * Color values and scale
     */
    if( led < ( LED_BAR_NO_LEDS - 1) ) {
 8002ffe:	1dfb      	adds	r3, r7, #7
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b0a      	cmp	r3, #10
 8003004:	d862      	bhi.n	80030cc <set_led_bar_raw+0xf4>
        led_display[ led ][ EV_LED_RED ] =  (uint8_t) (float) ( raw_red_level * ( 4.0 * ( 255 / 1020 ) ) );
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	0018      	movs	r0, r3
 800300c:	f7fe fe60 	bl	8001cd0 <__aeabi_i2d>
 8003010:	2200      	movs	r2, #0
 8003012:	2300      	movs	r3, #0
 8003014:	f7fe f86c 	bl	80010f0 <__aeabi_dmul>
 8003018:	0003      	movs	r3, r0
 800301a:	000c      	movs	r4, r1
 800301c:	0018      	movs	r0, r3
 800301e:	0021      	movs	r1, r4
 8003020:	f7fe fee2 	bl	8001de8 <__aeabi_d2f>
 8003024:	1c03      	adds	r3, r0, #0
 8003026:	1c18      	adds	r0, r3, #0
 8003028:	f7fd fa3c 	bl	80004a4 <__aeabi_f2uiz>
 800302c:	0003      	movs	r3, r0
 800302e:	b2d9      	uxtb	r1, r3
 8003030:	1dfb      	adds	r3, r7, #7
 8003032:	781a      	ldrb	r2, [r3, #0]
 8003034:	b288      	uxth	r0, r1
 8003036:	4927      	ldr	r1, [pc, #156]	; (80030d4 <set_led_bar_raw+0xfc>)
 8003038:	0013      	movs	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	189b      	adds	r3, r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	1c02      	adds	r2, r0, #0
 8003042:	525a      	strh	r2, [r3, r1]
        led_display[ led ][ EV_LED_GREEN ] =  (uint8_t) (float) ( raw_green_level * ( 3.0 * ( 255 / 1020 ) ) );
 8003044:	1cbb      	adds	r3, r7, #2
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	0018      	movs	r0, r3
 800304a:	f7fe fe41 	bl	8001cd0 <__aeabi_i2d>
 800304e:	2200      	movs	r2, #0
 8003050:	2300      	movs	r3, #0
 8003052:	f7fe f84d 	bl	80010f0 <__aeabi_dmul>
 8003056:	0003      	movs	r3, r0
 8003058:	000c      	movs	r4, r1
 800305a:	0018      	movs	r0, r3
 800305c:	0021      	movs	r1, r4
 800305e:	f7fe fec3 	bl	8001de8 <__aeabi_d2f>
 8003062:	1c03      	adds	r3, r0, #0
 8003064:	1c18      	adds	r0, r3, #0
 8003066:	f7fd fa1d 	bl	80004a4 <__aeabi_f2uiz>
 800306a:	0003      	movs	r3, r0
 800306c:	b2d9      	uxtb	r1, r3
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	b288      	uxth	r0, r1
 8003074:	4917      	ldr	r1, [pc, #92]	; (80030d4 <set_led_bar_raw+0xfc>)
 8003076:	0013      	movs	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	189b      	adds	r3, r3, r2
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	18cb      	adds	r3, r1, r3
 8003080:	3302      	adds	r3, #2
 8003082:	1c02      	adds	r2, r0, #0
 8003084:	801a      	strh	r2, [r3, #0]
        led_display[ led ][ EV_LED_BLUE ] =  (uint8_t) (float) ( raw_blue_level * ( 1.0 * ( 255 / 1020 ) ) );
 8003086:	003b      	movs	r3, r7
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	0018      	movs	r0, r3
 800308c:	f7fe fe20 	bl	8001cd0 <__aeabi_i2d>
 8003090:	2200      	movs	r2, #0
 8003092:	2300      	movs	r3, #0
 8003094:	f7fe f82c 	bl	80010f0 <__aeabi_dmul>
 8003098:	0003      	movs	r3, r0
 800309a:	000c      	movs	r4, r1
 800309c:	0018      	movs	r0, r3
 800309e:	0021      	movs	r1, r4
 80030a0:	f7fe fea2 	bl	8001de8 <__aeabi_d2f>
 80030a4:	1c03      	adds	r3, r0, #0
 80030a6:	1c18      	adds	r0, r3, #0
 80030a8:	f7fd f9fc 	bl	80004a4 <__aeabi_f2uiz>
 80030ac:	0003      	movs	r3, r0
 80030ae:	b2d9      	uxtb	r1, r3
 80030b0:	1dfb      	adds	r3, r7, #7
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	b288      	uxth	r0, r1
 80030b6:	4907      	ldr	r1, [pc, #28]	; (80030d4 <set_led_bar_raw+0xfc>)
 80030b8:	0013      	movs	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	18cb      	adds	r3, r1, r3
 80030c2:	3304      	adds	r3, #4
 80030c4:	1c02      	adds	r2, r0, #0
 80030c6:	801a      	strh	r2, [r3, #0]
        generate_led_pwm();
 80030c8:	f000 f806 	bl	80030d8 <generate_led_pwm>
    }
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bdb0      	pop	{r4, r5, r7, pc}
 80030d4:	200005d8 	.word	0x200005d8

080030d8 <generate_led_pwm>:
  * @brief Generate the PWM levels based on lux level
  * @param  None
  * @retval : None
  */
void generate_led_pwm(void)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
    uint8_t led_level;
    int16_t i, j, k, index;
    uint32_t output_value, mask;
    float lux_scale;

    if( hs.valid_lux_level == true ) {
 80030de:	4a69      	ldr	r2, [pc, #420]	; (8003284 <generate_led_pwm+0x1ac>)
 80030e0:	23bc      	movs	r3, #188	; 0xbc
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	5cd3      	ldrb	r3, [r2, r3]
 80030e6:	227f      	movs	r2, #127	; 0x7f
 80030e8:	4393      	bics	r3, r2
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <generate_led_pwm+0x20>
        lux_scale = 1.0;        // determine correct levels later - use a calculation
 80030f0:	23fe      	movs	r3, #254	; 0xfe
 80030f2:	059b      	lsls	r3, r3, #22
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	e002      	b.n	80030fe <generate_led_pwm+0x26>
    } else
        lux_scale = 1.0;
 80030f8:	23fe      	movs	r3, #254	; 0xfe
 80030fa:	059b      	lsls	r3, r3, #22
 80030fc:	60bb      	str	r3, [r7, #8]
    /*
     * Output PWM Bits are sent for the last LED first and each of the 24 bits are sent in order of G R B bit order 7-0
     *
     * The Array contains additional byte to generate reload of data
     */
    memset( (void *) &ld.pwm_output, 0x00, sizeof( ld.pwm_output ) );
 80030fe:	4b62      	ldr	r3, [pc, #392]	; (8003288 <generate_led_pwm+0x1b0>)
 8003100:	229e      	movs	r2, #158	; 0x9e
 8003102:	2100      	movs	r1, #0
 8003104:	0018      	movs	r0, r3
 8003106:	f004 fd49 	bl	8007b9c <memset>
    index = NO_PWM_BYTES - 1;   // Start at end and back fill
 800310a:	2310      	movs	r3, #16
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	226b      	movs	r2, #107	; 0x6b
 8003110:	801a      	strh	r2, [r3, #0]
    for( i = ( LED_BAR_NO_LEDS - 1);  i >= 0; i-- ) {
 8003112:	2316      	movs	r3, #22
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	220b      	movs	r2, #11
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	e0a8      	b.n	800326e <generate_led_pwm+0x196>
        for( j = ( LEDS_NO_LEDS - 1); j >= 0; j-- ) {
 800311c:	2314      	movs	r3, #20
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	2202      	movs	r2, #2
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	e093      	b.n	800324e <generate_led_pwm+0x176>
            led_level = (uint8_t) ( lux_scale * (float) led_display[ i ][ j ] );
 8003126:	2316      	movs	r3, #22
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2200      	movs	r2, #0
 800312c:	5e9a      	ldrsh	r2, [r3, r2]
 800312e:	2314      	movs	r3, #20
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	2000      	movs	r0, #0
 8003134:	5e18      	ldrsh	r0, [r3, r0]
 8003136:	4955      	ldr	r1, [pc, #340]	; (800328c <generate_led_pwm+0x1b4>)
 8003138:	0013      	movs	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	189b      	adds	r3, r3, r2
 800313e:	181b      	adds	r3, r3, r0
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	5a5b      	ldrh	r3, [r3, r1]
 8003144:	0018      	movs	r0, r3
 8003146:	f7fd ff93 	bl	8001070 <__aeabi_ui2f>
 800314a:	1c03      	adds	r3, r0, #0
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	1c18      	adds	r0, r3, #0
 8003150:	f7fd fc78 	bl	8000a44 <__aeabi_fmul>
 8003154:	1c03      	adds	r3, r0, #0
 8003156:	1dfc      	adds	r4, r7, #7
 8003158:	1c18      	adds	r0, r3, #0
 800315a:	f7fd f9a3 	bl	80004a4 <__aeabi_f2uiz>
 800315e:	0003      	movs	r3, r0
 8003160:	7023      	strb	r3, [r4, #0]
//            printf( "LED Display[ %u ][ %u ] = 0x%02x\r\n", i, j, (uint16_t) pwm_output[ i ] );
            output_value = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
            for( k = 0; k < BITS_OF_PWM; k++ ) {
 8003166:	2312      	movs	r3, #18
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	2200      	movs	r2, #0
 800316c:	801a      	strh	r2, [r3, #0]
 800316e:	e032      	b.n	80031d6 <generate_led_pwm+0xfe>
                if( ( led_level & ( 1 << k ) ) == 0x00 ) {
 8003170:	1dfb      	adds	r3, r7, #7
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	2312      	movs	r3, #18
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2100      	movs	r1, #0
 800317a:	5e5b      	ldrsh	r3, [r3, r1]
 800317c:	411a      	asrs	r2, r3
 800317e:	0013      	movs	r3, r2
 8003180:	2201      	movs	r2, #1
 8003182:	4013      	ands	r3, r2
 8003184:	d10f      	bne.n	80031a6 <generate_led_pwm+0xce>
                    mask= (uint32_t) ( NZR_0 << ( k * 3 ) );
 8003186:	2312      	movs	r3, #18
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2200      	movs	r2, #0
 800318c:	5e9a      	ldrsh	r2, [r3, r2]
 800318e:	0013      	movs	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	189b      	adds	r3, r3, r2
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	0013      	movs	r3, r2
 800319a:	603b      	str	r3, [r7, #0]
//                    printf( "[%u] Mask low: 0x%08lx\r\n", k, mask );
                    output_value |= mask;
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e00e      	b.n	80031c4 <generate_led_pwm+0xec>
                } else {
                    mask = (uint32_t) ( NZR_1 << ( k * 3 ) );
 80031a6:	2312      	movs	r3, #18
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	2200      	movs	r2, #0
 80031ac:	5e9a      	ldrsh	r2, [r3, r2]
 80031ae:	0013      	movs	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	2203      	movs	r2, #3
 80031b6:	409a      	lsls	r2, r3
 80031b8:	0013      	movs	r3, r2
 80031ba:	603b      	str	r3, [r7, #0]
//                    printf( "[%u] Mask high: 0x%08lx\r\n", k, mask );
                    output_value |= mask;
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
            for( k = 0; k < BITS_OF_PWM; k++ ) {
 80031c4:	2112      	movs	r1, #18
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	2200      	movs	r2, #0
 80031ca:	5e9b      	ldrsh	r3, [r3, r2]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	801a      	strh	r2, [r3, #0]
 80031d6:	2312      	movs	r3, #18
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2200      	movs	r2, #0
 80031dc:	5e9b      	ldrsh	r3, [r3, r2]
 80031de:	2b07      	cmp	r3, #7
 80031e0:	ddc6      	ble.n	8003170 <generate_led_pwm+0x98>
                }
            }
//            printf( "Index: %u\r\n", index );
            ld.pwm_output[ index-- ] = output_value & 0x000000FF;
 80031e2:	2410      	movs	r4, #16
 80031e4:	193b      	adds	r3, r7, r4
 80031e6:	2200      	movs	r2, #0
 80031e8:	5e9a      	ldrsh	r2, [r3, r2]
 80031ea:	b293      	uxth	r3, r2
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b299      	uxth	r1, r3
 80031f0:	193b      	adds	r3, r7, r4
 80031f2:	8019      	strh	r1, [r3, #0]
 80031f4:	0011      	movs	r1, r2
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b25      	ldr	r3, [pc, #148]	; (8003290 <generate_led_pwm+0x1b8>)
 80031fc:	185b      	adds	r3, r3, r1
 80031fe:	711a      	strb	r2, [r3, #4]
            ld.pwm_output[ index-- ] = ( output_value & 0x0000FF00 ) >> 8;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	0a18      	lsrs	r0, r3, #8
 8003204:	193b      	adds	r3, r7, r4
 8003206:	2200      	movs	r2, #0
 8003208:	5e9a      	ldrsh	r2, [r3, r2]
 800320a:	b293      	uxth	r3, r2
 800320c:	3b01      	subs	r3, #1
 800320e:	b299      	uxth	r1, r3
 8003210:	193b      	adds	r3, r7, r4
 8003212:	8019      	strh	r1, [r3, #0]
 8003214:	0011      	movs	r1, r2
 8003216:	b2c2      	uxtb	r2, r0
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <generate_led_pwm+0x1b8>)
 800321a:	185b      	adds	r3, r3, r1
 800321c:	711a      	strb	r2, [r3, #4]
            ld.pwm_output[ index-- ] = ( output_value & 0x00FF0000 ) >> 16;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	0c18      	lsrs	r0, r3, #16
 8003222:	193b      	adds	r3, r7, r4
 8003224:	2200      	movs	r2, #0
 8003226:	5e9a      	ldrsh	r2, [r3, r2]
 8003228:	b293      	uxth	r3, r2
 800322a:	3b01      	subs	r3, #1
 800322c:	b299      	uxth	r1, r3
 800322e:	193b      	adds	r3, r7, r4
 8003230:	8019      	strh	r1, [r3, #0]
 8003232:	0011      	movs	r1, r2
 8003234:	b2c2      	uxtb	r2, r0
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <generate_led_pwm+0x1b8>)
 8003238:	185b      	adds	r3, r3, r1
 800323a:	711a      	strb	r2, [r3, #4]
        for( j = ( LEDS_NO_LEDS - 1); j >= 0; j-- ) {
 800323c:	2114      	movs	r1, #20
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2200      	movs	r2, #0
 8003242:	5e9b      	ldrsh	r3, [r3, r2]
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	187b      	adds	r3, r7, r1
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	2314      	movs	r3, #20
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	2200      	movs	r2, #0
 8003254:	5e9b      	ldrsh	r3, [r3, r2]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db00      	blt.n	800325c <generate_led_pwm+0x184>
 800325a:	e764      	b.n	8003126 <generate_led_pwm+0x4e>
    for( i = ( LED_BAR_NO_LEDS - 1);  i >= 0; i-- ) {
 800325c:	2116      	movs	r1, #22
 800325e:	187b      	adds	r3, r7, r1
 8003260:	2200      	movs	r2, #0
 8003262:	5e9b      	ldrsh	r3, [r3, r2]
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	187b      	adds	r3, r7, r1
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	2316      	movs	r3, #22
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	2200      	movs	r2, #0
 8003274:	5e9b      	ldrsh	r3, [r3, r2]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db00      	blt.n	800327c <generate_led_pwm+0x1a4>
 800327a:	e74f      	b.n	800311c <generate_led_pwm+0x44>
        }
    }
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b007      	add	sp, #28
 8003282:	bd90      	pop	{r4, r7, pc}
 8003284:	200001a4 	.word	0x200001a4
 8003288:	20000094 	.word	0x20000094
 800328c:	200005d8 	.word	0x200005d8
 8003290:	20000090 	.word	0x20000090

08003294 <led_bar_test>:
  * @brief led bar test
  * @param  None
  * @retval : None
  */
void led_bar_test(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
    uint16_t j, i, color;

    color = 0;
 800329a:	1cbb      	adds	r3, r7, #2
 800329c:	2200      	movs	r2, #0
 800329e:	801a      	strh	r2, [r3, #0]

    for( j = 0; j < 3; j ++ ) {
 80032a0:	1dbb      	adds	r3, r7, #6
 80032a2:	2200      	movs	r2, #0
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	e046      	b.n	8003336 <led_bar_test+0xa2>
        for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	2200      	movs	r2, #0
 80032ac:	801a      	strh	r2, [r3, #0]
 80032ae:	e026      	b.n	80032fe <led_bar_test+0x6a>
            if( color == EV_LED_RED ) {
 80032b0:	1cbb      	adds	r3, r7, #2
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d108      	bne.n	80032ca <led_bar_test+0x36>
                set_led_bar( i, 100, 0, 0 );
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	b2d8      	uxtb	r0, r3
 80032be:	2300      	movs	r3, #0
 80032c0:	2200      	movs	r2, #0
 80032c2:	4921      	ldr	r1, [pc, #132]	; (8003348 <led_bar_test+0xb4>)
 80032c4:	f7ff fe32 	bl	8002f2c <set_led_bar>
 80032c8:	e014      	b.n	80032f4 <led_bar_test+0x60>
//                printf( "Red\r\n" );
            } else if( color == EV_LED_GREEN ) {
 80032ca:	1cbb      	adds	r3, r7, #2
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d108      	bne.n	80032e4 <led_bar_test+0x50>
                set_led_bar( i, 0, 100, 0 );
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	b2d8      	uxtb	r0, r3
 80032d8:	2300      	movs	r3, #0
 80032da:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <led_bar_test+0xb4>)
 80032dc:	2100      	movs	r1, #0
 80032de:	f7ff fe25 	bl	8002f2c <set_led_bar>
 80032e2:	e007      	b.n	80032f4 <led_bar_test+0x60>
//                printf( "Green\r\n" );
            } else {
                set_led_bar( i, 0, 0, 100 );
 80032e4:	1d3b      	adds	r3, r7, #4
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b2d8      	uxtb	r0, r3
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <led_bar_test+0xb4>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	f7ff fe1c 	bl	8002f2c <set_led_bar>
        for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	881a      	ldrh	r2, [r3, #0]
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	3201      	adds	r2, #1
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	1d3b      	adds	r3, r7, #4
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	2b0b      	cmp	r3, #11
 8003304:	d9d4      	bls.n	80032b0 <led_bar_test+0x1c>
//                printf( "Blue\r\n" );
            }
        }
        color += 1;
 8003306:	1cbb      	adds	r3, r7, #2
 8003308:	1cba      	adds	r2, r7, #2
 800330a:	8812      	ldrh	r2, [r2, #0]
 800330c:	3201      	adds	r2, #1
 800330e:	801a      	strh	r2, [r3, #0]
        if( color >= LEDS_NO_LEDS )
 8003310:	1cbb      	adds	r3, r7, #2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d902      	bls.n	800331e <led_bar_test+0x8a>
            color = 0;
 8003318:	1cbb      	adds	r3, r7, #2
 800331a:	2200      	movs	r2, #0
 800331c:	801a      	strh	r2, [r3, #0]
        update_led_bar();
 800331e:	f7ff fddf 	bl	8002ee0 <update_led_bar>
        HAL_Delay( 2000 );
 8003322:	23fa      	movs	r3, #250	; 0xfa
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	0018      	movs	r0, r3
 8003328:	f000 f8be 	bl	80034a8 <HAL_Delay>
    for( j = 0; j < 3; j ++ ) {
 800332c:	1dbb      	adds	r3, r7, #6
 800332e:	881a      	ldrh	r2, [r3, #0]
 8003330:	1dbb      	adds	r3, r7, #6
 8003332:	3201      	adds	r2, #1
 8003334:	801a      	strh	r2, [r3, #0]
 8003336:	1dbb      	adds	r3, r7, #6
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d9b4      	bls.n	80032a8 <led_bar_test+0x14>
    }
}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b002      	add	sp, #8
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	42c80000 	.word	0x42c80000

0800334c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800334c:	480d      	ldr	r0, [pc, #52]	; (8003384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800334e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003350:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003352:	e003      	b.n	800335c <LoopCopyDataInit>

08003354 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003356:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003358:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800335a:	3104      	adds	r1, #4

0800335c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800335c:	480b      	ldr	r0, [pc, #44]	; (800338c <LoopForever+0xa>)
  ldr r3, =_edata
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <LoopForever+0xe>)
  adds r2, r0, r1
 8003360:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003362:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003364:	d3f6      	bcc.n	8003354 <CopyDataInit>
  ldr r2, =_sbss
 8003366:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <LoopForever+0x12>)
  b LoopFillZerobss
 8003368:	e002      	b.n	8003370 <LoopFillZerobss>

0800336a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  str  r3, [r2]
 800336c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800336e:	3204      	adds	r2, #4

08003370 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <LoopForever+0x16>)
  cmp r2, r3
 8003372:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003374:	d3f9      	bcc.n	800336a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003376:	f7ff fda7 	bl	8002ec8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800337a:	f004 fbeb 	bl	8007b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800337e:	f7fe ff27 	bl	80021d0 <main>

08003382 <LoopForever>:

LoopForever:
    b LoopForever
 8003382:	e7fe      	b.n	8003382 <LoopForever>
  ldr   r0, =_estack
 8003384:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8003388:	0800871c 	.word	0x0800871c
  ldr r0, =_sdata
 800338c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003390:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003394:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003398:	20000868 	.word	0x20000868

0800339c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800339c:	e7fe      	b.n	800339c <ADC1_IRQHandler>
	...

080033a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_Init+0x3c>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_Init+0x3c>)
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	0049      	lsls	r1, r1, #1
 80033b6:	430a      	orrs	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033ba:	2000      	movs	r0, #0
 80033bc:	f000 f810 	bl	80033e0 <HAL_InitTick>
 80033c0:	1e03      	subs	r3, r0, #0
 80033c2:	d003      	beq.n	80033cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80033c4:	1dfb      	adds	r3, r7, #7
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e001      	b.n	80033d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80033cc:	f7ff faae 	bl	800292c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	781b      	ldrb	r3, [r3, #0]
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b002      	add	sp, #8
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40022000 	.word	0x40022000

080033e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033e8:	230f      	movs	r3, #15
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_InitTick+0x88>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d02b      	beq.n	8003450 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80033f8:	4b1c      	ldr	r3, [pc, #112]	; (800346c <HAL_InitTick+0x8c>)
 80033fa:	681c      	ldr	r4, [r3, #0]
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_InitTick+0x88>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0019      	movs	r1, r3
 8003402:	23fa      	movs	r3, #250	; 0xfa
 8003404:	0098      	lsls	r0, r3, #2
 8003406:	f7fc fe7d 	bl	8000104 <__udivsi3>
 800340a:	0003      	movs	r3, r0
 800340c:	0019      	movs	r1, r3
 800340e:	0020      	movs	r0, r4
 8003410:	f7fc fe78 	bl	8000104 <__udivsi3>
 8003414:	0003      	movs	r3, r0
 8003416:	0018      	movs	r0, r3
 8003418:	f000 fdcb 	bl	8003fb2 <HAL_SYSTICK_Config>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d112      	bne.n	8003446 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d80a      	bhi.n	800343c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	2301      	movs	r3, #1
 800342a:	425b      	negs	r3, r3
 800342c:	2200      	movs	r2, #0
 800342e:	0018      	movs	r0, r3
 8003430:	f000 fd9a 	bl	8003f68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_InitTick+0x90>)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e00d      	b.n	8003458 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800343c:	230f      	movs	r3, #15
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2201      	movs	r2, #1
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e008      	b.n	8003458 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003446:	230f      	movs	r3, #15
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e003      	b.n	8003458 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003450:	230f      	movs	r3, #15
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003458:	230f      	movs	r3, #15
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	781b      	ldrb	r3, [r3, #0]
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b005      	add	sp, #20
 8003464:	bd90      	pop	{r4, r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	20000008 	.word	0x20000008
 800346c:	20000000 	.word	0x20000000
 8003470:	20000004 	.word	0x20000004

08003474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <HAL_IncTick+0x18>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <HAL_IncTick+0x1c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	18d2      	adds	r2, r2, r3
 8003482:	4b02      	ldr	r3, [pc, #8]	; (800348c <HAL_IncTick+0x18>)
 8003484:	601a      	str	r2, [r3, #0]
}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000860 	.word	0x20000860
 8003490:	20000008 	.word	0x20000008

08003494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  return uwTick;
 8003498:	4b02      	ldr	r3, [pc, #8]	; (80034a4 <HAL_GetTick+0x10>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	20000860 	.word	0x20000860

080034a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b0:	f7ff fff0 	bl	8003494 <HAL_GetTick>
 80034b4:	0003      	movs	r3, r0
 80034b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3301      	adds	r3, #1
 80034c0:	d004      	beq.n	80034cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_Delay+0x40>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	18d3      	adds	r3, r2, r3
 80034ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	f7ff ffe1 	bl	8003494 <HAL_GetTick>
 80034d2:	0002      	movs	r2, r0
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d8f7      	bhi.n	80034ce <HAL_Delay+0x26>
  {
  }
}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b004      	add	sp, #16
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	20000008 	.word	0x20000008

080034ec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a05      	ldr	r2, [pc, #20]	; (8003510 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80034fc:	401a      	ands	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	fe3fffff 	.word	0xfe3fffff

08003514 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	23e0      	movs	r3, #224	; 0xe0
 8003522:	045b      	lsls	r3, r3, #17
 8003524:	4013      	ands	r3, r2
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b002      	add	sp, #8
 800352c:	bd80      	pop	{r7, pc}

0800352e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	2104      	movs	r1, #4
 8003542:	400a      	ands	r2, r1
 8003544:	2107      	movs	r1, #7
 8003546:	4091      	lsls	r1, r2
 8003548:	000a      	movs	r2, r1
 800354a:	43d2      	mvns	r2, r2
 800354c:	401a      	ands	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2104      	movs	r1, #4
 8003552:	400b      	ands	r3, r1
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4099      	lsls	r1, r3
 8003558:	000b      	movs	r3, r1
 800355a:	431a      	orrs	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}

08003568 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	211f      	movs	r1, #31
 800357c:	400a      	ands	r2, r1
 800357e:	210f      	movs	r1, #15
 8003580:	4091      	lsls	r1, r2
 8003582:	000a      	movs	r2, r1
 8003584:	43d2      	mvns	r2, r2
 8003586:	401a      	ands	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0e9b      	lsrs	r3, r3, #26
 800358c:	210f      	movs	r1, #15
 800358e:	4019      	ands	r1, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	201f      	movs	r0, #31
 8003594:	4003      	ands	r3, r0
 8003596:	4099      	lsls	r1, r3
 8003598:	000b      	movs	r3, r1
 800359a:	431a      	orrs	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b004      	add	sp, #16
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	035b      	lsls	r3, r3, #13
 80035ba:	0b5b      	lsrs	r3, r3, #13
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b002      	add	sp, #8
 80035c8:	bd80      	pop	{r7, pc}

080035ca <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	0352      	lsls	r2, r2, #13
 80035dc:	0b52      	lsrs	r2, r2, #13
 80035de:	43d2      	mvns	r2, r2
 80035e0:	401a      	ands	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	0212      	lsls	r2, r2, #8
 8003604:	43d2      	mvns	r2, r2
 8003606:	401a      	ands	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	400b      	ands	r3, r1
 8003610:	4904      	ldr	r1, [pc, #16]	; (8003624 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003612:	400b      	ands	r3, r1
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b004      	add	sp, #16
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	07ffff00 	.word	0x07ffff00

08003628 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a05      	ldr	r2, [pc, #20]	; (800364c <LL_ADC_EnableInternalRegulator+0x24>)
 8003636:	4013      	ands	r3, r2
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	0552      	lsls	r2, r2, #21
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	6fffffe8 	.word	0x6fffffe8

08003650 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	055b      	lsls	r3, r3, #21
 8003660:	401a      	ands	r2, r3
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	055b      	lsls	r3, r3, #21
 8003666:	429a      	cmp	r2, r3
 8003668:	d101      	bne.n	800366e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800366e:	2300      	movs	r3, #0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2201      	movs	r2, #1
 8003686:	4013      	ands	r3, r2
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <LL_ADC_IsEnabled+0x18>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <LL_ADC_IsEnabled+0x1a>
 8003690:	2300      	movs	r3, #0
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}

0800369a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2204      	movs	r2, #4
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d101      	bne.n	80036b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c4:	231f      	movs	r3, #31
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e1aa      	b.n	8003a38 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff f941 	bl	8002974 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2254      	movs	r2, #84	; 0x54
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	0018      	movs	r0, r3
 8003706:	f7ff ffa3 	bl	8003650 <LL_ADC_IsInternalRegulatorEnabled>
 800370a:	1e03      	subs	r3, r0, #0
 800370c:	d114      	bne.n	8003738 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	0018      	movs	r0, r3
 8003714:	f7ff ff88 	bl	8003628 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003718:	4bc9      	ldr	r3, [pc, #804]	; (8003a40 <HAL_ADC_Init+0x384>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	49c9      	ldr	r1, [pc, #804]	; (8003a44 <HAL_ADC_Init+0x388>)
 800371e:	0018      	movs	r0, r3
 8003720:	f7fc fcf0 	bl	8000104 <__udivsi3>
 8003724:	0003      	movs	r3, r0
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800372a:	e002      	b.n	8003732 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	3b01      	subs	r3, #1
 8003730:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f9      	bne.n	800372c <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0018      	movs	r0, r3
 800373e:	f7ff ff87 	bl	8003650 <LL_ADC_IsInternalRegulatorEnabled>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d10f      	bne.n	8003766 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	2210      	movs	r2, #16
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	2201      	movs	r2, #1
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 800375e:	231f      	movs	r3, #31
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	0018      	movs	r0, r3
 800376c:	f7ff ff95 	bl	800369a <LL_ADC_REG_IsConversionOngoing>
 8003770:	0003      	movs	r3, r0
 8003772:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	2210      	movs	r2, #16
 800377a:	4013      	ands	r3, r2
 800377c:	d000      	beq.n	8003780 <HAL_ADC_Init+0xc4>
 800377e:	e14e      	b.n	8003a1e <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d000      	beq.n	8003788 <HAL_ADC_Init+0xcc>
 8003786:	e14a      	b.n	8003a1e <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	4aae      	ldr	r2, [pc, #696]	; (8003a48 <HAL_ADC_Init+0x38c>)
 800378e:	4013      	ands	r3, r2
 8003790:	2202      	movs	r2, #2
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0018      	movs	r0, r3
 800379e:	f7ff ff6b 	bl	8003678 <LL_ADC_IsEnabled>
 80037a2:	1e03      	subs	r3, r0, #0
 80037a4:	d137      	bne.n	8003816 <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2218      	movs	r2, #24
 80037ae:	4393      	bics	r3, r2
 80037b0:	0019      	movs	r1, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	0899      	lsrs	r1, r3, #2
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0f9b      	lsrs	r3, r3, #30
 80037ce:	079a      	lsls	r2, r3, #30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	23c0      	movs	r3, #192	; 0xc0
 80037de:	061b      	lsls	r3, r3, #24
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d018      	beq.n	8003816 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	05db      	lsls	r3, r3, #23
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d012      	beq.n	8003816 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	061b      	lsls	r3, r3, #24
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d00c      	beq.n	8003816 <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80037fc:	4b93      	ldr	r3, [pc, #588]	; (8003a4c <HAL_ADC_Init+0x390>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a93      	ldr	r2, [pc, #588]	; (8003a50 <HAL_ADC_Init+0x394>)
 8003802:	4013      	ands	r3, r2
 8003804:	0019      	movs	r1, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	23f0      	movs	r3, #240	; 0xf0
 800380c:	039b      	lsls	r3, r3, #14
 800380e:	401a      	ands	r2, r3
 8003810:	4b8e      	ldr	r3, [pc, #568]	; (8003a4c <HAL_ADC_Init+0x390>)
 8003812:	430a      	orrs	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7e1b      	ldrb	r3, [r3, #24]
 800381a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	7e5b      	ldrb	r3, [r3, #25]
 8003820:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003822:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	7e9b      	ldrb	r3, [r3, #26]
 8003828:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800382a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_ADC_Init+0x17e>
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	015b      	lsls	r3, r3, #5
 8003838:	e000      	b.n	800383c <HAL_ADC_Init+0x180>
 800383a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800383c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003842:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	da04      	bge.n	8003856 <HAL_ADC_Init+0x19a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	e001      	b.n	800385a <HAL_ADC_Init+0x19e>
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 800385a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	212c      	movs	r1, #44	; 0x2c
 8003860:	5c5b      	ldrb	r3, [r3, r1]
 8003862:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8003864:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	5c9b      	ldrb	r3, [r3, r2]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d115      	bne.n	80038a2 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7e9b      	ldrb	r3, [r3, #26]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d105      	bne.n	800388a <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2280      	movs	r2, #128	; 0x80
 8003882:	0252      	lsls	r2, r2, #9
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	e00b      	b.n	80038a2 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	2220      	movs	r2, #32
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	2201      	movs	r2, #1
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ae:	23e0      	movs	r3, #224	; 0xe0
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80038b8:	4313      	orrs	r3, r2
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80038c8:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 80038ce:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 80038d4:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	223c      	movs	r2, #60	; 0x3c
 80038e0:	5c9b      	ldrb	r3, [r3, r2]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d103      	bne.n	80038ee <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2201      	movs	r2, #1
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a57      	ldr	r2, [pc, #348]	; (8003a54 <HAL_ADC_Init+0x398>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	430a      	orrs	r2, r1
 8003902:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	4a53      	ldr	r2, [pc, #332]	; (8003a58 <HAL_ADC_Init+0x39c>)
 800390c:	4013      	ands	r3, r2
 800390e:	0019      	movs	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	430a      	orrs	r2, r1
 8003918:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	001a      	movs	r2, r3
 8003924:	2100      	movs	r1, #0
 8003926:	f7ff fe02 	bl	800352e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	494a      	ldr	r1, [pc, #296]	; (8003a5c <HAL_ADC_Init+0x3a0>)
 8003934:	001a      	movs	r2, r3
 8003936:	f7ff fdfa 	bl	800352e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2110      	movs	r1, #16
 800394e:	4249      	negs	r1, r1
 8003950:	430a      	orrs	r2, r1
 8003952:	629a      	str	r2, [r3, #40]	; 0x28
 8003954:	e03c      	b.n	80039d0 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	039b      	lsls	r3, r3, #14
 800395e:	429a      	cmp	r2, r3
 8003960:	d136      	bne.n	80039d0 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	e00c      	b.n	8003982 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	40da      	lsrs	r2, r3
 8003972:	0013      	movs	r3, r2
 8003974:	220f      	movs	r2, #15
 8003976:	4013      	ands	r3, r2
 8003978:	2b0f      	cmp	r3, #15
 800397a:	d006      	beq.n	800398a <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	3301      	adds	r3, #1
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b07      	cmp	r3, #7
 8003986:	d9ef      	bls.n	8003968 <HAL_ADC_Init+0x2ac>
 8003988:	e000      	b.n	800398c <HAL_ADC_Init+0x2d0>
        {
          break;
 800398a:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d109      	bne.n	80039a6 <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2110      	movs	r1, #16
 800399e:	4249      	negs	r1, r1
 80039a0:	430a      	orrs	r2, r1
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28
 80039a4:	e014      	b.n	80039d0 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	4a2b      	ldr	r2, [pc, #172]	; (8003a60 <HAL_ADC_Init+0x3a4>)
 80039b2:	4694      	mov	ip, r2
 80039b4:	4463      	add	r3, ip
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	221c      	movs	r2, #28
 80039ba:	4013      	ands	r3, r2
 80039bc:	2210      	movs	r2, #16
 80039be:	4252      	negs	r2, r2
 80039c0:	409a      	lsls	r2, r3
 80039c2:	0011      	movs	r1, r2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <HAL_ADC_Init+0x3a8>)
 80039d8:	4013      	ands	r3, r2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d10b      	bne.n	80039f8 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	2203      	movs	r2, #3
 80039ec:	4393      	bics	r3, r2
 80039ee:	2201      	movs	r2, #1
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80039f6:	e01c      	b.n	8003a32 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	2212      	movs	r2, #18
 80039fe:	4393      	bics	r3, r2
 8003a00:	2210      	movs	r2, #16
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8003a14:	231f      	movs	r3, #31
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003a1c:	e009      	b.n	8003a32 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	2210      	movs	r2, #16
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8003a2a:	231f      	movs	r3, #31
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a32:	231f      	movs	r3, #31
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	781b      	ldrb	r3, [r3, #0]
}
 8003a38:	0018      	movs	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b008      	add	sp, #32
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20000000 	.word	0x20000000
 8003a44:	00030d40 	.word	0x00030d40
 8003a48:	fffffefd 	.word	0xfffffefd
 8003a4c:	40012708 	.word	0x40012708
 8003a50:	ffc3ffff 	.word	0xffc3ffff
 8003a54:	fffe0219 	.word	0xfffe0219
 8003a58:	dffffc02 	.word	0xdffffc02
 8003a5c:	07ffff04 	.word	0x07ffff04
 8003a60:	3fffffff 	.word	0x3fffffff
 8003a64:	833fffe7 	.word	0x833fffe7

08003a68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a72:	2317      	movs	r3, #23
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2254      	movs	r2, #84	; 0x54
 8003a82:	5c9b      	ldrb	r3, [r3, r2]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x24>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e1bc      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x39e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2254      	movs	r2, #84	; 0x54
 8003a90:	2101      	movs	r1, #1
 8003a92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7ff fdfe 	bl	800369a <LL_ADC_REG_IsConversionOngoing>
 8003a9e:	1e03      	subs	r3, r0, #0
 8003aa0:	d000      	beq.n	8003aa4 <HAL_ADC_ConfigChannel+0x3c>
 8003aa2:	e19f      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d100      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x46>
 8003aac:	e13e      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d004      	beq.n	8003ac4 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003abe:	4abf      	ldr	r2, [pc, #764]	; (8003dbc <HAL_ADC_ConfigChannel+0x354>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0019      	movs	r1, r3
 8003ace:	0010      	movs	r0, r2
 8003ad0:	f7ff fd6a 	bl	80035a8 <LL_ADC_REG_SetSequencerChAdd>
 8003ad4:	e0c9      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	211f      	movs	r1, #31
 8003ae0:	400b      	ands	r3, r1
 8003ae2:	210f      	movs	r1, #15
 8003ae4:	4099      	lsls	r1, r3
 8003ae6:	000b      	movs	r3, r1
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	4013      	ands	r3, r2
 8003aec:	0019      	movs	r1, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	035b      	lsls	r3, r3, #13
 8003af4:	0b5b      	lsrs	r3, r3, #13
 8003af6:	d105      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x9c>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0e9b      	lsrs	r3, r3, #26
 8003afe:	221f      	movs	r2, #31
 8003b00:	4013      	ands	r3, r2
 8003b02:	e098      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d000      	beq.n	8003b10 <HAL_ADC_ConfigChannel+0xa8>
 8003b0e:	e091      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x1cc>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2202      	movs	r2, #2
 8003b16:	4013      	ands	r3, r2
 8003b18:	d000      	beq.n	8003b1c <HAL_ADC_ConfigChannel+0xb4>
 8003b1a:	e089      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x1c8>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2204      	movs	r2, #4
 8003b22:	4013      	ands	r3, r2
 8003b24:	d000      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0xc0>
 8003b26:	e081      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x1c4>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d000      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0xcc>
 8003b32:	e079      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x1c0>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d000      	beq.n	8003b40 <HAL_ADC_ConfigChannel+0xd8>
 8003b3e:	e071      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x1bc>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2220      	movs	r2, #32
 8003b46:	4013      	ands	r3, r2
 8003b48:	d000      	beq.n	8003b4c <HAL_ADC_ConfigChannel+0xe4>
 8003b4a:	e069      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x1b8>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2240      	movs	r2, #64	; 0x40
 8003b52:	4013      	ands	r3, r2
 8003b54:	d000      	beq.n	8003b58 <HAL_ADC_ConfigChannel+0xf0>
 8003b56:	e061      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x1b4>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d000      	beq.n	8003b64 <HAL_ADC_ConfigChannel+0xfc>
 8003b62:	e059      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x1b0>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d151      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x1ac>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d149      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x1a8>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4013      	ands	r3, r2
 8003b86:	d141      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x1a4>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	4013      	ands	r3, r2
 8003b92:	d139      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x1a0>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	015b      	lsls	r3, r3, #5
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d131      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x19c>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	019b      	lsls	r3, r3, #6
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d129      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x198>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	01db      	lsls	r3, r3, #7
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d121      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x194>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d119      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x190>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	025b      	lsls	r3, r3, #9
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d111      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x18c>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	029b      	lsls	r3, r3, #10
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d109      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x188>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	02db      	lsls	r3, r3, #11
 8003be4:	4013      	ands	r3, r2
 8003be6:	d001      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x184>
 8003be8:	2312      	movs	r3, #18
 8003bea:	e024      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003bec:	2300      	movs	r3, #0
 8003bee:	e022      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003bf0:	2311      	movs	r3, #17
 8003bf2:	e020      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	e01e      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003bf8:	230f      	movs	r3, #15
 8003bfa:	e01c      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003bfc:	230e      	movs	r3, #14
 8003bfe:	e01a      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c00:	230d      	movs	r3, #13
 8003c02:	e018      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c04:	230c      	movs	r3, #12
 8003c06:	e016      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c08:	230b      	movs	r3, #11
 8003c0a:	e014      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c0c:	230a      	movs	r3, #10
 8003c0e:	e012      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c10:	2309      	movs	r3, #9
 8003c12:	e010      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c14:	2308      	movs	r3, #8
 8003c16:	e00e      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c18:	2307      	movs	r3, #7
 8003c1a:	e00c      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c1c:	2306      	movs	r3, #6
 8003c1e:	e00a      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c20:	2305      	movs	r3, #5
 8003c22:	e008      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c24:	2304      	movs	r3, #4
 8003c26:	e006      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e004      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e002      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1ce>
 8003c34:	2300      	movs	r3, #0
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	6852      	ldr	r2, [r2, #4]
 8003c3a:	201f      	movs	r0, #31
 8003c3c:	4002      	ands	r2, r0
 8003c3e:	4093      	lsls	r3, r2
 8003c40:	000a      	movs	r2, r1
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d808      	bhi.n	8003c6a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	001a      	movs	r2, r3
 8003c66:	f7ff fc7f 	bl	8003568 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6819      	ldr	r1, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	001a      	movs	r2, r3
 8003c78:	f7ff fcba 	bl	80035f0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	db00      	blt.n	8003c86 <HAL_ADC_ConfigChannel+0x21e>
 8003c84:	e0b8      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c86:	4b4e      	ldr	r3, [pc, #312]	; (8003dc0 <HAL_ADC_ConfigChannel+0x358>)
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7ff fc43 	bl	8003514 <LL_ADC_GetCommonPathInternalCh>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a4b      	ldr	r2, [pc, #300]	; (8003dc4 <HAL_ADC_ConfigChannel+0x35c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d11d      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x270>
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d118      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2280      	movs	r2, #128	; 0x80
 8003caa:	0412      	lsls	r2, r2, #16
 8003cac:	4313      	orrs	r3, r2
 8003cae:	4a44      	ldr	r2, [pc, #272]	; (8003dc0 <HAL_ADC_ConfigChannel+0x358>)
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	0010      	movs	r0, r2
 8003cb4:	f7ff fc1a 	bl	80034ec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003cb8:	4b43      	ldr	r3, [pc, #268]	; (8003dc8 <HAL_ADC_ConfigChannel+0x360>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4943      	ldr	r1, [pc, #268]	; (8003dcc <HAL_ADC_ConfigChannel+0x364>)
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f7fc fa20 	bl	8000104 <__udivsi3>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8003cc8:	e002      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f9      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cd6:	e08f      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a3c      	ldr	r2, [pc, #240]	; (8003dd0 <HAL_ADC_ConfigChannel+0x368>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10e      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x298>
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	045b      	lsls	r3, r3, #17
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d109      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	0452      	lsls	r2, r2, #17
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	4a32      	ldr	r2, [pc, #200]	; (8003dc0 <HAL_ADC_ConfigChannel+0x358>)
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	0010      	movs	r0, r2
 8003cfa:	f7ff fbf7 	bl	80034ec <LL_ADC_SetCommonPathInternalCh>
 8003cfe:	e07b      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <HAL_ADC_ConfigChannel+0x36c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d000      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0x2a4>
 8003d0a:	e075      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	03db      	lsls	r3, r3, #15
 8003d12:	4013      	ands	r3, r2
 8003d14:	d000      	beq.n	8003d18 <HAL_ADC_ConfigChannel+0x2b0>
 8003d16:	e06f      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2280      	movs	r2, #128	; 0x80
 8003d1c:	03d2      	lsls	r2, r2, #15
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	4a27      	ldr	r2, [pc, #156]	; (8003dc0 <HAL_ADC_ConfigChannel+0x358>)
 8003d22:	0019      	movs	r1, r3
 8003d24:	0010      	movs	r0, r2
 8003d26:	f7ff fbe1 	bl	80034ec <LL_ADC_SetCommonPathInternalCh>
 8003d2a:	e065      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	061b      	lsls	r3, r3, #24
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d004      	beq.n	8003d42 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003d3c:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <HAL_ADC_ConfigChannel+0x354>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d107      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	0010      	movs	r0, r2
 8003d4e:	f7ff fc3c 	bl	80035ca <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da4e      	bge.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d5a:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_ADC_ConfigChannel+0x358>)
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7ff fbd9 	bl	8003514 <LL_ADC_GetCommonPathInternalCh>
 8003d62:	0003      	movs	r3, r0
 8003d64:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <HAL_ADC_ConfigChannel+0x35c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_ADC_ConfigChannel+0x370>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <HAL_ADC_ConfigChannel+0x358>)
 8003d78:	0019      	movs	r1, r3
 8003d7a:	0010      	movs	r0, r2
 8003d7c:	f7ff fbb6 	bl	80034ec <LL_ADC_SetCommonPathInternalCh>
 8003d80:	e03a      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <HAL_ADC_ConfigChannel+0x368>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <HAL_ADC_ConfigChannel+0x374>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	4a0b      	ldr	r2, [pc, #44]	; (8003dc0 <HAL_ADC_ConfigChannel+0x358>)
 8003d94:	0019      	movs	r1, r3
 8003d96:	0010      	movs	r0, r2
 8003d98:	f7ff fba8 	bl	80034ec <LL_ADC_SetCommonPathInternalCh>
 8003d9c:	e02c      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <HAL_ADC_ConfigChannel+0x36c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d127      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <HAL_ADC_ConfigChannel+0x378>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <HAL_ADC_ConfigChannel+0x358>)
 8003db0:	0019      	movs	r1, r3
 8003db2:	0010      	movs	r0, r2
 8003db4:	f7ff fb9a 	bl	80034ec <LL_ADC_SetCommonPathInternalCh>
 8003db8:	e01e      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x390>
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	80000004 	.word	0x80000004
 8003dc0:	40012708 	.word	0x40012708
 8003dc4:	b0001000 	.word	0xb0001000
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	00030d40 	.word	0x00030d40
 8003dd0:	b8004000 	.word	0xb8004000
 8003dd4:	b4002000 	.word	0xb4002000
 8003dd8:	ff7fffff 	.word	0xff7fffff
 8003ddc:	feffffff 	.word	0xfeffffff
 8003de0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	2220      	movs	r2, #32
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8003df0:	2317      	movs	r3, #23
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2254      	movs	r2, #84	; 0x54
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003e00:	2317      	movs	r3, #23
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	781b      	ldrb	r3, [r3, #0]
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b006      	add	sp, #24
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)

08003e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	0002      	movs	r2, r0
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b7f      	cmp	r3, #127	; 0x7f
 8003e22:	d809      	bhi.n	8003e38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e24:	1dfb      	adds	r3, r7, #7
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	001a      	movs	r2, r3
 8003e2a:	231f      	movs	r3, #31
 8003e2c:	401a      	ands	r2, r3
 8003e2e:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <__NVIC_EnableIRQ+0x30>)
 8003e30:	2101      	movs	r1, #1
 8003e32:	4091      	lsls	r1, r2
 8003e34:	000a      	movs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
  }
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	e000e100 	.word	0xe000e100

08003e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	1dfb      	adds	r3, r7, #7
 8003e50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e52:	1dfb      	adds	r3, r7, #7
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b7f      	cmp	r3, #127	; 0x7f
 8003e58:	d828      	bhi.n	8003eac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e5a:	4a2f      	ldr	r2, [pc, #188]	; (8003f18 <__NVIC_SetPriority+0xd4>)
 8003e5c:	1dfb      	adds	r3, r7, #7
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	33c0      	adds	r3, #192	; 0xc0
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	589b      	ldr	r3, [r3, r2]
 8003e6a:	1dfa      	adds	r2, r7, #7
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	0011      	movs	r1, r2
 8003e70:	2203      	movs	r2, #3
 8003e72:	400a      	ands	r2, r1
 8003e74:	00d2      	lsls	r2, r2, #3
 8003e76:	21ff      	movs	r1, #255	; 0xff
 8003e78:	4091      	lsls	r1, r2
 8003e7a:	000a      	movs	r2, r1
 8003e7c:	43d2      	mvns	r2, r2
 8003e7e:	401a      	ands	r2, r3
 8003e80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	019b      	lsls	r3, r3, #6
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	401a      	ands	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	0018      	movs	r0, r3
 8003e90:	2303      	movs	r3, #3
 8003e92:	4003      	ands	r3, r0
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e98:	481f      	ldr	r0, [pc, #124]	; (8003f18 <__NVIC_SetPriority+0xd4>)
 8003e9a:	1dfb      	adds	r3, r7, #7
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	33c0      	adds	r3, #192	; 0xc0
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003eaa:	e031      	b.n	8003f10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eac:	4a1b      	ldr	r2, [pc, #108]	; (8003f1c <__NVIC_SetPriority+0xd8>)
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	230f      	movs	r3, #15
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	3b08      	subs	r3, #8
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	3306      	adds	r3, #6
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	18d3      	adds	r3, r2, r3
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1dfa      	adds	r2, r7, #7
 8003ec8:	7812      	ldrb	r2, [r2, #0]
 8003eca:	0011      	movs	r1, r2
 8003ecc:	2203      	movs	r2, #3
 8003ece:	400a      	ands	r2, r1
 8003ed0:	00d2      	lsls	r2, r2, #3
 8003ed2:	21ff      	movs	r1, #255	; 0xff
 8003ed4:	4091      	lsls	r1, r2
 8003ed6:	000a      	movs	r2, r1
 8003ed8:	43d2      	mvns	r2, r2
 8003eda:	401a      	ands	r2, r3
 8003edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	019b      	lsls	r3, r3, #6
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	401a      	ands	r2, r3
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	0018      	movs	r0, r3
 8003eec:	2303      	movs	r3, #3
 8003eee:	4003      	ands	r3, r0
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ef4:	4809      	ldr	r0, [pc, #36]	; (8003f1c <__NVIC_SetPriority+0xd8>)
 8003ef6:	1dfb      	adds	r3, r7, #7
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	001c      	movs	r4, r3
 8003efc:	230f      	movs	r3, #15
 8003efe:	4023      	ands	r3, r4
 8003f00:	3b08      	subs	r3, #8
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	430a      	orrs	r2, r1
 8003f06:	3306      	adds	r3, #6
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	18c3      	adds	r3, r0, r3
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	601a      	str	r2, [r3, #0]
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b003      	add	sp, #12
 8003f16:	bd90      	pop	{r4, r7, pc}
 8003f18:	e000e100 	.word	0xe000e100
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <SysTick_Config+0x40>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f32:	2301      	movs	r3, #1
 8003f34:	e010      	b.n	8003f58 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <SysTick_Config+0x44>)
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	3a01      	subs	r2, #1
 8003f3c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f3e:	2301      	movs	r3, #1
 8003f40:	425b      	negs	r3, r3
 8003f42:	2103      	movs	r1, #3
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff ff7d 	bl	8003e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <SysTick_Config+0x44>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <SysTick_Config+0x44>)
 8003f52:	2207      	movs	r2, #7
 8003f54:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	00ffffff 	.word	0x00ffffff
 8003f64:	e000e010 	.word	0xe000e010

08003f68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	210f      	movs	r1, #15
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	1c02      	adds	r2, r0, #0
 8003f78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	b25b      	sxtb	r3, r3
 8003f82:	0011      	movs	r1, r2
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff ff5d 	bl	8003e44 <__NVIC_SetPriority>
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b004      	add	sp, #16
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	0002      	movs	r2, r0
 8003f9a:	1dfb      	adds	r3, r7, #7
 8003f9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f9e:	1dfb      	adds	r3, r7, #7
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7ff ff33 	bl	8003e10 <__NVIC_EnableIRQ>
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b002      	add	sp, #8
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7ff ffaf 	bl	8003f20 <SysTick_Config>
 8003fc2:	0003      	movs	r3, r0
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e077      	b.n	80040ce <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a3d      	ldr	r2, [pc, #244]	; (80040d8 <HAL_DMA_Init+0x10c>)
 8003fe4:	4694      	mov	ip, r2
 8003fe6:	4463      	add	r3, ip
 8003fe8:	2114      	movs	r1, #20
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7fc f88a 	bl	8000104 <__udivsi3>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	009a      	lsls	r2, r3, #2
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2225      	movs	r2, #37	; 0x25
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4934      	ldr	r1, [pc, #208]	; (80040dc <HAL_DMA_Init+0x110>)
 800400c:	400a      	ands	r2, r1
 800400e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6819      	ldr	r1, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	0018      	movs	r0, r3
 800404a:	f000 f9c3 	bl	80043d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	01db      	lsls	r3, r3, #7
 8004056:	429a      	cmp	r2, r3
 8004058:	d102      	bne.n	8004060 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	21ff      	movs	r1, #255	; 0xff
 800406a:	400a      	ands	r2, r1
 800406c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004076:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d011      	beq.n	80040a4 <HAL_DMA_Init+0xd8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b04      	cmp	r3, #4
 8004086:	d80d      	bhi.n	80040a4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	0018      	movs	r0, r3
 800408c:	f000 f9ce 	bl	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	e008      	b.n	80040b6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2225      	movs	r2, #37	; 0x25
 80040c0:	2101      	movs	r1, #1
 80040c2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2224      	movs	r2, #36	; 0x24
 80040c8:	2100      	movs	r1, #0
 80040ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b002      	add	sp, #8
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	bffdfff8 	.word	0xbffdfff8
 80040dc:	ffff800f 	.word	0xffff800f

080040e0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2317      	movs	r3, #23
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2224      	movs	r2, #36	; 0x24
 80040fa:	5c9b      	ldrb	r3, [r3, r2]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_DMA_Start_IT+0x24>
 8004100:	2302      	movs	r3, #2
 8004102:	e070      	b.n	80041e6 <HAL_DMA_Start_IT+0x106>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2224      	movs	r2, #36	; 0x24
 8004108:	2101      	movs	r1, #1
 800410a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2225      	movs	r2, #37	; 0x25
 8004110:	5c9b      	ldrb	r3, [r3, r2]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d157      	bne.n	80041c8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2225      	movs	r2, #37	; 0x25
 800411c:	2102      	movs	r1, #2
 800411e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2101      	movs	r1, #1
 8004132:	438a      	bics	r2, r1
 8004134:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f909 	bl	8004354 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	210e      	movs	r1, #14
 8004156:	430a      	orrs	r2, r1
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e00f      	b.n	800417c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2104      	movs	r1, #4
 8004168:	438a      	bics	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	210a      	movs	r1, #10
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	025b      	lsls	r3, r3, #9
 8004186:	4013      	ands	r3, r2
 8004188:	d008      	beq.n	800419c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004194:	2180      	movs	r1, #128	; 0x80
 8004196:	0049      	lsls	r1, r1, #1
 8004198:	430a      	orrs	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ae:	2180      	movs	r1, #128	; 0x80
 80041b0:	0049      	lsls	r1, r1, #1
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2101      	movs	r1, #1
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e007      	b.n	80041d8 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2224      	movs	r2, #36	; 0x24
 80041cc:	2100      	movs	r1, #0
 80041ce:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80041d0:	2317      	movs	r3, #23
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	2202      	movs	r2, #2
 80041d6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	2100      	movs	r1, #0
 80041de:	5499      	strb	r1, [r3, r2]

  return status;
 80041e0:	2317      	movs	r3, #23
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	781b      	ldrb	r3, [r3, #0]
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b006      	add	sp, #24
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80041f8:	4b55      	ldr	r3, [pc, #340]	; (8004350 <HAL_DMA_IRQHandler+0x160>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	221c      	movs	r2, #28
 800420c:	4013      	ands	r3, r2
 800420e:	2204      	movs	r2, #4
 8004210:	409a      	lsls	r2, r3
 8004212:	0013      	movs	r3, r2
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4013      	ands	r3, r2
 8004218:	d027      	beq.n	800426a <HAL_DMA_IRQHandler+0x7a>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2204      	movs	r2, #4
 800421e:	4013      	ands	r3, r2
 8004220:	d023      	beq.n	800426a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2220      	movs	r2, #32
 800422a:	4013      	ands	r3, r2
 800422c:	d107      	bne.n	800423e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2104      	movs	r1, #4
 800423a:	438a      	bics	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800423e:	4b44      	ldr	r3, [pc, #272]	; (8004350 <HAL_DMA_IRQHandler+0x160>)
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	221c      	movs	r2, #28
 8004248:	4013      	ands	r3, r2
 800424a:	2204      	movs	r2, #4
 800424c:	409a      	lsls	r2, r3
 800424e:	4b40      	ldr	r3, [pc, #256]	; (8004350 <HAL_DMA_IRQHandler+0x160>)
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	2b00      	cmp	r3, #0
 800425a:	d100      	bne.n	800425e <HAL_DMA_IRQHandler+0x6e>
 800425c:	e073      	b.n	8004346 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	0010      	movs	r0, r2
 8004266:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004268:	e06d      	b.n	8004346 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	221c      	movs	r2, #28
 8004270:	4013      	ands	r3, r2
 8004272:	2202      	movs	r2, #2
 8004274:	409a      	lsls	r2, r3
 8004276:	0013      	movs	r3, r2
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4013      	ands	r3, r2
 800427c:	d02e      	beq.n	80042dc <HAL_DMA_IRQHandler+0xec>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2202      	movs	r2, #2
 8004282:	4013      	ands	r3, r2
 8004284:	d02a      	beq.n	80042dc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2220      	movs	r2, #32
 800428e:	4013      	ands	r3, r2
 8004290:	d10b      	bne.n	80042aa <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	210a      	movs	r1, #10
 800429e:	438a      	bics	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2225      	movs	r2, #37	; 0x25
 80042a6:	2101      	movs	r1, #1
 80042a8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80042aa:	4b29      	ldr	r3, [pc, #164]	; (8004350 <HAL_DMA_IRQHandler+0x160>)
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	221c      	movs	r2, #28
 80042b4:	4013      	ands	r3, r2
 80042b6:	2202      	movs	r2, #2
 80042b8:	409a      	lsls	r2, r3
 80042ba:	4b25      	ldr	r3, [pc, #148]	; (8004350 <HAL_DMA_IRQHandler+0x160>)
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	2100      	movs	r1, #0
 80042c6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d03a      	beq.n	8004346 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	0010      	movs	r0, r2
 80042d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042da:	e034      	b.n	8004346 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	221c      	movs	r2, #28
 80042e2:	4013      	ands	r3, r2
 80042e4:	2208      	movs	r2, #8
 80042e6:	409a      	lsls	r2, r3
 80042e8:	0013      	movs	r3, r2
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4013      	ands	r3, r2
 80042ee:	d02b      	beq.n	8004348 <HAL_DMA_IRQHandler+0x158>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2208      	movs	r2, #8
 80042f4:	4013      	ands	r3, r2
 80042f6:	d027      	beq.n	8004348 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	210e      	movs	r1, #14
 8004304:	438a      	bics	r2, r1
 8004306:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 8004308:	4b11      	ldr	r3, [pc, #68]	; (8004350 <HAL_DMA_IRQHandler+0x160>)
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	221c      	movs	r2, #28
 8004312:	4013      	ands	r3, r2
 8004314:	2201      	movs	r2, #1
 8004316:	409a      	lsls	r2, r3
 8004318:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <HAL_DMA_IRQHandler+0x160>)
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2225      	movs	r2, #37	; 0x25
 8004328:	2101      	movs	r1, #1
 800432a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2224      	movs	r2, #36	; 0x24
 8004330:	2100      	movs	r1, #0
 8004332:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	0010      	movs	r0, r2
 8004344:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	46c0      	nop			; (mov r8, r8)
}
 800434a:	46bd      	mov	sp, r7
 800434c:	b004      	add	sp, #16
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40020000 	.word	0x40020000

08004354 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800436a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800437c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800437e:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <DMA_SetConfig+0x7c>)
 8004380:	6859      	ldr	r1, [r3, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	221c      	movs	r2, #28
 8004388:	4013      	ands	r3, r2
 800438a:	2201      	movs	r2, #1
 800438c:	409a      	lsls	r2, r3
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <DMA_SetConfig+0x7c>)
 8004390:	430a      	orrs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d108      	bne.n	80043b6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043b4:	e007      	b.n	80043c6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	60da      	str	r2, [r3, #12]
}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b004      	add	sp, #16
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	40020000 	.word	0x40020000

080043d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	001a      	movs	r2, r3
 80043e2:	23ff      	movs	r3, #255	; 0xff
 80043e4:	4013      	ands	r3, r2
 80043e6:	3b08      	subs	r3, #8
 80043e8:	2114      	movs	r1, #20
 80043ea:	0018      	movs	r0, r3
 80043ec:	f7fb fe8a 	bl	8000104 <__udivsi3>
 80043f0:	0003      	movs	r3, r0
 80043f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80043fc:	4694      	mov	ip, r2
 80043fe:	4463      	add	r3, ip
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	001a      	movs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a07      	ldr	r2, [pc, #28]	; (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800440c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	221c      	movs	r2, #28
 8004412:	4013      	ands	r3, r2
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b004      	add	sp, #16
 8004422:	bd80      	pop	{r7, pc}
 8004424:	10008200 	.word	0x10008200
 8004428:	40020880 	.word	0x40020880

0800442c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	22ff      	movs	r2, #255	; 0xff
 800443a:	4013      	ands	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a0a      	ldr	r2, [pc, #40]	; (800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004442:	4694      	mov	ip, r2
 8004444:	4463      	add	r3, ip
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	001a      	movs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a07      	ldr	r2, [pc, #28]	; (8004470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004452:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b01      	subs	r3, #1
 8004458:	2203      	movs	r2, #3
 800445a:	4013      	ands	r3, r2
 800445c:	2201      	movs	r2, #1
 800445e:	409a      	lsls	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	b004      	add	sp, #16
 800446a:	bd80      	pop	{r7, pc}
 800446c:	1000823f 	.word	0x1000823f
 8004470:	40020940 	.word	0x40020940

08004474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004482:	e147      	b.n	8004714 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2101      	movs	r1, #1
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4091      	lsls	r1, r2
 800448e:	000a      	movs	r2, r1
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d100      	bne.n	800449c <HAL_GPIO_Init+0x28>
 800449a:	e138      	b.n	800470e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x38>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b12      	cmp	r3, #18
 80044aa:	d123      	bne.n	80044f4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	08da      	lsrs	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3208      	adds	r2, #8
 80044b4:	0092      	lsls	r2, r2, #2
 80044b6:	58d3      	ldr	r3, [r2, r3]
 80044b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2207      	movs	r2, #7
 80044be:	4013      	ands	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	220f      	movs	r2, #15
 80044c4:	409a      	lsls	r2, r3
 80044c6:	0013      	movs	r3, r2
 80044c8:	43da      	mvns	r2, r3
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2107      	movs	r1, #7
 80044d8:	400b      	ands	r3, r1
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	409a      	lsls	r2, r3
 80044de:	0013      	movs	r3, r2
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	08da      	lsrs	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3208      	adds	r2, #8
 80044ee:	0092      	lsls	r2, r2, #2
 80044f0:	6939      	ldr	r1, [r7, #16]
 80044f2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	2203      	movs	r2, #3
 8004500:	409a      	lsls	r2, r3
 8004502:	0013      	movs	r3, r2
 8004504:	43da      	mvns	r2, r3
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2203      	movs	r2, #3
 8004512:	401a      	ands	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	409a      	lsls	r2, r3
 800451a:	0013      	movs	r3, r2
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d00b      	beq.n	8004548 <HAL_GPIO_Init+0xd4>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d007      	beq.n	8004548 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800453c:	2b11      	cmp	r3, #17
 800453e:	d003      	beq.n	8004548 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b12      	cmp	r3, #18
 8004546:	d130      	bne.n	80045aa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	409a      	lsls	r2, r3
 8004556:	0013      	movs	r3, r2
 8004558:	43da      	mvns	r2, r3
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4013      	ands	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	409a      	lsls	r2, r3
 800456a:	0013      	movs	r3, r2
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800457e:	2201      	movs	r2, #1
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	409a      	lsls	r2, r3
 8004584:	0013      	movs	r3, r2
 8004586:	43da      	mvns	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	2201      	movs	r2, #1
 8004596:	401a      	ands	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	409a      	lsls	r2, r3
 800459c:	0013      	movs	r3, r2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	409a      	lsls	r2, r3
 80045b8:	0013      	movs	r3, r2
 80045ba:	43da      	mvns	r2, r3
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4013      	ands	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	409a      	lsls	r2, r3
 80045cc:	0013      	movs	r3, r2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	055b      	lsls	r3, r3, #21
 80045e2:	4013      	ands	r3, r2
 80045e4:	d100      	bne.n	80045e8 <HAL_GPIO_Init+0x174>
 80045e6:	e092      	b.n	800470e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80045e8:	4a50      	ldr	r2, [pc, #320]	; (800472c <HAL_GPIO_Init+0x2b8>)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	089b      	lsrs	r3, r3, #2
 80045ee:	3318      	adds	r3, #24
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	589b      	ldr	r3, [r3, r2]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2203      	movs	r2, #3
 80045fa:	4013      	ands	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	220f      	movs	r2, #15
 8004600:	409a      	lsls	r2, r3
 8004602:	0013      	movs	r3, r2
 8004604:	43da      	mvns	r2, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	23a0      	movs	r3, #160	; 0xa0
 8004610:	05db      	lsls	r3, r3, #23
 8004612:	429a      	cmp	r2, r3
 8004614:	d013      	beq.n	800463e <HAL_GPIO_Init+0x1ca>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a45      	ldr	r2, [pc, #276]	; (8004730 <HAL_GPIO_Init+0x2bc>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00d      	beq.n	800463a <HAL_GPIO_Init+0x1c6>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a44      	ldr	r2, [pc, #272]	; (8004734 <HAL_GPIO_Init+0x2c0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d007      	beq.n	8004636 <HAL_GPIO_Init+0x1c2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a43      	ldr	r2, [pc, #268]	; (8004738 <HAL_GPIO_Init+0x2c4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d101      	bne.n	8004632 <HAL_GPIO_Init+0x1be>
 800462e:	2303      	movs	r3, #3
 8004630:	e006      	b.n	8004640 <HAL_GPIO_Init+0x1cc>
 8004632:	2305      	movs	r3, #5
 8004634:	e004      	b.n	8004640 <HAL_GPIO_Init+0x1cc>
 8004636:	2302      	movs	r3, #2
 8004638:	e002      	b.n	8004640 <HAL_GPIO_Init+0x1cc>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <HAL_GPIO_Init+0x1cc>
 800463e:	2300      	movs	r3, #0
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	2103      	movs	r1, #3
 8004644:	400a      	ands	r2, r1
 8004646:	00d2      	lsls	r2, r2, #3
 8004648:	4093      	lsls	r3, r2
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004650:	4936      	ldr	r1, [pc, #216]	; (800472c <HAL_GPIO_Init+0x2b8>)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	3318      	adds	r3, #24
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800465e:	4a33      	ldr	r2, [pc, #204]	; (800472c <HAL_GPIO_Init+0x2b8>)
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	58d3      	ldr	r3, [r2, r3]
 8004664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	43da      	mvns	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	025b      	lsls	r3, r3, #9
 8004678:	4013      	ands	r3, r2
 800467a:	d003      	beq.n	8004684 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004684:	4929      	ldr	r1, [pc, #164]	; (800472c <HAL_GPIO_Init+0x2b8>)
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800468c:	4a27      	ldr	r2, [pc, #156]	; (800472c <HAL_GPIO_Init+0x2b8>)
 800468e:	2384      	movs	r3, #132	; 0x84
 8004690:	58d3      	ldr	r3, [r2, r3]
 8004692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	43da      	mvns	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	029b      	lsls	r3, r3, #10
 80046a6:	4013      	ands	r3, r2
 80046a8:	d003      	beq.n	80046b2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046b2:	491e      	ldr	r1, [pc, #120]	; (800472c <HAL_GPIO_Init+0x2b8>)
 80046b4:	2284      	movs	r2, #132	; 0x84
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046ba:	4b1c      	ldr	r3, [pc, #112]	; (800472c <HAL_GPIO_Init+0x2b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	43da      	mvns	r2, r3
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	035b      	lsls	r3, r3, #13
 80046d2:	4013      	ands	r3, r2
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_GPIO_Init+0x2b8>)
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_GPIO_Init+0x2b8>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	43da      	mvns	r2, r3
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	039b      	lsls	r3, r3, #14
 80046fc:	4013      	ands	r3, r2
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004708:	4b08      	ldr	r3, [pc, #32]	; (800472c <HAL_GPIO_Init+0x2b8>)
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3301      	adds	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	40da      	lsrs	r2, r3
 800471c:	1e13      	subs	r3, r2, #0
 800471e:	d000      	beq.n	8004722 <HAL_GPIO_Init+0x2ae>
 8004720:	e6b0      	b.n	8004484 <HAL_GPIO_Init+0x10>
  }
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b006      	add	sp, #24
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	40021800 	.word	0x40021800
 8004730:	50000400 	.word	0x50000400
 8004734:	50000800 	.word	0x50000800
 8004738:	50000c00 	.word	0x50000c00

0800473c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	0008      	movs	r0, r1
 8004746:	0011      	movs	r1, r2
 8004748:	1cbb      	adds	r3, r7, #2
 800474a:	1c02      	adds	r2, r0, #0
 800474c:	801a      	strh	r2, [r3, #0]
 800474e:	1c7b      	adds	r3, r7, #1
 8004750:	1c0a      	adds	r2, r1, #0
 8004752:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004754:	1c7b      	adds	r3, r7, #1
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800475c:	1cbb      	adds	r3, r7, #2
 800475e:	881a      	ldrh	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004764:	e003      	b.n	800476e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004766:	1cbb      	adds	r3, r7, #2
 8004768:	881a      	ldrh	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b002      	add	sp, #8
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e082      	b.n	8004890 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2241      	movs	r2, #65	; 0x41
 800478e:	5c9b      	ldrb	r3, [r3, r2]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d107      	bne.n	80047a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2240      	movs	r2, #64	; 0x40
 800479a:	2100      	movs	r1, #0
 800479c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7fe f92d 	bl	8002a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2241      	movs	r2, #65	; 0x41
 80047aa:	2124      	movs	r1, #36	; 0x24
 80047ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2101      	movs	r1, #1
 80047ba:	438a      	bics	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4934      	ldr	r1, [pc, #208]	; (8004898 <HAL_I2C_Init+0x120>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4931      	ldr	r1, [pc, #196]	; (800489c <HAL_I2C_Init+0x124>)
 80047d8:	400a      	ands	r2, r1
 80047da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d108      	bne.n	80047f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2180      	movs	r1, #128	; 0x80
 80047ee:	0209      	lsls	r1, r1, #8
 80047f0:	430a      	orrs	r2, r1
 80047f2:	609a      	str	r2, [r3, #8]
 80047f4:	e007      	b.n	8004806 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2184      	movs	r1, #132	; 0x84
 8004800:	0209      	lsls	r1, r1, #8
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d104      	bne.n	8004818 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2280      	movs	r2, #128	; 0x80
 8004814:	0112      	lsls	r2, r2, #4
 8004816:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	491f      	ldr	r1, [pc, #124]	; (80048a0 <HAL_I2C_Init+0x128>)
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	491a      	ldr	r1, [pc, #104]	; (800489c <HAL_I2C_Init+0x124>)
 8004834:	400a      	ands	r2, r1
 8004836:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	431a      	orrs	r2, r3
 8004842:	0011      	movs	r1, r2
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69d9      	ldr	r1, [r3, #28]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2101      	movs	r1, #1
 800486e:	430a      	orrs	r2, r1
 8004870:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2241      	movs	r2, #65	; 0x41
 800487c:	2120      	movs	r1, #32
 800487e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2242      	movs	r2, #66	; 0x42
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	0018      	movs	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	b002      	add	sp, #8
 8004896:	bd80      	pop	{r7, pc}
 8004898:	f0ffffff 	.word	0xf0ffffff
 800489c:	ffff7fff 	.word	0xffff7fff
 80048a0:	02008000 	.word	0x02008000

080048a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2241      	movs	r2, #65	; 0x41
 80048b2:	5c9b      	ldrb	r3, [r3, r2]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d138      	bne.n	800492c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2240      	movs	r2, #64	; 0x40
 80048be:	5c9b      	ldrb	r3, [r3, r2]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e032      	b.n	800492e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2240      	movs	r2, #64	; 0x40
 80048cc:	2101      	movs	r1, #1
 80048ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2241      	movs	r2, #65	; 0x41
 80048d4:	2124      	movs	r1, #36	; 0x24
 80048d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2101      	movs	r1, #1
 80048e4:	438a      	bics	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4911      	ldr	r1, [pc, #68]	; (8004938 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80048f4:	400a      	ands	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6819      	ldr	r1, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2101      	movs	r1, #1
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2241      	movs	r2, #65	; 0x41
 800491c:	2120      	movs	r1, #32
 800491e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2240      	movs	r2, #64	; 0x40
 8004924:	2100      	movs	r1, #0
 8004926:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
  }
}
 800492e:	0018      	movs	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	b002      	add	sp, #8
 8004934:	bd80      	pop	{r7, pc}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	ffffefff 	.word	0xffffefff

0800493c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2241      	movs	r2, #65	; 0x41
 800494a:	5c9b      	ldrb	r3, [r3, r2]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b20      	cmp	r3, #32
 8004950:	d139      	bne.n	80049c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2240      	movs	r2, #64	; 0x40
 8004956:	5c9b      	ldrb	r3, [r3, r2]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800495c:	2302      	movs	r3, #2
 800495e:	e033      	b.n	80049c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2240      	movs	r2, #64	; 0x40
 8004964:	2101      	movs	r1, #1
 8004966:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2241      	movs	r2, #65	; 0x41
 800496c:	2124      	movs	r1, #36	; 0x24
 800496e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2101      	movs	r1, #1
 800497c:	438a      	bics	r2, r1
 800497e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a11      	ldr	r2, [pc, #68]	; (80049d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800498c:	4013      	ands	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2101      	movs	r1, #1
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2241      	movs	r2, #65	; 0x41
 80049b6:	2120      	movs	r1, #32
 80049b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2240      	movs	r2, #64	; 0x40
 80049be:	2100      	movs	r1, #0
 80049c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e000      	b.n	80049c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
  }
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b004      	add	sp, #16
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	fffff0ff 	.word	0xfffff0ff

080049d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80049dc:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a19      	ldr	r2, [pc, #100]	; (8004a48 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	0019      	movs	r1, r3
 80049e6:	4b17      	ldr	r3, [pc, #92]	; (8004a44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d11f      	bne.n	8004a38 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80049f8:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	0013      	movs	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	189b      	adds	r3, r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4912      	ldr	r1, [pc, #72]	; (8004a50 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004a06:	0018      	movs	r0, r3
 8004a08:	f7fb fb7c 	bl	8000104 <__udivsi3>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a12:	e008      	b.n	8004a26 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e001      	b.n	8004a26 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e009      	b.n	8004a3a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a26:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	401a      	ands	r2, r3
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d0ed      	beq.n	8004a14 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b004      	add	sp, #16
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	40007000 	.word	0x40007000
 8004a48:	fffff9ff 	.word	0xfffff9ff
 8004a4c:	20000000 	.word	0x20000000
 8004a50:	000f4240 	.word	0x000f4240

08004a54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	23e0      	movs	r3, #224	; 0xe0
 8004a5e:	01db      	lsls	r3, r3, #7
 8004a60:	4013      	ands	r3, r2
}
 8004a62:	0018      	movs	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000

08004a6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e304      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	4013      	ands	r3, r2
 8004a86:	d100      	bne.n	8004a8a <HAL_RCC_OscConfig+0x1e>
 8004a88:	e07c      	b.n	8004b84 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8a:	4bc3      	ldr	r3, [pc, #780]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2238      	movs	r2, #56	; 0x38
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a94:	4bc0      	ldr	r3, [pc, #768]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2203      	movs	r2, #3
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCC_OscConfig+0x3e>
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d002      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x44>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d10b      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab0:	4bb9      	ldr	r3, [pc, #740]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	029b      	lsls	r3, r3, #10
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d062      	beq.n	8004b82 <HAL_RCC_OscConfig+0x116>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d15e      	bne.n	8004b82 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e2df      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	025b      	lsls	r3, r3, #9
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x78>
 8004ad4:	4bb0      	ldr	r3, [pc, #704]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4baf      	ldr	r3, [pc, #700]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004ada:	2180      	movs	r1, #128	; 0x80
 8004adc:	0249      	lsls	r1, r1, #9
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e020      	b.n	8004b26 <HAL_RCC_OscConfig+0xba>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	23a0      	movs	r3, #160	; 0xa0
 8004aea:	02db      	lsls	r3, r3, #11
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d10e      	bne.n	8004b0e <HAL_RCC_OscConfig+0xa2>
 8004af0:	4ba9      	ldr	r3, [pc, #676]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4ba8      	ldr	r3, [pc, #672]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	02c9      	lsls	r1, r1, #11
 8004afa:	430a      	orrs	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	4ba6      	ldr	r3, [pc, #664]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4ba5      	ldr	r3, [pc, #660]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004b04:	2180      	movs	r1, #128	; 0x80
 8004b06:	0249      	lsls	r1, r1, #9
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	e00b      	b.n	8004b26 <HAL_RCC_OscConfig+0xba>
 8004b0e:	4ba2      	ldr	r3, [pc, #648]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4ba1      	ldr	r3, [pc, #644]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004b14:	49a1      	ldr	r1, [pc, #644]	; (8004d9c <HAL_RCC_OscConfig+0x330>)
 8004b16:	400a      	ands	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	4b9f      	ldr	r3, [pc, #636]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b9e      	ldr	r3, [pc, #632]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004b20:	499f      	ldr	r1, [pc, #636]	; (8004da0 <HAL_RCC_OscConfig+0x334>)
 8004b22:	400a      	ands	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d014      	beq.n	8004b58 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2e:	f7fe fcb1 	bl	8003494 <HAL_GetTick>
 8004b32:	0003      	movs	r3, r0
 8004b34:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fe fcac 	bl	8003494 <HAL_GetTick>
 8004b3c:	0002      	movs	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e29e      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b4a:	4b93      	ldr	r3, [pc, #588]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	029b      	lsls	r3, r3, #10
 8004b52:	4013      	ands	r3, r2
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0xcc>
 8004b56:	e015      	b.n	8004b84 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fe fc9c 	bl	8003494 <HAL_GetTick>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b62:	f7fe fc97 	bl	8003494 <HAL_GetTick>
 8004b66:	0002      	movs	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b64      	cmp	r3, #100	; 0x64
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e289      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b74:	4b88      	ldr	r3, [pc, #544]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	029b      	lsls	r3, r3, #10
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d1f0      	bne.n	8004b62 <HAL_RCC_OscConfig+0xf6>
 8004b80:	e000      	b.n	8004b84 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d100      	bne.n	8004b90 <HAL_RCC_OscConfig+0x124>
 8004b8e:	e099      	b.n	8004cc4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b90:	4b81      	ldr	r3, [pc, #516]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2238      	movs	r2, #56	; 0x38
 8004b96:	4013      	ands	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b9a:	4b7f      	ldr	r3, [pc, #508]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d102      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x144>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d002      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x14a>
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d135      	bne.n	8004c22 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb6:	4b78      	ldr	r3, [pc, #480]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d005      	beq.n	8004bce <HAL_RCC_OscConfig+0x162>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e25c      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bce:	4b72      	ldr	r3, [pc, #456]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4a74      	ldr	r2, [pc, #464]	; (8004da4 <HAL_RCC_OscConfig+0x338>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	0019      	movs	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	021a      	lsls	r2, r3, #8
 8004bde:	4b6e      	ldr	r3, [pc, #440]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004be0:	430a      	orrs	r2, r1
 8004be2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d112      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bea:	4b6b      	ldr	r3, [pc, #428]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6e      	ldr	r2, [pc, #440]	; (8004da8 <HAL_RCC_OscConfig+0x33c>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	0019      	movs	r1, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	4b67      	ldr	r3, [pc, #412]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004bfe:	4b66      	ldr	r3, [pc, #408]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	0adb      	lsrs	r3, r3, #11
 8004c04:	2207      	movs	r2, #7
 8004c06:	4013      	ands	r3, r2
 8004c08:	4a68      	ldr	r2, [pc, #416]	; (8004dac <HAL_RCC_OscConfig+0x340>)
 8004c0a:	40da      	lsrs	r2, r3
 8004c0c:	4b68      	ldr	r3, [pc, #416]	; (8004db0 <HAL_RCC_OscConfig+0x344>)
 8004c0e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c10:	4b68      	ldr	r3, [pc, #416]	; (8004db4 <HAL_RCC_OscConfig+0x348>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f7fe fbe3 	bl	80033e0 <HAL_InitTick>
 8004c1a:	1e03      	subs	r3, r0, #0
 8004c1c:	d051      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e232      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d030      	beq.n	8004c8c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c2a:	4b5b      	ldr	r3, [pc, #364]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5e      	ldr	r2, [pc, #376]	; (8004da8 <HAL_RCC_OscConfig+0x33c>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	0019      	movs	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	4b57      	ldr	r3, [pc, #348]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004c3e:	4b56      	ldr	r3, [pc, #344]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b55      	ldr	r3, [pc, #340]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	0049      	lsls	r1, r1, #1
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4c:	f7fe fc22 	bl	8003494 <HAL_GetTick>
 8004c50:	0003      	movs	r3, r0
 8004c52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c56:	f7fe fc1d 	bl	8003494 <HAL_GetTick>
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e20f      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c68:	4b4b      	ldr	r3, [pc, #300]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4013      	ands	r3, r2
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c74:	4b48      	ldr	r3, [pc, #288]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4a4a      	ldr	r2, [pc, #296]	; (8004da4 <HAL_RCC_OscConfig+0x338>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	021a      	lsls	r2, r3, #8
 8004c84:	4b44      	ldr	r3, [pc, #272]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	e01b      	b.n	8004cc4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004c8c:	4b42      	ldr	r3, [pc, #264]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004c92:	4949      	ldr	r1, [pc, #292]	; (8004db8 <HAL_RCC_OscConfig+0x34c>)
 8004c94:	400a      	ands	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fe fbfc 	bl	8003494 <HAL_GetTick>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca2:	f7fe fbf7 	bl	8003494 <HAL_GetTick>
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e1e9      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cb4:	4b38      	ldr	r3, [pc, #224]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	2380      	movs	r3, #128	; 0x80
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x236>
 8004cc0:	e000      	b.n	8004cc4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2208      	movs	r2, #8
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d047      	beq.n	8004d5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004cce:	4b32      	ldr	r3, [pc, #200]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2238      	movs	r2, #56	; 0x38
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b18      	cmp	r3, #24
 8004cd8:	d10a      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004cda:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	2202      	movs	r2, #2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d03c      	beq.n	8004d5e <HAL_RCC_OscConfig+0x2f2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d138      	bne.n	8004d5e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e1cb      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d019      	beq.n	8004d2c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004cf8:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004cfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cfc:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004cfe:	2101      	movs	r1, #1
 8004d00:	430a      	orrs	r2, r1
 8004d02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fe fbc6 	bl	8003494 <HAL_GetTick>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7fe fbc1 	bl	8003494 <HAL_GetTick>
 8004d12:	0002      	movs	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e1b3      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d20:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d24:	2202      	movs	r2, #2
 8004d26:	4013      	ands	r3, r2
 8004d28:	d0f1      	beq.n	8004d0e <HAL_RCC_OscConfig+0x2a2>
 8004d2a:	e018      	b.n	8004d5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004d2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004d32:	2101      	movs	r1, #1
 8004d34:	438a      	bics	r2, r1
 8004d36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fe fbac 	bl	8003494 <HAL_GetTick>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d42:	f7fe fba7 	bl	8003494 <HAL_GetTick>
 8004d46:	0002      	movs	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e199      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d54:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d58:	2202      	movs	r2, #2
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d1f1      	bne.n	8004d42 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2204      	movs	r2, #4
 8004d64:	4013      	ands	r3, r2
 8004d66:	d100      	bne.n	8004d6a <HAL_RCC_OscConfig+0x2fe>
 8004d68:	e0c6      	b.n	8004ef8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d6a:	231f      	movs	r3, #31
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2238      	movs	r2, #56	; 0x38
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d11e      	bne.n	8004dbc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_RCC_OscConfig+0x32c>)
 8004d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d82:	2202      	movs	r2, #2
 8004d84:	4013      	ands	r3, r2
 8004d86:	d100      	bne.n	8004d8a <HAL_RCC_OscConfig+0x31e>
 8004d88:	e0b6      	b.n	8004ef8 <HAL_RCC_OscConfig+0x48c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d000      	beq.n	8004d94 <HAL_RCC_OscConfig+0x328>
 8004d92:	e0b1      	b.n	8004ef8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e177      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	fffeffff 	.word	0xfffeffff
 8004da0:	fffbffff 	.word	0xfffbffff
 8004da4:	ffff80ff 	.word	0xffff80ff
 8004da8:	ffffc7ff 	.word	0xffffc7ff
 8004dac:	00f42400 	.word	0x00f42400
 8004db0:	20000000 	.word	0x20000000
 8004db4:	20000004 	.word	0x20000004
 8004db8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dbc:	4bb4      	ldr	r3, [pc, #720]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004dbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	055b      	lsls	r3, r3, #21
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_OscConfig+0x360>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x362>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d011      	beq.n	8004df6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004dd2:	4baf      	ldr	r3, [pc, #700]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd6:	4bae      	ldr	r3, [pc, #696]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004dd8:	2180      	movs	r1, #128	; 0x80
 8004dda:	0549      	lsls	r1, r1, #21
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	63da      	str	r2, [r3, #60]	; 0x3c
 8004de0:	4bab      	ldr	r3, [pc, #684]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	055b      	lsls	r3, r3, #21
 8004de8:	4013      	ands	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004dee:	231f      	movs	r3, #31
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df6:	4ba7      	ldr	r3, [pc, #668]	; (8005094 <HAL_RCC_OscConfig+0x628>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d11a      	bne.n	8004e38 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e02:	4ba4      	ldr	r3, [pc, #656]	; (8005094 <HAL_RCC_OscConfig+0x628>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4ba3      	ldr	r3, [pc, #652]	; (8005094 <HAL_RCC_OscConfig+0x628>)
 8004e08:	2180      	movs	r1, #128	; 0x80
 8004e0a:	0049      	lsls	r1, r1, #1
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004e10:	f7fe fb40 	bl	8003494 <HAL_GetTick>
 8004e14:	0003      	movs	r3, r0
 8004e16:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1a:	f7fe fb3b 	bl	8003494 <HAL_GetTick>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e12d      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e2c:	4b99      	ldr	r3, [pc, #612]	; (8005094 <HAL_RCC_OscConfig+0x628>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4013      	ands	r3, r2
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3e2>
 8004e40:	4b93      	ldr	r3, [pc, #588]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004e42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e44:	4b92      	ldr	r3, [pc, #584]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004e46:	2101      	movs	r1, #1
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e4c:	e01c      	b.n	8004e88 <HAL_RCC_OscConfig+0x41c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x404>
 8004e56:	4b8e      	ldr	r3, [pc, #568]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004e58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e5a:	4b8d      	ldr	r3, [pc, #564]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e62:	4b8b      	ldr	r3, [pc, #556]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004e64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e66:	4b8a      	ldr	r3, [pc, #552]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004e68:	2101      	movs	r1, #1
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCC_OscConfig+0x41c>
 8004e70:	4b87      	ldr	r3, [pc, #540]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004e72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e74:	4b86      	ldr	r3, [pc, #536]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004e76:	2101      	movs	r1, #1
 8004e78:	438a      	bics	r2, r1
 8004e7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e7c:	4b84      	ldr	r3, [pc, #528]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004e7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e80:	4b83      	ldr	r3, [pc, #524]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004e82:	2104      	movs	r1, #4
 8004e84:	438a      	bics	r2, r1
 8004e86:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d014      	beq.n	8004eba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fe fb00 	bl	8003494 <HAL_GetTick>
 8004e94:	0003      	movs	r3, r0
 8004e96:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e98:	e009      	b.n	8004eae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9a:	f7fe fafb 	bl	8003494 <HAL_GetTick>
 8004e9e:	0002      	movs	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	4a7c      	ldr	r2, [pc, #496]	; (8005098 <HAL_RCC_OscConfig+0x62c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e0ec      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eae:	4b78      	ldr	r3, [pc, #480]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x42e>
 8004eb8:	e013      	b.n	8004ee2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eba:	f7fe faeb 	bl	8003494 <HAL_GetTick>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ec2:	e009      	b.n	8004ed8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec4:	f7fe fae6 	bl	8003494 <HAL_GetTick>
 8004ec8:	0002      	movs	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	4a72      	ldr	r2, [pc, #456]	; (8005098 <HAL_RCC_OscConfig+0x62c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0d7      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed8:	4b6d      	ldr	r3, [pc, #436]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004edc:	2202      	movs	r2, #2
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004ee2:	231f      	movs	r3, #31
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d105      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004eec:	4b68      	ldr	r3, [pc, #416]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ef0:	4b67      	ldr	r3, [pc, #412]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004ef2:	496a      	ldr	r1, [pc, #424]	; (800509c <HAL_RCC_OscConfig+0x630>)
 8004ef4:	400a      	ands	r2, r1
 8004ef6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d100      	bne.n	8004f02 <HAL_RCC_OscConfig+0x496>
 8004f00:	e0c1      	b.n	8005086 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f02:	4b63      	ldr	r3, [pc, #396]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2238      	movs	r2, #56	; 0x38
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b10      	cmp	r3, #16
 8004f0c:	d100      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4a4>
 8004f0e:	e081      	b.n	8005014 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d156      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f18:	4b5d      	ldr	r3, [pc, #372]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4b5c      	ldr	r3, [pc, #368]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004f1e:	4960      	ldr	r1, [pc, #384]	; (80050a0 <HAL_RCC_OscConfig+0x634>)
 8004f20:	400a      	ands	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fe fab6 	bl	8003494 <HAL_GetTick>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2e:	f7fe fab1 	bl	8003494 <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e0a3      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f40:	4b53      	ldr	r3, [pc, #332]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	049b      	lsls	r3, r3, #18
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d1f0      	bne.n	8004f2e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f4c:	4b50      	ldr	r3, [pc, #320]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4a54      	ldr	r2, [pc, #336]	; (80050a4 <HAL_RCC_OscConfig+0x638>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	0019      	movs	r1, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1a      	ldr	r2, [r3, #32]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	4b45      	ldr	r3, [pc, #276]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f80:	4b43      	ldr	r3, [pc, #268]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b42      	ldr	r3, [pc, #264]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	0449      	lsls	r1, r1, #17
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004f8e:	4b40      	ldr	r3, [pc, #256]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	4b3f      	ldr	r3, [pc, #252]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004f94:	2180      	movs	r1, #128	; 0x80
 8004f96:	0549      	lsls	r1, r1, #21
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fe fa7a 	bl	8003494 <HAL_GetTick>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fe fa75 	bl	8003494 <HAL_GetTick>
 8004faa:	0002      	movs	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e067      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb8:	4b35      	ldr	r3, [pc, #212]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	049b      	lsls	r3, r3, #18
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x53a>
 8004fc4:	e05f      	b.n	8005086 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b32      	ldr	r3, [pc, #200]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b31      	ldr	r3, [pc, #196]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004fcc:	4934      	ldr	r1, [pc, #208]	; (80050a0 <HAL_RCC_OscConfig+0x634>)
 8004fce:	400a      	ands	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004fd2:	4b2f      	ldr	r3, [pc, #188]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	4b2e      	ldr	r3, [pc, #184]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004fd8:	2103      	movs	r1, #3
 8004fda:	438a      	bics	r2, r1
 8004fdc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004fde:	4b2c      	ldr	r3, [pc, #176]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	4b2b      	ldr	r3, [pc, #172]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8004fe4:	4930      	ldr	r1, [pc, #192]	; (80050a8 <HAL_RCC_OscConfig+0x63c>)
 8004fe6:	400a      	ands	r2, r1
 8004fe8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fea:	f7fe fa53 	bl	8003494 <HAL_GetTick>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff4:	f7fe fa4e 	bl	8003494 <HAL_GetTick>
 8004ff8:	0002      	movs	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e040      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	049b      	lsls	r3, r3, #18
 800500e:	4013      	ands	r3, r2
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x588>
 8005012:	e038      	b.n	8005086 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e033      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_RCC_OscConfig+0x624>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2203      	movs	r2, #3
 800502a:	401a      	ands	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	429a      	cmp	r2, r3
 8005032:	d126      	bne.n	8005082 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2270      	movs	r2, #112	; 0x70
 8005038:	401a      	ands	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503e:	429a      	cmp	r2, r3
 8005040:	d11f      	bne.n	8005082 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	23fe      	movs	r3, #254	; 0xfe
 8005046:	01db      	lsls	r3, r3, #7
 8005048:	401a      	ands	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d116      	bne.n	8005082 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	23f8      	movs	r3, #248	; 0xf8
 8005058:	039b      	lsls	r3, r3, #14
 800505a:	401a      	ands	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d10e      	bne.n	8005082 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	23e0      	movs	r3, #224	; 0xe0
 8005068:	051b      	lsls	r3, r3, #20
 800506a:	401a      	ands	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d106      	bne.n	8005082 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	0f5b      	lsrs	r3, r3, #29
 8005078:	075a      	lsls	r2, r3, #29
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	0018      	movs	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	b008      	add	sp, #32
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40021000 	.word	0x40021000
 8005094:	40007000 	.word	0x40007000
 8005098:	00001388 	.word	0x00001388
 800509c:	efffffff 	.word	0xefffffff
 80050a0:	feffffff 	.word	0xfeffffff
 80050a4:	11c1808c 	.word	0x11c1808c
 80050a8:	eefeffff 	.word	0xeefeffff

080050ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0e9      	b.n	8005294 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050c0:	4b76      	ldr	r3, [pc, #472]	; (800529c <HAL_RCC_ClockConfig+0x1f0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2207      	movs	r2, #7
 80050c6:	4013      	ands	r3, r2
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d91e      	bls.n	800510c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b73      	ldr	r3, [pc, #460]	; (800529c <HAL_RCC_ClockConfig+0x1f0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2207      	movs	r2, #7
 80050d4:	4393      	bics	r3, r2
 80050d6:	0019      	movs	r1, r3
 80050d8:	4b70      	ldr	r3, [pc, #448]	; (800529c <HAL_RCC_ClockConfig+0x1f0>)
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050e0:	f7fe f9d8 	bl	8003494 <HAL_GetTick>
 80050e4:	0003      	movs	r3, r0
 80050e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050e8:	e009      	b.n	80050fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ea:	f7fe f9d3 	bl	8003494 <HAL_GetTick>
 80050ee:	0002      	movs	r2, r0
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	4a6a      	ldr	r2, [pc, #424]	; (80052a0 <HAL_RCC_ClockConfig+0x1f4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e0ca      	b.n	8005294 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050fe:	4b67      	ldr	r3, [pc, #412]	; (800529c <HAL_RCC_ClockConfig+0x1f0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2207      	movs	r2, #7
 8005104:	4013      	ands	r3, r2
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d1ee      	bne.n	80050ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2202      	movs	r2, #2
 8005112:	4013      	ands	r3, r2
 8005114:	d015      	beq.n	8005142 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2204      	movs	r2, #4
 800511c:	4013      	ands	r3, r2
 800511e:	d006      	beq.n	800512e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005120:	4b60      	ldr	r3, [pc, #384]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	4b5f      	ldr	r3, [pc, #380]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005126:	21e0      	movs	r1, #224	; 0xe0
 8005128:	01c9      	lsls	r1, r1, #7
 800512a:	430a      	orrs	r2, r1
 800512c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512e:	4b5d      	ldr	r3, [pc, #372]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4a5d      	ldr	r2, [pc, #372]	; (80052a8 <HAL_RCC_ClockConfig+0x1fc>)
 8005134:	4013      	ands	r3, r2
 8005136:	0019      	movs	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	4b59      	ldr	r3, [pc, #356]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 800513e:	430a      	orrs	r2, r1
 8005140:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2201      	movs	r2, #1
 8005148:	4013      	ands	r3, r2
 800514a:	d057      	beq.n	80051fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d107      	bne.n	8005164 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005154:	4b53      	ldr	r3, [pc, #332]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	029b      	lsls	r3, r3, #10
 800515c:	4013      	ands	r3, r2
 800515e:	d12b      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e097      	b.n	8005294 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d107      	bne.n	800517c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516c:	4b4d      	ldr	r3, [pc, #308]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	049b      	lsls	r3, r3, #18
 8005174:	4013      	ands	r3, r2
 8005176:	d11f      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e08b      	b.n	8005294 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005184:	4b47      	ldr	r3, [pc, #284]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4013      	ands	r3, r2
 800518e:	d113      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e07f      	b.n	8005294 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b03      	cmp	r3, #3
 800519a:	d106      	bne.n	80051aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800519c:	4b41      	ldr	r3, [pc, #260]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	2202      	movs	r2, #2
 80051a2:	4013      	ands	r3, r2
 80051a4:	d108      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e074      	b.n	8005294 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051aa:	4b3e      	ldr	r3, [pc, #248]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 80051ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ae:	2202      	movs	r2, #2
 80051b0:	4013      	ands	r3, r2
 80051b2:	d101      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e06d      	b.n	8005294 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051b8:	4b3a      	ldr	r3, [pc, #232]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2207      	movs	r2, #7
 80051be:	4393      	bics	r3, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	4b37      	ldr	r3, [pc, #220]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 80051c8:	430a      	orrs	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051cc:	f7fe f962 	bl	8003494 <HAL_GetTick>
 80051d0:	0003      	movs	r3, r0
 80051d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d4:	e009      	b.n	80051ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d6:	f7fe f95d 	bl	8003494 <HAL_GetTick>
 80051da:	0002      	movs	r2, r0
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	4a2f      	ldr	r2, [pc, #188]	; (80052a0 <HAL_RCC_ClockConfig+0x1f4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e054      	b.n	8005294 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2238      	movs	r2, #56	; 0x38
 80051f0:	401a      	ands	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d1ec      	bne.n	80051d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051fc:	4b27      	ldr	r3, [pc, #156]	; (800529c <HAL_RCC_ClockConfig+0x1f0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2207      	movs	r2, #7
 8005202:	4013      	ands	r3, r2
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d21e      	bcs.n	8005248 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <HAL_RCC_ClockConfig+0x1f0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2207      	movs	r2, #7
 8005210:	4393      	bics	r3, r2
 8005212:	0019      	movs	r1, r3
 8005214:	4b21      	ldr	r3, [pc, #132]	; (800529c <HAL_RCC_ClockConfig+0x1f0>)
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800521c:	f7fe f93a 	bl	8003494 <HAL_GetTick>
 8005220:	0003      	movs	r3, r0
 8005222:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005224:	e009      	b.n	800523a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005226:	f7fe f935 	bl	8003494 <HAL_GetTick>
 800522a:	0002      	movs	r2, r0
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <HAL_RCC_ClockConfig+0x1f4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e02c      	b.n	8005294 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800523a:	4b18      	ldr	r3, [pc, #96]	; (800529c <HAL_RCC_ClockConfig+0x1f0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2207      	movs	r2, #7
 8005240:	4013      	ands	r3, r2
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d1ee      	bne.n	8005226 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2204      	movs	r2, #4
 800524e:	4013      	ands	r3, r2
 8005250:	d009      	beq.n	8005266 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005252:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4a15      	ldr	r2, [pc, #84]	; (80052ac <HAL_RCC_ClockConfig+0x200>)
 8005258:	4013      	ands	r3, r2
 800525a:	0019      	movs	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005262:	430a      	orrs	r2, r1
 8005264:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005266:	f000 f829 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800526a:	0001      	movs	r1, r0
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	0a1b      	lsrs	r3, r3, #8
 8005272:	220f      	movs	r2, #15
 8005274:	401a      	ands	r2, r3
 8005276:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <HAL_RCC_ClockConfig+0x204>)
 8005278:	0092      	lsls	r2, r2, #2
 800527a:	58d3      	ldr	r3, [r2, r3]
 800527c:	221f      	movs	r2, #31
 800527e:	4013      	ands	r3, r2
 8005280:	000a      	movs	r2, r1
 8005282:	40da      	lsrs	r2, r3
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <HAL_RCC_ClockConfig+0x208>)
 8005286:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_RCC_ClockConfig+0x20c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	0018      	movs	r0, r3
 800528e:	f7fe f8a7 	bl	80033e0 <HAL_InitTick>
 8005292:	0003      	movs	r3, r0
}
 8005294:	0018      	movs	r0, r3
 8005296:	46bd      	mov	sp, r7
 8005298:	b004      	add	sp, #16
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40022000 	.word	0x40022000
 80052a0:	00001388 	.word	0x00001388
 80052a4:	40021000 	.word	0x40021000
 80052a8:	fffff0ff 	.word	0xfffff0ff
 80052ac:	ffff8fff 	.word	0xffff8fff
 80052b0:	08008648 	.word	0x08008648
 80052b4:	20000000 	.word	0x20000000
 80052b8:	20000004 	.word	0x20000004

080052bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052c2:	4b3c      	ldr	r3, [pc, #240]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2238      	movs	r2, #56	; 0x38
 80052c8:	4013      	ands	r3, r2
 80052ca:	d10f      	bne.n	80052ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80052cc:	4b39      	ldr	r3, [pc, #228]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	0adb      	lsrs	r3, r3, #11
 80052d2:	2207      	movs	r2, #7
 80052d4:	4013      	ands	r3, r2
 80052d6:	2201      	movs	r2, #1
 80052d8:	409a      	lsls	r2, r3
 80052da:	0013      	movs	r3, r2
 80052dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	4835      	ldr	r0, [pc, #212]	; (80053b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052e2:	f7fa ff0f 	bl	8000104 <__udivsi3>
 80052e6:	0003      	movs	r3, r0
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	e05d      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052ec:	4b31      	ldr	r3, [pc, #196]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2238      	movs	r2, #56	; 0x38
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d102      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052f8:	4b30      	ldr	r3, [pc, #192]	; (80053bc <HAL_RCC_GetSysClockFreq+0x100>)
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	e054      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052fe:	4b2d      	ldr	r3, [pc, #180]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2238      	movs	r2, #56	; 0x38
 8005304:	4013      	ands	r3, r2
 8005306:	2b10      	cmp	r3, #16
 8005308:	d138      	bne.n	800537c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800530a:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2203      	movs	r2, #3
 8005310:	4013      	ands	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005314:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	2207      	movs	r2, #7
 800531c:	4013      	ands	r3, r2
 800531e:	3301      	adds	r3, #1
 8005320:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d10d      	bne.n	8005344 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	4824      	ldr	r0, [pc, #144]	; (80053bc <HAL_RCC_GetSysClockFreq+0x100>)
 800532c:	f7fa feea 	bl	8000104 <__udivsi3>
 8005330:	0003      	movs	r3, r0
 8005332:	0019      	movs	r1, r3
 8005334:	4b1f      	ldr	r3, [pc, #124]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	227f      	movs	r2, #127	; 0x7f
 800533c:	4013      	ands	r3, r2
 800533e:	434b      	muls	r3, r1
 8005340:	617b      	str	r3, [r7, #20]
        break;
 8005342:	e00d      	b.n	8005360 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	481c      	ldr	r0, [pc, #112]	; (80053b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005348:	f7fa fedc 	bl	8000104 <__udivsi3>
 800534c:	0003      	movs	r3, r0
 800534e:	0019      	movs	r1, r3
 8005350:	4b18      	ldr	r3, [pc, #96]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	227f      	movs	r2, #127	; 0x7f
 8005358:	4013      	ands	r3, r2
 800535a:	434b      	muls	r3, r1
 800535c:	617b      	str	r3, [r7, #20]
        break;
 800535e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005360:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	0f5b      	lsrs	r3, r3, #29
 8005366:	2207      	movs	r2, #7
 8005368:	4013      	ands	r3, r2
 800536a:	3301      	adds	r3, #1
 800536c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	6978      	ldr	r0, [r7, #20]
 8005372:	f7fa fec7 	bl	8000104 <__udivsi3>
 8005376:	0003      	movs	r3, r0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	e015      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800537c:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2238      	movs	r2, #56	; 0x38
 8005382:	4013      	ands	r3, r2
 8005384:	2b20      	cmp	r3, #32
 8005386:	d103      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	e00b      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005390:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2238      	movs	r2, #56	; 0x38
 8005396:	4013      	ands	r3, r2
 8005398:	2b18      	cmp	r3, #24
 800539a:	d103      	bne.n	80053a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800539c:	23fa      	movs	r3, #250	; 0xfa
 800539e:	01db      	lsls	r3, r3, #7
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e001      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053a8:	693b      	ldr	r3, [r7, #16]
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b006      	add	sp, #24
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	40021000 	.word	0x40021000
 80053b8:	00f42400 	.word	0x00f42400
 80053bc:	007a1200 	.word	0x007a1200

080053c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c4:	4b02      	ldr	r3, [pc, #8]	; (80053d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80053c6:	681b      	ldr	r3, [r3, #0]
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	20000000 	.word	0x20000000

080053d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d4:	b5b0      	push	{r4, r5, r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80053d8:	f7ff fff2 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 80053dc:	0004      	movs	r4, r0
 80053de:	f7ff fb39 	bl	8004a54 <LL_RCC_GetAPB1Prescaler>
 80053e2:	0003      	movs	r3, r0
 80053e4:	0b1a      	lsrs	r2, r3, #12
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80053e8:	0092      	lsls	r2, r2, #2
 80053ea:	58d3      	ldr	r3, [r2, r3]
 80053ec:	221f      	movs	r2, #31
 80053ee:	4013      	ands	r3, r2
 80053f0:	40dc      	lsrs	r4, r3
 80053f2:	0023      	movs	r3, r4
}
 80053f4:	0018      	movs	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bdb0      	pop	{r4, r5, r7, pc}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	08008688 	.word	0x08008688

08005400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005408:	2313      	movs	r3, #19
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005410:	2312      	movs	r3, #18
 8005412:	18fb      	adds	r3, r7, r3
 8005414:	2200      	movs	r2, #0
 8005416:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	029b      	lsls	r3, r3, #10
 8005420:	4013      	ands	r3, r2
 8005422:	d100      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005424:	e0a4      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005426:	2311      	movs	r3, #17
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542e:	4ba5      	ldr	r3, [pc, #660]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	055b      	lsls	r3, r3, #21
 8005436:	4013      	ands	r3, r2
 8005438:	d111      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800543a:	4ba2      	ldr	r3, [pc, #648]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800543c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800543e:	4ba1      	ldr	r3, [pc, #644]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005440:	2180      	movs	r1, #128	; 0x80
 8005442:	0549      	lsls	r1, r1, #21
 8005444:	430a      	orrs	r2, r1
 8005446:	63da      	str	r2, [r3, #60]	; 0x3c
 8005448:	4b9e      	ldr	r3, [pc, #632]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800544a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	055b      	lsls	r3, r3, #21
 8005450:	4013      	ands	r3, r2
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005456:	2311      	movs	r3, #17
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800545e:	4b9a      	ldr	r3, [pc, #616]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b99      	ldr	r3, [pc, #612]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005464:	2180      	movs	r1, #128	; 0x80
 8005466:	0049      	lsls	r1, r1, #1
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800546c:	f7fe f812 	bl	8003494 <HAL_GetTick>
 8005470:	0003      	movs	r3, r0
 8005472:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005474:	e00b      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005476:	f7fe f80d 	bl	8003494 <HAL_GetTick>
 800547a:	0002      	movs	r2, r0
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d904      	bls.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8005484:	2313      	movs	r3, #19
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	2203      	movs	r2, #3
 800548a:	701a      	strb	r2, [r3, #0]
        break;
 800548c:	e005      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800548e:	4b8e      	ldr	r3, [pc, #568]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4013      	ands	r3, r2
 8005498:	d0ed      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800549a:	2313      	movs	r3, #19
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d154      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054a4:	4b87      	ldr	r3, [pc, #540]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054a8:	23c0      	movs	r3, #192	; 0xc0
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4013      	ands	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d019      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xea>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d014      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054c0:	4b80      	ldr	r3, [pc, #512]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c4:	4a81      	ldr	r2, [pc, #516]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054ca:	4b7e      	ldr	r3, [pc, #504]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054ce:	4b7d      	ldr	r3, [pc, #500]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054d0:	2180      	movs	r1, #128	; 0x80
 80054d2:	0249      	lsls	r1, r1, #9
 80054d4:	430a      	orrs	r2, r1
 80054d6:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054d8:	4b7a      	ldr	r3, [pc, #488]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054dc:	4b79      	ldr	r3, [pc, #484]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054de:	497c      	ldr	r1, [pc, #496]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80054e0:	400a      	ands	r2, r1
 80054e2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054e4:	4b77      	ldr	r3, [pc, #476]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2201      	movs	r2, #1
 80054ee:	4013      	ands	r3, r2
 80054f0:	d016      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f2:	f7fd ffcf 	bl	8003494 <HAL_GetTick>
 80054f6:	0003      	movs	r3, r0
 80054f8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fa:	e00c      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fc:	f7fd ffca 	bl	8003494 <HAL_GetTick>
 8005500:	0002      	movs	r2, r0
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	4a73      	ldr	r2, [pc, #460]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d904      	bls.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 800550c:	2313      	movs	r3, #19
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	2203      	movs	r2, #3
 8005512:	701a      	strb	r2, [r3, #0]
            break;
 8005514:	e004      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005516:	4b6b      	ldr	r3, [pc, #428]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551a:	2202      	movs	r2, #2
 800551c:	4013      	ands	r3, r2
 800551e:	d0ed      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8005520:	2313      	movs	r3, #19
 8005522:	18fb      	adds	r3, r7, r3
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800552a:	4b66      	ldr	r3, [pc, #408]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800552c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552e:	4a67      	ldr	r2, [pc, #412]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005530:	4013      	ands	r3, r2
 8005532:	0019      	movs	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005538:	4b62      	ldr	r3, [pc, #392]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800553a:	430a      	orrs	r2, r1
 800553c:	65da      	str	r2, [r3, #92]	; 0x5c
 800553e:	e00c      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005540:	2312      	movs	r3, #18
 8005542:	18fb      	adds	r3, r7, r3
 8005544:	2213      	movs	r2, #19
 8005546:	18ba      	adds	r2, r7, r2
 8005548:	7812      	ldrb	r2, [r2, #0]
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	e005      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	2312      	movs	r3, #18
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	2213      	movs	r2, #19
 8005554:	18ba      	adds	r2, r7, r2
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800555a:	2311      	movs	r3, #17
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005564:	4b57      	ldr	r3, [pc, #348]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005568:	4b56      	ldr	r3, [pc, #344]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800556a:	495b      	ldr	r1, [pc, #364]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800556c:	400a      	ands	r2, r1
 800556e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2201      	movs	r2, #1
 8005576:	4013      	ands	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800557a:	4b52      	ldr	r3, [pc, #328]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	2203      	movs	r2, #3
 8005580:	4393      	bics	r3, r2
 8005582:	0019      	movs	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	4b4e      	ldr	r3, [pc, #312]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800558a:	430a      	orrs	r2, r1
 800558c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2220      	movs	r2, #32
 8005594:	4013      	ands	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005598:	4b4a      	ldr	r3, [pc, #296]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800559a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559c:	4a4f      	ldr	r2, [pc, #316]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800559e:	4013      	ands	r3, r2
 80055a0:	0019      	movs	r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	4b47      	ldr	r3, [pc, #284]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055a8:	430a      	orrs	r2, r1
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4013      	ands	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055b8:	4b42      	ldr	r3, [pc, #264]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055bc:	4a48      	ldr	r2, [pc, #288]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80055be:	4013      	ands	r3, r2
 80055c0:	0019      	movs	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695a      	ldr	r2, [r3, #20]
 80055c6:	4b3f      	ldr	r3, [pc, #252]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055c8:	430a      	orrs	r2, r1
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4013      	ands	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055d8:	4b3a      	ldr	r3, [pc, #232]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055dc:	4a41      	ldr	r2, [pc, #260]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80055de:	4013      	ands	r3, r2
 80055e0:	0019      	movs	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055e8:	430a      	orrs	r2, r1
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2240      	movs	r2, #64	; 0x40
 80055f2:	4013      	ands	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055f6:	4b33      	ldr	r3, [pc, #204]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	4a3b      	ldr	r2, [pc, #236]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	4b2f      	ldr	r3, [pc, #188]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005606:	430a      	orrs	r2, r1
 8005608:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	01db      	lsls	r3, r3, #7
 8005612:	4013      	ands	r3, r2
 8005614:	d015      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005616:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	0899      	lsrs	r1, r3, #2
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005624:	430a      	orrs	r2, r1
 8005626:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	05db      	lsls	r3, r3, #23
 8005630:	429a      	cmp	r2, r3
 8005632:	d106      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005634:	4b23      	ldr	r3, [pc, #140]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800563a:	2180      	movs	r1, #128	; 0x80
 800563c:	0249      	lsls	r1, r1, #9
 800563e:	430a      	orrs	r2, r1
 8005640:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	039b      	lsls	r3, r3, #14
 800564a:	4013      	ands	r3, r2
 800564c:	d016      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800564e:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	4a26      	ldr	r2, [pc, #152]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005654:	4013      	ands	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1a      	ldr	r2, [r3, #32]
 800565c:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800565e:	430a      	orrs	r2, r1
 8005660:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1a      	ldr	r2, [r3, #32]
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	03db      	lsls	r3, r3, #15
 800566a:	429a      	cmp	r2, r3
 800566c:	d106      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	0449      	lsls	r1, r1, #17
 8005678:	430a      	orrs	r2, r1
 800567a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	2380      	movs	r3, #128	; 0x80
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	4013      	ands	r3, r2
 8005686:	d016      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005688:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	4a18      	ldr	r2, [pc, #96]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800568e:	4013      	ands	r3, r2
 8005690:	0019      	movs	r1, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005698:	430a      	orrs	r2, r1
 800569a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	01db      	lsls	r3, r3, #7
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d106      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056ae:	2180      	movs	r1, #128	; 0x80
 80056b0:	0249      	lsls	r1, r1, #9
 80056b2:	430a      	orrs	r2, r1
 80056b4:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80056b6:	2312      	movs	r3, #18
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	781b      	ldrb	r3, [r3, #0]
}
 80056bc:	0018      	movs	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	b006      	add	sp, #24
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40007000 	.word	0x40007000
 80056cc:	fffffcff 	.word	0xfffffcff
 80056d0:	fffeffff 	.word	0xfffeffff
 80056d4:	00001388 	.word	0x00001388
 80056d8:	efffffff 	.word	0xefffffff
 80056dc:	fffff3ff 	.word	0xfffff3ff
 80056e0:	fff3ffff 	.word	0xfff3ffff
 80056e4:	ffcfffff 	.word	0xffcfffff
 80056e8:	ffffcfff 	.word	0xffffcfff
 80056ec:	ffbfffff 	.word	0xffbfffff
 80056f0:	ffff3fff 	.word	0xffff3fff

080056f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056f4:	b5b0      	push	{r4, r5, r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056fc:	230f      	movs	r3, #15
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	2201      	movs	r2, #1
 8005702:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d100      	bne.n	800570c <HAL_RTC_Init+0x18>
 800570a:	e07f      	b.n	800580c <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2229      	movs	r2, #41	; 0x29
 8005710:	5c9b      	ldrb	r3, [r3, r2]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2228      	movs	r2, #40	; 0x28
 800571c:	2100      	movs	r1, #0
 800571e:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2288      	movs	r2, #136	; 0x88
 8005724:	0212      	lsls	r2, r2, #8
 8005726:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	0018      	movs	r0, r3
 800572c:	f7fd f9b4 	bl	8002a98 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2229      	movs	r2, #41	; 0x29
 8005734:	2102      	movs	r1, #2
 8005736:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	22ca      	movs	r2, #202	; 0xca
 800573e:	625a      	str	r2, [r3, #36]	; 0x24
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2253      	movs	r2, #83	; 0x53
 8005746:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005748:	250f      	movs	r5, #15
 800574a:	197c      	adds	r4, r7, r5
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	0018      	movs	r0, r3
 8005750:	f000 f9c7 	bl	8005ae2 <RTC_EnterInitMode>
 8005754:	0003      	movs	r3, r0
 8005756:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8005758:	197b      	adds	r3, r7, r5
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d148      	bne.n	80057f2 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	492c      	ldr	r1, [pc, #176]	; (800581c <HAL_RTC_Init+0x128>)
 800576c:	400a      	ands	r2, r1
 800576e:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6999      	ldr	r1, [r3, #24]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6912      	ldr	r2, [r2, #16]
 8005796:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6919      	ldr	r1, [r3, #16]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	041a      	lsls	r2, r3, #16
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80057ac:	250f      	movs	r5, #15
 80057ae:	197c      	adds	r4, r7, r5
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f000 f9d8 	bl	8005b68 <RTC_ExitInitMode>
 80057b8:	0003      	movs	r3, r0
 80057ba:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80057bc:	197b      	adds	r3, r7, r5
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d116      	bne.n	80057f2 <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	00d2      	lsls	r2, r2, #3
 80057d0:	08d2      	lsrs	r2, r2, #3
 80057d2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6999      	ldr	r1, [r3, #24]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	22ff      	movs	r2, #255	; 0xff
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80057fa:	230f      	movs	r3, #15
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2229      	movs	r2, #41	; 0x29
 8005808:	2101      	movs	r1, #1
 800580a:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800580c:	230f      	movs	r3, #15
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	781b      	ldrb	r3, [r3, #0]
}
 8005812:	0018      	movs	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	b004      	add	sp, #16
 8005818:	bdb0      	pop	{r4, r5, r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	fb8fffbf 	.word	0xfb8fffbf

08005820 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005820:	b5b0      	push	{r4, r5, r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2228      	movs	r2, #40	; 0x28
 8005830:	5c9b      	ldrb	r3, [r3, r2]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_RTC_SetTime+0x1a>
 8005836:	2302      	movs	r3, #2
 8005838:	e092      	b.n	8005960 <HAL_RTC_SetTime+0x140>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2228      	movs	r2, #40	; 0x28
 800583e:	2101      	movs	r1, #1
 8005840:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2229      	movs	r2, #41	; 0x29
 8005846:	2102      	movs	r1, #2
 8005848:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	22ca      	movs	r2, #202	; 0xca
 8005850:	625a      	str	r2, [r3, #36]	; 0x24
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2253      	movs	r2, #83	; 0x53
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800585a:	2513      	movs	r5, #19
 800585c:	197c      	adds	r4, r7, r5
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	0018      	movs	r0, r3
 8005862:	f000 f93e 	bl	8005ae2 <RTC_EnterInitMode>
 8005866:	0003      	movs	r3, r0
 8005868:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800586a:	197b      	adds	r3, r7, r5
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d162      	bne.n	8005938 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d125      	bne.n	80058c4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	4013      	ands	r3, r2
 8005882:	d102      	bne.n	800588a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	0018      	movs	r0, r3
 8005890:	f000 f9b0 	bl	8005bf4 <RTC_ByteToBcd2>
 8005894:	0003      	movs	r3, r0
 8005896:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	0018      	movs	r0, r3
 800589e:	f000 f9a9 	bl	8005bf4 <RTC_ByteToBcd2>
 80058a2:	0003      	movs	r3, r0
 80058a4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058a6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	789b      	ldrb	r3, [r3, #2]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f000 f9a1 	bl	8005bf4 <RTC_ByteToBcd2>
 80058b2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058b4:	0022      	movs	r2, r4
 80058b6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	78db      	ldrb	r3, [r3, #3]
 80058bc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e017      	b.n	80058f4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2240      	movs	r2, #64	; 0x40
 80058cc:	4013      	ands	r3, r2
 80058ce:	d102      	bne.n	80058d6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2200      	movs	r2, #0
 80058d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058e2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058e8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	78db      	ldrb	r3, [r3, #3]
 80058ee:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	491b      	ldr	r1, [pc, #108]	; (8005968 <HAL_RTC_SetTime+0x148>)
 80058fc:	400a      	ands	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4918      	ldr	r1, [pc, #96]	; (800596c <HAL_RTC_SetTime+0x14c>)
 800590c:	400a      	ands	r2, r1
 800590e:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6999      	ldr	r1, [r3, #24]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	431a      	orrs	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005928:	2313      	movs	r3, #19
 800592a:	18fc      	adds	r4, r7, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	0018      	movs	r0, r3
 8005930:	f000 f91a 	bl	8005b68 <RTC_ExitInitMode>
 8005934:	0003      	movs	r3, r0
 8005936:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	22ff      	movs	r2, #255	; 0xff
 800593e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005940:	2313      	movs	r3, #19
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2229      	movs	r2, #41	; 0x29
 800594e:	2101      	movs	r1, #1
 8005950:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2228      	movs	r2, #40	; 0x28
 8005956:	2100      	movs	r1, #0
 8005958:	5499      	strb	r1, [r3, r2]

  return status;
 800595a:	2313      	movs	r3, #19
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	781b      	ldrb	r3, [r3, #0]
}
 8005960:	0018      	movs	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	b006      	add	sp, #24
 8005966:	bdb0      	pop	{r4, r5, r7, pc}
 8005968:	007f7f7f 	.word	0x007f7f7f
 800596c:	fffbffff 	.word	0xfffbffff

08005970 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005970:	b5b0      	push	{r4, r5, r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2228      	movs	r2, #40	; 0x28
 8005980:	5c9b      	ldrb	r3, [r3, r2]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_RTC_SetDate+0x1a>
 8005986:	2302      	movs	r3, #2
 8005988:	e07e      	b.n	8005a88 <HAL_RTC_SetDate+0x118>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2228      	movs	r2, #40	; 0x28
 800598e:	2101      	movs	r1, #1
 8005990:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2229      	movs	r2, #41	; 0x29
 8005996:	2102      	movs	r1, #2
 8005998:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10e      	bne.n	80059be <HAL_RTC_SetDate+0x4e>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	001a      	movs	r2, r3
 80059a6:	2310      	movs	r3, #16
 80059a8:	4013      	ands	r3, r2
 80059aa:	d008      	beq.n	80059be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2210      	movs	r2, #16
 80059b2:	4393      	bics	r3, r2
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	330a      	adds	r3, #10
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11c      	bne.n	80059fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	78db      	ldrb	r3, [r3, #3]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f000 f913 	bl	8005bf4 <RTC_ByteToBcd2>
 80059ce:	0003      	movs	r3, r0
 80059d0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	0018      	movs	r0, r3
 80059d8:	f000 f90c 	bl	8005bf4 <RTC_ByteToBcd2>
 80059dc:	0003      	movs	r3, r0
 80059de:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059e0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	789b      	ldrb	r3, [r3, #2]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f000 f904 	bl	8005bf4 <RTC_ByteToBcd2>
 80059ec:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80059ee:	0022      	movs	r2, r4
 80059f0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	e00e      	b.n	8005a1c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	78db      	ldrb	r3, [r3, #3]
 8005a02:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a0a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a10:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	22ca      	movs	r2, #202	; 0xca
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2253      	movs	r2, #83	; 0x53
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a2c:	2513      	movs	r5, #19
 8005a2e:	197c      	adds	r4, r7, r5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	0018      	movs	r0, r3
 8005a34:	f000 f855 	bl	8005ae2 <RTC_EnterInitMode>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005a3c:	197b      	adds	r3, r7, r5
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10d      	bne.n	8005a60 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4911      	ldr	r1, [pc, #68]	; (8005a90 <HAL_RTC_SetDate+0x120>)
 8005a4c:	400a      	ands	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a50:	2313      	movs	r3, #19
 8005a52:	18fc      	adds	r4, r7, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 f886 	bl	8005b68 <RTC_ExitInitMode>
 8005a5c:	0003      	movs	r3, r0
 8005a5e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005a68:	2313      	movs	r3, #19
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2229      	movs	r2, #41	; 0x29
 8005a76:	2101      	movs	r1, #1
 8005a78:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2228      	movs	r2, #40	; 0x28
 8005a7e:	2100      	movs	r1, #0
 8005a80:	5499      	strb	r1, [r3, r2]

  return status;
 8005a82:	2313      	movs	r3, #19
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	781b      	ldrb	r3, [r3, #0]
}
 8005a88:	0018      	movs	r0, r3
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b006      	add	sp, #24
 8005a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a90:	00ffff3f 	.word	0x00ffff3f

08005a94 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	21a0      	movs	r1, #160	; 0xa0
 8005aa8:	438a      	bics	r2, r1
 8005aaa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005aac:	f7fd fcf2 	bl	8003494 <HAL_GetTick>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005ab4:	e00a      	b.n	8005acc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ab6:	f7fd fced 	bl	8003494 <HAL_GetTick>
 8005aba:	0002      	movs	r2, r0
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	23fa      	movs	r3, #250	; 0xfa
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d901      	bls.n	8005acc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e006      	b.n	8005ada <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	d0ee      	beq.n	8005ab6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b004      	add	sp, #16
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005aea:	230f      	movs	r3, #15
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	2240      	movs	r2, #64	; 0x40
 8005afa:	4013      	ands	r3, r2
 8005afc:	d12d      	bne.n	8005b5a <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2180      	movs	r1, #128	; 0x80
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b0e:	f7fd fcc1 	bl	8003494 <HAL_GetTick>
 8005b12:	0003      	movs	r3, r0
 8005b14:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b16:	e015      	b.n	8005b44 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b18:	f7fd fcbc 	bl	8003494 <HAL_GetTick>
 8005b1c:	0002      	movs	r2, r0
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	1ad2      	subs	r2, r2, r3
 8005b22:	210f      	movs	r1, #15
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	1879      	adds	r1, r7, r1
 8005b28:	7809      	ldrb	r1, [r1, #0]
 8005b2a:	7019      	strb	r1, [r3, #0]
 8005b2c:	23fa      	movs	r3, #250	; 0xfa
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d907      	bls.n	8005b44 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8005b34:	230f      	movs	r3, #15
 8005b36:	18fb      	adds	r3, r7, r3
 8005b38:	2203      	movs	r2, #3
 8005b3a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2229      	movs	r2, #41	; 0x29
 8005b40:	2103      	movs	r1, #3
 8005b42:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2240      	movs	r2, #64	; 0x40
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d104      	bne.n	8005b5a <RTC_EnterInitMode+0x78>
 8005b50:	230f      	movs	r3, #15
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d1de      	bne.n	8005b18 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b5a:	230f      	movs	r3, #15
 8005b5c:	18fb      	adds	r3, r7, r3
 8005b5e:	781b      	ldrb	r3, [r3, #0]
}
 8005b60:	0018      	movs	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b004      	add	sp, #16
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b70:	230f      	movs	r3, #15
 8005b72:	18fb      	adds	r3, r7, r3
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005b78:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <RTC_ExitInitMode+0x88>)
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	4b1c      	ldr	r3, [pc, #112]	; (8005bf0 <RTC_ExitInitMode+0x88>)
 8005b7e:	2180      	movs	r1, #128	; 0x80
 8005b80:	438a      	bics	r2, r1
 8005b82:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <RTC_ExitInitMode+0x88>)
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d10e      	bne.n	8005bac <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7ff ff7f 	bl	8005a94 <HAL_RTC_WaitForSynchro>
 8005b96:	1e03      	subs	r3, r0, #0
 8005b98:	d022      	beq.n	8005be0 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2229      	movs	r2, #41	; 0x29
 8005b9e:	2103      	movs	r1, #3
 8005ba0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005ba2:	230f      	movs	r3, #15
 8005ba4:	18fb      	adds	r3, r7, r3
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	e019      	b.n	8005be0 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <RTC_ExitInitMode+0x88>)
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <RTC_ExitInitMode+0x88>)
 8005bb2:	2120      	movs	r1, #32
 8005bb4:	438a      	bics	r2, r1
 8005bb6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f7ff ff6a 	bl	8005a94 <HAL_RTC_WaitForSynchro>
 8005bc0:	1e03      	subs	r3, r0, #0
 8005bc2:	d007      	beq.n	8005bd4 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2229      	movs	r2, #41	; 0x29
 8005bc8:	2103      	movs	r1, #3
 8005bca:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005bcc:	230f      	movs	r3, #15
 8005bce:	18fb      	adds	r3, r7, r3
 8005bd0:	2203      	movs	r2, #3
 8005bd2:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005bd4:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <RTC_ExitInitMode+0x88>)
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <RTC_ExitInitMode+0x88>)
 8005bda:	2120      	movs	r1, #32
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005be0:	230f      	movs	r3, #15
 8005be2:	18fb      	adds	r3, r7, r3
 8005be4:	781b      	ldrb	r3, [r3, #0]
}
 8005be6:	0018      	movs	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b004      	add	sp, #16
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	40002800 	.word	0x40002800

08005bf4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	1dfb      	adds	r3, r7, #7
 8005bfe:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005c04:	230b      	movs	r3, #11
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	1dfa      	adds	r2, r7, #7
 8005c0a:	7812      	ldrb	r2, [r2, #0]
 8005c0c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005c0e:	e008      	b.n	8005c22 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005c16:	220b      	movs	r2, #11
 8005c18:	18bb      	adds	r3, r7, r2
 8005c1a:	18ba      	adds	r2, r7, r2
 8005c1c:	7812      	ldrb	r2, [r2, #0]
 8005c1e:	3a0a      	subs	r2, #10
 8005c20:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005c22:	230b      	movs	r3, #11
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b09      	cmp	r3, #9
 8005c2a:	d8f1      	bhi.n	8005c10 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	230b      	movs	r3, #11
 8005c36:	18fb      	adds	r3, r7, r3
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b2db      	uxtb	r3, r3
}
 8005c3e:	0018      	movs	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b004      	add	sp, #16
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e08a      	b.n	8005d70 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	225d      	movs	r2, #93	; 0x5d
 8005c64:	5c9b      	ldrb	r3, [r3, r2]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d107      	bne.n	8005c7c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	225c      	movs	r2, #92	; 0x5c
 8005c70:	2100      	movs	r1, #0
 8005c72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	0018      	movs	r0, r3
 8005c78:	f7fc ff34 	bl	8002ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	225d      	movs	r2, #93	; 0x5d
 8005c80:	2102      	movs	r1, #2
 8005c82:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2140      	movs	r1, #64	; 0x40
 8005c90:	438a      	bics	r2, r1
 8005c92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	23e0      	movs	r3, #224	; 0xe0
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d902      	bls.n	8005ca6 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e002      	b.n	8005cac <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	015b      	lsls	r3, r3, #5
 8005caa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	23f0      	movs	r3, #240	; 0xf0
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d008      	beq.n	8005cca <HAL_SPI_Init+0x82>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	23e0      	movs	r3, #224	; 0xe0
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10c      	bne.n	8005cec <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	23e0      	movs	r3, #224	; 0xe0
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d903      	bls.n	8005ce6 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ce4:	e002      	b.n	8005cec <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6999      	ldr	r1, [r3, #24]
 8005d06:	2380      	movs	r3, #128	; 0x80
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	400b      	ands	r3, r1
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	0011      	movs	r1, r2
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	0c1b      	lsrs	r3, r3, #16
 8005d2e:	2204      	movs	r2, #4
 8005d30:	401a      	ands	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	0011      	movs	r1, r2
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69da      	ldr	r2, [r3, #28]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4907      	ldr	r1, [pc, #28]	; (8005d78 <HAL_SPI_Init+0x130>)
 8005d5c:	400a      	ands	r2, r1
 8005d5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	225d      	movs	r2, #93	; 0x5d
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	0018      	movs	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b004      	add	sp, #16
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	fffff7ff 	.word	0xfffff7ff

08005d7c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	1dbb      	adds	r3, r7, #6
 8005d88:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d8a:	2317      	movs	r3, #23
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	2200      	movs	r2, #0
 8005d90:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	225c      	movs	r2, #92	; 0x5c
 8005d96:	5c9b      	ldrb	r3, [r3, r2]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_SPI_Transmit_DMA+0x24>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e0df      	b.n	8005f60 <HAL_SPI_Transmit_DMA+0x1e4>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	225c      	movs	r2, #92	; 0x5c
 8005da4:	2101      	movs	r1, #1
 8005da6:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	225d      	movs	r2, #93	; 0x5d
 8005dac:	5c9b      	ldrb	r3, [r3, r2]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d004      	beq.n	8005dbe <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8005db4:	2317      	movs	r3, #23
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	2202      	movs	r2, #2
 8005dba:	701a      	strb	r2, [r3, #0]
    goto error;
 8005dbc:	e0c9      	b.n	8005f52 <HAL_SPI_Transmit_DMA+0x1d6>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_SPI_Transmit_DMA+0x50>
 8005dc4:	1dbb      	adds	r3, r7, #6
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8005dcc:	2317      	movs	r3, #23
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
    goto error;
 8005dd4:	e0bd      	b.n	8005f52 <HAL_SPI_Transmit_DMA+0x1d6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	225d      	movs	r2, #93	; 0x5d
 8005dda:	2103      	movs	r1, #3
 8005ddc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1dba      	adds	r2, r7, #6
 8005dee:	8812      	ldrh	r2, [r2, #0]
 8005df0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1dba      	adds	r2, r7, #6
 8005df6:	8812      	ldrh	r2, [r2, #0]
 8005df8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2244      	movs	r2, #68	; 0x44
 8005e10:	2100      	movs	r1, #0
 8005e12:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2246      	movs	r2, #70	; 0x46
 8005e18:	2100      	movs	r1, #0
 8005e1a:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d108      	bne.n	8005e3a <HAL_SPI_Transmit_DMA+0xbe>
  {
    SPI_1LINE_TX(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2180      	movs	r1, #128	; 0x80
 8005e34:	01c9      	lsls	r1, r1, #7
 8005e36:	430a      	orrs	r2, r1
 8005e38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3e:	4a4a      	ldr	r2, [pc, #296]	; (8005f68 <HAL_SPI_Transmit_DMA+0x1ec>)
 8005e40:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	4a49      	ldr	r2, [pc, #292]	; (8005f6c <HAL_SPI_Transmit_DMA+0x1f0>)
 8005e48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	4a48      	ldr	r2, [pc, #288]	; (8005f70 <HAL_SPI_Transmit_DMA+0x1f4>)
 8005e50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	2200      	movs	r2, #0
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4943      	ldr	r1, [pc, #268]	; (8005f74 <HAL_SPI_Transmit_DMA+0x1f8>)
 8005e66:	400a      	ands	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	23e0      	movs	r3, #224	; 0xe0
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d82f      	bhi.n	8005ed6 <HAL_SPI_Transmit_DMA+0x15a>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	699a      	ldr	r2, [r3, #24]
 8005e7c:	2380      	movs	r3, #128	; 0x80
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d128      	bne.n	8005ed6 <HAL_SPI_Transmit_DMA+0x15a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d10f      	bne.n	8005eb2 <HAL_SPI_Transmit_DMA+0x136>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4935      	ldr	r1, [pc, #212]	; (8005f74 <HAL_SPI_Transmit_DMA+0x1f8>)
 8005e9e:	400a      	ands	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005eb0:	e011      	b.n	8005ed6 <HAL_SPI_Transmit_DMA+0x15a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2180      	movs	r1, #128	; 0x80
 8005ebe:	01c9      	lsls	r1, r1, #7
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3301      	adds	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	0019      	movs	r1, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	001a      	movs	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f7fe f8f7 	bl	80040e0 <HAL_DMA_Start_IT>
 8005ef2:	1e03      	subs	r3, r0, #0
 8005ef4:	d00e      	beq.n	8005f14 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efa:	2210      	movs	r2, #16
 8005efc:	431a      	orrs	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005f02:	2317      	movs	r3, #23
 8005f04:	18fb      	adds	r3, r7, r3
 8005f06:	2201      	movs	r2, #1
 8005f08:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	225d      	movs	r2, #93	; 0x5d
 8005f0e:	2101      	movs	r1, #1
 8005f10:	5499      	strb	r1, [r3, r2]
    goto error;
 8005f12:	e01e      	b.n	8005f52 <HAL_SPI_Transmit_DMA+0x1d6>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2240      	movs	r2, #64	; 0x40
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b40      	cmp	r3, #64	; 0x40
 8005f20:	d007      	beq.n	8005f32 <HAL_SPI_Transmit_DMA+0x1b6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2140      	movs	r1, #64	; 0x40
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2120      	movs	r1, #32
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	225c      	movs	r2, #92	; 0x5c
 8005f56:	2100      	movs	r1, #0
 8005f58:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005f5a:	2317      	movs	r3, #23
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	781b      	ldrb	r3, [r3, #0]
}
 8005f60:	0018      	movs	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b006      	add	sp, #24
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	08006055 	.word	0x08006055
 8005f6c:	08005fa9 	.word	0x08005fa9
 8005f70:	08006073 	.word	0x08006073
 8005f74:	ffffbfff 	.word	0xffffbfff

08005f78 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005f80:	46c0      	nop			; (mov r8, r8)
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b002      	add	sp, #8
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b002      	add	sp, #8
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb6:	f7fd fa6d 	bl	8003494 <HAL_GetTick>
 8005fba:	0003      	movs	r3, r0
 8005fbc:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d03c      	beq.n	8006046 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2120      	movs	r1, #32
 8005fd8:	438a      	bics	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	438a      	bics	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2164      	movs	r1, #100	; 0x64
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 f942 	bl	800627c <SPI_EndRxTxTransaction>
 8005ff8:	1e03      	subs	r3, r0, #0
 8005ffa:	d005      	beq.n	8006008 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	2220      	movs	r2, #32
 8006002:	431a      	orrs	r2, r3
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2200      	movs	r2, #0
 800602a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	225d      	movs	r2, #93	; 0x5d
 8006030:	2101      	movs	r1, #1
 8006032:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006038:	2b00      	cmp	r3, #0
 800603a:	d004      	beq.n	8006046 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	0018      	movs	r0, r3
 8006040:	f7ff ffaa 	bl	8005f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006044:	e003      	b.n	800604e <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	0018      	movs	r0, r3
 800604a:	f7ff ff95 	bl	8005f78 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800604e:	46bd      	mov	sp, r7
 8006050:	b006      	add	sp, #24
 8006052:	bd80      	pop	{r7, pc}

08006054 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	0018      	movs	r0, r3
 8006066:	f7ff ff8f 	bl	8005f88 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	b004      	add	sp, #16
 8006070:	bd80      	pop	{r7, pc}

08006072 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2103      	movs	r1, #3
 800608c:	438a      	bics	r2, r1
 800608e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006094:	2210      	movs	r2, #16
 8006096:	431a      	orrs	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	225d      	movs	r2, #93	; 0x5d
 80060a0:	2101      	movs	r1, #1
 80060a2:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	0018      	movs	r0, r3
 80060a8:	f7ff ff76 	bl	8005f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060ac:	46c0      	nop			; (mov r8, r8)
 80060ae:	46bd      	mov	sp, r7
 80060b0:	b004      	add	sp, #16
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	1dfb      	adds	r3, r7, #7
 80060c2:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060c4:	e050      	b.n	8006168 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	d04d      	beq.n	8006168 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80060cc:	f7fd f9e2 	bl	8003494 <HAL_GetTick>
 80060d0:	0002      	movs	r2, r0
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d902      	bls.n	80060e2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d142      	bne.n	8006168 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	21e0      	movs	r1, #224	; 0xe0
 80060ee:	438a      	bics	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	2382      	movs	r3, #130	; 0x82
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d113      	bne.n	8006126 <SPI_WaitFlagStateUntilTimeout+0x72>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	2380      	movs	r3, #128	; 0x80
 8006104:	021b      	lsls	r3, r3, #8
 8006106:	429a      	cmp	r2, r3
 8006108:	d005      	beq.n	8006116 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	2380      	movs	r3, #128	; 0x80
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	429a      	cmp	r2, r3
 8006114:	d107      	bne.n	8006126 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2140      	movs	r1, #64	; 0x40
 8006122:	438a      	bics	r2, r1
 8006124:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800612a:	2380      	movs	r3, #128	; 0x80
 800612c:	019b      	lsls	r3, r3, #6
 800612e:	429a      	cmp	r2, r3
 8006130:	d110      	bne.n	8006154 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4914      	ldr	r1, [pc, #80]	; (8006190 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800613e:	400a      	ands	r2, r1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2180      	movs	r1, #128	; 0x80
 800614e:	0189      	lsls	r1, r1, #6
 8006150:	430a      	orrs	r2, r1
 8006152:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	225d      	movs	r2, #93	; 0x5d
 8006158:	2101      	movs	r1, #1
 800615a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	225c      	movs	r2, #92	; 0x5c
 8006160:	2100      	movs	r1, #0
 8006162:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e00f      	b.n	8006188 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	4013      	ands	r3, r2
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	425a      	negs	r2, r3
 8006178:	4153      	adcs	r3, r2
 800617a:	b2db      	uxtb	r3, r3
 800617c:	001a      	movs	r2, r3
 800617e:	1dfb      	adds	r3, r7, #7
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d19f      	bne.n	80060c6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	0018      	movs	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	b004      	add	sp, #16
 800618e:	bd80      	pop	{r7, pc}
 8006190:	ffffdfff 	.word	0xffffdfff

08006194 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80061a2:	e05c      	b.n	800625e <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	23c0      	movs	r3, #192	; 0xc0
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d106      	bne.n	80061bc <SPI_WaitFifoStateUntilTimeout+0x28>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	d04d      	beq.n	800625e <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80061c2:	f7fd f967 	bl	8003494 <HAL_GetTick>
 80061c6:	0002      	movs	r2, r0
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d902      	bls.n	80061d8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d142      	bne.n	800625e <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	21e0      	movs	r1, #224	; 0xe0
 80061e4:	438a      	bics	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	2382      	movs	r3, #130	; 0x82
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d113      	bne.n	800621c <SPI_WaitFifoStateUntilTimeout+0x88>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d005      	beq.n	800620c <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	429a      	cmp	r2, r3
 800620a:	d107      	bne.n	800621c <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2140      	movs	r1, #64	; 0x40
 8006218:	438a      	bics	r2, r1
 800621a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006220:	2380      	movs	r3, #128	; 0x80
 8006222:	019b      	lsls	r3, r3, #6
 8006224:	429a      	cmp	r2, r3
 8006226:	d110      	bne.n	800624a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4911      	ldr	r1, [pc, #68]	; (8006278 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8006234:	400a      	ands	r2, r1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	0189      	lsls	r1, r1, #6
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	225d      	movs	r2, #93	; 0x5d
 800624e:	2101      	movs	r1, #1
 8006250:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	225c      	movs	r2, #92	; 0x5c
 8006256:	2100      	movs	r1, #0
 8006258:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e008      	b.n	8006270 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4013      	ands	r3, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	429a      	cmp	r2, r3
 800626c:	d19a      	bne.n	80061a4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	b004      	add	sp, #16
 8006276:	bd80      	pop	{r7, pc}
 8006278:	ffffdfff 	.word	0xffffdfff

0800627c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	23c0      	movs	r3, #192	; 0xc0
 800628c:	0159      	lsls	r1, r3, #5
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	0013      	movs	r3, r2
 8006296:	2200      	movs	r2, #0
 8006298:	f7ff ff7c 	bl	8006194 <SPI_WaitFifoStateUntilTimeout>
 800629c:	1e03      	subs	r3, r0, #0
 800629e:	d007      	beq.n	80062b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a4:	2220      	movs	r2, #32
 80062a6:	431a      	orrs	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e027      	b.n	8006300 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	0013      	movs	r3, r2
 80062ba:	2200      	movs	r2, #0
 80062bc:	2180      	movs	r1, #128	; 0x80
 80062be:	f7ff fef9 	bl	80060b4 <SPI_WaitFlagStateUntilTimeout>
 80062c2:	1e03      	subs	r3, r0, #0
 80062c4:	d007      	beq.n	80062d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ca:	2220      	movs	r2, #32
 80062cc:	431a      	orrs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e014      	b.n	8006300 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	23c0      	movs	r3, #192	; 0xc0
 80062da:	00d9      	lsls	r1, r3, #3
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	0013      	movs	r3, r2
 80062e4:	2200      	movs	r2, #0
 80062e6:	f7ff ff55 	bl	8006194 <SPI_WaitFifoStateUntilTimeout>
 80062ea:	1e03      	subs	r3, r0, #0
 80062ec:	d007      	beq.n	80062fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f2:	2220      	movs	r2, #32
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e000      	b.n	8006300 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	0018      	movs	r0, r3
 8006302:	46bd      	mov	sp, r7
 8006304:	b004      	add	sp, #16
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e046      	b.n	80063a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2280      	movs	r2, #128	; 0x80
 800631e:	589b      	ldr	r3, [r3, r2]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d107      	bne.n	8006334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	227c      	movs	r2, #124	; 0x7c
 8006328:	2100      	movs	r1, #0
 800632a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	0018      	movs	r0, r3
 8006330:	f7fc fc8a 	bl	8002c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2280      	movs	r2, #128	; 0x80
 8006338:	2124      	movs	r1, #36	; 0x24
 800633a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2101      	movs	r1, #1
 8006348:	438a      	bics	r2, r1
 800634a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	0018      	movs	r0, r3
 8006350:	f000 f8dc 	bl	800650c <UART_SetConfig>
 8006354:	0003      	movs	r3, r0
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e024      	b.n	80063a8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	0018      	movs	r0, r3
 800636a:	f001 f97d 	bl	8007668 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	490d      	ldr	r1, [pc, #52]	; (80063b0 <HAL_UART_Init+0xa8>)
 800637a:	400a      	ands	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	212a      	movs	r1, #42	; 0x2a
 800638a:	438a      	bics	r2, r1
 800638c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2101      	movs	r1, #1
 800639a:	430a      	orrs	r2, r1
 800639c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0018      	movs	r0, r3
 80063a2:	f001 fa15 	bl	80077d0 <UART_CheckIdleState>
 80063a6:	0003      	movs	r3, r0
}
 80063a8:	0018      	movs	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b002      	add	sp, #8
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	ffffb7ff 	.word	0xffffb7ff

080063b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08a      	sub	sp, #40	; 0x28
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	1dbb      	adds	r3, r7, #6
 80063c2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	589b      	ldr	r3, [r3, r2]
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d000      	beq.n	80063d0 <HAL_UART_Transmit+0x1c>
 80063ce:	e097      	b.n	8006500 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_UART_Transmit+0x2a>
 80063d6:	1dbb      	adds	r3, r7, #6
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e08f      	b.n	8006502 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	2380      	movs	r3, #128	; 0x80
 80063e8:	015b      	lsls	r3, r3, #5
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d109      	bne.n	8006402 <HAL_UART_Transmit+0x4e>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d105      	bne.n	8006402 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2201      	movs	r2, #1
 80063fa:	4013      	ands	r3, r2
 80063fc:	d001      	beq.n	8006402 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e07f      	b.n	8006502 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	227c      	movs	r2, #124	; 0x7c
 8006406:	5c9b      	ldrb	r3, [r3, r2]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_UART_Transmit+0x5c>
 800640c:	2302      	movs	r3, #2
 800640e:	e078      	b.n	8006502 <HAL_UART_Transmit+0x14e>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	227c      	movs	r2, #124	; 0x7c
 8006414:	2101      	movs	r1, #1
 8006416:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2288      	movs	r2, #136	; 0x88
 800641c:	2100      	movs	r1, #0
 800641e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2280      	movs	r2, #128	; 0x80
 8006424:	2121      	movs	r1, #33	; 0x21
 8006426:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006428:	f7fd f834 	bl	8003494 <HAL_GetTick>
 800642c:	0003      	movs	r3, r0
 800642e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1dba      	adds	r2, r7, #6
 8006434:	2154      	movs	r1, #84	; 0x54
 8006436:	8812      	ldrh	r2, [r2, #0]
 8006438:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1dba      	adds	r2, r7, #6
 800643e:	2156      	movs	r1, #86	; 0x56
 8006440:	8812      	ldrh	r2, [r2, #0]
 8006442:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	2380      	movs	r3, #128	; 0x80
 800644a:	015b      	lsls	r3, r3, #5
 800644c:	429a      	cmp	r2, r3
 800644e:	d108      	bne.n	8006462 <HAL_UART_Transmit+0xae>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8006458:	2300      	movs	r3, #0
 800645a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	e003      	b.n	800646a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800646a:	e02c      	b.n	80064c6 <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	0013      	movs	r3, r2
 8006476:	2200      	movs	r2, #0
 8006478:	2180      	movs	r1, #128	; 0x80
 800647a:	f001 f9f3 	bl	8007864 <UART_WaitOnFlagUntilTimeout>
 800647e:	1e03      	subs	r3, r0, #0
 8006480:	d001      	beq.n	8006486 <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e03d      	b.n	8006502 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10b      	bne.n	80064a4 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	001a      	movs	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	05d2      	lsls	r2, r2, #23
 8006498:	0dd2      	lsrs	r2, r2, #23
 800649a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	3302      	adds	r3, #2
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	e007      	b.n	80064b4 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	781a      	ldrb	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	3301      	adds	r3, #1
 80064b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2256      	movs	r2, #86	; 0x56
 80064b8:	5a9b      	ldrh	r3, [r3, r2]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b299      	uxth	r1, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2256      	movs	r2, #86	; 0x56
 80064c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2256      	movs	r2, #86	; 0x56
 80064ca:	5a9b      	ldrh	r3, [r3, r2]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1cc      	bne.n	800646c <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	0013      	movs	r3, r2
 80064dc:	2200      	movs	r2, #0
 80064de:	2140      	movs	r1, #64	; 0x40
 80064e0:	f001 f9c0 	bl	8007864 <UART_WaitOnFlagUntilTimeout>
 80064e4:	1e03      	subs	r3, r0, #0
 80064e6:	d001      	beq.n	80064ec <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e00a      	b.n	8006502 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2280      	movs	r2, #128	; 0x80
 80064f0:	2120      	movs	r1, #32
 80064f2:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	227c      	movs	r2, #124	; 0x7c
 80064f8:	2100      	movs	r1, #0
 80064fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e000      	b.n	8006502 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8006500:	2302      	movs	r3, #2
  }
}
 8006502:	0018      	movs	r0, r3
 8006504:	46bd      	mov	sp, r7
 8006506:	b008      	add	sp, #32
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800650c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800650e:	b0a1      	sub	sp, #132	; 0x84
 8006510:	af00      	add	r7, sp, #0
 8006512:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006514:	2300      	movs	r3, #0
 8006516:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8006518:	231b      	movs	r3, #27
 800651a:	2258      	movs	r2, #88	; 0x58
 800651c:	18ba      	adds	r2, r7, r2
 800651e:	18d2      	adds	r2, r2, r3
 8006520:	2300      	movs	r3, #0
 8006522:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006524:	2300      	movs	r3, #0
 8006526:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	431a      	orrs	r2, r3
 8006532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	431a      	orrs	r2, r3
 8006538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	4313      	orrs	r3, r2
 800653e:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006542:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006544:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006546:	4313      	orrs	r3, r2
 8006548:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800654a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	4bbe      	ldr	r3, [pc, #760]	; (800684c <UART_SetConfig+0x340>)
 8006552:	401a      	ands	r2, r3
 8006554:	0011      	movs	r1, r2
 8006556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800655c:	430b      	orrs	r3, r1
 800655e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	4bba      	ldr	r3, [pc, #744]	; (8006850 <UART_SetConfig+0x344>)
 8006568:	401a      	ands	r2, r3
 800656a:	0010      	movs	r0, r2
 800656c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800656e:	68d9      	ldr	r1, [r3, #12]
 8006570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	0003      	movs	r3, r0
 8006576:	430b      	orrs	r3, r1
 8006578:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800657a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4bb3      	ldr	r3, [pc, #716]	; (8006854 <UART_SetConfig+0x348>)
 8006586:	429a      	cmp	r2, r3
 8006588:	d004      	beq.n	8006594 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800658a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006590:	4313      	orrs	r3, r2
 8006592:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	4baf      	ldr	r3, [pc, #700]	; (8006858 <UART_SetConfig+0x34c>)
 800659c:	401a      	ands	r2, r3
 800659e:	0011      	movs	r1, r2
 80065a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065a6:	430b      	orrs	r3, r1
 80065a8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	230f      	movs	r3, #15
 80065b2:	439a      	bics	r2, r3
 80065b4:	0010      	movs	r0, r2
 80065b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80065ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	0003      	movs	r3, r0
 80065c0:	430b      	orrs	r3, r1
 80065c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	4ba4      	ldr	r3, [pc, #656]	; (800685c <UART_SetConfig+0x350>)
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d12f      	bne.n	800662e <UART_SetConfig+0x122>
 80065ce:	4ba4      	ldr	r3, [pc, #656]	; (8006860 <UART_SetConfig+0x354>)
 80065d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065d2:	2303      	movs	r3, #3
 80065d4:	4013      	ands	r3, r2
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d013      	beq.n	8006602 <UART_SetConfig+0xf6>
 80065da:	d304      	bcc.n	80065e6 <UART_SetConfig+0xda>
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d009      	beq.n	80065f4 <UART_SetConfig+0xe8>
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d015      	beq.n	8006610 <UART_SetConfig+0x104>
 80065e4:	e01b      	b.n	800661e <UART_SetConfig+0x112>
 80065e6:	2323      	movs	r3, #35	; 0x23
 80065e8:	2258      	movs	r2, #88	; 0x58
 80065ea:	18ba      	adds	r2, r7, r2
 80065ec:	18d2      	adds	r2, r2, r3
 80065ee:	2300      	movs	r3, #0
 80065f0:	7013      	strb	r3, [r2, #0]
 80065f2:	e070      	b.n	80066d6 <UART_SetConfig+0x1ca>
 80065f4:	2323      	movs	r3, #35	; 0x23
 80065f6:	2258      	movs	r2, #88	; 0x58
 80065f8:	18ba      	adds	r2, r7, r2
 80065fa:	18d2      	adds	r2, r2, r3
 80065fc:	2302      	movs	r3, #2
 80065fe:	7013      	strb	r3, [r2, #0]
 8006600:	e069      	b.n	80066d6 <UART_SetConfig+0x1ca>
 8006602:	2323      	movs	r3, #35	; 0x23
 8006604:	2258      	movs	r2, #88	; 0x58
 8006606:	18ba      	adds	r2, r7, r2
 8006608:	18d2      	adds	r2, r2, r3
 800660a:	2304      	movs	r3, #4
 800660c:	7013      	strb	r3, [r2, #0]
 800660e:	e062      	b.n	80066d6 <UART_SetConfig+0x1ca>
 8006610:	2323      	movs	r3, #35	; 0x23
 8006612:	2258      	movs	r2, #88	; 0x58
 8006614:	18ba      	adds	r2, r7, r2
 8006616:	18d2      	adds	r2, r2, r3
 8006618:	2308      	movs	r3, #8
 800661a:	7013      	strb	r3, [r2, #0]
 800661c:	e05b      	b.n	80066d6 <UART_SetConfig+0x1ca>
 800661e:	2323      	movs	r3, #35	; 0x23
 8006620:	2258      	movs	r2, #88	; 0x58
 8006622:	18ba      	adds	r2, r7, r2
 8006624:	18d2      	adds	r2, r2, r3
 8006626:	2310      	movs	r3, #16
 8006628:	7013      	strb	r3, [r2, #0]
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	e053      	b.n	80066d6 <UART_SetConfig+0x1ca>
 800662e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b8c      	ldr	r3, [pc, #560]	; (8006864 <UART_SetConfig+0x358>)
 8006634:	429a      	cmp	r2, r3
 8006636:	d106      	bne.n	8006646 <UART_SetConfig+0x13a>
 8006638:	2323      	movs	r3, #35	; 0x23
 800663a:	2258      	movs	r2, #88	; 0x58
 800663c:	18ba      	adds	r2, r7, r2
 800663e:	18d2      	adds	r2, r2, r3
 8006640:	2300      	movs	r3, #0
 8006642:	7013      	strb	r3, [r2, #0]
 8006644:	e047      	b.n	80066d6 <UART_SetConfig+0x1ca>
 8006646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4b82      	ldr	r3, [pc, #520]	; (8006854 <UART_SetConfig+0x348>)
 800664c:	429a      	cmp	r2, r3
 800664e:	d13c      	bne.n	80066ca <UART_SetConfig+0x1be>
 8006650:	4b83      	ldr	r3, [pc, #524]	; (8006860 <UART_SetConfig+0x354>)
 8006652:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006654:	23c0      	movs	r3, #192	; 0xc0
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	401a      	ands	r2, r3
 800665a:	2380      	movs	r3, #128	; 0x80
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	429a      	cmp	r2, r3
 8006660:	d01d      	beq.n	800669e <UART_SetConfig+0x192>
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	429a      	cmp	r2, r3
 8006668:	d802      	bhi.n	8006670 <UART_SetConfig+0x164>
 800666a:	2a00      	cmp	r2, #0
 800666c:	d009      	beq.n	8006682 <UART_SetConfig+0x176>
 800666e:	e024      	b.n	80066ba <UART_SetConfig+0x1ae>
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	429a      	cmp	r2, r3
 8006676:	d00b      	beq.n	8006690 <UART_SetConfig+0x184>
 8006678:	23c0      	movs	r3, #192	; 0xc0
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	429a      	cmp	r2, r3
 800667e:	d015      	beq.n	80066ac <UART_SetConfig+0x1a0>
 8006680:	e01b      	b.n	80066ba <UART_SetConfig+0x1ae>
 8006682:	2323      	movs	r3, #35	; 0x23
 8006684:	2258      	movs	r2, #88	; 0x58
 8006686:	18ba      	adds	r2, r7, r2
 8006688:	18d2      	adds	r2, r2, r3
 800668a:	2300      	movs	r3, #0
 800668c:	7013      	strb	r3, [r2, #0]
 800668e:	e022      	b.n	80066d6 <UART_SetConfig+0x1ca>
 8006690:	2323      	movs	r3, #35	; 0x23
 8006692:	2258      	movs	r2, #88	; 0x58
 8006694:	18ba      	adds	r2, r7, r2
 8006696:	18d2      	adds	r2, r2, r3
 8006698:	2302      	movs	r3, #2
 800669a:	7013      	strb	r3, [r2, #0]
 800669c:	e01b      	b.n	80066d6 <UART_SetConfig+0x1ca>
 800669e:	2323      	movs	r3, #35	; 0x23
 80066a0:	2258      	movs	r2, #88	; 0x58
 80066a2:	18ba      	adds	r2, r7, r2
 80066a4:	18d2      	adds	r2, r2, r3
 80066a6:	2304      	movs	r3, #4
 80066a8:	7013      	strb	r3, [r2, #0]
 80066aa:	e014      	b.n	80066d6 <UART_SetConfig+0x1ca>
 80066ac:	2323      	movs	r3, #35	; 0x23
 80066ae:	2258      	movs	r2, #88	; 0x58
 80066b0:	18ba      	adds	r2, r7, r2
 80066b2:	18d2      	adds	r2, r2, r3
 80066b4:	2308      	movs	r3, #8
 80066b6:	7013      	strb	r3, [r2, #0]
 80066b8:	e00d      	b.n	80066d6 <UART_SetConfig+0x1ca>
 80066ba:	2323      	movs	r3, #35	; 0x23
 80066bc:	2258      	movs	r2, #88	; 0x58
 80066be:	18ba      	adds	r2, r7, r2
 80066c0:	18d2      	adds	r2, r2, r3
 80066c2:	2310      	movs	r3, #16
 80066c4:	7013      	strb	r3, [r2, #0]
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	e005      	b.n	80066d6 <UART_SetConfig+0x1ca>
 80066ca:	2323      	movs	r3, #35	; 0x23
 80066cc:	2258      	movs	r2, #88	; 0x58
 80066ce:	18ba      	adds	r2, r7, r2
 80066d0:	18d2      	adds	r2, r2, r3
 80066d2:	2310      	movs	r3, #16
 80066d4:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b5e      	ldr	r3, [pc, #376]	; (8006854 <UART_SetConfig+0x348>)
 80066dc:	429a      	cmp	r2, r3
 80066de:	d001      	beq.n	80066e4 <UART_SetConfig+0x1d8>
 80066e0:	f000 fbe8 	bl	8006eb4 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066e4:	2323      	movs	r3, #35	; 0x23
 80066e6:	2258      	movs	r2, #88	; 0x58
 80066e8:	4694      	mov	ip, r2
 80066ea:	44bc      	add	ip, r7
 80066ec:	4463      	add	r3, ip
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d100      	bne.n	80066f6 <UART_SetConfig+0x1ea>
 80066f4:	e05e      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80066f6:	dc02      	bgt.n	80066fe <UART_SetConfig+0x1f2>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <UART_SetConfig+0x200>
 80066fc:	e174      	b.n	80069e8 <UART_SetConfig+0x4dc>
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d100      	bne.n	8006704 <UART_SetConfig+0x1f8>
 8006702:	e0c9      	b.n	8006898 <UART_SetConfig+0x38c>
 8006704:	2b08      	cmp	r3, #8
 8006706:	d100      	bne.n	800670a <UART_SetConfig+0x1fe>
 8006708:	e11a      	b.n	8006940 <UART_SetConfig+0x434>
 800670a:	e16d      	b.n	80069e8 <UART_SetConfig+0x4dc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800670c:	f7fe fe62 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8006710:	0002      	movs	r2, r0
 8006712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	d044      	beq.n	80067a4 <UART_SetConfig+0x298>
 800671a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	2b01      	cmp	r3, #1
 8006720:	d03e      	beq.n	80067a0 <UART_SetConfig+0x294>
 8006722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	2b02      	cmp	r3, #2
 8006728:	d038      	beq.n	800679c <UART_SetConfig+0x290>
 800672a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	2b03      	cmp	r3, #3
 8006730:	d032      	beq.n	8006798 <UART_SetConfig+0x28c>
 8006732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	2b04      	cmp	r3, #4
 8006738:	d02c      	beq.n	8006794 <UART_SetConfig+0x288>
 800673a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	2b05      	cmp	r3, #5
 8006740:	d026      	beq.n	8006790 <UART_SetConfig+0x284>
 8006742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	2b06      	cmp	r3, #6
 8006748:	d020      	beq.n	800678c <UART_SetConfig+0x280>
 800674a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	2b07      	cmp	r3, #7
 8006750:	d01a      	beq.n	8006788 <UART_SetConfig+0x27c>
 8006752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	2b08      	cmp	r3, #8
 8006758:	d014      	beq.n	8006784 <UART_SetConfig+0x278>
 800675a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	2b09      	cmp	r3, #9
 8006760:	d00e      	beq.n	8006780 <UART_SetConfig+0x274>
 8006762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	2b0a      	cmp	r3, #10
 8006768:	d008      	beq.n	800677c <UART_SetConfig+0x270>
 800676a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	2b0b      	cmp	r3, #11
 8006770:	d102      	bne.n	8006778 <UART_SetConfig+0x26c>
 8006772:	2380      	movs	r3, #128	; 0x80
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	e016      	b.n	80067a6 <UART_SetConfig+0x29a>
 8006778:	2301      	movs	r3, #1
 800677a:	e014      	b.n	80067a6 <UART_SetConfig+0x29a>
 800677c:	2380      	movs	r3, #128	; 0x80
 800677e:	e012      	b.n	80067a6 <UART_SetConfig+0x29a>
 8006780:	2340      	movs	r3, #64	; 0x40
 8006782:	e010      	b.n	80067a6 <UART_SetConfig+0x29a>
 8006784:	2320      	movs	r3, #32
 8006786:	e00e      	b.n	80067a6 <UART_SetConfig+0x29a>
 8006788:	2310      	movs	r3, #16
 800678a:	e00c      	b.n	80067a6 <UART_SetConfig+0x29a>
 800678c:	230c      	movs	r3, #12
 800678e:	e00a      	b.n	80067a6 <UART_SetConfig+0x29a>
 8006790:	230a      	movs	r3, #10
 8006792:	e008      	b.n	80067a6 <UART_SetConfig+0x29a>
 8006794:	2308      	movs	r3, #8
 8006796:	e006      	b.n	80067a6 <UART_SetConfig+0x29a>
 8006798:	2306      	movs	r3, #6
 800679a:	e004      	b.n	80067a6 <UART_SetConfig+0x29a>
 800679c:	2304      	movs	r3, #4
 800679e:	e002      	b.n	80067a6 <UART_SetConfig+0x29a>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e000      	b.n	80067a6 <UART_SetConfig+0x29a>
 80067a4:	2301      	movs	r3, #1
 80067a6:	0019      	movs	r1, r3
 80067a8:	0010      	movs	r0, r2
 80067aa:	f7f9 fcab 	bl	8000104 <__udivsi3>
 80067ae:	0003      	movs	r3, r0
 80067b0:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80067b2:	e120      	b.n	80069f6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80067b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d043      	beq.n	8006844 <UART_SetConfig+0x338>
 80067bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d03d      	beq.n	8006840 <UART_SetConfig+0x334>
 80067c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d037      	beq.n	800683c <UART_SetConfig+0x330>
 80067cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d031      	beq.n	8006838 <UART_SetConfig+0x32c>
 80067d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d02b      	beq.n	8006834 <UART_SetConfig+0x328>
 80067dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	2b05      	cmp	r3, #5
 80067e2:	d025      	beq.n	8006830 <UART_SetConfig+0x324>
 80067e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	2b06      	cmp	r3, #6
 80067ea:	d01f      	beq.n	800682c <UART_SetConfig+0x320>
 80067ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	2b07      	cmp	r3, #7
 80067f2:	d019      	beq.n	8006828 <UART_SetConfig+0x31c>
 80067f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d013      	beq.n	8006824 <UART_SetConfig+0x318>
 80067fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	2b09      	cmp	r3, #9
 8006802:	d00d      	beq.n	8006820 <UART_SetConfig+0x314>
 8006804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	2b0a      	cmp	r3, #10
 800680a:	d007      	beq.n	800681c <UART_SetConfig+0x310>
 800680c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	2b0b      	cmp	r3, #11
 8006812:	d101      	bne.n	8006818 <UART_SetConfig+0x30c>
 8006814:	4b14      	ldr	r3, [pc, #80]	; (8006868 <UART_SetConfig+0x35c>)
 8006816:	e016      	b.n	8006846 <UART_SetConfig+0x33a>
 8006818:	4b14      	ldr	r3, [pc, #80]	; (800686c <UART_SetConfig+0x360>)
 800681a:	e014      	b.n	8006846 <UART_SetConfig+0x33a>
 800681c:	4b14      	ldr	r3, [pc, #80]	; (8006870 <UART_SetConfig+0x364>)
 800681e:	e012      	b.n	8006846 <UART_SetConfig+0x33a>
 8006820:	4b14      	ldr	r3, [pc, #80]	; (8006874 <UART_SetConfig+0x368>)
 8006822:	e010      	b.n	8006846 <UART_SetConfig+0x33a>
 8006824:	4b14      	ldr	r3, [pc, #80]	; (8006878 <UART_SetConfig+0x36c>)
 8006826:	e00e      	b.n	8006846 <UART_SetConfig+0x33a>
 8006828:	4b14      	ldr	r3, [pc, #80]	; (800687c <UART_SetConfig+0x370>)
 800682a:	e00c      	b.n	8006846 <UART_SetConfig+0x33a>
 800682c:	4b14      	ldr	r3, [pc, #80]	; (8006880 <UART_SetConfig+0x374>)
 800682e:	e00a      	b.n	8006846 <UART_SetConfig+0x33a>
 8006830:	4b14      	ldr	r3, [pc, #80]	; (8006884 <UART_SetConfig+0x378>)
 8006832:	e008      	b.n	8006846 <UART_SetConfig+0x33a>
 8006834:	4b14      	ldr	r3, [pc, #80]	; (8006888 <UART_SetConfig+0x37c>)
 8006836:	e006      	b.n	8006846 <UART_SetConfig+0x33a>
 8006838:	4b14      	ldr	r3, [pc, #80]	; (800688c <UART_SetConfig+0x380>)
 800683a:	e004      	b.n	8006846 <UART_SetConfig+0x33a>
 800683c:	4b14      	ldr	r3, [pc, #80]	; (8006890 <UART_SetConfig+0x384>)
 800683e:	e002      	b.n	8006846 <UART_SetConfig+0x33a>
 8006840:	4b14      	ldr	r3, [pc, #80]	; (8006894 <UART_SetConfig+0x388>)
 8006842:	e000      	b.n	8006846 <UART_SetConfig+0x33a>
 8006844:	4b09      	ldr	r3, [pc, #36]	; (800686c <UART_SetConfig+0x360>)
 8006846:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8006848:	e0d5      	b.n	80069f6 <UART_SetConfig+0x4ea>
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	cfff69f3 	.word	0xcfff69f3
 8006850:	ffffcfff 	.word	0xffffcfff
 8006854:	40008000 	.word	0x40008000
 8006858:	11fff4ff 	.word	0x11fff4ff
 800685c:	40013800 	.word	0x40013800
 8006860:	40021000 	.word	0x40021000
 8006864:	40004400 	.word	0x40004400
 8006868:	0000f424 	.word	0x0000f424
 800686c:	00f42400 	.word	0x00f42400
 8006870:	0001e848 	.word	0x0001e848
 8006874:	0003d090 	.word	0x0003d090
 8006878:	0007a120 	.word	0x0007a120
 800687c:	000f4240 	.word	0x000f4240
 8006880:	00145855 	.word	0x00145855
 8006884:	00186a00 	.word	0x00186a00
 8006888:	001e8480 	.word	0x001e8480
 800688c:	0028b0aa 	.word	0x0028b0aa
 8006890:	003d0900 	.word	0x003d0900
 8006894:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006898:	f7fe fd10 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800689c:	0002      	movs	r2, r0
 800689e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d044      	beq.n	8006930 <UART_SetConfig+0x424>
 80068a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d03e      	beq.n	800692c <UART_SetConfig+0x420>
 80068ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d038      	beq.n	8006928 <UART_SetConfig+0x41c>
 80068b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d032      	beq.n	8006924 <UART_SetConfig+0x418>
 80068be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d02c      	beq.n	8006920 <UART_SetConfig+0x414>
 80068c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	2b05      	cmp	r3, #5
 80068cc:	d026      	beq.n	800691c <UART_SetConfig+0x410>
 80068ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	2b06      	cmp	r3, #6
 80068d4:	d020      	beq.n	8006918 <UART_SetConfig+0x40c>
 80068d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	2b07      	cmp	r3, #7
 80068dc:	d01a      	beq.n	8006914 <UART_SetConfig+0x408>
 80068de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d014      	beq.n	8006910 <UART_SetConfig+0x404>
 80068e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	2b09      	cmp	r3, #9
 80068ec:	d00e      	beq.n	800690c <UART_SetConfig+0x400>
 80068ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	2b0a      	cmp	r3, #10
 80068f4:	d008      	beq.n	8006908 <UART_SetConfig+0x3fc>
 80068f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	2b0b      	cmp	r3, #11
 80068fc:	d102      	bne.n	8006904 <UART_SetConfig+0x3f8>
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	e016      	b.n	8006932 <UART_SetConfig+0x426>
 8006904:	2301      	movs	r3, #1
 8006906:	e014      	b.n	8006932 <UART_SetConfig+0x426>
 8006908:	2380      	movs	r3, #128	; 0x80
 800690a:	e012      	b.n	8006932 <UART_SetConfig+0x426>
 800690c:	2340      	movs	r3, #64	; 0x40
 800690e:	e010      	b.n	8006932 <UART_SetConfig+0x426>
 8006910:	2320      	movs	r3, #32
 8006912:	e00e      	b.n	8006932 <UART_SetConfig+0x426>
 8006914:	2310      	movs	r3, #16
 8006916:	e00c      	b.n	8006932 <UART_SetConfig+0x426>
 8006918:	230c      	movs	r3, #12
 800691a:	e00a      	b.n	8006932 <UART_SetConfig+0x426>
 800691c:	230a      	movs	r3, #10
 800691e:	e008      	b.n	8006932 <UART_SetConfig+0x426>
 8006920:	2308      	movs	r3, #8
 8006922:	e006      	b.n	8006932 <UART_SetConfig+0x426>
 8006924:	2306      	movs	r3, #6
 8006926:	e004      	b.n	8006932 <UART_SetConfig+0x426>
 8006928:	2304      	movs	r3, #4
 800692a:	e002      	b.n	8006932 <UART_SetConfig+0x426>
 800692c:	2302      	movs	r3, #2
 800692e:	e000      	b.n	8006932 <UART_SetConfig+0x426>
 8006930:	2301      	movs	r3, #1
 8006932:	0019      	movs	r1, r3
 8006934:	0010      	movs	r0, r2
 8006936:	f7f9 fbe5 	bl	8000104 <__udivsi3>
 800693a:	0003      	movs	r3, r0
 800693c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800693e:	e05a      	b.n	80069f6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	d04b      	beq.n	80069e0 <UART_SetConfig+0x4d4>
 8006948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	2b01      	cmp	r3, #1
 800694e:	d044      	beq.n	80069da <UART_SetConfig+0x4ce>
 8006950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	2b02      	cmp	r3, #2
 8006956:	d03d      	beq.n	80069d4 <UART_SetConfig+0x4c8>
 8006958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	2b03      	cmp	r3, #3
 800695e:	d037      	beq.n	80069d0 <UART_SetConfig+0x4c4>
 8006960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	2b04      	cmp	r3, #4
 8006966:	d030      	beq.n	80069ca <UART_SetConfig+0x4be>
 8006968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	2b05      	cmp	r3, #5
 800696e:	d02a      	beq.n	80069c6 <UART_SetConfig+0x4ba>
 8006970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	2b06      	cmp	r3, #6
 8006976:	d024      	beq.n	80069c2 <UART_SetConfig+0x4b6>
 8006978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2b07      	cmp	r3, #7
 800697e:	d01d      	beq.n	80069bc <UART_SetConfig+0x4b0>
 8006980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	2b08      	cmp	r3, #8
 8006986:	d016      	beq.n	80069b6 <UART_SetConfig+0x4aa>
 8006988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	2b09      	cmp	r3, #9
 800698e:	d00f      	beq.n	80069b0 <UART_SetConfig+0x4a4>
 8006990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	2b0a      	cmp	r3, #10
 8006996:	d008      	beq.n	80069aa <UART_SetConfig+0x49e>
 8006998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	2b0b      	cmp	r3, #11
 800699e:	d101      	bne.n	80069a4 <UART_SetConfig+0x498>
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	e01f      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	e01c      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069aa:	2380      	movs	r3, #128	; 0x80
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	e019      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069b0:	2380      	movs	r3, #128	; 0x80
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	e016      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069b6:	2380      	movs	r3, #128	; 0x80
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	e013      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069bc:	2380      	movs	r3, #128	; 0x80
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	e010      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069c2:	4bbf      	ldr	r3, [pc, #764]	; (8006cc0 <UART_SetConfig+0x7b4>)
 80069c4:	e00e      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069c6:	4bbf      	ldr	r3, [pc, #764]	; (8006cc4 <UART_SetConfig+0x7b8>)
 80069c8:	e00c      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069ca:	2380      	movs	r3, #128	; 0x80
 80069cc:	015b      	lsls	r3, r3, #5
 80069ce:	e009      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069d0:	4bbd      	ldr	r3, [pc, #756]	; (8006cc8 <UART_SetConfig+0x7bc>)
 80069d2:	e007      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069d4:	2380      	movs	r3, #128	; 0x80
 80069d6:	019b      	lsls	r3, r3, #6
 80069d8:	e004      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069da:	2380      	movs	r3, #128	; 0x80
 80069dc:	01db      	lsls	r3, r3, #7
 80069de:	e001      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80069e0:	2380      	movs	r3, #128	; 0x80
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80069e6:	e006      	b.n	80069f6 <UART_SetConfig+0x4ea>
      default:
        ret = HAL_ERROR;
 80069e8:	231b      	movs	r3, #27
 80069ea:	2258      	movs	r2, #88	; 0x58
 80069ec:	18ba      	adds	r2, r7, r2
 80069ee:	18d2      	adds	r2, r2, r3
 80069f0:	2301      	movs	r3, #1
 80069f2:	7013      	strb	r3, [r2, #0]
        break;
 80069f4:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80069f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <UART_SetConfig+0x4f4>
 80069fc:	f000 fe14 	bl	8007628 <UART_SetConfig+0x111c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	0013      	movs	r3, r2
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	189a      	adds	r2, r3, r2
 8006a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d305      	bcc.n	8006a1c <UART_SetConfig+0x510>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d908      	bls.n	8006a2e <UART_SetConfig+0x522>
      {
        ret = HAL_ERROR;
 8006a1c:	231b      	movs	r3, #27
 8006a1e:	2258      	movs	r2, #88	; 0x58
 8006a20:	4694      	mov	ip, r2
 8006a22:	44bc      	add	ip, r7
 8006a24:	4463      	add	r3, ip
 8006a26:	2201      	movs	r2, #1
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	f000 fdfd 	bl	8007628 <UART_SetConfig+0x111c>
      }
      else
      {
        switch (clocksource)
 8006a2e:	2323      	movs	r3, #35	; 0x23
 8006a30:	2258      	movs	r2, #88	; 0x58
 8006a32:	4694      	mov	ip, r2
 8006a34:	44bc      	add	ip, r7
 8006a36:	4463      	add	r3, ip
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d100      	bne.n	8006a40 <UART_SetConfig+0x534>
 8006a3e:	e08c      	b.n	8006b5a <UART_SetConfig+0x64e>
 8006a40:	dc02      	bgt.n	8006a48 <UART_SetConfig+0x53c>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <UART_SetConfig+0x54a>
 8006a46:	e216      	b.n	8006e76 <UART_SetConfig+0x96a>
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d100      	bne.n	8006a4e <UART_SetConfig+0x542>
 8006a4c:	e0f2      	b.n	8006c34 <UART_SetConfig+0x728>
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d100      	bne.n	8006a54 <UART_SetConfig+0x548>
 8006a52:	e199      	b.n	8006d88 <UART_SetConfig+0x87c>
 8006a54:	e20f      	b.n	8006e76 <UART_SetConfig+0x96a>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006a56:	f7fe fcbd 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8006a5a:	0003      	movs	r3, r0
 8006a5c:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a62:	2300      	movs	r3, #0
 8006a64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d050      	beq.n	8006b10 <UART_SetConfig+0x604>
 8006a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d049      	beq.n	8006b0a <UART_SetConfig+0x5fe>
 8006a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d042      	beq.n	8006b04 <UART_SetConfig+0x5f8>
 8006a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d03b      	beq.n	8006afe <UART_SetConfig+0x5f2>
 8006a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d034      	beq.n	8006af8 <UART_SetConfig+0x5ec>
 8006a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d02d      	beq.n	8006af2 <UART_SetConfig+0x5e6>
 8006a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	2b06      	cmp	r3, #6
 8006a9c:	d026      	beq.n	8006aec <UART_SetConfig+0x5e0>
 8006a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	2b07      	cmp	r3, #7
 8006aa4:	d01f      	beq.n	8006ae6 <UART_SetConfig+0x5da>
 8006aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d018      	beq.n	8006ae0 <UART_SetConfig+0x5d4>
 8006aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	2b09      	cmp	r3, #9
 8006ab4:	d011      	beq.n	8006ada <UART_SetConfig+0x5ce>
 8006ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	2b0a      	cmp	r3, #10
 8006abc:	d00a      	beq.n	8006ad4 <UART_SetConfig+0x5c8>
 8006abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	2b0b      	cmp	r3, #11
 8006ac4:	d103      	bne.n	8006ace <UART_SetConfig+0x5c2>
 8006ac6:	2380      	movs	r3, #128	; 0x80
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	2400      	movs	r4, #0
 8006acc:	e022      	b.n	8006b14 <UART_SetConfig+0x608>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	2400      	movs	r4, #0
 8006ad2:	e01f      	b.n	8006b14 <UART_SetConfig+0x608>
 8006ad4:	2380      	movs	r3, #128	; 0x80
 8006ad6:	2400      	movs	r4, #0
 8006ad8:	e01c      	b.n	8006b14 <UART_SetConfig+0x608>
 8006ada:	2340      	movs	r3, #64	; 0x40
 8006adc:	2400      	movs	r4, #0
 8006ade:	e019      	b.n	8006b14 <UART_SetConfig+0x608>
 8006ae0:	2320      	movs	r3, #32
 8006ae2:	2400      	movs	r4, #0
 8006ae4:	e016      	b.n	8006b14 <UART_SetConfig+0x608>
 8006ae6:	2310      	movs	r3, #16
 8006ae8:	2400      	movs	r4, #0
 8006aea:	e013      	b.n	8006b14 <UART_SetConfig+0x608>
 8006aec:	230c      	movs	r3, #12
 8006aee:	2400      	movs	r4, #0
 8006af0:	e010      	b.n	8006b14 <UART_SetConfig+0x608>
 8006af2:	230a      	movs	r3, #10
 8006af4:	2400      	movs	r4, #0
 8006af6:	e00d      	b.n	8006b14 <UART_SetConfig+0x608>
 8006af8:	2308      	movs	r3, #8
 8006afa:	2400      	movs	r4, #0
 8006afc:	e00a      	b.n	8006b14 <UART_SetConfig+0x608>
 8006afe:	2306      	movs	r3, #6
 8006b00:	2400      	movs	r4, #0
 8006b02:	e007      	b.n	8006b14 <UART_SetConfig+0x608>
 8006b04:	2304      	movs	r3, #4
 8006b06:	2400      	movs	r4, #0
 8006b08:	e004      	b.n	8006b14 <UART_SetConfig+0x608>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	2400      	movs	r4, #0
 8006b0e:	e001      	b.n	8006b14 <UART_SetConfig+0x608>
 8006b10:	2301      	movs	r3, #1
 8006b12:	2400      	movs	r4, #0
 8006b14:	001a      	movs	r2, r3
 8006b16:	0023      	movs	r3, r4
 8006b18:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006b1a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006b1c:	f7f9 fca2 	bl	8000464 <__aeabi_uldivmod>
 8006b20:	0003      	movs	r3, r0
 8006b22:	000c      	movs	r4, r1
 8006b24:	0e1a      	lsrs	r2, r3, #24
 8006b26:	0226      	lsls	r6, r4, #8
 8006b28:	4316      	orrs	r6, r2
 8006b2a:	021d      	lsls	r5, r3, #8
 8006b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	085b      	lsrs	r3, r3, #1
 8006b32:	643b      	str	r3, [r7, #64]	; 0x40
 8006b34:	2300      	movs	r3, #0
 8006b36:	647b      	str	r3, [r7, #68]	; 0x44
 8006b38:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b3c:	1940      	adds	r0, r0, r5
 8006b3e:	4171      	adcs	r1, r6
 8006b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b46:	2300      	movs	r3, #0
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4e:	f7f9 fc89 	bl	8000464 <__aeabi_uldivmod>
 8006b52:	0003      	movs	r3, r0
 8006b54:	000c      	movs	r4, r1
 8006b56:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8006b58:	e195      	b.n	8006e86 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d04f      	beq.n	8006c02 <UART_SetConfig+0x6f6>
 8006b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d048      	beq.n	8006bfc <UART_SetConfig+0x6f0>
 8006b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d041      	beq.n	8006bf6 <UART_SetConfig+0x6ea>
 8006b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d03a      	beq.n	8006bf0 <UART_SetConfig+0x6e4>
 8006b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d033      	beq.n	8006bea <UART_SetConfig+0x6de>
 8006b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	2b05      	cmp	r3, #5
 8006b88:	d02c      	beq.n	8006be4 <UART_SetConfig+0x6d8>
 8006b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b06      	cmp	r3, #6
 8006b90:	d025      	beq.n	8006bde <UART_SetConfig+0x6d2>
 8006b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	2b07      	cmp	r3, #7
 8006b98:	d01e      	beq.n	8006bd8 <UART_SetConfig+0x6cc>
 8006b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d017      	beq.n	8006bd2 <UART_SetConfig+0x6c6>
 8006ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	2b09      	cmp	r3, #9
 8006ba8:	d010      	beq.n	8006bcc <UART_SetConfig+0x6c0>
 8006baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	2b0a      	cmp	r3, #10
 8006bb0:	d009      	beq.n	8006bc6 <UART_SetConfig+0x6ba>
 8006bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b0b      	cmp	r3, #11
 8006bb8:	d102      	bne.n	8006bc0 <UART_SetConfig+0x6b4>
 8006bba:	4b44      	ldr	r3, [pc, #272]	; (8006ccc <UART_SetConfig+0x7c0>)
 8006bbc:	2400      	movs	r4, #0
 8006bbe:	e022      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006bc0:	4b43      	ldr	r3, [pc, #268]	; (8006cd0 <UART_SetConfig+0x7c4>)
 8006bc2:	2400      	movs	r4, #0
 8006bc4:	e01f      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006bc6:	4b43      	ldr	r3, [pc, #268]	; (8006cd4 <UART_SetConfig+0x7c8>)
 8006bc8:	2400      	movs	r4, #0
 8006bca:	e01c      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006bcc:	4b42      	ldr	r3, [pc, #264]	; (8006cd8 <UART_SetConfig+0x7cc>)
 8006bce:	2400      	movs	r4, #0
 8006bd0:	e019      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006bd2:	4b42      	ldr	r3, [pc, #264]	; (8006cdc <UART_SetConfig+0x7d0>)
 8006bd4:	2400      	movs	r4, #0
 8006bd6:	e016      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006bd8:	4b41      	ldr	r3, [pc, #260]	; (8006ce0 <UART_SetConfig+0x7d4>)
 8006bda:	2400      	movs	r4, #0
 8006bdc:	e013      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006bde:	4b41      	ldr	r3, [pc, #260]	; (8006ce4 <UART_SetConfig+0x7d8>)
 8006be0:	2400      	movs	r4, #0
 8006be2:	e010      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006be4:	4b40      	ldr	r3, [pc, #256]	; (8006ce8 <UART_SetConfig+0x7dc>)
 8006be6:	2400      	movs	r4, #0
 8006be8:	e00d      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006bea:	4b40      	ldr	r3, [pc, #256]	; (8006cec <UART_SetConfig+0x7e0>)
 8006bec:	2400      	movs	r4, #0
 8006bee:	e00a      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006bf0:	4b3f      	ldr	r3, [pc, #252]	; (8006cf0 <UART_SetConfig+0x7e4>)
 8006bf2:	2400      	movs	r4, #0
 8006bf4:	e007      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006bf6:	4b3f      	ldr	r3, [pc, #252]	; (8006cf4 <UART_SetConfig+0x7e8>)
 8006bf8:	2400      	movs	r4, #0
 8006bfa:	e004      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006bfc:	4b3e      	ldr	r3, [pc, #248]	; (8006cf8 <UART_SetConfig+0x7ec>)
 8006bfe:	2400      	movs	r4, #0
 8006c00:	e001      	b.n	8006c06 <UART_SetConfig+0x6fa>
 8006c02:	4b33      	ldr	r3, [pc, #204]	; (8006cd0 <UART_SetConfig+0x7c4>)
 8006c04:	2400      	movs	r4, #0
 8006c06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c08:	6852      	ldr	r2, [r2, #4]
 8006c0a:	0852      	lsrs	r2, r2, #1
 8006c0c:	633a      	str	r2, [r7, #48]	; 0x30
 8006c0e:	2200      	movs	r2, #0
 8006c10:	637a      	str	r2, [r7, #52]	; 0x34
 8006c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c16:	18c0      	adds	r0, r0, r3
 8006c18:	4161      	adcs	r1, r4
 8006c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c20:	2300      	movs	r3, #0
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	f7f9 fc1c 	bl	8000464 <__aeabi_uldivmod>
 8006c2c:	0003      	movs	r3, r0
 8006c2e:	000c      	movs	r4, r1
 8006c30:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8006c32:	e128      	b.n	8006e86 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006c34:	f7fe fb42 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006c38:	0003      	movs	r3, r0
 8006c3a:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c3e:	623b      	str	r3, [r7, #32]
 8006c40:	2300      	movs	r3, #0
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
 8006c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d100      	bne.n	8006c4e <UART_SetConfig+0x742>
 8006c4c:	e071      	b.n	8006d32 <UART_SetConfig+0x826>
 8006c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d100      	bne.n	8006c58 <UART_SetConfig+0x74c>
 8006c56:	e069      	b.n	8006d2c <UART_SetConfig+0x820>
 8006c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d100      	bne.n	8006c62 <UART_SetConfig+0x756>
 8006c60:	e061      	b.n	8006d26 <UART_SetConfig+0x81a>
 8006c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d05a      	beq.n	8006d20 <UART_SetConfig+0x814>
 8006c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d053      	beq.n	8006d1a <UART_SetConfig+0x80e>
 8006c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b05      	cmp	r3, #5
 8006c78:	d04c      	beq.n	8006d14 <UART_SetConfig+0x808>
 8006c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b06      	cmp	r3, #6
 8006c80:	d045      	beq.n	8006d0e <UART_SetConfig+0x802>
 8006c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b07      	cmp	r3, #7
 8006c88:	d03e      	beq.n	8006d08 <UART_SetConfig+0x7fc>
 8006c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d037      	beq.n	8006d02 <UART_SetConfig+0x7f6>
 8006c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b09      	cmp	r3, #9
 8006c98:	d030      	beq.n	8006cfc <UART_SetConfig+0x7f0>
 8006c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b0a      	cmp	r3, #10
 8006ca0:	d00a      	beq.n	8006cb8 <UART_SetConfig+0x7ac>
 8006ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2b0b      	cmp	r3, #11
 8006ca8:	d103      	bne.n	8006cb2 <UART_SetConfig+0x7a6>
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	2400      	movs	r4, #0
 8006cb0:	e041      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	e03e      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	2400      	movs	r4, #0
 8006cbc:	e03b      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	00000aaa 	.word	0x00000aaa
 8006cc4:	00000ccc 	.word	0x00000ccc
 8006cc8:	00001555 	.word	0x00001555
 8006ccc:	00f42400 	.word	0x00f42400
 8006cd0:	f4240000 	.word	0xf4240000
 8006cd4:	01e84800 	.word	0x01e84800
 8006cd8:	03d09000 	.word	0x03d09000
 8006cdc:	07a12000 	.word	0x07a12000
 8006ce0:	0f424000 	.word	0x0f424000
 8006ce4:	14585500 	.word	0x14585500
 8006ce8:	186a0000 	.word	0x186a0000
 8006cec:	1e848000 	.word	0x1e848000
 8006cf0:	28b0aa00 	.word	0x28b0aa00
 8006cf4:	3d090000 	.word	0x3d090000
 8006cf8:	7a120000 	.word	0x7a120000
 8006cfc:	2340      	movs	r3, #64	; 0x40
 8006cfe:	2400      	movs	r4, #0
 8006d00:	e019      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006d02:	2320      	movs	r3, #32
 8006d04:	2400      	movs	r4, #0
 8006d06:	e016      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	2400      	movs	r4, #0
 8006d0c:	e013      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	2400      	movs	r4, #0
 8006d12:	e010      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006d14:	230a      	movs	r3, #10
 8006d16:	2400      	movs	r4, #0
 8006d18:	e00d      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	2400      	movs	r4, #0
 8006d1e:	e00a      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006d20:	2306      	movs	r3, #6
 8006d22:	2400      	movs	r4, #0
 8006d24:	e007      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006d26:	2304      	movs	r3, #4
 8006d28:	2400      	movs	r4, #0
 8006d2a:	e004      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	2400      	movs	r4, #0
 8006d30:	e001      	b.n	8006d36 <UART_SetConfig+0x82a>
 8006d32:	2301      	movs	r3, #1
 8006d34:	2400      	movs	r4, #0
 8006d36:	001a      	movs	r2, r3
 8006d38:	0023      	movs	r3, r4
 8006d3a:	6a38      	ldr	r0, [r7, #32]
 8006d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d3e:	f7f9 fb91 	bl	8000464 <__aeabi_uldivmod>
 8006d42:	0003      	movs	r3, r0
 8006d44:	000c      	movs	r4, r1
 8006d46:	0e1a      	lsrs	r2, r3, #24
 8006d48:	0221      	lsls	r1, r4, #8
 8006d4a:	6579      	str	r1, [r7, #84]	; 0x54
 8006d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d4e:	4311      	orrs	r1, r2
 8006d50:	6579      	str	r1, [r7, #84]	; 0x54
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	653b      	str	r3, [r7, #80]	; 0x50
 8006d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
 8006d62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	69fc      	ldr	r4, [r7, #28]
 8006d6a:	18c0      	adds	r0, r0, r3
 8006d6c:	4161      	adcs	r1, r4
 8006d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f7f9 fb72 	bl	8000464 <__aeabi_uldivmod>
 8006d80:	0003      	movs	r3, r0
 8006d82:	000c      	movs	r4, r1
 8006d84:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8006d86:	e07e      	b.n	8006e86 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d058      	beq.n	8006e42 <UART_SetConfig+0x936>
 8006d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d050      	beq.n	8006e3a <UART_SetConfig+0x92e>
 8006d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d048      	beq.n	8006e32 <UART_SetConfig+0x926>
 8006da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d041      	beq.n	8006e2c <UART_SetConfig+0x920>
 8006da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d039      	beq.n	8006e24 <UART_SetConfig+0x918>
 8006db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	2b05      	cmp	r3, #5
 8006db6:	d032      	beq.n	8006e1e <UART_SetConfig+0x912>
 8006db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	2b06      	cmp	r3, #6
 8006dbe:	d02b      	beq.n	8006e18 <UART_SetConfig+0x90c>
 8006dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b07      	cmp	r3, #7
 8006dc6:	d023      	beq.n	8006e10 <UART_SetConfig+0x904>
 8006dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d01b      	beq.n	8006e08 <UART_SetConfig+0x8fc>
 8006dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	d013      	beq.n	8006e00 <UART_SetConfig+0x8f4>
 8006dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b0a      	cmp	r3, #10
 8006dde:	d00b      	beq.n	8006df8 <UART_SetConfig+0x8ec>
 8006de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	2b0b      	cmp	r3, #11
 8006de6:	d103      	bne.n	8006df0 <UART_SetConfig+0x8e4>
 8006de8:	2380      	movs	r3, #128	; 0x80
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	2400      	movs	r4, #0
 8006dee:	e02b      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006df0:	2380      	movs	r3, #128	; 0x80
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	2400      	movs	r4, #0
 8006df6:	e027      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006df8:	2380      	movs	r3, #128	; 0x80
 8006dfa:	025b      	lsls	r3, r3, #9
 8006dfc:	2400      	movs	r4, #0
 8006dfe:	e023      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006e00:	2380      	movs	r3, #128	; 0x80
 8006e02:	029b      	lsls	r3, r3, #10
 8006e04:	2400      	movs	r4, #0
 8006e06:	e01f      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006e08:	2380      	movs	r3, #128	; 0x80
 8006e0a:	02db      	lsls	r3, r3, #11
 8006e0c:	2400      	movs	r4, #0
 8006e0e:	e01b      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	031b      	lsls	r3, r3, #12
 8006e14:	2400      	movs	r4, #0
 8006e16:	e017      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006e18:	4bb7      	ldr	r3, [pc, #732]	; (80070f8 <UART_SetConfig+0xbec>)
 8006e1a:	2400      	movs	r4, #0
 8006e1c:	e014      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006e1e:	4bb7      	ldr	r3, [pc, #732]	; (80070fc <UART_SetConfig+0xbf0>)
 8006e20:	2400      	movs	r4, #0
 8006e22:	e011      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006e24:	2380      	movs	r3, #128	; 0x80
 8006e26:	035b      	lsls	r3, r3, #13
 8006e28:	2400      	movs	r4, #0
 8006e2a:	e00d      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006e2c:	4bb4      	ldr	r3, [pc, #720]	; (8007100 <UART_SetConfig+0xbf4>)
 8006e2e:	2400      	movs	r4, #0
 8006e30:	e00a      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006e32:	2380      	movs	r3, #128	; 0x80
 8006e34:	039b      	lsls	r3, r3, #14
 8006e36:	2400      	movs	r4, #0
 8006e38:	e006      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006e3a:	2380      	movs	r3, #128	; 0x80
 8006e3c:	03db      	lsls	r3, r3, #15
 8006e3e:	2400      	movs	r4, #0
 8006e40:	e002      	b.n	8006e48 <UART_SetConfig+0x93c>
 8006e42:	2380      	movs	r3, #128	; 0x80
 8006e44:	041b      	lsls	r3, r3, #16
 8006e46:	2400      	movs	r4, #0
 8006e48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e4a:	6852      	ldr	r2, [r2, #4]
 8006e4c:	0852      	lsrs	r2, r2, #1
 8006e4e:	60ba      	str	r2, [r7, #8]
 8006e50:	2200      	movs	r2, #0
 8006e52:	60fa      	str	r2, [r7, #12]
 8006e54:	68b8      	ldr	r0, [r7, #8]
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	18c0      	adds	r0, r0, r3
 8006e5a:	4161      	adcs	r1, r4
 8006e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	603b      	str	r3, [r7, #0]
 8006e62:	2300      	movs	r3, #0
 8006e64:	607b      	str	r3, [r7, #4]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f7f9 fafb 	bl	8000464 <__aeabi_uldivmod>
 8006e6e:	0003      	movs	r3, r0
 8006e70:	000c      	movs	r4, r1
 8006e72:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8006e74:	e007      	b.n	8006e86 <UART_SetConfig+0x97a>
          default:
            ret = HAL_ERROR;
 8006e76:	231b      	movs	r3, #27
 8006e78:	2258      	movs	r2, #88	; 0x58
 8006e7a:	4694      	mov	ip, r2
 8006e7c:	44bc      	add	ip, r7
 8006e7e:	4463      	add	r3, ip
 8006e80:	2201      	movs	r2, #1
 8006e82:	701a      	strb	r2, [r3, #0]
            break;
 8006e84:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e88:	4a9e      	ldr	r2, [pc, #632]	; (8007104 <UART_SetConfig+0xbf8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d909      	bls.n	8006ea2 <UART_SetConfig+0x996>
 8006e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e90:	4a9d      	ldr	r2, [pc, #628]	; (8007108 <UART_SetConfig+0xbfc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d805      	bhi.n	8006ea2 <UART_SetConfig+0x996>
        {
          huart->Instance->BRR = usartdiv;
 8006e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	f000 fbc3 	bl	8007628 <UART_SetConfig+0x111c>
        }
        else
        {
          ret = HAL_ERROR;
 8006ea2:	231b      	movs	r3, #27
 8006ea4:	2258      	movs	r2, #88	; 0x58
 8006ea6:	4694      	mov	ip, r2
 8006ea8:	44bc      	add	ip, r7
 8006eaa:	4463      	add	r3, ip
 8006eac:	2201      	movs	r2, #1
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	f000 fbba 	bl	8007628 <UART_SetConfig+0x111c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	2380      	movs	r3, #128	; 0x80
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d000      	beq.n	8006ec2 <UART_SetConfig+0x9b6>
 8006ec0:	e1e6      	b.n	8007290 <UART_SetConfig+0xd84>
  {
    switch (clocksource)
 8006ec2:	2323      	movs	r3, #35	; 0x23
 8006ec4:	2258      	movs	r2, #88	; 0x58
 8006ec6:	4694      	mov	ip, r2
 8006ec8:	44bc      	add	ip, r7
 8006eca:	4463      	add	r3, ip
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d100      	bne.n	8006ed4 <UART_SetConfig+0x9c8>
 8006ed2:	e06c      	b.n	8006fae <UART_SetConfig+0xaa2>
 8006ed4:	dc02      	bgt.n	8006edc <UART_SetConfig+0x9d0>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <UART_SetConfig+0x9de>
 8006eda:	e1a5      	b.n	8007228 <UART_SetConfig+0xd1c>
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d100      	bne.n	8006ee2 <UART_SetConfig+0x9d6>
 8006ee0:	e0bc      	b.n	800705c <UART_SetConfig+0xb50>
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d100      	bne.n	8006ee8 <UART_SetConfig+0x9dc>
 8006ee6:	e13e      	b.n	8007166 <UART_SetConfig+0xc5a>
 8006ee8:	e19e      	b.n	8007228 <UART_SetConfig+0xd1c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eea:	f7fe fa73 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8006eee:	0003      	movs	r3, r0
 8006ef0:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d044      	beq.n	8006f84 <UART_SetConfig+0xa78>
 8006efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d03e      	beq.n	8006f80 <UART_SetConfig+0xa74>
 8006f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d038      	beq.n	8006f7c <UART_SetConfig+0xa70>
 8006f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d032      	beq.n	8006f78 <UART_SetConfig+0xa6c>
 8006f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d02c      	beq.n	8006f74 <UART_SetConfig+0xa68>
 8006f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2b05      	cmp	r3, #5
 8006f20:	d026      	beq.n	8006f70 <UART_SetConfig+0xa64>
 8006f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2b06      	cmp	r3, #6
 8006f28:	d020      	beq.n	8006f6c <UART_SetConfig+0xa60>
 8006f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b07      	cmp	r3, #7
 8006f30:	d01a      	beq.n	8006f68 <UART_SetConfig+0xa5c>
 8006f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	d014      	beq.n	8006f64 <UART_SetConfig+0xa58>
 8006f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b09      	cmp	r3, #9
 8006f40:	d00e      	beq.n	8006f60 <UART_SetConfig+0xa54>
 8006f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	2b0a      	cmp	r3, #10
 8006f48:	d008      	beq.n	8006f5c <UART_SetConfig+0xa50>
 8006f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	2b0b      	cmp	r3, #11
 8006f50:	d102      	bne.n	8006f58 <UART_SetConfig+0xa4c>
 8006f52:	2380      	movs	r3, #128	; 0x80
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	e016      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e014      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	e012      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f60:	2340      	movs	r3, #64	; 0x40
 8006f62:	e010      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f64:	2320      	movs	r3, #32
 8006f66:	e00e      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	e00c      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f6c:	230c      	movs	r3, #12
 8006f6e:	e00a      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f70:	230a      	movs	r3, #10
 8006f72:	e008      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f74:	2308      	movs	r3, #8
 8006f76:	e006      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f78:	2306      	movs	r3, #6
 8006f7a:	e004      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	e002      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e000      	b.n	8006f86 <UART_SetConfig+0xa7a>
 8006f84:	2301      	movs	r3, #1
 8006f86:	0019      	movs	r1, r3
 8006f88:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006f8a:	f7f9 f8bb 	bl	8000104 <__udivsi3>
 8006f8e:	0003      	movs	r3, r0
 8006f90:	005a      	lsls	r2, r3, #1
 8006f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	18d2      	adds	r2, r2, r3
 8006f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	0019      	movs	r1, r3
 8006fa0:	0010      	movs	r0, r2
 8006fa2:	f7f9 f8af 	bl	8000104 <__udivsi3>
 8006fa6:	0003      	movs	r3, r0
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8006fac:	e144      	b.n	8007238 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d043      	beq.n	800703e <UART_SetConfig+0xb32>
 8006fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d03d      	beq.n	800703a <UART_SetConfig+0xb2e>
 8006fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d037      	beq.n	8007036 <UART_SetConfig+0xb2a>
 8006fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d031      	beq.n	8007032 <UART_SetConfig+0xb26>
 8006fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d02b      	beq.n	800702e <UART_SetConfig+0xb22>
 8006fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	d025      	beq.n	800702a <UART_SetConfig+0xb1e>
 8006fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	2b06      	cmp	r3, #6
 8006fe4:	d01f      	beq.n	8007026 <UART_SetConfig+0xb1a>
 8006fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2b07      	cmp	r3, #7
 8006fec:	d019      	beq.n	8007022 <UART_SetConfig+0xb16>
 8006fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d013      	beq.n	800701e <UART_SetConfig+0xb12>
 8006ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	2b09      	cmp	r3, #9
 8006ffc:	d00d      	beq.n	800701a <UART_SetConfig+0xb0e>
 8006ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	2b0a      	cmp	r3, #10
 8007004:	d007      	beq.n	8007016 <UART_SetConfig+0xb0a>
 8007006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	2b0b      	cmp	r3, #11
 800700c:	d101      	bne.n	8007012 <UART_SetConfig+0xb06>
 800700e:	4b3f      	ldr	r3, [pc, #252]	; (800710c <UART_SetConfig+0xc00>)
 8007010:	e016      	b.n	8007040 <UART_SetConfig+0xb34>
 8007012:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <UART_SetConfig+0xc04>)
 8007014:	e014      	b.n	8007040 <UART_SetConfig+0xb34>
 8007016:	4b3f      	ldr	r3, [pc, #252]	; (8007114 <UART_SetConfig+0xc08>)
 8007018:	e012      	b.n	8007040 <UART_SetConfig+0xb34>
 800701a:	4b3f      	ldr	r3, [pc, #252]	; (8007118 <UART_SetConfig+0xc0c>)
 800701c:	e010      	b.n	8007040 <UART_SetConfig+0xb34>
 800701e:	4b3f      	ldr	r3, [pc, #252]	; (800711c <UART_SetConfig+0xc10>)
 8007020:	e00e      	b.n	8007040 <UART_SetConfig+0xb34>
 8007022:	4b3f      	ldr	r3, [pc, #252]	; (8007120 <UART_SetConfig+0xc14>)
 8007024:	e00c      	b.n	8007040 <UART_SetConfig+0xb34>
 8007026:	4b3f      	ldr	r3, [pc, #252]	; (8007124 <UART_SetConfig+0xc18>)
 8007028:	e00a      	b.n	8007040 <UART_SetConfig+0xb34>
 800702a:	4b3f      	ldr	r3, [pc, #252]	; (8007128 <UART_SetConfig+0xc1c>)
 800702c:	e008      	b.n	8007040 <UART_SetConfig+0xb34>
 800702e:	4b3f      	ldr	r3, [pc, #252]	; (800712c <UART_SetConfig+0xc20>)
 8007030:	e006      	b.n	8007040 <UART_SetConfig+0xb34>
 8007032:	4b3f      	ldr	r3, [pc, #252]	; (8007130 <UART_SetConfig+0xc24>)
 8007034:	e004      	b.n	8007040 <UART_SetConfig+0xb34>
 8007036:	4b3f      	ldr	r3, [pc, #252]	; (8007134 <UART_SetConfig+0xc28>)
 8007038:	e002      	b.n	8007040 <UART_SetConfig+0xb34>
 800703a:	4b3f      	ldr	r3, [pc, #252]	; (8007138 <UART_SetConfig+0xc2c>)
 800703c:	e000      	b.n	8007040 <UART_SetConfig+0xb34>
 800703e:	4b34      	ldr	r3, [pc, #208]	; (8007110 <UART_SetConfig+0xc04>)
 8007040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007042:	6852      	ldr	r2, [r2, #4]
 8007044:	0852      	lsrs	r2, r2, #1
 8007046:	189a      	adds	r2, r3, r2
 8007048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	0019      	movs	r1, r3
 800704e:	0010      	movs	r0, r2
 8007050:	f7f9 f858 	bl	8000104 <__udivsi3>
 8007054:	0003      	movs	r3, r0
 8007056:	b29b      	uxth	r3, r3
 8007058:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800705a:	e0ed      	b.n	8007238 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800705c:	f7fe f92e 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8007060:	0003      	movs	r3, r0
 8007062:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	d100      	bne.n	800706e <UART_SetConfig+0xb62>
 800706c:	e066      	b.n	800713c <UART_SetConfig+0xc30>
 800706e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b01      	cmp	r3, #1
 8007074:	d03e      	beq.n	80070f4 <UART_SetConfig+0xbe8>
 8007076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	2b02      	cmp	r3, #2
 800707c:	d038      	beq.n	80070f0 <UART_SetConfig+0xbe4>
 800707e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	2b03      	cmp	r3, #3
 8007084:	d032      	beq.n	80070ec <UART_SetConfig+0xbe0>
 8007086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	2b04      	cmp	r3, #4
 800708c:	d02c      	beq.n	80070e8 <UART_SetConfig+0xbdc>
 800708e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	2b05      	cmp	r3, #5
 8007094:	d026      	beq.n	80070e4 <UART_SetConfig+0xbd8>
 8007096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	2b06      	cmp	r3, #6
 800709c:	d020      	beq.n	80070e0 <UART_SetConfig+0xbd4>
 800709e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	2b07      	cmp	r3, #7
 80070a4:	d01a      	beq.n	80070dc <UART_SetConfig+0xbd0>
 80070a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d014      	beq.n	80070d8 <UART_SetConfig+0xbcc>
 80070ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	d00e      	beq.n	80070d4 <UART_SetConfig+0xbc8>
 80070b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	2b0a      	cmp	r3, #10
 80070bc:	d008      	beq.n	80070d0 <UART_SetConfig+0xbc4>
 80070be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	2b0b      	cmp	r3, #11
 80070c4:	d102      	bne.n	80070cc <UART_SetConfig+0xbc0>
 80070c6:	2380      	movs	r3, #128	; 0x80
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	e038      	b.n	800713e <UART_SetConfig+0xc32>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e036      	b.n	800713e <UART_SetConfig+0xc32>
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	e034      	b.n	800713e <UART_SetConfig+0xc32>
 80070d4:	2340      	movs	r3, #64	; 0x40
 80070d6:	e032      	b.n	800713e <UART_SetConfig+0xc32>
 80070d8:	2320      	movs	r3, #32
 80070da:	e030      	b.n	800713e <UART_SetConfig+0xc32>
 80070dc:	2310      	movs	r3, #16
 80070de:	e02e      	b.n	800713e <UART_SetConfig+0xc32>
 80070e0:	230c      	movs	r3, #12
 80070e2:	e02c      	b.n	800713e <UART_SetConfig+0xc32>
 80070e4:	230a      	movs	r3, #10
 80070e6:	e02a      	b.n	800713e <UART_SetConfig+0xc32>
 80070e8:	2308      	movs	r3, #8
 80070ea:	e028      	b.n	800713e <UART_SetConfig+0xc32>
 80070ec:	2306      	movs	r3, #6
 80070ee:	e026      	b.n	800713e <UART_SetConfig+0xc32>
 80070f0:	2304      	movs	r3, #4
 80070f2:	e024      	b.n	800713e <UART_SetConfig+0xc32>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e022      	b.n	800713e <UART_SetConfig+0xc32>
 80070f8:	000aaa00 	.word	0x000aaa00
 80070fc:	000ccc00 	.word	0x000ccc00
 8007100:	00155500 	.word	0x00155500
 8007104:	000002ff 	.word	0x000002ff
 8007108:	000fffff 	.word	0x000fffff
 800710c:	0001e848 	.word	0x0001e848
 8007110:	01e84800 	.word	0x01e84800
 8007114:	0003d090 	.word	0x0003d090
 8007118:	0007a120 	.word	0x0007a120
 800711c:	000f4240 	.word	0x000f4240
 8007120:	001e8480 	.word	0x001e8480
 8007124:	0028b0aa 	.word	0x0028b0aa
 8007128:	0030d400 	.word	0x0030d400
 800712c:	003d0900 	.word	0x003d0900
 8007130:	00516154 	.word	0x00516154
 8007134:	007a1200 	.word	0x007a1200
 8007138:	00f42400 	.word	0x00f42400
 800713c:	2301      	movs	r3, #1
 800713e:	0019      	movs	r1, r3
 8007140:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007142:	f7f8 ffdf 	bl	8000104 <__udivsi3>
 8007146:	0003      	movs	r3, r0
 8007148:	005a      	lsls	r2, r3, #1
 800714a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	18d2      	adds	r2, r2, r3
 8007152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	0019      	movs	r1, r3
 8007158:	0010      	movs	r0, r2
 800715a:	f7f8 ffd3 	bl	8000104 <__udivsi3>
 800715e:	0003      	movs	r3, r0
 8007160:	b29b      	uxth	r3, r3
 8007162:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8007164:	e068      	b.n	8007238 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	2b00      	cmp	r3, #0
 800716c:	d04c      	beq.n	8007208 <UART_SetConfig+0xcfc>
 800716e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	2b01      	cmp	r3, #1
 8007174:	d045      	beq.n	8007202 <UART_SetConfig+0xcf6>
 8007176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	2b02      	cmp	r3, #2
 800717c:	d03e      	beq.n	80071fc <UART_SetConfig+0xcf0>
 800717e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	2b03      	cmp	r3, #3
 8007184:	d038      	beq.n	80071f8 <UART_SetConfig+0xcec>
 8007186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	2b04      	cmp	r3, #4
 800718c:	d031      	beq.n	80071f2 <UART_SetConfig+0xce6>
 800718e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	2b05      	cmp	r3, #5
 8007194:	d02b      	beq.n	80071ee <UART_SetConfig+0xce2>
 8007196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	2b06      	cmp	r3, #6
 800719c:	d025      	beq.n	80071ea <UART_SetConfig+0xcde>
 800719e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a2:	2b07      	cmp	r3, #7
 80071a4:	d01e      	beq.n	80071e4 <UART_SetConfig+0xcd8>
 80071a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d017      	beq.n	80071de <UART_SetConfig+0xcd2>
 80071ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	2b09      	cmp	r3, #9
 80071b4:	d010      	beq.n	80071d8 <UART_SetConfig+0xccc>
 80071b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	2b0a      	cmp	r3, #10
 80071bc:	d009      	beq.n	80071d2 <UART_SetConfig+0xcc6>
 80071be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	2b0b      	cmp	r3, #11
 80071c4:	d102      	bne.n	80071cc <UART_SetConfig+0xcc0>
 80071c6:	2380      	movs	r3, #128	; 0x80
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	e01f      	b.n	800720c <UART_SetConfig+0xd00>
 80071cc:	2380      	movs	r3, #128	; 0x80
 80071ce:	025b      	lsls	r3, r3, #9
 80071d0:	e01c      	b.n	800720c <UART_SetConfig+0xd00>
 80071d2:	2380      	movs	r3, #128	; 0x80
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	e019      	b.n	800720c <UART_SetConfig+0xd00>
 80071d8:	2380      	movs	r3, #128	; 0x80
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	e016      	b.n	800720c <UART_SetConfig+0xd00>
 80071de:	2380      	movs	r3, #128	; 0x80
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	e013      	b.n	800720c <UART_SetConfig+0xd00>
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	015b      	lsls	r3, r3, #5
 80071e8:	e010      	b.n	800720c <UART_SetConfig+0xd00>
 80071ea:	4bb7      	ldr	r3, [pc, #732]	; (80074c8 <UART_SetConfig+0xfbc>)
 80071ec:	e00e      	b.n	800720c <UART_SetConfig+0xd00>
 80071ee:	4bb7      	ldr	r3, [pc, #732]	; (80074cc <UART_SetConfig+0xfc0>)
 80071f0:	e00c      	b.n	800720c <UART_SetConfig+0xd00>
 80071f2:	2380      	movs	r3, #128	; 0x80
 80071f4:	019b      	lsls	r3, r3, #6
 80071f6:	e009      	b.n	800720c <UART_SetConfig+0xd00>
 80071f8:	4bb5      	ldr	r3, [pc, #724]	; (80074d0 <UART_SetConfig+0xfc4>)
 80071fa:	e007      	b.n	800720c <UART_SetConfig+0xd00>
 80071fc:	2380      	movs	r3, #128	; 0x80
 80071fe:	01db      	lsls	r3, r3, #7
 8007200:	e004      	b.n	800720c <UART_SetConfig+0xd00>
 8007202:	2380      	movs	r3, #128	; 0x80
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	e001      	b.n	800720c <UART_SetConfig+0xd00>
 8007208:	2380      	movs	r3, #128	; 0x80
 800720a:	025b      	lsls	r3, r3, #9
 800720c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800720e:	6852      	ldr	r2, [r2, #4]
 8007210:	0852      	lsrs	r2, r2, #1
 8007212:	189a      	adds	r2, r3, r2
 8007214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	0019      	movs	r1, r3
 800721a:	0010      	movs	r0, r2
 800721c:	f7f8 ff72 	bl	8000104 <__udivsi3>
 8007220:	0003      	movs	r3, r0
 8007222:	b29b      	uxth	r3, r3
 8007224:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8007226:	e007      	b.n	8007238 <UART_SetConfig+0xd2c>
      default:
        ret = HAL_ERROR;
 8007228:	231b      	movs	r3, #27
 800722a:	2258      	movs	r2, #88	; 0x58
 800722c:	4694      	mov	ip, r2
 800722e:	44bc      	add	ip, r7
 8007230:	4463      	add	r3, ip
 8007232:	2201      	movs	r2, #1
 8007234:	701a      	strb	r2, [r3, #0]
        break;
 8007236:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800723a:	2b0f      	cmp	r3, #15
 800723c:	d920      	bls.n	8007280 <UART_SetConfig+0xd74>
 800723e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007240:	4aa4      	ldr	r2, [pc, #656]	; (80074d4 <UART_SetConfig+0xfc8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d81c      	bhi.n	8007280 <UART_SetConfig+0xd74>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007248:	b29a      	uxth	r2, r3
 800724a:	200e      	movs	r0, #14
 800724c:	2458      	movs	r4, #88	; 0x58
 800724e:	193b      	adds	r3, r7, r4
 8007250:	181b      	adds	r3, r3, r0
 8007252:	210f      	movs	r1, #15
 8007254:	438a      	bics	r2, r1
 8007256:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	b29b      	uxth	r3, r3
 800725e:	2207      	movs	r2, #7
 8007260:	4013      	ands	r3, r2
 8007262:	b299      	uxth	r1, r3
 8007264:	193b      	adds	r3, r7, r4
 8007266:	181b      	adds	r3, r3, r0
 8007268:	193a      	adds	r2, r7, r4
 800726a:	1812      	adds	r2, r2, r0
 800726c:	8812      	ldrh	r2, [r2, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8007272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	193a      	adds	r2, r7, r4
 8007278:	1812      	adds	r2, r2, r0
 800727a:	8812      	ldrh	r2, [r2, #0]
 800727c:	60da      	str	r2, [r3, #12]
 800727e:	e1d3      	b.n	8007628 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8007280:	231b      	movs	r3, #27
 8007282:	2258      	movs	r2, #88	; 0x58
 8007284:	4694      	mov	ip, r2
 8007286:	44bc      	add	ip, r7
 8007288:	4463      	add	r3, ip
 800728a:	2201      	movs	r2, #1
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e1cb      	b.n	8007628 <UART_SetConfig+0x111c>
    }
  }
  else
  {
    switch (clocksource)
 8007290:	2323      	movs	r3, #35	; 0x23
 8007292:	2258      	movs	r2, #88	; 0x58
 8007294:	4694      	mov	ip, r2
 8007296:	44bc      	add	ip, r7
 8007298:	4463      	add	r3, ip
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b02      	cmp	r3, #2
 800729e:	d100      	bne.n	80072a2 <UART_SetConfig+0xd96>
 80072a0:	e06c      	b.n	800737c <UART_SetConfig+0xe70>
 80072a2:	dc02      	bgt.n	80072aa <UART_SetConfig+0xd9e>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <UART_SetConfig+0xdac>
 80072a8:	e1a3      	b.n	80075f2 <UART_SetConfig+0x10e6>
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d100      	bne.n	80072b0 <UART_SetConfig+0xda4>
 80072ae:	e0bc      	b.n	800742a <UART_SetConfig+0xf1e>
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d100      	bne.n	80072b6 <UART_SetConfig+0xdaa>
 80072b4:	e13d      	b.n	8007532 <UART_SetConfig+0x1026>
 80072b6:	e19c      	b.n	80075f2 <UART_SetConfig+0x10e6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b8:	f7fe f88c 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 80072bc:	0003      	movs	r3, r0
 80072be:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d044      	beq.n	8007352 <UART_SetConfig+0xe46>
 80072c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d03e      	beq.n	800734e <UART_SetConfig+0xe42>
 80072d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d038      	beq.n	800734a <UART_SetConfig+0xe3e>
 80072d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d032      	beq.n	8007346 <UART_SetConfig+0xe3a>
 80072e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d02c      	beq.n	8007342 <UART_SetConfig+0xe36>
 80072e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	2b05      	cmp	r3, #5
 80072ee:	d026      	beq.n	800733e <UART_SetConfig+0xe32>
 80072f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	2b06      	cmp	r3, #6
 80072f6:	d020      	beq.n	800733a <UART_SetConfig+0xe2e>
 80072f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	2b07      	cmp	r3, #7
 80072fe:	d01a      	beq.n	8007336 <UART_SetConfig+0xe2a>
 8007300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	2b08      	cmp	r3, #8
 8007306:	d014      	beq.n	8007332 <UART_SetConfig+0xe26>
 8007308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	2b09      	cmp	r3, #9
 800730e:	d00e      	beq.n	800732e <UART_SetConfig+0xe22>
 8007310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	2b0a      	cmp	r3, #10
 8007316:	d008      	beq.n	800732a <UART_SetConfig+0xe1e>
 8007318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	2b0b      	cmp	r3, #11
 800731e:	d102      	bne.n	8007326 <UART_SetConfig+0xe1a>
 8007320:	2380      	movs	r3, #128	; 0x80
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	e016      	b.n	8007354 <UART_SetConfig+0xe48>
 8007326:	2301      	movs	r3, #1
 8007328:	e014      	b.n	8007354 <UART_SetConfig+0xe48>
 800732a:	2380      	movs	r3, #128	; 0x80
 800732c:	e012      	b.n	8007354 <UART_SetConfig+0xe48>
 800732e:	2340      	movs	r3, #64	; 0x40
 8007330:	e010      	b.n	8007354 <UART_SetConfig+0xe48>
 8007332:	2320      	movs	r3, #32
 8007334:	e00e      	b.n	8007354 <UART_SetConfig+0xe48>
 8007336:	2310      	movs	r3, #16
 8007338:	e00c      	b.n	8007354 <UART_SetConfig+0xe48>
 800733a:	230c      	movs	r3, #12
 800733c:	e00a      	b.n	8007354 <UART_SetConfig+0xe48>
 800733e:	230a      	movs	r3, #10
 8007340:	e008      	b.n	8007354 <UART_SetConfig+0xe48>
 8007342:	2308      	movs	r3, #8
 8007344:	e006      	b.n	8007354 <UART_SetConfig+0xe48>
 8007346:	2306      	movs	r3, #6
 8007348:	e004      	b.n	8007354 <UART_SetConfig+0xe48>
 800734a:	2304      	movs	r3, #4
 800734c:	e002      	b.n	8007354 <UART_SetConfig+0xe48>
 800734e:	2302      	movs	r3, #2
 8007350:	e000      	b.n	8007354 <UART_SetConfig+0xe48>
 8007352:	2301      	movs	r3, #1
 8007354:	0019      	movs	r1, r3
 8007356:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007358:	f7f8 fed4 	bl	8000104 <__udivsi3>
 800735c:	0003      	movs	r3, r0
 800735e:	001a      	movs	r2, r3
 8007360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	085b      	lsrs	r3, r3, #1
 8007366:	18d2      	adds	r2, r2, r3
 8007368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	0019      	movs	r1, r3
 800736e:	0010      	movs	r0, r2
 8007370:	f7f8 fec8 	bl	8000104 <__udivsi3>
 8007374:	0003      	movs	r3, r0
 8007376:	b29b      	uxth	r3, r3
 8007378:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800737a:	e142      	b.n	8007602 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	d043      	beq.n	800740c <UART_SetConfig+0xf00>
 8007384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	2b01      	cmp	r3, #1
 800738a:	d03d      	beq.n	8007408 <UART_SetConfig+0xefc>
 800738c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2b02      	cmp	r3, #2
 8007392:	d037      	beq.n	8007404 <UART_SetConfig+0xef8>
 8007394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b03      	cmp	r3, #3
 800739a:	d031      	beq.n	8007400 <UART_SetConfig+0xef4>
 800739c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d02b      	beq.n	80073fc <UART_SetConfig+0xef0>
 80073a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b05      	cmp	r3, #5
 80073aa:	d025      	beq.n	80073f8 <UART_SetConfig+0xeec>
 80073ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	2b06      	cmp	r3, #6
 80073b2:	d01f      	beq.n	80073f4 <UART_SetConfig+0xee8>
 80073b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b07      	cmp	r3, #7
 80073ba:	d019      	beq.n	80073f0 <UART_SetConfig+0xee4>
 80073bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d013      	beq.n	80073ec <UART_SetConfig+0xee0>
 80073c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	2b09      	cmp	r3, #9
 80073ca:	d00d      	beq.n	80073e8 <UART_SetConfig+0xedc>
 80073cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b0a      	cmp	r3, #10
 80073d2:	d007      	beq.n	80073e4 <UART_SetConfig+0xed8>
 80073d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b0b      	cmp	r3, #11
 80073da:	d101      	bne.n	80073e0 <UART_SetConfig+0xed4>
 80073dc:	4b3e      	ldr	r3, [pc, #248]	; (80074d8 <UART_SetConfig+0xfcc>)
 80073de:	e016      	b.n	800740e <UART_SetConfig+0xf02>
 80073e0:	4b3e      	ldr	r3, [pc, #248]	; (80074dc <UART_SetConfig+0xfd0>)
 80073e2:	e014      	b.n	800740e <UART_SetConfig+0xf02>
 80073e4:	4b3e      	ldr	r3, [pc, #248]	; (80074e0 <UART_SetConfig+0xfd4>)
 80073e6:	e012      	b.n	800740e <UART_SetConfig+0xf02>
 80073e8:	4b3e      	ldr	r3, [pc, #248]	; (80074e4 <UART_SetConfig+0xfd8>)
 80073ea:	e010      	b.n	800740e <UART_SetConfig+0xf02>
 80073ec:	4b3e      	ldr	r3, [pc, #248]	; (80074e8 <UART_SetConfig+0xfdc>)
 80073ee:	e00e      	b.n	800740e <UART_SetConfig+0xf02>
 80073f0:	4b3e      	ldr	r3, [pc, #248]	; (80074ec <UART_SetConfig+0xfe0>)
 80073f2:	e00c      	b.n	800740e <UART_SetConfig+0xf02>
 80073f4:	4b3e      	ldr	r3, [pc, #248]	; (80074f0 <UART_SetConfig+0xfe4>)
 80073f6:	e00a      	b.n	800740e <UART_SetConfig+0xf02>
 80073f8:	4b3e      	ldr	r3, [pc, #248]	; (80074f4 <UART_SetConfig+0xfe8>)
 80073fa:	e008      	b.n	800740e <UART_SetConfig+0xf02>
 80073fc:	4b3e      	ldr	r3, [pc, #248]	; (80074f8 <UART_SetConfig+0xfec>)
 80073fe:	e006      	b.n	800740e <UART_SetConfig+0xf02>
 8007400:	4b3e      	ldr	r3, [pc, #248]	; (80074fc <UART_SetConfig+0xff0>)
 8007402:	e004      	b.n	800740e <UART_SetConfig+0xf02>
 8007404:	4b3e      	ldr	r3, [pc, #248]	; (8007500 <UART_SetConfig+0xff4>)
 8007406:	e002      	b.n	800740e <UART_SetConfig+0xf02>
 8007408:	4b3e      	ldr	r3, [pc, #248]	; (8007504 <UART_SetConfig+0xff8>)
 800740a:	e000      	b.n	800740e <UART_SetConfig+0xf02>
 800740c:	4b33      	ldr	r3, [pc, #204]	; (80074dc <UART_SetConfig+0xfd0>)
 800740e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007410:	6852      	ldr	r2, [r2, #4]
 8007412:	0852      	lsrs	r2, r2, #1
 8007414:	189a      	adds	r2, r3, r2
 8007416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	0019      	movs	r1, r3
 800741c:	0010      	movs	r0, r2
 800741e:	f7f8 fe71 	bl	8000104 <__udivsi3>
 8007422:	0003      	movs	r3, r0
 8007424:	b29b      	uxth	r3, r3
 8007426:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8007428:	e0eb      	b.n	8007602 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800742a:	f7fd ff47 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800742e:	0003      	movs	r3, r0
 8007430:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d100      	bne.n	800743c <UART_SetConfig+0xf30>
 800743a:	e065      	b.n	8007508 <UART_SetConfig+0xffc>
 800743c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	2b01      	cmp	r3, #1
 8007442:	d03e      	beq.n	80074c2 <UART_SetConfig+0xfb6>
 8007444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	2b02      	cmp	r3, #2
 800744a:	d038      	beq.n	80074be <UART_SetConfig+0xfb2>
 800744c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	2b03      	cmp	r3, #3
 8007452:	d032      	beq.n	80074ba <UART_SetConfig+0xfae>
 8007454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	2b04      	cmp	r3, #4
 800745a:	d02c      	beq.n	80074b6 <UART_SetConfig+0xfaa>
 800745c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	2b05      	cmp	r3, #5
 8007462:	d026      	beq.n	80074b2 <UART_SetConfig+0xfa6>
 8007464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	2b06      	cmp	r3, #6
 800746a:	d020      	beq.n	80074ae <UART_SetConfig+0xfa2>
 800746c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	2b07      	cmp	r3, #7
 8007472:	d01a      	beq.n	80074aa <UART_SetConfig+0xf9e>
 8007474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	2b08      	cmp	r3, #8
 800747a:	d014      	beq.n	80074a6 <UART_SetConfig+0xf9a>
 800747c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	2b09      	cmp	r3, #9
 8007482:	d00e      	beq.n	80074a2 <UART_SetConfig+0xf96>
 8007484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	2b0a      	cmp	r3, #10
 800748a:	d008      	beq.n	800749e <UART_SetConfig+0xf92>
 800748c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b0b      	cmp	r3, #11
 8007492:	d102      	bne.n	800749a <UART_SetConfig+0xf8e>
 8007494:	2380      	movs	r3, #128	; 0x80
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	e037      	b.n	800750a <UART_SetConfig+0xffe>
 800749a:	2301      	movs	r3, #1
 800749c:	e035      	b.n	800750a <UART_SetConfig+0xffe>
 800749e:	2380      	movs	r3, #128	; 0x80
 80074a0:	e033      	b.n	800750a <UART_SetConfig+0xffe>
 80074a2:	2340      	movs	r3, #64	; 0x40
 80074a4:	e031      	b.n	800750a <UART_SetConfig+0xffe>
 80074a6:	2320      	movs	r3, #32
 80074a8:	e02f      	b.n	800750a <UART_SetConfig+0xffe>
 80074aa:	2310      	movs	r3, #16
 80074ac:	e02d      	b.n	800750a <UART_SetConfig+0xffe>
 80074ae:	230c      	movs	r3, #12
 80074b0:	e02b      	b.n	800750a <UART_SetConfig+0xffe>
 80074b2:	230a      	movs	r3, #10
 80074b4:	e029      	b.n	800750a <UART_SetConfig+0xffe>
 80074b6:	2308      	movs	r3, #8
 80074b8:	e027      	b.n	800750a <UART_SetConfig+0xffe>
 80074ba:	2306      	movs	r3, #6
 80074bc:	e025      	b.n	800750a <UART_SetConfig+0xffe>
 80074be:	2304      	movs	r3, #4
 80074c0:	e023      	b.n	800750a <UART_SetConfig+0xffe>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e021      	b.n	800750a <UART_SetConfig+0xffe>
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	00001554 	.word	0x00001554
 80074cc:	00001998 	.word	0x00001998
 80074d0:	00002aaa 	.word	0x00002aaa
 80074d4:	0000ffff 	.word	0x0000ffff
 80074d8:	0000f424 	.word	0x0000f424
 80074dc:	00f42400 	.word	0x00f42400
 80074e0:	0001e848 	.word	0x0001e848
 80074e4:	0003d090 	.word	0x0003d090
 80074e8:	0007a120 	.word	0x0007a120
 80074ec:	000f4240 	.word	0x000f4240
 80074f0:	00145855 	.word	0x00145855
 80074f4:	00186a00 	.word	0x00186a00
 80074f8:	001e8480 	.word	0x001e8480
 80074fc:	0028b0aa 	.word	0x0028b0aa
 8007500:	003d0900 	.word	0x003d0900
 8007504:	007a1200 	.word	0x007a1200
 8007508:	2301      	movs	r3, #1
 800750a:	0019      	movs	r1, r3
 800750c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800750e:	f7f8 fdf9 	bl	8000104 <__udivsi3>
 8007512:	0003      	movs	r3, r0
 8007514:	001a      	movs	r2, r3
 8007516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	18d2      	adds	r2, r2, r3
 800751e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	0019      	movs	r1, r3
 8007524:	0010      	movs	r0, r2
 8007526:	f7f8 fded 	bl	8000104 <__udivsi3>
 800752a:	0003      	movs	r3, r0
 800752c:	b29b      	uxth	r3, r3
 800752e:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8007530:	e067      	b.n	8007602 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	2b00      	cmp	r3, #0
 8007538:	d04b      	beq.n	80075d2 <UART_SetConfig+0x10c6>
 800753a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	2b01      	cmp	r3, #1
 8007540:	d044      	beq.n	80075cc <UART_SetConfig+0x10c0>
 8007542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	2b02      	cmp	r3, #2
 8007548:	d03d      	beq.n	80075c6 <UART_SetConfig+0x10ba>
 800754a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	2b03      	cmp	r3, #3
 8007550:	d037      	beq.n	80075c2 <UART_SetConfig+0x10b6>
 8007552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	2b04      	cmp	r3, #4
 8007558:	d030      	beq.n	80075bc <UART_SetConfig+0x10b0>
 800755a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	2b05      	cmp	r3, #5
 8007560:	d02a      	beq.n	80075b8 <UART_SetConfig+0x10ac>
 8007562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b06      	cmp	r3, #6
 8007568:	d024      	beq.n	80075b4 <UART_SetConfig+0x10a8>
 800756a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	2b07      	cmp	r3, #7
 8007570:	d01d      	beq.n	80075ae <UART_SetConfig+0x10a2>
 8007572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	2b08      	cmp	r3, #8
 8007578:	d016      	beq.n	80075a8 <UART_SetConfig+0x109c>
 800757a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b09      	cmp	r3, #9
 8007580:	d00f      	beq.n	80075a2 <UART_SetConfig+0x1096>
 8007582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	2b0a      	cmp	r3, #10
 8007588:	d008      	beq.n	800759c <UART_SetConfig+0x1090>
 800758a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	2b0b      	cmp	r3, #11
 8007590:	d101      	bne.n	8007596 <UART_SetConfig+0x108a>
 8007592:	2380      	movs	r3, #128	; 0x80
 8007594:	e01f      	b.n	80075d6 <UART_SetConfig+0x10ca>
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	e01c      	b.n	80075d6 <UART_SetConfig+0x10ca>
 800759c:	2380      	movs	r3, #128	; 0x80
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	e019      	b.n	80075d6 <UART_SetConfig+0x10ca>
 80075a2:	2380      	movs	r3, #128	; 0x80
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	e016      	b.n	80075d6 <UART_SetConfig+0x10ca>
 80075a8:	2380      	movs	r3, #128	; 0x80
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	e013      	b.n	80075d6 <UART_SetConfig+0x10ca>
 80075ae:	2380      	movs	r3, #128	; 0x80
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	e010      	b.n	80075d6 <UART_SetConfig+0x10ca>
 80075b4:	4b28      	ldr	r3, [pc, #160]	; (8007658 <UART_SetConfig+0x114c>)
 80075b6:	e00e      	b.n	80075d6 <UART_SetConfig+0x10ca>
 80075b8:	4b28      	ldr	r3, [pc, #160]	; (800765c <UART_SetConfig+0x1150>)
 80075ba:	e00c      	b.n	80075d6 <UART_SetConfig+0x10ca>
 80075bc:	2380      	movs	r3, #128	; 0x80
 80075be:	015b      	lsls	r3, r3, #5
 80075c0:	e009      	b.n	80075d6 <UART_SetConfig+0x10ca>
 80075c2:	4b27      	ldr	r3, [pc, #156]	; (8007660 <UART_SetConfig+0x1154>)
 80075c4:	e007      	b.n	80075d6 <UART_SetConfig+0x10ca>
 80075c6:	2380      	movs	r3, #128	; 0x80
 80075c8:	019b      	lsls	r3, r3, #6
 80075ca:	e004      	b.n	80075d6 <UART_SetConfig+0x10ca>
 80075cc:	2380      	movs	r3, #128	; 0x80
 80075ce:	01db      	lsls	r3, r3, #7
 80075d0:	e001      	b.n	80075d6 <UART_SetConfig+0x10ca>
 80075d2:	2380      	movs	r3, #128	; 0x80
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075d8:	6852      	ldr	r2, [r2, #4]
 80075da:	0852      	lsrs	r2, r2, #1
 80075dc:	189a      	adds	r2, r3, r2
 80075de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	0019      	movs	r1, r3
 80075e4:	0010      	movs	r0, r2
 80075e6:	f7f8 fd8d 	bl	8000104 <__udivsi3>
 80075ea:	0003      	movs	r3, r0
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80075f0:	e007      	b.n	8007602 <UART_SetConfig+0x10f6>
      default:
        ret = HAL_ERROR;
 80075f2:	231b      	movs	r3, #27
 80075f4:	2258      	movs	r2, #88	; 0x58
 80075f6:	4694      	mov	ip, r2
 80075f8:	44bc      	add	ip, r7
 80075fa:	4463      	add	r3, ip
 80075fc:	2201      	movs	r2, #1
 80075fe:	701a      	strb	r2, [r3, #0]
        break;
 8007600:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007604:	2b0f      	cmp	r3, #15
 8007606:	d908      	bls.n	800761a <UART_SetConfig+0x110e>
 8007608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800760a:	4a16      	ldr	r2, [pc, #88]	; (8007664 <UART_SetConfig+0x1158>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d804      	bhi.n	800761a <UART_SetConfig+0x110e>
    {
      huart->Instance->BRR = usartdiv;
 8007610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007616:	60da      	str	r2, [r3, #12]
 8007618:	e006      	b.n	8007628 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 800761a:	231b      	movs	r3, #27
 800761c:	2258      	movs	r2, #88	; 0x58
 800761e:	4694      	mov	ip, r2
 8007620:	44bc      	add	ip, r7
 8007622:	4463      	add	r3, ip
 8007624:	2201      	movs	r2, #1
 8007626:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800762a:	226a      	movs	r2, #106	; 0x6a
 800762c:	2101      	movs	r1, #1
 800762e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007632:	2268      	movs	r2, #104	; 0x68
 8007634:	2101      	movs	r1, #1
 8007636:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800763a:	2200      	movs	r2, #0
 800763c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800763e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007640:	2200      	movs	r2, #0
 8007642:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007644:	231b      	movs	r3, #27
 8007646:	2258      	movs	r2, #88	; 0x58
 8007648:	4694      	mov	ip, r2
 800764a:	44bc      	add	ip, r7
 800764c:	4463      	add	r3, ip
 800764e:	781b      	ldrb	r3, [r3, #0]
}
 8007650:	0018      	movs	r0, r3
 8007652:	46bd      	mov	sp, r7
 8007654:	b021      	add	sp, #132	; 0x84
 8007656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007658:	00000aaa 	.word	0x00000aaa
 800765c:	00000ccc 	.word	0x00000ccc
 8007660:	00001555 	.word	0x00001555
 8007664:	0000ffff 	.word	0x0000ffff

08007668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	2201      	movs	r2, #1
 8007676:	4013      	ands	r3, r2
 8007678:	d00b      	beq.n	8007692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	4a4a      	ldr	r2, [pc, #296]	; (80077ac <UART_AdvFeatureConfig+0x144>)
 8007682:	4013      	ands	r3, r2
 8007684:	0019      	movs	r1, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	2202      	movs	r2, #2
 8007698:	4013      	ands	r3, r2
 800769a:	d00b      	beq.n	80076b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	4a43      	ldr	r2, [pc, #268]	; (80077b0 <UART_AdvFeatureConfig+0x148>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	0019      	movs	r1, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	2204      	movs	r2, #4
 80076ba:	4013      	ands	r3, r2
 80076bc:	d00b      	beq.n	80076d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4a3b      	ldr	r2, [pc, #236]	; (80077b4 <UART_AdvFeatureConfig+0x14c>)
 80076c6:	4013      	ands	r3, r2
 80076c8:	0019      	movs	r1, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	2208      	movs	r2, #8
 80076dc:	4013      	ands	r3, r2
 80076de:	d00b      	beq.n	80076f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4a34      	ldr	r2, [pc, #208]	; (80077b8 <UART_AdvFeatureConfig+0x150>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	0019      	movs	r1, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	2210      	movs	r2, #16
 80076fe:	4013      	ands	r3, r2
 8007700:	d00b      	beq.n	800771a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	4a2c      	ldr	r2, [pc, #176]	; (80077bc <UART_AdvFeatureConfig+0x154>)
 800770a:	4013      	ands	r3, r2
 800770c:	0019      	movs	r1, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	2220      	movs	r2, #32
 8007720:	4013      	ands	r3, r2
 8007722:	d00b      	beq.n	800773c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	4a25      	ldr	r2, [pc, #148]	; (80077c0 <UART_AdvFeatureConfig+0x158>)
 800772c:	4013      	ands	r3, r2
 800772e:	0019      	movs	r1, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	2240      	movs	r2, #64	; 0x40
 8007742:	4013      	ands	r3, r2
 8007744:	d01d      	beq.n	8007782 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	4a1d      	ldr	r2, [pc, #116]	; (80077c4 <UART_AdvFeatureConfig+0x15c>)
 800774e:	4013      	ands	r3, r2
 8007750:	0019      	movs	r1, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007762:	2380      	movs	r3, #128	; 0x80
 8007764:	035b      	lsls	r3, r3, #13
 8007766:	429a      	cmp	r2, r3
 8007768:	d10b      	bne.n	8007782 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	4a15      	ldr	r2, [pc, #84]	; (80077c8 <UART_AdvFeatureConfig+0x160>)
 8007772:	4013      	ands	r3, r2
 8007774:	0019      	movs	r1, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	2280      	movs	r2, #128	; 0x80
 8007788:	4013      	ands	r3, r2
 800778a:	d00b      	beq.n	80077a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	4a0e      	ldr	r2, [pc, #56]	; (80077cc <UART_AdvFeatureConfig+0x164>)
 8007794:	4013      	ands	r3, r2
 8007796:	0019      	movs	r1, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]
  }
}
 80077a4:	46c0      	nop			; (mov r8, r8)
 80077a6:	46bd      	mov	sp, r7
 80077a8:	b002      	add	sp, #8
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	fffdffff 	.word	0xfffdffff
 80077b0:	fffeffff 	.word	0xfffeffff
 80077b4:	fffbffff 	.word	0xfffbffff
 80077b8:	ffff7fff 	.word	0xffff7fff
 80077bc:	ffffefff 	.word	0xffffefff
 80077c0:	ffffdfff 	.word	0xffffdfff
 80077c4:	ffefffff 	.word	0xffefffff
 80077c8:	ff9fffff 	.word	0xff9fffff
 80077cc:	fff7ffff 	.word	0xfff7ffff

080077d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2288      	movs	r2, #136	; 0x88
 80077dc:	2100      	movs	r1, #0
 80077de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80077e0:	f7fb fe58 	bl	8003494 <HAL_GetTick>
 80077e4:	0003      	movs	r3, r0
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2208      	movs	r2, #8
 80077f0:	4013      	ands	r3, r2
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	d10d      	bne.n	8007812 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	2380      	movs	r3, #128	; 0x80
 80077fa:	0399      	lsls	r1, r3, #14
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4b18      	ldr	r3, [pc, #96]	; (8007860 <UART_CheckIdleState+0x90>)
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	0013      	movs	r3, r2
 8007804:	2200      	movs	r2, #0
 8007806:	f000 f82d 	bl	8007864 <UART_WaitOnFlagUntilTimeout>
 800780a:	1e03      	subs	r3, r0, #0
 800780c:	d001      	beq.n	8007812 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e021      	b.n	8007856 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2204      	movs	r2, #4
 800781a:	4013      	ands	r3, r2
 800781c:	2b04      	cmp	r3, #4
 800781e:	d10d      	bne.n	800783c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	2380      	movs	r3, #128	; 0x80
 8007824:	03d9      	lsls	r1, r3, #15
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <UART_CheckIdleState+0x90>)
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	0013      	movs	r3, r2
 800782e:	2200      	movs	r2, #0
 8007830:	f000 f818 	bl	8007864 <UART_WaitOnFlagUntilTimeout>
 8007834:	1e03      	subs	r3, r0, #0
 8007836:	d001      	beq.n	800783c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e00c      	b.n	8007856 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2280      	movs	r2, #128	; 0x80
 8007840:	2120      	movs	r1, #32
 8007842:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2284      	movs	r2, #132	; 0x84
 8007848:	2120      	movs	r1, #32
 800784a:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	227c      	movs	r2, #124	; 0x7c
 8007850:	2100      	movs	r1, #0
 8007852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	b004      	add	sp, #16
 800785c:	bd80      	pop	{r7, pc}
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	01ffffff 	.word	0x01ffffff

08007864 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	1dfb      	adds	r3, r7, #7
 8007872:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007874:	e02b      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	3301      	adds	r3, #1
 800787a:	d028      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787c:	f7fb fe0a 	bl	8003494 <HAL_GetTick>
 8007880:	0002      	movs	r2, r0
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	429a      	cmp	r2, r3
 800788a:	d302      	bcc.n	8007892 <UART_WaitOnFlagUntilTimeout+0x2e>
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d11d      	bne.n	80078ce <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4916      	ldr	r1, [pc, #88]	; (80078f8 <UART_WaitOnFlagUntilTimeout+0x94>)
 800789e:	400a      	ands	r2, r1
 80078a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2101      	movs	r1, #1
 80078ae:	438a      	bics	r2, r1
 80078b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2280      	movs	r2, #128	; 0x80
 80078b6:	2120      	movs	r1, #32
 80078b8:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2284      	movs	r2, #132	; 0x84
 80078be:	2120      	movs	r1, #32
 80078c0:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	227c      	movs	r2, #124	; 0x7c
 80078c6:	2100      	movs	r1, #0
 80078c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e00f      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	4013      	ands	r3, r2
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	425a      	negs	r2, r3
 80078de:	4153      	adcs	r3, r2
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	001a      	movs	r2, r3
 80078e4:	1dfb      	adds	r3, r7, #7
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d0c4      	beq.n	8007876 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	0018      	movs	r0, r3
 80078f0:	46bd      	mov	sp, r7
 80078f2:	b004      	add	sp, #16
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	fffffe5f 	.word	0xfffffe5f

080078fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	227c      	movs	r2, #124	; 0x7c
 8007908:	5c9b      	ldrb	r3, [r3, r2]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d101      	bne.n	8007912 <HAL_UARTEx_DisableFifoMode+0x16>
 800790e:	2302      	movs	r3, #2
 8007910:	e027      	b.n	8007962 <HAL_UARTEx_DisableFifoMode+0x66>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	227c      	movs	r2, #124	; 0x7c
 8007916:	2101      	movs	r1, #1
 8007918:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2280      	movs	r2, #128	; 0x80
 800791e:	2124      	movs	r1, #36	; 0x24
 8007920:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2101      	movs	r1, #1
 8007936:	438a      	bics	r2, r1
 8007938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4a0b      	ldr	r2, [pc, #44]	; (800796c <HAL_UARTEx_DisableFifoMode+0x70>)
 800793e:	4013      	ands	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2280      	movs	r2, #128	; 0x80
 8007954:	2120      	movs	r1, #32
 8007956:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	227c      	movs	r2, #124	; 0x7c
 800795c:	2100      	movs	r1, #0
 800795e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	0018      	movs	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	b004      	add	sp, #16
 8007968:	bd80      	pop	{r7, pc}
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	dfffffff 	.word	0xdfffffff

08007970 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	227c      	movs	r2, #124	; 0x7c
 800797e:	5c9b      	ldrb	r3, [r3, r2]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007984:	2302      	movs	r3, #2
 8007986:	e02e      	b.n	80079e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	227c      	movs	r2, #124	; 0x7c
 800798c:	2101      	movs	r1, #1
 800798e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2280      	movs	r2, #128	; 0x80
 8007994:	2124      	movs	r1, #36	; 0x24
 8007996:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2101      	movs	r1, #1
 80079ac:	438a      	bics	r2, r1
 80079ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	08d9      	lsrs	r1, r3, #3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	0018      	movs	r0, r3
 80079c8:	f000 f854 	bl	8007a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2280      	movs	r2, #128	; 0x80
 80079d8:	2120      	movs	r1, #32
 80079da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	227c      	movs	r2, #124	; 0x7c
 80079e0:	2100      	movs	r1, #0
 80079e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	0018      	movs	r0, r3
 80079e8:	46bd      	mov	sp, r7
 80079ea:	b004      	add	sp, #16
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	227c      	movs	r2, #124	; 0x7c
 80079fe:	5c9b      	ldrb	r3, [r3, r2]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e02f      	b.n	8007a68 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	227c      	movs	r2, #124	; 0x7c
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2280      	movs	r2, #128	; 0x80
 8007a14:	2124      	movs	r1, #36	; 0x24
 8007a16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	438a      	bics	r2, r1
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	4a0e      	ldr	r2, [pc, #56]	; (8007a70 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	0019      	movs	r1, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	0018      	movs	r0, r3
 8007a4a:	f000 f813 	bl	8007a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2280      	movs	r2, #128	; 0x80
 8007a5a:	2120      	movs	r1, #32
 8007a5c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	227c      	movs	r2, #124	; 0x7c
 8007a62:	2100      	movs	r1, #0
 8007a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	0018      	movs	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	b004      	add	sp, #16
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	f1ffffff 	.word	0xf1ffffff

08007a74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a76:	b089      	sub	sp, #36	; 0x24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007a7c:	2314      	movs	r3, #20
 8007a7e:	18fb      	adds	r3, r7, r3
 8007a80:	4a2f      	ldr	r2, [pc, #188]	; (8007b40 <UARTEx_SetNbDataToProcess+0xcc>)
 8007a82:	ca03      	ldmia	r2!, {r0, r1}
 8007a84:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007a86:	230c      	movs	r3, #12
 8007a88:	18fb      	adds	r3, r7, r3
 8007a8a:	4a2e      	ldr	r2, [pc, #184]	; (8007b44 <UARTEx_SetNbDataToProcess+0xd0>)
 8007a8c:	ca03      	ldmia	r2!, {r0, r1}
 8007a8e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d108      	bne.n	8007aaa <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	226a      	movs	r2, #106	; 0x6a
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2268      	movs	r2, #104	; 0x68
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007aa8:	e046      	b.n	8007b38 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aaa:	261f      	movs	r6, #31
 8007aac:	19bb      	adds	r3, r7, r6
 8007aae:	2208      	movs	r2, #8
 8007ab0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ab2:	201e      	movs	r0, #30
 8007ab4:	183b      	adds	r3, r7, r0
 8007ab6:	2208      	movs	r2, #8
 8007ab8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	0e5b      	lsrs	r3, r3, #25
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	241d      	movs	r4, #29
 8007ac6:	193b      	adds	r3, r7, r4
 8007ac8:	2107      	movs	r1, #7
 8007aca:	400a      	ands	r2, r1
 8007acc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	0f5b      	lsrs	r3, r3, #29
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	251c      	movs	r5, #28
 8007ada:	197b      	adds	r3, r7, r5
 8007adc:	2107      	movs	r1, #7
 8007ade:	400a      	ands	r2, r1
 8007ae0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007ae2:	183b      	adds	r3, r7, r0
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	197a      	adds	r2, r7, r5
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	2114      	movs	r1, #20
 8007aec:	1879      	adds	r1, r7, r1
 8007aee:	5c8a      	ldrb	r2, [r1, r2]
 8007af0:	435a      	muls	r2, r3
 8007af2:	0010      	movs	r0, r2
 8007af4:	197b      	adds	r3, r7, r5
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	250c      	movs	r5, #12
 8007afa:	197a      	adds	r2, r7, r5
 8007afc:	5cd3      	ldrb	r3, [r2, r3]
 8007afe:	0019      	movs	r1, r3
 8007b00:	f7f8 fb8a 	bl	8000218 <__divsi3>
 8007b04:	0003      	movs	r3, r0
 8007b06:	b299      	uxth	r1, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	226a      	movs	r2, #106	; 0x6a
 8007b0c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007b0e:	19bb      	adds	r3, r7, r6
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	193a      	adds	r2, r7, r4
 8007b14:	7812      	ldrb	r2, [r2, #0]
 8007b16:	2114      	movs	r1, #20
 8007b18:	1879      	adds	r1, r7, r1
 8007b1a:	5c8a      	ldrb	r2, [r1, r2]
 8007b1c:	435a      	muls	r2, r3
 8007b1e:	0010      	movs	r0, r2
 8007b20:	193b      	adds	r3, r7, r4
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	197a      	adds	r2, r7, r5
 8007b26:	5cd3      	ldrb	r3, [r2, r3]
 8007b28:	0019      	movs	r1, r3
 8007b2a:	f7f8 fb75 	bl	8000218 <__divsi3>
 8007b2e:	0003      	movs	r3, r0
 8007b30:	b299      	uxth	r1, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2268      	movs	r2, #104	; 0x68
 8007b36:	5299      	strh	r1, [r3, r2]
}
 8007b38:	46c0      	nop			; (mov r8, r8)
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b009      	add	sp, #36	; 0x24
 8007b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b40:	08008538 	.word	0x08008538
 8007b44:	08008540 	.word	0x08008540

08007b48 <__errno>:
 8007b48:	4b01      	ldr	r3, [pc, #4]	; (8007b50 <__errno+0x8>)
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	4770      	bx	lr
 8007b4e:	46c0      	nop			; (mov r8, r8)
 8007b50:	2000000c 	.word	0x2000000c

08007b54 <__libc_init_array>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	2600      	movs	r6, #0
 8007b58:	4d0c      	ldr	r5, [pc, #48]	; (8007b8c <__libc_init_array+0x38>)
 8007b5a:	4c0d      	ldr	r4, [pc, #52]	; (8007b90 <__libc_init_array+0x3c>)
 8007b5c:	1b64      	subs	r4, r4, r5
 8007b5e:	10a4      	asrs	r4, r4, #2
 8007b60:	42a6      	cmp	r6, r4
 8007b62:	d109      	bne.n	8007b78 <__libc_init_array+0x24>
 8007b64:	2600      	movs	r6, #0
 8007b66:	f000 fcc9 	bl	80084fc <_init>
 8007b6a:	4d0a      	ldr	r5, [pc, #40]	; (8007b94 <__libc_init_array+0x40>)
 8007b6c:	4c0a      	ldr	r4, [pc, #40]	; (8007b98 <__libc_init_array+0x44>)
 8007b6e:	1b64      	subs	r4, r4, r5
 8007b70:	10a4      	asrs	r4, r4, #2
 8007b72:	42a6      	cmp	r6, r4
 8007b74:	d105      	bne.n	8007b82 <__libc_init_array+0x2e>
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	00b3      	lsls	r3, r6, #2
 8007b7a:	58eb      	ldr	r3, [r5, r3]
 8007b7c:	4798      	blx	r3
 8007b7e:	3601      	adds	r6, #1
 8007b80:	e7ee      	b.n	8007b60 <__libc_init_array+0xc>
 8007b82:	00b3      	lsls	r3, r6, #2
 8007b84:	58eb      	ldr	r3, [r5, r3]
 8007b86:	4798      	blx	r3
 8007b88:	3601      	adds	r6, #1
 8007b8a:	e7f2      	b.n	8007b72 <__libc_init_array+0x1e>
 8007b8c:	08008714 	.word	0x08008714
 8007b90:	08008714 	.word	0x08008714
 8007b94:	08008714 	.word	0x08008714
 8007b98:	08008718 	.word	0x08008718

08007b9c <memset>:
 8007b9c:	0003      	movs	r3, r0
 8007b9e:	1812      	adds	r2, r2, r0
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d100      	bne.n	8007ba6 <memset+0xa>
 8007ba4:	4770      	bx	lr
 8007ba6:	7019      	strb	r1, [r3, #0]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	e7f9      	b.n	8007ba0 <memset+0x4>

08007bac <_puts_r>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	0005      	movs	r5, r0
 8007bb0:	000e      	movs	r6, r1
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d004      	beq.n	8007bc0 <_puts_r+0x14>
 8007bb6:	6983      	ldr	r3, [r0, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <_puts_r+0x14>
 8007bbc:	f000 fa24 	bl	8008008 <__sinit>
 8007bc0:	69ab      	ldr	r3, [r5, #24]
 8007bc2:	68ac      	ldr	r4, [r5, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <_puts_r+0x22>
 8007bc8:	0028      	movs	r0, r5
 8007bca:	f000 fa1d 	bl	8008008 <__sinit>
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <_puts_r+0xb4>)
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	d10f      	bne.n	8007bf4 <_puts_r+0x48>
 8007bd4:	686c      	ldr	r4, [r5, #4]
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	071b      	lsls	r3, r3, #28
 8007bda:	d502      	bpl.n	8007be2 <_puts_r+0x36>
 8007bdc:	6923      	ldr	r3, [r4, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d11f      	bne.n	8007c22 <_puts_r+0x76>
 8007be2:	0021      	movs	r1, r4
 8007be4:	0028      	movs	r0, r5
 8007be6:	f000 f8a1 	bl	8007d2c <__swsetup_r>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d019      	beq.n	8007c22 <_puts_r+0x76>
 8007bee:	2001      	movs	r0, #1
 8007bf0:	4240      	negs	r0, r0
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	4b1b      	ldr	r3, [pc, #108]	; (8007c64 <_puts_r+0xb8>)
 8007bf6:	429c      	cmp	r4, r3
 8007bf8:	d101      	bne.n	8007bfe <_puts_r+0x52>
 8007bfa:	68ac      	ldr	r4, [r5, #8]
 8007bfc:	e7eb      	b.n	8007bd6 <_puts_r+0x2a>
 8007bfe:	4b1a      	ldr	r3, [pc, #104]	; (8007c68 <_puts_r+0xbc>)
 8007c00:	429c      	cmp	r4, r3
 8007c02:	d1e8      	bne.n	8007bd6 <_puts_r+0x2a>
 8007c04:	68ec      	ldr	r4, [r5, #12]
 8007c06:	e7e6      	b.n	8007bd6 <_puts_r+0x2a>
 8007c08:	3601      	adds	r6, #1
 8007c0a:	60a3      	str	r3, [r4, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	da04      	bge.n	8007c1a <_puts_r+0x6e>
 8007c10:	69a2      	ldr	r2, [r4, #24]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	dc16      	bgt.n	8007c44 <_puts_r+0x98>
 8007c16:	290a      	cmp	r1, #10
 8007c18:	d014      	beq.n	8007c44 <_puts_r+0x98>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	6022      	str	r2, [r4, #0]
 8007c20:	7019      	strb	r1, [r3, #0]
 8007c22:	68a3      	ldr	r3, [r4, #8]
 8007c24:	7831      	ldrb	r1, [r6, #0]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d1ed      	bne.n	8007c08 <_puts_r+0x5c>
 8007c2c:	60a3      	str	r3, [r4, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	da0f      	bge.n	8007c52 <_puts_r+0xa6>
 8007c32:	0022      	movs	r2, r4
 8007c34:	310a      	adds	r1, #10
 8007c36:	0028      	movs	r0, r5
 8007c38:	f000 f822 	bl	8007c80 <__swbuf_r>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d0d6      	beq.n	8007bee <_puts_r+0x42>
 8007c40:	200a      	movs	r0, #10
 8007c42:	e7d6      	b.n	8007bf2 <_puts_r+0x46>
 8007c44:	0022      	movs	r2, r4
 8007c46:	0028      	movs	r0, r5
 8007c48:	f000 f81a 	bl	8007c80 <__swbuf_r>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d1e8      	bne.n	8007c22 <_puts_r+0x76>
 8007c50:	e7cd      	b.n	8007bee <_puts_r+0x42>
 8007c52:	200a      	movs	r0, #10
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	6022      	str	r2, [r4, #0]
 8007c5a:	7018      	strb	r0, [r3, #0]
 8007c5c:	e7c9      	b.n	8007bf2 <_puts_r+0x46>
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	080086cc 	.word	0x080086cc
 8007c64:	080086ec 	.word	0x080086ec
 8007c68:	080086ac 	.word	0x080086ac

08007c6c <puts>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4b03      	ldr	r3, [pc, #12]	; (8007c7c <puts+0x10>)
 8007c70:	0001      	movs	r1, r0
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	f7ff ff9a 	bl	8007bac <_puts_r>
 8007c78:	bd10      	pop	{r4, pc}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	2000000c 	.word	0x2000000c

08007c80 <__swbuf_r>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	0005      	movs	r5, r0
 8007c84:	000e      	movs	r6, r1
 8007c86:	0014      	movs	r4, r2
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d004      	beq.n	8007c96 <__swbuf_r+0x16>
 8007c8c:	6983      	ldr	r3, [r0, #24]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <__swbuf_r+0x16>
 8007c92:	f000 f9b9 	bl	8008008 <__sinit>
 8007c96:	4b22      	ldr	r3, [pc, #136]	; (8007d20 <__swbuf_r+0xa0>)
 8007c98:	429c      	cmp	r4, r3
 8007c9a:	d12d      	bne.n	8007cf8 <__swbuf_r+0x78>
 8007c9c:	686c      	ldr	r4, [r5, #4]
 8007c9e:	69a3      	ldr	r3, [r4, #24]
 8007ca0:	60a3      	str	r3, [r4, #8]
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	071b      	lsls	r3, r3, #28
 8007ca6:	d531      	bpl.n	8007d0c <__swbuf_r+0x8c>
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02e      	beq.n	8007d0c <__swbuf_r+0x8c>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	6922      	ldr	r2, [r4, #16]
 8007cb2:	b2f7      	uxtb	r7, r6
 8007cb4:	1a98      	subs	r0, r3, r2
 8007cb6:	6963      	ldr	r3, [r4, #20]
 8007cb8:	b2f6      	uxtb	r6, r6
 8007cba:	4283      	cmp	r3, r0
 8007cbc:	dc05      	bgt.n	8007cca <__swbuf_r+0x4a>
 8007cbe:	0021      	movs	r1, r4
 8007cc0:	0028      	movs	r0, r5
 8007cc2:	f000 f933 	bl	8007f2c <_fflush_r>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d126      	bne.n	8007d18 <__swbuf_r+0x98>
 8007cca:	68a3      	ldr	r3, [r4, #8]
 8007ccc:	3001      	adds	r0, #1
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	60a3      	str	r3, [r4, #8]
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	6022      	str	r2, [r4, #0]
 8007cd8:	701f      	strb	r7, [r3, #0]
 8007cda:	6963      	ldr	r3, [r4, #20]
 8007cdc:	4283      	cmp	r3, r0
 8007cde:	d004      	beq.n	8007cea <__swbuf_r+0x6a>
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	07db      	lsls	r3, r3, #31
 8007ce4:	d51a      	bpl.n	8007d1c <__swbuf_r+0x9c>
 8007ce6:	2e0a      	cmp	r6, #10
 8007ce8:	d118      	bne.n	8007d1c <__swbuf_r+0x9c>
 8007cea:	0021      	movs	r1, r4
 8007cec:	0028      	movs	r0, r5
 8007cee:	f000 f91d 	bl	8007f2c <_fflush_r>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d012      	beq.n	8007d1c <__swbuf_r+0x9c>
 8007cf6:	e00f      	b.n	8007d18 <__swbuf_r+0x98>
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <__swbuf_r+0xa4>)
 8007cfa:	429c      	cmp	r4, r3
 8007cfc:	d101      	bne.n	8007d02 <__swbuf_r+0x82>
 8007cfe:	68ac      	ldr	r4, [r5, #8]
 8007d00:	e7cd      	b.n	8007c9e <__swbuf_r+0x1e>
 8007d02:	4b09      	ldr	r3, [pc, #36]	; (8007d28 <__swbuf_r+0xa8>)
 8007d04:	429c      	cmp	r4, r3
 8007d06:	d1ca      	bne.n	8007c9e <__swbuf_r+0x1e>
 8007d08:	68ec      	ldr	r4, [r5, #12]
 8007d0a:	e7c8      	b.n	8007c9e <__swbuf_r+0x1e>
 8007d0c:	0021      	movs	r1, r4
 8007d0e:	0028      	movs	r0, r5
 8007d10:	f000 f80c 	bl	8007d2c <__swsetup_r>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d0ca      	beq.n	8007cae <__swbuf_r+0x2e>
 8007d18:	2601      	movs	r6, #1
 8007d1a:	4276      	negs	r6, r6
 8007d1c:	0030      	movs	r0, r6
 8007d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d20:	080086cc 	.word	0x080086cc
 8007d24:	080086ec 	.word	0x080086ec
 8007d28:	080086ac 	.word	0x080086ac

08007d2c <__swsetup_r>:
 8007d2c:	4b36      	ldr	r3, [pc, #216]	; (8007e08 <__swsetup_r+0xdc>)
 8007d2e:	b570      	push	{r4, r5, r6, lr}
 8007d30:	681d      	ldr	r5, [r3, #0]
 8007d32:	0006      	movs	r6, r0
 8007d34:	000c      	movs	r4, r1
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	d005      	beq.n	8007d46 <__swsetup_r+0x1a>
 8007d3a:	69ab      	ldr	r3, [r5, #24]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <__swsetup_r+0x1a>
 8007d40:	0028      	movs	r0, r5
 8007d42:	f000 f961 	bl	8008008 <__sinit>
 8007d46:	4b31      	ldr	r3, [pc, #196]	; (8007e0c <__swsetup_r+0xe0>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	d10f      	bne.n	8007d6c <__swsetup_r+0x40>
 8007d4c:	686c      	ldr	r4, [r5, #4]
 8007d4e:	230c      	movs	r3, #12
 8007d50:	5ee2      	ldrsh	r2, [r4, r3]
 8007d52:	b293      	uxth	r3, r2
 8007d54:	0719      	lsls	r1, r3, #28
 8007d56:	d42d      	bmi.n	8007db4 <__swsetup_r+0x88>
 8007d58:	06d9      	lsls	r1, r3, #27
 8007d5a:	d411      	bmi.n	8007d80 <__swsetup_r+0x54>
 8007d5c:	2309      	movs	r3, #9
 8007d5e:	2001      	movs	r0, #1
 8007d60:	6033      	str	r3, [r6, #0]
 8007d62:	3337      	adds	r3, #55	; 0x37
 8007d64:	4313      	orrs	r3, r2
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	4240      	negs	r0, r0
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	4b28      	ldr	r3, [pc, #160]	; (8007e10 <__swsetup_r+0xe4>)
 8007d6e:	429c      	cmp	r4, r3
 8007d70:	d101      	bne.n	8007d76 <__swsetup_r+0x4a>
 8007d72:	68ac      	ldr	r4, [r5, #8]
 8007d74:	e7eb      	b.n	8007d4e <__swsetup_r+0x22>
 8007d76:	4b27      	ldr	r3, [pc, #156]	; (8007e14 <__swsetup_r+0xe8>)
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	d1e8      	bne.n	8007d4e <__swsetup_r+0x22>
 8007d7c:	68ec      	ldr	r4, [r5, #12]
 8007d7e:	e7e6      	b.n	8007d4e <__swsetup_r+0x22>
 8007d80:	075b      	lsls	r3, r3, #29
 8007d82:	d513      	bpl.n	8007dac <__swsetup_r+0x80>
 8007d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d86:	2900      	cmp	r1, #0
 8007d88:	d008      	beq.n	8007d9c <__swsetup_r+0x70>
 8007d8a:	0023      	movs	r3, r4
 8007d8c:	3344      	adds	r3, #68	; 0x44
 8007d8e:	4299      	cmp	r1, r3
 8007d90:	d002      	beq.n	8007d98 <__swsetup_r+0x6c>
 8007d92:	0030      	movs	r0, r6
 8007d94:	f000 fa38 	bl	8008208 <_free_r>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	6363      	str	r3, [r4, #52]	; 0x34
 8007d9c:	2224      	movs	r2, #36	; 0x24
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	4393      	bics	r3, r2
 8007da2:	81a3      	strh	r3, [r4, #12]
 8007da4:	2300      	movs	r3, #0
 8007da6:	6063      	str	r3, [r4, #4]
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	2308      	movs	r3, #8
 8007dae:	89a2      	ldrh	r2, [r4, #12]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	81a3      	strh	r3, [r4, #12]
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10b      	bne.n	8007dd2 <__swsetup_r+0xa6>
 8007dba:	21a0      	movs	r1, #160	; 0xa0
 8007dbc:	2280      	movs	r2, #128	; 0x80
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	0089      	lsls	r1, r1, #2
 8007dc2:	0092      	lsls	r2, r2, #2
 8007dc4:	400b      	ands	r3, r1
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d003      	beq.n	8007dd2 <__swsetup_r+0xa6>
 8007dca:	0021      	movs	r1, r4
 8007dcc:	0030      	movs	r0, r6
 8007dce:	f000 f9d7 	bl	8008180 <__smakebuf_r>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	89a2      	ldrh	r2, [r4, #12]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	d011      	beq.n	8007dfe <__swsetup_r+0xd2>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60a3      	str	r3, [r4, #8]
 8007dde:	6963      	ldr	r3, [r4, #20]
 8007de0:	425b      	negs	r3, r3
 8007de2:	61a3      	str	r3, [r4, #24]
 8007de4:	2000      	movs	r0, #0
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	4283      	cmp	r3, r0
 8007dea:	d1be      	bne.n	8007d6a <__swsetup_r+0x3e>
 8007dec:	230c      	movs	r3, #12
 8007dee:	5ee2      	ldrsh	r2, [r4, r3]
 8007df0:	0613      	lsls	r3, r2, #24
 8007df2:	d5ba      	bpl.n	8007d6a <__swsetup_r+0x3e>
 8007df4:	2340      	movs	r3, #64	; 0x40
 8007df6:	4313      	orrs	r3, r2
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	3801      	subs	r0, #1
 8007dfc:	e7b5      	b.n	8007d6a <__swsetup_r+0x3e>
 8007dfe:	0792      	lsls	r2, r2, #30
 8007e00:	d400      	bmi.n	8007e04 <__swsetup_r+0xd8>
 8007e02:	6963      	ldr	r3, [r4, #20]
 8007e04:	60a3      	str	r3, [r4, #8]
 8007e06:	e7ed      	b.n	8007de4 <__swsetup_r+0xb8>
 8007e08:	2000000c 	.word	0x2000000c
 8007e0c:	080086cc 	.word	0x080086cc
 8007e10:	080086ec 	.word	0x080086ec
 8007e14:	080086ac 	.word	0x080086ac

08007e18 <__sflush_r>:
 8007e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e1a:	898a      	ldrh	r2, [r1, #12]
 8007e1c:	0005      	movs	r5, r0
 8007e1e:	000c      	movs	r4, r1
 8007e20:	0713      	lsls	r3, r2, #28
 8007e22:	d460      	bmi.n	8007ee6 <__sflush_r+0xce>
 8007e24:	684b      	ldr	r3, [r1, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	dc04      	bgt.n	8007e34 <__sflush_r+0x1c>
 8007e2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	dc01      	bgt.n	8007e34 <__sflush_r+0x1c>
 8007e30:	2000      	movs	r0, #0
 8007e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007e36:	2f00      	cmp	r7, #0
 8007e38:	d0fa      	beq.n	8007e30 <__sflush_r+0x18>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	682e      	ldr	r6, [r5, #0]
 8007e3e:	602b      	str	r3, [r5, #0]
 8007e40:	2380      	movs	r3, #128	; 0x80
 8007e42:	015b      	lsls	r3, r3, #5
 8007e44:	6a21      	ldr	r1, [r4, #32]
 8007e46:	401a      	ands	r2, r3
 8007e48:	d034      	beq.n	8007eb4 <__sflush_r+0x9c>
 8007e4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	075b      	lsls	r3, r3, #29
 8007e50:	d506      	bpl.n	8007e60 <__sflush_r+0x48>
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	1ac0      	subs	r0, r0, r3
 8007e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <__sflush_r+0x48>
 8007e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e5e:	1ac0      	subs	r0, r0, r3
 8007e60:	0002      	movs	r2, r0
 8007e62:	6a21      	ldr	r1, [r4, #32]
 8007e64:	2300      	movs	r3, #0
 8007e66:	0028      	movs	r0, r5
 8007e68:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007e6a:	47b8      	blx	r7
 8007e6c:	89a1      	ldrh	r1, [r4, #12]
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d106      	bne.n	8007e80 <__sflush_r+0x68>
 8007e72:	682b      	ldr	r3, [r5, #0]
 8007e74:	2b1d      	cmp	r3, #29
 8007e76:	d830      	bhi.n	8007eda <__sflush_r+0xc2>
 8007e78:	4a2b      	ldr	r2, [pc, #172]	; (8007f28 <__sflush_r+0x110>)
 8007e7a:	40da      	lsrs	r2, r3
 8007e7c:	07d3      	lsls	r3, r2, #31
 8007e7e:	d52c      	bpl.n	8007eda <__sflush_r+0xc2>
 8007e80:	2300      	movs	r3, #0
 8007e82:	6063      	str	r3, [r4, #4]
 8007e84:	6923      	ldr	r3, [r4, #16]
 8007e86:	6023      	str	r3, [r4, #0]
 8007e88:	04cb      	lsls	r3, r1, #19
 8007e8a:	d505      	bpl.n	8007e98 <__sflush_r+0x80>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <__sflush_r+0x7e>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d100      	bne.n	8007e98 <__sflush_r+0x80>
 8007e96:	6560      	str	r0, [r4, #84]	; 0x54
 8007e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e9a:	602e      	str	r6, [r5, #0]
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	d0c7      	beq.n	8007e30 <__sflush_r+0x18>
 8007ea0:	0023      	movs	r3, r4
 8007ea2:	3344      	adds	r3, #68	; 0x44
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	d002      	beq.n	8007eae <__sflush_r+0x96>
 8007ea8:	0028      	movs	r0, r5
 8007eaa:	f000 f9ad 	bl	8008208 <_free_r>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	6360      	str	r0, [r4, #52]	; 0x34
 8007eb2:	e7be      	b.n	8007e32 <__sflush_r+0x1a>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	0028      	movs	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	1c43      	adds	r3, r0, #1
 8007ebc:	d1c6      	bne.n	8007e4c <__sflush_r+0x34>
 8007ebe:	682b      	ldr	r3, [r5, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0c3      	beq.n	8007e4c <__sflush_r+0x34>
 8007ec4:	2b1d      	cmp	r3, #29
 8007ec6:	d001      	beq.n	8007ecc <__sflush_r+0xb4>
 8007ec8:	2b16      	cmp	r3, #22
 8007eca:	d101      	bne.n	8007ed0 <__sflush_r+0xb8>
 8007ecc:	602e      	str	r6, [r5, #0]
 8007ece:	e7af      	b.n	8007e30 <__sflush_r+0x18>
 8007ed0:	2340      	movs	r3, #64	; 0x40
 8007ed2:	89a2      	ldrh	r2, [r4, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	e7ab      	b.n	8007e32 <__sflush_r+0x1a>
 8007eda:	2340      	movs	r3, #64	; 0x40
 8007edc:	430b      	orrs	r3, r1
 8007ede:	2001      	movs	r0, #1
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	4240      	negs	r0, r0
 8007ee4:	e7a5      	b.n	8007e32 <__sflush_r+0x1a>
 8007ee6:	690f      	ldr	r7, [r1, #16]
 8007ee8:	2f00      	cmp	r7, #0
 8007eea:	d0a1      	beq.n	8007e30 <__sflush_r+0x18>
 8007eec:	680b      	ldr	r3, [r1, #0]
 8007eee:	600f      	str	r7, [r1, #0]
 8007ef0:	1bdb      	subs	r3, r3, r7
 8007ef2:	9301      	str	r3, [sp, #4]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	0792      	lsls	r2, r2, #30
 8007ef8:	d100      	bne.n	8007efc <__sflush_r+0xe4>
 8007efa:	694b      	ldr	r3, [r1, #20]
 8007efc:	60a3      	str	r3, [r4, #8]
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dc00      	bgt.n	8007f06 <__sflush_r+0xee>
 8007f04:	e794      	b.n	8007e30 <__sflush_r+0x18>
 8007f06:	9b01      	ldr	r3, [sp, #4]
 8007f08:	003a      	movs	r2, r7
 8007f0a:	6a21      	ldr	r1, [r4, #32]
 8007f0c:	0028      	movs	r0, r5
 8007f0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f10:	47b0      	blx	r6
 8007f12:	2800      	cmp	r0, #0
 8007f14:	dc03      	bgt.n	8007f1e <__sflush_r+0x106>
 8007f16:	2340      	movs	r3, #64	; 0x40
 8007f18:	89a2      	ldrh	r2, [r4, #12]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	e7df      	b.n	8007ede <__sflush_r+0xc6>
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	183f      	adds	r7, r7, r0
 8007f22:	1a1b      	subs	r3, r3, r0
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	e7ea      	b.n	8007efe <__sflush_r+0xe6>
 8007f28:	20400001 	.word	0x20400001

08007f2c <_fflush_r>:
 8007f2c:	690b      	ldr	r3, [r1, #16]
 8007f2e:	b570      	push	{r4, r5, r6, lr}
 8007f30:	0005      	movs	r5, r0
 8007f32:	000c      	movs	r4, r1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <_fflush_r+0x10>
 8007f38:	2000      	movs	r0, #0
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d004      	beq.n	8007f4a <_fflush_r+0x1e>
 8007f40:	6983      	ldr	r3, [r0, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <_fflush_r+0x1e>
 8007f46:	f000 f85f 	bl	8008008 <__sinit>
 8007f4a:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <_fflush_r+0x4c>)
 8007f4c:	429c      	cmp	r4, r3
 8007f4e:	d109      	bne.n	8007f64 <_fflush_r+0x38>
 8007f50:	686c      	ldr	r4, [r5, #4]
 8007f52:	220c      	movs	r2, #12
 8007f54:	5ea3      	ldrsh	r3, [r4, r2]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0ee      	beq.n	8007f38 <_fflush_r+0xc>
 8007f5a:	0021      	movs	r1, r4
 8007f5c:	0028      	movs	r0, r5
 8007f5e:	f7ff ff5b 	bl	8007e18 <__sflush_r>
 8007f62:	e7ea      	b.n	8007f3a <_fflush_r+0xe>
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <_fflush_r+0x50>)
 8007f66:	429c      	cmp	r4, r3
 8007f68:	d101      	bne.n	8007f6e <_fflush_r+0x42>
 8007f6a:	68ac      	ldr	r4, [r5, #8]
 8007f6c:	e7f1      	b.n	8007f52 <_fflush_r+0x26>
 8007f6e:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <_fflush_r+0x54>)
 8007f70:	429c      	cmp	r4, r3
 8007f72:	d1ee      	bne.n	8007f52 <_fflush_r+0x26>
 8007f74:	68ec      	ldr	r4, [r5, #12]
 8007f76:	e7ec      	b.n	8007f52 <_fflush_r+0x26>
 8007f78:	080086cc 	.word	0x080086cc
 8007f7c:	080086ec 	.word	0x080086ec
 8007f80:	080086ac 	.word	0x080086ac

08007f84 <std>:
 8007f84:	2300      	movs	r3, #0
 8007f86:	b510      	push	{r4, lr}
 8007f88:	0004      	movs	r4, r0
 8007f8a:	6003      	str	r3, [r0, #0]
 8007f8c:	6043      	str	r3, [r0, #4]
 8007f8e:	6083      	str	r3, [r0, #8]
 8007f90:	8181      	strh	r1, [r0, #12]
 8007f92:	6643      	str	r3, [r0, #100]	; 0x64
 8007f94:	81c2      	strh	r2, [r0, #14]
 8007f96:	6103      	str	r3, [r0, #16]
 8007f98:	6143      	str	r3, [r0, #20]
 8007f9a:	6183      	str	r3, [r0, #24]
 8007f9c:	0019      	movs	r1, r3
 8007f9e:	2208      	movs	r2, #8
 8007fa0:	305c      	adds	r0, #92	; 0x5c
 8007fa2:	f7ff fdfb 	bl	8007b9c <memset>
 8007fa6:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <std+0x38>)
 8007fa8:	6224      	str	r4, [r4, #32]
 8007faa:	6263      	str	r3, [r4, #36]	; 0x24
 8007fac:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <std+0x3c>)
 8007fae:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fb0:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <std+0x40>)
 8007fb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fb4:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <std+0x44>)
 8007fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	46c0      	nop			; (mov r8, r8)
 8007fbc:	0800837d 	.word	0x0800837d
 8007fc0:	080083a5 	.word	0x080083a5
 8007fc4:	080083dd 	.word	0x080083dd
 8007fc8:	08008409 	.word	0x08008409

08007fcc <_cleanup_r>:
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4902      	ldr	r1, [pc, #8]	; (8007fd8 <_cleanup_r+0xc>)
 8007fd0:	f000 f88c 	bl	80080ec <_fwalk_reent>
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	08007f2d 	.word	0x08007f2d

08007fdc <__sfmoreglue>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	2568      	movs	r5, #104	; 0x68
 8007fe0:	1e4a      	subs	r2, r1, #1
 8007fe2:	4355      	muls	r5, r2
 8007fe4:	000e      	movs	r6, r1
 8007fe6:	0029      	movs	r1, r5
 8007fe8:	3174      	adds	r1, #116	; 0x74
 8007fea:	f000 f957 	bl	800829c <_malloc_r>
 8007fee:	1e04      	subs	r4, r0, #0
 8007ff0:	d008      	beq.n	8008004 <__sfmoreglue+0x28>
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	002a      	movs	r2, r5
 8007ff6:	6001      	str	r1, [r0, #0]
 8007ff8:	6046      	str	r6, [r0, #4]
 8007ffa:	300c      	adds	r0, #12
 8007ffc:	60a0      	str	r0, [r4, #8]
 8007ffe:	3268      	adds	r2, #104	; 0x68
 8008000:	f7ff fdcc 	bl	8007b9c <memset>
 8008004:	0020      	movs	r0, r4
 8008006:	bd70      	pop	{r4, r5, r6, pc}

08008008 <__sinit>:
 8008008:	6983      	ldr	r3, [r0, #24]
 800800a:	b513      	push	{r0, r1, r4, lr}
 800800c:	0004      	movs	r4, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d128      	bne.n	8008064 <__sinit+0x5c>
 8008012:	6483      	str	r3, [r0, #72]	; 0x48
 8008014:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008016:	6503      	str	r3, [r0, #80]	; 0x50
 8008018:	4b13      	ldr	r3, [pc, #76]	; (8008068 <__sinit+0x60>)
 800801a:	4a14      	ldr	r2, [pc, #80]	; (800806c <__sinit+0x64>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6282      	str	r2, [r0, #40]	; 0x28
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	4298      	cmp	r0, r3
 8008024:	d101      	bne.n	800802a <__sinit+0x22>
 8008026:	2301      	movs	r3, #1
 8008028:	6183      	str	r3, [r0, #24]
 800802a:	0020      	movs	r0, r4
 800802c:	f000 f820 	bl	8008070 <__sfp>
 8008030:	6060      	str	r0, [r4, #4]
 8008032:	0020      	movs	r0, r4
 8008034:	f000 f81c 	bl	8008070 <__sfp>
 8008038:	60a0      	str	r0, [r4, #8]
 800803a:	0020      	movs	r0, r4
 800803c:	f000 f818 	bl	8008070 <__sfp>
 8008040:	2200      	movs	r2, #0
 8008042:	60e0      	str	r0, [r4, #12]
 8008044:	2104      	movs	r1, #4
 8008046:	6860      	ldr	r0, [r4, #4]
 8008048:	f7ff ff9c 	bl	8007f84 <std>
 800804c:	2201      	movs	r2, #1
 800804e:	2109      	movs	r1, #9
 8008050:	68a0      	ldr	r0, [r4, #8]
 8008052:	f7ff ff97 	bl	8007f84 <std>
 8008056:	2202      	movs	r2, #2
 8008058:	2112      	movs	r1, #18
 800805a:	68e0      	ldr	r0, [r4, #12]
 800805c:	f7ff ff92 	bl	8007f84 <std>
 8008060:	2301      	movs	r3, #1
 8008062:	61a3      	str	r3, [r4, #24]
 8008064:	bd13      	pop	{r0, r1, r4, pc}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	080086a8 	.word	0x080086a8
 800806c:	08007fcd 	.word	0x08007fcd

08008070 <__sfp>:
 8008070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008072:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <__sfp+0x74>)
 8008074:	0007      	movs	r7, r0
 8008076:	681e      	ldr	r6, [r3, #0]
 8008078:	69b3      	ldr	r3, [r6, #24]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <__sfp+0x14>
 800807e:	0030      	movs	r0, r6
 8008080:	f7ff ffc2 	bl	8008008 <__sinit>
 8008084:	3648      	adds	r6, #72	; 0x48
 8008086:	68b4      	ldr	r4, [r6, #8]
 8008088:	6873      	ldr	r3, [r6, #4]
 800808a:	3b01      	subs	r3, #1
 800808c:	d504      	bpl.n	8008098 <__sfp+0x28>
 800808e:	6833      	ldr	r3, [r6, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d007      	beq.n	80080a4 <__sfp+0x34>
 8008094:	6836      	ldr	r6, [r6, #0]
 8008096:	e7f6      	b.n	8008086 <__sfp+0x16>
 8008098:	220c      	movs	r2, #12
 800809a:	5ea5      	ldrsh	r5, [r4, r2]
 800809c:	2d00      	cmp	r5, #0
 800809e:	d00d      	beq.n	80080bc <__sfp+0x4c>
 80080a0:	3468      	adds	r4, #104	; 0x68
 80080a2:	e7f2      	b.n	800808a <__sfp+0x1a>
 80080a4:	2104      	movs	r1, #4
 80080a6:	0038      	movs	r0, r7
 80080a8:	f7ff ff98 	bl	8007fdc <__sfmoreglue>
 80080ac:	6030      	str	r0, [r6, #0]
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d1f0      	bne.n	8008094 <__sfp+0x24>
 80080b2:	230c      	movs	r3, #12
 80080b4:	0004      	movs	r4, r0
 80080b6:	603b      	str	r3, [r7, #0]
 80080b8:	0020      	movs	r0, r4
 80080ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080bc:	0020      	movs	r0, r4
 80080be:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <__sfp+0x78>)
 80080c0:	6665      	str	r5, [r4, #100]	; 0x64
 80080c2:	6025      	str	r5, [r4, #0]
 80080c4:	6065      	str	r5, [r4, #4]
 80080c6:	60a5      	str	r5, [r4, #8]
 80080c8:	60e3      	str	r3, [r4, #12]
 80080ca:	6125      	str	r5, [r4, #16]
 80080cc:	6165      	str	r5, [r4, #20]
 80080ce:	61a5      	str	r5, [r4, #24]
 80080d0:	2208      	movs	r2, #8
 80080d2:	0029      	movs	r1, r5
 80080d4:	305c      	adds	r0, #92	; 0x5c
 80080d6:	f7ff fd61 	bl	8007b9c <memset>
 80080da:	6365      	str	r5, [r4, #52]	; 0x34
 80080dc:	63a5      	str	r5, [r4, #56]	; 0x38
 80080de:	64a5      	str	r5, [r4, #72]	; 0x48
 80080e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80080e2:	e7e9      	b.n	80080b8 <__sfp+0x48>
 80080e4:	080086a8 	.word	0x080086a8
 80080e8:	ffff0001 	.word	0xffff0001

080080ec <_fwalk_reent>:
 80080ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080ee:	0004      	movs	r4, r0
 80080f0:	0007      	movs	r7, r0
 80080f2:	2600      	movs	r6, #0
 80080f4:	9101      	str	r1, [sp, #4]
 80080f6:	3448      	adds	r4, #72	; 0x48
 80080f8:	2c00      	cmp	r4, #0
 80080fa:	d101      	bne.n	8008100 <_fwalk_reent+0x14>
 80080fc:	0030      	movs	r0, r6
 80080fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008100:	6863      	ldr	r3, [r4, #4]
 8008102:	68a5      	ldr	r5, [r4, #8]
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	3b01      	subs	r3, #1
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	d501      	bpl.n	8008112 <_fwalk_reent+0x26>
 800810e:	6824      	ldr	r4, [r4, #0]
 8008110:	e7f2      	b.n	80080f8 <_fwalk_reent+0xc>
 8008112:	89ab      	ldrh	r3, [r5, #12]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d908      	bls.n	800812a <_fwalk_reent+0x3e>
 8008118:	220e      	movs	r2, #14
 800811a:	5eab      	ldrsh	r3, [r5, r2]
 800811c:	3301      	adds	r3, #1
 800811e:	d004      	beq.n	800812a <_fwalk_reent+0x3e>
 8008120:	0029      	movs	r1, r5
 8008122:	0038      	movs	r0, r7
 8008124:	9b01      	ldr	r3, [sp, #4]
 8008126:	4798      	blx	r3
 8008128:	4306      	orrs	r6, r0
 800812a:	3568      	adds	r5, #104	; 0x68
 800812c:	e7eb      	b.n	8008106 <_fwalk_reent+0x1a>
	...

08008130 <__swhatbuf_r>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	000e      	movs	r6, r1
 8008134:	001d      	movs	r5, r3
 8008136:	230e      	movs	r3, #14
 8008138:	5ec9      	ldrsh	r1, [r1, r3]
 800813a:	b096      	sub	sp, #88	; 0x58
 800813c:	0014      	movs	r4, r2
 800813e:	2900      	cmp	r1, #0
 8008140:	da07      	bge.n	8008152 <__swhatbuf_r+0x22>
 8008142:	2300      	movs	r3, #0
 8008144:	602b      	str	r3, [r5, #0]
 8008146:	89b3      	ldrh	r3, [r6, #12]
 8008148:	061b      	lsls	r3, r3, #24
 800814a:	d411      	bmi.n	8008170 <__swhatbuf_r+0x40>
 800814c:	2380      	movs	r3, #128	; 0x80
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	e00f      	b.n	8008172 <__swhatbuf_r+0x42>
 8008152:	466a      	mov	r2, sp
 8008154:	f000 f984 	bl	8008460 <_fstat_r>
 8008158:	2800      	cmp	r0, #0
 800815a:	dbf2      	blt.n	8008142 <__swhatbuf_r+0x12>
 800815c:	22f0      	movs	r2, #240	; 0xf0
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	0212      	lsls	r2, r2, #8
 8008162:	4013      	ands	r3, r2
 8008164:	4a05      	ldr	r2, [pc, #20]	; (800817c <__swhatbuf_r+0x4c>)
 8008166:	189b      	adds	r3, r3, r2
 8008168:	425a      	negs	r2, r3
 800816a:	4153      	adcs	r3, r2
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	e7ed      	b.n	800814c <__swhatbuf_r+0x1c>
 8008170:	2340      	movs	r3, #64	; 0x40
 8008172:	2000      	movs	r0, #0
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	b016      	add	sp, #88	; 0x58
 8008178:	bd70      	pop	{r4, r5, r6, pc}
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	ffffe000 	.word	0xffffe000

08008180 <__smakebuf_r>:
 8008180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008182:	2602      	movs	r6, #2
 8008184:	898b      	ldrh	r3, [r1, #12]
 8008186:	0005      	movs	r5, r0
 8008188:	000c      	movs	r4, r1
 800818a:	4233      	tst	r3, r6
 800818c:	d006      	beq.n	800819c <__smakebuf_r+0x1c>
 800818e:	0023      	movs	r3, r4
 8008190:	3347      	adds	r3, #71	; 0x47
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	6123      	str	r3, [r4, #16]
 8008196:	2301      	movs	r3, #1
 8008198:	6163      	str	r3, [r4, #20]
 800819a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800819c:	ab01      	add	r3, sp, #4
 800819e:	466a      	mov	r2, sp
 80081a0:	f7ff ffc6 	bl	8008130 <__swhatbuf_r>
 80081a4:	9900      	ldr	r1, [sp, #0]
 80081a6:	0007      	movs	r7, r0
 80081a8:	0028      	movs	r0, r5
 80081aa:	f000 f877 	bl	800829c <_malloc_r>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d108      	bne.n	80081c4 <__smakebuf_r+0x44>
 80081b2:	220c      	movs	r2, #12
 80081b4:	5ea3      	ldrsh	r3, [r4, r2]
 80081b6:	059a      	lsls	r2, r3, #22
 80081b8:	d4ef      	bmi.n	800819a <__smakebuf_r+0x1a>
 80081ba:	2203      	movs	r2, #3
 80081bc:	4393      	bics	r3, r2
 80081be:	431e      	orrs	r6, r3
 80081c0:	81a6      	strh	r6, [r4, #12]
 80081c2:	e7e4      	b.n	800818e <__smakebuf_r+0xe>
 80081c4:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <__smakebuf_r+0x84>)
 80081c6:	62ab      	str	r3, [r5, #40]	; 0x28
 80081c8:	2380      	movs	r3, #128	; 0x80
 80081ca:	89a2      	ldrh	r2, [r4, #12]
 80081cc:	6020      	str	r0, [r4, #0]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	81a3      	strh	r3, [r4, #12]
 80081d2:	9b00      	ldr	r3, [sp, #0]
 80081d4:	6120      	str	r0, [r4, #16]
 80081d6:	6163      	str	r3, [r4, #20]
 80081d8:	9b01      	ldr	r3, [sp, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00d      	beq.n	80081fa <__smakebuf_r+0x7a>
 80081de:	230e      	movs	r3, #14
 80081e0:	5ee1      	ldrsh	r1, [r4, r3]
 80081e2:	0028      	movs	r0, r5
 80081e4:	f000 f94e 	bl	8008484 <_isatty_r>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d006      	beq.n	80081fa <__smakebuf_r+0x7a>
 80081ec:	2203      	movs	r2, #3
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	4393      	bics	r3, r2
 80081f2:	001a      	movs	r2, r3
 80081f4:	2301      	movs	r3, #1
 80081f6:	4313      	orrs	r3, r2
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	89a0      	ldrh	r0, [r4, #12]
 80081fc:	4338      	orrs	r0, r7
 80081fe:	81a0      	strh	r0, [r4, #12]
 8008200:	e7cb      	b.n	800819a <__smakebuf_r+0x1a>
 8008202:	46c0      	nop			; (mov r8, r8)
 8008204:	08007fcd 	.word	0x08007fcd

08008208 <_free_r>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	0005      	movs	r5, r0
 800820c:	2900      	cmp	r1, #0
 800820e:	d010      	beq.n	8008232 <_free_r+0x2a>
 8008210:	1f0c      	subs	r4, r1, #4
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	da00      	bge.n	800821a <_free_r+0x12>
 8008218:	18e4      	adds	r4, r4, r3
 800821a:	0028      	movs	r0, r5
 800821c:	f000 f958 	bl	80084d0 <__malloc_lock>
 8008220:	4a1d      	ldr	r2, [pc, #116]	; (8008298 <_free_r+0x90>)
 8008222:	6813      	ldr	r3, [r2, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d105      	bne.n	8008234 <_free_r+0x2c>
 8008228:	6063      	str	r3, [r4, #4]
 800822a:	6014      	str	r4, [r2, #0]
 800822c:	0028      	movs	r0, r5
 800822e:	f000 f950 	bl	80084d2 <__malloc_unlock>
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	42a3      	cmp	r3, r4
 8008236:	d909      	bls.n	800824c <_free_r+0x44>
 8008238:	6821      	ldr	r1, [r4, #0]
 800823a:	1860      	adds	r0, r4, r1
 800823c:	4283      	cmp	r3, r0
 800823e:	d1f3      	bne.n	8008228 <_free_r+0x20>
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	1841      	adds	r1, r0, r1
 8008246:	6021      	str	r1, [r4, #0]
 8008248:	e7ee      	b.n	8008228 <_free_r+0x20>
 800824a:	0013      	movs	r3, r2
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	2a00      	cmp	r2, #0
 8008250:	d001      	beq.n	8008256 <_free_r+0x4e>
 8008252:	42a2      	cmp	r2, r4
 8008254:	d9f9      	bls.n	800824a <_free_r+0x42>
 8008256:	6819      	ldr	r1, [r3, #0]
 8008258:	1858      	adds	r0, r3, r1
 800825a:	42a0      	cmp	r0, r4
 800825c:	d10b      	bne.n	8008276 <_free_r+0x6e>
 800825e:	6820      	ldr	r0, [r4, #0]
 8008260:	1809      	adds	r1, r1, r0
 8008262:	1858      	adds	r0, r3, r1
 8008264:	6019      	str	r1, [r3, #0]
 8008266:	4282      	cmp	r2, r0
 8008268:	d1e0      	bne.n	800822c <_free_r+0x24>
 800826a:	6810      	ldr	r0, [r2, #0]
 800826c:	6852      	ldr	r2, [r2, #4]
 800826e:	1841      	adds	r1, r0, r1
 8008270:	6019      	str	r1, [r3, #0]
 8008272:	605a      	str	r2, [r3, #4]
 8008274:	e7da      	b.n	800822c <_free_r+0x24>
 8008276:	42a0      	cmp	r0, r4
 8008278:	d902      	bls.n	8008280 <_free_r+0x78>
 800827a:	230c      	movs	r3, #12
 800827c:	602b      	str	r3, [r5, #0]
 800827e:	e7d5      	b.n	800822c <_free_r+0x24>
 8008280:	6821      	ldr	r1, [r4, #0]
 8008282:	1860      	adds	r0, r4, r1
 8008284:	4282      	cmp	r2, r0
 8008286:	d103      	bne.n	8008290 <_free_r+0x88>
 8008288:	6810      	ldr	r0, [r2, #0]
 800828a:	6852      	ldr	r2, [r2, #4]
 800828c:	1841      	adds	r1, r0, r1
 800828e:	6021      	str	r1, [r4, #0]
 8008290:	6062      	str	r2, [r4, #4]
 8008292:	605c      	str	r4, [r3, #4]
 8008294:	e7ca      	b.n	800822c <_free_r+0x24>
 8008296:	46c0      	nop			; (mov r8, r8)
 8008298:	20000138 	.word	0x20000138

0800829c <_malloc_r>:
 800829c:	2303      	movs	r3, #3
 800829e:	b570      	push	{r4, r5, r6, lr}
 80082a0:	1ccd      	adds	r5, r1, #3
 80082a2:	439d      	bics	r5, r3
 80082a4:	3508      	adds	r5, #8
 80082a6:	0006      	movs	r6, r0
 80082a8:	2d0c      	cmp	r5, #12
 80082aa:	d21e      	bcs.n	80082ea <_malloc_r+0x4e>
 80082ac:	250c      	movs	r5, #12
 80082ae:	42a9      	cmp	r1, r5
 80082b0:	d81d      	bhi.n	80082ee <_malloc_r+0x52>
 80082b2:	0030      	movs	r0, r6
 80082b4:	f000 f90c 	bl	80084d0 <__malloc_lock>
 80082b8:	4a25      	ldr	r2, [pc, #148]	; (8008350 <_malloc_r+0xb4>)
 80082ba:	6814      	ldr	r4, [r2, #0]
 80082bc:	0021      	movs	r1, r4
 80082be:	2900      	cmp	r1, #0
 80082c0:	d119      	bne.n	80082f6 <_malloc_r+0x5a>
 80082c2:	4c24      	ldr	r4, [pc, #144]	; (8008354 <_malloc_r+0xb8>)
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d103      	bne.n	80082d2 <_malloc_r+0x36>
 80082ca:	0030      	movs	r0, r6
 80082cc:	f000 f844 	bl	8008358 <_sbrk_r>
 80082d0:	6020      	str	r0, [r4, #0]
 80082d2:	0029      	movs	r1, r5
 80082d4:	0030      	movs	r0, r6
 80082d6:	f000 f83f 	bl	8008358 <_sbrk_r>
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	d12b      	bne.n	8008336 <_malloc_r+0x9a>
 80082de:	230c      	movs	r3, #12
 80082e0:	0030      	movs	r0, r6
 80082e2:	6033      	str	r3, [r6, #0]
 80082e4:	f000 f8f5 	bl	80084d2 <__malloc_unlock>
 80082e8:	e003      	b.n	80082f2 <_malloc_r+0x56>
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	dadf      	bge.n	80082ae <_malloc_r+0x12>
 80082ee:	230c      	movs	r3, #12
 80082f0:	6033      	str	r3, [r6, #0]
 80082f2:	2000      	movs	r0, #0
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	680b      	ldr	r3, [r1, #0]
 80082f8:	1b5b      	subs	r3, r3, r5
 80082fa:	d419      	bmi.n	8008330 <_malloc_r+0x94>
 80082fc:	2b0b      	cmp	r3, #11
 80082fe:	d903      	bls.n	8008308 <_malloc_r+0x6c>
 8008300:	600b      	str	r3, [r1, #0]
 8008302:	18cc      	adds	r4, r1, r3
 8008304:	6025      	str	r5, [r4, #0]
 8008306:	e003      	b.n	8008310 <_malloc_r+0x74>
 8008308:	684b      	ldr	r3, [r1, #4]
 800830a:	428c      	cmp	r4, r1
 800830c:	d10d      	bne.n	800832a <_malloc_r+0x8e>
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	0030      	movs	r0, r6
 8008312:	f000 f8de 	bl	80084d2 <__malloc_unlock>
 8008316:	0020      	movs	r0, r4
 8008318:	2207      	movs	r2, #7
 800831a:	300b      	adds	r0, #11
 800831c:	1d23      	adds	r3, r4, #4
 800831e:	4390      	bics	r0, r2
 8008320:	1ac3      	subs	r3, r0, r3
 8008322:	d0e7      	beq.n	80082f4 <_malloc_r+0x58>
 8008324:	425a      	negs	r2, r3
 8008326:	50e2      	str	r2, [r4, r3]
 8008328:	e7e4      	b.n	80082f4 <_malloc_r+0x58>
 800832a:	6063      	str	r3, [r4, #4]
 800832c:	000c      	movs	r4, r1
 800832e:	e7ef      	b.n	8008310 <_malloc_r+0x74>
 8008330:	000c      	movs	r4, r1
 8008332:	6849      	ldr	r1, [r1, #4]
 8008334:	e7c3      	b.n	80082be <_malloc_r+0x22>
 8008336:	2303      	movs	r3, #3
 8008338:	1cc4      	adds	r4, r0, #3
 800833a:	439c      	bics	r4, r3
 800833c:	42a0      	cmp	r0, r4
 800833e:	d0e1      	beq.n	8008304 <_malloc_r+0x68>
 8008340:	1a21      	subs	r1, r4, r0
 8008342:	0030      	movs	r0, r6
 8008344:	f000 f808 	bl	8008358 <_sbrk_r>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d1db      	bne.n	8008304 <_malloc_r+0x68>
 800834c:	e7c7      	b.n	80082de <_malloc_r+0x42>
 800834e:	46c0      	nop			; (mov r8, r8)
 8008350:	20000138 	.word	0x20000138
 8008354:	2000013c 	.word	0x2000013c

08008358 <_sbrk_r>:
 8008358:	2300      	movs	r3, #0
 800835a:	b570      	push	{r4, r5, r6, lr}
 800835c:	4c06      	ldr	r4, [pc, #24]	; (8008378 <_sbrk_r+0x20>)
 800835e:	0005      	movs	r5, r0
 8008360:	0008      	movs	r0, r1
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	f7fa fd84 	bl	8002e70 <_sbrk>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d103      	bne.n	8008374 <_sbrk_r+0x1c>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d000      	beq.n	8008374 <_sbrk_r+0x1c>
 8008372:	602b      	str	r3, [r5, #0]
 8008374:	bd70      	pop	{r4, r5, r6, pc}
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	20000864 	.word	0x20000864

0800837c <__sread>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	000c      	movs	r4, r1
 8008380:	250e      	movs	r5, #14
 8008382:	5f49      	ldrsh	r1, [r1, r5]
 8008384:	f000 f8a6 	bl	80084d4 <_read_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	db03      	blt.n	8008394 <__sread+0x18>
 800838c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800838e:	181b      	adds	r3, r3, r0
 8008390:	6563      	str	r3, [r4, #84]	; 0x54
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	4a02      	ldr	r2, [pc, #8]	; (80083a0 <__sread+0x24>)
 8008398:	4013      	ands	r3, r2
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	e7f9      	b.n	8008392 <__sread+0x16>
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	ffffefff 	.word	0xffffefff

080083a4 <__swrite>:
 80083a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a6:	001f      	movs	r7, r3
 80083a8:	898b      	ldrh	r3, [r1, #12]
 80083aa:	0005      	movs	r5, r0
 80083ac:	000c      	movs	r4, r1
 80083ae:	0016      	movs	r6, r2
 80083b0:	05db      	lsls	r3, r3, #23
 80083b2:	d505      	bpl.n	80083c0 <__swrite+0x1c>
 80083b4:	230e      	movs	r3, #14
 80083b6:	5ec9      	ldrsh	r1, [r1, r3]
 80083b8:	2200      	movs	r2, #0
 80083ba:	2302      	movs	r3, #2
 80083bc:	f000 f874 	bl	80084a8 <_lseek_r>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	4a05      	ldr	r2, [pc, #20]	; (80083d8 <__swrite+0x34>)
 80083c4:	0028      	movs	r0, r5
 80083c6:	4013      	ands	r3, r2
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	0032      	movs	r2, r6
 80083cc:	230e      	movs	r3, #14
 80083ce:	5ee1      	ldrsh	r1, [r4, r3]
 80083d0:	003b      	movs	r3, r7
 80083d2:	f000 f81f 	bl	8008414 <_write_r>
 80083d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d8:	ffffefff 	.word	0xffffefff

080083dc <__sseek>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	000c      	movs	r4, r1
 80083e0:	250e      	movs	r5, #14
 80083e2:	5f49      	ldrsh	r1, [r1, r5]
 80083e4:	f000 f860 	bl	80084a8 <_lseek_r>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	1c42      	adds	r2, r0, #1
 80083ec:	d103      	bne.n	80083f6 <__sseek+0x1a>
 80083ee:	4a05      	ldr	r2, [pc, #20]	; (8008404 <__sseek+0x28>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	81a3      	strh	r3, [r4, #12]
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	2280      	movs	r2, #128	; 0x80
 80083f8:	0152      	lsls	r2, r2, #5
 80083fa:	4313      	orrs	r3, r2
 80083fc:	81a3      	strh	r3, [r4, #12]
 80083fe:	6560      	str	r0, [r4, #84]	; 0x54
 8008400:	e7f8      	b.n	80083f4 <__sseek+0x18>
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	ffffefff 	.word	0xffffefff

08008408 <__sclose>:
 8008408:	b510      	push	{r4, lr}
 800840a:	230e      	movs	r3, #14
 800840c:	5ec9      	ldrsh	r1, [r1, r3]
 800840e:	f000 f815 	bl	800843c <_close_r>
 8008412:	bd10      	pop	{r4, pc}

08008414 <_write_r>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	0005      	movs	r5, r0
 8008418:	0008      	movs	r0, r1
 800841a:	0011      	movs	r1, r2
 800841c:	2200      	movs	r2, #0
 800841e:	4c06      	ldr	r4, [pc, #24]	; (8008438 <_write_r+0x24>)
 8008420:	6022      	str	r2, [r4, #0]
 8008422:	001a      	movs	r2, r3
 8008424:	f7fa fcdb 	bl	8002dde <_write>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d103      	bne.n	8008434 <_write_r+0x20>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d000      	beq.n	8008434 <_write_r+0x20>
 8008432:	602b      	str	r3, [r5, #0]
 8008434:	bd70      	pop	{r4, r5, r6, pc}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	20000864 	.word	0x20000864

0800843c <_close_r>:
 800843c:	2300      	movs	r3, #0
 800843e:	b570      	push	{r4, r5, r6, lr}
 8008440:	4c06      	ldr	r4, [pc, #24]	; (800845c <_close_r+0x20>)
 8008442:	0005      	movs	r5, r0
 8008444:	0008      	movs	r0, r1
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	f7fa fce5 	bl	8002e16 <_close>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d103      	bne.n	8008458 <_close_r+0x1c>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d000      	beq.n	8008458 <_close_r+0x1c>
 8008456:	602b      	str	r3, [r5, #0]
 8008458:	bd70      	pop	{r4, r5, r6, pc}
 800845a:	46c0      	nop			; (mov r8, r8)
 800845c:	20000864 	.word	0x20000864

08008460 <_fstat_r>:
 8008460:	2300      	movs	r3, #0
 8008462:	b570      	push	{r4, r5, r6, lr}
 8008464:	4c06      	ldr	r4, [pc, #24]	; (8008480 <_fstat_r+0x20>)
 8008466:	0005      	movs	r5, r0
 8008468:	0008      	movs	r0, r1
 800846a:	0011      	movs	r1, r2
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	f7fa fcdc 	bl	8002e2a <_fstat>
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	d103      	bne.n	800847e <_fstat_r+0x1e>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d000      	beq.n	800847e <_fstat_r+0x1e>
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	bd70      	pop	{r4, r5, r6, pc}
 8008480:	20000864 	.word	0x20000864

08008484 <_isatty_r>:
 8008484:	2300      	movs	r3, #0
 8008486:	b570      	push	{r4, r5, r6, lr}
 8008488:	4c06      	ldr	r4, [pc, #24]	; (80084a4 <_isatty_r+0x20>)
 800848a:	0005      	movs	r5, r0
 800848c:	0008      	movs	r0, r1
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	f7fa fcd9 	bl	8002e46 <_isatty>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d103      	bne.n	80084a0 <_isatty_r+0x1c>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d000      	beq.n	80084a0 <_isatty_r+0x1c>
 800849e:	602b      	str	r3, [r5, #0]
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
 80084a2:	46c0      	nop			; (mov r8, r8)
 80084a4:	20000864 	.word	0x20000864

080084a8 <_lseek_r>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	0005      	movs	r5, r0
 80084ac:	0008      	movs	r0, r1
 80084ae:	0011      	movs	r1, r2
 80084b0:	2200      	movs	r2, #0
 80084b2:	4c06      	ldr	r4, [pc, #24]	; (80084cc <_lseek_r+0x24>)
 80084b4:	6022      	str	r2, [r4, #0]
 80084b6:	001a      	movs	r2, r3
 80084b8:	f7fa fcce 	bl	8002e58 <_lseek>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d103      	bne.n	80084c8 <_lseek_r+0x20>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d000      	beq.n	80084c8 <_lseek_r+0x20>
 80084c6:	602b      	str	r3, [r5, #0]
 80084c8:	bd70      	pop	{r4, r5, r6, pc}
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	20000864 	.word	0x20000864

080084d0 <__malloc_lock>:
 80084d0:	4770      	bx	lr

080084d2 <__malloc_unlock>:
 80084d2:	4770      	bx	lr

080084d4 <_read_r>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	0005      	movs	r5, r0
 80084d8:	0008      	movs	r0, r1
 80084da:	0011      	movs	r1, r2
 80084dc:	2200      	movs	r2, #0
 80084de:	4c06      	ldr	r4, [pc, #24]	; (80084f8 <_read_r+0x24>)
 80084e0:	6022      	str	r2, [r4, #0]
 80084e2:	001a      	movs	r2, r3
 80084e4:	f7fa fc5e 	bl	8002da4 <_read>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d103      	bne.n	80084f4 <_read_r+0x20>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d000      	beq.n	80084f4 <_read_r+0x20>
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	bd70      	pop	{r4, r5, r6, pc}
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	20000864 	.word	0x20000864

080084fc <_init>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008502:	bc08      	pop	{r3}
 8008504:	469e      	mov	lr, r3
 8008506:	4770      	bx	lr

08008508 <_fini>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850e:	bc08      	pop	{r3}
 8008510:	469e      	mov	lr, r3
 8008512:	4770      	bx	lr

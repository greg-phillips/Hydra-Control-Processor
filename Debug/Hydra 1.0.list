
Hydra 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e790  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  0800e850  0800e850  0001e850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f338  0800f338  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f338  0800f338  0001f338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f340  0800f340  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f340  0800f340  0001f340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f344  0800f344  0001f344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800f348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e4  20000080  0800f3c4  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001164  0800f3c4  00021164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231c3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ca6  00000000  00000000  00043267  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001640  00000000  00000000  00047f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  00049550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b62c  00000000  00000000  0004a928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017ead  00000000  00000000  00065f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f759  00000000  00000000  0007de01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d55a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac0  00000000  00000000  0011d5d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000080 	.word	0x20000080
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800e834 	.word	0x0800e834

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000084 	.word	0x20000084
 8000100:	0800e834 	.word	0x0800e834

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c10      	adds	r0, r2, #0
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	1c19      	adds	r1, r3, #0
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 ff55 	bl	80022b0 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fead 	bl	8002170 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 ff47 	bl	80022b0 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 ff3d 	bl	80022b0 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fecf 	bl	80021e8 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fec5 	bl	80021e8 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_cfrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	1c08      	adds	r0, r1, #0
 8000470:	4661      	mov	r1, ip
 8000472:	e7ff      	b.n	8000474 <__aeabi_cfcmpeq>

08000474 <__aeabi_cfcmpeq>:
 8000474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000476:	f000 fc6d 	bl	8000d54 <__lesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	d401      	bmi.n	8000482 <__aeabi_cfcmpeq+0xe>
 800047e:	2100      	movs	r1, #0
 8000480:	42c8      	cmn	r0, r1
 8000482:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000484 <__aeabi_fcmpeq>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fbef 	bl	8000c68 <__eqsf2>
 800048a:	4240      	negs	r0, r0
 800048c:	3001      	adds	r0, #1
 800048e:	bd10      	pop	{r4, pc}

08000490 <__aeabi_fcmplt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fc5f 	bl	8000d54 <__lesf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	db01      	blt.n	800049e <__aeabi_fcmplt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fcmple>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fc55 	bl	8000d54 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	dd01      	ble.n	80004b2 <__aeabi_fcmple+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmpgt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fbfd 	bl	8000cb8 <__gesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dc01      	bgt.n	80004c6 <__aeabi_fcmpgt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpge>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbf3 	bl	8000cb8 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	da01      	bge.n	80004da <__aeabi_fcmpge+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_uldivmod>:
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d111      	bne.n	8000508 <__aeabi_uldivmod+0x28>
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	d10f      	bne.n	8000508 <__aeabi_uldivmod+0x28>
 80004e8:	2900      	cmp	r1, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_uldivmod+0xe>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d002      	beq.n	80004f6 <__aeabi_uldivmod+0x16>
 80004f0:	2100      	movs	r1, #0
 80004f2:	43c9      	mvns	r1, r1
 80004f4:	1c08      	adds	r0, r1, #0
 80004f6:	b407      	push	{r0, r1, r2}
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <__aeabi_uldivmod+0x24>)
 80004fa:	a102      	add	r1, pc, #8	; (adr r1, 8000504 <__aeabi_uldivmod+0x24>)
 80004fc:	1840      	adds	r0, r0, r1
 80004fe:	9002      	str	r0, [sp, #8]
 8000500:	bd03      	pop	{r0, r1, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	fffffee9 	.word	0xfffffee9
 8000508:	b403      	push	{r0, r1}
 800050a:	4668      	mov	r0, sp
 800050c:	b501      	push	{r0, lr}
 800050e:	9802      	ldr	r0, [sp, #8]
 8000510:	f000 f83c 	bl	800058c <__udivmoddi4>
 8000514:	9b01      	ldr	r3, [sp, #4]
 8000516:	469e      	mov	lr, r3
 8000518:	b002      	add	sp, #8
 800051a:	bc0c      	pop	{r2, r3}
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__aeabi_f2uiz>:
 8000520:	219e      	movs	r1, #158	; 0x9e
 8000522:	b510      	push	{r4, lr}
 8000524:	05c9      	lsls	r1, r1, #23
 8000526:	1c04      	adds	r4, r0, #0
 8000528:	f7ff ffd0 	bl	80004cc <__aeabi_fcmpge>
 800052c:	2800      	cmp	r0, #0
 800052e:	d103      	bne.n	8000538 <__aeabi_f2uiz+0x18>
 8000530:	1c20      	adds	r0, r4, #0
 8000532:	f000 ff55 	bl	80013e0 <__aeabi_f2iz>
 8000536:	bd10      	pop	{r4, pc}
 8000538:	219e      	movs	r1, #158	; 0x9e
 800053a:	1c20      	adds	r0, r4, #0
 800053c:	05c9      	lsls	r1, r1, #23
 800053e:	f000 fd8b 	bl	8001058 <__aeabi_fsub>
 8000542:	f000 ff4d 	bl	80013e0 <__aeabi_f2iz>
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	061b      	lsls	r3, r3, #24
 800054a:	469c      	mov	ip, r3
 800054c:	4460      	add	r0, ip
 800054e:	e7f2      	b.n	8000536 <__aeabi_f2uiz+0x16>

08000550 <__aeabi_d2uiz>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	2200      	movs	r2, #0
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <__aeabi_d2uiz+0x38>)
 8000556:	0004      	movs	r4, r0
 8000558:	000d      	movs	r5, r1
 800055a:	f7ff ff7d 	bl	8000458 <__aeabi_dcmpge>
 800055e:	2800      	cmp	r0, #0
 8000560:	d104      	bne.n	800056c <__aeabi_d2uiz+0x1c>
 8000562:	0020      	movs	r0, r4
 8000564:	0029      	movs	r1, r5
 8000566:	f002 fce1 	bl	8002f2c <__aeabi_d2iz>
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <__aeabi_d2uiz+0x38>)
 800056e:	2200      	movs	r2, #0
 8000570:	0020      	movs	r0, r4
 8000572:	0029      	movs	r1, r5
 8000574:	f002 f976 	bl	8002864 <__aeabi_dsub>
 8000578:	f002 fcd8 	bl	8002f2c <__aeabi_d2iz>
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	061b      	lsls	r3, r3, #24
 8000580:	469c      	mov	ip, r3
 8000582:	4460      	add	r0, ip
 8000584:	e7f1      	b.n	800056a <__aeabi_d2uiz+0x1a>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	41e00000 	.word	0x41e00000

0800058c <__udivmoddi4>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	464f      	mov	r7, r9
 8000590:	4646      	mov	r6, r8
 8000592:	46d6      	mov	lr, sl
 8000594:	b5c0      	push	{r6, r7, lr}
 8000596:	0004      	movs	r4, r0
 8000598:	b082      	sub	sp, #8
 800059a:	000d      	movs	r5, r1
 800059c:	4691      	mov	r9, r2
 800059e:	4698      	mov	r8, r3
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d82f      	bhi.n	8000604 <__udivmoddi4+0x78>
 80005a4:	d02c      	beq.n	8000600 <__udivmoddi4+0x74>
 80005a6:	4641      	mov	r1, r8
 80005a8:	4648      	mov	r0, r9
 80005aa:	f002 fe23 	bl	80031f4 <__clzdi2>
 80005ae:	0029      	movs	r1, r5
 80005b0:	0006      	movs	r6, r0
 80005b2:	0020      	movs	r0, r4
 80005b4:	f002 fe1e 	bl	80031f4 <__clzdi2>
 80005b8:	1a33      	subs	r3, r6, r0
 80005ba:	469c      	mov	ip, r3
 80005bc:	3b20      	subs	r3, #32
 80005be:	469a      	mov	sl, r3
 80005c0:	d500      	bpl.n	80005c4 <__udivmoddi4+0x38>
 80005c2:	e076      	b.n	80006b2 <__udivmoddi4+0x126>
 80005c4:	464b      	mov	r3, r9
 80005c6:	4652      	mov	r2, sl
 80005c8:	4093      	lsls	r3, r2
 80005ca:	001f      	movs	r7, r3
 80005cc:	464b      	mov	r3, r9
 80005ce:	4662      	mov	r2, ip
 80005d0:	4093      	lsls	r3, r2
 80005d2:	001e      	movs	r6, r3
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d828      	bhi.n	800062a <__udivmoddi4+0x9e>
 80005d8:	d025      	beq.n	8000626 <__udivmoddi4+0x9a>
 80005da:	4653      	mov	r3, sl
 80005dc:	1ba4      	subs	r4, r4, r6
 80005de:	41bd      	sbcs	r5, r7
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	da00      	bge.n	80005e6 <__udivmoddi4+0x5a>
 80005e4:	e07b      	b.n	80006de <__udivmoddi4+0x152>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2300      	movs	r3, #0
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4652      	mov	r2, sl
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	4662      	mov	r2, ip
 80005fa:	4093      	lsls	r3, r2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	e018      	b.n	8000632 <__udivmoddi4+0xa6>
 8000600:	4282      	cmp	r2, r0
 8000602:	d9d0      	bls.n	80005a6 <__udivmoddi4+0x1a>
 8000604:	2200      	movs	r2, #0
 8000606:	2300      	movs	r3, #0
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <__udivmoddi4+0x8a>
 8000612:	601c      	str	r4, [r3, #0]
 8000614:	605d      	str	r5, [r3, #4]
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	9901      	ldr	r1, [sp, #4]
 800061a:	b002      	add	sp, #8
 800061c:	bc1c      	pop	{r2, r3, r4}
 800061e:	4690      	mov	r8, r2
 8000620:	4699      	mov	r9, r3
 8000622:	46a2      	mov	sl, r4
 8000624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000626:	42a3      	cmp	r3, r4
 8000628:	d9d7      	bls.n	80005da <__udivmoddi4+0x4e>
 800062a:	2200      	movs	r2, #0
 800062c:	2300      	movs	r3, #0
 800062e:	9200      	str	r2, [sp, #0]
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	4663      	mov	r3, ip
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0e9      	beq.n	800060c <__udivmoddi4+0x80>
 8000638:	07fb      	lsls	r3, r7, #31
 800063a:	4698      	mov	r8, r3
 800063c:	4641      	mov	r1, r8
 800063e:	0872      	lsrs	r2, r6, #1
 8000640:	430a      	orrs	r2, r1
 8000642:	087b      	lsrs	r3, r7, #1
 8000644:	4666      	mov	r6, ip
 8000646:	e00e      	b.n	8000666 <__udivmoddi4+0xda>
 8000648:	42ab      	cmp	r3, r5
 800064a:	d101      	bne.n	8000650 <__udivmoddi4+0xc4>
 800064c:	42a2      	cmp	r2, r4
 800064e:	d80c      	bhi.n	800066a <__udivmoddi4+0xde>
 8000650:	1aa4      	subs	r4, r4, r2
 8000652:	419d      	sbcs	r5, r3
 8000654:	2001      	movs	r0, #1
 8000656:	1924      	adds	r4, r4, r4
 8000658:	416d      	adcs	r5, r5
 800065a:	2100      	movs	r1, #0
 800065c:	3e01      	subs	r6, #1
 800065e:	1824      	adds	r4, r4, r0
 8000660:	414d      	adcs	r5, r1
 8000662:	2e00      	cmp	r6, #0
 8000664:	d006      	beq.n	8000674 <__udivmoddi4+0xe8>
 8000666:	42ab      	cmp	r3, r5
 8000668:	d9ee      	bls.n	8000648 <__udivmoddi4+0xbc>
 800066a:	3e01      	subs	r6, #1
 800066c:	1924      	adds	r4, r4, r4
 800066e:	416d      	adcs	r5, r5
 8000670:	2e00      	cmp	r6, #0
 8000672:	d1f8      	bne.n	8000666 <__udivmoddi4+0xda>
 8000674:	9800      	ldr	r0, [sp, #0]
 8000676:	9901      	ldr	r1, [sp, #4]
 8000678:	4653      	mov	r3, sl
 800067a:	1900      	adds	r0, r0, r4
 800067c:	4169      	adcs	r1, r5
 800067e:	2b00      	cmp	r3, #0
 8000680:	db23      	blt.n	80006ca <__udivmoddi4+0x13e>
 8000682:	002b      	movs	r3, r5
 8000684:	4652      	mov	r2, sl
 8000686:	40d3      	lsrs	r3, r2
 8000688:	002a      	movs	r2, r5
 800068a:	4664      	mov	r4, ip
 800068c:	40e2      	lsrs	r2, r4
 800068e:	001c      	movs	r4, r3
 8000690:	4653      	mov	r3, sl
 8000692:	0015      	movs	r5, r2
 8000694:	2b00      	cmp	r3, #0
 8000696:	db2d      	blt.n	80006f4 <__udivmoddi4+0x168>
 8000698:	0026      	movs	r6, r4
 800069a:	4657      	mov	r7, sl
 800069c:	40be      	lsls	r6, r7
 800069e:	0033      	movs	r3, r6
 80006a0:	0026      	movs	r6, r4
 80006a2:	4667      	mov	r7, ip
 80006a4:	40be      	lsls	r6, r7
 80006a6:	0032      	movs	r2, r6
 80006a8:	1a80      	subs	r0, r0, r2
 80006aa:	4199      	sbcs	r1, r3
 80006ac:	9000      	str	r0, [sp, #0]
 80006ae:	9101      	str	r1, [sp, #4]
 80006b0:	e7ac      	b.n	800060c <__udivmoddi4+0x80>
 80006b2:	4662      	mov	r2, ip
 80006b4:	2320      	movs	r3, #32
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	464a      	mov	r2, r9
 80006ba:	40da      	lsrs	r2, r3
 80006bc:	4661      	mov	r1, ip
 80006be:	0013      	movs	r3, r2
 80006c0:	4642      	mov	r2, r8
 80006c2:	408a      	lsls	r2, r1
 80006c4:	0017      	movs	r7, r2
 80006c6:	431f      	orrs	r7, r3
 80006c8:	e780      	b.n	80005cc <__udivmoddi4+0x40>
 80006ca:	4662      	mov	r2, ip
 80006cc:	2320      	movs	r3, #32
 80006ce:	1a9b      	subs	r3, r3, r2
 80006d0:	002a      	movs	r2, r5
 80006d2:	4666      	mov	r6, ip
 80006d4:	409a      	lsls	r2, r3
 80006d6:	0023      	movs	r3, r4
 80006d8:	40f3      	lsrs	r3, r6
 80006da:	4313      	orrs	r3, r2
 80006dc:	e7d4      	b.n	8000688 <__udivmoddi4+0xfc>
 80006de:	4662      	mov	r2, ip
 80006e0:	2320      	movs	r3, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	2200      	movs	r2, #0
 80006e8:	9100      	str	r1, [sp, #0]
 80006ea:	9201      	str	r2, [sp, #4]
 80006ec:	2201      	movs	r2, #1
 80006ee:	40da      	lsrs	r2, r3
 80006f0:	9201      	str	r2, [sp, #4]
 80006f2:	e780      	b.n	80005f6 <__udivmoddi4+0x6a>
 80006f4:	2320      	movs	r3, #32
 80006f6:	4662      	mov	r2, ip
 80006f8:	0026      	movs	r6, r4
 80006fa:	1a9b      	subs	r3, r3, r2
 80006fc:	40de      	lsrs	r6, r3
 80006fe:	002f      	movs	r7, r5
 8000700:	46b0      	mov	r8, r6
 8000702:	4666      	mov	r6, ip
 8000704:	40b7      	lsls	r7, r6
 8000706:	4646      	mov	r6, r8
 8000708:	003b      	movs	r3, r7
 800070a:	4333      	orrs	r3, r6
 800070c:	e7c8      	b.n	80006a0 <__udivmoddi4+0x114>
 800070e:	46c0      	nop			; (mov r8, r8)

08000710 <__aeabi_fadd>:
 8000710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000712:	4647      	mov	r7, r8
 8000714:	46ce      	mov	lr, r9
 8000716:	0243      	lsls	r3, r0, #9
 8000718:	0a5b      	lsrs	r3, r3, #9
 800071a:	0044      	lsls	r4, r0, #1
 800071c:	0fc2      	lsrs	r2, r0, #31
 800071e:	469c      	mov	ip, r3
 8000720:	0048      	lsls	r0, r1, #1
 8000722:	00dd      	lsls	r5, r3, #3
 8000724:	024b      	lsls	r3, r1, #9
 8000726:	0e24      	lsrs	r4, r4, #24
 8000728:	0a5b      	lsrs	r3, r3, #9
 800072a:	0e00      	lsrs	r0, r0, #24
 800072c:	b580      	push	{r7, lr}
 800072e:	4698      	mov	r8, r3
 8000730:	0026      	movs	r6, r4
 8000732:	4691      	mov	r9, r2
 8000734:	0fc9      	lsrs	r1, r1, #31
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	1a27      	subs	r7, r4, r0
 800073a:	428a      	cmp	r2, r1
 800073c:	d029      	beq.n	8000792 <__aeabi_fadd+0x82>
 800073e:	2f00      	cmp	r7, #0
 8000740:	dd15      	ble.n	800076e <__aeabi_fadd+0x5e>
 8000742:	2800      	cmp	r0, #0
 8000744:	d14a      	bne.n	80007dc <__aeabi_fadd+0xcc>
 8000746:	2b00      	cmp	r3, #0
 8000748:	d000      	beq.n	800074c <__aeabi_fadd+0x3c>
 800074a:	e095      	b.n	8000878 <__aeabi_fadd+0x168>
 800074c:	08ed      	lsrs	r5, r5, #3
 800074e:	2cff      	cmp	r4, #255	; 0xff
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x44>
 8000752:	e088      	b.n	8000866 <__aeabi_fadd+0x156>
 8000754:	026b      	lsls	r3, r5, #9
 8000756:	0a5b      	lsrs	r3, r3, #9
 8000758:	b2e6      	uxtb	r6, r4
 800075a:	025b      	lsls	r3, r3, #9
 800075c:	05f6      	lsls	r6, r6, #23
 800075e:	0a58      	lsrs	r0, r3, #9
 8000760:	4330      	orrs	r0, r6
 8000762:	07d2      	lsls	r2, r2, #31
 8000764:	4310      	orrs	r0, r2
 8000766:	bc0c      	pop	{r2, r3}
 8000768:	4690      	mov	r8, r2
 800076a:	4699      	mov	r9, r3
 800076c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800076e:	2f00      	cmp	r7, #0
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x64>
 8000772:	e087      	b.n	8000884 <__aeabi_fadd+0x174>
 8000774:	1c60      	adds	r0, r4, #1
 8000776:	b2c0      	uxtb	r0, r0
 8000778:	2801      	cmp	r0, #1
 800077a:	dc00      	bgt.n	800077e <__aeabi_fadd+0x6e>
 800077c:	e0b6      	b.n	80008ec <__aeabi_fadd+0x1dc>
 800077e:	1aee      	subs	r6, r5, r3
 8000780:	0172      	lsls	r2, r6, #5
 8000782:	d500      	bpl.n	8000786 <__aeabi_fadd+0x76>
 8000784:	e0c5      	b.n	8000912 <__aeabi_fadd+0x202>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d13d      	bne.n	8000806 <__aeabi_fadd+0xf6>
 800078a:	2200      	movs	r2, #0
 800078c:	2600      	movs	r6, #0
 800078e:	2300      	movs	r3, #0
 8000790:	e7e3      	b.n	800075a <__aeabi_fadd+0x4a>
 8000792:	2f00      	cmp	r7, #0
 8000794:	dc00      	bgt.n	8000798 <__aeabi_fadd+0x88>
 8000796:	e096      	b.n	80008c6 <__aeabi_fadd+0x1b6>
 8000798:	2800      	cmp	r0, #0
 800079a:	d05d      	beq.n	8000858 <__aeabi_fadd+0x148>
 800079c:	2cff      	cmp	r4, #255	; 0xff
 800079e:	d060      	beq.n	8000862 <__aeabi_fadd+0x152>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	04d2      	lsls	r2, r2, #19
 80007a4:	4313      	orrs	r3, r2
 80007a6:	2f1b      	cmp	r7, #27
 80007a8:	dd00      	ble.n	80007ac <__aeabi_fadd+0x9c>
 80007aa:	e0ec      	b.n	8000986 <__aeabi_fadd+0x276>
 80007ac:	2220      	movs	r2, #32
 80007ae:	1bd2      	subs	r2, r2, r7
 80007b0:	0018      	movs	r0, r3
 80007b2:	4093      	lsls	r3, r2
 80007b4:	40f8      	lsrs	r0, r7
 80007b6:	1e5a      	subs	r2, r3, #1
 80007b8:	4193      	sbcs	r3, r2
 80007ba:	4303      	orrs	r3, r0
 80007bc:	18ed      	adds	r5, r5, r3
 80007be:	016b      	lsls	r3, r5, #5
 80007c0:	d57b      	bpl.n	80008ba <__aeabi_fadd+0x1aa>
 80007c2:	3401      	adds	r4, #1
 80007c4:	2cff      	cmp	r4, #255	; 0xff
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0xba>
 80007c8:	e0b7      	b.n	800093a <__aeabi_fadd+0x22a>
 80007ca:	2201      	movs	r2, #1
 80007cc:	2607      	movs	r6, #7
 80007ce:	402a      	ands	r2, r5
 80007d0:	086b      	lsrs	r3, r5, #1
 80007d2:	4d9a      	ldr	r5, [pc, #616]	; (8000a3c <__aeabi_fadd+0x32c>)
 80007d4:	401d      	ands	r5, r3
 80007d6:	4315      	orrs	r5, r2
 80007d8:	402e      	ands	r6, r5
 80007da:	e029      	b.n	8000830 <__aeabi_fadd+0x120>
 80007dc:	2cff      	cmp	r4, #255	; 0xff
 80007de:	d0b5      	beq.n	800074c <__aeabi_fadd+0x3c>
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	04d2      	lsls	r2, r2, #19
 80007e4:	4313      	orrs	r3, r2
 80007e6:	2f1b      	cmp	r7, #27
 80007e8:	dd00      	ble.n	80007ec <__aeabi_fadd+0xdc>
 80007ea:	e0b2      	b.n	8000952 <__aeabi_fadd+0x242>
 80007ec:	2220      	movs	r2, #32
 80007ee:	1bd2      	subs	r2, r2, r7
 80007f0:	0019      	movs	r1, r3
 80007f2:	4093      	lsls	r3, r2
 80007f4:	40f9      	lsrs	r1, r7
 80007f6:	1e5a      	subs	r2, r3, #1
 80007f8:	4193      	sbcs	r3, r2
 80007fa:	430b      	orrs	r3, r1
 80007fc:	1aed      	subs	r5, r5, r3
 80007fe:	016b      	lsls	r3, r5, #5
 8000800:	d55b      	bpl.n	80008ba <__aeabi_fadd+0x1aa>
 8000802:	01ad      	lsls	r5, r5, #6
 8000804:	09ae      	lsrs	r6, r5, #6
 8000806:	0030      	movs	r0, r6
 8000808:	f002 fcd6 	bl	80031b8 <__clzsi2>
 800080c:	3805      	subs	r0, #5
 800080e:	4086      	lsls	r6, r0
 8000810:	4284      	cmp	r4, r0
 8000812:	dc65      	bgt.n	80008e0 <__aeabi_fadd+0x1d0>
 8000814:	1b04      	subs	r4, r0, r4
 8000816:	0033      	movs	r3, r6
 8000818:	2020      	movs	r0, #32
 800081a:	3401      	adds	r4, #1
 800081c:	40e3      	lsrs	r3, r4
 800081e:	1b04      	subs	r4, r0, r4
 8000820:	40a6      	lsls	r6, r4
 8000822:	1e75      	subs	r5, r6, #1
 8000824:	41ae      	sbcs	r6, r5
 8000826:	4333      	orrs	r3, r6
 8000828:	2607      	movs	r6, #7
 800082a:	001d      	movs	r5, r3
 800082c:	2400      	movs	r4, #0
 800082e:	401e      	ands	r6, r3
 8000830:	2201      	movs	r2, #1
 8000832:	464b      	mov	r3, r9
 8000834:	401a      	ands	r2, r3
 8000836:	2e00      	cmp	r6, #0
 8000838:	d004      	beq.n	8000844 <__aeabi_fadd+0x134>
 800083a:	230f      	movs	r3, #15
 800083c:	402b      	ands	r3, r5
 800083e:	2b04      	cmp	r3, #4
 8000840:	d000      	beq.n	8000844 <__aeabi_fadd+0x134>
 8000842:	3504      	adds	r5, #4
 8000844:	016b      	lsls	r3, r5, #5
 8000846:	d400      	bmi.n	800084a <__aeabi_fadd+0x13a>
 8000848:	e780      	b.n	800074c <__aeabi_fadd+0x3c>
 800084a:	3401      	adds	r4, #1
 800084c:	b2e6      	uxtb	r6, r4
 800084e:	2cff      	cmp	r4, #255	; 0xff
 8000850:	d12f      	bne.n	80008b2 <__aeabi_fadd+0x1a2>
 8000852:	26ff      	movs	r6, #255	; 0xff
 8000854:	2300      	movs	r3, #0
 8000856:	e780      	b.n	800075a <__aeabi_fadd+0x4a>
 8000858:	2b00      	cmp	r3, #0
 800085a:	d152      	bne.n	8000902 <__aeabi_fadd+0x1f2>
 800085c:	2cff      	cmp	r4, #255	; 0xff
 800085e:	d000      	beq.n	8000862 <__aeabi_fadd+0x152>
 8000860:	e774      	b.n	800074c <__aeabi_fadd+0x3c>
 8000862:	000a      	movs	r2, r1
 8000864:	08ed      	lsrs	r5, r5, #3
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0f3      	beq.n	8000852 <__aeabi_fadd+0x142>
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	03db      	lsls	r3, r3, #15
 800086e:	432b      	orrs	r3, r5
 8000870:	025b      	lsls	r3, r3, #9
 8000872:	0a5b      	lsrs	r3, r3, #9
 8000874:	26ff      	movs	r6, #255	; 0xff
 8000876:	e770      	b.n	800075a <__aeabi_fadd+0x4a>
 8000878:	3f01      	subs	r7, #1
 800087a:	2f00      	cmp	r7, #0
 800087c:	d0be      	beq.n	80007fc <__aeabi_fadd+0xec>
 800087e:	2cff      	cmp	r4, #255	; 0xff
 8000880:	d1b1      	bne.n	80007e6 <__aeabi_fadd+0xd6>
 8000882:	e763      	b.n	800074c <__aeabi_fadd+0x3c>
 8000884:	2c00      	cmp	r4, #0
 8000886:	d047      	beq.n	8000918 <__aeabi_fadd+0x208>
 8000888:	28ff      	cmp	r0, #255	; 0xff
 800088a:	d069      	beq.n	8000960 <__aeabi_fadd+0x250>
 800088c:	2480      	movs	r4, #128	; 0x80
 800088e:	04e4      	lsls	r4, r4, #19
 8000890:	427a      	negs	r2, r7
 8000892:	4325      	orrs	r5, r4
 8000894:	2a1b      	cmp	r2, #27
 8000896:	dd00      	ble.n	800089a <__aeabi_fadd+0x18a>
 8000898:	e0c5      	b.n	8000a26 <__aeabi_fadd+0x316>
 800089a:	002c      	movs	r4, r5
 800089c:	2620      	movs	r6, #32
 800089e:	40d4      	lsrs	r4, r2
 80008a0:	1ab2      	subs	r2, r6, r2
 80008a2:	4095      	lsls	r5, r2
 80008a4:	1e6a      	subs	r2, r5, #1
 80008a6:	4195      	sbcs	r5, r2
 80008a8:	4325      	orrs	r5, r4
 80008aa:	1b5d      	subs	r5, r3, r5
 80008ac:	0004      	movs	r4, r0
 80008ae:	4689      	mov	r9, r1
 80008b0:	e7a5      	b.n	80007fe <__aeabi_fadd+0xee>
 80008b2:	01ab      	lsls	r3, r5, #6
 80008b4:	0a5b      	lsrs	r3, r3, #9
 80008b6:	e750      	b.n	800075a <__aeabi_fadd+0x4a>
 80008b8:	2400      	movs	r4, #0
 80008ba:	2201      	movs	r2, #1
 80008bc:	464b      	mov	r3, r9
 80008be:	401a      	ands	r2, r3
 80008c0:	076b      	lsls	r3, r5, #29
 80008c2:	d1ba      	bne.n	800083a <__aeabi_fadd+0x12a>
 80008c4:	e742      	b.n	800074c <__aeabi_fadd+0x3c>
 80008c6:	2f00      	cmp	r7, #0
 80008c8:	d13b      	bne.n	8000942 <__aeabi_fadd+0x232>
 80008ca:	3401      	adds	r4, #1
 80008cc:	b2e0      	uxtb	r0, r4
 80008ce:	2801      	cmp	r0, #1
 80008d0:	dd4a      	ble.n	8000968 <__aeabi_fadd+0x258>
 80008d2:	2cff      	cmp	r4, #255	; 0xff
 80008d4:	d0bd      	beq.n	8000852 <__aeabi_fadd+0x142>
 80008d6:	2607      	movs	r6, #7
 80008d8:	18ed      	adds	r5, r5, r3
 80008da:	086d      	lsrs	r5, r5, #1
 80008dc:	402e      	ands	r6, r5
 80008de:	e7a7      	b.n	8000830 <__aeabi_fadd+0x120>
 80008e0:	2307      	movs	r3, #7
 80008e2:	4d57      	ldr	r5, [pc, #348]	; (8000a40 <__aeabi_fadd+0x330>)
 80008e4:	1a24      	subs	r4, r4, r0
 80008e6:	4035      	ands	r5, r6
 80008e8:	401e      	ands	r6, r3
 80008ea:	e7a1      	b.n	8000830 <__aeabi_fadd+0x120>
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d11b      	bne.n	8000928 <__aeabi_fadd+0x218>
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d16e      	bne.n	80009d2 <__aeabi_fadd+0x2c2>
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fadd+0x1ea>
 80008f8:	e09a      	b.n	8000a30 <__aeabi_fadd+0x320>
 80008fa:	000a      	movs	r2, r1
 80008fc:	001d      	movs	r5, r3
 80008fe:	003c      	movs	r4, r7
 8000900:	e724      	b.n	800074c <__aeabi_fadd+0x3c>
 8000902:	3f01      	subs	r7, #1
 8000904:	2f00      	cmp	r7, #0
 8000906:	d100      	bne.n	800090a <__aeabi_fadd+0x1fa>
 8000908:	e758      	b.n	80007bc <__aeabi_fadd+0xac>
 800090a:	2cff      	cmp	r4, #255	; 0xff
 800090c:	d000      	beq.n	8000910 <__aeabi_fadd+0x200>
 800090e:	e74a      	b.n	80007a6 <__aeabi_fadd+0x96>
 8000910:	e7a7      	b.n	8000862 <__aeabi_fadd+0x152>
 8000912:	1b5e      	subs	r6, r3, r5
 8000914:	4689      	mov	r9, r1
 8000916:	e776      	b.n	8000806 <__aeabi_fadd+0xf6>
 8000918:	2d00      	cmp	r5, #0
 800091a:	d11c      	bne.n	8000956 <__aeabi_fadd+0x246>
 800091c:	000a      	movs	r2, r1
 800091e:	28ff      	cmp	r0, #255	; 0xff
 8000920:	d01f      	beq.n	8000962 <__aeabi_fadd+0x252>
 8000922:	0004      	movs	r4, r0
 8000924:	001d      	movs	r5, r3
 8000926:	e711      	b.n	800074c <__aeabi_fadd+0x3c>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d15d      	bne.n	80009e8 <__aeabi_fadd+0x2d8>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d117      	bne.n	8000960 <__aeabi_fadd+0x250>
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	2200      	movs	r2, #0
 8000934:	03db      	lsls	r3, r3, #15
 8000936:	26ff      	movs	r6, #255	; 0xff
 8000938:	e70f      	b.n	800075a <__aeabi_fadd+0x4a>
 800093a:	000a      	movs	r2, r1
 800093c:	26ff      	movs	r6, #255	; 0xff
 800093e:	2300      	movs	r3, #0
 8000940:	e70b      	b.n	800075a <__aeabi_fadd+0x4a>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d121      	bne.n	800098a <__aeabi_fadd+0x27a>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d166      	bne.n	8000a18 <__aeabi_fadd+0x308>
 800094a:	28ff      	cmp	r0, #255	; 0xff
 800094c:	d1e9      	bne.n	8000922 <__aeabi_fadd+0x212>
 800094e:	001d      	movs	r5, r3
 8000950:	e787      	b.n	8000862 <__aeabi_fadd+0x152>
 8000952:	2301      	movs	r3, #1
 8000954:	e752      	b.n	80007fc <__aeabi_fadd+0xec>
 8000956:	1c7a      	adds	r2, r7, #1
 8000958:	d0a7      	beq.n	80008aa <__aeabi_fadd+0x19a>
 800095a:	43fa      	mvns	r2, r7
 800095c:	28ff      	cmp	r0, #255	; 0xff
 800095e:	d199      	bne.n	8000894 <__aeabi_fadd+0x184>
 8000960:	000a      	movs	r2, r1
 8000962:	001d      	movs	r5, r3
 8000964:	24ff      	movs	r4, #255	; 0xff
 8000966:	e6f1      	b.n	800074c <__aeabi_fadd+0x3c>
 8000968:	2e00      	cmp	r6, #0
 800096a:	d121      	bne.n	80009b0 <__aeabi_fadd+0x2a0>
 800096c:	2d00      	cmp	r5, #0
 800096e:	d04f      	beq.n	8000a10 <__aeabi_fadd+0x300>
 8000970:	2b00      	cmp	r3, #0
 8000972:	d04c      	beq.n	8000a0e <__aeabi_fadd+0x2fe>
 8000974:	18ed      	adds	r5, r5, r3
 8000976:	016b      	lsls	r3, r5, #5
 8000978:	d59e      	bpl.n	80008b8 <__aeabi_fadd+0x1a8>
 800097a:	4b31      	ldr	r3, [pc, #196]	; (8000a40 <__aeabi_fadd+0x330>)
 800097c:	3607      	adds	r6, #7
 800097e:	402e      	ands	r6, r5
 8000980:	2401      	movs	r4, #1
 8000982:	401d      	ands	r5, r3
 8000984:	e754      	b.n	8000830 <__aeabi_fadd+0x120>
 8000986:	2301      	movs	r3, #1
 8000988:	e718      	b.n	80007bc <__aeabi_fadd+0xac>
 800098a:	28ff      	cmp	r0, #255	; 0xff
 800098c:	d0df      	beq.n	800094e <__aeabi_fadd+0x23e>
 800098e:	2480      	movs	r4, #128	; 0x80
 8000990:	04e4      	lsls	r4, r4, #19
 8000992:	427f      	negs	r7, r7
 8000994:	4325      	orrs	r5, r4
 8000996:	2f1b      	cmp	r7, #27
 8000998:	dc4d      	bgt.n	8000a36 <__aeabi_fadd+0x326>
 800099a:	2620      	movs	r6, #32
 800099c:	1bf6      	subs	r6, r6, r7
 800099e:	002c      	movs	r4, r5
 80009a0:	40b5      	lsls	r5, r6
 80009a2:	40fc      	lsrs	r4, r7
 80009a4:	1e6a      	subs	r2, r5, #1
 80009a6:	4195      	sbcs	r5, r2
 80009a8:	4325      	orrs	r5, r4
 80009aa:	18ed      	adds	r5, r5, r3
 80009ac:	0004      	movs	r4, r0
 80009ae:	e706      	b.n	80007be <__aeabi_fadd+0xae>
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d0cc      	beq.n	800094e <__aeabi_fadd+0x23e>
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fadd+0x2aa>
 80009b8:	e753      	b.n	8000862 <__aeabi_fadd+0x152>
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	4660      	mov	r0, ip
 80009be:	03c9      	lsls	r1, r1, #15
 80009c0:	4208      	tst	r0, r1
 80009c2:	d003      	beq.n	80009cc <__aeabi_fadd+0x2bc>
 80009c4:	4640      	mov	r0, r8
 80009c6:	4208      	tst	r0, r1
 80009c8:	d100      	bne.n	80009cc <__aeabi_fadd+0x2bc>
 80009ca:	001d      	movs	r5, r3
 80009cc:	2101      	movs	r1, #1
 80009ce:	4011      	ands	r1, r2
 80009d0:	e747      	b.n	8000862 <__aeabi_fadd+0x152>
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fadd+0x2c8>
 80009d6:	e6b9      	b.n	800074c <__aeabi_fadd+0x3c>
 80009d8:	1aea      	subs	r2, r5, r3
 80009da:	0150      	lsls	r0, r2, #5
 80009dc:	d525      	bpl.n	8000a2a <__aeabi_fadd+0x31a>
 80009de:	2607      	movs	r6, #7
 80009e0:	1b5d      	subs	r5, r3, r5
 80009e2:	402e      	ands	r6, r5
 80009e4:	4689      	mov	r9, r1
 80009e6:	e723      	b.n	8000830 <__aeabi_fadd+0x120>
 80009e8:	24ff      	movs	r4, #255	; 0xff
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_fadd+0x2e0>
 80009ee:	e6ad      	b.n	800074c <__aeabi_fadd+0x3c>
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	4660      	mov	r0, ip
 80009f4:	03d2      	lsls	r2, r2, #15
 80009f6:	4210      	tst	r0, r2
 80009f8:	d004      	beq.n	8000a04 <__aeabi_fadd+0x2f4>
 80009fa:	4640      	mov	r0, r8
 80009fc:	4210      	tst	r0, r2
 80009fe:	d101      	bne.n	8000a04 <__aeabi_fadd+0x2f4>
 8000a00:	001d      	movs	r5, r3
 8000a02:	4689      	mov	r9, r1
 8000a04:	2201      	movs	r2, #1
 8000a06:	464b      	mov	r3, r9
 8000a08:	24ff      	movs	r4, #255	; 0xff
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	e69e      	b.n	800074c <__aeabi_fadd+0x3c>
 8000a0e:	002b      	movs	r3, r5
 8000a10:	08dd      	lsrs	r5, r3, #3
 8000a12:	000a      	movs	r2, r1
 8000a14:	2400      	movs	r4, #0
 8000a16:	e69d      	b.n	8000754 <__aeabi_fadd+0x44>
 8000a18:	1c7a      	adds	r2, r7, #1
 8000a1a:	d0c6      	beq.n	80009aa <__aeabi_fadd+0x29a>
 8000a1c:	43ff      	mvns	r7, r7
 8000a1e:	28ff      	cmp	r0, #255	; 0xff
 8000a20:	d1b9      	bne.n	8000996 <__aeabi_fadd+0x286>
 8000a22:	001d      	movs	r5, r3
 8000a24:	e71d      	b.n	8000862 <__aeabi_fadd+0x152>
 8000a26:	2501      	movs	r5, #1
 8000a28:	e73f      	b.n	80008aa <__aeabi_fadd+0x19a>
 8000a2a:	1e15      	subs	r5, r2, #0
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_fadd+0x320>
 8000a2e:	e744      	b.n	80008ba <__aeabi_fadd+0x1aa>
 8000a30:	2200      	movs	r2, #0
 8000a32:	2300      	movs	r3, #0
 8000a34:	e691      	b.n	800075a <__aeabi_fadd+0x4a>
 8000a36:	2501      	movs	r5, #1
 8000a38:	e7b7      	b.n	80009aa <__aeabi_fadd+0x29a>
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	7dffffff 	.word	0x7dffffff
 8000a40:	fbffffff 	.word	0xfbffffff

08000a44 <__aeabi_fdiv>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	4657      	mov	r7, sl
 8000a48:	464e      	mov	r6, r9
 8000a4a:	4645      	mov	r5, r8
 8000a4c:	46de      	mov	lr, fp
 8000a4e:	0244      	lsls	r4, r0, #9
 8000a50:	b5e0      	push	{r5, r6, r7, lr}
 8000a52:	0046      	lsls	r6, r0, #1
 8000a54:	4688      	mov	r8, r1
 8000a56:	0a64      	lsrs	r4, r4, #9
 8000a58:	0e36      	lsrs	r6, r6, #24
 8000a5a:	0fc7      	lsrs	r7, r0, #31
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d063      	beq.n	8000b28 <__aeabi_fdiv+0xe4>
 8000a60:	2eff      	cmp	r6, #255	; 0xff
 8000a62:	d024      	beq.n	8000aae <__aeabi_fdiv+0x6a>
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	00e4      	lsls	r4, r4, #3
 8000a68:	04db      	lsls	r3, r3, #19
 8000a6a:	431c      	orrs	r4, r3
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	4699      	mov	r9, r3
 8000a70:	469b      	mov	fp, r3
 8000a72:	3e7f      	subs	r6, #127	; 0x7f
 8000a74:	4643      	mov	r3, r8
 8000a76:	4642      	mov	r2, r8
 8000a78:	025d      	lsls	r5, r3, #9
 8000a7a:	0fd2      	lsrs	r2, r2, #31
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	0a6d      	lsrs	r5, r5, #9
 8000a80:	0e1b      	lsrs	r3, r3, #24
 8000a82:	4690      	mov	r8, r2
 8000a84:	4692      	mov	sl, r2
 8000a86:	d065      	beq.n	8000b54 <__aeabi_fdiv+0x110>
 8000a88:	2bff      	cmp	r3, #255	; 0xff
 8000a8a:	d055      	beq.n	8000b38 <__aeabi_fdiv+0xf4>
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	2100      	movs	r1, #0
 8000a90:	00ed      	lsls	r5, r5, #3
 8000a92:	04d2      	lsls	r2, r2, #19
 8000a94:	3b7f      	subs	r3, #127	; 0x7f
 8000a96:	4315      	orrs	r5, r2
 8000a98:	1af6      	subs	r6, r6, r3
 8000a9a:	4643      	mov	r3, r8
 8000a9c:	464a      	mov	r2, r9
 8000a9e:	407b      	eors	r3, r7
 8000aa0:	2a0f      	cmp	r2, #15
 8000aa2:	d900      	bls.n	8000aa6 <__aeabi_fdiv+0x62>
 8000aa4:	e08d      	b.n	8000bc2 <__aeabi_fdiv+0x17e>
 8000aa6:	486d      	ldr	r0, [pc, #436]	; (8000c5c <__aeabi_fdiv+0x218>)
 8000aa8:	0092      	lsls	r2, r2, #2
 8000aaa:	5882      	ldr	r2, [r0, r2]
 8000aac:	4697      	mov	pc, r2
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d154      	bne.n	8000b5c <__aeabi_fdiv+0x118>
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	4699      	mov	r9, r3
 8000ab6:	3b06      	subs	r3, #6
 8000ab8:	26ff      	movs	r6, #255	; 0xff
 8000aba:	469b      	mov	fp, r3
 8000abc:	e7da      	b.n	8000a74 <__aeabi_fdiv+0x30>
 8000abe:	2500      	movs	r5, #0
 8000ac0:	4653      	mov	r3, sl
 8000ac2:	2902      	cmp	r1, #2
 8000ac4:	d01b      	beq.n	8000afe <__aeabi_fdiv+0xba>
 8000ac6:	2903      	cmp	r1, #3
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fdiv+0x88>
 8000aca:	e0bf      	b.n	8000c4c <__aeabi_fdiv+0x208>
 8000acc:	2901      	cmp	r1, #1
 8000ace:	d028      	beq.n	8000b22 <__aeabi_fdiv+0xde>
 8000ad0:	0030      	movs	r0, r6
 8000ad2:	307f      	adds	r0, #127	; 0x7f
 8000ad4:	2800      	cmp	r0, #0
 8000ad6:	dd20      	ble.n	8000b1a <__aeabi_fdiv+0xd6>
 8000ad8:	076a      	lsls	r2, r5, #29
 8000ada:	d004      	beq.n	8000ae6 <__aeabi_fdiv+0xa2>
 8000adc:	220f      	movs	r2, #15
 8000ade:	402a      	ands	r2, r5
 8000ae0:	2a04      	cmp	r2, #4
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_fdiv+0xa2>
 8000ae4:	3504      	adds	r5, #4
 8000ae6:	012a      	lsls	r2, r5, #4
 8000ae8:	d503      	bpl.n	8000af2 <__aeabi_fdiv+0xae>
 8000aea:	0030      	movs	r0, r6
 8000aec:	4a5c      	ldr	r2, [pc, #368]	; (8000c60 <__aeabi_fdiv+0x21c>)
 8000aee:	3080      	adds	r0, #128	; 0x80
 8000af0:	4015      	ands	r5, r2
 8000af2:	28fe      	cmp	r0, #254	; 0xfe
 8000af4:	dc03      	bgt.n	8000afe <__aeabi_fdiv+0xba>
 8000af6:	01ac      	lsls	r4, r5, #6
 8000af8:	0a64      	lsrs	r4, r4, #9
 8000afa:	b2c2      	uxtb	r2, r0
 8000afc:	e001      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000afe:	22ff      	movs	r2, #255	; 0xff
 8000b00:	2400      	movs	r4, #0
 8000b02:	0264      	lsls	r4, r4, #9
 8000b04:	05d2      	lsls	r2, r2, #23
 8000b06:	0a60      	lsrs	r0, r4, #9
 8000b08:	07db      	lsls	r3, r3, #31
 8000b0a:	4310      	orrs	r0, r2
 8000b0c:	4318      	orrs	r0, r3
 8000b0e:	bc3c      	pop	{r2, r3, r4, r5}
 8000b10:	4690      	mov	r8, r2
 8000b12:	4699      	mov	r9, r3
 8000b14:	46a2      	mov	sl, r4
 8000b16:	46ab      	mov	fp, r5
 8000b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	1a10      	subs	r0, r2, r0
 8000b1e:	281b      	cmp	r0, #27
 8000b20:	dd7c      	ble.n	8000c1c <__aeabi_fdiv+0x1d8>
 8000b22:	2200      	movs	r2, #0
 8000b24:	2400      	movs	r4, #0
 8000b26:	e7ec      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000b28:	2c00      	cmp	r4, #0
 8000b2a:	d11d      	bne.n	8000b68 <__aeabi_fdiv+0x124>
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	4699      	mov	r9, r3
 8000b30:	3b03      	subs	r3, #3
 8000b32:	2600      	movs	r6, #0
 8000b34:	469b      	mov	fp, r3
 8000b36:	e79d      	b.n	8000a74 <__aeabi_fdiv+0x30>
 8000b38:	3eff      	subs	r6, #255	; 0xff
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d120      	bne.n	8000b80 <__aeabi_fdiv+0x13c>
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4643      	mov	r3, r8
 8000b42:	464a      	mov	r2, r9
 8000b44:	407b      	eors	r3, r7
 8000b46:	430a      	orrs	r2, r1
 8000b48:	2a0f      	cmp	r2, #15
 8000b4a:	d8d8      	bhi.n	8000afe <__aeabi_fdiv+0xba>
 8000b4c:	4845      	ldr	r0, [pc, #276]	; (8000c64 <__aeabi_fdiv+0x220>)
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	5882      	ldr	r2, [r0, r2]
 8000b52:	4697      	mov	pc, r2
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d119      	bne.n	8000b8c <__aeabi_fdiv+0x148>
 8000b58:	2101      	movs	r1, #1
 8000b5a:	e7f1      	b.n	8000b40 <__aeabi_fdiv+0xfc>
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	4699      	mov	r9, r3
 8000b60:	3b09      	subs	r3, #9
 8000b62:	26ff      	movs	r6, #255	; 0xff
 8000b64:	469b      	mov	fp, r3
 8000b66:	e785      	b.n	8000a74 <__aeabi_fdiv+0x30>
 8000b68:	0020      	movs	r0, r4
 8000b6a:	f002 fb25 	bl	80031b8 <__clzsi2>
 8000b6e:	2676      	movs	r6, #118	; 0x76
 8000b70:	1f43      	subs	r3, r0, #5
 8000b72:	409c      	lsls	r4, r3
 8000b74:	2300      	movs	r3, #0
 8000b76:	4276      	negs	r6, r6
 8000b78:	1a36      	subs	r6, r6, r0
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	469b      	mov	fp, r3
 8000b7e:	e779      	b.n	8000a74 <__aeabi_fdiv+0x30>
 8000b80:	464a      	mov	r2, r9
 8000b82:	2303      	movs	r3, #3
 8000b84:	431a      	orrs	r2, r3
 8000b86:	4691      	mov	r9, r2
 8000b88:	2103      	movs	r1, #3
 8000b8a:	e786      	b.n	8000a9a <__aeabi_fdiv+0x56>
 8000b8c:	0028      	movs	r0, r5
 8000b8e:	f002 fb13 	bl	80031b8 <__clzsi2>
 8000b92:	1f43      	subs	r3, r0, #5
 8000b94:	1836      	adds	r6, r6, r0
 8000b96:	409d      	lsls	r5, r3
 8000b98:	3676      	adds	r6, #118	; 0x76
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	e77d      	b.n	8000a9a <__aeabi_fdiv+0x56>
 8000b9e:	2480      	movs	r4, #128	; 0x80
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	03e4      	lsls	r4, r4, #15
 8000ba4:	22ff      	movs	r2, #255	; 0xff
 8000ba6:	e7ac      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000ba8:	2500      	movs	r5, #0
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	03db      	lsls	r3, r3, #15
 8000bae:	421c      	tst	r4, r3
 8000bb0:	d028      	beq.n	8000c04 <__aeabi_fdiv+0x1c0>
 8000bb2:	421d      	tst	r5, r3
 8000bb4:	d126      	bne.n	8000c04 <__aeabi_fdiv+0x1c0>
 8000bb6:	432b      	orrs	r3, r5
 8000bb8:	025c      	lsls	r4, r3, #9
 8000bba:	0a64      	lsrs	r4, r4, #9
 8000bbc:	4643      	mov	r3, r8
 8000bbe:	22ff      	movs	r2, #255	; 0xff
 8000bc0:	e79f      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000bc2:	0162      	lsls	r2, r4, #5
 8000bc4:	016c      	lsls	r4, r5, #5
 8000bc6:	42a2      	cmp	r2, r4
 8000bc8:	d224      	bcs.n	8000c14 <__aeabi_fdiv+0x1d0>
 8000bca:	211b      	movs	r1, #27
 8000bcc:	2500      	movs	r5, #0
 8000bce:	3e01      	subs	r6, #1
 8000bd0:	2701      	movs	r7, #1
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	006d      	lsls	r5, r5, #1
 8000bd6:	0052      	lsls	r2, r2, #1
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	db01      	blt.n	8000be0 <__aeabi_fdiv+0x19c>
 8000bdc:	4294      	cmp	r4, r2
 8000bde:	d801      	bhi.n	8000be4 <__aeabi_fdiv+0x1a0>
 8000be0:	1b12      	subs	r2, r2, r4
 8000be2:	433d      	orrs	r5, r7
 8000be4:	3901      	subs	r1, #1
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d1f3      	bne.n	8000bd2 <__aeabi_fdiv+0x18e>
 8000bea:	0014      	movs	r4, r2
 8000bec:	1e62      	subs	r2, r4, #1
 8000bee:	4194      	sbcs	r4, r2
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	e76d      	b.n	8000ad0 <__aeabi_fdiv+0x8c>
 8000bf4:	46ba      	mov	sl, r7
 8000bf6:	4659      	mov	r1, fp
 8000bf8:	0025      	movs	r5, r4
 8000bfa:	4653      	mov	r3, sl
 8000bfc:	2902      	cmp	r1, #2
 8000bfe:	d000      	beq.n	8000c02 <__aeabi_fdiv+0x1be>
 8000c00:	e761      	b.n	8000ac6 <__aeabi_fdiv+0x82>
 8000c02:	e77c      	b.n	8000afe <__aeabi_fdiv+0xba>
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	03db      	lsls	r3, r3, #15
 8000c08:	431c      	orrs	r4, r3
 8000c0a:	0264      	lsls	r4, r4, #9
 8000c0c:	0a64      	lsrs	r4, r4, #9
 8000c0e:	003b      	movs	r3, r7
 8000c10:	22ff      	movs	r2, #255	; 0xff
 8000c12:	e776      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000c14:	1b12      	subs	r2, r2, r4
 8000c16:	211a      	movs	r1, #26
 8000c18:	2501      	movs	r5, #1
 8000c1a:	e7d9      	b.n	8000bd0 <__aeabi_fdiv+0x18c>
 8000c1c:	369e      	adds	r6, #158	; 0x9e
 8000c1e:	002a      	movs	r2, r5
 8000c20:	40b5      	lsls	r5, r6
 8000c22:	002c      	movs	r4, r5
 8000c24:	40c2      	lsrs	r2, r0
 8000c26:	1e65      	subs	r5, r4, #1
 8000c28:	41ac      	sbcs	r4, r5
 8000c2a:	4314      	orrs	r4, r2
 8000c2c:	0762      	lsls	r2, r4, #29
 8000c2e:	d004      	beq.n	8000c3a <__aeabi_fdiv+0x1f6>
 8000c30:	220f      	movs	r2, #15
 8000c32:	4022      	ands	r2, r4
 8000c34:	2a04      	cmp	r2, #4
 8000c36:	d000      	beq.n	8000c3a <__aeabi_fdiv+0x1f6>
 8000c38:	3404      	adds	r4, #4
 8000c3a:	0162      	lsls	r2, r4, #5
 8000c3c:	d403      	bmi.n	8000c46 <__aeabi_fdiv+0x202>
 8000c3e:	01a4      	lsls	r4, r4, #6
 8000c40:	0a64      	lsrs	r4, r4, #9
 8000c42:	2200      	movs	r2, #0
 8000c44:	e75d      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000c46:	2201      	movs	r2, #1
 8000c48:	2400      	movs	r4, #0
 8000c4a:	e75a      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000c4c:	2480      	movs	r4, #128	; 0x80
 8000c4e:	03e4      	lsls	r4, r4, #15
 8000c50:	432c      	orrs	r4, r5
 8000c52:	0264      	lsls	r4, r4, #9
 8000c54:	0a64      	lsrs	r4, r4, #9
 8000c56:	22ff      	movs	r2, #255	; 0xff
 8000c58:	e753      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	0800ef60 	.word	0x0800ef60
 8000c60:	f7ffffff 	.word	0xf7ffffff
 8000c64:	0800efa0 	.word	0x0800efa0

08000c68 <__eqsf2>:
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	0042      	lsls	r2, r0, #1
 8000c6c:	024e      	lsls	r6, r1, #9
 8000c6e:	004c      	lsls	r4, r1, #1
 8000c70:	0245      	lsls	r5, r0, #9
 8000c72:	0a6d      	lsrs	r5, r5, #9
 8000c74:	0e12      	lsrs	r2, r2, #24
 8000c76:	0fc3      	lsrs	r3, r0, #31
 8000c78:	0a76      	lsrs	r6, r6, #9
 8000c7a:	0e24      	lsrs	r4, r4, #24
 8000c7c:	0fc9      	lsrs	r1, r1, #31
 8000c7e:	2aff      	cmp	r2, #255	; 0xff
 8000c80:	d00f      	beq.n	8000ca2 <__eqsf2+0x3a>
 8000c82:	2cff      	cmp	r4, #255	; 0xff
 8000c84:	d011      	beq.n	8000caa <__eqsf2+0x42>
 8000c86:	2001      	movs	r0, #1
 8000c88:	42a2      	cmp	r2, r4
 8000c8a:	d000      	beq.n	8000c8e <__eqsf2+0x26>
 8000c8c:	bd70      	pop	{r4, r5, r6, pc}
 8000c8e:	42b5      	cmp	r5, r6
 8000c90:	d1fc      	bne.n	8000c8c <__eqsf2+0x24>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d00d      	beq.n	8000cb2 <__eqsf2+0x4a>
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d1f8      	bne.n	8000c8c <__eqsf2+0x24>
 8000c9a:	0028      	movs	r0, r5
 8000c9c:	1e45      	subs	r5, r0, #1
 8000c9e:	41a8      	sbcs	r0, r5
 8000ca0:	e7f4      	b.n	8000c8c <__eqsf2+0x24>
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d1f1      	bne.n	8000c8c <__eqsf2+0x24>
 8000ca8:	e7eb      	b.n	8000c82 <__eqsf2+0x1a>
 8000caa:	2001      	movs	r0, #1
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d1ed      	bne.n	8000c8c <__eqsf2+0x24>
 8000cb0:	e7e9      	b.n	8000c86 <__eqsf2+0x1e>
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e7ea      	b.n	8000c8c <__eqsf2+0x24>
 8000cb6:	46c0      	nop			; (mov r8, r8)

08000cb8 <__gesf2>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	004a      	lsls	r2, r1, #1
 8000cbc:	024e      	lsls	r6, r1, #9
 8000cbe:	0245      	lsls	r5, r0, #9
 8000cc0:	0044      	lsls	r4, r0, #1
 8000cc2:	0a6d      	lsrs	r5, r5, #9
 8000cc4:	0e24      	lsrs	r4, r4, #24
 8000cc6:	0fc3      	lsrs	r3, r0, #31
 8000cc8:	0a76      	lsrs	r6, r6, #9
 8000cca:	0e12      	lsrs	r2, r2, #24
 8000ccc:	0fc9      	lsrs	r1, r1, #31
 8000cce:	2cff      	cmp	r4, #255	; 0xff
 8000cd0:	d015      	beq.n	8000cfe <__gesf2+0x46>
 8000cd2:	2aff      	cmp	r2, #255	; 0xff
 8000cd4:	d00e      	beq.n	8000cf4 <__gesf2+0x3c>
 8000cd6:	2c00      	cmp	r4, #0
 8000cd8:	d115      	bne.n	8000d06 <__gesf2+0x4e>
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d101      	bne.n	8000ce2 <__gesf2+0x2a>
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d01c      	beq.n	8000d1c <__gesf2+0x64>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d014      	beq.n	8000d10 <__gesf2+0x58>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d027      	beq.n	8000d3a <__gesf2+0x82>
 8000cea:	2002      	movs	r0, #2
 8000cec:	3b01      	subs	r3, #1
 8000cee:	4018      	ands	r0, r3
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}
 8000cf4:	2e00      	cmp	r6, #0
 8000cf6:	d0ee      	beq.n	8000cd6 <__gesf2+0x1e>
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	e7f9      	b.n	8000cf2 <__gesf2+0x3a>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d1fa      	bne.n	8000cf8 <__gesf2+0x40>
 8000d02:	2aff      	cmp	r2, #255	; 0xff
 8000d04:	d00e      	beq.n	8000d24 <__gesf2+0x6c>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d10e      	bne.n	8000d28 <__gesf2+0x70>
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d0ed      	beq.n	8000cea <__gesf2+0x32>
 8000d0e:	e00b      	b.n	8000d28 <__gesf2+0x70>
 8000d10:	2301      	movs	r3, #1
 8000d12:	3901      	subs	r1, #1
 8000d14:	4399      	bics	r1, r3
 8000d16:	0008      	movs	r0, r1
 8000d18:	3001      	adds	r0, #1
 8000d1a:	e7ea      	b.n	8000cf2 <__gesf2+0x3a>
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d0e7      	beq.n	8000cf2 <__gesf2+0x3a>
 8000d22:	e7e2      	b.n	8000cea <__gesf2+0x32>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d1e7      	bne.n	8000cf8 <__gesf2+0x40>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d1de      	bne.n	8000cea <__gesf2+0x32>
 8000d2c:	4294      	cmp	r4, r2
 8000d2e:	dd05      	ble.n	8000d3c <__gesf2+0x84>
 8000d30:	2102      	movs	r1, #2
 8000d32:	1e58      	subs	r0, r3, #1
 8000d34:	4008      	ands	r0, r1
 8000d36:	3801      	subs	r0, #1
 8000d38:	e7db      	b.n	8000cf2 <__gesf2+0x3a>
 8000d3a:	2400      	movs	r4, #0
 8000d3c:	42a2      	cmp	r2, r4
 8000d3e:	dc04      	bgt.n	8000d4a <__gesf2+0x92>
 8000d40:	42b5      	cmp	r5, r6
 8000d42:	d8d2      	bhi.n	8000cea <__gesf2+0x32>
 8000d44:	2000      	movs	r0, #0
 8000d46:	42b5      	cmp	r5, r6
 8000d48:	d2d3      	bcs.n	8000cf2 <__gesf2+0x3a>
 8000d4a:	1e58      	subs	r0, r3, #1
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4398      	bics	r0, r3
 8000d50:	3001      	adds	r0, #1
 8000d52:	e7ce      	b.n	8000cf2 <__gesf2+0x3a>

08000d54 <__lesf2>:
 8000d54:	b530      	push	{r4, r5, lr}
 8000d56:	0042      	lsls	r2, r0, #1
 8000d58:	0244      	lsls	r4, r0, #9
 8000d5a:	024d      	lsls	r5, r1, #9
 8000d5c:	0fc3      	lsrs	r3, r0, #31
 8000d5e:	0048      	lsls	r0, r1, #1
 8000d60:	0a64      	lsrs	r4, r4, #9
 8000d62:	0e12      	lsrs	r2, r2, #24
 8000d64:	0a6d      	lsrs	r5, r5, #9
 8000d66:	0e00      	lsrs	r0, r0, #24
 8000d68:	0fc9      	lsrs	r1, r1, #31
 8000d6a:	2aff      	cmp	r2, #255	; 0xff
 8000d6c:	d012      	beq.n	8000d94 <__lesf2+0x40>
 8000d6e:	28ff      	cmp	r0, #255	; 0xff
 8000d70:	d00c      	beq.n	8000d8c <__lesf2+0x38>
 8000d72:	2a00      	cmp	r2, #0
 8000d74:	d112      	bne.n	8000d9c <__lesf2+0x48>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d119      	bne.n	8000dae <__lesf2+0x5a>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d117      	bne.n	8000dae <__lesf2+0x5a>
 8000d7e:	2c00      	cmp	r4, #0
 8000d80:	d02b      	beq.n	8000dda <__lesf2+0x86>
 8000d82:	2002      	movs	r0, #2
 8000d84:	3b01      	subs	r3, #1
 8000d86:	4018      	ands	r0, r3
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e026      	b.n	8000dda <__lesf2+0x86>
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0f0      	beq.n	8000d72 <__lesf2+0x1e>
 8000d90:	2002      	movs	r0, #2
 8000d92:	e022      	b.n	8000dda <__lesf2+0x86>
 8000d94:	2c00      	cmp	r4, #0
 8000d96:	d1fb      	bne.n	8000d90 <__lesf2+0x3c>
 8000d98:	28ff      	cmp	r0, #255	; 0xff
 8000d9a:	d01f      	beq.n	8000ddc <__lesf2+0x88>
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	d11f      	bne.n	8000de0 <__lesf2+0x8c>
 8000da0:	2d00      	cmp	r5, #0
 8000da2:	d11d      	bne.n	8000de0 <__lesf2+0x8c>
 8000da4:	2002      	movs	r0, #2
 8000da6:	3b01      	subs	r3, #1
 8000da8:	4018      	ands	r0, r3
 8000daa:	3801      	subs	r0, #1
 8000dac:	e015      	b.n	8000dda <__lesf2+0x86>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d00e      	beq.n	8000dd0 <__lesf2+0x7c>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d1e5      	bne.n	8000d82 <__lesf2+0x2e>
 8000db6:	2200      	movs	r2, #0
 8000db8:	4290      	cmp	r0, r2
 8000dba:	dc04      	bgt.n	8000dc6 <__lesf2+0x72>
 8000dbc:	42ac      	cmp	r4, r5
 8000dbe:	d8e0      	bhi.n	8000d82 <__lesf2+0x2e>
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	d209      	bcs.n	8000dda <__lesf2+0x86>
 8000dc6:	1e58      	subs	r0, r3, #1
 8000dc8:	2301      	movs	r3, #1
 8000dca:	4398      	bics	r0, r3
 8000dcc:	3001      	adds	r0, #1
 8000dce:	e004      	b.n	8000dda <__lesf2+0x86>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	3901      	subs	r1, #1
 8000dd4:	4399      	bics	r1, r3
 8000dd6:	0008      	movs	r0, r1
 8000dd8:	3001      	adds	r0, #1
 8000dda:	bd30      	pop	{r4, r5, pc}
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d1d7      	bne.n	8000d90 <__lesf2+0x3c>
 8000de0:	428b      	cmp	r3, r1
 8000de2:	d1ce      	bne.n	8000d82 <__lesf2+0x2e>
 8000de4:	4282      	cmp	r2, r0
 8000de6:	dde7      	ble.n	8000db8 <__lesf2+0x64>
 8000de8:	2102      	movs	r1, #2
 8000dea:	1e58      	subs	r0, r3, #1
 8000dec:	4008      	ands	r0, r1
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7f3      	b.n	8000dda <__lesf2+0x86>
 8000df2:	46c0      	nop			; (mov r8, r8)

08000df4 <__aeabi_fmul>:
 8000df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df6:	464e      	mov	r6, r9
 8000df8:	4657      	mov	r7, sl
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	46de      	mov	lr, fp
 8000dfe:	b5e0      	push	{r5, r6, r7, lr}
 8000e00:	0243      	lsls	r3, r0, #9
 8000e02:	0a5b      	lsrs	r3, r3, #9
 8000e04:	0045      	lsls	r5, r0, #1
 8000e06:	b083      	sub	sp, #12
 8000e08:	1c0f      	adds	r7, r1, #0
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	0e2d      	lsrs	r5, r5, #24
 8000e0e:	0fc6      	lsrs	r6, r0, #31
 8000e10:	2d00      	cmp	r5, #0
 8000e12:	d057      	beq.n	8000ec4 <__aeabi_fmul+0xd0>
 8000e14:	2dff      	cmp	r5, #255	; 0xff
 8000e16:	d024      	beq.n	8000e62 <__aeabi_fmul+0x6e>
 8000e18:	2080      	movs	r0, #128	; 0x80
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	04c0      	lsls	r0, r0, #19
 8000e1e:	4318      	orrs	r0, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	4681      	mov	r9, r0
 8000e24:	469a      	mov	sl, r3
 8000e26:	469b      	mov	fp, r3
 8000e28:	3d7f      	subs	r5, #127	; 0x7f
 8000e2a:	027c      	lsls	r4, r7, #9
 8000e2c:	007a      	lsls	r2, r7, #1
 8000e2e:	0ffb      	lsrs	r3, r7, #31
 8000e30:	0a64      	lsrs	r4, r4, #9
 8000e32:	0e12      	lsrs	r2, r2, #24
 8000e34:	4698      	mov	r8, r3
 8000e36:	d023      	beq.n	8000e80 <__aeabi_fmul+0x8c>
 8000e38:	2aff      	cmp	r2, #255	; 0xff
 8000e3a:	d04b      	beq.n	8000ed4 <__aeabi_fmul+0xe0>
 8000e3c:	00e3      	lsls	r3, r4, #3
 8000e3e:	2480      	movs	r4, #128	; 0x80
 8000e40:	2000      	movs	r0, #0
 8000e42:	04e4      	lsls	r4, r4, #19
 8000e44:	3a7f      	subs	r2, #127	; 0x7f
 8000e46:	431c      	orrs	r4, r3
 8000e48:	18ad      	adds	r5, r5, r2
 8000e4a:	1c6b      	adds	r3, r5, #1
 8000e4c:	4647      	mov	r7, r8
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	4653      	mov	r3, sl
 8000e52:	4077      	eors	r7, r6
 8000e54:	003a      	movs	r2, r7
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	d848      	bhi.n	8000eec <__aeabi_fmul+0xf8>
 8000e5a:	497d      	ldr	r1, [pc, #500]	; (8001050 <__aeabi_fmul+0x25c>)
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	58cb      	ldr	r3, [r1, r3]
 8000e60:	469f      	mov	pc, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fmul+0x74>
 8000e66:	e085      	b.n	8000f74 <__aeabi_fmul+0x180>
 8000e68:	3308      	adds	r3, #8
 8000e6a:	469a      	mov	sl, r3
 8000e6c:	3b06      	subs	r3, #6
 8000e6e:	469b      	mov	fp, r3
 8000e70:	027c      	lsls	r4, r7, #9
 8000e72:	007a      	lsls	r2, r7, #1
 8000e74:	0ffb      	lsrs	r3, r7, #31
 8000e76:	25ff      	movs	r5, #255	; 0xff
 8000e78:	0a64      	lsrs	r4, r4, #9
 8000e7a:	0e12      	lsrs	r2, r2, #24
 8000e7c:	4698      	mov	r8, r3
 8000e7e:	d1db      	bne.n	8000e38 <__aeabi_fmul+0x44>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d000      	beq.n	8000e86 <__aeabi_fmul+0x92>
 8000e84:	e090      	b.n	8000fa8 <__aeabi_fmul+0x1b4>
 8000e86:	4652      	mov	r2, sl
 8000e88:	2301      	movs	r3, #1
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	2001      	movs	r0, #1
 8000e90:	e7db      	b.n	8000e4a <__aeabi_fmul+0x56>
 8000e92:	464c      	mov	r4, r9
 8000e94:	4658      	mov	r0, fp
 8000e96:	0017      	movs	r7, r2
 8000e98:	2802      	cmp	r0, #2
 8000e9a:	d024      	beq.n	8000ee6 <__aeabi_fmul+0xf2>
 8000e9c:	2803      	cmp	r0, #3
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fmul+0xae>
 8000ea0:	e0cf      	b.n	8001042 <__aeabi_fmul+0x24e>
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2801      	cmp	r0, #1
 8000ea8:	d14d      	bne.n	8000f46 <__aeabi_fmul+0x152>
 8000eaa:	0258      	lsls	r0, r3, #9
 8000eac:	05d2      	lsls	r2, r2, #23
 8000eae:	0a40      	lsrs	r0, r0, #9
 8000eb0:	07ff      	lsls	r7, r7, #31
 8000eb2:	4310      	orrs	r0, r2
 8000eb4:	4338      	orrs	r0, r7
 8000eb6:	b003      	add	sp, #12
 8000eb8:	bc3c      	pop	{r2, r3, r4, r5}
 8000eba:	4690      	mov	r8, r2
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	46a2      	mov	sl, r4
 8000ec0:	46ab      	mov	fp, r5
 8000ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d15b      	bne.n	8000f80 <__aeabi_fmul+0x18c>
 8000ec8:	2304      	movs	r3, #4
 8000eca:	469a      	mov	sl, r3
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	2500      	movs	r5, #0
 8000ed0:	469b      	mov	fp, r3
 8000ed2:	e7aa      	b.n	8000e2a <__aeabi_fmul+0x36>
 8000ed4:	35ff      	adds	r5, #255	; 0xff
 8000ed6:	2c00      	cmp	r4, #0
 8000ed8:	d160      	bne.n	8000f9c <__aeabi_fmul+0x1a8>
 8000eda:	4652      	mov	r2, sl
 8000edc:	2302      	movs	r3, #2
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	4692      	mov	sl, r2
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	e7b1      	b.n	8000e4a <__aeabi_fmul+0x56>
 8000ee6:	22ff      	movs	r2, #255	; 0xff
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e7de      	b.n	8000eaa <__aeabi_fmul+0xb6>
 8000eec:	464b      	mov	r3, r9
 8000eee:	0c1b      	lsrs	r3, r3, #16
 8000ef0:	469c      	mov	ip, r3
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	0426      	lsls	r6, r4, #16
 8000ef6:	0c36      	lsrs	r6, r6, #16
 8000ef8:	0418      	lsls	r0, r3, #16
 8000efa:	4661      	mov	r1, ip
 8000efc:	0033      	movs	r3, r6
 8000efe:	0c22      	lsrs	r2, r4, #16
 8000f00:	4664      	mov	r4, ip
 8000f02:	0c00      	lsrs	r0, r0, #16
 8000f04:	4343      	muls	r3, r0
 8000f06:	434e      	muls	r6, r1
 8000f08:	4350      	muls	r0, r2
 8000f0a:	4354      	muls	r4, r2
 8000f0c:	1980      	adds	r0, r0, r6
 8000f0e:	0c1a      	lsrs	r2, r3, #16
 8000f10:	1812      	adds	r2, r2, r0
 8000f12:	4296      	cmp	r6, r2
 8000f14:	d903      	bls.n	8000f1e <__aeabi_fmul+0x12a>
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	0249      	lsls	r1, r1, #9
 8000f1a:	468c      	mov	ip, r1
 8000f1c:	4464      	add	r4, ip
 8000f1e:	041b      	lsls	r3, r3, #16
 8000f20:	0c1b      	lsrs	r3, r3, #16
 8000f22:	0410      	lsls	r0, r2, #16
 8000f24:	18c0      	adds	r0, r0, r3
 8000f26:	0183      	lsls	r3, r0, #6
 8000f28:	1e5e      	subs	r6, r3, #1
 8000f2a:	41b3      	sbcs	r3, r6
 8000f2c:	0e80      	lsrs	r0, r0, #26
 8000f2e:	4318      	orrs	r0, r3
 8000f30:	0c13      	lsrs	r3, r2, #16
 8000f32:	191b      	adds	r3, r3, r4
 8000f34:	019b      	lsls	r3, r3, #6
 8000f36:	4303      	orrs	r3, r0
 8000f38:	001c      	movs	r4, r3
 8000f3a:	0123      	lsls	r3, r4, #4
 8000f3c:	d579      	bpl.n	8001032 <__aeabi_fmul+0x23e>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	0862      	lsrs	r2, r4, #1
 8000f42:	401c      	ands	r4, r3
 8000f44:	4314      	orrs	r4, r2
 8000f46:	9a01      	ldr	r2, [sp, #4]
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	2a00      	cmp	r2, #0
 8000f4c:	dd4d      	ble.n	8000fea <__aeabi_fmul+0x1f6>
 8000f4e:	0763      	lsls	r3, r4, #29
 8000f50:	d004      	beq.n	8000f5c <__aeabi_fmul+0x168>
 8000f52:	230f      	movs	r3, #15
 8000f54:	4023      	ands	r3, r4
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d000      	beq.n	8000f5c <__aeabi_fmul+0x168>
 8000f5a:	3404      	adds	r4, #4
 8000f5c:	0123      	lsls	r3, r4, #4
 8000f5e:	d503      	bpl.n	8000f68 <__aeabi_fmul+0x174>
 8000f60:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <__aeabi_fmul+0x260>)
 8000f62:	9a01      	ldr	r2, [sp, #4]
 8000f64:	401c      	ands	r4, r3
 8000f66:	3280      	adds	r2, #128	; 0x80
 8000f68:	2afe      	cmp	r2, #254	; 0xfe
 8000f6a:	dcbc      	bgt.n	8000ee6 <__aeabi_fmul+0xf2>
 8000f6c:	01a3      	lsls	r3, r4, #6
 8000f6e:	0a5b      	lsrs	r3, r3, #9
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	e79a      	b.n	8000eaa <__aeabi_fmul+0xb6>
 8000f74:	230c      	movs	r3, #12
 8000f76:	469a      	mov	sl, r3
 8000f78:	3b09      	subs	r3, #9
 8000f7a:	25ff      	movs	r5, #255	; 0xff
 8000f7c:	469b      	mov	fp, r3
 8000f7e:	e754      	b.n	8000e2a <__aeabi_fmul+0x36>
 8000f80:	0018      	movs	r0, r3
 8000f82:	f002 f919 	bl	80031b8 <__clzsi2>
 8000f86:	464a      	mov	r2, r9
 8000f88:	1f43      	subs	r3, r0, #5
 8000f8a:	2576      	movs	r5, #118	; 0x76
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	2300      	movs	r3, #0
 8000f90:	426d      	negs	r5, r5
 8000f92:	4691      	mov	r9, r2
 8000f94:	1a2d      	subs	r5, r5, r0
 8000f96:	469a      	mov	sl, r3
 8000f98:	469b      	mov	fp, r3
 8000f9a:	e746      	b.n	8000e2a <__aeabi_fmul+0x36>
 8000f9c:	4652      	mov	r2, sl
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	4692      	mov	sl, r2
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	e750      	b.n	8000e4a <__aeabi_fmul+0x56>
 8000fa8:	0020      	movs	r0, r4
 8000faa:	f002 f905 	bl	80031b8 <__clzsi2>
 8000fae:	1f43      	subs	r3, r0, #5
 8000fb0:	1a2d      	subs	r5, r5, r0
 8000fb2:	409c      	lsls	r4, r3
 8000fb4:	3d76      	subs	r5, #118	; 0x76
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	e747      	b.n	8000e4a <__aeabi_fmul+0x56>
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	2700      	movs	r7, #0
 8000fbe:	03db      	lsls	r3, r3, #15
 8000fc0:	22ff      	movs	r2, #255	; 0xff
 8000fc2:	e772      	b.n	8000eaa <__aeabi_fmul+0xb6>
 8000fc4:	4642      	mov	r2, r8
 8000fc6:	e766      	b.n	8000e96 <__aeabi_fmul+0xa2>
 8000fc8:	464c      	mov	r4, r9
 8000fca:	0032      	movs	r2, r6
 8000fcc:	4658      	mov	r0, fp
 8000fce:	e762      	b.n	8000e96 <__aeabi_fmul+0xa2>
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	03db      	lsls	r3, r3, #15
 8000fd6:	421a      	tst	r2, r3
 8000fd8:	d022      	beq.n	8001020 <__aeabi_fmul+0x22c>
 8000fda:	421c      	tst	r4, r3
 8000fdc:	d120      	bne.n	8001020 <__aeabi_fmul+0x22c>
 8000fde:	4323      	orrs	r3, r4
 8000fe0:	025b      	lsls	r3, r3, #9
 8000fe2:	0a5b      	lsrs	r3, r3, #9
 8000fe4:	4647      	mov	r7, r8
 8000fe6:	22ff      	movs	r2, #255	; 0xff
 8000fe8:	e75f      	b.n	8000eaa <__aeabi_fmul+0xb6>
 8000fea:	2301      	movs	r3, #1
 8000fec:	1a9a      	subs	r2, r3, r2
 8000fee:	2a1b      	cmp	r2, #27
 8000ff0:	dc21      	bgt.n	8001036 <__aeabi_fmul+0x242>
 8000ff2:	0023      	movs	r3, r4
 8000ff4:	9901      	ldr	r1, [sp, #4]
 8000ff6:	40d3      	lsrs	r3, r2
 8000ff8:	319e      	adds	r1, #158	; 0x9e
 8000ffa:	408c      	lsls	r4, r1
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	0023      	movs	r3, r4
 8001000:	1e5c      	subs	r4, r3, #1
 8001002:	41a3      	sbcs	r3, r4
 8001004:	4313      	orrs	r3, r2
 8001006:	075a      	lsls	r2, r3, #29
 8001008:	d004      	beq.n	8001014 <__aeabi_fmul+0x220>
 800100a:	220f      	movs	r2, #15
 800100c:	401a      	ands	r2, r3
 800100e:	2a04      	cmp	r2, #4
 8001010:	d000      	beq.n	8001014 <__aeabi_fmul+0x220>
 8001012:	3304      	adds	r3, #4
 8001014:	015a      	lsls	r2, r3, #5
 8001016:	d411      	bmi.n	800103c <__aeabi_fmul+0x248>
 8001018:	019b      	lsls	r3, r3, #6
 800101a:	0a5b      	lsrs	r3, r3, #9
 800101c:	2200      	movs	r2, #0
 800101e:	e744      	b.n	8000eaa <__aeabi_fmul+0xb6>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	464a      	mov	r2, r9
 8001024:	03db      	lsls	r3, r3, #15
 8001026:	4313      	orrs	r3, r2
 8001028:	025b      	lsls	r3, r3, #9
 800102a:	0a5b      	lsrs	r3, r3, #9
 800102c:	0037      	movs	r7, r6
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	e73b      	b.n	8000eaa <__aeabi_fmul+0xb6>
 8001032:	9501      	str	r5, [sp, #4]
 8001034:	e787      	b.n	8000f46 <__aeabi_fmul+0x152>
 8001036:	2200      	movs	r2, #0
 8001038:	2300      	movs	r3, #0
 800103a:	e736      	b.n	8000eaa <__aeabi_fmul+0xb6>
 800103c:	2201      	movs	r2, #1
 800103e:	2300      	movs	r3, #0
 8001040:	e733      	b.n	8000eaa <__aeabi_fmul+0xb6>
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	03db      	lsls	r3, r3, #15
 8001046:	4323      	orrs	r3, r4
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	0a5b      	lsrs	r3, r3, #9
 800104c:	22ff      	movs	r2, #255	; 0xff
 800104e:	e72c      	b.n	8000eaa <__aeabi_fmul+0xb6>
 8001050:	0800efe0 	.word	0x0800efe0
 8001054:	f7ffffff 	.word	0xf7ffffff

08001058 <__aeabi_fsub>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	4647      	mov	r7, r8
 800105c:	46ce      	mov	lr, r9
 800105e:	0044      	lsls	r4, r0, #1
 8001060:	0fc2      	lsrs	r2, r0, #31
 8001062:	b580      	push	{r7, lr}
 8001064:	0247      	lsls	r7, r0, #9
 8001066:	0248      	lsls	r0, r1, #9
 8001068:	0a40      	lsrs	r0, r0, #9
 800106a:	4684      	mov	ip, r0
 800106c:	4666      	mov	r6, ip
 800106e:	0048      	lsls	r0, r1, #1
 8001070:	0a7f      	lsrs	r7, r7, #9
 8001072:	0e24      	lsrs	r4, r4, #24
 8001074:	00f6      	lsls	r6, r6, #3
 8001076:	0025      	movs	r5, r4
 8001078:	4690      	mov	r8, r2
 800107a:	00fb      	lsls	r3, r7, #3
 800107c:	0e00      	lsrs	r0, r0, #24
 800107e:	0fc9      	lsrs	r1, r1, #31
 8001080:	46b1      	mov	r9, r6
 8001082:	28ff      	cmp	r0, #255	; 0xff
 8001084:	d100      	bne.n	8001088 <__aeabi_fsub+0x30>
 8001086:	e085      	b.n	8001194 <__aeabi_fsub+0x13c>
 8001088:	2601      	movs	r6, #1
 800108a:	4071      	eors	r1, r6
 800108c:	1a26      	subs	r6, r4, r0
 800108e:	4291      	cmp	r1, r2
 8001090:	d057      	beq.n	8001142 <__aeabi_fsub+0xea>
 8001092:	2e00      	cmp	r6, #0
 8001094:	dd43      	ble.n	800111e <__aeabi_fsub+0xc6>
 8001096:	2800      	cmp	r0, #0
 8001098:	d000      	beq.n	800109c <__aeabi_fsub+0x44>
 800109a:	e07f      	b.n	800119c <__aeabi_fsub+0x144>
 800109c:	4649      	mov	r1, r9
 800109e:	2900      	cmp	r1, #0
 80010a0:	d100      	bne.n	80010a4 <__aeabi_fsub+0x4c>
 80010a2:	e0aa      	b.n	80011fa <__aeabi_fsub+0x1a2>
 80010a4:	3e01      	subs	r6, #1
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d000      	beq.n	80010ac <__aeabi_fsub+0x54>
 80010aa:	e0f7      	b.n	800129c <__aeabi_fsub+0x244>
 80010ac:	1a5b      	subs	r3, r3, r1
 80010ae:	015a      	lsls	r2, r3, #5
 80010b0:	d400      	bmi.n	80010b4 <__aeabi_fsub+0x5c>
 80010b2:	e08b      	b.n	80011cc <__aeabi_fsub+0x174>
 80010b4:	019b      	lsls	r3, r3, #6
 80010b6:	099c      	lsrs	r4, r3, #6
 80010b8:	0020      	movs	r0, r4
 80010ba:	f002 f87d 	bl	80031b8 <__clzsi2>
 80010be:	3805      	subs	r0, #5
 80010c0:	4084      	lsls	r4, r0
 80010c2:	4285      	cmp	r5, r0
 80010c4:	dd00      	ble.n	80010c8 <__aeabi_fsub+0x70>
 80010c6:	e0d3      	b.n	8001270 <__aeabi_fsub+0x218>
 80010c8:	1b45      	subs	r5, r0, r5
 80010ca:	0023      	movs	r3, r4
 80010cc:	2020      	movs	r0, #32
 80010ce:	3501      	adds	r5, #1
 80010d0:	40eb      	lsrs	r3, r5
 80010d2:	1b45      	subs	r5, r0, r5
 80010d4:	40ac      	lsls	r4, r5
 80010d6:	1e62      	subs	r2, r4, #1
 80010d8:	4194      	sbcs	r4, r2
 80010da:	4323      	orrs	r3, r4
 80010dc:	2407      	movs	r4, #7
 80010de:	2500      	movs	r5, #0
 80010e0:	401c      	ands	r4, r3
 80010e2:	2201      	movs	r2, #1
 80010e4:	4641      	mov	r1, r8
 80010e6:	400a      	ands	r2, r1
 80010e8:	2c00      	cmp	r4, #0
 80010ea:	d004      	beq.n	80010f6 <__aeabi_fsub+0x9e>
 80010ec:	210f      	movs	r1, #15
 80010ee:	4019      	ands	r1, r3
 80010f0:	2904      	cmp	r1, #4
 80010f2:	d000      	beq.n	80010f6 <__aeabi_fsub+0x9e>
 80010f4:	3304      	adds	r3, #4
 80010f6:	0159      	lsls	r1, r3, #5
 80010f8:	d400      	bmi.n	80010fc <__aeabi_fsub+0xa4>
 80010fa:	e080      	b.n	80011fe <__aeabi_fsub+0x1a6>
 80010fc:	3501      	adds	r5, #1
 80010fe:	b2ec      	uxtb	r4, r5
 8001100:	2dff      	cmp	r5, #255	; 0xff
 8001102:	d000      	beq.n	8001106 <__aeabi_fsub+0xae>
 8001104:	e0a3      	b.n	800124e <__aeabi_fsub+0x1f6>
 8001106:	24ff      	movs	r4, #255	; 0xff
 8001108:	2300      	movs	r3, #0
 800110a:	025b      	lsls	r3, r3, #9
 800110c:	05e4      	lsls	r4, r4, #23
 800110e:	0a58      	lsrs	r0, r3, #9
 8001110:	07d2      	lsls	r2, r2, #31
 8001112:	4320      	orrs	r0, r4
 8001114:	4310      	orrs	r0, r2
 8001116:	bc0c      	pop	{r2, r3}
 8001118:	4690      	mov	r8, r2
 800111a:	4699      	mov	r9, r3
 800111c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800111e:	2e00      	cmp	r6, #0
 8001120:	d174      	bne.n	800120c <__aeabi_fsub+0x1b4>
 8001122:	1c60      	adds	r0, r4, #1
 8001124:	b2c0      	uxtb	r0, r0
 8001126:	2801      	cmp	r0, #1
 8001128:	dc00      	bgt.n	800112c <__aeabi_fsub+0xd4>
 800112a:	e0a7      	b.n	800127c <__aeabi_fsub+0x224>
 800112c:	464a      	mov	r2, r9
 800112e:	1a9c      	subs	r4, r3, r2
 8001130:	0162      	lsls	r2, r4, #5
 8001132:	d500      	bpl.n	8001136 <__aeabi_fsub+0xde>
 8001134:	e0b6      	b.n	80012a4 <__aeabi_fsub+0x24c>
 8001136:	2c00      	cmp	r4, #0
 8001138:	d1be      	bne.n	80010b8 <__aeabi_fsub+0x60>
 800113a:	2200      	movs	r2, #0
 800113c:	2400      	movs	r4, #0
 800113e:	2300      	movs	r3, #0
 8001140:	e7e3      	b.n	800110a <__aeabi_fsub+0xb2>
 8001142:	2e00      	cmp	r6, #0
 8001144:	dc00      	bgt.n	8001148 <__aeabi_fsub+0xf0>
 8001146:	e085      	b.n	8001254 <__aeabi_fsub+0x1fc>
 8001148:	2800      	cmp	r0, #0
 800114a:	d046      	beq.n	80011da <__aeabi_fsub+0x182>
 800114c:	2cff      	cmp	r4, #255	; 0xff
 800114e:	d049      	beq.n	80011e4 <__aeabi_fsub+0x18c>
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	4648      	mov	r0, r9
 8001154:	04d2      	lsls	r2, r2, #19
 8001156:	4310      	orrs	r0, r2
 8001158:	4681      	mov	r9, r0
 800115a:	2201      	movs	r2, #1
 800115c:	2e1b      	cmp	r6, #27
 800115e:	dc09      	bgt.n	8001174 <__aeabi_fsub+0x11c>
 8001160:	2020      	movs	r0, #32
 8001162:	464c      	mov	r4, r9
 8001164:	1b80      	subs	r0, r0, r6
 8001166:	4084      	lsls	r4, r0
 8001168:	464a      	mov	r2, r9
 800116a:	0020      	movs	r0, r4
 800116c:	40f2      	lsrs	r2, r6
 800116e:	1e44      	subs	r4, r0, #1
 8001170:	41a0      	sbcs	r0, r4
 8001172:	4302      	orrs	r2, r0
 8001174:	189b      	adds	r3, r3, r2
 8001176:	015a      	lsls	r2, r3, #5
 8001178:	d528      	bpl.n	80011cc <__aeabi_fsub+0x174>
 800117a:	3501      	adds	r5, #1
 800117c:	2dff      	cmp	r5, #255	; 0xff
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x12a>
 8001180:	e0a8      	b.n	80012d4 <__aeabi_fsub+0x27c>
 8001182:	2201      	movs	r2, #1
 8001184:	2407      	movs	r4, #7
 8001186:	4994      	ldr	r1, [pc, #592]	; (80013d8 <__aeabi_fsub+0x380>)
 8001188:	401a      	ands	r2, r3
 800118a:	085b      	lsrs	r3, r3, #1
 800118c:	400b      	ands	r3, r1
 800118e:	4313      	orrs	r3, r2
 8001190:	401c      	ands	r4, r3
 8001192:	e7a6      	b.n	80010e2 <__aeabi_fsub+0x8a>
 8001194:	2e00      	cmp	r6, #0
 8001196:	d000      	beq.n	800119a <__aeabi_fsub+0x142>
 8001198:	e778      	b.n	800108c <__aeabi_fsub+0x34>
 800119a:	e775      	b.n	8001088 <__aeabi_fsub+0x30>
 800119c:	2cff      	cmp	r4, #255	; 0xff
 800119e:	d054      	beq.n	800124a <__aeabi_fsub+0x1f2>
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	4649      	mov	r1, r9
 80011a4:	04d2      	lsls	r2, r2, #19
 80011a6:	4311      	orrs	r1, r2
 80011a8:	4689      	mov	r9, r1
 80011aa:	2201      	movs	r2, #1
 80011ac:	2e1b      	cmp	r6, #27
 80011ae:	dc09      	bgt.n	80011c4 <__aeabi_fsub+0x16c>
 80011b0:	2120      	movs	r1, #32
 80011b2:	4648      	mov	r0, r9
 80011b4:	1b89      	subs	r1, r1, r6
 80011b6:	4088      	lsls	r0, r1
 80011b8:	464a      	mov	r2, r9
 80011ba:	0001      	movs	r1, r0
 80011bc:	40f2      	lsrs	r2, r6
 80011be:	1e48      	subs	r0, r1, #1
 80011c0:	4181      	sbcs	r1, r0
 80011c2:	430a      	orrs	r2, r1
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	015a      	lsls	r2, r3, #5
 80011c8:	d500      	bpl.n	80011cc <__aeabi_fsub+0x174>
 80011ca:	e773      	b.n	80010b4 <__aeabi_fsub+0x5c>
 80011cc:	2201      	movs	r2, #1
 80011ce:	4641      	mov	r1, r8
 80011d0:	400a      	ands	r2, r1
 80011d2:	0759      	lsls	r1, r3, #29
 80011d4:	d000      	beq.n	80011d8 <__aeabi_fsub+0x180>
 80011d6:	e789      	b.n	80010ec <__aeabi_fsub+0x94>
 80011d8:	e011      	b.n	80011fe <__aeabi_fsub+0x1a6>
 80011da:	4648      	mov	r0, r9
 80011dc:	2800      	cmp	r0, #0
 80011de:	d158      	bne.n	8001292 <__aeabi_fsub+0x23a>
 80011e0:	2cff      	cmp	r4, #255	; 0xff
 80011e2:	d10c      	bne.n	80011fe <__aeabi_fsub+0x1a6>
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x194>
 80011ea:	e78c      	b.n	8001106 <__aeabi_fsub+0xae>
 80011ec:	2080      	movs	r0, #128	; 0x80
 80011ee:	03c0      	lsls	r0, r0, #15
 80011f0:	4303      	orrs	r3, r0
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	0a5b      	lsrs	r3, r3, #9
 80011f6:	24ff      	movs	r4, #255	; 0xff
 80011f8:	e787      	b.n	800110a <__aeabi_fsub+0xb2>
 80011fa:	2cff      	cmp	r4, #255	; 0xff
 80011fc:	d025      	beq.n	800124a <__aeabi_fsub+0x1f2>
 80011fe:	08db      	lsrs	r3, r3, #3
 8001200:	2dff      	cmp	r5, #255	; 0xff
 8001202:	d0f0      	beq.n	80011e6 <__aeabi_fsub+0x18e>
 8001204:	025b      	lsls	r3, r3, #9
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	b2ec      	uxtb	r4, r5
 800120a:	e77e      	b.n	800110a <__aeabi_fsub+0xb2>
 800120c:	2c00      	cmp	r4, #0
 800120e:	d04d      	beq.n	80012ac <__aeabi_fsub+0x254>
 8001210:	28ff      	cmp	r0, #255	; 0xff
 8001212:	d018      	beq.n	8001246 <__aeabi_fsub+0x1ee>
 8001214:	2480      	movs	r4, #128	; 0x80
 8001216:	04e4      	lsls	r4, r4, #19
 8001218:	4272      	negs	r2, r6
 800121a:	4323      	orrs	r3, r4
 800121c:	2a1b      	cmp	r2, #27
 800121e:	dd00      	ble.n	8001222 <__aeabi_fsub+0x1ca>
 8001220:	e0c4      	b.n	80013ac <__aeabi_fsub+0x354>
 8001222:	001c      	movs	r4, r3
 8001224:	2520      	movs	r5, #32
 8001226:	40d4      	lsrs	r4, r2
 8001228:	1aaa      	subs	r2, r5, r2
 800122a:	4093      	lsls	r3, r2
 800122c:	1e5a      	subs	r2, r3, #1
 800122e:	4193      	sbcs	r3, r2
 8001230:	4323      	orrs	r3, r4
 8001232:	464a      	mov	r2, r9
 8001234:	0005      	movs	r5, r0
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	4688      	mov	r8, r1
 800123a:	e738      	b.n	80010ae <__aeabi_fsub+0x56>
 800123c:	1c72      	adds	r2, r6, #1
 800123e:	d0f8      	beq.n	8001232 <__aeabi_fsub+0x1da>
 8001240:	43f2      	mvns	r2, r6
 8001242:	28ff      	cmp	r0, #255	; 0xff
 8001244:	d1ea      	bne.n	800121c <__aeabi_fsub+0x1c4>
 8001246:	000a      	movs	r2, r1
 8001248:	464b      	mov	r3, r9
 800124a:	25ff      	movs	r5, #255	; 0xff
 800124c:	e7d7      	b.n	80011fe <__aeabi_fsub+0x1a6>
 800124e:	019b      	lsls	r3, r3, #6
 8001250:	0a5b      	lsrs	r3, r3, #9
 8001252:	e75a      	b.n	800110a <__aeabi_fsub+0xb2>
 8001254:	2e00      	cmp	r6, #0
 8001256:	d141      	bne.n	80012dc <__aeabi_fsub+0x284>
 8001258:	1c65      	adds	r5, r4, #1
 800125a:	b2e9      	uxtb	r1, r5
 800125c:	2901      	cmp	r1, #1
 800125e:	dd45      	ble.n	80012ec <__aeabi_fsub+0x294>
 8001260:	2dff      	cmp	r5, #255	; 0xff
 8001262:	d100      	bne.n	8001266 <__aeabi_fsub+0x20e>
 8001264:	e74f      	b.n	8001106 <__aeabi_fsub+0xae>
 8001266:	2407      	movs	r4, #7
 8001268:	444b      	add	r3, r9
 800126a:	085b      	lsrs	r3, r3, #1
 800126c:	401c      	ands	r4, r3
 800126e:	e738      	b.n	80010e2 <__aeabi_fsub+0x8a>
 8001270:	2207      	movs	r2, #7
 8001272:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <__aeabi_fsub+0x384>)
 8001274:	1a2d      	subs	r5, r5, r0
 8001276:	4023      	ands	r3, r4
 8001278:	4014      	ands	r4, r2
 800127a:	e732      	b.n	80010e2 <__aeabi_fsub+0x8a>
 800127c:	2c00      	cmp	r4, #0
 800127e:	d11d      	bne.n	80012bc <__aeabi_fsub+0x264>
 8001280:	2b00      	cmp	r3, #0
 8001282:	d17a      	bne.n	800137a <__aeabi_fsub+0x322>
 8001284:	464b      	mov	r3, r9
 8001286:	2b00      	cmp	r3, #0
 8001288:	d100      	bne.n	800128c <__aeabi_fsub+0x234>
 800128a:	e091      	b.n	80013b0 <__aeabi_fsub+0x358>
 800128c:	000a      	movs	r2, r1
 800128e:	2500      	movs	r5, #0
 8001290:	e7b5      	b.n	80011fe <__aeabi_fsub+0x1a6>
 8001292:	3e01      	subs	r6, #1
 8001294:	2e00      	cmp	r6, #0
 8001296:	d119      	bne.n	80012cc <__aeabi_fsub+0x274>
 8001298:	444b      	add	r3, r9
 800129a:	e76c      	b.n	8001176 <__aeabi_fsub+0x11e>
 800129c:	2cff      	cmp	r4, #255	; 0xff
 800129e:	d184      	bne.n	80011aa <__aeabi_fsub+0x152>
 80012a0:	25ff      	movs	r5, #255	; 0xff
 80012a2:	e7ac      	b.n	80011fe <__aeabi_fsub+0x1a6>
 80012a4:	464a      	mov	r2, r9
 80012a6:	4688      	mov	r8, r1
 80012a8:	1ad4      	subs	r4, r2, r3
 80012aa:	e705      	b.n	80010b8 <__aeabi_fsub+0x60>
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1c5      	bne.n	800123c <__aeabi_fsub+0x1e4>
 80012b0:	000a      	movs	r2, r1
 80012b2:	28ff      	cmp	r0, #255	; 0xff
 80012b4:	d0c8      	beq.n	8001248 <__aeabi_fsub+0x1f0>
 80012b6:	0005      	movs	r5, r0
 80012b8:	464b      	mov	r3, r9
 80012ba:	e7a0      	b.n	80011fe <__aeabi_fsub+0x1a6>
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d149      	bne.n	8001354 <__aeabi_fsub+0x2fc>
 80012c0:	464b      	mov	r3, r9
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d077      	beq.n	80013b6 <__aeabi_fsub+0x35e>
 80012c6:	000a      	movs	r2, r1
 80012c8:	25ff      	movs	r5, #255	; 0xff
 80012ca:	e798      	b.n	80011fe <__aeabi_fsub+0x1a6>
 80012cc:	2cff      	cmp	r4, #255	; 0xff
 80012ce:	d000      	beq.n	80012d2 <__aeabi_fsub+0x27a>
 80012d0:	e743      	b.n	800115a <__aeabi_fsub+0x102>
 80012d2:	e787      	b.n	80011e4 <__aeabi_fsub+0x18c>
 80012d4:	000a      	movs	r2, r1
 80012d6:	24ff      	movs	r4, #255	; 0xff
 80012d8:	2300      	movs	r3, #0
 80012da:	e716      	b.n	800110a <__aeabi_fsub+0xb2>
 80012dc:	2c00      	cmp	r4, #0
 80012de:	d115      	bne.n	800130c <__aeabi_fsub+0x2b4>
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d157      	bne.n	8001394 <__aeabi_fsub+0x33c>
 80012e4:	28ff      	cmp	r0, #255	; 0xff
 80012e6:	d1e6      	bne.n	80012b6 <__aeabi_fsub+0x25e>
 80012e8:	464b      	mov	r3, r9
 80012ea:	e77b      	b.n	80011e4 <__aeabi_fsub+0x18c>
 80012ec:	2c00      	cmp	r4, #0
 80012ee:	d120      	bne.n	8001332 <__aeabi_fsub+0x2da>
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d057      	beq.n	80013a4 <__aeabi_fsub+0x34c>
 80012f4:	4649      	mov	r1, r9
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d053      	beq.n	80013a2 <__aeabi_fsub+0x34a>
 80012fa:	444b      	add	r3, r9
 80012fc:	015a      	lsls	r2, r3, #5
 80012fe:	d568      	bpl.n	80013d2 <__aeabi_fsub+0x37a>
 8001300:	2407      	movs	r4, #7
 8001302:	4a36      	ldr	r2, [pc, #216]	; (80013dc <__aeabi_fsub+0x384>)
 8001304:	401c      	ands	r4, r3
 8001306:	2501      	movs	r5, #1
 8001308:	4013      	ands	r3, r2
 800130a:	e6ea      	b.n	80010e2 <__aeabi_fsub+0x8a>
 800130c:	28ff      	cmp	r0, #255	; 0xff
 800130e:	d0eb      	beq.n	80012e8 <__aeabi_fsub+0x290>
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	04d2      	lsls	r2, r2, #19
 8001314:	4276      	negs	r6, r6
 8001316:	4313      	orrs	r3, r2
 8001318:	2e1b      	cmp	r6, #27
 800131a:	dc53      	bgt.n	80013c4 <__aeabi_fsub+0x36c>
 800131c:	2520      	movs	r5, #32
 800131e:	1bad      	subs	r5, r5, r6
 8001320:	001a      	movs	r2, r3
 8001322:	40ab      	lsls	r3, r5
 8001324:	40f2      	lsrs	r2, r6
 8001326:	1e5c      	subs	r4, r3, #1
 8001328:	41a3      	sbcs	r3, r4
 800132a:	4313      	orrs	r3, r2
 800132c:	444b      	add	r3, r9
 800132e:	0005      	movs	r5, r0
 8001330:	e721      	b.n	8001176 <__aeabi_fsub+0x11e>
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0d8      	beq.n	80012e8 <__aeabi_fsub+0x290>
 8001336:	4649      	mov	r1, r9
 8001338:	2900      	cmp	r1, #0
 800133a:	d100      	bne.n	800133e <__aeabi_fsub+0x2e6>
 800133c:	e752      	b.n	80011e4 <__aeabi_fsub+0x18c>
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	03c9      	lsls	r1, r1, #15
 8001342:	420f      	tst	r7, r1
 8001344:	d100      	bne.n	8001348 <__aeabi_fsub+0x2f0>
 8001346:	e74d      	b.n	80011e4 <__aeabi_fsub+0x18c>
 8001348:	4660      	mov	r0, ip
 800134a:	4208      	tst	r0, r1
 800134c:	d000      	beq.n	8001350 <__aeabi_fsub+0x2f8>
 800134e:	e749      	b.n	80011e4 <__aeabi_fsub+0x18c>
 8001350:	464b      	mov	r3, r9
 8001352:	e747      	b.n	80011e4 <__aeabi_fsub+0x18c>
 8001354:	4648      	mov	r0, r9
 8001356:	25ff      	movs	r5, #255	; 0xff
 8001358:	2800      	cmp	r0, #0
 800135a:	d100      	bne.n	800135e <__aeabi_fsub+0x306>
 800135c:	e74f      	b.n	80011fe <__aeabi_fsub+0x1a6>
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	03d2      	lsls	r2, r2, #15
 8001362:	4217      	tst	r7, r2
 8001364:	d004      	beq.n	8001370 <__aeabi_fsub+0x318>
 8001366:	4660      	mov	r0, ip
 8001368:	4210      	tst	r0, r2
 800136a:	d101      	bne.n	8001370 <__aeabi_fsub+0x318>
 800136c:	464b      	mov	r3, r9
 800136e:	4688      	mov	r8, r1
 8001370:	2201      	movs	r2, #1
 8001372:	4641      	mov	r1, r8
 8001374:	25ff      	movs	r5, #255	; 0xff
 8001376:	400a      	ands	r2, r1
 8001378:	e741      	b.n	80011fe <__aeabi_fsub+0x1a6>
 800137a:	4648      	mov	r0, r9
 800137c:	2800      	cmp	r0, #0
 800137e:	d01f      	beq.n	80013c0 <__aeabi_fsub+0x368>
 8001380:	1a1a      	subs	r2, r3, r0
 8001382:	0150      	lsls	r0, r2, #5
 8001384:	d520      	bpl.n	80013c8 <__aeabi_fsub+0x370>
 8001386:	464a      	mov	r2, r9
 8001388:	2407      	movs	r4, #7
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	401c      	ands	r4, r3
 800138e:	4688      	mov	r8, r1
 8001390:	2500      	movs	r5, #0
 8001392:	e6a6      	b.n	80010e2 <__aeabi_fsub+0x8a>
 8001394:	1c74      	adds	r4, r6, #1
 8001396:	d0c9      	beq.n	800132c <__aeabi_fsub+0x2d4>
 8001398:	43f6      	mvns	r6, r6
 800139a:	28ff      	cmp	r0, #255	; 0xff
 800139c:	d1bc      	bne.n	8001318 <__aeabi_fsub+0x2c0>
 800139e:	464b      	mov	r3, r9
 80013a0:	e720      	b.n	80011e4 <__aeabi_fsub+0x18c>
 80013a2:	4699      	mov	r9, r3
 80013a4:	464b      	mov	r3, r9
 80013a6:	2500      	movs	r5, #0
 80013a8:	08db      	lsrs	r3, r3, #3
 80013aa:	e72b      	b.n	8001204 <__aeabi_fsub+0x1ac>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e740      	b.n	8001232 <__aeabi_fsub+0x1da>
 80013b0:	2200      	movs	r2, #0
 80013b2:	2300      	movs	r3, #0
 80013b4:	e6a9      	b.n	800110a <__aeabi_fsub+0xb2>
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	2200      	movs	r2, #0
 80013ba:	03db      	lsls	r3, r3, #15
 80013bc:	24ff      	movs	r4, #255	; 0xff
 80013be:	e6a4      	b.n	800110a <__aeabi_fsub+0xb2>
 80013c0:	2500      	movs	r5, #0
 80013c2:	e71c      	b.n	80011fe <__aeabi_fsub+0x1a6>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e7b1      	b.n	800132c <__aeabi_fsub+0x2d4>
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	d0f1      	beq.n	80013b0 <__aeabi_fsub+0x358>
 80013cc:	0013      	movs	r3, r2
 80013ce:	2500      	movs	r5, #0
 80013d0:	e6fc      	b.n	80011cc <__aeabi_fsub+0x174>
 80013d2:	2500      	movs	r5, #0
 80013d4:	e6fa      	b.n	80011cc <__aeabi_fsub+0x174>
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	7dffffff 	.word	0x7dffffff
 80013dc:	fbffffff 	.word	0xfbffffff

080013e0 <__aeabi_f2iz>:
 80013e0:	0241      	lsls	r1, r0, #9
 80013e2:	0042      	lsls	r2, r0, #1
 80013e4:	0fc3      	lsrs	r3, r0, #31
 80013e6:	0a49      	lsrs	r1, r1, #9
 80013e8:	0e12      	lsrs	r2, r2, #24
 80013ea:	2000      	movs	r0, #0
 80013ec:	2a7e      	cmp	r2, #126	; 0x7e
 80013ee:	d90d      	bls.n	800140c <__aeabi_f2iz+0x2c>
 80013f0:	2a9d      	cmp	r2, #157	; 0x9d
 80013f2:	d80c      	bhi.n	800140e <__aeabi_f2iz+0x2e>
 80013f4:	2080      	movs	r0, #128	; 0x80
 80013f6:	0400      	lsls	r0, r0, #16
 80013f8:	4301      	orrs	r1, r0
 80013fa:	2a95      	cmp	r2, #149	; 0x95
 80013fc:	dc0a      	bgt.n	8001414 <__aeabi_f2iz+0x34>
 80013fe:	2096      	movs	r0, #150	; 0x96
 8001400:	1a82      	subs	r2, r0, r2
 8001402:	40d1      	lsrs	r1, r2
 8001404:	4248      	negs	r0, r1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d100      	bne.n	800140c <__aeabi_f2iz+0x2c>
 800140a:	0008      	movs	r0, r1
 800140c:	4770      	bx	lr
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <__aeabi_f2iz+0x3c>)
 8001410:	1898      	adds	r0, r3, r2
 8001412:	e7fb      	b.n	800140c <__aeabi_f2iz+0x2c>
 8001414:	3a96      	subs	r2, #150	; 0x96
 8001416:	4091      	lsls	r1, r2
 8001418:	e7f4      	b.n	8001404 <__aeabi_f2iz+0x24>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	7fffffff 	.word	0x7fffffff

08001420 <__aeabi_i2f>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	2800      	cmp	r0, #0
 8001424:	d03d      	beq.n	80014a2 <__aeabi_i2f+0x82>
 8001426:	17c3      	asrs	r3, r0, #31
 8001428:	18c5      	adds	r5, r0, r3
 800142a:	405d      	eors	r5, r3
 800142c:	0fc4      	lsrs	r4, r0, #31
 800142e:	0028      	movs	r0, r5
 8001430:	f001 fec2 	bl	80031b8 <__clzsi2>
 8001434:	229e      	movs	r2, #158	; 0x9e
 8001436:	1a12      	subs	r2, r2, r0
 8001438:	2a96      	cmp	r2, #150	; 0x96
 800143a:	dc07      	bgt.n	800144c <__aeabi_i2f+0x2c>
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	2808      	cmp	r0, #8
 8001440:	dd33      	ble.n	80014aa <__aeabi_i2f+0x8a>
 8001442:	3808      	subs	r0, #8
 8001444:	4085      	lsls	r5, r0
 8001446:	0268      	lsls	r0, r5, #9
 8001448:	0a40      	lsrs	r0, r0, #9
 800144a:	e023      	b.n	8001494 <__aeabi_i2f+0x74>
 800144c:	2a99      	cmp	r2, #153	; 0x99
 800144e:	dd0b      	ble.n	8001468 <__aeabi_i2f+0x48>
 8001450:	2305      	movs	r3, #5
 8001452:	0029      	movs	r1, r5
 8001454:	1a1b      	subs	r3, r3, r0
 8001456:	40d9      	lsrs	r1, r3
 8001458:	0003      	movs	r3, r0
 800145a:	331b      	adds	r3, #27
 800145c:	409d      	lsls	r5, r3
 800145e:	002b      	movs	r3, r5
 8001460:	1e5d      	subs	r5, r3, #1
 8001462:	41ab      	sbcs	r3, r5
 8001464:	4319      	orrs	r1, r3
 8001466:	000d      	movs	r5, r1
 8001468:	2805      	cmp	r0, #5
 800146a:	dd01      	ble.n	8001470 <__aeabi_i2f+0x50>
 800146c:	1f43      	subs	r3, r0, #5
 800146e:	409d      	lsls	r5, r3
 8001470:	002b      	movs	r3, r5
 8001472:	490f      	ldr	r1, [pc, #60]	; (80014b0 <__aeabi_i2f+0x90>)
 8001474:	400b      	ands	r3, r1
 8001476:	076e      	lsls	r6, r5, #29
 8001478:	d009      	beq.n	800148e <__aeabi_i2f+0x6e>
 800147a:	260f      	movs	r6, #15
 800147c:	4035      	ands	r5, r6
 800147e:	2d04      	cmp	r5, #4
 8001480:	d005      	beq.n	800148e <__aeabi_i2f+0x6e>
 8001482:	3304      	adds	r3, #4
 8001484:	015d      	lsls	r5, r3, #5
 8001486:	d502      	bpl.n	800148e <__aeabi_i2f+0x6e>
 8001488:	229f      	movs	r2, #159	; 0x9f
 800148a:	400b      	ands	r3, r1
 800148c:	1a12      	subs	r2, r2, r0
 800148e:	019b      	lsls	r3, r3, #6
 8001490:	0a58      	lsrs	r0, r3, #9
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	0240      	lsls	r0, r0, #9
 8001496:	05d2      	lsls	r2, r2, #23
 8001498:	0a40      	lsrs	r0, r0, #9
 800149a:	07e4      	lsls	r4, r4, #31
 800149c:	4310      	orrs	r0, r2
 800149e:	4320      	orrs	r0, r4
 80014a0:	bd70      	pop	{r4, r5, r6, pc}
 80014a2:	2400      	movs	r4, #0
 80014a4:	2200      	movs	r2, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	e7f4      	b.n	8001494 <__aeabi_i2f+0x74>
 80014aa:	0268      	lsls	r0, r5, #9
 80014ac:	0a40      	lsrs	r0, r0, #9
 80014ae:	e7f1      	b.n	8001494 <__aeabi_i2f+0x74>
 80014b0:	fbffffff 	.word	0xfbffffff

080014b4 <__aeabi_ui2f>:
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	1e04      	subs	r4, r0, #0
 80014b8:	d034      	beq.n	8001524 <__aeabi_ui2f+0x70>
 80014ba:	f001 fe7d 	bl	80031b8 <__clzsi2>
 80014be:	229e      	movs	r2, #158	; 0x9e
 80014c0:	1a12      	subs	r2, r2, r0
 80014c2:	2a96      	cmp	r2, #150	; 0x96
 80014c4:	dc07      	bgt.n	80014d6 <__aeabi_ui2f+0x22>
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	2808      	cmp	r0, #8
 80014ca:	dd2e      	ble.n	800152a <__aeabi_ui2f+0x76>
 80014cc:	3808      	subs	r0, #8
 80014ce:	4084      	lsls	r4, r0
 80014d0:	0260      	lsls	r0, r4, #9
 80014d2:	0a40      	lsrs	r0, r0, #9
 80014d4:	e021      	b.n	800151a <__aeabi_ui2f+0x66>
 80014d6:	2a99      	cmp	r2, #153	; 0x99
 80014d8:	dd09      	ble.n	80014ee <__aeabi_ui2f+0x3a>
 80014da:	0003      	movs	r3, r0
 80014dc:	0021      	movs	r1, r4
 80014de:	331b      	adds	r3, #27
 80014e0:	4099      	lsls	r1, r3
 80014e2:	1e4b      	subs	r3, r1, #1
 80014e4:	4199      	sbcs	r1, r3
 80014e6:	2305      	movs	r3, #5
 80014e8:	1a1b      	subs	r3, r3, r0
 80014ea:	40dc      	lsrs	r4, r3
 80014ec:	430c      	orrs	r4, r1
 80014ee:	2805      	cmp	r0, #5
 80014f0:	dd01      	ble.n	80014f6 <__aeabi_ui2f+0x42>
 80014f2:	1f43      	subs	r3, r0, #5
 80014f4:	409c      	lsls	r4, r3
 80014f6:	0023      	movs	r3, r4
 80014f8:	490d      	ldr	r1, [pc, #52]	; (8001530 <__aeabi_ui2f+0x7c>)
 80014fa:	400b      	ands	r3, r1
 80014fc:	0765      	lsls	r5, r4, #29
 80014fe:	d009      	beq.n	8001514 <__aeabi_ui2f+0x60>
 8001500:	250f      	movs	r5, #15
 8001502:	402c      	ands	r4, r5
 8001504:	2c04      	cmp	r4, #4
 8001506:	d005      	beq.n	8001514 <__aeabi_ui2f+0x60>
 8001508:	3304      	adds	r3, #4
 800150a:	015c      	lsls	r4, r3, #5
 800150c:	d502      	bpl.n	8001514 <__aeabi_ui2f+0x60>
 800150e:	229f      	movs	r2, #159	; 0x9f
 8001510:	400b      	ands	r3, r1
 8001512:	1a12      	subs	r2, r2, r0
 8001514:	019b      	lsls	r3, r3, #6
 8001516:	0a58      	lsrs	r0, r3, #9
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	0240      	lsls	r0, r0, #9
 800151c:	05d2      	lsls	r2, r2, #23
 800151e:	0a40      	lsrs	r0, r0, #9
 8001520:	4310      	orrs	r0, r2
 8001522:	bd70      	pop	{r4, r5, r6, pc}
 8001524:	2200      	movs	r2, #0
 8001526:	2000      	movs	r0, #0
 8001528:	e7f7      	b.n	800151a <__aeabi_ui2f+0x66>
 800152a:	0260      	lsls	r0, r4, #9
 800152c:	0a40      	lsrs	r0, r0, #9
 800152e:	e7f4      	b.n	800151a <__aeabi_ui2f+0x66>
 8001530:	fbffffff 	.word	0xfbffffff

08001534 <__aeabi_dadd>:
 8001534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001536:	464f      	mov	r7, r9
 8001538:	4646      	mov	r6, r8
 800153a:	46d6      	mov	lr, sl
 800153c:	000c      	movs	r4, r1
 800153e:	0309      	lsls	r1, r1, #12
 8001540:	b5c0      	push	{r6, r7, lr}
 8001542:	0a49      	lsrs	r1, r1, #9
 8001544:	0f47      	lsrs	r7, r0, #29
 8001546:	005e      	lsls	r6, r3, #1
 8001548:	4339      	orrs	r1, r7
 800154a:	031f      	lsls	r7, r3, #12
 800154c:	0fdb      	lsrs	r3, r3, #31
 800154e:	469c      	mov	ip, r3
 8001550:	0065      	lsls	r5, r4, #1
 8001552:	0a7b      	lsrs	r3, r7, #9
 8001554:	0f57      	lsrs	r7, r2, #29
 8001556:	431f      	orrs	r7, r3
 8001558:	0d6d      	lsrs	r5, r5, #21
 800155a:	0fe4      	lsrs	r4, r4, #31
 800155c:	0d76      	lsrs	r6, r6, #21
 800155e:	46a1      	mov	r9, r4
 8001560:	00c0      	lsls	r0, r0, #3
 8001562:	46b8      	mov	r8, r7
 8001564:	00d2      	lsls	r2, r2, #3
 8001566:	1bab      	subs	r3, r5, r6
 8001568:	4564      	cmp	r4, ip
 800156a:	d07b      	beq.n	8001664 <__aeabi_dadd+0x130>
 800156c:	2b00      	cmp	r3, #0
 800156e:	dd5f      	ble.n	8001630 <__aeabi_dadd+0xfc>
 8001570:	2e00      	cmp	r6, #0
 8001572:	d000      	beq.n	8001576 <__aeabi_dadd+0x42>
 8001574:	e0a4      	b.n	80016c0 <__aeabi_dadd+0x18c>
 8001576:	003e      	movs	r6, r7
 8001578:	4316      	orrs	r6, r2
 800157a:	d100      	bne.n	800157e <__aeabi_dadd+0x4a>
 800157c:	e112      	b.n	80017a4 <__aeabi_dadd+0x270>
 800157e:	1e5e      	subs	r6, r3, #1
 8001580:	2e00      	cmp	r6, #0
 8001582:	d000      	beq.n	8001586 <__aeabi_dadd+0x52>
 8001584:	e19e      	b.n	80018c4 <__aeabi_dadd+0x390>
 8001586:	1a87      	subs	r7, r0, r2
 8001588:	4643      	mov	r3, r8
 800158a:	42b8      	cmp	r0, r7
 800158c:	4180      	sbcs	r0, r0
 800158e:	2501      	movs	r5, #1
 8001590:	1ac9      	subs	r1, r1, r3
 8001592:	4240      	negs	r0, r0
 8001594:	1a09      	subs	r1, r1, r0
 8001596:	020b      	lsls	r3, r1, #8
 8001598:	d400      	bmi.n	800159c <__aeabi_dadd+0x68>
 800159a:	e131      	b.n	8001800 <__aeabi_dadd+0x2cc>
 800159c:	0249      	lsls	r1, r1, #9
 800159e:	0a4e      	lsrs	r6, r1, #9
 80015a0:	2e00      	cmp	r6, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dadd+0x72>
 80015a4:	e16e      	b.n	8001884 <__aeabi_dadd+0x350>
 80015a6:	0030      	movs	r0, r6
 80015a8:	f001 fe06 	bl	80031b8 <__clzsi2>
 80015ac:	0003      	movs	r3, r0
 80015ae:	3b08      	subs	r3, #8
 80015b0:	2b1f      	cmp	r3, #31
 80015b2:	dd00      	ble.n	80015b6 <__aeabi_dadd+0x82>
 80015b4:	e161      	b.n	800187a <__aeabi_dadd+0x346>
 80015b6:	2220      	movs	r2, #32
 80015b8:	0039      	movs	r1, r7
 80015ba:	1ad2      	subs	r2, r2, r3
 80015bc:	409e      	lsls	r6, r3
 80015be:	40d1      	lsrs	r1, r2
 80015c0:	409f      	lsls	r7, r3
 80015c2:	430e      	orrs	r6, r1
 80015c4:	429d      	cmp	r5, r3
 80015c6:	dd00      	ble.n	80015ca <__aeabi_dadd+0x96>
 80015c8:	e151      	b.n	800186e <__aeabi_dadd+0x33a>
 80015ca:	1b5d      	subs	r5, r3, r5
 80015cc:	1c6b      	adds	r3, r5, #1
 80015ce:	2b1f      	cmp	r3, #31
 80015d0:	dd00      	ble.n	80015d4 <__aeabi_dadd+0xa0>
 80015d2:	e17c      	b.n	80018ce <__aeabi_dadd+0x39a>
 80015d4:	2120      	movs	r1, #32
 80015d6:	1ac9      	subs	r1, r1, r3
 80015d8:	003d      	movs	r5, r7
 80015da:	0030      	movs	r0, r6
 80015dc:	408f      	lsls	r7, r1
 80015de:	4088      	lsls	r0, r1
 80015e0:	40dd      	lsrs	r5, r3
 80015e2:	1e79      	subs	r1, r7, #1
 80015e4:	418f      	sbcs	r7, r1
 80015e6:	0031      	movs	r1, r6
 80015e8:	2207      	movs	r2, #7
 80015ea:	4328      	orrs	r0, r5
 80015ec:	40d9      	lsrs	r1, r3
 80015ee:	2500      	movs	r5, #0
 80015f0:	4307      	orrs	r7, r0
 80015f2:	403a      	ands	r2, r7
 80015f4:	2a00      	cmp	r2, #0
 80015f6:	d009      	beq.n	800160c <__aeabi_dadd+0xd8>
 80015f8:	230f      	movs	r3, #15
 80015fa:	403b      	ands	r3, r7
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d005      	beq.n	800160c <__aeabi_dadd+0xd8>
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	42bb      	cmp	r3, r7
 8001604:	41bf      	sbcs	r7, r7
 8001606:	427f      	negs	r7, r7
 8001608:	19c9      	adds	r1, r1, r7
 800160a:	001f      	movs	r7, r3
 800160c:	020b      	lsls	r3, r1, #8
 800160e:	d400      	bmi.n	8001612 <__aeabi_dadd+0xde>
 8001610:	e226      	b.n	8001a60 <__aeabi_dadd+0x52c>
 8001612:	1c6a      	adds	r2, r5, #1
 8001614:	4bc6      	ldr	r3, [pc, #792]	; (8001930 <__aeabi_dadd+0x3fc>)
 8001616:	0555      	lsls	r5, r2, #21
 8001618:	0d6d      	lsrs	r5, r5, #21
 800161a:	429a      	cmp	r2, r3
 800161c:	d100      	bne.n	8001620 <__aeabi_dadd+0xec>
 800161e:	e106      	b.n	800182e <__aeabi_dadd+0x2fa>
 8001620:	4ac4      	ldr	r2, [pc, #784]	; (8001934 <__aeabi_dadd+0x400>)
 8001622:	08ff      	lsrs	r7, r7, #3
 8001624:	400a      	ands	r2, r1
 8001626:	0753      	lsls	r3, r2, #29
 8001628:	0252      	lsls	r2, r2, #9
 800162a:	433b      	orrs	r3, r7
 800162c:	0b12      	lsrs	r2, r2, #12
 800162e:	e08e      	b.n	800174e <__aeabi_dadd+0x21a>
 8001630:	2b00      	cmp	r3, #0
 8001632:	d000      	beq.n	8001636 <__aeabi_dadd+0x102>
 8001634:	e0b8      	b.n	80017a8 <__aeabi_dadd+0x274>
 8001636:	1c6b      	adds	r3, r5, #1
 8001638:	055b      	lsls	r3, r3, #21
 800163a:	0d5b      	lsrs	r3, r3, #21
 800163c:	2b01      	cmp	r3, #1
 800163e:	dc00      	bgt.n	8001642 <__aeabi_dadd+0x10e>
 8001640:	e130      	b.n	80018a4 <__aeabi_dadd+0x370>
 8001642:	1a87      	subs	r7, r0, r2
 8001644:	4643      	mov	r3, r8
 8001646:	42b8      	cmp	r0, r7
 8001648:	41b6      	sbcs	r6, r6
 800164a:	1acb      	subs	r3, r1, r3
 800164c:	4276      	negs	r6, r6
 800164e:	1b9e      	subs	r6, r3, r6
 8001650:	0233      	lsls	r3, r6, #8
 8001652:	d500      	bpl.n	8001656 <__aeabi_dadd+0x122>
 8001654:	e14c      	b.n	80018f0 <__aeabi_dadd+0x3bc>
 8001656:	003b      	movs	r3, r7
 8001658:	4333      	orrs	r3, r6
 800165a:	d1a1      	bne.n	80015a0 <__aeabi_dadd+0x6c>
 800165c:	2200      	movs	r2, #0
 800165e:	2400      	movs	r4, #0
 8001660:	2500      	movs	r5, #0
 8001662:	e070      	b.n	8001746 <__aeabi_dadd+0x212>
 8001664:	2b00      	cmp	r3, #0
 8001666:	dc00      	bgt.n	800166a <__aeabi_dadd+0x136>
 8001668:	e0e5      	b.n	8001836 <__aeabi_dadd+0x302>
 800166a:	2e00      	cmp	r6, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dadd+0x13c>
 800166e:	e083      	b.n	8001778 <__aeabi_dadd+0x244>
 8001670:	4eaf      	ldr	r6, [pc, #700]	; (8001930 <__aeabi_dadd+0x3fc>)
 8001672:	42b5      	cmp	r5, r6
 8001674:	d060      	beq.n	8001738 <__aeabi_dadd+0x204>
 8001676:	2680      	movs	r6, #128	; 0x80
 8001678:	0436      	lsls	r6, r6, #16
 800167a:	4337      	orrs	r7, r6
 800167c:	46b8      	mov	r8, r7
 800167e:	2b38      	cmp	r3, #56	; 0x38
 8001680:	dc00      	bgt.n	8001684 <__aeabi_dadd+0x150>
 8001682:	e13e      	b.n	8001902 <__aeabi_dadd+0x3ce>
 8001684:	4643      	mov	r3, r8
 8001686:	4313      	orrs	r3, r2
 8001688:	001f      	movs	r7, r3
 800168a:	1e7a      	subs	r2, r7, #1
 800168c:	4197      	sbcs	r7, r2
 800168e:	183f      	adds	r7, r7, r0
 8001690:	4287      	cmp	r7, r0
 8001692:	4180      	sbcs	r0, r0
 8001694:	4240      	negs	r0, r0
 8001696:	1809      	adds	r1, r1, r0
 8001698:	020b      	lsls	r3, r1, #8
 800169a:	d400      	bmi.n	800169e <__aeabi_dadd+0x16a>
 800169c:	e0b0      	b.n	8001800 <__aeabi_dadd+0x2cc>
 800169e:	4ba4      	ldr	r3, [pc, #656]	; (8001930 <__aeabi_dadd+0x3fc>)
 80016a0:	3501      	adds	r5, #1
 80016a2:	429d      	cmp	r5, r3
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dadd+0x174>
 80016a6:	e0c3      	b.n	8001830 <__aeabi_dadd+0x2fc>
 80016a8:	4aa2      	ldr	r2, [pc, #648]	; (8001934 <__aeabi_dadd+0x400>)
 80016aa:	087b      	lsrs	r3, r7, #1
 80016ac:	400a      	ands	r2, r1
 80016ae:	2101      	movs	r1, #1
 80016b0:	400f      	ands	r7, r1
 80016b2:	431f      	orrs	r7, r3
 80016b4:	0851      	lsrs	r1, r2, #1
 80016b6:	07d3      	lsls	r3, r2, #31
 80016b8:	2207      	movs	r2, #7
 80016ba:	431f      	orrs	r7, r3
 80016bc:	403a      	ands	r2, r7
 80016be:	e799      	b.n	80015f4 <__aeabi_dadd+0xc0>
 80016c0:	4e9b      	ldr	r6, [pc, #620]	; (8001930 <__aeabi_dadd+0x3fc>)
 80016c2:	42b5      	cmp	r5, r6
 80016c4:	d038      	beq.n	8001738 <__aeabi_dadd+0x204>
 80016c6:	2680      	movs	r6, #128	; 0x80
 80016c8:	0436      	lsls	r6, r6, #16
 80016ca:	4337      	orrs	r7, r6
 80016cc:	46b8      	mov	r8, r7
 80016ce:	2b38      	cmp	r3, #56	; 0x38
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dadd+0x1a0>
 80016d2:	e0dc      	b.n	800188e <__aeabi_dadd+0x35a>
 80016d4:	2b1f      	cmp	r3, #31
 80016d6:	dc00      	bgt.n	80016da <__aeabi_dadd+0x1a6>
 80016d8:	e130      	b.n	800193c <__aeabi_dadd+0x408>
 80016da:	001e      	movs	r6, r3
 80016dc:	4647      	mov	r7, r8
 80016de:	3e20      	subs	r6, #32
 80016e0:	40f7      	lsrs	r7, r6
 80016e2:	46bc      	mov	ip, r7
 80016e4:	2b20      	cmp	r3, #32
 80016e6:	d004      	beq.n	80016f2 <__aeabi_dadd+0x1be>
 80016e8:	2640      	movs	r6, #64	; 0x40
 80016ea:	1af3      	subs	r3, r6, r3
 80016ec:	4646      	mov	r6, r8
 80016ee:	409e      	lsls	r6, r3
 80016f0:	4332      	orrs	r2, r6
 80016f2:	0017      	movs	r7, r2
 80016f4:	4663      	mov	r3, ip
 80016f6:	1e7a      	subs	r2, r7, #1
 80016f8:	4197      	sbcs	r7, r2
 80016fa:	431f      	orrs	r7, r3
 80016fc:	e0cc      	b.n	8001898 <__aeabi_dadd+0x364>
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x1d0>
 8001702:	e204      	b.n	8001b0e <__aeabi_dadd+0x5da>
 8001704:	4643      	mov	r3, r8
 8001706:	4313      	orrs	r3, r2
 8001708:	d100      	bne.n	800170c <__aeabi_dadd+0x1d8>
 800170a:	e159      	b.n	80019c0 <__aeabi_dadd+0x48c>
 800170c:	074b      	lsls	r3, r1, #29
 800170e:	08c0      	lsrs	r0, r0, #3
 8001710:	4318      	orrs	r0, r3
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	08c9      	lsrs	r1, r1, #3
 8001716:	031b      	lsls	r3, r3, #12
 8001718:	4219      	tst	r1, r3
 800171a:	d008      	beq.n	800172e <__aeabi_dadd+0x1fa>
 800171c:	4645      	mov	r5, r8
 800171e:	08ed      	lsrs	r5, r5, #3
 8001720:	421d      	tst	r5, r3
 8001722:	d104      	bne.n	800172e <__aeabi_dadd+0x1fa>
 8001724:	4643      	mov	r3, r8
 8001726:	08d0      	lsrs	r0, r2, #3
 8001728:	0759      	lsls	r1, r3, #29
 800172a:	4308      	orrs	r0, r1
 800172c:	0029      	movs	r1, r5
 800172e:	0f42      	lsrs	r2, r0, #29
 8001730:	00c9      	lsls	r1, r1, #3
 8001732:	4d7f      	ldr	r5, [pc, #508]	; (8001930 <__aeabi_dadd+0x3fc>)
 8001734:	4311      	orrs	r1, r2
 8001736:	00c0      	lsls	r0, r0, #3
 8001738:	074b      	lsls	r3, r1, #29
 800173a:	08ca      	lsrs	r2, r1, #3
 800173c:	497c      	ldr	r1, [pc, #496]	; (8001930 <__aeabi_dadd+0x3fc>)
 800173e:	08c0      	lsrs	r0, r0, #3
 8001740:	4303      	orrs	r3, r0
 8001742:	428d      	cmp	r5, r1
 8001744:	d068      	beq.n	8001818 <__aeabi_dadd+0x2e4>
 8001746:	0312      	lsls	r2, r2, #12
 8001748:	056d      	lsls	r5, r5, #21
 800174a:	0b12      	lsrs	r2, r2, #12
 800174c:	0d6d      	lsrs	r5, r5, #21
 800174e:	2100      	movs	r1, #0
 8001750:	0312      	lsls	r2, r2, #12
 8001752:	0018      	movs	r0, r3
 8001754:	0b13      	lsrs	r3, r2, #12
 8001756:	0d0a      	lsrs	r2, r1, #20
 8001758:	0512      	lsls	r2, r2, #20
 800175a:	431a      	orrs	r2, r3
 800175c:	4b76      	ldr	r3, [pc, #472]	; (8001938 <__aeabi_dadd+0x404>)
 800175e:	052d      	lsls	r5, r5, #20
 8001760:	4013      	ands	r3, r2
 8001762:	432b      	orrs	r3, r5
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	07e4      	lsls	r4, r4, #31
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	4323      	orrs	r3, r4
 800176c:	0019      	movs	r1, r3
 800176e:	bc1c      	pop	{r2, r3, r4}
 8001770:	4690      	mov	r8, r2
 8001772:	4699      	mov	r9, r3
 8001774:	46a2      	mov	sl, r4
 8001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001778:	003e      	movs	r6, r7
 800177a:	4316      	orrs	r6, r2
 800177c:	d012      	beq.n	80017a4 <__aeabi_dadd+0x270>
 800177e:	1e5e      	subs	r6, r3, #1
 8001780:	2e00      	cmp	r6, #0
 8001782:	d000      	beq.n	8001786 <__aeabi_dadd+0x252>
 8001784:	e100      	b.n	8001988 <__aeabi_dadd+0x454>
 8001786:	1887      	adds	r7, r0, r2
 8001788:	4287      	cmp	r7, r0
 800178a:	4180      	sbcs	r0, r0
 800178c:	4441      	add	r1, r8
 800178e:	4240      	negs	r0, r0
 8001790:	1809      	adds	r1, r1, r0
 8001792:	2501      	movs	r5, #1
 8001794:	020b      	lsls	r3, r1, #8
 8001796:	d533      	bpl.n	8001800 <__aeabi_dadd+0x2cc>
 8001798:	2502      	movs	r5, #2
 800179a:	e785      	b.n	80016a8 <__aeabi_dadd+0x174>
 800179c:	4664      	mov	r4, ip
 800179e:	0033      	movs	r3, r6
 80017a0:	4641      	mov	r1, r8
 80017a2:	0010      	movs	r0, r2
 80017a4:	001d      	movs	r5, r3
 80017a6:	e7c7      	b.n	8001738 <__aeabi_dadd+0x204>
 80017a8:	2d00      	cmp	r5, #0
 80017aa:	d000      	beq.n	80017ae <__aeabi_dadd+0x27a>
 80017ac:	e0da      	b.n	8001964 <__aeabi_dadd+0x430>
 80017ae:	000c      	movs	r4, r1
 80017b0:	4304      	orrs	r4, r0
 80017b2:	d0f3      	beq.n	800179c <__aeabi_dadd+0x268>
 80017b4:	1c5c      	adds	r4, r3, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x286>
 80017b8:	e19f      	b.n	8001afa <__aeabi_dadd+0x5c6>
 80017ba:	4c5d      	ldr	r4, [pc, #372]	; (8001930 <__aeabi_dadd+0x3fc>)
 80017bc:	42a6      	cmp	r6, r4
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x28e>
 80017c0:	e12f      	b.n	8001a22 <__aeabi_dadd+0x4ee>
 80017c2:	43db      	mvns	r3, r3
 80017c4:	2b38      	cmp	r3, #56	; 0x38
 80017c6:	dd00      	ble.n	80017ca <__aeabi_dadd+0x296>
 80017c8:	e166      	b.n	8001a98 <__aeabi_dadd+0x564>
 80017ca:	2b1f      	cmp	r3, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x29c>
 80017ce:	e183      	b.n	8001ad8 <__aeabi_dadd+0x5a4>
 80017d0:	2420      	movs	r4, #32
 80017d2:	0005      	movs	r5, r0
 80017d4:	1ae4      	subs	r4, r4, r3
 80017d6:	000f      	movs	r7, r1
 80017d8:	40dd      	lsrs	r5, r3
 80017da:	40d9      	lsrs	r1, r3
 80017dc:	40a0      	lsls	r0, r4
 80017de:	4643      	mov	r3, r8
 80017e0:	40a7      	lsls	r7, r4
 80017e2:	1a5b      	subs	r3, r3, r1
 80017e4:	1e44      	subs	r4, r0, #1
 80017e6:	41a0      	sbcs	r0, r4
 80017e8:	4698      	mov	r8, r3
 80017ea:	432f      	orrs	r7, r5
 80017ec:	4338      	orrs	r0, r7
 80017ee:	1a17      	subs	r7, r2, r0
 80017f0:	42ba      	cmp	r2, r7
 80017f2:	4192      	sbcs	r2, r2
 80017f4:	4643      	mov	r3, r8
 80017f6:	4252      	negs	r2, r2
 80017f8:	1a99      	subs	r1, r3, r2
 80017fa:	4664      	mov	r4, ip
 80017fc:	0035      	movs	r5, r6
 80017fe:	e6ca      	b.n	8001596 <__aeabi_dadd+0x62>
 8001800:	2207      	movs	r2, #7
 8001802:	403a      	ands	r2, r7
 8001804:	2a00      	cmp	r2, #0
 8001806:	d000      	beq.n	800180a <__aeabi_dadd+0x2d6>
 8001808:	e6f6      	b.n	80015f8 <__aeabi_dadd+0xc4>
 800180a:	074b      	lsls	r3, r1, #29
 800180c:	08ca      	lsrs	r2, r1, #3
 800180e:	4948      	ldr	r1, [pc, #288]	; (8001930 <__aeabi_dadd+0x3fc>)
 8001810:	08ff      	lsrs	r7, r7, #3
 8001812:	433b      	orrs	r3, r7
 8001814:	428d      	cmp	r5, r1
 8001816:	d196      	bne.n	8001746 <__aeabi_dadd+0x212>
 8001818:	0019      	movs	r1, r3
 800181a:	4311      	orrs	r1, r2
 800181c:	d100      	bne.n	8001820 <__aeabi_dadd+0x2ec>
 800181e:	e19e      	b.n	8001b5e <__aeabi_dadd+0x62a>
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	0309      	lsls	r1, r1, #12
 8001824:	430a      	orrs	r2, r1
 8001826:	0312      	lsls	r2, r2, #12
 8001828:	0b12      	lsrs	r2, r2, #12
 800182a:	4d41      	ldr	r5, [pc, #260]	; (8001930 <__aeabi_dadd+0x3fc>)
 800182c:	e78f      	b.n	800174e <__aeabi_dadd+0x21a>
 800182e:	0015      	movs	r5, r2
 8001830:	2200      	movs	r2, #0
 8001832:	2300      	movs	r3, #0
 8001834:	e78b      	b.n	800174e <__aeabi_dadd+0x21a>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d000      	beq.n	800183c <__aeabi_dadd+0x308>
 800183a:	e0c7      	b.n	80019cc <__aeabi_dadd+0x498>
 800183c:	1c6b      	adds	r3, r5, #1
 800183e:	055f      	lsls	r7, r3, #21
 8001840:	0d7f      	lsrs	r7, r7, #21
 8001842:	2f01      	cmp	r7, #1
 8001844:	dc00      	bgt.n	8001848 <__aeabi_dadd+0x314>
 8001846:	e0f1      	b.n	8001a2c <__aeabi_dadd+0x4f8>
 8001848:	4d39      	ldr	r5, [pc, #228]	; (8001930 <__aeabi_dadd+0x3fc>)
 800184a:	42ab      	cmp	r3, r5
 800184c:	d100      	bne.n	8001850 <__aeabi_dadd+0x31c>
 800184e:	e0b9      	b.n	80019c4 <__aeabi_dadd+0x490>
 8001850:	1885      	adds	r5, r0, r2
 8001852:	000a      	movs	r2, r1
 8001854:	4285      	cmp	r5, r0
 8001856:	4189      	sbcs	r1, r1
 8001858:	4442      	add	r2, r8
 800185a:	4249      	negs	r1, r1
 800185c:	1851      	adds	r1, r2, r1
 800185e:	2207      	movs	r2, #7
 8001860:	07cf      	lsls	r7, r1, #31
 8001862:	086d      	lsrs	r5, r5, #1
 8001864:	432f      	orrs	r7, r5
 8001866:	0849      	lsrs	r1, r1, #1
 8001868:	403a      	ands	r2, r7
 800186a:	001d      	movs	r5, r3
 800186c:	e6c2      	b.n	80015f4 <__aeabi_dadd+0xc0>
 800186e:	2207      	movs	r2, #7
 8001870:	4930      	ldr	r1, [pc, #192]	; (8001934 <__aeabi_dadd+0x400>)
 8001872:	1aed      	subs	r5, r5, r3
 8001874:	4031      	ands	r1, r6
 8001876:	403a      	ands	r2, r7
 8001878:	e6bc      	b.n	80015f4 <__aeabi_dadd+0xc0>
 800187a:	003e      	movs	r6, r7
 800187c:	3828      	subs	r0, #40	; 0x28
 800187e:	4086      	lsls	r6, r0
 8001880:	2700      	movs	r7, #0
 8001882:	e69f      	b.n	80015c4 <__aeabi_dadd+0x90>
 8001884:	0038      	movs	r0, r7
 8001886:	f001 fc97 	bl	80031b8 <__clzsi2>
 800188a:	3020      	adds	r0, #32
 800188c:	e68e      	b.n	80015ac <__aeabi_dadd+0x78>
 800188e:	4643      	mov	r3, r8
 8001890:	4313      	orrs	r3, r2
 8001892:	001f      	movs	r7, r3
 8001894:	1e7a      	subs	r2, r7, #1
 8001896:	4197      	sbcs	r7, r2
 8001898:	1bc7      	subs	r7, r0, r7
 800189a:	42b8      	cmp	r0, r7
 800189c:	4180      	sbcs	r0, r0
 800189e:	4240      	negs	r0, r0
 80018a0:	1a09      	subs	r1, r1, r0
 80018a2:	e678      	b.n	8001596 <__aeabi_dadd+0x62>
 80018a4:	000e      	movs	r6, r1
 80018a6:	003b      	movs	r3, r7
 80018a8:	4306      	orrs	r6, r0
 80018aa:	4313      	orrs	r3, r2
 80018ac:	2d00      	cmp	r5, #0
 80018ae:	d161      	bne.n	8001974 <__aeabi_dadd+0x440>
 80018b0:	2e00      	cmp	r6, #0
 80018b2:	d000      	beq.n	80018b6 <__aeabi_dadd+0x382>
 80018b4:	e0f4      	b.n	8001aa0 <__aeabi_dadd+0x56c>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dadd+0x388>
 80018ba:	e11b      	b.n	8001af4 <__aeabi_dadd+0x5c0>
 80018bc:	4664      	mov	r4, ip
 80018be:	0039      	movs	r1, r7
 80018c0:	0010      	movs	r0, r2
 80018c2:	e739      	b.n	8001738 <__aeabi_dadd+0x204>
 80018c4:	4f1a      	ldr	r7, [pc, #104]	; (8001930 <__aeabi_dadd+0x3fc>)
 80018c6:	42bb      	cmp	r3, r7
 80018c8:	d07a      	beq.n	80019c0 <__aeabi_dadd+0x48c>
 80018ca:	0033      	movs	r3, r6
 80018cc:	e6ff      	b.n	80016ce <__aeabi_dadd+0x19a>
 80018ce:	0030      	movs	r0, r6
 80018d0:	3d1f      	subs	r5, #31
 80018d2:	40e8      	lsrs	r0, r5
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d003      	beq.n	80018e0 <__aeabi_dadd+0x3ac>
 80018d8:	2140      	movs	r1, #64	; 0x40
 80018da:	1acb      	subs	r3, r1, r3
 80018dc:	409e      	lsls	r6, r3
 80018de:	4337      	orrs	r7, r6
 80018e0:	1e7b      	subs	r3, r7, #1
 80018e2:	419f      	sbcs	r7, r3
 80018e4:	2207      	movs	r2, #7
 80018e6:	4307      	orrs	r7, r0
 80018e8:	403a      	ands	r2, r7
 80018ea:	2100      	movs	r1, #0
 80018ec:	2500      	movs	r5, #0
 80018ee:	e789      	b.n	8001804 <__aeabi_dadd+0x2d0>
 80018f0:	1a17      	subs	r7, r2, r0
 80018f2:	4643      	mov	r3, r8
 80018f4:	42ba      	cmp	r2, r7
 80018f6:	41b6      	sbcs	r6, r6
 80018f8:	1a59      	subs	r1, r3, r1
 80018fa:	4276      	negs	r6, r6
 80018fc:	1b8e      	subs	r6, r1, r6
 80018fe:	4664      	mov	r4, ip
 8001900:	e64e      	b.n	80015a0 <__aeabi_dadd+0x6c>
 8001902:	2b1f      	cmp	r3, #31
 8001904:	dd00      	ble.n	8001908 <__aeabi_dadd+0x3d4>
 8001906:	e0ad      	b.n	8001a64 <__aeabi_dadd+0x530>
 8001908:	2620      	movs	r6, #32
 800190a:	4647      	mov	r7, r8
 800190c:	1af6      	subs	r6, r6, r3
 800190e:	40b7      	lsls	r7, r6
 8001910:	46b9      	mov	r9, r7
 8001912:	0017      	movs	r7, r2
 8001914:	46b2      	mov	sl, r6
 8001916:	40df      	lsrs	r7, r3
 8001918:	464e      	mov	r6, r9
 800191a:	433e      	orrs	r6, r7
 800191c:	0037      	movs	r7, r6
 800191e:	4656      	mov	r6, sl
 8001920:	40b2      	lsls	r2, r6
 8001922:	1e56      	subs	r6, r2, #1
 8001924:	41b2      	sbcs	r2, r6
 8001926:	4317      	orrs	r7, r2
 8001928:	4642      	mov	r2, r8
 800192a:	40da      	lsrs	r2, r3
 800192c:	1889      	adds	r1, r1, r2
 800192e:	e6ae      	b.n	800168e <__aeabi_dadd+0x15a>
 8001930:	000007ff 	.word	0x000007ff
 8001934:	ff7fffff 	.word	0xff7fffff
 8001938:	800fffff 	.word	0x800fffff
 800193c:	2620      	movs	r6, #32
 800193e:	4647      	mov	r7, r8
 8001940:	1af6      	subs	r6, r6, r3
 8001942:	40b7      	lsls	r7, r6
 8001944:	46b9      	mov	r9, r7
 8001946:	0017      	movs	r7, r2
 8001948:	46b2      	mov	sl, r6
 800194a:	40df      	lsrs	r7, r3
 800194c:	464e      	mov	r6, r9
 800194e:	433e      	orrs	r6, r7
 8001950:	0037      	movs	r7, r6
 8001952:	4656      	mov	r6, sl
 8001954:	40b2      	lsls	r2, r6
 8001956:	1e56      	subs	r6, r2, #1
 8001958:	41b2      	sbcs	r2, r6
 800195a:	4317      	orrs	r7, r2
 800195c:	4642      	mov	r2, r8
 800195e:	40da      	lsrs	r2, r3
 8001960:	1a89      	subs	r1, r1, r2
 8001962:	e799      	b.n	8001898 <__aeabi_dadd+0x364>
 8001964:	4c7f      	ldr	r4, [pc, #508]	; (8001b64 <__aeabi_dadd+0x630>)
 8001966:	42a6      	cmp	r6, r4
 8001968:	d05b      	beq.n	8001a22 <__aeabi_dadd+0x4ee>
 800196a:	2480      	movs	r4, #128	; 0x80
 800196c:	0424      	lsls	r4, r4, #16
 800196e:	425b      	negs	r3, r3
 8001970:	4321      	orrs	r1, r4
 8001972:	e727      	b.n	80017c4 <__aeabi_dadd+0x290>
 8001974:	2e00      	cmp	r6, #0
 8001976:	d10c      	bne.n	8001992 <__aeabi_dadd+0x45e>
 8001978:	2b00      	cmp	r3, #0
 800197a:	d100      	bne.n	800197e <__aeabi_dadd+0x44a>
 800197c:	e0cb      	b.n	8001b16 <__aeabi_dadd+0x5e2>
 800197e:	4664      	mov	r4, ip
 8001980:	0039      	movs	r1, r7
 8001982:	0010      	movs	r0, r2
 8001984:	4d77      	ldr	r5, [pc, #476]	; (8001b64 <__aeabi_dadd+0x630>)
 8001986:	e6d7      	b.n	8001738 <__aeabi_dadd+0x204>
 8001988:	4f76      	ldr	r7, [pc, #472]	; (8001b64 <__aeabi_dadd+0x630>)
 800198a:	42bb      	cmp	r3, r7
 800198c:	d018      	beq.n	80019c0 <__aeabi_dadd+0x48c>
 800198e:	0033      	movs	r3, r6
 8001990:	e675      	b.n	800167e <__aeabi_dadd+0x14a>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d014      	beq.n	80019c0 <__aeabi_dadd+0x48c>
 8001996:	074b      	lsls	r3, r1, #29
 8001998:	08c0      	lsrs	r0, r0, #3
 800199a:	4318      	orrs	r0, r3
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	08c9      	lsrs	r1, r1, #3
 80019a0:	031b      	lsls	r3, r3, #12
 80019a2:	4219      	tst	r1, r3
 80019a4:	d007      	beq.n	80019b6 <__aeabi_dadd+0x482>
 80019a6:	08fc      	lsrs	r4, r7, #3
 80019a8:	421c      	tst	r4, r3
 80019aa:	d104      	bne.n	80019b6 <__aeabi_dadd+0x482>
 80019ac:	0779      	lsls	r1, r7, #29
 80019ae:	08d0      	lsrs	r0, r2, #3
 80019b0:	4308      	orrs	r0, r1
 80019b2:	46e1      	mov	r9, ip
 80019b4:	0021      	movs	r1, r4
 80019b6:	464c      	mov	r4, r9
 80019b8:	0f42      	lsrs	r2, r0, #29
 80019ba:	00c9      	lsls	r1, r1, #3
 80019bc:	4311      	orrs	r1, r2
 80019be:	00c0      	lsls	r0, r0, #3
 80019c0:	4d68      	ldr	r5, [pc, #416]	; (8001b64 <__aeabi_dadd+0x630>)
 80019c2:	e6b9      	b.n	8001738 <__aeabi_dadd+0x204>
 80019c4:	001d      	movs	r5, r3
 80019c6:	2200      	movs	r2, #0
 80019c8:	2300      	movs	r3, #0
 80019ca:	e6c0      	b.n	800174e <__aeabi_dadd+0x21a>
 80019cc:	2d00      	cmp	r5, #0
 80019ce:	d15b      	bne.n	8001a88 <__aeabi_dadd+0x554>
 80019d0:	000d      	movs	r5, r1
 80019d2:	4305      	orrs	r5, r0
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dadd+0x4a4>
 80019d6:	e6e2      	b.n	800179e <__aeabi_dadd+0x26a>
 80019d8:	1c5d      	adds	r5, r3, #1
 80019da:	d100      	bne.n	80019de <__aeabi_dadd+0x4aa>
 80019dc:	e0b0      	b.n	8001b40 <__aeabi_dadd+0x60c>
 80019de:	4d61      	ldr	r5, [pc, #388]	; (8001b64 <__aeabi_dadd+0x630>)
 80019e0:	42ae      	cmp	r6, r5
 80019e2:	d01f      	beq.n	8001a24 <__aeabi_dadd+0x4f0>
 80019e4:	43db      	mvns	r3, r3
 80019e6:	2b38      	cmp	r3, #56	; 0x38
 80019e8:	dc71      	bgt.n	8001ace <__aeabi_dadd+0x59a>
 80019ea:	2b1f      	cmp	r3, #31
 80019ec:	dd00      	ble.n	80019f0 <__aeabi_dadd+0x4bc>
 80019ee:	e096      	b.n	8001b1e <__aeabi_dadd+0x5ea>
 80019f0:	2520      	movs	r5, #32
 80019f2:	000f      	movs	r7, r1
 80019f4:	1aed      	subs	r5, r5, r3
 80019f6:	40af      	lsls	r7, r5
 80019f8:	46b9      	mov	r9, r7
 80019fa:	0007      	movs	r7, r0
 80019fc:	46aa      	mov	sl, r5
 80019fe:	40df      	lsrs	r7, r3
 8001a00:	464d      	mov	r5, r9
 8001a02:	433d      	orrs	r5, r7
 8001a04:	002f      	movs	r7, r5
 8001a06:	4655      	mov	r5, sl
 8001a08:	40a8      	lsls	r0, r5
 8001a0a:	40d9      	lsrs	r1, r3
 8001a0c:	1e45      	subs	r5, r0, #1
 8001a0e:	41a8      	sbcs	r0, r5
 8001a10:	4488      	add	r8, r1
 8001a12:	4307      	orrs	r7, r0
 8001a14:	18bf      	adds	r7, r7, r2
 8001a16:	4297      	cmp	r7, r2
 8001a18:	4192      	sbcs	r2, r2
 8001a1a:	4251      	negs	r1, r2
 8001a1c:	4441      	add	r1, r8
 8001a1e:	0035      	movs	r5, r6
 8001a20:	e63a      	b.n	8001698 <__aeabi_dadd+0x164>
 8001a22:	4664      	mov	r4, ip
 8001a24:	0035      	movs	r5, r6
 8001a26:	4641      	mov	r1, r8
 8001a28:	0010      	movs	r0, r2
 8001a2a:	e685      	b.n	8001738 <__aeabi_dadd+0x204>
 8001a2c:	000b      	movs	r3, r1
 8001a2e:	4303      	orrs	r3, r0
 8001a30:	2d00      	cmp	r5, #0
 8001a32:	d000      	beq.n	8001a36 <__aeabi_dadd+0x502>
 8001a34:	e663      	b.n	80016fe <__aeabi_dadd+0x1ca>
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f5      	beq.n	8001a26 <__aeabi_dadd+0x4f2>
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dadd+0x50e>
 8001a40:	e67a      	b.n	8001738 <__aeabi_dadd+0x204>
 8001a42:	1887      	adds	r7, r0, r2
 8001a44:	4287      	cmp	r7, r0
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	2207      	movs	r2, #7
 8001a4a:	4441      	add	r1, r8
 8001a4c:	4240      	negs	r0, r0
 8001a4e:	1809      	adds	r1, r1, r0
 8001a50:	403a      	ands	r2, r7
 8001a52:	020b      	lsls	r3, r1, #8
 8001a54:	d400      	bmi.n	8001a58 <__aeabi_dadd+0x524>
 8001a56:	e6d5      	b.n	8001804 <__aeabi_dadd+0x2d0>
 8001a58:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <__aeabi_dadd+0x634>)
 8001a5a:	3501      	adds	r5, #1
 8001a5c:	4019      	ands	r1, r3
 8001a5e:	e5c9      	b.n	80015f4 <__aeabi_dadd+0xc0>
 8001a60:	0038      	movs	r0, r7
 8001a62:	e669      	b.n	8001738 <__aeabi_dadd+0x204>
 8001a64:	001e      	movs	r6, r3
 8001a66:	4647      	mov	r7, r8
 8001a68:	3e20      	subs	r6, #32
 8001a6a:	40f7      	lsrs	r7, r6
 8001a6c:	46bc      	mov	ip, r7
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	d004      	beq.n	8001a7c <__aeabi_dadd+0x548>
 8001a72:	2640      	movs	r6, #64	; 0x40
 8001a74:	1af3      	subs	r3, r6, r3
 8001a76:	4646      	mov	r6, r8
 8001a78:	409e      	lsls	r6, r3
 8001a7a:	4332      	orrs	r2, r6
 8001a7c:	0017      	movs	r7, r2
 8001a7e:	4663      	mov	r3, ip
 8001a80:	1e7a      	subs	r2, r7, #1
 8001a82:	4197      	sbcs	r7, r2
 8001a84:	431f      	orrs	r7, r3
 8001a86:	e602      	b.n	800168e <__aeabi_dadd+0x15a>
 8001a88:	4d36      	ldr	r5, [pc, #216]	; (8001b64 <__aeabi_dadd+0x630>)
 8001a8a:	42ae      	cmp	r6, r5
 8001a8c:	d0ca      	beq.n	8001a24 <__aeabi_dadd+0x4f0>
 8001a8e:	2580      	movs	r5, #128	; 0x80
 8001a90:	042d      	lsls	r5, r5, #16
 8001a92:	425b      	negs	r3, r3
 8001a94:	4329      	orrs	r1, r5
 8001a96:	e7a6      	b.n	80019e6 <__aeabi_dadd+0x4b2>
 8001a98:	4308      	orrs	r0, r1
 8001a9a:	1e41      	subs	r1, r0, #1
 8001a9c:	4188      	sbcs	r0, r1
 8001a9e:	e6a6      	b.n	80017ee <__aeabi_dadd+0x2ba>
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x572>
 8001aa4:	e648      	b.n	8001738 <__aeabi_dadd+0x204>
 8001aa6:	1a87      	subs	r7, r0, r2
 8001aa8:	4643      	mov	r3, r8
 8001aaa:	42b8      	cmp	r0, r7
 8001aac:	41b6      	sbcs	r6, r6
 8001aae:	1acb      	subs	r3, r1, r3
 8001ab0:	4276      	negs	r6, r6
 8001ab2:	1b9e      	subs	r6, r3, r6
 8001ab4:	0233      	lsls	r3, r6, #8
 8001ab6:	d54b      	bpl.n	8001b50 <__aeabi_dadd+0x61c>
 8001ab8:	1a17      	subs	r7, r2, r0
 8001aba:	4643      	mov	r3, r8
 8001abc:	42ba      	cmp	r2, r7
 8001abe:	4192      	sbcs	r2, r2
 8001ac0:	1a59      	subs	r1, r3, r1
 8001ac2:	4252      	negs	r2, r2
 8001ac4:	1a89      	subs	r1, r1, r2
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	4664      	mov	r4, ip
 8001aca:	403a      	ands	r2, r7
 8001acc:	e592      	b.n	80015f4 <__aeabi_dadd+0xc0>
 8001ace:	4301      	orrs	r1, r0
 8001ad0:	000f      	movs	r7, r1
 8001ad2:	1e79      	subs	r1, r7, #1
 8001ad4:	418f      	sbcs	r7, r1
 8001ad6:	e79d      	b.n	8001a14 <__aeabi_dadd+0x4e0>
 8001ad8:	001c      	movs	r4, r3
 8001ada:	000f      	movs	r7, r1
 8001adc:	3c20      	subs	r4, #32
 8001ade:	40e7      	lsrs	r7, r4
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d003      	beq.n	8001aec <__aeabi_dadd+0x5b8>
 8001ae4:	2440      	movs	r4, #64	; 0x40
 8001ae6:	1ae3      	subs	r3, r4, r3
 8001ae8:	4099      	lsls	r1, r3
 8001aea:	4308      	orrs	r0, r1
 8001aec:	1e41      	subs	r1, r0, #1
 8001aee:	4188      	sbcs	r0, r1
 8001af0:	4338      	orrs	r0, r7
 8001af2:	e67c      	b.n	80017ee <__aeabi_dadd+0x2ba>
 8001af4:	2200      	movs	r2, #0
 8001af6:	2400      	movs	r4, #0
 8001af8:	e625      	b.n	8001746 <__aeabi_dadd+0x212>
 8001afa:	1a17      	subs	r7, r2, r0
 8001afc:	4643      	mov	r3, r8
 8001afe:	42ba      	cmp	r2, r7
 8001b00:	4192      	sbcs	r2, r2
 8001b02:	1a59      	subs	r1, r3, r1
 8001b04:	4252      	negs	r2, r2
 8001b06:	1a89      	subs	r1, r1, r2
 8001b08:	4664      	mov	r4, ip
 8001b0a:	0035      	movs	r5, r6
 8001b0c:	e543      	b.n	8001596 <__aeabi_dadd+0x62>
 8001b0e:	4641      	mov	r1, r8
 8001b10:	0010      	movs	r0, r2
 8001b12:	4d14      	ldr	r5, [pc, #80]	; (8001b64 <__aeabi_dadd+0x630>)
 8001b14:	e610      	b.n	8001738 <__aeabi_dadd+0x204>
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	2400      	movs	r4, #0
 8001b1a:	0312      	lsls	r2, r2, #12
 8001b1c:	e680      	b.n	8001820 <__aeabi_dadd+0x2ec>
 8001b1e:	001d      	movs	r5, r3
 8001b20:	000f      	movs	r7, r1
 8001b22:	3d20      	subs	r5, #32
 8001b24:	40ef      	lsrs	r7, r5
 8001b26:	46bc      	mov	ip, r7
 8001b28:	2b20      	cmp	r3, #32
 8001b2a:	d003      	beq.n	8001b34 <__aeabi_dadd+0x600>
 8001b2c:	2540      	movs	r5, #64	; 0x40
 8001b2e:	1aeb      	subs	r3, r5, r3
 8001b30:	4099      	lsls	r1, r3
 8001b32:	4308      	orrs	r0, r1
 8001b34:	0007      	movs	r7, r0
 8001b36:	4663      	mov	r3, ip
 8001b38:	1e78      	subs	r0, r7, #1
 8001b3a:	4187      	sbcs	r7, r0
 8001b3c:	431f      	orrs	r7, r3
 8001b3e:	e769      	b.n	8001a14 <__aeabi_dadd+0x4e0>
 8001b40:	1887      	adds	r7, r0, r2
 8001b42:	4297      	cmp	r7, r2
 8001b44:	419b      	sbcs	r3, r3
 8001b46:	4441      	add	r1, r8
 8001b48:	425b      	negs	r3, r3
 8001b4a:	18c9      	adds	r1, r1, r3
 8001b4c:	0035      	movs	r5, r6
 8001b4e:	e5a3      	b.n	8001698 <__aeabi_dadd+0x164>
 8001b50:	003b      	movs	r3, r7
 8001b52:	4333      	orrs	r3, r6
 8001b54:	d0ce      	beq.n	8001af4 <__aeabi_dadd+0x5c0>
 8001b56:	2207      	movs	r2, #7
 8001b58:	0031      	movs	r1, r6
 8001b5a:	403a      	ands	r2, r7
 8001b5c:	e652      	b.n	8001804 <__aeabi_dadd+0x2d0>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	001a      	movs	r2, r3
 8001b62:	e5f4      	b.n	800174e <__aeabi_dadd+0x21a>
 8001b64:	000007ff 	.word	0x000007ff
 8001b68:	ff7fffff 	.word	0xff7fffff

08001b6c <__aeabi_ddiv>:
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6e:	4657      	mov	r7, sl
 8001b70:	46de      	mov	lr, fp
 8001b72:	464e      	mov	r6, r9
 8001b74:	4645      	mov	r5, r8
 8001b76:	b5e0      	push	{r5, r6, r7, lr}
 8001b78:	4683      	mov	fp, r0
 8001b7a:	0007      	movs	r7, r0
 8001b7c:	030e      	lsls	r6, r1, #12
 8001b7e:	0048      	lsls	r0, r1, #1
 8001b80:	b085      	sub	sp, #20
 8001b82:	4692      	mov	sl, r2
 8001b84:	001c      	movs	r4, r3
 8001b86:	0b36      	lsrs	r6, r6, #12
 8001b88:	0d40      	lsrs	r0, r0, #21
 8001b8a:	0fcd      	lsrs	r5, r1, #31
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_ddiv+0x26>
 8001b90:	e09d      	b.n	8001cce <__aeabi_ddiv+0x162>
 8001b92:	4b95      	ldr	r3, [pc, #596]	; (8001de8 <__aeabi_ddiv+0x27c>)
 8001b94:	4298      	cmp	r0, r3
 8001b96:	d039      	beq.n	8001c0c <__aeabi_ddiv+0xa0>
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	00f6      	lsls	r6, r6, #3
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	431e      	orrs	r6, r3
 8001ba0:	4a92      	ldr	r2, [pc, #584]	; (8001dec <__aeabi_ddiv+0x280>)
 8001ba2:	0f7b      	lsrs	r3, r7, #29
 8001ba4:	4333      	orrs	r3, r6
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	4694      	mov	ip, r2
 8001baa:	0003      	movs	r3, r0
 8001bac:	4463      	add	r3, ip
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	2600      	movs	r6, #0
 8001bb4:	00ff      	lsls	r7, r7, #3
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	0323      	lsls	r3, r4, #12
 8001bba:	0b1b      	lsrs	r3, r3, #12
 8001bbc:	4698      	mov	r8, r3
 8001bbe:	0063      	lsls	r3, r4, #1
 8001bc0:	0fe4      	lsrs	r4, r4, #31
 8001bc2:	4652      	mov	r2, sl
 8001bc4:	0d5b      	lsrs	r3, r3, #21
 8001bc6:	9401      	str	r4, [sp, #4]
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_ddiv+0x60>
 8001bca:	e0b3      	b.n	8001d34 <__aeabi_ddiv+0x1c8>
 8001bcc:	4986      	ldr	r1, [pc, #536]	; (8001de8 <__aeabi_ddiv+0x27c>)
 8001bce:	428b      	cmp	r3, r1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_ddiv+0x68>
 8001bd2:	e09e      	b.n	8001d12 <__aeabi_ddiv+0x1a6>
 8001bd4:	4642      	mov	r2, r8
 8001bd6:	00d1      	lsls	r1, r2, #3
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	0412      	lsls	r2, r2, #16
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	4651      	mov	r1, sl
 8001be0:	0f49      	lsrs	r1, r1, #29
 8001be2:	4311      	orrs	r1, r2
 8001be4:	468b      	mov	fp, r1
 8001be6:	4981      	ldr	r1, [pc, #516]	; (8001dec <__aeabi_ddiv+0x280>)
 8001be8:	4652      	mov	r2, sl
 8001bea:	468c      	mov	ip, r1
 8001bec:	9900      	ldr	r1, [sp, #0]
 8001bee:	4463      	add	r3, ip
 8001bf0:	1acb      	subs	r3, r1, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	00d2      	lsls	r2, r2, #3
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	002b      	movs	r3, r5
 8001bfa:	4063      	eors	r3, r4
 8001bfc:	469a      	mov	sl, r3
 8001bfe:	2e0f      	cmp	r6, #15
 8001c00:	d900      	bls.n	8001c04 <__aeabi_ddiv+0x98>
 8001c02:	e105      	b.n	8001e10 <__aeabi_ddiv+0x2a4>
 8001c04:	4b7a      	ldr	r3, [pc, #488]	; (8001df0 <__aeabi_ddiv+0x284>)
 8001c06:	00b6      	lsls	r6, r6, #2
 8001c08:	599b      	ldr	r3, [r3, r6]
 8001c0a:	469f      	mov	pc, r3
 8001c0c:	465b      	mov	r3, fp
 8001c0e:	4333      	orrs	r3, r6
 8001c10:	4699      	mov	r9, r3
 8001c12:	d000      	beq.n	8001c16 <__aeabi_ddiv+0xaa>
 8001c14:	e0b8      	b.n	8001d88 <__aeabi_ddiv+0x21c>
 8001c16:	2302      	movs	r3, #2
 8001c18:	2608      	movs	r6, #8
 8001c1a:	2700      	movs	r7, #0
 8001c1c:	9000      	str	r0, [sp, #0]
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	e7ca      	b.n	8001bb8 <__aeabi_ddiv+0x4c>
 8001c22:	46cb      	mov	fp, r9
 8001c24:	003a      	movs	r2, r7
 8001c26:	9902      	ldr	r1, [sp, #8]
 8001c28:	9501      	str	r5, [sp, #4]
 8001c2a:	9b01      	ldr	r3, [sp, #4]
 8001c2c:	469a      	mov	sl, r3
 8001c2e:	2902      	cmp	r1, #2
 8001c30:	d027      	beq.n	8001c82 <__aeabi_ddiv+0x116>
 8001c32:	2903      	cmp	r1, #3
 8001c34:	d100      	bne.n	8001c38 <__aeabi_ddiv+0xcc>
 8001c36:	e280      	b.n	800213a <__aeabi_ddiv+0x5ce>
 8001c38:	2901      	cmp	r1, #1
 8001c3a:	d044      	beq.n	8001cc6 <__aeabi_ddiv+0x15a>
 8001c3c:	496d      	ldr	r1, [pc, #436]	; (8001df4 <__aeabi_ddiv+0x288>)
 8001c3e:	9b00      	ldr	r3, [sp, #0]
 8001c40:	468c      	mov	ip, r1
 8001c42:	4463      	add	r3, ip
 8001c44:	001c      	movs	r4, r3
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dd38      	ble.n	8001cbc <__aeabi_ddiv+0x150>
 8001c4a:	0753      	lsls	r3, r2, #29
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_ddiv+0xe4>
 8001c4e:	e213      	b.n	8002078 <__aeabi_ddiv+0x50c>
 8001c50:	08d2      	lsrs	r2, r2, #3
 8001c52:	465b      	mov	r3, fp
 8001c54:	01db      	lsls	r3, r3, #7
 8001c56:	d509      	bpl.n	8001c6c <__aeabi_ddiv+0x100>
 8001c58:	4659      	mov	r1, fp
 8001c5a:	4b67      	ldr	r3, [pc, #412]	; (8001df8 <__aeabi_ddiv+0x28c>)
 8001c5c:	4019      	ands	r1, r3
 8001c5e:	468b      	mov	fp, r1
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	00c9      	lsls	r1, r1, #3
 8001c64:	468c      	mov	ip, r1
 8001c66:	9b00      	ldr	r3, [sp, #0]
 8001c68:	4463      	add	r3, ip
 8001c6a:	001c      	movs	r4, r3
 8001c6c:	4b63      	ldr	r3, [pc, #396]	; (8001dfc <__aeabi_ddiv+0x290>)
 8001c6e:	429c      	cmp	r4, r3
 8001c70:	dc07      	bgt.n	8001c82 <__aeabi_ddiv+0x116>
 8001c72:	465b      	mov	r3, fp
 8001c74:	0564      	lsls	r4, r4, #21
 8001c76:	075f      	lsls	r7, r3, #29
 8001c78:	025b      	lsls	r3, r3, #9
 8001c7a:	4317      	orrs	r7, r2
 8001c7c:	0b1b      	lsrs	r3, r3, #12
 8001c7e:	0d62      	lsrs	r2, r4, #21
 8001c80:	e002      	b.n	8001c88 <__aeabi_ddiv+0x11c>
 8001c82:	2300      	movs	r3, #0
 8001c84:	2700      	movs	r7, #0
 8001c86:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <__aeabi_ddiv+0x27c>)
 8001c88:	2100      	movs	r1, #0
 8001c8a:	031b      	lsls	r3, r3, #12
 8001c8c:	0b1c      	lsrs	r4, r3, #12
 8001c8e:	0d0b      	lsrs	r3, r1, #20
 8001c90:	051b      	lsls	r3, r3, #20
 8001c92:	4323      	orrs	r3, r4
 8001c94:	0514      	lsls	r4, r2, #20
 8001c96:	4a5a      	ldr	r2, [pc, #360]	; (8001e00 <__aeabi_ddiv+0x294>)
 8001c98:	0038      	movs	r0, r7
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	431c      	orrs	r4, r3
 8001c9e:	4653      	mov	r3, sl
 8001ca0:	0064      	lsls	r4, r4, #1
 8001ca2:	07db      	lsls	r3, r3, #31
 8001ca4:	0864      	lsrs	r4, r4, #1
 8001ca6:	431c      	orrs	r4, r3
 8001ca8:	0021      	movs	r1, r4
 8001caa:	b005      	add	sp, #20
 8001cac:	bc3c      	pop	{r2, r3, r4, r5}
 8001cae:	4690      	mov	r8, r2
 8001cb0:	4699      	mov	r9, r3
 8001cb2:	46a2      	mov	sl, r4
 8001cb4:	46ab      	mov	fp, r5
 8001cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4252      	negs	r2, r2
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	1b1b      	subs	r3, r3, r4
 8001cc0:	2b38      	cmp	r3, #56	; 0x38
 8001cc2:	dc00      	bgt.n	8001cc6 <__aeabi_ddiv+0x15a>
 8001cc4:	e1ad      	b.n	8002022 <__aeabi_ddiv+0x4b6>
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2700      	movs	r7, #0
 8001ccc:	e7dc      	b.n	8001c88 <__aeabi_ddiv+0x11c>
 8001cce:	465b      	mov	r3, fp
 8001cd0:	4333      	orrs	r3, r6
 8001cd2:	4699      	mov	r9, r3
 8001cd4:	d05e      	beq.n	8001d94 <__aeabi_ddiv+0x228>
 8001cd6:	2e00      	cmp	r6, #0
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_ddiv+0x170>
 8001cda:	e18a      	b.n	8001ff2 <__aeabi_ddiv+0x486>
 8001cdc:	0030      	movs	r0, r6
 8001cde:	f001 fa6b 	bl	80031b8 <__clzsi2>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	3b0b      	subs	r3, #11
 8001ce6:	2b1c      	cmp	r3, #28
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_ddiv+0x180>
 8001cea:	e17b      	b.n	8001fe4 <__aeabi_ddiv+0x478>
 8001cec:	221d      	movs	r2, #29
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	465a      	mov	r2, fp
 8001cf2:	0001      	movs	r1, r0
 8001cf4:	40da      	lsrs	r2, r3
 8001cf6:	3908      	subs	r1, #8
 8001cf8:	408e      	lsls	r6, r1
 8001cfa:	0013      	movs	r3, r2
 8001cfc:	465f      	mov	r7, fp
 8001cfe:	4333      	orrs	r3, r6
 8001d00:	4699      	mov	r9, r3
 8001d02:	408f      	lsls	r7, r1
 8001d04:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <__aeabi_ddiv+0x298>)
 8001d06:	2600      	movs	r6, #0
 8001d08:	1a1b      	subs	r3, r3, r0
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	e752      	b.n	8001bb8 <__aeabi_ddiv+0x4c>
 8001d12:	4641      	mov	r1, r8
 8001d14:	4653      	mov	r3, sl
 8001d16:	430b      	orrs	r3, r1
 8001d18:	493b      	ldr	r1, [pc, #236]	; (8001e08 <__aeabi_ddiv+0x29c>)
 8001d1a:	469b      	mov	fp, r3
 8001d1c:	468c      	mov	ip, r1
 8001d1e:	9b00      	ldr	r3, [sp, #0]
 8001d20:	4463      	add	r3, ip
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	465b      	mov	r3, fp
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d13b      	bne.n	8001da2 <__aeabi_ddiv+0x236>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	431e      	orrs	r6, r3
 8001d30:	2102      	movs	r1, #2
 8001d32:	e761      	b.n	8001bf8 <__aeabi_ddiv+0x8c>
 8001d34:	4643      	mov	r3, r8
 8001d36:	4313      	orrs	r3, r2
 8001d38:	469b      	mov	fp, r3
 8001d3a:	d037      	beq.n	8001dac <__aeabi_ddiv+0x240>
 8001d3c:	4643      	mov	r3, r8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d100      	bne.n	8001d44 <__aeabi_ddiv+0x1d8>
 8001d42:	e162      	b.n	800200a <__aeabi_ddiv+0x49e>
 8001d44:	4640      	mov	r0, r8
 8001d46:	f001 fa37 	bl	80031b8 <__clzsi2>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	3b0b      	subs	r3, #11
 8001d4e:	2b1c      	cmp	r3, #28
 8001d50:	dd00      	ble.n	8001d54 <__aeabi_ddiv+0x1e8>
 8001d52:	e153      	b.n	8001ffc <__aeabi_ddiv+0x490>
 8001d54:	0002      	movs	r2, r0
 8001d56:	4641      	mov	r1, r8
 8001d58:	3a08      	subs	r2, #8
 8001d5a:	4091      	lsls	r1, r2
 8001d5c:	4688      	mov	r8, r1
 8001d5e:	211d      	movs	r1, #29
 8001d60:	1acb      	subs	r3, r1, r3
 8001d62:	4651      	mov	r1, sl
 8001d64:	40d9      	lsrs	r1, r3
 8001d66:	000b      	movs	r3, r1
 8001d68:	4641      	mov	r1, r8
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	469b      	mov	fp, r3
 8001d6e:	4653      	mov	r3, sl
 8001d70:	4093      	lsls	r3, r2
 8001d72:	001a      	movs	r2, r3
 8001d74:	9b00      	ldr	r3, [sp, #0]
 8001d76:	4925      	ldr	r1, [pc, #148]	; (8001e0c <__aeabi_ddiv+0x2a0>)
 8001d78:	469c      	mov	ip, r3
 8001d7a:	4460      	add	r0, ip
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	468c      	mov	ip, r1
 8001d80:	4463      	add	r3, ip
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2100      	movs	r1, #0
 8001d86:	e737      	b.n	8001bf8 <__aeabi_ddiv+0x8c>
 8001d88:	2303      	movs	r3, #3
 8001d8a:	46b1      	mov	r9, r6
 8001d8c:	9000      	str	r0, [sp, #0]
 8001d8e:	260c      	movs	r6, #12
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	e711      	b.n	8001bb8 <__aeabi_ddiv+0x4c>
 8001d94:	2300      	movs	r3, #0
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	2604      	movs	r6, #4
 8001d9c:	2700      	movs	r7, #0
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	e70a      	b.n	8001bb8 <__aeabi_ddiv+0x4c>
 8001da2:	2303      	movs	r3, #3
 8001da4:	46c3      	mov	fp, r8
 8001da6:	431e      	orrs	r6, r3
 8001da8:	2103      	movs	r1, #3
 8001daa:	e725      	b.n	8001bf8 <__aeabi_ddiv+0x8c>
 8001dac:	3301      	adds	r3, #1
 8001dae:	431e      	orrs	r6, r3
 8001db0:	2200      	movs	r2, #0
 8001db2:	2101      	movs	r1, #1
 8001db4:	e720      	b.n	8001bf8 <__aeabi_ddiv+0x8c>
 8001db6:	2300      	movs	r3, #0
 8001db8:	469a      	mov	sl, r3
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	2700      	movs	r7, #0
 8001dbe:	031b      	lsls	r3, r3, #12
 8001dc0:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <__aeabi_ddiv+0x27c>)
 8001dc2:	e761      	b.n	8001c88 <__aeabi_ddiv+0x11c>
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	4649      	mov	r1, r9
 8001dc8:	031b      	lsls	r3, r3, #12
 8001dca:	4219      	tst	r1, r3
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_ddiv+0x264>
 8001dce:	e0e2      	b.n	8001f96 <__aeabi_ddiv+0x42a>
 8001dd0:	4659      	mov	r1, fp
 8001dd2:	4219      	tst	r1, r3
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_ddiv+0x26c>
 8001dd6:	e0de      	b.n	8001f96 <__aeabi_ddiv+0x42a>
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	031b      	lsls	r3, r3, #12
 8001ddc:	0017      	movs	r7, r2
 8001dde:	0b1b      	lsrs	r3, r3, #12
 8001de0:	46a2      	mov	sl, r4
 8001de2:	4a01      	ldr	r2, [pc, #4]	; (8001de8 <__aeabi_ddiv+0x27c>)
 8001de4:	e750      	b.n	8001c88 <__aeabi_ddiv+0x11c>
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	000007ff 	.word	0x000007ff
 8001dec:	fffffc01 	.word	0xfffffc01
 8001df0:	0800f020 	.word	0x0800f020
 8001df4:	000003ff 	.word	0x000003ff
 8001df8:	feffffff 	.word	0xfeffffff
 8001dfc:	000007fe 	.word	0x000007fe
 8001e00:	800fffff 	.word	0x800fffff
 8001e04:	fffffc0d 	.word	0xfffffc0d
 8001e08:	fffff801 	.word	0xfffff801
 8001e0c:	000003f3 	.word	0x000003f3
 8001e10:	45d9      	cmp	r9, fp
 8001e12:	d900      	bls.n	8001e16 <__aeabi_ddiv+0x2aa>
 8001e14:	e0cb      	b.n	8001fae <__aeabi_ddiv+0x442>
 8001e16:	d100      	bne.n	8001e1a <__aeabi_ddiv+0x2ae>
 8001e18:	e0c6      	b.n	8001fa8 <__aeabi_ddiv+0x43c>
 8001e1a:	003c      	movs	r4, r7
 8001e1c:	4648      	mov	r0, r9
 8001e1e:	2700      	movs	r7, #0
 8001e20:	9b00      	ldr	r3, [sp, #0]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	465b      	mov	r3, fp
 8001e28:	0e16      	lsrs	r6, r2, #24
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	431e      	orrs	r6, r3
 8001e2e:	0213      	lsls	r3, r2, #8
 8001e30:	4698      	mov	r8, r3
 8001e32:	0433      	lsls	r3, r6, #16
 8001e34:	0c1b      	lsrs	r3, r3, #16
 8001e36:	4699      	mov	r9, r3
 8001e38:	0c31      	lsrs	r1, r6, #16
 8001e3a:	9101      	str	r1, [sp, #4]
 8001e3c:	f7fe f9e8 	bl	8000210 <__aeabi_uidivmod>
 8001e40:	464a      	mov	r2, r9
 8001e42:	4342      	muls	r2, r0
 8001e44:	040b      	lsls	r3, r1, #16
 8001e46:	0c21      	lsrs	r1, r4, #16
 8001e48:	0005      	movs	r5, r0
 8001e4a:	4319      	orrs	r1, r3
 8001e4c:	428a      	cmp	r2, r1
 8001e4e:	d907      	bls.n	8001e60 <__aeabi_ddiv+0x2f4>
 8001e50:	1989      	adds	r1, r1, r6
 8001e52:	3d01      	subs	r5, #1
 8001e54:	428e      	cmp	r6, r1
 8001e56:	d803      	bhi.n	8001e60 <__aeabi_ddiv+0x2f4>
 8001e58:	428a      	cmp	r2, r1
 8001e5a:	d901      	bls.n	8001e60 <__aeabi_ddiv+0x2f4>
 8001e5c:	1e85      	subs	r5, r0, #2
 8001e5e:	1989      	adds	r1, r1, r6
 8001e60:	1a88      	subs	r0, r1, r2
 8001e62:	9901      	ldr	r1, [sp, #4]
 8001e64:	f7fe f9d4 	bl	8000210 <__aeabi_uidivmod>
 8001e68:	0409      	lsls	r1, r1, #16
 8001e6a:	468c      	mov	ip, r1
 8001e6c:	464a      	mov	r2, r9
 8001e6e:	0421      	lsls	r1, r4, #16
 8001e70:	4664      	mov	r4, ip
 8001e72:	4342      	muls	r2, r0
 8001e74:	0c09      	lsrs	r1, r1, #16
 8001e76:	0003      	movs	r3, r0
 8001e78:	4321      	orrs	r1, r4
 8001e7a:	428a      	cmp	r2, r1
 8001e7c:	d904      	bls.n	8001e88 <__aeabi_ddiv+0x31c>
 8001e7e:	1989      	adds	r1, r1, r6
 8001e80:	3b01      	subs	r3, #1
 8001e82:	428e      	cmp	r6, r1
 8001e84:	d800      	bhi.n	8001e88 <__aeabi_ddiv+0x31c>
 8001e86:	e0f1      	b.n	800206c <__aeabi_ddiv+0x500>
 8001e88:	042d      	lsls	r5, r5, #16
 8001e8a:	431d      	orrs	r5, r3
 8001e8c:	46ab      	mov	fp, r5
 8001e8e:	4643      	mov	r3, r8
 8001e90:	1a89      	subs	r1, r1, r2
 8001e92:	4642      	mov	r2, r8
 8001e94:	0c28      	lsrs	r0, r5, #16
 8001e96:	0412      	lsls	r2, r2, #16
 8001e98:	0c1d      	lsrs	r5, r3, #16
 8001e9a:	465b      	mov	r3, fp
 8001e9c:	0c14      	lsrs	r4, r2, #16
 8001e9e:	0022      	movs	r2, r4
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	0c1b      	lsrs	r3, r3, #16
 8001ea4:	435a      	muls	r2, r3
 8001ea6:	9403      	str	r4, [sp, #12]
 8001ea8:	436b      	muls	r3, r5
 8001eaa:	4344      	muls	r4, r0
 8001eac:	9502      	str	r5, [sp, #8]
 8001eae:	4368      	muls	r0, r5
 8001eb0:	191b      	adds	r3, r3, r4
 8001eb2:	0c15      	lsrs	r5, r2, #16
 8001eb4:	18eb      	adds	r3, r5, r3
 8001eb6:	429c      	cmp	r4, r3
 8001eb8:	d903      	bls.n	8001ec2 <__aeabi_ddiv+0x356>
 8001eba:	2480      	movs	r4, #128	; 0x80
 8001ebc:	0264      	lsls	r4, r4, #9
 8001ebe:	46a4      	mov	ip, r4
 8001ec0:	4460      	add	r0, ip
 8001ec2:	0c1c      	lsrs	r4, r3, #16
 8001ec4:	0415      	lsls	r5, r2, #16
 8001ec6:	041b      	lsls	r3, r3, #16
 8001ec8:	0c2d      	lsrs	r5, r5, #16
 8001eca:	1820      	adds	r0, r4, r0
 8001ecc:	195d      	adds	r5, r3, r5
 8001ece:	4281      	cmp	r1, r0
 8001ed0:	d377      	bcc.n	8001fc2 <__aeabi_ddiv+0x456>
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_ddiv+0x450>
 8001ed4:	1a0c      	subs	r4, r1, r0
 8001ed6:	4aa2      	ldr	r2, [pc, #648]	; (8002160 <__aeabi_ddiv+0x5f4>)
 8001ed8:	1b7d      	subs	r5, r7, r5
 8001eda:	42af      	cmp	r7, r5
 8001edc:	41bf      	sbcs	r7, r7
 8001ede:	4694      	mov	ip, r2
 8001ee0:	9b00      	ldr	r3, [sp, #0]
 8001ee2:	427f      	negs	r7, r7
 8001ee4:	4463      	add	r3, ip
 8001ee6:	1be0      	subs	r0, r4, r7
 8001ee8:	001c      	movs	r4, r3
 8001eea:	4286      	cmp	r6, r0
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_ddiv+0x384>
 8001eee:	e0db      	b.n	80020a8 <__aeabi_ddiv+0x53c>
 8001ef0:	9901      	ldr	r1, [sp, #4]
 8001ef2:	f7fe f98d 	bl	8000210 <__aeabi_uidivmod>
 8001ef6:	464a      	mov	r2, r9
 8001ef8:	4342      	muls	r2, r0
 8001efa:	040b      	lsls	r3, r1, #16
 8001efc:	0c29      	lsrs	r1, r5, #16
 8001efe:	0007      	movs	r7, r0
 8001f00:	4319      	orrs	r1, r3
 8001f02:	428a      	cmp	r2, r1
 8001f04:	d907      	bls.n	8001f16 <__aeabi_ddiv+0x3aa>
 8001f06:	1989      	adds	r1, r1, r6
 8001f08:	3f01      	subs	r7, #1
 8001f0a:	428e      	cmp	r6, r1
 8001f0c:	d803      	bhi.n	8001f16 <__aeabi_ddiv+0x3aa>
 8001f0e:	428a      	cmp	r2, r1
 8001f10:	d901      	bls.n	8001f16 <__aeabi_ddiv+0x3aa>
 8001f12:	1e87      	subs	r7, r0, #2
 8001f14:	1989      	adds	r1, r1, r6
 8001f16:	1a88      	subs	r0, r1, r2
 8001f18:	9901      	ldr	r1, [sp, #4]
 8001f1a:	f7fe f979 	bl	8000210 <__aeabi_uidivmod>
 8001f1e:	0409      	lsls	r1, r1, #16
 8001f20:	464a      	mov	r2, r9
 8001f22:	4689      	mov	r9, r1
 8001f24:	0429      	lsls	r1, r5, #16
 8001f26:	464d      	mov	r5, r9
 8001f28:	4342      	muls	r2, r0
 8001f2a:	0c09      	lsrs	r1, r1, #16
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	4329      	orrs	r1, r5
 8001f30:	428a      	cmp	r2, r1
 8001f32:	d907      	bls.n	8001f44 <__aeabi_ddiv+0x3d8>
 8001f34:	1989      	adds	r1, r1, r6
 8001f36:	3b01      	subs	r3, #1
 8001f38:	428e      	cmp	r6, r1
 8001f3a:	d803      	bhi.n	8001f44 <__aeabi_ddiv+0x3d8>
 8001f3c:	428a      	cmp	r2, r1
 8001f3e:	d901      	bls.n	8001f44 <__aeabi_ddiv+0x3d8>
 8001f40:	1e83      	subs	r3, r0, #2
 8001f42:	1989      	adds	r1, r1, r6
 8001f44:	043f      	lsls	r7, r7, #16
 8001f46:	1a89      	subs	r1, r1, r2
 8001f48:	003a      	movs	r2, r7
 8001f4a:	9f03      	ldr	r7, [sp, #12]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	0038      	movs	r0, r7
 8001f50:	0413      	lsls	r3, r2, #16
 8001f52:	0c1b      	lsrs	r3, r3, #16
 8001f54:	4358      	muls	r0, r3
 8001f56:	4681      	mov	r9, r0
 8001f58:	9802      	ldr	r0, [sp, #8]
 8001f5a:	0c15      	lsrs	r5, r2, #16
 8001f5c:	436f      	muls	r7, r5
 8001f5e:	4343      	muls	r3, r0
 8001f60:	4345      	muls	r5, r0
 8001f62:	4648      	mov	r0, r9
 8001f64:	0c00      	lsrs	r0, r0, #16
 8001f66:	4684      	mov	ip, r0
 8001f68:	19db      	adds	r3, r3, r7
 8001f6a:	4463      	add	r3, ip
 8001f6c:	429f      	cmp	r7, r3
 8001f6e:	d903      	bls.n	8001f78 <__aeabi_ddiv+0x40c>
 8001f70:	2080      	movs	r0, #128	; 0x80
 8001f72:	0240      	lsls	r0, r0, #9
 8001f74:	4684      	mov	ip, r0
 8001f76:	4465      	add	r5, ip
 8001f78:	4648      	mov	r0, r9
 8001f7a:	0c1f      	lsrs	r7, r3, #16
 8001f7c:	0400      	lsls	r0, r0, #16
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	0c00      	lsrs	r0, r0, #16
 8001f82:	197d      	adds	r5, r7, r5
 8001f84:	1818      	adds	r0, r3, r0
 8001f86:	42a9      	cmp	r1, r5
 8001f88:	d200      	bcs.n	8001f8c <__aeabi_ddiv+0x420>
 8001f8a:	e084      	b.n	8002096 <__aeabi_ddiv+0x52a>
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_ddiv+0x424>
 8001f8e:	e07f      	b.n	8002090 <__aeabi_ddiv+0x524>
 8001f90:	2301      	movs	r3, #1
 8001f92:	431a      	orrs	r2, r3
 8001f94:	e657      	b.n	8001c46 <__aeabi_ddiv+0xda>
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	464a      	mov	r2, r9
 8001f9a:	031b      	lsls	r3, r3, #12
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	031b      	lsls	r3, r3, #12
 8001fa0:	0b1b      	lsrs	r3, r3, #12
 8001fa2:	46aa      	mov	sl, r5
 8001fa4:	4a6f      	ldr	r2, [pc, #444]	; (8002164 <__aeabi_ddiv+0x5f8>)
 8001fa6:	e66f      	b.n	8001c88 <__aeabi_ddiv+0x11c>
 8001fa8:	42ba      	cmp	r2, r7
 8001faa:	d900      	bls.n	8001fae <__aeabi_ddiv+0x442>
 8001fac:	e735      	b.n	8001e1a <__aeabi_ddiv+0x2ae>
 8001fae:	464b      	mov	r3, r9
 8001fb0:	07dc      	lsls	r4, r3, #31
 8001fb2:	0858      	lsrs	r0, r3, #1
 8001fb4:	087b      	lsrs	r3, r7, #1
 8001fb6:	431c      	orrs	r4, r3
 8001fb8:	07ff      	lsls	r7, r7, #31
 8001fba:	e734      	b.n	8001e26 <__aeabi_ddiv+0x2ba>
 8001fbc:	2400      	movs	r4, #0
 8001fbe:	42af      	cmp	r7, r5
 8001fc0:	d289      	bcs.n	8001ed6 <__aeabi_ddiv+0x36a>
 8001fc2:	4447      	add	r7, r8
 8001fc4:	4547      	cmp	r7, r8
 8001fc6:	41a4      	sbcs	r4, r4
 8001fc8:	465b      	mov	r3, fp
 8001fca:	4264      	negs	r4, r4
 8001fcc:	19a4      	adds	r4, r4, r6
 8001fce:	1864      	adds	r4, r4, r1
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	42a6      	cmp	r6, r4
 8001fd4:	d21e      	bcs.n	8002014 <__aeabi_ddiv+0x4a8>
 8001fd6:	42a0      	cmp	r0, r4
 8001fd8:	d86d      	bhi.n	80020b6 <__aeabi_ddiv+0x54a>
 8001fda:	d100      	bne.n	8001fde <__aeabi_ddiv+0x472>
 8001fdc:	e0b6      	b.n	800214c <__aeabi_ddiv+0x5e0>
 8001fde:	1a24      	subs	r4, r4, r0
 8001fe0:	469b      	mov	fp, r3
 8001fe2:	e778      	b.n	8001ed6 <__aeabi_ddiv+0x36a>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	465a      	mov	r2, fp
 8001fe8:	3b28      	subs	r3, #40	; 0x28
 8001fea:	409a      	lsls	r2, r3
 8001fec:	2700      	movs	r7, #0
 8001fee:	4691      	mov	r9, r2
 8001ff0:	e688      	b.n	8001d04 <__aeabi_ddiv+0x198>
 8001ff2:	4658      	mov	r0, fp
 8001ff4:	f001 f8e0 	bl	80031b8 <__clzsi2>
 8001ff8:	3020      	adds	r0, #32
 8001ffa:	e672      	b.n	8001ce2 <__aeabi_ddiv+0x176>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	4652      	mov	r2, sl
 8002000:	3b28      	subs	r3, #40	; 0x28
 8002002:	409a      	lsls	r2, r3
 8002004:	4693      	mov	fp, r2
 8002006:	2200      	movs	r2, #0
 8002008:	e6b4      	b.n	8001d74 <__aeabi_ddiv+0x208>
 800200a:	4650      	mov	r0, sl
 800200c:	f001 f8d4 	bl	80031b8 <__clzsi2>
 8002010:	3020      	adds	r0, #32
 8002012:	e69a      	b.n	8001d4a <__aeabi_ddiv+0x1de>
 8002014:	42a6      	cmp	r6, r4
 8002016:	d1e2      	bne.n	8001fde <__aeabi_ddiv+0x472>
 8002018:	45b8      	cmp	r8, r7
 800201a:	d9dc      	bls.n	8001fd6 <__aeabi_ddiv+0x46a>
 800201c:	1a34      	subs	r4, r6, r0
 800201e:	469b      	mov	fp, r3
 8002020:	e759      	b.n	8001ed6 <__aeabi_ddiv+0x36a>
 8002022:	2b1f      	cmp	r3, #31
 8002024:	dc65      	bgt.n	80020f2 <__aeabi_ddiv+0x586>
 8002026:	4c50      	ldr	r4, [pc, #320]	; (8002168 <__aeabi_ddiv+0x5fc>)
 8002028:	9900      	ldr	r1, [sp, #0]
 800202a:	46a4      	mov	ip, r4
 800202c:	465c      	mov	r4, fp
 800202e:	4461      	add	r1, ip
 8002030:	0008      	movs	r0, r1
 8002032:	408c      	lsls	r4, r1
 8002034:	0011      	movs	r1, r2
 8002036:	4082      	lsls	r2, r0
 8002038:	40d9      	lsrs	r1, r3
 800203a:	1e50      	subs	r0, r2, #1
 800203c:	4182      	sbcs	r2, r0
 800203e:	430c      	orrs	r4, r1
 8002040:	4314      	orrs	r4, r2
 8002042:	465a      	mov	r2, fp
 8002044:	40da      	lsrs	r2, r3
 8002046:	0013      	movs	r3, r2
 8002048:	0762      	lsls	r2, r4, #29
 800204a:	d009      	beq.n	8002060 <__aeabi_ddiv+0x4f4>
 800204c:	220f      	movs	r2, #15
 800204e:	4022      	ands	r2, r4
 8002050:	2a04      	cmp	r2, #4
 8002052:	d005      	beq.n	8002060 <__aeabi_ddiv+0x4f4>
 8002054:	0022      	movs	r2, r4
 8002056:	1d14      	adds	r4, r2, #4
 8002058:	4294      	cmp	r4, r2
 800205a:	4189      	sbcs	r1, r1
 800205c:	4249      	negs	r1, r1
 800205e:	185b      	adds	r3, r3, r1
 8002060:	021a      	lsls	r2, r3, #8
 8002062:	d562      	bpl.n	800212a <__aeabi_ddiv+0x5be>
 8002064:	2201      	movs	r2, #1
 8002066:	2300      	movs	r3, #0
 8002068:	2700      	movs	r7, #0
 800206a:	e60d      	b.n	8001c88 <__aeabi_ddiv+0x11c>
 800206c:	428a      	cmp	r2, r1
 800206e:	d800      	bhi.n	8002072 <__aeabi_ddiv+0x506>
 8002070:	e70a      	b.n	8001e88 <__aeabi_ddiv+0x31c>
 8002072:	1e83      	subs	r3, r0, #2
 8002074:	1989      	adds	r1, r1, r6
 8002076:	e707      	b.n	8001e88 <__aeabi_ddiv+0x31c>
 8002078:	230f      	movs	r3, #15
 800207a:	4013      	ands	r3, r2
 800207c:	2b04      	cmp	r3, #4
 800207e:	d100      	bne.n	8002082 <__aeabi_ddiv+0x516>
 8002080:	e5e6      	b.n	8001c50 <__aeabi_ddiv+0xe4>
 8002082:	1d17      	adds	r7, r2, #4
 8002084:	4297      	cmp	r7, r2
 8002086:	4192      	sbcs	r2, r2
 8002088:	4253      	negs	r3, r2
 800208a:	449b      	add	fp, r3
 800208c:	08fa      	lsrs	r2, r7, #3
 800208e:	e5e0      	b.n	8001c52 <__aeabi_ddiv+0xe6>
 8002090:	2800      	cmp	r0, #0
 8002092:	d100      	bne.n	8002096 <__aeabi_ddiv+0x52a>
 8002094:	e5d7      	b.n	8001c46 <__aeabi_ddiv+0xda>
 8002096:	1871      	adds	r1, r6, r1
 8002098:	1e53      	subs	r3, r2, #1
 800209a:	42b1      	cmp	r1, r6
 800209c:	d327      	bcc.n	80020ee <__aeabi_ddiv+0x582>
 800209e:	42a9      	cmp	r1, r5
 80020a0:	d315      	bcc.n	80020ce <__aeabi_ddiv+0x562>
 80020a2:	d058      	beq.n	8002156 <__aeabi_ddiv+0x5ea>
 80020a4:	001a      	movs	r2, r3
 80020a6:	e773      	b.n	8001f90 <__aeabi_ddiv+0x424>
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	dc00      	bgt.n	80020ae <__aeabi_ddiv+0x542>
 80020ac:	e604      	b.n	8001cb8 <__aeabi_ddiv+0x14c>
 80020ae:	2301      	movs	r3, #1
 80020b0:	2200      	movs	r2, #0
 80020b2:	449b      	add	fp, r3
 80020b4:	e5cd      	b.n	8001c52 <__aeabi_ddiv+0xe6>
 80020b6:	2302      	movs	r3, #2
 80020b8:	4447      	add	r7, r8
 80020ba:	4547      	cmp	r7, r8
 80020bc:	4189      	sbcs	r1, r1
 80020be:	425b      	negs	r3, r3
 80020c0:	469c      	mov	ip, r3
 80020c2:	4249      	negs	r1, r1
 80020c4:	1989      	adds	r1, r1, r6
 80020c6:	190c      	adds	r4, r1, r4
 80020c8:	44e3      	add	fp, ip
 80020ca:	1a24      	subs	r4, r4, r0
 80020cc:	e703      	b.n	8001ed6 <__aeabi_ddiv+0x36a>
 80020ce:	4643      	mov	r3, r8
 80020d0:	005f      	lsls	r7, r3, #1
 80020d2:	4547      	cmp	r7, r8
 80020d4:	419b      	sbcs	r3, r3
 80020d6:	46b8      	mov	r8, r7
 80020d8:	425b      	negs	r3, r3
 80020da:	199e      	adds	r6, r3, r6
 80020dc:	3a02      	subs	r2, #2
 80020de:	1989      	adds	r1, r1, r6
 80020e0:	42a9      	cmp	r1, r5
 80020e2:	d000      	beq.n	80020e6 <__aeabi_ddiv+0x57a>
 80020e4:	e754      	b.n	8001f90 <__aeabi_ddiv+0x424>
 80020e6:	4540      	cmp	r0, r8
 80020e8:	d000      	beq.n	80020ec <__aeabi_ddiv+0x580>
 80020ea:	e751      	b.n	8001f90 <__aeabi_ddiv+0x424>
 80020ec:	e5ab      	b.n	8001c46 <__aeabi_ddiv+0xda>
 80020ee:	001a      	movs	r2, r3
 80020f0:	e7f6      	b.n	80020e0 <__aeabi_ddiv+0x574>
 80020f2:	211f      	movs	r1, #31
 80020f4:	465f      	mov	r7, fp
 80020f6:	4249      	negs	r1, r1
 80020f8:	1b0c      	subs	r4, r1, r4
 80020fa:	40e7      	lsrs	r7, r4
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d007      	beq.n	8002110 <__aeabi_ddiv+0x5a4>
 8002100:	491a      	ldr	r1, [pc, #104]	; (800216c <__aeabi_ddiv+0x600>)
 8002102:	9b00      	ldr	r3, [sp, #0]
 8002104:	468c      	mov	ip, r1
 8002106:	4463      	add	r3, ip
 8002108:	0018      	movs	r0, r3
 800210a:	465b      	mov	r3, fp
 800210c:	4083      	lsls	r3, r0
 800210e:	431a      	orrs	r2, r3
 8002110:	1e50      	subs	r0, r2, #1
 8002112:	4182      	sbcs	r2, r0
 8002114:	433a      	orrs	r2, r7
 8002116:	2707      	movs	r7, #7
 8002118:	2300      	movs	r3, #0
 800211a:	4017      	ands	r7, r2
 800211c:	d009      	beq.n	8002132 <__aeabi_ddiv+0x5c6>
 800211e:	210f      	movs	r1, #15
 8002120:	2300      	movs	r3, #0
 8002122:	4011      	ands	r1, r2
 8002124:	0014      	movs	r4, r2
 8002126:	2904      	cmp	r1, #4
 8002128:	d195      	bne.n	8002056 <__aeabi_ddiv+0x4ea>
 800212a:	0022      	movs	r2, r4
 800212c:	075f      	lsls	r7, r3, #29
 800212e:	025b      	lsls	r3, r3, #9
 8002130:	0b1b      	lsrs	r3, r3, #12
 8002132:	08d2      	lsrs	r2, r2, #3
 8002134:	4317      	orrs	r7, r2
 8002136:	2200      	movs	r2, #0
 8002138:	e5a6      	b.n	8001c88 <__aeabi_ddiv+0x11c>
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	4659      	mov	r1, fp
 800213e:	031b      	lsls	r3, r3, #12
 8002140:	430b      	orrs	r3, r1
 8002142:	031b      	lsls	r3, r3, #12
 8002144:	0017      	movs	r7, r2
 8002146:	0b1b      	lsrs	r3, r3, #12
 8002148:	4a06      	ldr	r2, [pc, #24]	; (8002164 <__aeabi_ddiv+0x5f8>)
 800214a:	e59d      	b.n	8001c88 <__aeabi_ddiv+0x11c>
 800214c:	42bd      	cmp	r5, r7
 800214e:	d8b2      	bhi.n	80020b6 <__aeabi_ddiv+0x54a>
 8002150:	469b      	mov	fp, r3
 8002152:	2400      	movs	r4, #0
 8002154:	e6bf      	b.n	8001ed6 <__aeabi_ddiv+0x36a>
 8002156:	4580      	cmp	r8, r0
 8002158:	d3b9      	bcc.n	80020ce <__aeabi_ddiv+0x562>
 800215a:	001a      	movs	r2, r3
 800215c:	e7c3      	b.n	80020e6 <__aeabi_ddiv+0x57a>
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	000003ff 	.word	0x000003ff
 8002164:	000007ff 	.word	0x000007ff
 8002168:	0000041e 	.word	0x0000041e
 800216c:	0000043e 	.word	0x0000043e

08002170 <__eqdf2>:
 8002170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002172:	464f      	mov	r7, r9
 8002174:	4646      	mov	r6, r8
 8002176:	46d6      	mov	lr, sl
 8002178:	4684      	mov	ip, r0
 800217a:	b5c0      	push	{r6, r7, lr}
 800217c:	4680      	mov	r8, r0
 800217e:	4e19      	ldr	r6, [pc, #100]	; (80021e4 <__eqdf2+0x74>)
 8002180:	0318      	lsls	r0, r3, #12
 8002182:	030f      	lsls	r7, r1, #12
 8002184:	004d      	lsls	r5, r1, #1
 8002186:	0b00      	lsrs	r0, r0, #12
 8002188:	005c      	lsls	r4, r3, #1
 800218a:	4682      	mov	sl, r0
 800218c:	0b3f      	lsrs	r7, r7, #12
 800218e:	0d6d      	lsrs	r5, r5, #21
 8002190:	0fc9      	lsrs	r1, r1, #31
 8002192:	4691      	mov	r9, r2
 8002194:	0d64      	lsrs	r4, r4, #21
 8002196:	0fdb      	lsrs	r3, r3, #31
 8002198:	2001      	movs	r0, #1
 800219a:	42b5      	cmp	r5, r6
 800219c:	d00a      	beq.n	80021b4 <__eqdf2+0x44>
 800219e:	42b4      	cmp	r4, r6
 80021a0:	d003      	beq.n	80021aa <__eqdf2+0x3a>
 80021a2:	42a5      	cmp	r5, r4
 80021a4:	d101      	bne.n	80021aa <__eqdf2+0x3a>
 80021a6:	4557      	cmp	r7, sl
 80021a8:	d00c      	beq.n	80021c4 <__eqdf2+0x54>
 80021aa:	bc1c      	pop	{r2, r3, r4}
 80021ac:	4690      	mov	r8, r2
 80021ae:	4699      	mov	r9, r3
 80021b0:	46a2      	mov	sl, r4
 80021b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b4:	4666      	mov	r6, ip
 80021b6:	433e      	orrs	r6, r7
 80021b8:	d1f7      	bne.n	80021aa <__eqdf2+0x3a>
 80021ba:	42ac      	cmp	r4, r5
 80021bc:	d1f5      	bne.n	80021aa <__eqdf2+0x3a>
 80021be:	4654      	mov	r4, sl
 80021c0:	4314      	orrs	r4, r2
 80021c2:	d1f2      	bne.n	80021aa <__eqdf2+0x3a>
 80021c4:	2001      	movs	r0, #1
 80021c6:	45c8      	cmp	r8, r9
 80021c8:	d1ef      	bne.n	80021aa <__eqdf2+0x3a>
 80021ca:	4299      	cmp	r1, r3
 80021cc:	d007      	beq.n	80021de <__eqdf2+0x6e>
 80021ce:	2d00      	cmp	r5, #0
 80021d0:	d1eb      	bne.n	80021aa <__eqdf2+0x3a>
 80021d2:	4663      	mov	r3, ip
 80021d4:	431f      	orrs	r7, r3
 80021d6:	0038      	movs	r0, r7
 80021d8:	1e47      	subs	r7, r0, #1
 80021da:	41b8      	sbcs	r0, r7
 80021dc:	e7e5      	b.n	80021aa <__eqdf2+0x3a>
 80021de:	2000      	movs	r0, #0
 80021e0:	e7e3      	b.n	80021aa <__eqdf2+0x3a>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	000007ff 	.word	0x000007ff

080021e8 <__gedf2>:
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	464f      	mov	r7, r9
 80021ec:	4646      	mov	r6, r8
 80021ee:	46d6      	mov	lr, sl
 80021f0:	004d      	lsls	r5, r1, #1
 80021f2:	b5c0      	push	{r6, r7, lr}
 80021f4:	030e      	lsls	r6, r1, #12
 80021f6:	0fc9      	lsrs	r1, r1, #31
 80021f8:	468a      	mov	sl, r1
 80021fa:	492c      	ldr	r1, [pc, #176]	; (80022ac <__gedf2+0xc4>)
 80021fc:	031f      	lsls	r7, r3, #12
 80021fe:	005c      	lsls	r4, r3, #1
 8002200:	4680      	mov	r8, r0
 8002202:	0b36      	lsrs	r6, r6, #12
 8002204:	0d6d      	lsrs	r5, r5, #21
 8002206:	4691      	mov	r9, r2
 8002208:	0b3f      	lsrs	r7, r7, #12
 800220a:	0d64      	lsrs	r4, r4, #21
 800220c:	0fdb      	lsrs	r3, r3, #31
 800220e:	428d      	cmp	r5, r1
 8002210:	d01e      	beq.n	8002250 <__gedf2+0x68>
 8002212:	428c      	cmp	r4, r1
 8002214:	d016      	beq.n	8002244 <__gedf2+0x5c>
 8002216:	2d00      	cmp	r5, #0
 8002218:	d11e      	bne.n	8002258 <__gedf2+0x70>
 800221a:	4330      	orrs	r0, r6
 800221c:	4684      	mov	ip, r0
 800221e:	2c00      	cmp	r4, #0
 8002220:	d101      	bne.n	8002226 <__gedf2+0x3e>
 8002222:	433a      	orrs	r2, r7
 8002224:	d023      	beq.n	800226e <__gedf2+0x86>
 8002226:	4662      	mov	r2, ip
 8002228:	2a00      	cmp	r2, #0
 800222a:	d01a      	beq.n	8002262 <__gedf2+0x7a>
 800222c:	459a      	cmp	sl, r3
 800222e:	d029      	beq.n	8002284 <__gedf2+0x9c>
 8002230:	4651      	mov	r1, sl
 8002232:	2002      	movs	r0, #2
 8002234:	3901      	subs	r1, #1
 8002236:	4008      	ands	r0, r1
 8002238:	3801      	subs	r0, #1
 800223a:	bc1c      	pop	{r2, r3, r4}
 800223c:	4690      	mov	r8, r2
 800223e:	4699      	mov	r9, r3
 8002240:	46a2      	mov	sl, r4
 8002242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002244:	0039      	movs	r1, r7
 8002246:	4311      	orrs	r1, r2
 8002248:	d0e5      	beq.n	8002216 <__gedf2+0x2e>
 800224a:	2002      	movs	r0, #2
 800224c:	4240      	negs	r0, r0
 800224e:	e7f4      	b.n	800223a <__gedf2+0x52>
 8002250:	4330      	orrs	r0, r6
 8002252:	d1fa      	bne.n	800224a <__gedf2+0x62>
 8002254:	42ac      	cmp	r4, r5
 8002256:	d00f      	beq.n	8002278 <__gedf2+0x90>
 8002258:	2c00      	cmp	r4, #0
 800225a:	d10f      	bne.n	800227c <__gedf2+0x94>
 800225c:	433a      	orrs	r2, r7
 800225e:	d0e7      	beq.n	8002230 <__gedf2+0x48>
 8002260:	e00c      	b.n	800227c <__gedf2+0x94>
 8002262:	2201      	movs	r2, #1
 8002264:	3b01      	subs	r3, #1
 8002266:	4393      	bics	r3, r2
 8002268:	0018      	movs	r0, r3
 800226a:	3001      	adds	r0, #1
 800226c:	e7e5      	b.n	800223a <__gedf2+0x52>
 800226e:	4663      	mov	r3, ip
 8002270:	2000      	movs	r0, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0e1      	beq.n	800223a <__gedf2+0x52>
 8002276:	e7db      	b.n	8002230 <__gedf2+0x48>
 8002278:	433a      	orrs	r2, r7
 800227a:	d1e6      	bne.n	800224a <__gedf2+0x62>
 800227c:	459a      	cmp	sl, r3
 800227e:	d1d7      	bne.n	8002230 <__gedf2+0x48>
 8002280:	42a5      	cmp	r5, r4
 8002282:	dcd5      	bgt.n	8002230 <__gedf2+0x48>
 8002284:	42a5      	cmp	r5, r4
 8002286:	db05      	blt.n	8002294 <__gedf2+0xac>
 8002288:	42be      	cmp	r6, r7
 800228a:	d8d1      	bhi.n	8002230 <__gedf2+0x48>
 800228c:	d008      	beq.n	80022a0 <__gedf2+0xb8>
 800228e:	2000      	movs	r0, #0
 8002290:	42be      	cmp	r6, r7
 8002292:	d2d2      	bcs.n	800223a <__gedf2+0x52>
 8002294:	4650      	mov	r0, sl
 8002296:	2301      	movs	r3, #1
 8002298:	3801      	subs	r0, #1
 800229a:	4398      	bics	r0, r3
 800229c:	3001      	adds	r0, #1
 800229e:	e7cc      	b.n	800223a <__gedf2+0x52>
 80022a0:	45c8      	cmp	r8, r9
 80022a2:	d8c5      	bhi.n	8002230 <__gedf2+0x48>
 80022a4:	2000      	movs	r0, #0
 80022a6:	45c8      	cmp	r8, r9
 80022a8:	d3f4      	bcc.n	8002294 <__gedf2+0xac>
 80022aa:	e7c6      	b.n	800223a <__gedf2+0x52>
 80022ac:	000007ff 	.word	0x000007ff

080022b0 <__ledf2>:
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	464f      	mov	r7, r9
 80022b4:	4646      	mov	r6, r8
 80022b6:	46d6      	mov	lr, sl
 80022b8:	004d      	lsls	r5, r1, #1
 80022ba:	b5c0      	push	{r6, r7, lr}
 80022bc:	030e      	lsls	r6, r1, #12
 80022be:	0fc9      	lsrs	r1, r1, #31
 80022c0:	468a      	mov	sl, r1
 80022c2:	492e      	ldr	r1, [pc, #184]	; (800237c <__ledf2+0xcc>)
 80022c4:	031f      	lsls	r7, r3, #12
 80022c6:	005c      	lsls	r4, r3, #1
 80022c8:	4680      	mov	r8, r0
 80022ca:	0b36      	lsrs	r6, r6, #12
 80022cc:	0d6d      	lsrs	r5, r5, #21
 80022ce:	4691      	mov	r9, r2
 80022d0:	0b3f      	lsrs	r7, r7, #12
 80022d2:	0d64      	lsrs	r4, r4, #21
 80022d4:	0fdb      	lsrs	r3, r3, #31
 80022d6:	428d      	cmp	r5, r1
 80022d8:	d018      	beq.n	800230c <__ledf2+0x5c>
 80022da:	428c      	cmp	r4, r1
 80022dc:	d011      	beq.n	8002302 <__ledf2+0x52>
 80022de:	2d00      	cmp	r5, #0
 80022e0:	d118      	bne.n	8002314 <__ledf2+0x64>
 80022e2:	4330      	orrs	r0, r6
 80022e4:	4684      	mov	ip, r0
 80022e6:	2c00      	cmp	r4, #0
 80022e8:	d11e      	bne.n	8002328 <__ledf2+0x78>
 80022ea:	433a      	orrs	r2, r7
 80022ec:	d11c      	bne.n	8002328 <__ledf2+0x78>
 80022ee:	4663      	mov	r3, ip
 80022f0:	2000      	movs	r0, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d030      	beq.n	8002358 <__ledf2+0xa8>
 80022f6:	4651      	mov	r1, sl
 80022f8:	2002      	movs	r0, #2
 80022fa:	3901      	subs	r1, #1
 80022fc:	4008      	ands	r0, r1
 80022fe:	3801      	subs	r0, #1
 8002300:	e02a      	b.n	8002358 <__ledf2+0xa8>
 8002302:	0039      	movs	r1, r7
 8002304:	4311      	orrs	r1, r2
 8002306:	d0ea      	beq.n	80022de <__ledf2+0x2e>
 8002308:	2002      	movs	r0, #2
 800230a:	e025      	b.n	8002358 <__ledf2+0xa8>
 800230c:	4330      	orrs	r0, r6
 800230e:	d1fb      	bne.n	8002308 <__ledf2+0x58>
 8002310:	42ac      	cmp	r4, r5
 8002312:	d026      	beq.n	8002362 <__ledf2+0xb2>
 8002314:	2c00      	cmp	r4, #0
 8002316:	d126      	bne.n	8002366 <__ledf2+0xb6>
 8002318:	433a      	orrs	r2, r7
 800231a:	d124      	bne.n	8002366 <__ledf2+0xb6>
 800231c:	4651      	mov	r1, sl
 800231e:	2002      	movs	r0, #2
 8002320:	3901      	subs	r1, #1
 8002322:	4008      	ands	r0, r1
 8002324:	3801      	subs	r0, #1
 8002326:	e017      	b.n	8002358 <__ledf2+0xa8>
 8002328:	4662      	mov	r2, ip
 800232a:	2a00      	cmp	r2, #0
 800232c:	d00f      	beq.n	800234e <__ledf2+0x9e>
 800232e:	459a      	cmp	sl, r3
 8002330:	d1e1      	bne.n	80022f6 <__ledf2+0x46>
 8002332:	42a5      	cmp	r5, r4
 8002334:	db05      	blt.n	8002342 <__ledf2+0x92>
 8002336:	42be      	cmp	r6, r7
 8002338:	d8dd      	bhi.n	80022f6 <__ledf2+0x46>
 800233a:	d019      	beq.n	8002370 <__ledf2+0xc0>
 800233c:	2000      	movs	r0, #0
 800233e:	42be      	cmp	r6, r7
 8002340:	d20a      	bcs.n	8002358 <__ledf2+0xa8>
 8002342:	4650      	mov	r0, sl
 8002344:	2301      	movs	r3, #1
 8002346:	3801      	subs	r0, #1
 8002348:	4398      	bics	r0, r3
 800234a:	3001      	adds	r0, #1
 800234c:	e004      	b.n	8002358 <__ledf2+0xa8>
 800234e:	2201      	movs	r2, #1
 8002350:	3b01      	subs	r3, #1
 8002352:	4393      	bics	r3, r2
 8002354:	0018      	movs	r0, r3
 8002356:	3001      	adds	r0, #1
 8002358:	bc1c      	pop	{r2, r3, r4}
 800235a:	4690      	mov	r8, r2
 800235c:	4699      	mov	r9, r3
 800235e:	46a2      	mov	sl, r4
 8002360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002362:	433a      	orrs	r2, r7
 8002364:	d1d0      	bne.n	8002308 <__ledf2+0x58>
 8002366:	459a      	cmp	sl, r3
 8002368:	d1c5      	bne.n	80022f6 <__ledf2+0x46>
 800236a:	42a5      	cmp	r5, r4
 800236c:	dcc3      	bgt.n	80022f6 <__ledf2+0x46>
 800236e:	e7e0      	b.n	8002332 <__ledf2+0x82>
 8002370:	45c8      	cmp	r8, r9
 8002372:	d8c0      	bhi.n	80022f6 <__ledf2+0x46>
 8002374:	2000      	movs	r0, #0
 8002376:	45c8      	cmp	r8, r9
 8002378:	d3e3      	bcc.n	8002342 <__ledf2+0x92>
 800237a:	e7ed      	b.n	8002358 <__ledf2+0xa8>
 800237c:	000007ff 	.word	0x000007ff

08002380 <__aeabi_dmul>:
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	4657      	mov	r7, sl
 8002384:	46de      	mov	lr, fp
 8002386:	464e      	mov	r6, r9
 8002388:	4645      	mov	r5, r8
 800238a:	b5e0      	push	{r5, r6, r7, lr}
 800238c:	4683      	mov	fp, r0
 800238e:	0006      	movs	r6, r0
 8002390:	030f      	lsls	r7, r1, #12
 8002392:	0048      	lsls	r0, r1, #1
 8002394:	b087      	sub	sp, #28
 8002396:	4692      	mov	sl, r2
 8002398:	001d      	movs	r5, r3
 800239a:	0b3f      	lsrs	r7, r7, #12
 800239c:	0d40      	lsrs	r0, r0, #21
 800239e:	0fcc      	lsrs	r4, r1, #31
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dmul+0x26>
 80023a4:	e06f      	b.n	8002486 <__aeabi_dmul+0x106>
 80023a6:	4bde      	ldr	r3, [pc, #888]	; (8002720 <__aeabi_dmul+0x3a0>)
 80023a8:	4298      	cmp	r0, r3
 80023aa:	d038      	beq.n	800241e <__aeabi_dmul+0x9e>
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	00ff      	lsls	r7, r7, #3
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	431f      	orrs	r7, r3
 80023b4:	0f73      	lsrs	r3, r6, #29
 80023b6:	433b      	orrs	r3, r7
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	4bda      	ldr	r3, [pc, #872]	; (8002724 <__aeabi_dmul+0x3a4>)
 80023bc:	2700      	movs	r7, #0
 80023be:	4699      	mov	r9, r3
 80023c0:	2300      	movs	r3, #0
 80023c2:	469b      	mov	fp, r3
 80023c4:	00f6      	lsls	r6, r6, #3
 80023c6:	4481      	add	r9, r0
 80023c8:	032b      	lsls	r3, r5, #12
 80023ca:	0069      	lsls	r1, r5, #1
 80023cc:	0b1b      	lsrs	r3, r3, #12
 80023ce:	4652      	mov	r2, sl
 80023d0:	4698      	mov	r8, r3
 80023d2:	0d49      	lsrs	r1, r1, #21
 80023d4:	0fed      	lsrs	r5, r5, #31
 80023d6:	2900      	cmp	r1, #0
 80023d8:	d100      	bne.n	80023dc <__aeabi_dmul+0x5c>
 80023da:	e085      	b.n	80024e8 <__aeabi_dmul+0x168>
 80023dc:	4bd0      	ldr	r3, [pc, #832]	; (8002720 <__aeabi_dmul+0x3a0>)
 80023de:	4299      	cmp	r1, r3
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dmul+0x64>
 80023e2:	e073      	b.n	80024cc <__aeabi_dmul+0x14c>
 80023e4:	4643      	mov	r3, r8
 80023e6:	00da      	lsls	r2, r3, #3
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	041b      	lsls	r3, r3, #16
 80023ec:	4313      	orrs	r3, r2
 80023ee:	4652      	mov	r2, sl
 80023f0:	48cc      	ldr	r0, [pc, #816]	; (8002724 <__aeabi_dmul+0x3a4>)
 80023f2:	0f52      	lsrs	r2, r2, #29
 80023f4:	4684      	mov	ip, r0
 80023f6:	4313      	orrs	r3, r2
 80023f8:	4652      	mov	r2, sl
 80023fa:	2000      	movs	r0, #0
 80023fc:	4461      	add	r1, ip
 80023fe:	00d2      	lsls	r2, r2, #3
 8002400:	4489      	add	r9, r1
 8002402:	0021      	movs	r1, r4
 8002404:	4069      	eors	r1, r5
 8002406:	9100      	str	r1, [sp, #0]
 8002408:	468c      	mov	ip, r1
 800240a:	2101      	movs	r1, #1
 800240c:	4449      	add	r1, r9
 800240e:	468a      	mov	sl, r1
 8002410:	2f0f      	cmp	r7, #15
 8002412:	d900      	bls.n	8002416 <__aeabi_dmul+0x96>
 8002414:	e090      	b.n	8002538 <__aeabi_dmul+0x1b8>
 8002416:	49c4      	ldr	r1, [pc, #784]	; (8002728 <__aeabi_dmul+0x3a8>)
 8002418:	00bf      	lsls	r7, r7, #2
 800241a:	59cf      	ldr	r7, [r1, r7]
 800241c:	46bf      	mov	pc, r7
 800241e:	465b      	mov	r3, fp
 8002420:	433b      	orrs	r3, r7
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	d000      	beq.n	8002428 <__aeabi_dmul+0xa8>
 8002426:	e16a      	b.n	80026fe <__aeabi_dmul+0x37e>
 8002428:	2302      	movs	r3, #2
 800242a:	2708      	movs	r7, #8
 800242c:	2600      	movs	r6, #0
 800242e:	4681      	mov	r9, r0
 8002430:	469b      	mov	fp, r3
 8002432:	e7c9      	b.n	80023c8 <__aeabi_dmul+0x48>
 8002434:	0032      	movs	r2, r6
 8002436:	4658      	mov	r0, fp
 8002438:	9b01      	ldr	r3, [sp, #4]
 800243a:	4661      	mov	r1, ip
 800243c:	9100      	str	r1, [sp, #0]
 800243e:	2802      	cmp	r0, #2
 8002440:	d100      	bne.n	8002444 <__aeabi_dmul+0xc4>
 8002442:	e075      	b.n	8002530 <__aeabi_dmul+0x1b0>
 8002444:	2803      	cmp	r0, #3
 8002446:	d100      	bne.n	800244a <__aeabi_dmul+0xca>
 8002448:	e1fe      	b.n	8002848 <__aeabi_dmul+0x4c8>
 800244a:	2801      	cmp	r0, #1
 800244c:	d000      	beq.n	8002450 <__aeabi_dmul+0xd0>
 800244e:	e12c      	b.n	80026aa <__aeabi_dmul+0x32a>
 8002450:	2300      	movs	r3, #0
 8002452:	2700      	movs	r7, #0
 8002454:	2600      	movs	r6, #0
 8002456:	2500      	movs	r5, #0
 8002458:	033f      	lsls	r7, r7, #12
 800245a:	0d2a      	lsrs	r2, r5, #20
 800245c:	0b3f      	lsrs	r7, r7, #12
 800245e:	48b3      	ldr	r0, [pc, #716]	; (800272c <__aeabi_dmul+0x3ac>)
 8002460:	0512      	lsls	r2, r2, #20
 8002462:	433a      	orrs	r2, r7
 8002464:	4002      	ands	r2, r0
 8002466:	051b      	lsls	r3, r3, #20
 8002468:	4313      	orrs	r3, r2
 800246a:	9a00      	ldr	r2, [sp, #0]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	07d1      	lsls	r1, r2, #31
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	430b      	orrs	r3, r1
 8002474:	0030      	movs	r0, r6
 8002476:	0019      	movs	r1, r3
 8002478:	b007      	add	sp, #28
 800247a:	bc3c      	pop	{r2, r3, r4, r5}
 800247c:	4690      	mov	r8, r2
 800247e:	4699      	mov	r9, r3
 8002480:	46a2      	mov	sl, r4
 8002482:	46ab      	mov	fp, r5
 8002484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002486:	465b      	mov	r3, fp
 8002488:	433b      	orrs	r3, r7
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	d100      	bne.n	8002490 <__aeabi_dmul+0x110>
 800248e:	e12f      	b.n	80026f0 <__aeabi_dmul+0x370>
 8002490:	2f00      	cmp	r7, #0
 8002492:	d100      	bne.n	8002496 <__aeabi_dmul+0x116>
 8002494:	e1a5      	b.n	80027e2 <__aeabi_dmul+0x462>
 8002496:	0038      	movs	r0, r7
 8002498:	f000 fe8e 	bl	80031b8 <__clzsi2>
 800249c:	0003      	movs	r3, r0
 800249e:	3b0b      	subs	r3, #11
 80024a0:	2b1c      	cmp	r3, #28
 80024a2:	dd00      	ble.n	80024a6 <__aeabi_dmul+0x126>
 80024a4:	e196      	b.n	80027d4 <__aeabi_dmul+0x454>
 80024a6:	221d      	movs	r2, #29
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	465a      	mov	r2, fp
 80024ac:	0001      	movs	r1, r0
 80024ae:	40da      	lsrs	r2, r3
 80024b0:	465e      	mov	r6, fp
 80024b2:	3908      	subs	r1, #8
 80024b4:	408f      	lsls	r7, r1
 80024b6:	0013      	movs	r3, r2
 80024b8:	408e      	lsls	r6, r1
 80024ba:	433b      	orrs	r3, r7
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	4b9c      	ldr	r3, [pc, #624]	; (8002730 <__aeabi_dmul+0x3b0>)
 80024c0:	2700      	movs	r7, #0
 80024c2:	1a1b      	subs	r3, r3, r0
 80024c4:	4699      	mov	r9, r3
 80024c6:	2300      	movs	r3, #0
 80024c8:	469b      	mov	fp, r3
 80024ca:	e77d      	b.n	80023c8 <__aeabi_dmul+0x48>
 80024cc:	4641      	mov	r1, r8
 80024ce:	4653      	mov	r3, sl
 80024d0:	430b      	orrs	r3, r1
 80024d2:	4993      	ldr	r1, [pc, #588]	; (8002720 <__aeabi_dmul+0x3a0>)
 80024d4:	468c      	mov	ip, r1
 80024d6:	44e1      	add	r9, ip
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d000      	beq.n	80024de <__aeabi_dmul+0x15e>
 80024dc:	e11a      	b.n	8002714 <__aeabi_dmul+0x394>
 80024de:	2202      	movs	r2, #2
 80024e0:	2002      	movs	r0, #2
 80024e2:	4317      	orrs	r7, r2
 80024e4:	2200      	movs	r2, #0
 80024e6:	e78c      	b.n	8002402 <__aeabi_dmul+0x82>
 80024e8:	4313      	orrs	r3, r2
 80024ea:	d100      	bne.n	80024ee <__aeabi_dmul+0x16e>
 80024ec:	e10d      	b.n	800270a <__aeabi_dmul+0x38a>
 80024ee:	4643      	mov	r3, r8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dmul+0x176>
 80024f4:	e181      	b.n	80027fa <__aeabi_dmul+0x47a>
 80024f6:	4640      	mov	r0, r8
 80024f8:	f000 fe5e 	bl	80031b8 <__clzsi2>
 80024fc:	0002      	movs	r2, r0
 80024fe:	3a0b      	subs	r2, #11
 8002500:	2a1c      	cmp	r2, #28
 8002502:	dd00      	ble.n	8002506 <__aeabi_dmul+0x186>
 8002504:	e172      	b.n	80027ec <__aeabi_dmul+0x46c>
 8002506:	0001      	movs	r1, r0
 8002508:	4643      	mov	r3, r8
 800250a:	3908      	subs	r1, #8
 800250c:	408b      	lsls	r3, r1
 800250e:	4698      	mov	r8, r3
 8002510:	231d      	movs	r3, #29
 8002512:	1a9a      	subs	r2, r3, r2
 8002514:	4653      	mov	r3, sl
 8002516:	40d3      	lsrs	r3, r2
 8002518:	001a      	movs	r2, r3
 800251a:	4643      	mov	r3, r8
 800251c:	4313      	orrs	r3, r2
 800251e:	4652      	mov	r2, sl
 8002520:	408a      	lsls	r2, r1
 8002522:	4649      	mov	r1, r9
 8002524:	1a08      	subs	r0, r1, r0
 8002526:	4982      	ldr	r1, [pc, #520]	; (8002730 <__aeabi_dmul+0x3b0>)
 8002528:	4689      	mov	r9, r1
 800252a:	4481      	add	r9, r0
 800252c:	2000      	movs	r0, #0
 800252e:	e768      	b.n	8002402 <__aeabi_dmul+0x82>
 8002530:	4b7b      	ldr	r3, [pc, #492]	; (8002720 <__aeabi_dmul+0x3a0>)
 8002532:	2700      	movs	r7, #0
 8002534:	2600      	movs	r6, #0
 8002536:	e78e      	b.n	8002456 <__aeabi_dmul+0xd6>
 8002538:	0c14      	lsrs	r4, r2, #16
 800253a:	0412      	lsls	r2, r2, #16
 800253c:	0c12      	lsrs	r2, r2, #16
 800253e:	0011      	movs	r1, r2
 8002540:	0c37      	lsrs	r7, r6, #16
 8002542:	0436      	lsls	r6, r6, #16
 8002544:	0c35      	lsrs	r5, r6, #16
 8002546:	4379      	muls	r1, r7
 8002548:	0028      	movs	r0, r5
 800254a:	468c      	mov	ip, r1
 800254c:	002e      	movs	r6, r5
 800254e:	4360      	muls	r0, r4
 8002550:	4460      	add	r0, ip
 8002552:	4683      	mov	fp, r0
 8002554:	4356      	muls	r6, r2
 8002556:	0021      	movs	r1, r4
 8002558:	0c30      	lsrs	r0, r6, #16
 800255a:	4680      	mov	r8, r0
 800255c:	4658      	mov	r0, fp
 800255e:	4379      	muls	r1, r7
 8002560:	4440      	add	r0, r8
 8002562:	9102      	str	r1, [sp, #8]
 8002564:	4584      	cmp	ip, r0
 8002566:	d906      	bls.n	8002576 <__aeabi_dmul+0x1f6>
 8002568:	4688      	mov	r8, r1
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0249      	lsls	r1, r1, #9
 800256e:	468c      	mov	ip, r1
 8002570:	44e0      	add	r8, ip
 8002572:	4641      	mov	r1, r8
 8002574:	9102      	str	r1, [sp, #8]
 8002576:	0436      	lsls	r6, r6, #16
 8002578:	0c01      	lsrs	r1, r0, #16
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	0400      	lsls	r0, r0, #16
 800257e:	468b      	mov	fp, r1
 8002580:	1981      	adds	r1, r0, r6
 8002582:	0c1e      	lsrs	r6, r3, #16
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	9103      	str	r1, [sp, #12]
 800258a:	0019      	movs	r1, r3
 800258c:	4379      	muls	r1, r7
 800258e:	468c      	mov	ip, r1
 8002590:	0028      	movs	r0, r5
 8002592:	4375      	muls	r5, r6
 8002594:	4465      	add	r5, ip
 8002596:	46a8      	mov	r8, r5
 8002598:	4358      	muls	r0, r3
 800259a:	0c05      	lsrs	r5, r0, #16
 800259c:	4445      	add	r5, r8
 800259e:	4377      	muls	r7, r6
 80025a0:	42a9      	cmp	r1, r5
 80025a2:	d903      	bls.n	80025ac <__aeabi_dmul+0x22c>
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	0249      	lsls	r1, r1, #9
 80025a8:	468c      	mov	ip, r1
 80025aa:	4467      	add	r7, ip
 80025ac:	0c29      	lsrs	r1, r5, #16
 80025ae:	468c      	mov	ip, r1
 80025b0:	0039      	movs	r1, r7
 80025b2:	0400      	lsls	r0, r0, #16
 80025b4:	0c00      	lsrs	r0, r0, #16
 80025b6:	042d      	lsls	r5, r5, #16
 80025b8:	182d      	adds	r5, r5, r0
 80025ba:	4461      	add	r1, ip
 80025bc:	44ab      	add	fp, r5
 80025be:	9105      	str	r1, [sp, #20]
 80025c0:	4659      	mov	r1, fp
 80025c2:	9104      	str	r1, [sp, #16]
 80025c4:	9901      	ldr	r1, [sp, #4]
 80025c6:	040f      	lsls	r7, r1, #16
 80025c8:	0c3f      	lsrs	r7, r7, #16
 80025ca:	0c08      	lsrs	r0, r1, #16
 80025cc:	0039      	movs	r1, r7
 80025ce:	4351      	muls	r1, r2
 80025d0:	4342      	muls	r2, r0
 80025d2:	4690      	mov	r8, r2
 80025d4:	0002      	movs	r2, r0
 80025d6:	468c      	mov	ip, r1
 80025d8:	0c09      	lsrs	r1, r1, #16
 80025da:	468b      	mov	fp, r1
 80025dc:	4362      	muls	r2, r4
 80025de:	437c      	muls	r4, r7
 80025e0:	4444      	add	r4, r8
 80025e2:	445c      	add	r4, fp
 80025e4:	45a0      	cmp	r8, r4
 80025e6:	d903      	bls.n	80025f0 <__aeabi_dmul+0x270>
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	0249      	lsls	r1, r1, #9
 80025ec:	4688      	mov	r8, r1
 80025ee:	4442      	add	r2, r8
 80025f0:	0c21      	lsrs	r1, r4, #16
 80025f2:	4688      	mov	r8, r1
 80025f4:	4661      	mov	r1, ip
 80025f6:	0409      	lsls	r1, r1, #16
 80025f8:	0c09      	lsrs	r1, r1, #16
 80025fa:	468c      	mov	ip, r1
 80025fc:	0039      	movs	r1, r7
 80025fe:	4359      	muls	r1, r3
 8002600:	4343      	muls	r3, r0
 8002602:	4370      	muls	r0, r6
 8002604:	437e      	muls	r6, r7
 8002606:	0c0f      	lsrs	r7, r1, #16
 8002608:	18f6      	adds	r6, r6, r3
 800260a:	0424      	lsls	r4, r4, #16
 800260c:	19be      	adds	r6, r7, r6
 800260e:	4464      	add	r4, ip
 8002610:	4442      	add	r2, r8
 8002612:	468c      	mov	ip, r1
 8002614:	42b3      	cmp	r3, r6
 8002616:	d903      	bls.n	8002620 <__aeabi_dmul+0x2a0>
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	4698      	mov	r8, r3
 800261e:	4440      	add	r0, r8
 8002620:	9b02      	ldr	r3, [sp, #8]
 8002622:	4661      	mov	r1, ip
 8002624:	4698      	mov	r8, r3
 8002626:	9b04      	ldr	r3, [sp, #16]
 8002628:	0437      	lsls	r7, r6, #16
 800262a:	4443      	add	r3, r8
 800262c:	469b      	mov	fp, r3
 800262e:	45ab      	cmp	fp, r5
 8002630:	41ad      	sbcs	r5, r5
 8002632:	426b      	negs	r3, r5
 8002634:	040d      	lsls	r5, r1, #16
 8002636:	9905      	ldr	r1, [sp, #20]
 8002638:	0c2d      	lsrs	r5, r5, #16
 800263a:	468c      	mov	ip, r1
 800263c:	197f      	adds	r7, r7, r5
 800263e:	4467      	add	r7, ip
 8002640:	18fd      	adds	r5, r7, r3
 8002642:	46a8      	mov	r8, r5
 8002644:	465d      	mov	r5, fp
 8002646:	192d      	adds	r5, r5, r4
 8002648:	42a5      	cmp	r5, r4
 800264a:	41a4      	sbcs	r4, r4
 800264c:	4693      	mov	fp, r2
 800264e:	4264      	negs	r4, r4
 8002650:	46a4      	mov	ip, r4
 8002652:	44c3      	add	fp, r8
 8002654:	44dc      	add	ip, fp
 8002656:	428f      	cmp	r7, r1
 8002658:	41bf      	sbcs	r7, r7
 800265a:	4598      	cmp	r8, r3
 800265c:	419b      	sbcs	r3, r3
 800265e:	4593      	cmp	fp, r2
 8002660:	4192      	sbcs	r2, r2
 8002662:	45a4      	cmp	ip, r4
 8002664:	41a4      	sbcs	r4, r4
 8002666:	425b      	negs	r3, r3
 8002668:	427f      	negs	r7, r7
 800266a:	431f      	orrs	r7, r3
 800266c:	0c36      	lsrs	r6, r6, #16
 800266e:	4252      	negs	r2, r2
 8002670:	4264      	negs	r4, r4
 8002672:	19bf      	adds	r7, r7, r6
 8002674:	4322      	orrs	r2, r4
 8002676:	18bf      	adds	r7, r7, r2
 8002678:	4662      	mov	r2, ip
 800267a:	1838      	adds	r0, r7, r0
 800267c:	0243      	lsls	r3, r0, #9
 800267e:	0dd2      	lsrs	r2, r2, #23
 8002680:	9903      	ldr	r1, [sp, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	026a      	lsls	r2, r5, #9
 8002686:	430a      	orrs	r2, r1
 8002688:	1e50      	subs	r0, r2, #1
 800268a:	4182      	sbcs	r2, r0
 800268c:	4661      	mov	r1, ip
 800268e:	0ded      	lsrs	r5, r5, #23
 8002690:	432a      	orrs	r2, r5
 8002692:	024e      	lsls	r6, r1, #9
 8002694:	4332      	orrs	r2, r6
 8002696:	01d9      	lsls	r1, r3, #7
 8002698:	d400      	bmi.n	800269c <__aeabi_dmul+0x31c>
 800269a:	e0b3      	b.n	8002804 <__aeabi_dmul+0x484>
 800269c:	2601      	movs	r6, #1
 800269e:	0850      	lsrs	r0, r2, #1
 80026a0:	4032      	ands	r2, r6
 80026a2:	4302      	orrs	r2, r0
 80026a4:	07de      	lsls	r6, r3, #31
 80026a6:	4332      	orrs	r2, r6
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	4c22      	ldr	r4, [pc, #136]	; (8002734 <__aeabi_dmul+0x3b4>)
 80026ac:	4454      	add	r4, sl
 80026ae:	2c00      	cmp	r4, #0
 80026b0:	dd62      	ble.n	8002778 <__aeabi_dmul+0x3f8>
 80026b2:	0751      	lsls	r1, r2, #29
 80026b4:	d009      	beq.n	80026ca <__aeabi_dmul+0x34a>
 80026b6:	200f      	movs	r0, #15
 80026b8:	4010      	ands	r0, r2
 80026ba:	2804      	cmp	r0, #4
 80026bc:	d005      	beq.n	80026ca <__aeabi_dmul+0x34a>
 80026be:	1d10      	adds	r0, r2, #4
 80026c0:	4290      	cmp	r0, r2
 80026c2:	4192      	sbcs	r2, r2
 80026c4:	4252      	negs	r2, r2
 80026c6:	189b      	adds	r3, r3, r2
 80026c8:	0002      	movs	r2, r0
 80026ca:	01d9      	lsls	r1, r3, #7
 80026cc:	d504      	bpl.n	80026d8 <__aeabi_dmul+0x358>
 80026ce:	2480      	movs	r4, #128	; 0x80
 80026d0:	4819      	ldr	r0, [pc, #100]	; (8002738 <__aeabi_dmul+0x3b8>)
 80026d2:	00e4      	lsls	r4, r4, #3
 80026d4:	4003      	ands	r3, r0
 80026d6:	4454      	add	r4, sl
 80026d8:	4818      	ldr	r0, [pc, #96]	; (800273c <__aeabi_dmul+0x3bc>)
 80026da:	4284      	cmp	r4, r0
 80026dc:	dd00      	ble.n	80026e0 <__aeabi_dmul+0x360>
 80026de:	e727      	b.n	8002530 <__aeabi_dmul+0x1b0>
 80026e0:	075e      	lsls	r6, r3, #29
 80026e2:	025b      	lsls	r3, r3, #9
 80026e4:	08d2      	lsrs	r2, r2, #3
 80026e6:	0b1f      	lsrs	r7, r3, #12
 80026e8:	0563      	lsls	r3, r4, #21
 80026ea:	4316      	orrs	r6, r2
 80026ec:	0d5b      	lsrs	r3, r3, #21
 80026ee:	e6b2      	b.n	8002456 <__aeabi_dmul+0xd6>
 80026f0:	2300      	movs	r3, #0
 80026f2:	4699      	mov	r9, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	2704      	movs	r7, #4
 80026f8:	2600      	movs	r6, #0
 80026fa:	469b      	mov	fp, r3
 80026fc:	e664      	b.n	80023c8 <__aeabi_dmul+0x48>
 80026fe:	2303      	movs	r3, #3
 8002700:	9701      	str	r7, [sp, #4]
 8002702:	4681      	mov	r9, r0
 8002704:	270c      	movs	r7, #12
 8002706:	469b      	mov	fp, r3
 8002708:	e65e      	b.n	80023c8 <__aeabi_dmul+0x48>
 800270a:	2201      	movs	r2, #1
 800270c:	2001      	movs	r0, #1
 800270e:	4317      	orrs	r7, r2
 8002710:	2200      	movs	r2, #0
 8002712:	e676      	b.n	8002402 <__aeabi_dmul+0x82>
 8002714:	2303      	movs	r3, #3
 8002716:	2003      	movs	r0, #3
 8002718:	431f      	orrs	r7, r3
 800271a:	4643      	mov	r3, r8
 800271c:	e671      	b.n	8002402 <__aeabi_dmul+0x82>
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	000007ff 	.word	0x000007ff
 8002724:	fffffc01 	.word	0xfffffc01
 8002728:	0800f060 	.word	0x0800f060
 800272c:	800fffff 	.word	0x800fffff
 8002730:	fffffc0d 	.word	0xfffffc0d
 8002734:	000003ff 	.word	0x000003ff
 8002738:	feffffff 	.word	0xfeffffff
 800273c:	000007fe 	.word	0x000007fe
 8002740:	2300      	movs	r3, #0
 8002742:	2780      	movs	r7, #128	; 0x80
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	033f      	lsls	r7, r7, #12
 8002748:	2600      	movs	r6, #0
 800274a:	4b43      	ldr	r3, [pc, #268]	; (8002858 <__aeabi_dmul+0x4d8>)
 800274c:	e683      	b.n	8002456 <__aeabi_dmul+0xd6>
 800274e:	9b01      	ldr	r3, [sp, #4]
 8002750:	0032      	movs	r2, r6
 8002752:	46a4      	mov	ip, r4
 8002754:	4658      	mov	r0, fp
 8002756:	e670      	b.n	800243a <__aeabi_dmul+0xba>
 8002758:	46ac      	mov	ip, r5
 800275a:	e66e      	b.n	800243a <__aeabi_dmul+0xba>
 800275c:	2780      	movs	r7, #128	; 0x80
 800275e:	9901      	ldr	r1, [sp, #4]
 8002760:	033f      	lsls	r7, r7, #12
 8002762:	4239      	tst	r1, r7
 8002764:	d02d      	beq.n	80027c2 <__aeabi_dmul+0x442>
 8002766:	423b      	tst	r3, r7
 8002768:	d12b      	bne.n	80027c2 <__aeabi_dmul+0x442>
 800276a:	431f      	orrs	r7, r3
 800276c:	033f      	lsls	r7, r7, #12
 800276e:	0b3f      	lsrs	r7, r7, #12
 8002770:	9500      	str	r5, [sp, #0]
 8002772:	0016      	movs	r6, r2
 8002774:	4b38      	ldr	r3, [pc, #224]	; (8002858 <__aeabi_dmul+0x4d8>)
 8002776:	e66e      	b.n	8002456 <__aeabi_dmul+0xd6>
 8002778:	2501      	movs	r5, #1
 800277a:	1b2d      	subs	r5, r5, r4
 800277c:	2d38      	cmp	r5, #56	; 0x38
 800277e:	dd00      	ble.n	8002782 <__aeabi_dmul+0x402>
 8002780:	e666      	b.n	8002450 <__aeabi_dmul+0xd0>
 8002782:	2d1f      	cmp	r5, #31
 8002784:	dc40      	bgt.n	8002808 <__aeabi_dmul+0x488>
 8002786:	4835      	ldr	r0, [pc, #212]	; (800285c <__aeabi_dmul+0x4dc>)
 8002788:	001c      	movs	r4, r3
 800278a:	4450      	add	r0, sl
 800278c:	0016      	movs	r6, r2
 800278e:	4082      	lsls	r2, r0
 8002790:	4084      	lsls	r4, r0
 8002792:	40ee      	lsrs	r6, r5
 8002794:	1e50      	subs	r0, r2, #1
 8002796:	4182      	sbcs	r2, r0
 8002798:	4334      	orrs	r4, r6
 800279a:	4314      	orrs	r4, r2
 800279c:	40eb      	lsrs	r3, r5
 800279e:	0762      	lsls	r2, r4, #29
 80027a0:	d009      	beq.n	80027b6 <__aeabi_dmul+0x436>
 80027a2:	220f      	movs	r2, #15
 80027a4:	4022      	ands	r2, r4
 80027a6:	2a04      	cmp	r2, #4
 80027a8:	d005      	beq.n	80027b6 <__aeabi_dmul+0x436>
 80027aa:	0022      	movs	r2, r4
 80027ac:	1d14      	adds	r4, r2, #4
 80027ae:	4294      	cmp	r4, r2
 80027b0:	4180      	sbcs	r0, r0
 80027b2:	4240      	negs	r0, r0
 80027b4:	181b      	adds	r3, r3, r0
 80027b6:	021a      	lsls	r2, r3, #8
 80027b8:	d53e      	bpl.n	8002838 <__aeabi_dmul+0x4b8>
 80027ba:	2301      	movs	r3, #1
 80027bc:	2700      	movs	r7, #0
 80027be:	2600      	movs	r6, #0
 80027c0:	e649      	b.n	8002456 <__aeabi_dmul+0xd6>
 80027c2:	2780      	movs	r7, #128	; 0x80
 80027c4:	9b01      	ldr	r3, [sp, #4]
 80027c6:	033f      	lsls	r7, r7, #12
 80027c8:	431f      	orrs	r7, r3
 80027ca:	033f      	lsls	r7, r7, #12
 80027cc:	0b3f      	lsrs	r7, r7, #12
 80027ce:	9400      	str	r4, [sp, #0]
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <__aeabi_dmul+0x4d8>)
 80027d2:	e640      	b.n	8002456 <__aeabi_dmul+0xd6>
 80027d4:	0003      	movs	r3, r0
 80027d6:	465a      	mov	r2, fp
 80027d8:	3b28      	subs	r3, #40	; 0x28
 80027da:	409a      	lsls	r2, r3
 80027dc:	2600      	movs	r6, #0
 80027de:	9201      	str	r2, [sp, #4]
 80027e0:	e66d      	b.n	80024be <__aeabi_dmul+0x13e>
 80027e2:	4658      	mov	r0, fp
 80027e4:	f000 fce8 	bl	80031b8 <__clzsi2>
 80027e8:	3020      	adds	r0, #32
 80027ea:	e657      	b.n	800249c <__aeabi_dmul+0x11c>
 80027ec:	0003      	movs	r3, r0
 80027ee:	4652      	mov	r2, sl
 80027f0:	3b28      	subs	r3, #40	; 0x28
 80027f2:	409a      	lsls	r2, r3
 80027f4:	0013      	movs	r3, r2
 80027f6:	2200      	movs	r2, #0
 80027f8:	e693      	b.n	8002522 <__aeabi_dmul+0x1a2>
 80027fa:	4650      	mov	r0, sl
 80027fc:	f000 fcdc 	bl	80031b8 <__clzsi2>
 8002800:	3020      	adds	r0, #32
 8002802:	e67b      	b.n	80024fc <__aeabi_dmul+0x17c>
 8002804:	46ca      	mov	sl, r9
 8002806:	e750      	b.n	80026aa <__aeabi_dmul+0x32a>
 8002808:	201f      	movs	r0, #31
 800280a:	001e      	movs	r6, r3
 800280c:	4240      	negs	r0, r0
 800280e:	1b04      	subs	r4, r0, r4
 8002810:	40e6      	lsrs	r6, r4
 8002812:	2d20      	cmp	r5, #32
 8002814:	d003      	beq.n	800281e <__aeabi_dmul+0x49e>
 8002816:	4c12      	ldr	r4, [pc, #72]	; (8002860 <__aeabi_dmul+0x4e0>)
 8002818:	4454      	add	r4, sl
 800281a:	40a3      	lsls	r3, r4
 800281c:	431a      	orrs	r2, r3
 800281e:	1e50      	subs	r0, r2, #1
 8002820:	4182      	sbcs	r2, r0
 8002822:	4332      	orrs	r2, r6
 8002824:	2607      	movs	r6, #7
 8002826:	2700      	movs	r7, #0
 8002828:	4016      	ands	r6, r2
 800282a:	d009      	beq.n	8002840 <__aeabi_dmul+0x4c0>
 800282c:	200f      	movs	r0, #15
 800282e:	2300      	movs	r3, #0
 8002830:	4010      	ands	r0, r2
 8002832:	0014      	movs	r4, r2
 8002834:	2804      	cmp	r0, #4
 8002836:	d1b9      	bne.n	80027ac <__aeabi_dmul+0x42c>
 8002838:	0022      	movs	r2, r4
 800283a:	075e      	lsls	r6, r3, #29
 800283c:	025b      	lsls	r3, r3, #9
 800283e:	0b1f      	lsrs	r7, r3, #12
 8002840:	08d2      	lsrs	r2, r2, #3
 8002842:	4316      	orrs	r6, r2
 8002844:	2300      	movs	r3, #0
 8002846:	e606      	b.n	8002456 <__aeabi_dmul+0xd6>
 8002848:	2780      	movs	r7, #128	; 0x80
 800284a:	033f      	lsls	r7, r7, #12
 800284c:	431f      	orrs	r7, r3
 800284e:	033f      	lsls	r7, r7, #12
 8002850:	0b3f      	lsrs	r7, r7, #12
 8002852:	0016      	movs	r6, r2
 8002854:	4b00      	ldr	r3, [pc, #0]	; (8002858 <__aeabi_dmul+0x4d8>)
 8002856:	e5fe      	b.n	8002456 <__aeabi_dmul+0xd6>
 8002858:	000007ff 	.word	0x000007ff
 800285c:	0000041e 	.word	0x0000041e
 8002860:	0000043e 	.word	0x0000043e

08002864 <__aeabi_dsub>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	4657      	mov	r7, sl
 8002868:	464e      	mov	r6, r9
 800286a:	4645      	mov	r5, r8
 800286c:	46de      	mov	lr, fp
 800286e:	000c      	movs	r4, r1
 8002870:	0309      	lsls	r1, r1, #12
 8002872:	b5e0      	push	{r5, r6, r7, lr}
 8002874:	0a49      	lsrs	r1, r1, #9
 8002876:	0f46      	lsrs	r6, r0, #29
 8002878:	005f      	lsls	r7, r3, #1
 800287a:	4331      	orrs	r1, r6
 800287c:	031e      	lsls	r6, r3, #12
 800287e:	0fdb      	lsrs	r3, r3, #31
 8002880:	0a76      	lsrs	r6, r6, #9
 8002882:	469b      	mov	fp, r3
 8002884:	0f53      	lsrs	r3, r2, #29
 8002886:	4333      	orrs	r3, r6
 8002888:	4ec8      	ldr	r6, [pc, #800]	; (8002bac <__aeabi_dsub+0x348>)
 800288a:	0065      	lsls	r5, r4, #1
 800288c:	00c0      	lsls	r0, r0, #3
 800288e:	0fe4      	lsrs	r4, r4, #31
 8002890:	00d2      	lsls	r2, r2, #3
 8002892:	0d6d      	lsrs	r5, r5, #21
 8002894:	46a2      	mov	sl, r4
 8002896:	4681      	mov	r9, r0
 8002898:	0d7f      	lsrs	r7, r7, #21
 800289a:	469c      	mov	ip, r3
 800289c:	4690      	mov	r8, r2
 800289e:	42b7      	cmp	r7, r6
 80028a0:	d100      	bne.n	80028a4 <__aeabi_dsub+0x40>
 80028a2:	e0b9      	b.n	8002a18 <__aeabi_dsub+0x1b4>
 80028a4:	465b      	mov	r3, fp
 80028a6:	2601      	movs	r6, #1
 80028a8:	4073      	eors	r3, r6
 80028aa:	469b      	mov	fp, r3
 80028ac:	1bee      	subs	r6, r5, r7
 80028ae:	45a3      	cmp	fp, r4
 80028b0:	d100      	bne.n	80028b4 <__aeabi_dsub+0x50>
 80028b2:	e083      	b.n	80029bc <__aeabi_dsub+0x158>
 80028b4:	2e00      	cmp	r6, #0
 80028b6:	dd63      	ble.n	8002980 <__aeabi_dsub+0x11c>
 80028b8:	2f00      	cmp	r7, #0
 80028ba:	d000      	beq.n	80028be <__aeabi_dsub+0x5a>
 80028bc:	e0b1      	b.n	8002a22 <__aeabi_dsub+0x1be>
 80028be:	4663      	mov	r3, ip
 80028c0:	4313      	orrs	r3, r2
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0x62>
 80028c4:	e123      	b.n	8002b0e <__aeabi_dsub+0x2aa>
 80028c6:	1e73      	subs	r3, r6, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d000      	beq.n	80028ce <__aeabi_dsub+0x6a>
 80028cc:	e1ba      	b.n	8002c44 <__aeabi_dsub+0x3e0>
 80028ce:	1a86      	subs	r6, r0, r2
 80028d0:	4663      	mov	r3, ip
 80028d2:	42b0      	cmp	r0, r6
 80028d4:	4180      	sbcs	r0, r0
 80028d6:	2501      	movs	r5, #1
 80028d8:	1ac9      	subs	r1, r1, r3
 80028da:	4240      	negs	r0, r0
 80028dc:	1a09      	subs	r1, r1, r0
 80028de:	020b      	lsls	r3, r1, #8
 80028e0:	d400      	bmi.n	80028e4 <__aeabi_dsub+0x80>
 80028e2:	e147      	b.n	8002b74 <__aeabi_dsub+0x310>
 80028e4:	0249      	lsls	r1, r1, #9
 80028e6:	0a4b      	lsrs	r3, r1, #9
 80028e8:	4698      	mov	r8, r3
 80028ea:	4643      	mov	r3, r8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d100      	bne.n	80028f2 <__aeabi_dsub+0x8e>
 80028f0:	e189      	b.n	8002c06 <__aeabi_dsub+0x3a2>
 80028f2:	4640      	mov	r0, r8
 80028f4:	f000 fc60 	bl	80031b8 <__clzsi2>
 80028f8:	0003      	movs	r3, r0
 80028fa:	3b08      	subs	r3, #8
 80028fc:	2b1f      	cmp	r3, #31
 80028fe:	dd00      	ble.n	8002902 <__aeabi_dsub+0x9e>
 8002900:	e17c      	b.n	8002bfc <__aeabi_dsub+0x398>
 8002902:	2220      	movs	r2, #32
 8002904:	0030      	movs	r0, r6
 8002906:	1ad2      	subs	r2, r2, r3
 8002908:	4641      	mov	r1, r8
 800290a:	40d0      	lsrs	r0, r2
 800290c:	4099      	lsls	r1, r3
 800290e:	0002      	movs	r2, r0
 8002910:	409e      	lsls	r6, r3
 8002912:	430a      	orrs	r2, r1
 8002914:	429d      	cmp	r5, r3
 8002916:	dd00      	ble.n	800291a <__aeabi_dsub+0xb6>
 8002918:	e16a      	b.n	8002bf0 <__aeabi_dsub+0x38c>
 800291a:	1b5d      	subs	r5, r3, r5
 800291c:	1c6b      	adds	r3, r5, #1
 800291e:	2b1f      	cmp	r3, #31
 8002920:	dd00      	ble.n	8002924 <__aeabi_dsub+0xc0>
 8002922:	e194      	b.n	8002c4e <__aeabi_dsub+0x3ea>
 8002924:	2120      	movs	r1, #32
 8002926:	0010      	movs	r0, r2
 8002928:	0035      	movs	r5, r6
 800292a:	1ac9      	subs	r1, r1, r3
 800292c:	408e      	lsls	r6, r1
 800292e:	40da      	lsrs	r2, r3
 8002930:	4088      	lsls	r0, r1
 8002932:	40dd      	lsrs	r5, r3
 8002934:	1e71      	subs	r1, r6, #1
 8002936:	418e      	sbcs	r6, r1
 8002938:	0011      	movs	r1, r2
 800293a:	2207      	movs	r2, #7
 800293c:	4328      	orrs	r0, r5
 800293e:	2500      	movs	r5, #0
 8002940:	4306      	orrs	r6, r0
 8002942:	4032      	ands	r2, r6
 8002944:	2a00      	cmp	r2, #0
 8002946:	d009      	beq.n	800295c <__aeabi_dsub+0xf8>
 8002948:	230f      	movs	r3, #15
 800294a:	4033      	ands	r3, r6
 800294c:	2b04      	cmp	r3, #4
 800294e:	d005      	beq.n	800295c <__aeabi_dsub+0xf8>
 8002950:	1d33      	adds	r3, r6, #4
 8002952:	42b3      	cmp	r3, r6
 8002954:	41b6      	sbcs	r6, r6
 8002956:	4276      	negs	r6, r6
 8002958:	1989      	adds	r1, r1, r6
 800295a:	001e      	movs	r6, r3
 800295c:	020b      	lsls	r3, r1, #8
 800295e:	d400      	bmi.n	8002962 <__aeabi_dsub+0xfe>
 8002960:	e23d      	b.n	8002dde <__aeabi_dsub+0x57a>
 8002962:	1c6a      	adds	r2, r5, #1
 8002964:	4b91      	ldr	r3, [pc, #580]	; (8002bac <__aeabi_dsub+0x348>)
 8002966:	0555      	lsls	r5, r2, #21
 8002968:	0d6d      	lsrs	r5, r5, #21
 800296a:	429a      	cmp	r2, r3
 800296c:	d100      	bne.n	8002970 <__aeabi_dsub+0x10c>
 800296e:	e119      	b.n	8002ba4 <__aeabi_dsub+0x340>
 8002970:	4a8f      	ldr	r2, [pc, #572]	; (8002bb0 <__aeabi_dsub+0x34c>)
 8002972:	08f6      	lsrs	r6, r6, #3
 8002974:	400a      	ands	r2, r1
 8002976:	0757      	lsls	r7, r2, #29
 8002978:	0252      	lsls	r2, r2, #9
 800297a:	4337      	orrs	r7, r6
 800297c:	0b12      	lsrs	r2, r2, #12
 800297e:	e09b      	b.n	8002ab8 <__aeabi_dsub+0x254>
 8002980:	2e00      	cmp	r6, #0
 8002982:	d000      	beq.n	8002986 <__aeabi_dsub+0x122>
 8002984:	e0c5      	b.n	8002b12 <__aeabi_dsub+0x2ae>
 8002986:	1c6e      	adds	r6, r5, #1
 8002988:	0576      	lsls	r6, r6, #21
 800298a:	0d76      	lsrs	r6, r6, #21
 800298c:	2e01      	cmp	r6, #1
 800298e:	dc00      	bgt.n	8002992 <__aeabi_dsub+0x12e>
 8002990:	e148      	b.n	8002c24 <__aeabi_dsub+0x3c0>
 8002992:	4667      	mov	r7, ip
 8002994:	1a86      	subs	r6, r0, r2
 8002996:	1bcb      	subs	r3, r1, r7
 8002998:	42b0      	cmp	r0, r6
 800299a:	41bf      	sbcs	r7, r7
 800299c:	427f      	negs	r7, r7
 800299e:	46b8      	mov	r8, r7
 80029a0:	001f      	movs	r7, r3
 80029a2:	4643      	mov	r3, r8
 80029a4:	1aff      	subs	r7, r7, r3
 80029a6:	003b      	movs	r3, r7
 80029a8:	46b8      	mov	r8, r7
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	d500      	bpl.n	80029b0 <__aeabi_dsub+0x14c>
 80029ae:	e15f      	b.n	8002c70 <__aeabi_dsub+0x40c>
 80029b0:	4337      	orrs	r7, r6
 80029b2:	d19a      	bne.n	80028ea <__aeabi_dsub+0x86>
 80029b4:	2200      	movs	r2, #0
 80029b6:	2400      	movs	r4, #0
 80029b8:	2500      	movs	r5, #0
 80029ba:	e079      	b.n	8002ab0 <__aeabi_dsub+0x24c>
 80029bc:	2e00      	cmp	r6, #0
 80029be:	dc00      	bgt.n	80029c2 <__aeabi_dsub+0x15e>
 80029c0:	e0fa      	b.n	8002bb8 <__aeabi_dsub+0x354>
 80029c2:	2f00      	cmp	r7, #0
 80029c4:	d100      	bne.n	80029c8 <__aeabi_dsub+0x164>
 80029c6:	e08d      	b.n	8002ae4 <__aeabi_dsub+0x280>
 80029c8:	4b78      	ldr	r3, [pc, #480]	; (8002bac <__aeabi_dsub+0x348>)
 80029ca:	429d      	cmp	r5, r3
 80029cc:	d067      	beq.n	8002a9e <__aeabi_dsub+0x23a>
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	4667      	mov	r7, ip
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	431f      	orrs	r7, r3
 80029d6:	46bc      	mov	ip, r7
 80029d8:	2e38      	cmp	r6, #56	; 0x38
 80029da:	dc00      	bgt.n	80029de <__aeabi_dsub+0x17a>
 80029dc:	e152      	b.n	8002c84 <__aeabi_dsub+0x420>
 80029de:	4663      	mov	r3, ip
 80029e0:	4313      	orrs	r3, r2
 80029e2:	1e5a      	subs	r2, r3, #1
 80029e4:	4193      	sbcs	r3, r2
 80029e6:	181e      	adds	r6, r3, r0
 80029e8:	4286      	cmp	r6, r0
 80029ea:	4180      	sbcs	r0, r0
 80029ec:	4240      	negs	r0, r0
 80029ee:	1809      	adds	r1, r1, r0
 80029f0:	020b      	lsls	r3, r1, #8
 80029f2:	d400      	bmi.n	80029f6 <__aeabi_dsub+0x192>
 80029f4:	e0be      	b.n	8002b74 <__aeabi_dsub+0x310>
 80029f6:	4b6d      	ldr	r3, [pc, #436]	; (8002bac <__aeabi_dsub+0x348>)
 80029f8:	3501      	adds	r5, #1
 80029fa:	429d      	cmp	r5, r3
 80029fc:	d100      	bne.n	8002a00 <__aeabi_dsub+0x19c>
 80029fe:	e0d2      	b.n	8002ba6 <__aeabi_dsub+0x342>
 8002a00:	4a6b      	ldr	r2, [pc, #428]	; (8002bb0 <__aeabi_dsub+0x34c>)
 8002a02:	0873      	lsrs	r3, r6, #1
 8002a04:	400a      	ands	r2, r1
 8002a06:	2101      	movs	r1, #1
 8002a08:	400e      	ands	r6, r1
 8002a0a:	431e      	orrs	r6, r3
 8002a0c:	0851      	lsrs	r1, r2, #1
 8002a0e:	07d3      	lsls	r3, r2, #31
 8002a10:	2207      	movs	r2, #7
 8002a12:	431e      	orrs	r6, r3
 8002a14:	4032      	ands	r2, r6
 8002a16:	e795      	b.n	8002944 <__aeabi_dsub+0xe0>
 8002a18:	001e      	movs	r6, r3
 8002a1a:	4316      	orrs	r6, r2
 8002a1c:	d000      	beq.n	8002a20 <__aeabi_dsub+0x1bc>
 8002a1e:	e745      	b.n	80028ac <__aeabi_dsub+0x48>
 8002a20:	e740      	b.n	80028a4 <__aeabi_dsub+0x40>
 8002a22:	4b62      	ldr	r3, [pc, #392]	; (8002bac <__aeabi_dsub+0x348>)
 8002a24:	429d      	cmp	r5, r3
 8002a26:	d03a      	beq.n	8002a9e <__aeabi_dsub+0x23a>
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	4667      	mov	r7, ip
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	431f      	orrs	r7, r3
 8002a30:	46bc      	mov	ip, r7
 8002a32:	2e38      	cmp	r6, #56	; 0x38
 8002a34:	dd00      	ble.n	8002a38 <__aeabi_dsub+0x1d4>
 8002a36:	e0eb      	b.n	8002c10 <__aeabi_dsub+0x3ac>
 8002a38:	2e1f      	cmp	r6, #31
 8002a3a:	dc00      	bgt.n	8002a3e <__aeabi_dsub+0x1da>
 8002a3c:	e13a      	b.n	8002cb4 <__aeabi_dsub+0x450>
 8002a3e:	0033      	movs	r3, r6
 8002a40:	4667      	mov	r7, ip
 8002a42:	3b20      	subs	r3, #32
 8002a44:	40df      	lsrs	r7, r3
 8002a46:	003b      	movs	r3, r7
 8002a48:	2e20      	cmp	r6, #32
 8002a4a:	d005      	beq.n	8002a58 <__aeabi_dsub+0x1f4>
 8002a4c:	2740      	movs	r7, #64	; 0x40
 8002a4e:	1bbf      	subs	r7, r7, r6
 8002a50:	4666      	mov	r6, ip
 8002a52:	40be      	lsls	r6, r7
 8002a54:	4332      	orrs	r2, r6
 8002a56:	4690      	mov	r8, r2
 8002a58:	4646      	mov	r6, r8
 8002a5a:	1e72      	subs	r2, r6, #1
 8002a5c:	4196      	sbcs	r6, r2
 8002a5e:	4333      	orrs	r3, r6
 8002a60:	e0da      	b.n	8002c18 <__aeabi_dsub+0x3b4>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d100      	bne.n	8002a68 <__aeabi_dsub+0x204>
 8002a66:	e214      	b.n	8002e92 <__aeabi_dsub+0x62e>
 8002a68:	4663      	mov	r3, ip
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	d100      	bne.n	8002a70 <__aeabi_dsub+0x20c>
 8002a6e:	e168      	b.n	8002d42 <__aeabi_dsub+0x4de>
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	074e      	lsls	r6, r1, #29
 8002a74:	08c0      	lsrs	r0, r0, #3
 8002a76:	08c9      	lsrs	r1, r1, #3
 8002a78:	031b      	lsls	r3, r3, #12
 8002a7a:	4306      	orrs	r6, r0
 8002a7c:	4219      	tst	r1, r3
 8002a7e:	d008      	beq.n	8002a92 <__aeabi_dsub+0x22e>
 8002a80:	4660      	mov	r0, ip
 8002a82:	08c0      	lsrs	r0, r0, #3
 8002a84:	4218      	tst	r0, r3
 8002a86:	d104      	bne.n	8002a92 <__aeabi_dsub+0x22e>
 8002a88:	4663      	mov	r3, ip
 8002a8a:	0001      	movs	r1, r0
 8002a8c:	08d2      	lsrs	r2, r2, #3
 8002a8e:	075e      	lsls	r6, r3, #29
 8002a90:	4316      	orrs	r6, r2
 8002a92:	00f3      	lsls	r3, r6, #3
 8002a94:	4699      	mov	r9, r3
 8002a96:	00c9      	lsls	r1, r1, #3
 8002a98:	0f72      	lsrs	r2, r6, #29
 8002a9a:	4d44      	ldr	r5, [pc, #272]	; (8002bac <__aeabi_dsub+0x348>)
 8002a9c:	4311      	orrs	r1, r2
 8002a9e:	464b      	mov	r3, r9
 8002aa0:	08de      	lsrs	r6, r3, #3
 8002aa2:	4b42      	ldr	r3, [pc, #264]	; (8002bac <__aeabi_dsub+0x348>)
 8002aa4:	074f      	lsls	r7, r1, #29
 8002aa6:	4337      	orrs	r7, r6
 8002aa8:	08ca      	lsrs	r2, r1, #3
 8002aaa:	429d      	cmp	r5, r3
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x24c>
 8002aae:	e06e      	b.n	8002b8e <__aeabi_dsub+0x32a>
 8002ab0:	0312      	lsls	r2, r2, #12
 8002ab2:	056d      	lsls	r5, r5, #21
 8002ab4:	0b12      	lsrs	r2, r2, #12
 8002ab6:	0d6d      	lsrs	r5, r5, #21
 8002ab8:	2100      	movs	r1, #0
 8002aba:	0312      	lsls	r2, r2, #12
 8002abc:	0b13      	lsrs	r3, r2, #12
 8002abe:	0d0a      	lsrs	r2, r1, #20
 8002ac0:	0512      	lsls	r2, r2, #20
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <__aeabi_dsub+0x350>)
 8002ac6:	052d      	lsls	r5, r5, #20
 8002ac8:	4013      	ands	r3, r2
 8002aca:	432b      	orrs	r3, r5
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	07e4      	lsls	r4, r4, #31
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	4323      	orrs	r3, r4
 8002ad4:	0038      	movs	r0, r7
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	bc3c      	pop	{r2, r3, r4, r5}
 8002ada:	4690      	mov	r8, r2
 8002adc:	4699      	mov	r9, r3
 8002ade:	46a2      	mov	sl, r4
 8002ae0:	46ab      	mov	fp, r5
 8002ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ae4:	4663      	mov	r3, ip
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	d011      	beq.n	8002b0e <__aeabi_dsub+0x2aa>
 8002aea:	1e73      	subs	r3, r6, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d000      	beq.n	8002af2 <__aeabi_dsub+0x28e>
 8002af0:	e107      	b.n	8002d02 <__aeabi_dsub+0x49e>
 8002af2:	1886      	adds	r6, r0, r2
 8002af4:	4286      	cmp	r6, r0
 8002af6:	4180      	sbcs	r0, r0
 8002af8:	4461      	add	r1, ip
 8002afa:	4240      	negs	r0, r0
 8002afc:	1809      	adds	r1, r1, r0
 8002afe:	2501      	movs	r5, #1
 8002b00:	020b      	lsls	r3, r1, #8
 8002b02:	d537      	bpl.n	8002b74 <__aeabi_dsub+0x310>
 8002b04:	2502      	movs	r5, #2
 8002b06:	e77b      	b.n	8002a00 <__aeabi_dsub+0x19c>
 8002b08:	003e      	movs	r6, r7
 8002b0a:	4661      	mov	r1, ip
 8002b0c:	4691      	mov	r9, r2
 8002b0e:	0035      	movs	r5, r6
 8002b10:	e7c5      	b.n	8002a9e <__aeabi_dsub+0x23a>
 8002b12:	465c      	mov	r4, fp
 8002b14:	2d00      	cmp	r5, #0
 8002b16:	d000      	beq.n	8002b1a <__aeabi_dsub+0x2b6>
 8002b18:	e0e1      	b.n	8002cde <__aeabi_dsub+0x47a>
 8002b1a:	000b      	movs	r3, r1
 8002b1c:	4303      	orrs	r3, r0
 8002b1e:	d0f3      	beq.n	8002b08 <__aeabi_dsub+0x2a4>
 8002b20:	1c73      	adds	r3, r6, #1
 8002b22:	d100      	bne.n	8002b26 <__aeabi_dsub+0x2c2>
 8002b24:	e1ac      	b.n	8002e80 <__aeabi_dsub+0x61c>
 8002b26:	4b21      	ldr	r3, [pc, #132]	; (8002bac <__aeabi_dsub+0x348>)
 8002b28:	429f      	cmp	r7, r3
 8002b2a:	d100      	bne.n	8002b2e <__aeabi_dsub+0x2ca>
 8002b2c:	e13a      	b.n	8002da4 <__aeabi_dsub+0x540>
 8002b2e:	43f3      	mvns	r3, r6
 8002b30:	2b38      	cmp	r3, #56	; 0x38
 8002b32:	dd00      	ble.n	8002b36 <__aeabi_dsub+0x2d2>
 8002b34:	e16f      	b.n	8002e16 <__aeabi_dsub+0x5b2>
 8002b36:	2b1f      	cmp	r3, #31
 8002b38:	dd00      	ble.n	8002b3c <__aeabi_dsub+0x2d8>
 8002b3a:	e18c      	b.n	8002e56 <__aeabi_dsub+0x5f2>
 8002b3c:	2520      	movs	r5, #32
 8002b3e:	000e      	movs	r6, r1
 8002b40:	1aed      	subs	r5, r5, r3
 8002b42:	40ae      	lsls	r6, r5
 8002b44:	46b0      	mov	r8, r6
 8002b46:	0006      	movs	r6, r0
 8002b48:	46aa      	mov	sl, r5
 8002b4a:	40de      	lsrs	r6, r3
 8002b4c:	4645      	mov	r5, r8
 8002b4e:	4335      	orrs	r5, r6
 8002b50:	002e      	movs	r6, r5
 8002b52:	4655      	mov	r5, sl
 8002b54:	40d9      	lsrs	r1, r3
 8002b56:	40a8      	lsls	r0, r5
 8002b58:	4663      	mov	r3, ip
 8002b5a:	1e45      	subs	r5, r0, #1
 8002b5c:	41a8      	sbcs	r0, r5
 8002b5e:	1a5b      	subs	r3, r3, r1
 8002b60:	469c      	mov	ip, r3
 8002b62:	4330      	orrs	r0, r6
 8002b64:	1a16      	subs	r6, r2, r0
 8002b66:	42b2      	cmp	r2, r6
 8002b68:	4192      	sbcs	r2, r2
 8002b6a:	4663      	mov	r3, ip
 8002b6c:	4252      	negs	r2, r2
 8002b6e:	1a99      	subs	r1, r3, r2
 8002b70:	003d      	movs	r5, r7
 8002b72:	e6b4      	b.n	80028de <__aeabi_dsub+0x7a>
 8002b74:	2207      	movs	r2, #7
 8002b76:	4032      	ands	r2, r6
 8002b78:	2a00      	cmp	r2, #0
 8002b7a:	d000      	beq.n	8002b7e <__aeabi_dsub+0x31a>
 8002b7c:	e6e4      	b.n	8002948 <__aeabi_dsub+0xe4>
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <__aeabi_dsub+0x348>)
 8002b80:	08f6      	lsrs	r6, r6, #3
 8002b82:	074f      	lsls	r7, r1, #29
 8002b84:	4337      	orrs	r7, r6
 8002b86:	08ca      	lsrs	r2, r1, #3
 8002b88:	429d      	cmp	r5, r3
 8002b8a:	d000      	beq.n	8002b8e <__aeabi_dsub+0x32a>
 8002b8c:	e790      	b.n	8002ab0 <__aeabi_dsub+0x24c>
 8002b8e:	003b      	movs	r3, r7
 8002b90:	4313      	orrs	r3, r2
 8002b92:	d100      	bne.n	8002b96 <__aeabi_dsub+0x332>
 8002b94:	e1a6      	b.n	8002ee4 <__aeabi_dsub+0x680>
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	031b      	lsls	r3, r3, #12
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	0312      	lsls	r2, r2, #12
 8002b9e:	0b12      	lsrs	r2, r2, #12
 8002ba0:	4d02      	ldr	r5, [pc, #8]	; (8002bac <__aeabi_dsub+0x348>)
 8002ba2:	e789      	b.n	8002ab8 <__aeabi_dsub+0x254>
 8002ba4:	0015      	movs	r5, r2
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2700      	movs	r7, #0
 8002baa:	e785      	b.n	8002ab8 <__aeabi_dsub+0x254>
 8002bac:	000007ff 	.word	0x000007ff
 8002bb0:	ff7fffff 	.word	0xff7fffff
 8002bb4:	800fffff 	.word	0x800fffff
 8002bb8:	2e00      	cmp	r6, #0
 8002bba:	d000      	beq.n	8002bbe <__aeabi_dsub+0x35a>
 8002bbc:	e0c7      	b.n	8002d4e <__aeabi_dsub+0x4ea>
 8002bbe:	1c6b      	adds	r3, r5, #1
 8002bc0:	055e      	lsls	r6, r3, #21
 8002bc2:	0d76      	lsrs	r6, r6, #21
 8002bc4:	2e01      	cmp	r6, #1
 8002bc6:	dc00      	bgt.n	8002bca <__aeabi_dsub+0x366>
 8002bc8:	e0f0      	b.n	8002dac <__aeabi_dsub+0x548>
 8002bca:	4dc8      	ldr	r5, [pc, #800]	; (8002eec <__aeabi_dsub+0x688>)
 8002bcc:	42ab      	cmp	r3, r5
 8002bce:	d100      	bne.n	8002bd2 <__aeabi_dsub+0x36e>
 8002bd0:	e0b9      	b.n	8002d46 <__aeabi_dsub+0x4e2>
 8002bd2:	1885      	adds	r5, r0, r2
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	4285      	cmp	r5, r0
 8002bd8:	4189      	sbcs	r1, r1
 8002bda:	4462      	add	r2, ip
 8002bdc:	4249      	negs	r1, r1
 8002bde:	1851      	adds	r1, r2, r1
 8002be0:	2207      	movs	r2, #7
 8002be2:	07ce      	lsls	r6, r1, #31
 8002be4:	086d      	lsrs	r5, r5, #1
 8002be6:	432e      	orrs	r6, r5
 8002be8:	0849      	lsrs	r1, r1, #1
 8002bea:	4032      	ands	r2, r6
 8002bec:	001d      	movs	r5, r3
 8002bee:	e6a9      	b.n	8002944 <__aeabi_dsub+0xe0>
 8002bf0:	49bf      	ldr	r1, [pc, #764]	; (8002ef0 <__aeabi_dsub+0x68c>)
 8002bf2:	1aed      	subs	r5, r5, r3
 8002bf4:	4011      	ands	r1, r2
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	4032      	ands	r2, r6
 8002bfa:	e6a3      	b.n	8002944 <__aeabi_dsub+0xe0>
 8002bfc:	0032      	movs	r2, r6
 8002bfe:	3828      	subs	r0, #40	; 0x28
 8002c00:	4082      	lsls	r2, r0
 8002c02:	2600      	movs	r6, #0
 8002c04:	e686      	b.n	8002914 <__aeabi_dsub+0xb0>
 8002c06:	0030      	movs	r0, r6
 8002c08:	f000 fad6 	bl	80031b8 <__clzsi2>
 8002c0c:	3020      	adds	r0, #32
 8002c0e:	e673      	b.n	80028f8 <__aeabi_dsub+0x94>
 8002c10:	4663      	mov	r3, ip
 8002c12:	4313      	orrs	r3, r2
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	4193      	sbcs	r3, r2
 8002c18:	1ac6      	subs	r6, r0, r3
 8002c1a:	42b0      	cmp	r0, r6
 8002c1c:	4180      	sbcs	r0, r0
 8002c1e:	4240      	negs	r0, r0
 8002c20:	1a09      	subs	r1, r1, r0
 8002c22:	e65c      	b.n	80028de <__aeabi_dsub+0x7a>
 8002c24:	000e      	movs	r6, r1
 8002c26:	4667      	mov	r7, ip
 8002c28:	4306      	orrs	r6, r0
 8002c2a:	4317      	orrs	r7, r2
 8002c2c:	2d00      	cmp	r5, #0
 8002c2e:	d15e      	bne.n	8002cee <__aeabi_dsub+0x48a>
 8002c30:	2e00      	cmp	r6, #0
 8002c32:	d000      	beq.n	8002c36 <__aeabi_dsub+0x3d2>
 8002c34:	e0f3      	b.n	8002e1e <__aeabi_dsub+0x5ba>
 8002c36:	2f00      	cmp	r7, #0
 8002c38:	d100      	bne.n	8002c3c <__aeabi_dsub+0x3d8>
 8002c3a:	e11e      	b.n	8002e7a <__aeabi_dsub+0x616>
 8002c3c:	465c      	mov	r4, fp
 8002c3e:	4661      	mov	r1, ip
 8002c40:	4691      	mov	r9, r2
 8002c42:	e72c      	b.n	8002a9e <__aeabi_dsub+0x23a>
 8002c44:	4fa9      	ldr	r7, [pc, #676]	; (8002eec <__aeabi_dsub+0x688>)
 8002c46:	42be      	cmp	r6, r7
 8002c48:	d07b      	beq.n	8002d42 <__aeabi_dsub+0x4de>
 8002c4a:	001e      	movs	r6, r3
 8002c4c:	e6f1      	b.n	8002a32 <__aeabi_dsub+0x1ce>
 8002c4e:	0010      	movs	r0, r2
 8002c50:	3d1f      	subs	r5, #31
 8002c52:	40e8      	lsrs	r0, r5
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d003      	beq.n	8002c60 <__aeabi_dsub+0x3fc>
 8002c58:	2140      	movs	r1, #64	; 0x40
 8002c5a:	1acb      	subs	r3, r1, r3
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	4316      	orrs	r6, r2
 8002c60:	1e73      	subs	r3, r6, #1
 8002c62:	419e      	sbcs	r6, r3
 8002c64:	2207      	movs	r2, #7
 8002c66:	4306      	orrs	r6, r0
 8002c68:	4032      	ands	r2, r6
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	2500      	movs	r5, #0
 8002c6e:	e783      	b.n	8002b78 <__aeabi_dsub+0x314>
 8002c70:	1a16      	subs	r6, r2, r0
 8002c72:	4663      	mov	r3, ip
 8002c74:	42b2      	cmp	r2, r6
 8002c76:	4180      	sbcs	r0, r0
 8002c78:	1a59      	subs	r1, r3, r1
 8002c7a:	4240      	negs	r0, r0
 8002c7c:	1a0b      	subs	r3, r1, r0
 8002c7e:	4698      	mov	r8, r3
 8002c80:	465c      	mov	r4, fp
 8002c82:	e632      	b.n	80028ea <__aeabi_dsub+0x86>
 8002c84:	2e1f      	cmp	r6, #31
 8002c86:	dd00      	ble.n	8002c8a <__aeabi_dsub+0x426>
 8002c88:	e0ab      	b.n	8002de2 <__aeabi_dsub+0x57e>
 8002c8a:	2720      	movs	r7, #32
 8002c8c:	1bbb      	subs	r3, r7, r6
 8002c8e:	469a      	mov	sl, r3
 8002c90:	4663      	mov	r3, ip
 8002c92:	4657      	mov	r7, sl
 8002c94:	40bb      	lsls	r3, r7
 8002c96:	4699      	mov	r9, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	464f      	mov	r7, r9
 8002c9c:	40f3      	lsrs	r3, r6
 8002c9e:	431f      	orrs	r7, r3
 8002ca0:	003b      	movs	r3, r7
 8002ca2:	4657      	mov	r7, sl
 8002ca4:	40ba      	lsls	r2, r7
 8002ca6:	1e57      	subs	r7, r2, #1
 8002ca8:	41ba      	sbcs	r2, r7
 8002caa:	4313      	orrs	r3, r2
 8002cac:	4662      	mov	r2, ip
 8002cae:	40f2      	lsrs	r2, r6
 8002cb0:	1889      	adds	r1, r1, r2
 8002cb2:	e698      	b.n	80029e6 <__aeabi_dsub+0x182>
 8002cb4:	2720      	movs	r7, #32
 8002cb6:	1bbb      	subs	r3, r7, r6
 8002cb8:	469a      	mov	sl, r3
 8002cba:	4663      	mov	r3, ip
 8002cbc:	4657      	mov	r7, sl
 8002cbe:	40bb      	lsls	r3, r7
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	0013      	movs	r3, r2
 8002cc4:	464f      	mov	r7, r9
 8002cc6:	40f3      	lsrs	r3, r6
 8002cc8:	431f      	orrs	r7, r3
 8002cca:	003b      	movs	r3, r7
 8002ccc:	4657      	mov	r7, sl
 8002cce:	40ba      	lsls	r2, r7
 8002cd0:	1e57      	subs	r7, r2, #1
 8002cd2:	41ba      	sbcs	r2, r7
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	4662      	mov	r2, ip
 8002cd8:	40f2      	lsrs	r2, r6
 8002cda:	1a89      	subs	r1, r1, r2
 8002cdc:	e79c      	b.n	8002c18 <__aeabi_dsub+0x3b4>
 8002cde:	4b83      	ldr	r3, [pc, #524]	; (8002eec <__aeabi_dsub+0x688>)
 8002ce0:	429f      	cmp	r7, r3
 8002ce2:	d05f      	beq.n	8002da4 <__aeabi_dsub+0x540>
 8002ce4:	2580      	movs	r5, #128	; 0x80
 8002ce6:	042d      	lsls	r5, r5, #16
 8002ce8:	4273      	negs	r3, r6
 8002cea:	4329      	orrs	r1, r5
 8002cec:	e720      	b.n	8002b30 <__aeabi_dsub+0x2cc>
 8002cee:	2e00      	cmp	r6, #0
 8002cf0:	d10c      	bne.n	8002d0c <__aeabi_dsub+0x4a8>
 8002cf2:	2f00      	cmp	r7, #0
 8002cf4:	d100      	bne.n	8002cf8 <__aeabi_dsub+0x494>
 8002cf6:	e0d0      	b.n	8002e9a <__aeabi_dsub+0x636>
 8002cf8:	465c      	mov	r4, fp
 8002cfa:	4661      	mov	r1, ip
 8002cfc:	4691      	mov	r9, r2
 8002cfe:	4d7b      	ldr	r5, [pc, #492]	; (8002eec <__aeabi_dsub+0x688>)
 8002d00:	e6cd      	b.n	8002a9e <__aeabi_dsub+0x23a>
 8002d02:	4f7a      	ldr	r7, [pc, #488]	; (8002eec <__aeabi_dsub+0x688>)
 8002d04:	42be      	cmp	r6, r7
 8002d06:	d01c      	beq.n	8002d42 <__aeabi_dsub+0x4de>
 8002d08:	001e      	movs	r6, r3
 8002d0a:	e665      	b.n	80029d8 <__aeabi_dsub+0x174>
 8002d0c:	2f00      	cmp	r7, #0
 8002d0e:	d018      	beq.n	8002d42 <__aeabi_dsub+0x4de>
 8002d10:	08c0      	lsrs	r0, r0, #3
 8002d12:	074e      	lsls	r6, r1, #29
 8002d14:	4306      	orrs	r6, r0
 8002d16:	2080      	movs	r0, #128	; 0x80
 8002d18:	08c9      	lsrs	r1, r1, #3
 8002d1a:	0300      	lsls	r0, r0, #12
 8002d1c:	4201      	tst	r1, r0
 8002d1e:	d008      	beq.n	8002d32 <__aeabi_dsub+0x4ce>
 8002d20:	4663      	mov	r3, ip
 8002d22:	08dc      	lsrs	r4, r3, #3
 8002d24:	4204      	tst	r4, r0
 8002d26:	d104      	bne.n	8002d32 <__aeabi_dsub+0x4ce>
 8002d28:	0021      	movs	r1, r4
 8002d2a:	46da      	mov	sl, fp
 8002d2c:	08d2      	lsrs	r2, r2, #3
 8002d2e:	075e      	lsls	r6, r3, #29
 8002d30:	4316      	orrs	r6, r2
 8002d32:	00f3      	lsls	r3, r6, #3
 8002d34:	4699      	mov	r9, r3
 8002d36:	2401      	movs	r4, #1
 8002d38:	4653      	mov	r3, sl
 8002d3a:	00c9      	lsls	r1, r1, #3
 8002d3c:	0f72      	lsrs	r2, r6, #29
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	401c      	ands	r4, r3
 8002d42:	4d6a      	ldr	r5, [pc, #424]	; (8002eec <__aeabi_dsub+0x688>)
 8002d44:	e6ab      	b.n	8002a9e <__aeabi_dsub+0x23a>
 8002d46:	001d      	movs	r5, r3
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2700      	movs	r7, #0
 8002d4c:	e6b4      	b.n	8002ab8 <__aeabi_dsub+0x254>
 8002d4e:	2d00      	cmp	r5, #0
 8002d50:	d159      	bne.n	8002e06 <__aeabi_dsub+0x5a2>
 8002d52:	000b      	movs	r3, r1
 8002d54:	4303      	orrs	r3, r0
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x4f6>
 8002d58:	e6d6      	b.n	8002b08 <__aeabi_dsub+0x2a4>
 8002d5a:	1c73      	adds	r3, r6, #1
 8002d5c:	d100      	bne.n	8002d60 <__aeabi_dsub+0x4fc>
 8002d5e:	e0b2      	b.n	8002ec6 <__aeabi_dsub+0x662>
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <__aeabi_dsub+0x688>)
 8002d62:	429f      	cmp	r7, r3
 8002d64:	d01e      	beq.n	8002da4 <__aeabi_dsub+0x540>
 8002d66:	43f3      	mvns	r3, r6
 8002d68:	2b38      	cmp	r3, #56	; 0x38
 8002d6a:	dc6f      	bgt.n	8002e4c <__aeabi_dsub+0x5e8>
 8002d6c:	2b1f      	cmp	r3, #31
 8002d6e:	dd00      	ble.n	8002d72 <__aeabi_dsub+0x50e>
 8002d70:	e097      	b.n	8002ea2 <__aeabi_dsub+0x63e>
 8002d72:	2520      	movs	r5, #32
 8002d74:	000e      	movs	r6, r1
 8002d76:	1aed      	subs	r5, r5, r3
 8002d78:	40ae      	lsls	r6, r5
 8002d7a:	46b0      	mov	r8, r6
 8002d7c:	0006      	movs	r6, r0
 8002d7e:	46aa      	mov	sl, r5
 8002d80:	40de      	lsrs	r6, r3
 8002d82:	4645      	mov	r5, r8
 8002d84:	4335      	orrs	r5, r6
 8002d86:	002e      	movs	r6, r5
 8002d88:	4655      	mov	r5, sl
 8002d8a:	40a8      	lsls	r0, r5
 8002d8c:	40d9      	lsrs	r1, r3
 8002d8e:	1e45      	subs	r5, r0, #1
 8002d90:	41a8      	sbcs	r0, r5
 8002d92:	448c      	add	ip, r1
 8002d94:	4306      	orrs	r6, r0
 8002d96:	18b6      	adds	r6, r6, r2
 8002d98:	4296      	cmp	r6, r2
 8002d9a:	4192      	sbcs	r2, r2
 8002d9c:	4251      	negs	r1, r2
 8002d9e:	4461      	add	r1, ip
 8002da0:	003d      	movs	r5, r7
 8002da2:	e625      	b.n	80029f0 <__aeabi_dsub+0x18c>
 8002da4:	003d      	movs	r5, r7
 8002da6:	4661      	mov	r1, ip
 8002da8:	4691      	mov	r9, r2
 8002daa:	e678      	b.n	8002a9e <__aeabi_dsub+0x23a>
 8002dac:	000b      	movs	r3, r1
 8002dae:	4303      	orrs	r3, r0
 8002db0:	2d00      	cmp	r5, #0
 8002db2:	d000      	beq.n	8002db6 <__aeabi_dsub+0x552>
 8002db4:	e655      	b.n	8002a62 <__aeabi_dsub+0x1fe>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f5      	beq.n	8002da6 <__aeabi_dsub+0x542>
 8002dba:	4663      	mov	r3, ip
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <__aeabi_dsub+0x55e>
 8002dc0:	e66d      	b.n	8002a9e <__aeabi_dsub+0x23a>
 8002dc2:	1886      	adds	r6, r0, r2
 8002dc4:	4286      	cmp	r6, r0
 8002dc6:	4180      	sbcs	r0, r0
 8002dc8:	4461      	add	r1, ip
 8002dca:	4240      	negs	r0, r0
 8002dcc:	1809      	adds	r1, r1, r0
 8002dce:	2200      	movs	r2, #0
 8002dd0:	020b      	lsls	r3, r1, #8
 8002dd2:	d400      	bmi.n	8002dd6 <__aeabi_dsub+0x572>
 8002dd4:	e6d0      	b.n	8002b78 <__aeabi_dsub+0x314>
 8002dd6:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <__aeabi_dsub+0x68c>)
 8002dd8:	3501      	adds	r5, #1
 8002dda:	4019      	ands	r1, r3
 8002ddc:	e5b2      	b.n	8002944 <__aeabi_dsub+0xe0>
 8002dde:	46b1      	mov	r9, r6
 8002de0:	e65d      	b.n	8002a9e <__aeabi_dsub+0x23a>
 8002de2:	0033      	movs	r3, r6
 8002de4:	4667      	mov	r7, ip
 8002de6:	3b20      	subs	r3, #32
 8002de8:	40df      	lsrs	r7, r3
 8002dea:	003b      	movs	r3, r7
 8002dec:	2e20      	cmp	r6, #32
 8002dee:	d005      	beq.n	8002dfc <__aeabi_dsub+0x598>
 8002df0:	2740      	movs	r7, #64	; 0x40
 8002df2:	1bbf      	subs	r7, r7, r6
 8002df4:	4666      	mov	r6, ip
 8002df6:	40be      	lsls	r6, r7
 8002df8:	4332      	orrs	r2, r6
 8002dfa:	4690      	mov	r8, r2
 8002dfc:	4646      	mov	r6, r8
 8002dfe:	1e72      	subs	r2, r6, #1
 8002e00:	4196      	sbcs	r6, r2
 8002e02:	4333      	orrs	r3, r6
 8002e04:	e5ef      	b.n	80029e6 <__aeabi_dsub+0x182>
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <__aeabi_dsub+0x688>)
 8002e08:	429f      	cmp	r7, r3
 8002e0a:	d0cb      	beq.n	8002da4 <__aeabi_dsub+0x540>
 8002e0c:	2580      	movs	r5, #128	; 0x80
 8002e0e:	042d      	lsls	r5, r5, #16
 8002e10:	4273      	negs	r3, r6
 8002e12:	4329      	orrs	r1, r5
 8002e14:	e7a8      	b.n	8002d68 <__aeabi_dsub+0x504>
 8002e16:	4308      	orrs	r0, r1
 8002e18:	1e41      	subs	r1, r0, #1
 8002e1a:	4188      	sbcs	r0, r1
 8002e1c:	e6a2      	b.n	8002b64 <__aeabi_dsub+0x300>
 8002e1e:	2f00      	cmp	r7, #0
 8002e20:	d100      	bne.n	8002e24 <__aeabi_dsub+0x5c0>
 8002e22:	e63c      	b.n	8002a9e <__aeabi_dsub+0x23a>
 8002e24:	4663      	mov	r3, ip
 8002e26:	1a86      	subs	r6, r0, r2
 8002e28:	1acf      	subs	r7, r1, r3
 8002e2a:	42b0      	cmp	r0, r6
 8002e2c:	419b      	sbcs	r3, r3
 8002e2e:	425b      	negs	r3, r3
 8002e30:	1afb      	subs	r3, r7, r3
 8002e32:	4698      	mov	r8, r3
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	d54e      	bpl.n	8002ed6 <__aeabi_dsub+0x672>
 8002e38:	1a16      	subs	r6, r2, r0
 8002e3a:	4663      	mov	r3, ip
 8002e3c:	42b2      	cmp	r2, r6
 8002e3e:	4192      	sbcs	r2, r2
 8002e40:	1a59      	subs	r1, r3, r1
 8002e42:	4252      	negs	r2, r2
 8002e44:	1a89      	subs	r1, r1, r2
 8002e46:	465c      	mov	r4, fp
 8002e48:	2200      	movs	r2, #0
 8002e4a:	e57b      	b.n	8002944 <__aeabi_dsub+0xe0>
 8002e4c:	4301      	orrs	r1, r0
 8002e4e:	000e      	movs	r6, r1
 8002e50:	1e71      	subs	r1, r6, #1
 8002e52:	418e      	sbcs	r6, r1
 8002e54:	e79f      	b.n	8002d96 <__aeabi_dsub+0x532>
 8002e56:	001d      	movs	r5, r3
 8002e58:	000e      	movs	r6, r1
 8002e5a:	3d20      	subs	r5, #32
 8002e5c:	40ee      	lsrs	r6, r5
 8002e5e:	46b0      	mov	r8, r6
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d004      	beq.n	8002e6e <__aeabi_dsub+0x60a>
 8002e64:	2540      	movs	r5, #64	; 0x40
 8002e66:	1aeb      	subs	r3, r5, r3
 8002e68:	4099      	lsls	r1, r3
 8002e6a:	4308      	orrs	r0, r1
 8002e6c:	4681      	mov	r9, r0
 8002e6e:	4648      	mov	r0, r9
 8002e70:	4643      	mov	r3, r8
 8002e72:	1e41      	subs	r1, r0, #1
 8002e74:	4188      	sbcs	r0, r1
 8002e76:	4318      	orrs	r0, r3
 8002e78:	e674      	b.n	8002b64 <__aeabi_dsub+0x300>
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2400      	movs	r4, #0
 8002e7e:	e617      	b.n	8002ab0 <__aeabi_dsub+0x24c>
 8002e80:	1a16      	subs	r6, r2, r0
 8002e82:	4663      	mov	r3, ip
 8002e84:	42b2      	cmp	r2, r6
 8002e86:	4192      	sbcs	r2, r2
 8002e88:	1a59      	subs	r1, r3, r1
 8002e8a:	4252      	negs	r2, r2
 8002e8c:	1a89      	subs	r1, r1, r2
 8002e8e:	003d      	movs	r5, r7
 8002e90:	e525      	b.n	80028de <__aeabi_dsub+0x7a>
 8002e92:	4661      	mov	r1, ip
 8002e94:	4691      	mov	r9, r2
 8002e96:	4d15      	ldr	r5, [pc, #84]	; (8002eec <__aeabi_dsub+0x688>)
 8002e98:	e601      	b.n	8002a9e <__aeabi_dsub+0x23a>
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	2400      	movs	r4, #0
 8002e9e:	0312      	lsls	r2, r2, #12
 8002ea0:	e679      	b.n	8002b96 <__aeabi_dsub+0x332>
 8002ea2:	001d      	movs	r5, r3
 8002ea4:	000e      	movs	r6, r1
 8002ea6:	3d20      	subs	r5, #32
 8002ea8:	40ee      	lsrs	r6, r5
 8002eaa:	46b0      	mov	r8, r6
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d004      	beq.n	8002eba <__aeabi_dsub+0x656>
 8002eb0:	2540      	movs	r5, #64	; 0x40
 8002eb2:	1aeb      	subs	r3, r5, r3
 8002eb4:	4099      	lsls	r1, r3
 8002eb6:	4308      	orrs	r0, r1
 8002eb8:	4681      	mov	r9, r0
 8002eba:	464e      	mov	r6, r9
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	1e71      	subs	r1, r6, #1
 8002ec0:	418e      	sbcs	r6, r1
 8002ec2:	431e      	orrs	r6, r3
 8002ec4:	e767      	b.n	8002d96 <__aeabi_dsub+0x532>
 8002ec6:	1886      	adds	r6, r0, r2
 8002ec8:	4296      	cmp	r6, r2
 8002eca:	419b      	sbcs	r3, r3
 8002ecc:	4461      	add	r1, ip
 8002ece:	425b      	negs	r3, r3
 8002ed0:	18c9      	adds	r1, r1, r3
 8002ed2:	003d      	movs	r5, r7
 8002ed4:	e58c      	b.n	80029f0 <__aeabi_dsub+0x18c>
 8002ed6:	4647      	mov	r7, r8
 8002ed8:	4337      	orrs	r7, r6
 8002eda:	d0ce      	beq.n	8002e7a <__aeabi_dsub+0x616>
 8002edc:	2207      	movs	r2, #7
 8002ede:	4641      	mov	r1, r8
 8002ee0:	4032      	ands	r2, r6
 8002ee2:	e649      	b.n	8002b78 <__aeabi_dsub+0x314>
 8002ee4:	2700      	movs	r7, #0
 8002ee6:	003a      	movs	r2, r7
 8002ee8:	e5e6      	b.n	8002ab8 <__aeabi_dsub+0x254>
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	000007ff 	.word	0x000007ff
 8002ef0:	ff7fffff 	.word	0xff7fffff

08002ef4 <__aeabi_dcmpun>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	4e0c      	ldr	r6, [pc, #48]	; (8002f28 <__aeabi_dcmpun+0x34>)
 8002ef8:	030d      	lsls	r5, r1, #12
 8002efa:	031c      	lsls	r4, r3, #12
 8002efc:	0049      	lsls	r1, r1, #1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	0b2d      	lsrs	r5, r5, #12
 8002f02:	0d49      	lsrs	r1, r1, #21
 8002f04:	0b24      	lsrs	r4, r4, #12
 8002f06:	0d5b      	lsrs	r3, r3, #21
 8002f08:	42b1      	cmp	r1, r6
 8002f0a:	d008      	beq.n	8002f1e <__aeabi_dcmpun+0x2a>
 8002f0c:	4906      	ldr	r1, [pc, #24]	; (8002f28 <__aeabi_dcmpun+0x34>)
 8002f0e:	2000      	movs	r0, #0
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d103      	bne.n	8002f1c <__aeabi_dcmpun+0x28>
 8002f14:	4314      	orrs	r4, r2
 8002f16:	0020      	movs	r0, r4
 8002f18:	1e44      	subs	r4, r0, #1
 8002f1a:	41a0      	sbcs	r0, r4
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
 8002f1e:	4305      	orrs	r5, r0
 8002f20:	2001      	movs	r0, #1
 8002f22:	2d00      	cmp	r5, #0
 8002f24:	d1fa      	bne.n	8002f1c <__aeabi_dcmpun+0x28>
 8002f26:	e7f1      	b.n	8002f0c <__aeabi_dcmpun+0x18>
 8002f28:	000007ff 	.word	0x000007ff

08002f2c <__aeabi_d2iz>:
 8002f2c:	b530      	push	{r4, r5, lr}
 8002f2e:	4d14      	ldr	r5, [pc, #80]	; (8002f80 <__aeabi_d2iz+0x54>)
 8002f30:	030a      	lsls	r2, r1, #12
 8002f32:	004b      	lsls	r3, r1, #1
 8002f34:	0b12      	lsrs	r2, r2, #12
 8002f36:	0d5b      	lsrs	r3, r3, #21
 8002f38:	0fc9      	lsrs	r1, r1, #31
 8002f3a:	2400      	movs	r4, #0
 8002f3c:	42ab      	cmp	r3, r5
 8002f3e:	dd11      	ble.n	8002f64 <__aeabi_d2iz+0x38>
 8002f40:	4c10      	ldr	r4, [pc, #64]	; (8002f84 <__aeabi_d2iz+0x58>)
 8002f42:	42a3      	cmp	r3, r4
 8002f44:	dc10      	bgt.n	8002f68 <__aeabi_d2iz+0x3c>
 8002f46:	2480      	movs	r4, #128	; 0x80
 8002f48:	0364      	lsls	r4, r4, #13
 8002f4a:	4322      	orrs	r2, r4
 8002f4c:	4c0e      	ldr	r4, [pc, #56]	; (8002f88 <__aeabi_d2iz+0x5c>)
 8002f4e:	1ae4      	subs	r4, r4, r3
 8002f50:	2c1f      	cmp	r4, #31
 8002f52:	dd0c      	ble.n	8002f6e <__aeabi_d2iz+0x42>
 8002f54:	480d      	ldr	r0, [pc, #52]	; (8002f8c <__aeabi_d2iz+0x60>)
 8002f56:	1ac3      	subs	r3, r0, r3
 8002f58:	40da      	lsrs	r2, r3
 8002f5a:	0013      	movs	r3, r2
 8002f5c:	425c      	negs	r4, r3
 8002f5e:	2900      	cmp	r1, #0
 8002f60:	d100      	bne.n	8002f64 <__aeabi_d2iz+0x38>
 8002f62:	001c      	movs	r4, r3
 8002f64:	0020      	movs	r0, r4
 8002f66:	bd30      	pop	{r4, r5, pc}
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <__aeabi_d2iz+0x64>)
 8002f6a:	18cc      	adds	r4, r1, r3
 8002f6c:	e7fa      	b.n	8002f64 <__aeabi_d2iz+0x38>
 8002f6e:	4d09      	ldr	r5, [pc, #36]	; (8002f94 <__aeabi_d2iz+0x68>)
 8002f70:	40e0      	lsrs	r0, r4
 8002f72:	46ac      	mov	ip, r5
 8002f74:	4463      	add	r3, ip
 8002f76:	409a      	lsls	r2, r3
 8002f78:	0013      	movs	r3, r2
 8002f7a:	4303      	orrs	r3, r0
 8002f7c:	e7ee      	b.n	8002f5c <__aeabi_d2iz+0x30>
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	000003fe 	.word	0x000003fe
 8002f84:	0000041d 	.word	0x0000041d
 8002f88:	00000433 	.word	0x00000433
 8002f8c:	00000413 	.word	0x00000413
 8002f90:	7fffffff 	.word	0x7fffffff
 8002f94:	fffffbed 	.word	0xfffffbed

08002f98 <__aeabi_i2d>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d02d      	beq.n	8002ffa <__aeabi_i2d+0x62>
 8002f9e:	17c3      	asrs	r3, r0, #31
 8002fa0:	18c5      	adds	r5, r0, r3
 8002fa2:	405d      	eors	r5, r3
 8002fa4:	0fc4      	lsrs	r4, r0, #31
 8002fa6:	0028      	movs	r0, r5
 8002fa8:	f000 f906 	bl	80031b8 <__clzsi2>
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <__aeabi_i2d+0x6c>)
 8002fae:	1a1b      	subs	r3, r3, r0
 8002fb0:	055b      	lsls	r3, r3, #21
 8002fb2:	0d5b      	lsrs	r3, r3, #21
 8002fb4:	280a      	cmp	r0, #10
 8002fb6:	dd15      	ble.n	8002fe4 <__aeabi_i2d+0x4c>
 8002fb8:	380b      	subs	r0, #11
 8002fba:	4085      	lsls	r5, r0
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	032d      	lsls	r5, r5, #12
 8002fc0:	0b2d      	lsrs	r5, r5, #12
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	0010      	movs	r0, r2
 8002fc6:	032d      	lsls	r5, r5, #12
 8002fc8:	0d0a      	lsrs	r2, r1, #20
 8002fca:	0b2d      	lsrs	r5, r5, #12
 8002fcc:	0512      	lsls	r2, r2, #20
 8002fce:	432a      	orrs	r2, r5
 8002fd0:	4d0d      	ldr	r5, [pc, #52]	; (8003008 <__aeabi_i2d+0x70>)
 8002fd2:	051b      	lsls	r3, r3, #20
 8002fd4:	402a      	ands	r2, r5
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	07e4      	lsls	r4, r4, #31
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	4323      	orrs	r3, r4
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	0029      	movs	r1, r5
 8002fe8:	3215      	adds	r2, #21
 8002fea:	4091      	lsls	r1, r2
 8002fec:	000a      	movs	r2, r1
 8002fee:	210b      	movs	r1, #11
 8002ff0:	1a08      	subs	r0, r1, r0
 8002ff2:	40c5      	lsrs	r5, r0
 8002ff4:	032d      	lsls	r5, r5, #12
 8002ff6:	0b2d      	lsrs	r5, r5, #12
 8002ff8:	e7e3      	b.n	8002fc2 <__aeabi_i2d+0x2a>
 8002ffa:	2400      	movs	r4, #0
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2500      	movs	r5, #0
 8003000:	2200      	movs	r2, #0
 8003002:	e7de      	b.n	8002fc2 <__aeabi_i2d+0x2a>
 8003004:	0000041e 	.word	0x0000041e
 8003008:	800fffff 	.word	0x800fffff

0800300c <__aeabi_f2d>:
 800300c:	0041      	lsls	r1, r0, #1
 800300e:	0e09      	lsrs	r1, r1, #24
 8003010:	1c4b      	adds	r3, r1, #1
 8003012:	b570      	push	{r4, r5, r6, lr}
 8003014:	b2db      	uxtb	r3, r3
 8003016:	0246      	lsls	r6, r0, #9
 8003018:	0a75      	lsrs	r5, r6, #9
 800301a:	0fc4      	lsrs	r4, r0, #31
 800301c:	2b01      	cmp	r3, #1
 800301e:	dd14      	ble.n	800304a <__aeabi_f2d+0x3e>
 8003020:	23e0      	movs	r3, #224	; 0xe0
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	076d      	lsls	r5, r5, #29
 8003026:	0b36      	lsrs	r6, r6, #12
 8003028:	18cb      	adds	r3, r1, r3
 800302a:	2100      	movs	r1, #0
 800302c:	0d0a      	lsrs	r2, r1, #20
 800302e:	0028      	movs	r0, r5
 8003030:	0512      	lsls	r2, r2, #20
 8003032:	4d1c      	ldr	r5, [pc, #112]	; (80030a4 <__aeabi_f2d+0x98>)
 8003034:	4332      	orrs	r2, r6
 8003036:	055b      	lsls	r3, r3, #21
 8003038:	402a      	ands	r2, r5
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	4313      	orrs	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	07e4      	lsls	r4, r4, #31
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	4323      	orrs	r3, r4
 8003046:	0019      	movs	r1, r3
 8003048:	bd70      	pop	{r4, r5, r6, pc}
 800304a:	2900      	cmp	r1, #0
 800304c:	d114      	bne.n	8003078 <__aeabi_f2d+0x6c>
 800304e:	2d00      	cmp	r5, #0
 8003050:	d01e      	beq.n	8003090 <__aeabi_f2d+0x84>
 8003052:	0028      	movs	r0, r5
 8003054:	f000 f8b0 	bl	80031b8 <__clzsi2>
 8003058:	280a      	cmp	r0, #10
 800305a:	dc1c      	bgt.n	8003096 <__aeabi_f2d+0x8a>
 800305c:	230b      	movs	r3, #11
 800305e:	002a      	movs	r2, r5
 8003060:	1a1b      	subs	r3, r3, r0
 8003062:	40da      	lsrs	r2, r3
 8003064:	0003      	movs	r3, r0
 8003066:	3315      	adds	r3, #21
 8003068:	409d      	lsls	r5, r3
 800306a:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <__aeabi_f2d+0x9c>)
 800306c:	0312      	lsls	r2, r2, #12
 800306e:	1a1b      	subs	r3, r3, r0
 8003070:	055b      	lsls	r3, r3, #21
 8003072:	0b16      	lsrs	r6, r2, #12
 8003074:	0d5b      	lsrs	r3, r3, #21
 8003076:	e7d8      	b.n	800302a <__aeabi_f2d+0x1e>
 8003078:	2d00      	cmp	r5, #0
 800307a:	d006      	beq.n	800308a <__aeabi_f2d+0x7e>
 800307c:	0b32      	lsrs	r2, r6, #12
 800307e:	2680      	movs	r6, #128	; 0x80
 8003080:	0336      	lsls	r6, r6, #12
 8003082:	076d      	lsls	r5, r5, #29
 8003084:	4316      	orrs	r6, r2
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <__aeabi_f2d+0xa0>)
 8003088:	e7cf      	b.n	800302a <__aeabi_f2d+0x1e>
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <__aeabi_f2d+0xa0>)
 800308c:	2600      	movs	r6, #0
 800308e:	e7cc      	b.n	800302a <__aeabi_f2d+0x1e>
 8003090:	2300      	movs	r3, #0
 8003092:	2600      	movs	r6, #0
 8003094:	e7c9      	b.n	800302a <__aeabi_f2d+0x1e>
 8003096:	0003      	movs	r3, r0
 8003098:	002a      	movs	r2, r5
 800309a:	3b0b      	subs	r3, #11
 800309c:	409a      	lsls	r2, r3
 800309e:	2500      	movs	r5, #0
 80030a0:	e7e3      	b.n	800306a <__aeabi_f2d+0x5e>
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	800fffff 	.word	0x800fffff
 80030a8:	00000389 	.word	0x00000389
 80030ac:	000007ff 	.word	0x000007ff

080030b0 <__aeabi_d2f>:
 80030b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b2:	004c      	lsls	r4, r1, #1
 80030b4:	0d64      	lsrs	r4, r4, #21
 80030b6:	030b      	lsls	r3, r1, #12
 80030b8:	1c62      	adds	r2, r4, #1
 80030ba:	0a5b      	lsrs	r3, r3, #9
 80030bc:	0f46      	lsrs	r6, r0, #29
 80030be:	0552      	lsls	r2, r2, #21
 80030c0:	0fc9      	lsrs	r1, r1, #31
 80030c2:	431e      	orrs	r6, r3
 80030c4:	00c5      	lsls	r5, r0, #3
 80030c6:	0d52      	lsrs	r2, r2, #21
 80030c8:	2a01      	cmp	r2, #1
 80030ca:	dd29      	ble.n	8003120 <__aeabi_d2f+0x70>
 80030cc:	4b37      	ldr	r3, [pc, #220]	; (80031ac <__aeabi_d2f+0xfc>)
 80030ce:	18e7      	adds	r7, r4, r3
 80030d0:	2ffe      	cmp	r7, #254	; 0xfe
 80030d2:	dc1c      	bgt.n	800310e <__aeabi_d2f+0x5e>
 80030d4:	2f00      	cmp	r7, #0
 80030d6:	dd3b      	ble.n	8003150 <__aeabi_d2f+0xa0>
 80030d8:	0180      	lsls	r0, r0, #6
 80030da:	1e43      	subs	r3, r0, #1
 80030dc:	4198      	sbcs	r0, r3
 80030de:	2207      	movs	r2, #7
 80030e0:	00f3      	lsls	r3, r6, #3
 80030e2:	0f6d      	lsrs	r5, r5, #29
 80030e4:	4303      	orrs	r3, r0
 80030e6:	432b      	orrs	r3, r5
 80030e8:	401a      	ands	r2, r3
 80030ea:	2a00      	cmp	r2, #0
 80030ec:	d004      	beq.n	80030f8 <__aeabi_d2f+0x48>
 80030ee:	220f      	movs	r2, #15
 80030f0:	401a      	ands	r2, r3
 80030f2:	2a04      	cmp	r2, #4
 80030f4:	d000      	beq.n	80030f8 <__aeabi_d2f+0x48>
 80030f6:	3304      	adds	r3, #4
 80030f8:	2280      	movs	r2, #128	; 0x80
 80030fa:	04d2      	lsls	r2, r2, #19
 80030fc:	401a      	ands	r2, r3
 80030fe:	d024      	beq.n	800314a <__aeabi_d2f+0x9a>
 8003100:	3701      	adds	r7, #1
 8003102:	b2fa      	uxtb	r2, r7
 8003104:	2fff      	cmp	r7, #255	; 0xff
 8003106:	d002      	beq.n	800310e <__aeabi_d2f+0x5e>
 8003108:	019b      	lsls	r3, r3, #6
 800310a:	0a58      	lsrs	r0, r3, #9
 800310c:	e001      	b.n	8003112 <__aeabi_d2f+0x62>
 800310e:	22ff      	movs	r2, #255	; 0xff
 8003110:	2000      	movs	r0, #0
 8003112:	0240      	lsls	r0, r0, #9
 8003114:	05d2      	lsls	r2, r2, #23
 8003116:	0a40      	lsrs	r0, r0, #9
 8003118:	07c9      	lsls	r1, r1, #31
 800311a:	4310      	orrs	r0, r2
 800311c:	4308      	orrs	r0, r1
 800311e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003120:	4335      	orrs	r5, r6
 8003122:	2c00      	cmp	r4, #0
 8003124:	d104      	bne.n	8003130 <__aeabi_d2f+0x80>
 8003126:	2d00      	cmp	r5, #0
 8003128:	d10a      	bne.n	8003140 <__aeabi_d2f+0x90>
 800312a:	2200      	movs	r2, #0
 800312c:	2000      	movs	r0, #0
 800312e:	e7f0      	b.n	8003112 <__aeabi_d2f+0x62>
 8003130:	2d00      	cmp	r5, #0
 8003132:	d0ec      	beq.n	800310e <__aeabi_d2f+0x5e>
 8003134:	2080      	movs	r0, #128	; 0x80
 8003136:	03c0      	lsls	r0, r0, #15
 8003138:	4330      	orrs	r0, r6
 800313a:	22ff      	movs	r2, #255	; 0xff
 800313c:	e7e9      	b.n	8003112 <__aeabi_d2f+0x62>
 800313e:	2400      	movs	r4, #0
 8003140:	2300      	movs	r3, #0
 8003142:	025b      	lsls	r3, r3, #9
 8003144:	0a58      	lsrs	r0, r3, #9
 8003146:	b2e2      	uxtb	r2, r4
 8003148:	e7e3      	b.n	8003112 <__aeabi_d2f+0x62>
 800314a:	08db      	lsrs	r3, r3, #3
 800314c:	003c      	movs	r4, r7
 800314e:	e7f8      	b.n	8003142 <__aeabi_d2f+0x92>
 8003150:	003b      	movs	r3, r7
 8003152:	3317      	adds	r3, #23
 8003154:	dbf3      	blt.n	800313e <__aeabi_d2f+0x8e>
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	4333      	orrs	r3, r6
 800315c:	261e      	movs	r6, #30
 800315e:	1bf6      	subs	r6, r6, r7
 8003160:	2e1f      	cmp	r6, #31
 8003162:	dd14      	ble.n	800318e <__aeabi_d2f+0xde>
 8003164:	2202      	movs	r2, #2
 8003166:	4252      	negs	r2, r2
 8003168:	1bd7      	subs	r7, r2, r7
 800316a:	001a      	movs	r2, r3
 800316c:	40fa      	lsrs	r2, r7
 800316e:	0017      	movs	r7, r2
 8003170:	2e20      	cmp	r6, #32
 8003172:	d004      	beq.n	800317e <__aeabi_d2f+0xce>
 8003174:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <__aeabi_d2f+0x100>)
 8003176:	4694      	mov	ip, r2
 8003178:	4464      	add	r4, ip
 800317a:	40a3      	lsls	r3, r4
 800317c:	431d      	orrs	r5, r3
 800317e:	002b      	movs	r3, r5
 8003180:	1e5d      	subs	r5, r3, #1
 8003182:	41ab      	sbcs	r3, r5
 8003184:	2207      	movs	r2, #7
 8003186:	433b      	orrs	r3, r7
 8003188:	401a      	ands	r2, r3
 800318a:	2700      	movs	r7, #0
 800318c:	e7ad      	b.n	80030ea <__aeabi_d2f+0x3a>
 800318e:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <__aeabi_d2f+0x104>)
 8003190:	0028      	movs	r0, r5
 8003192:	18a2      	adds	r2, r4, r2
 8003194:	4095      	lsls	r5, r2
 8003196:	4093      	lsls	r3, r2
 8003198:	1e6c      	subs	r4, r5, #1
 800319a:	41a5      	sbcs	r5, r4
 800319c:	40f0      	lsrs	r0, r6
 800319e:	2207      	movs	r2, #7
 80031a0:	432b      	orrs	r3, r5
 80031a2:	4303      	orrs	r3, r0
 80031a4:	401a      	ands	r2, r3
 80031a6:	2700      	movs	r7, #0
 80031a8:	e79f      	b.n	80030ea <__aeabi_d2f+0x3a>
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	fffffc80 	.word	0xfffffc80
 80031b0:	fffffca2 	.word	0xfffffca2
 80031b4:	fffffc82 	.word	0xfffffc82

080031b8 <__clzsi2>:
 80031b8:	211c      	movs	r1, #28
 80031ba:	2301      	movs	r3, #1
 80031bc:	041b      	lsls	r3, r3, #16
 80031be:	4298      	cmp	r0, r3
 80031c0:	d301      	bcc.n	80031c6 <__clzsi2+0xe>
 80031c2:	0c00      	lsrs	r0, r0, #16
 80031c4:	3910      	subs	r1, #16
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	4298      	cmp	r0, r3
 80031ca:	d301      	bcc.n	80031d0 <__clzsi2+0x18>
 80031cc:	0a00      	lsrs	r0, r0, #8
 80031ce:	3908      	subs	r1, #8
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	4298      	cmp	r0, r3
 80031d4:	d301      	bcc.n	80031da <__clzsi2+0x22>
 80031d6:	0900      	lsrs	r0, r0, #4
 80031d8:	3904      	subs	r1, #4
 80031da:	a202      	add	r2, pc, #8	; (adr r2, 80031e4 <__clzsi2+0x2c>)
 80031dc:	5c10      	ldrb	r0, [r2, r0]
 80031de:	1840      	adds	r0, r0, r1
 80031e0:	4770      	bx	lr
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	02020304 	.word	0x02020304
 80031e8:	01010101 	.word	0x01010101
	...

080031f4 <__clzdi2>:
 80031f4:	b510      	push	{r4, lr}
 80031f6:	2900      	cmp	r1, #0
 80031f8:	d103      	bne.n	8003202 <__clzdi2+0xe>
 80031fa:	f7ff ffdd 	bl	80031b8 <__clzsi2>
 80031fe:	3020      	adds	r0, #32
 8003200:	e002      	b.n	8003208 <__clzdi2+0x14>
 8003202:	1c08      	adds	r0, r1, #0
 8003204:	f7ff ffd8 	bl	80031b8 <__clzsi2>
 8003208:	bd10      	pop	{r4, pc}
 800320a:	46c0      	nop			; (mov r8, r8)

0800320c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003212:	f004 fb43 	bl	800789c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003216:	f000 f827 	bl	8003268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800321a:	f000 fadb 	bl	80037d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800321e:	f000 fabb 	bl	8003798 <MX_DMA_Init>
  MX_I2C2_Init();
 8003222:	f000 f90f 	bl	8003444 <MX_I2C2_Init>
  MX_RTC_Init();
 8003226:	f000 f94d 	bl	80034c4 <MX_RTC_Init>
  MX_SPI1_Init();
 800322a:	f000 f9b7 	bl	800359c <MX_SPI1_Init>
  MX_SPI2_Init();
 800322e:	f000 f9f3 	bl	8003618 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003232:	f000 fa2f 	bl	8003694 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003236:	f000 fa7b 	bl	8003730 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800323a:	f000 f897 	bl	800336c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf( "Hydra Management Processor Running\r\n" );
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <main+0x58>)
 8003240:	0018      	movs	r0, r3
 8003242:	f009 fba9 	bl	800c998 <puts>
  system_init();
 8003246:	f004 fabd 	bl	80077c4 <system_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		current_time = HAL_GetTick();
 800324a:	f004 fba1 	bl	8007990 <HAL_GetTick>
 800324e:	0003      	movs	r3, r0
 8003250:	607b      	str	r3, [r7, #4]
		/*
		 * Operate each module as a state machine so that they can perform different small tasks each time
		 */
		// process_wifi_module();

		i2c_sensor_process( current_time );
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f002 fd07 	bl	8005c68 <i2c_sensor_process>
		process_led_display( current_time );
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 fef9 	bl	8004054 <process_led_display>
		current_time = HAL_GetTick();
 8003262:	e7f2      	b.n	800324a <main+0x3e>
 8003264:	0800e850 	.word	0x0800e850

08003268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b09d      	sub	sp, #116	; 0x74
 800326c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800326e:	2438      	movs	r4, #56	; 0x38
 8003270:	193b      	adds	r3, r7, r4
 8003272:	0018      	movs	r0, r3
 8003274:	2338      	movs	r3, #56	; 0x38
 8003276:	001a      	movs	r2, r3
 8003278:	2100      	movs	r1, #0
 800327a:	f009 fb0a 	bl	800c892 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800327e:	2328      	movs	r3, #40	; 0x28
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	0018      	movs	r0, r3
 8003284:	2310      	movs	r3, #16
 8003286:	001a      	movs	r2, r3
 8003288:	2100      	movs	r1, #0
 800328a:	f009 fb02 	bl	800c892 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800328e:	003b      	movs	r3, r7
 8003290:	0018      	movs	r0, r3
 8003292:	2328      	movs	r3, #40	; 0x28
 8003294:	001a      	movs	r2, r3
 8003296:	2100      	movs	r1, #0
 8003298:	f009 fafb 	bl	800c892 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	0018      	movs	r0, r3
 80032a2:	f006 fa09 	bl	80096b8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	220a      	movs	r2, #10
 80032aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032ac:	193b      	adds	r3, r7, r4
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	0052      	lsls	r2, r2, #1
 80032b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80032b4:	0021      	movs	r1, r4
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	2200      	movs	r2, #0
 80032ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032bc:	187b      	adds	r3, r7, r1
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80032c2:	187b      	adds	r3, r7, r1
 80032c4:	2201      	movs	r2, #1
 80032c6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	2202      	movs	r2, #2
 80032cc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	2202      	movs	r2, #2
 80032d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	2200      	movs	r2, #0
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	2210      	movs	r2, #16
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	0292      	lsls	r2, r2, #10
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	0492      	lsls	r2, r2, #18
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	2280      	movs	r2, #128	; 0x80
 80032f4:	0612      	lsls	r2, r2, #24
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	0018      	movs	r0, r3
 80032fc:	f006 fa28 	bl	8009750 <HAL_RCC_OscConfig>
 8003300:	1e03      	subs	r3, r0, #0
 8003302:	d001      	beq.n	8003308 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003304:	f000 fb36 	bl	8003974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003308:	2128      	movs	r1, #40	; 0x28
 800330a:	187b      	adds	r3, r7, r1
 800330c:	2207      	movs	r2, #7
 800330e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003310:	187b      	adds	r3, r7, r1
 8003312:	2202      	movs	r2, #2
 8003314:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003316:	187b      	adds	r3, r7, r1
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800331c:	187b      	adds	r3, r7, r1
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2102      	movs	r1, #2
 8003326:	0018      	movs	r0, r3
 8003328:	f006 fd32 	bl	8009d90 <HAL_RCC_ClockConfig>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d001      	beq.n	8003334 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003330:	f000 fb20 	bl	8003974 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8003334:	003b      	movs	r3, r7
 8003336:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <SystemClock_Config+0x100>)
 8003338:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800333a:	003b      	movs	r3, r7
 800333c:	2200      	movs	r2, #0
 800333e:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003340:	003b      	movs	r3, r7
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003346:	003b      	movs	r3, r7
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	0092      	lsls	r2, r2, #2
 800334c:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800334e:	003b      	movs	r3, r7
 8003350:	0018      	movs	r0, r3
 8003352:	f006 fec7 	bl	800a0e4 <HAL_RCCEx_PeriphCLKConfig>
 8003356:	1e03      	subs	r3, r0, #0
 8003358:	d001      	beq.n	800335e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800335a:	f000 fb0b 	bl	8003974 <Error_Handler>
  }
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b01d      	add	sp, #116	; 0x74
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	00024001 	.word	0x00024001

0800336c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	0018      	movs	r0, r3
 8003376:	230c      	movs	r3, #12
 8003378:	001a      	movs	r2, r3
 800337a:	2100      	movs	r1, #0
 800337c:	f009 fa89 	bl	800c892 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003380:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <MX_ADC1_Init+0xcc>)
 8003382:	4a2e      	ldr	r2, [pc, #184]	; (800343c <MX_ADC1_Init+0xd0>)
 8003384:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003386:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <MX_ADC1_Init+0xcc>)
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	05d2      	lsls	r2, r2, #23
 800338c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800338e:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <MX_ADC1_Init+0xcc>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003394:	4b28      	ldr	r3, [pc, #160]	; (8003438 <MX_ADC1_Init+0xcc>)
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <MX_ADC1_Init+0xcc>)
 800339c:	2200      	movs	r2, #0
 800339e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033a2:	2204      	movs	r2, #4
 80033a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80033ac:	4b22      	ldr	r3, [pc, #136]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80033b2:	4b21      	ldr	r3, [pc, #132]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80033b8:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033be:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033c0:	2220      	movs	r2, #32
 80033c2:	2100      	movs	r1, #0
 80033c4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033cc:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80033d2:	4b19      	ldr	r3, [pc, #100]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033d4:	222c      	movs	r2, #44	; 0x2c
 80033d6:	2100      	movs	r1, #0
 80033d8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80033e0:	4b15      	ldr	r3, [pc, #84]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033ee:	223c      	movs	r2, #60	; 0x3c
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033fa:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <MX_ADC1_Init+0xcc>)
 80033fc:	0018      	movs	r0, r3
 80033fe:	f004 fbdb 	bl	8007bb8 <HAL_ADC_Init>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d001      	beq.n	800340a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003406:	f000 fab5 	bl	8003974 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <MX_ADC1_Init+0xd4>)
 800340e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	2200      	movs	r2, #0
 8003414:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800341c:	1d3a      	adds	r2, r7, #4
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <MX_ADC1_Init+0xcc>)
 8003420:	0011      	movs	r1, r2
 8003422:	0018      	movs	r0, r3
 8003424:	f004 fd9e 	bl	8007f64 <HAL_ADC_ConfigChannel>
 8003428:	1e03      	subs	r3, r0, #0
 800342a:	d001      	beq.n	8003430 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800342c:	f000 faa2 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b004      	add	sp, #16
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000c50 	.word	0x20000c50
 800343c:	40012400 	.word	0x40012400
 8003440:	20000100 	.word	0x20000100

08003444 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <MX_I2C2_Init+0x74>)
 800344a:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <MX_I2C2_Init+0x78>)
 800344c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501A5B;
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <MX_I2C2_Init+0x74>)
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <MX_I2C2_Init+0x7c>)
 8003452:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003454:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <MX_I2C2_Init+0x74>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <MX_I2C2_Init+0x74>)
 800345c:	2201      	movs	r2, #1
 800345e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003460:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <MX_I2C2_Init+0x74>)
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003466:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <MX_I2C2_Init+0x74>)
 8003468:	2200      	movs	r2, #0
 800346a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <MX_I2C2_Init+0x74>)
 800346e:	2200      	movs	r2, #0
 8003470:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <MX_I2C2_Init+0x74>)
 8003474:	2200      	movs	r2, #0
 8003476:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <MX_I2C2_Init+0x74>)
 800347a:	2200      	movs	r2, #0
 800347c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800347e:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <MX_I2C2_Init+0x74>)
 8003480:	0018      	movs	r0, r3
 8003482:	f005 fbf7 	bl	8008c74 <HAL_I2C_Init>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800348a:	f000 fa73 	bl	8003974 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <MX_I2C2_Init+0x74>)
 8003490:	2100      	movs	r1, #0
 8003492:	0018      	movs	r0, r3
 8003494:	f006 f878 	bl	8009588 <HAL_I2CEx_ConfigAnalogFilter>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d001      	beq.n	80034a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800349c:	f000 fa6a 	bl	8003974 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <MX_I2C2_Init+0x74>)
 80034a2:	2100      	movs	r1, #0
 80034a4:	0018      	movs	r0, r3
 80034a6:	f006 f8bb 	bl	8009620 <HAL_I2CEx_ConfigDigitalFilter>
 80034aa:	1e03      	subs	r3, r0, #0
 80034ac:	d001      	beq.n	80034b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80034ae:	f000 fa61 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000c04 	.word	0x20000c04
 80034bc:	40005800 	.word	0x40005800
 80034c0:	00501a5b 	.word	0x00501a5b

080034c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	0018      	movs	r0, r3
 80034ce:	2314      	movs	r3, #20
 80034d0:	001a      	movs	r2, r3
 80034d2:	2100      	movs	r1, #0
 80034d4:	f009 f9dd 	bl	800c892 <memset>
  RTC_DateTypeDef sDate = {0};
 80034d8:	003b      	movs	r3, r7
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80034de:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <MX_RTC_Init+0xd0>)
 80034e0:	4a2d      	ldr	r2, [pc, #180]	; (8003598 <MX_RTC_Init+0xd4>)
 80034e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <MX_RTC_Init+0xd0>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80034ea:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <MX_RTC_Init+0xd0>)
 80034ec:	227f      	movs	r2, #127	; 0x7f
 80034ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80034f0:	4b28      	ldr	r3, [pc, #160]	; (8003594 <MX_RTC_Init+0xd0>)
 80034f2:	22ff      	movs	r2, #255	; 0xff
 80034f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034f6:	4b27      	ldr	r3, [pc, #156]	; (8003594 <MX_RTC_Init+0xd0>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <MX_RTC_Init+0xd0>)
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <MX_RTC_Init+0xd0>)
 8003504:	2200      	movs	r2, #0
 8003506:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003508:	4b22      	ldr	r3, [pc, #136]	; (8003594 <MX_RTC_Init+0xd0>)
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	05d2      	lsls	r2, r2, #23
 800350e:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003510:	4b20      	ldr	r3, [pc, #128]	; (8003594 <MX_RTC_Init+0xd0>)
 8003512:	2200      	movs	r2, #0
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003516:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <MX_RTC_Init+0xd0>)
 8003518:	0018      	movs	r0, r3
 800351a:	f006 ff5d 	bl	800a3d8 <HAL_RTC_Init>
 800351e:	1e03      	subs	r3, r0, #0
 8003520:	d001      	beq.n	8003526 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8003522:	f000 fa27 	bl	8003974 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	2200      	movs	r2, #0
 8003530:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	2200      	movs	r2, #0
 8003536:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	2200      	movs	r2, #0
 800353c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	2200      	movs	r2, #0
 8003542:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003544:	1d3b      	adds	r3, r7, #4
 8003546:	2200      	movs	r2, #0
 8003548:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800354a:	1d39      	adds	r1, r7, #4
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <MX_RTC_Init+0xd0>)
 800354e:	2201      	movs	r2, #1
 8003550:	0018      	movs	r0, r3
 8003552:	f006 ffd7 	bl	800a504 <HAL_RTC_SetTime>
 8003556:	1e03      	subs	r3, r0, #0
 8003558:	d001      	beq.n	800355e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800355a:	f000 fa0b 	bl	8003974 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800355e:	003b      	movs	r3, r7
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003564:	003b      	movs	r3, r7
 8003566:	2201      	movs	r2, #1
 8003568:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800356a:	003b      	movs	r3, r7
 800356c:	2201      	movs	r2, #1
 800356e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8003570:	003b      	movs	r3, r7
 8003572:	2200      	movs	r2, #0
 8003574:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003576:	0039      	movs	r1, r7
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <MX_RTC_Init+0xd0>)
 800357a:	2201      	movs	r2, #1
 800357c:	0018      	movs	r0, r3
 800357e:	f007 f869 	bl	800a654 <HAL_RTC_SetDate>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d001      	beq.n	800358a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8003586:	f000 f9f5 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b006      	add	sp, #24
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	20000d40 	.word	0x20000d40
 8003598:	40002800 	.word	0x40002800

0800359c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <MX_SPI1_Init+0x74>)
 80035a2:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <MX_SPI1_Init+0x78>)
 80035a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035a6:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <MX_SPI1_Init+0x74>)
 80035a8:	2282      	movs	r2, #130	; 0x82
 80035aa:	0052      	lsls	r2, r2, #1
 80035ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035ae:	4b18      	ldr	r3, [pc, #96]	; (8003610 <MX_SPI1_Init+0x74>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035b4:	4b16      	ldr	r3, [pc, #88]	; (8003610 <MX_SPI1_Init+0x74>)
 80035b6:	22e0      	movs	r2, #224	; 0xe0
 80035b8:	00d2      	lsls	r2, r2, #3
 80035ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035bc:	4b14      	ldr	r3, [pc, #80]	; (8003610 <MX_SPI1_Init+0x74>)
 80035be:	2200      	movs	r2, #0
 80035c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <MX_SPI1_Init+0x74>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035c8:	4b11      	ldr	r3, [pc, #68]	; (8003610 <MX_SPI1_Init+0x74>)
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	0092      	lsls	r2, r2, #2
 80035ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <MX_SPI1_Init+0x74>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <MX_SPI1_Init+0x74>)
 80035d8:	2200      	movs	r2, #0
 80035da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <MX_SPI1_Init+0x74>)
 80035de:	2200      	movs	r2, #0
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <MX_SPI1_Init+0x74>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <MX_SPI1_Init+0x74>)
 80035ea:	2207      	movs	r2, #7
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <MX_SPI1_Init+0x74>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <MX_SPI1_Init+0x74>)
 80035f6:	2208      	movs	r2, #8
 80035f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <MX_SPI1_Init+0x74>)
 80035fc:	0018      	movs	r0, r3
 80035fe:	f007 f995 	bl	800a92c <HAL_SPI_Init>
 8003602:	1e03      	subs	r3, r0, #0
 8003604:	d001      	beq.n	800360a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003606:	f000 f9b5 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000d6c 	.word	0x20000d6c
 8003614:	40013000 	.word	0x40013000

08003618 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <MX_SPI2_Init+0x74>)
 800361e:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <MX_SPI2_Init+0x78>)
 8003620:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003622:	4b1a      	ldr	r3, [pc, #104]	; (800368c <MX_SPI2_Init+0x74>)
 8003624:	2282      	movs	r2, #130	; 0x82
 8003626:	0052      	lsls	r2, r2, #1
 8003628:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800362a:	4b18      	ldr	r3, [pc, #96]	; (800368c <MX_SPI2_Init+0x74>)
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003630:	4b16      	ldr	r3, [pc, #88]	; (800368c <MX_SPI2_Init+0x74>)
 8003632:	22e0      	movs	r2, #224	; 0xe0
 8003634:	00d2      	lsls	r2, r2, #3
 8003636:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <MX_SPI2_Init+0x74>)
 800363a:	2200      	movs	r2, #0
 800363c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <MX_SPI2_Init+0x74>)
 8003640:	2200      	movs	r2, #0
 8003642:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003644:	4b11      	ldr	r3, [pc, #68]	; (800368c <MX_SPI2_Init+0x74>)
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	0092      	lsls	r2, r2, #2
 800364a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <MX_SPI2_Init+0x74>)
 800364e:	2200      	movs	r2, #0
 8003650:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <MX_SPI2_Init+0x74>)
 8003654:	2280      	movs	r2, #128	; 0x80
 8003656:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <MX_SPI2_Init+0x74>)
 800365a:	2200      	movs	r2, #0
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <MX_SPI2_Init+0x74>)
 8003660:	2200      	movs	r2, #0
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <MX_SPI2_Init+0x74>)
 8003666:	2207      	movs	r2, #7
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <MX_SPI2_Init+0x74>)
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <MX_SPI2_Init+0x74>)
 8003672:	2208      	movs	r2, #8
 8003674:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <MX_SPI2_Init+0x74>)
 8003678:	0018      	movs	r0, r3
 800367a:	f007 f957 	bl	800a92c <HAL_SPI_Init>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d001      	beq.n	8003686 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003682:	f000 f977 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000694 	.word	0x20000694
 8003690:	40003800 	.word	0x40003800

08003694 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003698:	4b23      	ldr	r3, [pc, #140]	; (8003728 <MX_USART1_UART_Init+0x94>)
 800369a:	4a24      	ldr	r2, [pc, #144]	; (800372c <MX_USART1_UART_Init+0x98>)
 800369c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036a0:	22e1      	movs	r2, #225	; 0xe1
 80036a2:	0252      	lsls	r2, r2, #9
 80036a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036b2:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036ba:	220c      	movs	r2, #12
 80036bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036c4:	4b18      	ldr	r3, [pc, #96]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036d8:	2200      	movs	r2, #0
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036dc:	4b12      	ldr	r3, [pc, #72]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f007 fc84 	bl	800afec <HAL_UART_Init>
 80036e4:	1e03      	subs	r3, r0, #0
 80036e6:	d001      	beq.n	80036ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80036e8:	f000 f944 	bl	8003974 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <MX_USART1_UART_Init+0x94>)
 80036ee:	2100      	movs	r1, #0
 80036f0:	0018      	movs	r0, r3
 80036f2:	f008 ffaf 	bl	800c654 <HAL_UARTEx_SetTxFifoThreshold>
 80036f6:	1e03      	subs	r3, r0, #0
 80036f8:	d001      	beq.n	80036fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80036fa:	f000 f93b 	bl	8003974 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <MX_USART1_UART_Init+0x94>)
 8003700:	2100      	movs	r1, #0
 8003702:	0018      	movs	r0, r3
 8003704:	f008 ffe6 	bl	800c6d4 <HAL_UARTEx_SetRxFifoThreshold>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d001      	beq.n	8003710 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800370c:	f000 f932 	bl	8003974 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <MX_USART1_UART_Init+0x94>)
 8003712:	0018      	movs	r0, r3
 8003714:	f008 ff64 	bl	800c5e0 <HAL_UARTEx_DisableFifoMode>
 8003718:	1e03      	subs	r3, r0, #0
 800371a:	d001      	beq.n	8003720 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800371c:	f000 f92a 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	20000cb4 	.word	0x20000cb4
 800372c:	40013800 	.word	0x40013800

08003730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003734:	4b16      	ldr	r3, [pc, #88]	; (8003790 <MX_USART2_UART_Init+0x60>)
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <MX_USART2_UART_Init+0x64>)
 8003738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <MX_USART2_UART_Init+0x60>)
 800373c:	22e1      	movs	r2, #225	; 0xe1
 800373e:	0252      	lsls	r2, r2, #9
 8003740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <MX_USART2_UART_Init+0x60>)
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <MX_USART2_UART_Init+0x60>)
 800374a:	2200      	movs	r2, #0
 800374c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <MX_USART2_UART_Init+0x60>)
 8003750:	2200      	movs	r2, #0
 8003752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <MX_USART2_UART_Init+0x60>)
 8003756:	220c      	movs	r2, #12
 8003758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <MX_USART2_UART_Init+0x60>)
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <MX_USART2_UART_Init+0x60>)
 8003762:	2200      	movs	r2, #0
 8003764:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <MX_USART2_UART_Init+0x60>)
 8003768:	2200      	movs	r2, #0
 800376a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <MX_USART2_UART_Init+0x60>)
 800376e:	2200      	movs	r2, #0
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <MX_USART2_UART_Init+0x60>)
 8003774:	2200      	movs	r2, #0
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <MX_USART2_UART_Init+0x60>)
 800377a:	0018      	movs	r0, r3
 800377c:	f007 fc36 	bl	800afec <HAL_UART_Init>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d001      	beq.n	8003788 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003784:	f000 f8f6 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	20000dd0 	.word	0x20000dd0
 8003794:	40004400 	.word	0x40004400

08003798 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <MX_DMA_Init+0x38>)
 80037a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <MX_DMA_Init+0x38>)
 80037a4:	2101      	movs	r1, #1
 80037a6:	430a      	orrs	r2, r1
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <MX_DMA_Init+0x38>)
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	2201      	movs	r2, #1
 80037b0:	4013      	ands	r3, r2
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2100      	movs	r1, #0
 80037ba:	2009      	movs	r0, #9
 80037bc:	f004 fe52 	bl	8008464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80037c0:	2009      	movs	r0, #9
 80037c2:	f004 fe64 	bl	800848e <HAL_NVIC_EnableIRQ>

}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	40021000 	.word	0x40021000

080037d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037da:	240c      	movs	r4, #12
 80037dc:	193b      	adds	r3, r7, r4
 80037de:	0018      	movs	r0, r3
 80037e0:	2314      	movs	r3, #20
 80037e2:	001a      	movs	r2, r3
 80037e4:	2100      	movs	r1, #0
 80037e6:	f009 f854 	bl	800c892 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ea:	4b54      	ldr	r3, [pc, #336]	; (800393c <MX_GPIO_Init+0x168>)
 80037ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ee:	4b53      	ldr	r3, [pc, #332]	; (800393c <MX_GPIO_Init+0x168>)
 80037f0:	2102      	movs	r1, #2
 80037f2:	430a      	orrs	r2, r1
 80037f4:	635a      	str	r2, [r3, #52]	; 0x34
 80037f6:	4b51      	ldr	r3, [pc, #324]	; (800393c <MX_GPIO_Init+0x168>)
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003802:	4b4e      	ldr	r3, [pc, #312]	; (800393c <MX_GPIO_Init+0x168>)
 8003804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003806:	4b4d      	ldr	r3, [pc, #308]	; (800393c <MX_GPIO_Init+0x168>)
 8003808:	2101      	movs	r1, #1
 800380a:	430a      	orrs	r2, r1
 800380c:	635a      	str	r2, [r3, #52]	; 0x34
 800380e:	4b4b      	ldr	r3, [pc, #300]	; (800393c <MX_GPIO_Init+0x168>)
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	2201      	movs	r2, #1
 8003814:	4013      	ands	r3, r2
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800381a:	4b48      	ldr	r3, [pc, #288]	; (800393c <MX_GPIO_Init+0x168>)
 800381c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381e:	4b47      	ldr	r3, [pc, #284]	; (800393c <MX_GPIO_Init+0x168>)
 8003820:	2104      	movs	r1, #4
 8003822:	430a      	orrs	r2, r1
 8003824:	635a      	str	r2, [r3, #52]	; 0x34
 8003826:	4b45      	ldr	r3, [pc, #276]	; (800393c <MX_GPIO_Init+0x168>)
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	2204      	movs	r2, #4
 800382c:	4013      	ands	r3, r2
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable_Comm_Processor_3V3_Pin|LED_Array_Enable___Pin|LED_Power_Enable_Pin, GPIO_PIN_RESET);
 8003832:	238c      	movs	r3, #140	; 0x8c
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4842      	ldr	r0, [pc, #264]	; (8003940 <MX_GPIO_Init+0x16c>)
 8003838:	2200      	movs	r2, #0
 800383a:	0019      	movs	r1, r3
 800383c:	f005 f9fc 	bl	8008c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Enable_Comm_Processor_3V3_Pin LED_Array_Enable___Pin LED_Power_Enable_Pin */
  GPIO_InitStruct.Pin = Enable_Comm_Processor_3V3_Pin|LED_Array_Enable___Pin|LED_Power_Enable_Pin;
 8003840:	193b      	adds	r3, r7, r4
 8003842:	228c      	movs	r2, #140	; 0x8c
 8003844:	0092      	lsls	r2, r2, #2
 8003846:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003848:	193b      	adds	r3, r7, r4
 800384a:	2201      	movs	r2, #1
 800384c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	193b      	adds	r3, r7, r4
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003854:	193b      	adds	r3, r7, r4
 8003856:	2200      	movs	r2, #0
 8003858:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	193b      	adds	r3, r7, r4
 800385c:	4a38      	ldr	r2, [pc, #224]	; (8003940 <MX_GPIO_Init+0x16c>)
 800385e:	0019      	movs	r1, r3
 8003860:	0010      	movs	r0, r2
 8003862:	f005 f885 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Status_Pin */
  GPIO_InitStruct.Pin = Charge_Status_Pin;
 8003866:	193b      	adds	r3, r7, r4
 8003868:	2202      	movs	r2, #2
 800386a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800386c:	193b      	adds	r3, r7, r4
 800386e:	2203      	movs	r2, #3
 8003870:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	193b      	adds	r3, r7, r4
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charge_Status_GPIO_Port, &GPIO_InitStruct);
 8003878:	193a      	adds	r2, r7, r4
 800387a:	23a0      	movs	r3, #160	; 0xa0
 800387c:	05db      	lsls	r3, r3, #23
 800387e:	0011      	movs	r1, r2
 8003880:	0018      	movs	r0, r3
 8003882:	f005 f875 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SFLASH_CS_Pin */
  GPIO_InitStruct.Pin = SPI_SFLASH_CS_Pin;
 8003886:	193b      	adds	r3, r7, r4
 8003888:	2210      	movs	r2, #16
 800388a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800388c:	193b      	adds	r3, r7, r4
 800388e:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <MX_GPIO_Init+0x170>)
 8003890:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	193b      	adds	r3, r7, r4
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI_SFLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8003898:	193a      	adds	r2, r7, r4
 800389a:	23a0      	movs	r3, #160	; 0xa0
 800389c:	05db      	lsls	r3, r3, #23
 800389e:	0011      	movs	r1, r2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f005 f865 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMID___4_Pin VSYS___2_Pin */
  GPIO_InitStruct.Pin = PMID___4_Pin|VSYS___2_Pin;
 80038a6:	193b      	adds	r3, r7, r4
 80038a8:	220c      	movs	r2, #12
 80038aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ac:	193b      	adds	r3, r7, r4
 80038ae:	2203      	movs	r2, #3
 80038b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	193b      	adds	r3, r7, r4
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b8:	193b      	adds	r3, r7, r4
 80038ba:	4a21      	ldr	r2, [pc, #132]	; (8003940 <MX_GPIO_Init+0x16c>)
 80038bc:	0019      	movs	r1, r3
 80038be:	0010      	movs	r0, r2
 80038c0:	f005 f856 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charge_INT___Pin Power_Down___Pin UFP_Fault___Pin */
  GPIO_InitStruct.Pin = Charge_INT___Pin|Power_Down___Pin|UFP_Fault___Pin;
 80038c4:	193b      	adds	r3, r7, r4
 80038c6:	2283      	movs	r2, #131	; 0x83
 80038c8:	0212      	lsls	r2, r2, #8
 80038ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038cc:	193b      	adds	r3, r7, r4
 80038ce:	2200      	movs	r2, #0
 80038d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	193b      	adds	r3, r7, r4
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d8:	193a      	adds	r2, r7, r4
 80038da:	23a0      	movs	r3, #160	; 0xa0
 80038dc:	05db      	lsls	r3, r3, #23
 80038de:	0011      	movs	r1, r2
 80038e0:	0018      	movs	r0, r3
 80038e2:	f005 f845 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dead_Battery___Pin */
  GPIO_InitStruct.Pin = Dead_Battery___Pin;
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	2240      	movs	r2, #64	; 0x40
 80038ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ec:	193b      	adds	r3, r7, r4
 80038ee:	2200      	movs	r2, #0
 80038f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f2:	193b      	adds	r3, r7, r4
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Dead_Battery___GPIO_Port, &GPIO_InitStruct);
 80038f8:	193b      	adds	r3, r7, r4
 80038fa:	4a13      	ldr	r2, [pc, #76]	; (8003948 <MX_GPIO_Init+0x174>)
 80038fc:	0019      	movs	r1, r3
 80038fe:	0010      	movs	r0, r2
 8003900:	f005 f836 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Beeper_Pin */
  GPIO_InitStruct.Pin = Beeper_Pin;
 8003904:	0021      	movs	r1, r4
 8003906:	187b      	adds	r3, r7, r1
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	0052      	lsls	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390e:	187b      	adds	r3, r7, r1
 8003910:	2202      	movs	r2, #2
 8003912:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	187b      	adds	r3, r7, r1
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391a:	187b      	adds	r3, r7, r1
 800391c:	2200      	movs	r2, #0
 800391e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8003920:	187b      	adds	r3, r7, r1
 8003922:	2202      	movs	r2, #2
 8003924:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(Beeper_GPIO_Port, &GPIO_InitStruct);
 8003926:	187b      	adds	r3, r7, r1
 8003928:	4a05      	ldr	r2, [pc, #20]	; (8003940 <MX_GPIO_Init+0x16c>)
 800392a:	0019      	movs	r1, r3
 800392c:	0010      	movs	r0, r2
 800392e:	f005 f81f 	bl	8008970 <HAL_GPIO_Init>

}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b009      	add	sp, #36	; 0x24
 8003938:	bd90      	pop	{r4, r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	40021000 	.word	0x40021000
 8003940:	50000400 	.word	0x50000400
 8003944:	10110000 	.word	0x10110000
 8003948:	50000800 	.word	0x50000800

0800394c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <__io_putchar+0x20>)
 8003956:	1d39      	adds	r1, r7, #4
 8003958:	4805      	ldr	r0, [pc, #20]	; (8003970 <__io_putchar+0x24>)
 800395a:	2201      	movs	r2, #1
 800395c:	f007 fb9c 	bl	800b098 <HAL_UART_Transmit>

  return ch;
 8003960:	687b      	ldr	r3, [r7, #4]
}
 8003962:	0018      	movs	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	b002      	add	sp, #8
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	0000ffff 	.word	0x0000ffff
 8003970:	20000dd0 	.word	0x20000dd0

08003974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003986:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <HAL_MspInit+0x44>)
 8003988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398a:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <HAL_MspInit+0x44>)
 800398c:	2101      	movs	r1, #1
 800398e:	430a      	orrs	r2, r1
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_MspInit+0x44>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2201      	movs	r2, #1
 8003998:	4013      	ands	r3, r2
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_MspInit+0x44>)
 80039a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <HAL_MspInit+0x44>)
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	0549      	lsls	r1, r1, #21
 80039a8:	430a      	orrs	r2, r1
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_MspInit+0x44>)
 80039ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	055b      	lsls	r3, r3, #21
 80039b4:	4013      	ands	r3, r2
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	40021000 	.word	0x40021000

080039c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	2314      	movs	r3, #20
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	0018      	movs	r0, r3
 80039d6:	2314      	movs	r3, #20
 80039d8:	001a      	movs	r2, r3
 80039da:	2100      	movs	r1, #0
 80039dc:	f008 ff59 	bl	800c892 <memset>
  if(hadc->Instance==ADC1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <HAL_ADC_MspInit+0x80>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d129      	bne.n	8003a3e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80039ea:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <HAL_ADC_MspInit+0x84>)
 80039ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_ADC_MspInit+0x84>)
 80039f0:	2180      	movs	r1, #128	; 0x80
 80039f2:	0349      	lsls	r1, r1, #13
 80039f4:	430a      	orrs	r2, r1
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_ADC_MspInit+0x84>)
 80039fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	035b      	lsls	r3, r3, #13
 8003a00:	4013      	ands	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_ADC_MspInit+0x84>)
 8003a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_ADC_MspInit+0x84>)
 8003a0c:	2102      	movs	r1, #2
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	635a      	str	r2, [r3, #52]	; 0x34
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <HAL_ADC_MspInit+0x84>)
 8003a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a16:	2202      	movs	r2, #2
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = USB_C_in_1_Pin|USB_C_in_2_Pin;
 8003a1e:	2114      	movs	r1, #20
 8003a20:	187b      	adds	r3, r7, r1
 8003a22:	2203      	movs	r2, #3
 8003a24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a26:	187b      	adds	r3, r7, r1
 8003a28:	2203      	movs	r2, #3
 8003a2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	187b      	adds	r3, r7, r1
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	4a06      	ldr	r2, [pc, #24]	; (8003a50 <HAL_ADC_MspInit+0x88>)
 8003a36:	0019      	movs	r1, r3
 8003a38:	0010      	movs	r0, r2
 8003a3a:	f004 ff99 	bl	8008970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b00a      	add	sp, #40	; 0x28
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	40012400 	.word	0x40012400
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	50000400 	.word	0x50000400

08003a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	2314      	movs	r3, #20
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	0018      	movs	r0, r3
 8003a62:	2314      	movs	r3, #20
 8003a64:	001a      	movs	r2, r3
 8003a66:	2100      	movs	r1, #0
 8003a68:	f008 ff13 	bl	800c892 <memset>
  if(hi2c->Instance==I2C2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_I2C_MspInit+0x90>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d131      	bne.n	8003ada <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a76:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <HAL_I2C_MspInit+0x94>)
 8003a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <HAL_I2C_MspInit+0x94>)
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_I2C_MspInit+0x94>)
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	2201      	movs	r2, #1
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a8e:	2114      	movs	r1, #20
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	22c0      	movs	r2, #192	; 0xc0
 8003a94:	0152      	lsls	r2, r2, #5
 8003a96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	2212      	movs	r2, #18
 8003a9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a9e:	187b      	adds	r3, r7, r1
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003aaa:	187b      	adds	r3, r7, r1
 8003aac:	2206      	movs	r2, #6
 8003aae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab0:	187a      	adds	r2, r7, r1
 8003ab2:	23a0      	movs	r3, #160	; 0xa0
 8003ab4:	05db      	lsls	r3, r3, #23
 8003ab6:	0011      	movs	r1, r2
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f004 ff59 	bl	8008970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <HAL_I2C_MspInit+0x94>)
 8003ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_I2C_MspInit+0x94>)
 8003ac4:	2180      	movs	r1, #128	; 0x80
 8003ac6:	03c9      	lsls	r1, r1, #15
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_I2C_MspInit+0x94>)
 8003ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	03db      	lsls	r3, r3, #15
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b00a      	add	sp, #40	; 0x28
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	40005800 	.word	0x40005800
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a0d      	ldr	r2, [pc, #52]	; (8003b30 <HAL_RTC_MspInit+0x44>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d114      	bne.n	8003b28 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_RTC_MspInit+0x48>)
 8003b00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <HAL_RTC_MspInit+0x48>)
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	0209      	lsls	r1, r1, #8
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RTC_MspInit+0x48>)
 8003b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b10:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <HAL_RTC_MspInit+0x48>)
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	00c9      	lsls	r1, r1, #3
 8003b16:	430a      	orrs	r2, r1
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RTC_MspInit+0x48>)
 8003b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4013      	ands	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b004      	add	sp, #16
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40002800 	.word	0x40002800
 8003b34:	40021000 	.word	0x40021000

08003b38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b40:	231c      	movs	r3, #28
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	0018      	movs	r0, r3
 8003b46:	2314      	movs	r3, #20
 8003b48:	001a      	movs	r2, r3
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	f008 fea1 	bl	800c892 <memset>
  if(hspi->Instance==SPI1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a4b      	ldr	r2, [pc, #300]	; (8003c84 <HAL_SPI_MspInit+0x14c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d131      	bne.n	8003bbe <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b5a:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5e:	4b4a      	ldr	r3, [pc, #296]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003b60:	2180      	movs	r1, #128	; 0x80
 8003b62:	0149      	lsls	r1, r1, #5
 8003b64:	430a      	orrs	r2, r1
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40
 8003b68:	4b47      	ldr	r3, [pc, #284]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	015b      	lsls	r3, r3, #5
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b76:	4b44      	ldr	r3, [pc, #272]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b7a:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	635a      	str	r2, [r3, #52]	; 0x34
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	2201      	movs	r2, #1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI_SFLASH_CLK_Pin|SPI_SFLASH_MISO_Pin|SPI_SFLASH_MOSI_Pin;
 8003b8e:	211c      	movs	r1, #28
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	22e0      	movs	r2, #224	; 0xe0
 8003b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b96:	187b      	adds	r3, r7, r1
 8003b98:	2202      	movs	r2, #2
 8003b9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba2:	187b      	adds	r3, r7, r1
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bae:	187a      	adds	r2, r7, r1
 8003bb0:	23a0      	movs	r3, #160	; 0xa0
 8003bb2:	05db      	lsls	r3, r3, #23
 8003bb4:	0011      	movs	r1, r2
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f004 feda 	bl	8008970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003bbc:	e05e      	b.n	8003c7c <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a32      	ldr	r2, [pc, #200]	; (8003c8c <HAL_SPI_MspInit+0x154>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d159      	bne.n	8003c7c <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bc8:	4b2f      	ldr	r3, [pc, #188]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bcc:	4b2e      	ldr	r3, [pc, #184]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003bce:	2180      	movs	r1, #128	; 0x80
 8003bd0:	01c9      	lsls	r1, r1, #7
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bd6:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	01db      	lsls	r3, r3, #7
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be4:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be8:	4b27      	ldr	r3, [pc, #156]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	430a      	orrs	r2, r1
 8003bee:	635a      	str	r2, [r3, #52]	; 0x34
 8003bf0:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <HAL_SPI_MspInit+0x150>)
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_CLK___Not_Used_Pin|SPI2_OUT_LED_Display_Pin;
 8003bfc:	211c      	movs	r1, #28
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <HAL_SPI_MspInit+0x158>)
 8003c02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	2202      	movs	r2, #2
 8003c08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	2200      	movs	r2, #0
 8003c14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1c:	187a      	adds	r2, r7, r1
 8003c1e:	23a0      	movs	r3, #160	; 0xa0
 8003c20:	05db      	lsls	r3, r3, #23
 8003c22:	0011      	movs	r1, r2
 8003c24:	0018      	movs	r0, r3
 8003c26:	f004 fea3 	bl	8008970 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8003c2a:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c2c:	4a1a      	ldr	r2, [pc, #104]	; (8003c98 <HAL_SPI_MspInit+0x160>)
 8003c2e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003c30:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c32:	2213      	movs	r2, #19
 8003c34:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c36:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c38:	2210      	movs	r2, #16
 8003c3a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c3c:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c42:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c48:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c4e:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c5a:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c62:	0018      	movs	r0, r3
 8003c64:	f004 fc30 	bl	80084c8 <HAL_DMA_Init>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8003c6c:	f7ff fe82 	bl	8003974 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <HAL_SPI_MspInit+0x15c>)
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b00c      	add	sp, #48	; 0x30
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40013000 	.word	0x40013000
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40003800 	.word	0x40003800
 8003c90:	00000401 	.word	0x00000401
 8003c94:	20000e5c 	.word	0x20000e5c
 8003c98:	40020008 	.word	0x40020008

08003c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	; 0x30
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	231c      	movs	r3, #28
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	0018      	movs	r0, r3
 8003caa:	2314      	movs	r3, #20
 8003cac:	001a      	movs	r2, r3
 8003cae:	2100      	movs	r1, #0
 8003cb0:	f008 fdef 	bl	800c892 <memset>
  if(huart->Instance==USART1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a36      	ldr	r2, [pc, #216]	; (8003d94 <HAL_UART_MspInit+0xf8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d130      	bne.n	8003d20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cbe:	4b36      	ldr	r3, [pc, #216]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc2:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003cc4:	2180      	movs	r1, #128	; 0x80
 8003cc6:	01c9      	lsls	r1, r1, #7
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
 8003ccc:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	01db      	lsls	r3, r3, #7
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cda:	4b2f      	ldr	r3, [pc, #188]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cde:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cea:	2202      	movs	r2, #2
 8003cec:	4013      	ands	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_to_Comm_Processor_Pin|RX_from_Comm_Processor_Pin;
 8003cf2:	211c      	movs	r1, #28
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	22c0      	movs	r2, #192	; 0xc0
 8003cf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <HAL_UART_MspInit+0x100>)
 8003d16:	0019      	movs	r1, r3
 8003d18:	0010      	movs	r0, r2
 8003d1a:	f004 fe29 	bl	8008970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d1e:	e035      	b.n	8003d8c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <HAL_UART_MspInit+0x104>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d130      	bne.n	8003d8c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	0289      	lsls	r1, r1, #10
 8003d34:	430a      	orrs	r2, r1
 8003d36:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d38:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	029b      	lsls	r3, r3, #10
 8003d40:	4013      	ands	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	635a      	str	r2, [r3, #52]	; 0x34
 8003d52:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <HAL_UART_MspInit+0xfc>)
 8003d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d56:	2201      	movs	r2, #1
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
 8003d5e:	211c      	movs	r1, #28
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	220c      	movs	r2, #12
 8003d64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d66:	187b      	adds	r3, r7, r1
 8003d68:	2202      	movs	r2, #2
 8003d6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	2200      	movs	r2, #0
 8003d76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d7e:	187a      	adds	r2, r7, r1
 8003d80:	23a0      	movs	r3, #160	; 0xa0
 8003d82:	05db      	lsls	r3, r3, #23
 8003d84:	0011      	movs	r1, r2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f004 fdf2 	bl	8008970 <HAL_GPIO_Init>
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b00c      	add	sp, #48	; 0x30
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40013800 	.word	0x40013800
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	50000400 	.word	0x50000400
 8003da0:	40004400 	.word	0x40004400

08003da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003db2:	e7fe      	b.n	8003db2 <HardFault_Handler+0x4>

08003db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dcc:	f003 fdd0 	bl	8007970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <DMA1_Channel1_IRQHandler+0x18>)
 8003dde:	0018      	movs	r0, r3
 8003de0:	f004 fc84 	bl	80086ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  LED_display_update_completed = true;
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <DMA1_Channel1_IRQHandler+0x1c>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000e5c 	.word	0x20000e5c
 8003df4:	20000eb8 	.word	0x20000eb8

08003df8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e00a      	b.n	8003e20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e0a:	e000      	b.n	8003e0e <_read+0x16>
 8003e0c:	bf00      	nop
 8003e0e:	0001      	movs	r1, r0
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	60ba      	str	r2, [r7, #8]
 8003e16:	b2ca      	uxtb	r2, r1
 8003e18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	dbf0      	blt.n	8003e0a <_read+0x12>
	}

return len;
 8003e28:	687b      	ldr	r3, [r7, #4]
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b006      	add	sp, #24
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	e009      	b.n	8003e58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	60ba      	str	r2, [r7, #8]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7ff fd7d 	bl	800394c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	3301      	adds	r3, #1
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	dbf1      	blt.n	8003e44 <_write+0x12>
	}
	return len;
 8003e60:	687b      	ldr	r3, [r7, #4]
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b006      	add	sp, #24
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_close>:

int _close(int file)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
	return -1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	425b      	negs	r3, r3
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b002      	add	sp, #8
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	0192      	lsls	r2, r2, #6
 8003e8e:	605a      	str	r2, [r3, #4]
	return 0;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	0018      	movs	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b002      	add	sp, #8
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_isatty>:

int _isatty(int file)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ea2:	2301      	movs	r3, #1
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
	return 0;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b004      	add	sp, #16
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <_sbrk+0x50>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <_sbrk+0x16>
		heap_end = &end;
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <_sbrk+0x50>)
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <_sbrk+0x54>)
 8003ed8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <_sbrk+0x50>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <_sbrk+0x50>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	18d3      	adds	r3, r2, r3
 8003ee8:	466a      	mov	r2, sp
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d907      	bls.n	8003efe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003eee:	f008 fc9d 	bl	800c82c <__errno>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	220c      	movs	r2, #12
 8003ef6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	425b      	negs	r3, r3
 8003efc:	e006      	b.n	8003f0c <_sbrk+0x48>
	}

	heap_end += incr;
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <_sbrk+0x50>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	18d2      	adds	r2, r2, r3
 8003f06:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <_sbrk+0x50>)
 8003f08:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b004      	add	sp, #16
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	2000009c 	.word	0x2000009c
 8003f18:	20001168 	.word	0x20001168

08003f1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <SystemInit+0x14>)
 8003f22:	2280      	movs	r2, #128	; 0x80
 8003f24:	0512      	lsls	r2, r2, #20
 8003f26:	609a      	str	r2, [r3, #8]
#endif
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <init_bme680>:
  * @param  None
  * @retval : None
  */

bool init_bme680(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
	return false;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <bsec_sensor_control>:
bsec_library_return_t bsec_sensor_control(const int64_t time_stamp, bsec_bme_settings_t *sensor_settings)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60b8      	str	r0, [r7, #8]
 8003f48:	60f9      	str	r1, [r7, #12]
 8003f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b004      	add	sp, #16
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <bme680_bsec_trigger_measurement>:
void bme680_bsec_trigger_measurement(bsec_bme_settings_t *sensor_settings, uint32_t sleep)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]

}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <bme680_bsec_read_data>:
void bme680_bsec_read_data(int64_t time_stamp_trigger, bsec_input_t *inputs, uint8_t *num_bsec_inputs, int32_t bsec_process_data)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60b8      	str	r0, [r7, #8]
 8003f70:	60f9      	str	r1, [r7, #12]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]

}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b004      	add	sp, #16
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <bme680_bsec_process_data>:
bme680_bsec_process_data(bsec_inputs, num_bsec_inputs, output_ready)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]

}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <bsec_get_state>:
bsec_library_return_t bsec_get_state(const uint8_t state_set_id, uint8_t * serialized_state,
                const uint32_t n_serialized_state_max, uint8_t * work_buffer, const uint32_t n_work_buffer,
                uint32_t * n_serialized_state)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	230f      	movs	r3, #15
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	1c02      	adds	r2, r0, #0
 8003fa6:	701a      	strb	r2, [r3, #0]

}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b004      	add	sp, #16
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <update_co2_voc>:
  * @brief update CO2 & VOC setting - this for routines that need instant values
  * @param  None
  * @retval : True / False
  */
bool update_co2_voc(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
    uint16_t tvoc_ppb, co2_eq_ppm;
    if( get_voc_co2_eq( &tvoc_ppb, &co2_eq_ppm ) == true ) {
 8003fba:	1d3a      	adds	r2, r7, #4
 8003fbc:	1dbb      	adds	r3, r7, #6
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f002 fa55 	bl	8006470 <get_voc_co2_eq>
 8003fc6:	1e03      	subs	r3, r0, #0
 8003fc8:	d019      	beq.n	8003ffe <update_co2_voc+0x4a>
        hs.current_tvoc_level = tvoc_ppb;
 8003fca:	1dbb      	adds	r3, r7, #6
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	001a      	movs	r2, r3
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <update_co2_voc+0x54>)
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c
        hs.valid_tvoc_level = true;
 8003fd4:	4a0c      	ldr	r2, [pc, #48]	; (8004008 <update_co2_voc+0x54>)
 8003fd6:	23a1      	movs	r3, #161	; 0xa1
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	5cd1      	ldrb	r1, [r2, r3]
 8003fdc:	2040      	movs	r0, #64	; 0x40
 8003fde:	4301      	orrs	r1, r0
 8003fe0:	54d1      	strb	r1, [r2, r3]
        hs.current_co2_level = co2_eq_ppm;
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	4b07      	ldr	r3, [pc, #28]	; (8004008 <update_co2_voc+0x54>)
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
        hs.valid_co2_level = true;
 8003fec:	4a06      	ldr	r2, [pc, #24]	; (8004008 <update_co2_voc+0x54>)
 8003fee:	23a1      	movs	r3, #161	; 0xa1
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	5cd1      	ldrb	r1, [r2, r3]
 8003ff4:	2020      	movs	r0, #32
 8003ff6:	4301      	orrs	r1, r0
 8003ff8:	54d1      	strb	r1, [r2, r3]
        return true;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <update_co2_voc+0x4c>
    } else {
        return false;
 8003ffe:	2300      	movs	r3, #0
    }
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b002      	add	sp, #8
 8004006:	bd80      	pop	{r7, pc}
 8004008:	200006f8 	.word	0x200006f8

0800400c <led_init>:
  * @brief	Initialize the LED Display
  * @param  None
  * @retval : None
  */
void led_init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
	/*
	 * Set flag to indicate that the SPI is available to load new data
	 */
	LED_display_update_completed = true;
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <led_init+0x40>)
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
	hs.led_bar_state = LED_BAR_INIT;
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <led_init+0x44>)
 8004018:	2200      	movs	r2, #0
 800401a:	721a      	strb	r2, [r3, #8]
    hs.ev_display_scan_mode = true;
 800401c:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <led_init+0x44>)
 800401e:	23a1      	movs	r3, #161	; 0xa1
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	5cd1      	ldrb	r1, [r2, r3]
 8004024:	2008      	movs	r0, #8
 8004026:	4301      	orrs	r1, r0
 8004028:	54d1      	strb	r1, [r2, r3]
    hs.led_bar_display_status = true;
 800402a:	4a09      	ldr	r2, [pc, #36]	; (8004050 <led_init+0x44>)
 800402c:	23a1      	movs	r3, #161	; 0xa1
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	5cd1      	ldrb	r1, [r2, r3]
 8004032:	2004      	movs	r0, #4
 8004034:	4301      	orrs	r1, r0
 8004036:	54d1      	strb	r1, [r2, r3]
    led_bar_scan_setup( green_blend_scan[ 0 ], green_blend_scan[ 1 ], green_blend_scan[ 2 ], 250 );
 8004038:	2000      	movs	r0, #0
 800403a:	21ff      	movs	r1, #255	; 0xff
 800403c:	2255      	movs	r2, #85	; 0x55
 800403e:	23fa      	movs	r3, #250	; 0xfa
 8004040:	f000 f87e 	bl	8004140 <led_bar_scan_setup>
}
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	20000eb8 	.word	0x20000eb8
 8004050:	200006f8 	.word	0x200006f8

08004054 <process_led_display>:
  * @brief	Process the LED Display
  * @param  None
  * @retval : None
  */
void process_led_display( uint32_t current_time )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
//	led_bar_test();
	led_bar_scan_mode_left( current_time );
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 fa40 	bl	80044e4 <led_bar_scan_mode_left>
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b002      	add	sp, #8
 800406a:	bd80      	pop	{r7, pc}

0800406c <set_led_bar_raw>:
  * @brief set_led_bar_raw
  * @param  LED, Color Values R G B
  * @retval : None
  */
void set_led_bar_raw( uint8_t led, uint16_t raw_red_level, uint16_t raw_green_level, uint16_t raw_blue_level )
{
 800406c:	b5b0      	push	{r4, r5, r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	0005      	movs	r5, r0
 8004074:	000c      	movs	r4, r1
 8004076:	0010      	movs	r0, r2
 8004078:	0019      	movs	r1, r3
 800407a:	1dfb      	adds	r3, r7, #7
 800407c:	1c2a      	adds	r2, r5, #0
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	1c22      	adds	r2, r4, #0
 8004084:	801a      	strh	r2, [r3, #0]
 8004086:	1cbb      	adds	r3, r7, #2
 8004088:	1c02      	adds	r2, r0, #0
 800408a:	801a      	strh	r2, [r3, #0]
 800408c:	003b      	movs	r3, r7
 800408e:	1c0a      	adds	r2, r1, #0
 8004090:	801a      	strh	r2, [r3, #0]
     *
     * Adjust based on https://www.ledsmagazine.com/smart-lighting-iot/color-tuning/article/16695054/understand-rgb-led-mixing-ratios-to-realize-optimal-color-in-signs-and-displays-magazine
     *
     * Color values and scale
     */
	if( raw_red_level > 255 )
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	2bff      	cmp	r3, #255	; 0xff
 8004098:	d902      	bls.n	80040a0 <set_led_bar_raw+0x34>
		raw_red_level = 255;
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	22ff      	movs	r2, #255	; 0xff
 800409e:	801a      	strh	r2, [r3, #0]
	if( raw_green_level > 255 )
 80040a0:	1cbb      	adds	r3, r7, #2
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	2bff      	cmp	r3, #255	; 0xff
 80040a6:	d902      	bls.n	80040ae <set_led_bar_raw+0x42>
		raw_green_level = 255;
 80040a8:	1cbb      	adds	r3, r7, #2
 80040aa:	22ff      	movs	r2, #255	; 0xff
 80040ac:	801a      	strh	r2, [r3, #0]
	if( raw_blue_level > 255 )
 80040ae:	003b      	movs	r3, r7
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	2bff      	cmp	r3, #255	; 0xff
 80040b4:	d902      	bls.n	80040bc <set_led_bar_raw+0x50>
		raw_blue_level = 255;
 80040b6:	003b      	movs	r3, r7
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	801a      	strh	r2, [r3, #0]

    if( led < LED_BAR_NO_LEDS ) {
 80040bc:	1dfb      	adds	r3, r7, #7
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b0b      	cmp	r3, #11
 80040c2:	d82d      	bhi.n	8004120 <set_led_bar_raw+0xb4>
        led_display[ led ][ EV_LED_RED ] =  cie[ raw_red_level ];		// (uint8_t) (float) ( raw_red_level * ( 4.0 * ( 255 / 1020 ) ) );
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	4a17      	ldr	r2, [pc, #92]	; (8004128 <set_led_bar_raw+0xbc>)
 80040ca:	5cd1      	ldrb	r1, [r2, r3]
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	b288      	uxth	r0, r1
 80040d2:	4916      	ldr	r1, [pc, #88]	; (800412c <set_led_bar_raw+0xc0>)
 80040d4:	0013      	movs	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	18cb      	adds	r3, r1, r3
 80040de:	3302      	adds	r3, #2
 80040e0:	1c02      	adds	r2, r0, #0
 80040e2:	801a      	strh	r2, [r3, #0]
        led_display[ led ][ EV_LED_GREEN ] =  cie[ raw_green_level ];	// (uint8_t) (float) ( raw_green_level * ( 3.0 * ( 255 / 1020 ) ) );
 80040e4:	1cbb      	adds	r3, r7, #2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	4a0f      	ldr	r2, [pc, #60]	; (8004128 <set_led_bar_raw+0xbc>)
 80040ea:	5cd1      	ldrb	r1, [r2, r3]
 80040ec:	1dfb      	adds	r3, r7, #7
 80040ee:	781a      	ldrb	r2, [r3, #0]
 80040f0:	b288      	uxth	r0, r1
 80040f2:	490e      	ldr	r1, [pc, #56]	; (800412c <set_led_bar_raw+0xc0>)
 80040f4:	0013      	movs	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	189b      	adds	r3, r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	1c02      	adds	r2, r0, #0
 80040fe:	525a      	strh	r2, [r3, r1]
        led_display[ led ][ EV_LED_BLUE ] =  cie[ raw_blue_level ];	// (uint8_t) (float) ( raw_blue_level * ( 1.0 * ( 255 / 1020 ) ) );
 8004100:	003b      	movs	r3, r7
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	4a08      	ldr	r2, [pc, #32]	; (8004128 <set_led_bar_raw+0xbc>)
 8004106:	5cd1      	ldrb	r1, [r2, r3]
 8004108:	1dfb      	adds	r3, r7, #7
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	b288      	uxth	r0, r1
 800410e:	4907      	ldr	r1, [pc, #28]	; (800412c <set_led_bar_raw+0xc0>)
 8004110:	0013      	movs	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	189b      	adds	r3, r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	18cb      	adds	r3, r1, r3
 800411a:	3304      	adds	r3, #4
 800411c:	1c02      	adds	r2, r0, #0
 800411e:	801a      	strh	r2, [r3, #0]
    }
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bdb0      	pop	{r4, r5, r7, pc}
 8004128:	0800f100 	.word	0x0800f100
 800412c:	20000ebc 	.word	0x20000ebc

08004130 <init_led_bar>:
  * @brief init_led_bar
  * @param  None
  * @retval : None
  */
void init_led_bar(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
    led_bar_off();
 8004134:	f000 fa68 	bl	8004608 <led_bar_off>
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <led_bar_scan_setup>:
#define EVD_MAX     1.00
#define EVD_HIGH    0.70
#define EVD_MED     0.40
#define EVD_LOW     0.20
void led_bar_scan_setup( uint16_t red, uint16_t green, uint16_t blue, uint16_t transision_period )
{
 8004140:	b5b0      	push	{r4, r5, r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	0005      	movs	r5, r0
 8004148:	000c      	movs	r4, r1
 800414a:	0010      	movs	r0, r2
 800414c:	0019      	movs	r1, r3
 800414e:	1dbb      	adds	r3, r7, #6
 8004150:	1c2a      	adds	r2, r5, #0
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	1c22      	adds	r2, r4, #0
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	1cbb      	adds	r3, r7, #2
 800415c:	1c02      	adds	r2, r0, #0
 800415e:	801a      	strh	r2, [r3, #0]
 8004160:	003b      	movs	r3, r7
 8004162:	1c0a      	adds	r2, r1, #0
 8004164:	801a      	strh	r2, [r3, #0]

    uint16_t i;
    /*
     * Set all to low first
     */
    for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 8004166:	230e      	movs	r3, #14
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2200      	movs	r2, #0
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	e068      	b.n	8004242 <led_bar_scan_setup+0x102>
    	display_state_levels[ i ][ EV_LED_RED ] = (uint16_t) ( (float) red * EVD_LOW );
 8004170:	1dbb      	adds	r3, r7, #6
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	0018      	movs	r0, r3
 8004176:	f7fd f99d 	bl	80014b4 <__aeabi_ui2f>
 800417a:	1c03      	adds	r3, r0, #0
 800417c:	1c18      	adds	r0, r3, #0
 800417e:	f7fe ff45 	bl	800300c <__aeabi_f2d>
 8004182:	4ad1      	ldr	r2, [pc, #836]	; (80044c8 <led_bar_scan_setup+0x388>)
 8004184:	4bd1      	ldr	r3, [pc, #836]	; (80044cc <led_bar_scan_setup+0x38c>)
 8004186:	f7fe f8fb 	bl	8002380 <__aeabi_dmul>
 800418a:	0003      	movs	r3, r0
 800418c:	000c      	movs	r4, r1
 800418e:	0019      	movs	r1, r3
 8004190:	0022      	movs	r2, r4
 8004192:	250e      	movs	r5, #14
 8004194:	197b      	adds	r3, r7, r5
 8004196:	881c      	ldrh	r4, [r3, #0]
 8004198:	0008      	movs	r0, r1
 800419a:	0011      	movs	r1, r2
 800419c:	f7fc f9d8 	bl	8000550 <__aeabi_d2uiz>
 80041a0:	0003      	movs	r3, r0
 80041a2:	b299      	uxth	r1, r3
 80041a4:	4aca      	ldr	r2, [pc, #808]	; (80044d0 <led_bar_scan_setup+0x390>)
 80041a6:	0023      	movs	r3, r4
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	191b      	adds	r3, r3, r4
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	18d3      	adds	r3, r2, r3
 80041b0:	3302      	adds	r3, #2
 80041b2:	1c0a      	adds	r2, r1, #0
 80041b4:	801a      	strh	r2, [r3, #0]
    	display_state_levels[ i ][ EV_LED_GREEN ] = (uint16_t) ( (float) green * EVD_LOW );
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7fd f97a 	bl	80014b4 <__aeabi_ui2f>
 80041c0:	1c03      	adds	r3, r0, #0
 80041c2:	1c18      	adds	r0, r3, #0
 80041c4:	f7fe ff22 	bl	800300c <__aeabi_f2d>
 80041c8:	4abf      	ldr	r2, [pc, #764]	; (80044c8 <led_bar_scan_setup+0x388>)
 80041ca:	4bc0      	ldr	r3, [pc, #768]	; (80044cc <led_bar_scan_setup+0x38c>)
 80041cc:	f7fe f8d8 	bl	8002380 <__aeabi_dmul>
 80041d0:	0003      	movs	r3, r0
 80041d2:	000c      	movs	r4, r1
 80041d4:	0019      	movs	r1, r3
 80041d6:	0022      	movs	r2, r4
 80041d8:	197b      	adds	r3, r7, r5
 80041da:	881c      	ldrh	r4, [r3, #0]
 80041dc:	0008      	movs	r0, r1
 80041de:	0011      	movs	r1, r2
 80041e0:	f7fc f9b6 	bl	8000550 <__aeabi_d2uiz>
 80041e4:	0003      	movs	r3, r0
 80041e6:	b299      	uxth	r1, r3
 80041e8:	4ab9      	ldr	r2, [pc, #740]	; (80044d0 <led_bar_scan_setup+0x390>)
 80041ea:	0023      	movs	r3, r4
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	191b      	adds	r3, r3, r4
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	5299      	strh	r1, [r3, r2]
    	display_state_levels[ i ][ EV_LED_BLUE ] = (uint16_t) ( (float) blue * EVD_LOW );
 80041f4:	1cbb      	adds	r3, r7, #2
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	0018      	movs	r0, r3
 80041fa:	f7fd f95b 	bl	80014b4 <__aeabi_ui2f>
 80041fe:	1c03      	adds	r3, r0, #0
 8004200:	1c18      	adds	r0, r3, #0
 8004202:	f7fe ff03 	bl	800300c <__aeabi_f2d>
 8004206:	4ab0      	ldr	r2, [pc, #704]	; (80044c8 <led_bar_scan_setup+0x388>)
 8004208:	4bb0      	ldr	r3, [pc, #704]	; (80044cc <led_bar_scan_setup+0x38c>)
 800420a:	f7fe f8b9 	bl	8002380 <__aeabi_dmul>
 800420e:	0003      	movs	r3, r0
 8004210:	000c      	movs	r4, r1
 8004212:	0019      	movs	r1, r3
 8004214:	0022      	movs	r2, r4
 8004216:	197b      	adds	r3, r7, r5
 8004218:	881c      	ldrh	r4, [r3, #0]
 800421a:	0008      	movs	r0, r1
 800421c:	0011      	movs	r1, r2
 800421e:	f7fc f997 	bl	8000550 <__aeabi_d2uiz>
 8004222:	0003      	movs	r3, r0
 8004224:	b299      	uxth	r1, r3
 8004226:	4aaa      	ldr	r2, [pc, #680]	; (80044d0 <led_bar_scan_setup+0x390>)
 8004228:	0023      	movs	r3, r4
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	191b      	adds	r3, r3, r4
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	18d3      	adds	r3, r2, r3
 8004232:	3304      	adds	r3, #4
 8004234:	1c0a      	adds	r2, r1, #0
 8004236:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 8004238:	197b      	adds	r3, r7, r5
 800423a:	881a      	ldrh	r2, [r3, #0]
 800423c:	197b      	adds	r3, r7, r5
 800423e:	3201      	adds	r2, #1
 8004240:	801a      	strh	r2, [r3, #0]
 8004242:	230e      	movs	r3, #14
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	2b0b      	cmp	r3, #11
 800424a:	d991      	bls.n	8004170 <led_bar_scan_setup+0x30>
     */
    /*
     *  0  ...  3   4     5    6    7     8   9       11
     * LOW ... LOW MED, HIGH, MAX, HIGH, MED LOW .... LOW
     */
    display_state_levels[ 4 ][ EV_LED_RED ] = (uint16_t) ( (float) red * EVD_MED );
 800424c:	1dbb      	adds	r3, r7, #6
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	0018      	movs	r0, r3
 8004252:	f7fd f92f 	bl	80014b4 <__aeabi_ui2f>
 8004256:	1c03      	adds	r3, r0, #0
 8004258:	1c18      	adds	r0, r3, #0
 800425a:	f7fe fed7 	bl	800300c <__aeabi_f2d>
 800425e:	4a9a      	ldr	r2, [pc, #616]	; (80044c8 <led_bar_scan_setup+0x388>)
 8004260:	4b9c      	ldr	r3, [pc, #624]	; (80044d4 <led_bar_scan_setup+0x394>)
 8004262:	f7fe f88d 	bl	8002380 <__aeabi_dmul>
 8004266:	0003      	movs	r3, r0
 8004268:	000c      	movs	r4, r1
 800426a:	0018      	movs	r0, r3
 800426c:	0021      	movs	r1, r4
 800426e:	f7fc f96f 	bl	8000550 <__aeabi_d2uiz>
 8004272:	0003      	movs	r3, r0
 8004274:	b29a      	uxth	r2, r3
 8004276:	4b96      	ldr	r3, [pc, #600]	; (80044d0 <led_bar_scan_setup+0x390>)
 8004278:	835a      	strh	r2, [r3, #26]
    display_state_levels[ 4 ][ EV_LED_GREEN ] = (uint16_t) ( (float) green * EVD_MED );
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	0018      	movs	r0, r3
 8004280:	f7fd f918 	bl	80014b4 <__aeabi_ui2f>
 8004284:	1c03      	adds	r3, r0, #0
 8004286:	1c18      	adds	r0, r3, #0
 8004288:	f7fe fec0 	bl	800300c <__aeabi_f2d>
 800428c:	4a8e      	ldr	r2, [pc, #568]	; (80044c8 <led_bar_scan_setup+0x388>)
 800428e:	4b91      	ldr	r3, [pc, #580]	; (80044d4 <led_bar_scan_setup+0x394>)
 8004290:	f7fe f876 	bl	8002380 <__aeabi_dmul>
 8004294:	0003      	movs	r3, r0
 8004296:	000c      	movs	r4, r1
 8004298:	0018      	movs	r0, r3
 800429a:	0021      	movs	r1, r4
 800429c:	f7fc f958 	bl	8000550 <__aeabi_d2uiz>
 80042a0:	0003      	movs	r3, r0
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	4b8a      	ldr	r3, [pc, #552]	; (80044d0 <led_bar_scan_setup+0x390>)
 80042a6:	831a      	strh	r2, [r3, #24]
    display_state_levels[ 4 ][ EV_LED_BLUE ] = (uint16_t) ( (float) blue * EVD_MED );
 80042a8:	1cbb      	adds	r3, r7, #2
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7fd f901 	bl	80014b4 <__aeabi_ui2f>
 80042b2:	1c03      	adds	r3, r0, #0
 80042b4:	1c18      	adds	r0, r3, #0
 80042b6:	f7fe fea9 	bl	800300c <__aeabi_f2d>
 80042ba:	4a83      	ldr	r2, [pc, #524]	; (80044c8 <led_bar_scan_setup+0x388>)
 80042bc:	4b85      	ldr	r3, [pc, #532]	; (80044d4 <led_bar_scan_setup+0x394>)
 80042be:	f7fe f85f 	bl	8002380 <__aeabi_dmul>
 80042c2:	0003      	movs	r3, r0
 80042c4:	000c      	movs	r4, r1
 80042c6:	0018      	movs	r0, r3
 80042c8:	0021      	movs	r1, r4
 80042ca:	f7fc f941 	bl	8000550 <__aeabi_d2uiz>
 80042ce:	0003      	movs	r3, r0
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	4b7f      	ldr	r3, [pc, #508]	; (80044d0 <led_bar_scan_setup+0x390>)
 80042d4:	839a      	strh	r2, [r3, #28]

    display_state_levels[ 5 ][ EV_LED_RED ] = (uint16_t) ( (float) red * EVD_HIGH );
 80042d6:	1dbb      	adds	r3, r7, #6
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	0018      	movs	r0, r3
 80042dc:	f7fd f8ea 	bl	80014b4 <__aeabi_ui2f>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7fe fe92 	bl	800300c <__aeabi_f2d>
 80042e8:	4a7b      	ldr	r2, [pc, #492]	; (80044d8 <led_bar_scan_setup+0x398>)
 80042ea:	4b7c      	ldr	r3, [pc, #496]	; (80044dc <led_bar_scan_setup+0x39c>)
 80042ec:	f7fe f848 	bl	8002380 <__aeabi_dmul>
 80042f0:	0003      	movs	r3, r0
 80042f2:	000c      	movs	r4, r1
 80042f4:	0018      	movs	r0, r3
 80042f6:	0021      	movs	r1, r4
 80042f8:	f7fc f92a 	bl	8000550 <__aeabi_d2uiz>
 80042fc:	0003      	movs	r3, r0
 80042fe:	b29a      	uxth	r2, r3
 8004300:	4b73      	ldr	r3, [pc, #460]	; (80044d0 <led_bar_scan_setup+0x390>)
 8004302:	841a      	strh	r2, [r3, #32]
    display_state_levels[ 5 ][ EV_LED_GREEN ] = (uint16_t) ( (float) green * EVD_HIGH );
 8004304:	1d3b      	adds	r3, r7, #4
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	0018      	movs	r0, r3
 800430a:	f7fd f8d3 	bl	80014b4 <__aeabi_ui2f>
 800430e:	1c03      	adds	r3, r0, #0
 8004310:	1c18      	adds	r0, r3, #0
 8004312:	f7fe fe7b 	bl	800300c <__aeabi_f2d>
 8004316:	4a70      	ldr	r2, [pc, #448]	; (80044d8 <led_bar_scan_setup+0x398>)
 8004318:	4b70      	ldr	r3, [pc, #448]	; (80044dc <led_bar_scan_setup+0x39c>)
 800431a:	f7fe f831 	bl	8002380 <__aeabi_dmul>
 800431e:	0003      	movs	r3, r0
 8004320:	000c      	movs	r4, r1
 8004322:	0018      	movs	r0, r3
 8004324:	0021      	movs	r1, r4
 8004326:	f7fc f913 	bl	8000550 <__aeabi_d2uiz>
 800432a:	0003      	movs	r3, r0
 800432c:	b29a      	uxth	r2, r3
 800432e:	4b68      	ldr	r3, [pc, #416]	; (80044d0 <led_bar_scan_setup+0x390>)
 8004330:	83da      	strh	r2, [r3, #30]
    display_state_levels[ 5 ][ EV_LED_BLUE ] = (uint16_t) ( (float) blue * EVD_HIGH );
 8004332:	1cbb      	adds	r3, r7, #2
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	0018      	movs	r0, r3
 8004338:	f7fd f8bc 	bl	80014b4 <__aeabi_ui2f>
 800433c:	1c03      	adds	r3, r0, #0
 800433e:	1c18      	adds	r0, r3, #0
 8004340:	f7fe fe64 	bl	800300c <__aeabi_f2d>
 8004344:	4a64      	ldr	r2, [pc, #400]	; (80044d8 <led_bar_scan_setup+0x398>)
 8004346:	4b65      	ldr	r3, [pc, #404]	; (80044dc <led_bar_scan_setup+0x39c>)
 8004348:	f7fe f81a 	bl	8002380 <__aeabi_dmul>
 800434c:	0003      	movs	r3, r0
 800434e:	000c      	movs	r4, r1
 8004350:	0018      	movs	r0, r3
 8004352:	0021      	movs	r1, r4
 8004354:	f7fc f8fc 	bl	8000550 <__aeabi_d2uiz>
 8004358:	0003      	movs	r3, r0
 800435a:	b29a      	uxth	r2, r3
 800435c:	4b5c      	ldr	r3, [pc, #368]	; (80044d0 <led_bar_scan_setup+0x390>)
 800435e:	845a      	strh	r2, [r3, #34]	; 0x22

    display_state_levels[ 6 ][ EV_LED_RED ] = red;
 8004360:	4b5b      	ldr	r3, [pc, #364]	; (80044d0 <led_bar_scan_setup+0x390>)
 8004362:	1dba      	adds	r2, r7, #6
 8004364:	8812      	ldrh	r2, [r2, #0]
 8004366:	84da      	strh	r2, [r3, #38]	; 0x26
    display_state_levels[ 6 ][ EV_LED_GREEN ] = green;
 8004368:	4b59      	ldr	r3, [pc, #356]	; (80044d0 <led_bar_scan_setup+0x390>)
 800436a:	1d3a      	adds	r2, r7, #4
 800436c:	8812      	ldrh	r2, [r2, #0]
 800436e:	849a      	strh	r2, [r3, #36]	; 0x24
    display_state_levels[ 6 ][ EV_LED_BLUE] = blue;
 8004370:	4b57      	ldr	r3, [pc, #348]	; (80044d0 <led_bar_scan_setup+0x390>)
 8004372:	1cba      	adds	r2, r7, #2
 8004374:	8812      	ldrh	r2, [r2, #0]
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28

    display_state_levels[ 7 ][ EV_LED_RED ] = (uint16_t) ( (float) red * EVD_HIGH );
 8004378:	1dbb      	adds	r3, r7, #6
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	0018      	movs	r0, r3
 800437e:	f7fd f899 	bl	80014b4 <__aeabi_ui2f>
 8004382:	1c03      	adds	r3, r0, #0
 8004384:	1c18      	adds	r0, r3, #0
 8004386:	f7fe fe41 	bl	800300c <__aeabi_f2d>
 800438a:	4a53      	ldr	r2, [pc, #332]	; (80044d8 <led_bar_scan_setup+0x398>)
 800438c:	4b53      	ldr	r3, [pc, #332]	; (80044dc <led_bar_scan_setup+0x39c>)
 800438e:	f7fd fff7 	bl	8002380 <__aeabi_dmul>
 8004392:	0003      	movs	r3, r0
 8004394:	000c      	movs	r4, r1
 8004396:	0018      	movs	r0, r3
 8004398:	0021      	movs	r1, r4
 800439a:	f7fc f8d9 	bl	8000550 <__aeabi_d2uiz>
 800439e:	0003      	movs	r3, r0
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	4b4b      	ldr	r3, [pc, #300]	; (80044d0 <led_bar_scan_setup+0x390>)
 80043a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    display_state_levels[ 7 ][ EV_LED_GREEN ] = (uint16_t) ( (float) green * EVD_HIGH );
 80043a6:	1d3b      	adds	r3, r7, #4
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7fd f882 	bl	80014b4 <__aeabi_ui2f>
 80043b0:	1c03      	adds	r3, r0, #0
 80043b2:	1c18      	adds	r0, r3, #0
 80043b4:	f7fe fe2a 	bl	800300c <__aeabi_f2d>
 80043b8:	4a47      	ldr	r2, [pc, #284]	; (80044d8 <led_bar_scan_setup+0x398>)
 80043ba:	4b48      	ldr	r3, [pc, #288]	; (80044dc <led_bar_scan_setup+0x39c>)
 80043bc:	f7fd ffe0 	bl	8002380 <__aeabi_dmul>
 80043c0:	0003      	movs	r3, r0
 80043c2:	000c      	movs	r4, r1
 80043c4:	0018      	movs	r0, r3
 80043c6:	0021      	movs	r1, r4
 80043c8:	f7fc f8c2 	bl	8000550 <__aeabi_d2uiz>
 80043cc:	0003      	movs	r3, r0
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	4b3f      	ldr	r3, [pc, #252]	; (80044d0 <led_bar_scan_setup+0x390>)
 80043d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    display_state_levels[ 7 ][ EV_LED_BLUE ] = (uint16_t) ( (float) blue * EVD_HIGH );
 80043d4:	1cbb      	adds	r3, r7, #2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	0018      	movs	r0, r3
 80043da:	f7fd f86b 	bl	80014b4 <__aeabi_ui2f>
 80043de:	1c03      	adds	r3, r0, #0
 80043e0:	1c18      	adds	r0, r3, #0
 80043e2:	f7fe fe13 	bl	800300c <__aeabi_f2d>
 80043e6:	4a3c      	ldr	r2, [pc, #240]	; (80044d8 <led_bar_scan_setup+0x398>)
 80043e8:	4b3c      	ldr	r3, [pc, #240]	; (80044dc <led_bar_scan_setup+0x39c>)
 80043ea:	f7fd ffc9 	bl	8002380 <__aeabi_dmul>
 80043ee:	0003      	movs	r3, r0
 80043f0:	000c      	movs	r4, r1
 80043f2:	0018      	movs	r0, r3
 80043f4:	0021      	movs	r1, r4
 80043f6:	f7fc f8ab 	bl	8000550 <__aeabi_d2uiz>
 80043fa:	0003      	movs	r3, r0
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	4b34      	ldr	r3, [pc, #208]	; (80044d0 <led_bar_scan_setup+0x390>)
 8004400:	85da      	strh	r2, [r3, #46]	; 0x2e

    display_state_levels[ 8 ][ EV_LED_RED ] = (uint16_t) ( (float) red * EVD_MED );
 8004402:	1dbb      	adds	r3, r7, #6
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	0018      	movs	r0, r3
 8004408:	f7fd f854 	bl	80014b4 <__aeabi_ui2f>
 800440c:	1c03      	adds	r3, r0, #0
 800440e:	1c18      	adds	r0, r3, #0
 8004410:	f7fe fdfc 	bl	800300c <__aeabi_f2d>
 8004414:	4a2c      	ldr	r2, [pc, #176]	; (80044c8 <led_bar_scan_setup+0x388>)
 8004416:	4b2f      	ldr	r3, [pc, #188]	; (80044d4 <led_bar_scan_setup+0x394>)
 8004418:	f7fd ffb2 	bl	8002380 <__aeabi_dmul>
 800441c:	0003      	movs	r3, r0
 800441e:	000c      	movs	r4, r1
 8004420:	0018      	movs	r0, r3
 8004422:	0021      	movs	r1, r4
 8004424:	f7fc f894 	bl	8000550 <__aeabi_d2uiz>
 8004428:	0003      	movs	r3, r0
 800442a:	b29a      	uxth	r2, r3
 800442c:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <led_bar_scan_setup+0x390>)
 800442e:	865a      	strh	r2, [r3, #50]	; 0x32
    display_state_levels[ 8 ][ EV_LED_GREEN ] = (uint16_t) ( (float) green * EVD_MED );
 8004430:	1d3b      	adds	r3, r7, #4
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	0018      	movs	r0, r3
 8004436:	f7fd f83d 	bl	80014b4 <__aeabi_ui2f>
 800443a:	1c03      	adds	r3, r0, #0
 800443c:	1c18      	adds	r0, r3, #0
 800443e:	f7fe fde5 	bl	800300c <__aeabi_f2d>
 8004442:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <led_bar_scan_setup+0x388>)
 8004444:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <led_bar_scan_setup+0x394>)
 8004446:	f7fd ff9b 	bl	8002380 <__aeabi_dmul>
 800444a:	0003      	movs	r3, r0
 800444c:	000c      	movs	r4, r1
 800444e:	0018      	movs	r0, r3
 8004450:	0021      	movs	r1, r4
 8004452:	f7fc f87d 	bl	8000550 <__aeabi_d2uiz>
 8004456:	0003      	movs	r3, r0
 8004458:	b29a      	uxth	r2, r3
 800445a:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <led_bar_scan_setup+0x390>)
 800445c:	861a      	strh	r2, [r3, #48]	; 0x30
    display_state_levels[ 8 ][ EV_LED_BLUE ] = (uint16_t) ( (float) blue * EVD_MED );
 800445e:	1cbb      	adds	r3, r7, #2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f7fd f826 	bl	80014b4 <__aeabi_ui2f>
 8004468:	1c03      	adds	r3, r0, #0
 800446a:	1c18      	adds	r0, r3, #0
 800446c:	f7fe fdce 	bl	800300c <__aeabi_f2d>
 8004470:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <led_bar_scan_setup+0x388>)
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <led_bar_scan_setup+0x394>)
 8004474:	f7fd ff84 	bl	8002380 <__aeabi_dmul>
 8004478:	0003      	movs	r3, r0
 800447a:	000c      	movs	r4, r1
 800447c:	0018      	movs	r0, r3
 800447e:	0021      	movs	r1, r4
 8004480:	f7fc f866 	bl	8000550 <__aeabi_d2uiz>
 8004484:	0003      	movs	r3, r0
 8004486:	b29a      	uxth	r2, r3
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <led_bar_scan_setup+0x390>)
 800448a:	869a      	strh	r2, [r3, #52]	; 0x34

    hs.tansistion_time = transision_period;
 800448c:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <led_bar_scan_setup+0x3a0>)
 800448e:	003a      	movs	r2, r7
 8004490:	8812      	ldrh	r2, [r2, #0]
 8004492:	849a      	strh	r2, [r3, #36]	; 0x24
    hs.led_bar_state = LED_BAR_INIT;
 8004494:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <led_bar_scan_setup+0x3a0>)
 8004496:	2200      	movs	r2, #0
 8004498:	721a      	strb	r2, [r3, #8]
    hs.ev_display_scan_mode = true;
 800449a:	4a11      	ldr	r2, [pc, #68]	; (80044e0 <led_bar_scan_setup+0x3a0>)
 800449c:	23a1      	movs	r3, #161	; 0xa1
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	5cd1      	ldrb	r1, [r2, r3]
 80044a2:	2008      	movs	r0, #8
 80044a4:	4301      	orrs	r1, r0
 80044a6:	54d1      	strb	r1, [r2, r3]
    hs.led_bar_display_status = true;
 80044a8:	4a0d      	ldr	r2, [pc, #52]	; (80044e0 <led_bar_scan_setup+0x3a0>)
 80044aa:	23a1      	movs	r3, #161	; 0xa1
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	5cd1      	ldrb	r1, [r2, r3]
 80044b0:	2004      	movs	r0, #4
 80044b2:	4301      	orrs	r1, r0
 80044b4:	54d1      	strb	r1, [r2, r3]
    led_bar_off();
 80044b6:	f000 f8a7 	bl	8004608 <led_bar_off>
    hs.max_loop_count = DEFAULT_LOOP_COUNT;
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <led_bar_scan_setup+0x3a0>)
 80044bc:	2204      	movs	r2, #4
 80044be:	825a      	strh	r2, [r3, #18]
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b004      	add	sp, #16
 80044c6:	bdb0      	pop	{r4, r5, r7, pc}
 80044c8:	9999999a 	.word	0x9999999a
 80044cc:	3fc99999 	.word	0x3fc99999
 80044d0:	20000f04 	.word	0x20000f04
 80044d4:	3fd99999 	.word	0x3fd99999
 80044d8:	66666666 	.word	0x66666666
 80044dc:	3fe66666 	.word	0x3fe66666
 80044e0:	200006f8 	.word	0x200006f8

080044e4 <led_bar_scan_mode_left>:
  * @brief Do the LED BAR Scanning function left
  * @param  None
  * @retval : None
  */
void led_bar_scan_mode_left( uint32_t current_time )
{
 80044e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
    uint16_t index;

    /*
     * Show a Wi Fi Setup display
     */
    switch( hs.led_bar_state ) {
 80044ec:	4b44      	ldr	r3, [pc, #272]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 80044ee:	7a1b      	ldrb	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <led_bar_scan_mode_left+0x16>
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d00f      	beq.n	8004518 <led_bar_scan_mode_left+0x34>
 80044f8:	e079      	b.n	80045ee <led_bar_scan_mode_left+0x10a>
        case LED_BAR_INIT :
            hs.led_bar_display_state = 0;
 80044fa:	4b41      	ldr	r3, [pc, #260]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	801a      	strh	r2, [r3, #0]
            hs.led_bar_last_update = current_time;
 8004500:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	60da      	str	r2, [r3, #12]
            led_bar_off();      // Start in known state
 8004506:	f000 f87f 	bl	8004608 <led_bar_off>
            hs.loop_count = 0;
 800450a:	4b3d      	ldr	r3, [pc, #244]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 800450c:	2200      	movs	r2, #0
 800450e:	821a      	strh	r2, [r3, #16]
            hs.led_bar_state = LED_BAR_SCAN_LEFT;
 8004510:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 8004512:	2201      	movs	r2, #1
 8004514:	721a      	strb	r2, [r3, #8]
            break;
 8004516:	e06f      	b.n	80045f8 <led_bar_scan_mode_left+0x114>
        case LED_BAR_SCAN_LEFT :
            if( imx_is_later( current_time, hs.led_bar_last_update + hs.tansistion_time ) ) {
 8004518:	4b39      	ldr	r3, [pc, #228]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a38      	ldr	r2, [pc, #224]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 800451e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004520:	189a      	adds	r2, r3, r2
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0011      	movs	r1, r2
 8004526:	0018      	movs	r0, r3
 8004528:	f003 f95f 	bl	80077ea <imx_is_later>
 800452c:	1e03      	subs	r3, r0, #0
 800452e:	d062      	beq.n	80045f6 <led_bar_scan_mode_left+0x112>
                for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 8004530:	230e      	movs	r3, #14
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	2200      	movs	r2, #0
 8004536:	801a      	strh	r2, [r3, #0]
 8004538:	e040      	b.n	80045bc <led_bar_scan_mode_left+0xd8>
                	index = hs.led_bar_display_state + i;
 800453a:	4b31      	ldr	r3, [pc, #196]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 800453c:	8819      	ldrh	r1, [r3, #0]
 800453e:	230e      	movs	r3, #14
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	881a      	ldrh	r2, [r3, #0]
 8004544:	200c      	movs	r0, #12
 8004546:	183b      	adds	r3, r7, r0
 8004548:	188a      	adds	r2, r1, r2
 800454a:	801a      	strh	r2, [r3, #0]
                	if( index >= LED_BAR_NO_LEDS )
 800454c:	183b      	adds	r3, r7, r0
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	2b0b      	cmp	r3, #11
 8004552:	d905      	bls.n	8004560 <led_bar_scan_mode_left+0x7c>
                		index = index - LED_BAR_NO_LEDS;	// Wrap around
 8004554:	220c      	movs	r2, #12
 8004556:	18bb      	adds	r3, r7, r2
 8004558:	18ba      	adds	r2, r7, r2
 800455a:	8812      	ldrh	r2, [r2, #0]
 800455c:	3a0c      	subs	r2, #12
 800455e:	801a      	strh	r2, [r3, #0]
                	set_led_bar_raw( i, display_state_levels[ index ][ EV_LED_RED ],
 8004560:	260e      	movs	r6, #14
 8004562:	19bb      	adds	r3, r7, r6
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b2d8      	uxtb	r0, r3
 8004568:	250c      	movs	r5, #12
 800456a:	197b      	adds	r3, r7, r5
 800456c:	881a      	ldrh	r2, [r3, #0]
 800456e:	4925      	ldr	r1, [pc, #148]	; (8004604 <led_bar_scan_mode_left+0x120>)
 8004570:	0013      	movs	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	189b      	adds	r3, r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	18cb      	adds	r3, r1, r3
 800457a:	3302      	adds	r3, #2
 800457c:	881c      	ldrh	r4, [r3, #0]
 800457e:	197b      	adds	r3, r7, r5
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	4920      	ldr	r1, [pc, #128]	; (8004604 <led_bar_scan_mode_left+0x120>)
 8004584:	0013      	movs	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	189b      	adds	r3, r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	5a5d      	ldrh	r5, [r3, r1]
 800458e:	230c      	movs	r3, #12
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	491b      	ldr	r1, [pc, #108]	; (8004604 <led_bar_scan_mode_left+0x120>)
 8004596:	0013      	movs	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	189b      	adds	r3, r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	18cb      	adds	r3, r1, r3
 80045a0:	3304      	adds	r3, #4
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	002a      	movs	r2, r5
 80045a6:	0021      	movs	r1, r4
 80045a8:	f7ff fd60 	bl	800406c <set_led_bar_raw>
                for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 80045ac:	19bb      	adds	r3, r7, r6
 80045ae:	2200      	movs	r2, #0
 80045b0:	5e9b      	ldrsh	r3, [r3, r2]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	19bb      	adds	r3, r7, r6
 80045ba:	801a      	strh	r2, [r3, #0]
 80045bc:	230e      	movs	r3, #14
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	2200      	movs	r2, #0
 80045c2:	5e9b      	ldrsh	r3, [r3, r2]
 80045c4:	2b0b      	cmp	r3, #11
 80045c6:	ddb8      	ble.n	800453a <led_bar_scan_mode_left+0x56>
                			display_state_levels[ index ][ EV_LED_GREEN ],
							display_state_levels[ index ][ EV_LED_BLUE ]);
                }
                update_led_bar();
 80045c8:	f000 f8de 	bl	8004788 <update_led_bar>
                hs.led_bar_last_update = current_time;
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	60da      	str	r2, [r3, #12]
                hs.led_bar_display_state += 1;
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	3301      	adds	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 80045dc:	801a      	strh	r2, [r3, #0]
                /*
                 * Check if we have done a full lap
                 */
                if( hs.led_bar_display_state >= LED_BAR_NO_LEDS ) {
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	2b0b      	cmp	r3, #11
 80045e4:	d907      	bls.n	80045f6 <led_bar_scan_mode_left+0x112>
                	hs.led_bar_display_state = 0;	// Do it again
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	801a      	strh	r2, [r3, #0]
                }
            }
            break;
 80045ec:	e003      	b.n	80045f6 <led_bar_scan_mode_left+0x112>
        default :
        	hs.led_bar_state = LED_BAR_INIT;
 80045ee:	4b04      	ldr	r3, [pc, #16]	; (8004600 <led_bar_scan_mode_left+0x11c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	721a      	strb	r2, [r3, #8]
            break;
 80045f4:	e000      	b.n	80045f8 <led_bar_scan_mode_left+0x114>
            break;
 80045f6:	46c0      	nop			; (mov r8, r8)
    }
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b005      	add	sp, #20
 80045fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004600:	200006f8 	.word	0x200006f8
 8004604:	20000f04 	.word	0x20000f04

08004608 <led_bar_off>:
  * @brief led_bar_off
  * @param  None
  * @retval : None
  */
void led_bar_off(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
    memset( &led_display, 0x00, sizeof( led_display ) );
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <led_bar_off+0x1c>)
 800460e:	2248      	movs	r2, #72	; 0x48
 8004610:	2100      	movs	r1, #0
 8004612:	0018      	movs	r0, r3
 8004614:	f008 f93d 	bl	800c892 <memset>
    update_led_bar();
 8004618:	f000 f8b6 	bl	8004788 <update_led_bar>
}/*
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	20000ebc 	.word	0x20000ebc

08004628 <generate_led_pwm>:
  * @brief Generate the PWM levels based on lux level
  * @param  None
  * @retval : None
  */
void generate_led_pwm(void)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
    uint8_t led_level, mask;
    int16_t i, j, index;
    float lux_scale;

    if( hs.valid_lux_level == true ) {
 800462e:	4b4f      	ldr	r3, [pc, #316]	; (800476c <generate_led_pwm+0x144>)
 8004630:	4a4f      	ldr	r2, [pc, #316]	; (8004770 <generate_led_pwm+0x148>)
 8004632:	5c9b      	ldrb	r3, [r3, r2]
 8004634:	2202      	movs	r2, #2
 8004636:	4013      	ands	r3, r2
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <generate_led_pwm+0x1e>
        lux_scale = 0.5;        // determine correct levels later - use a calculation
 800463e:	23fc      	movs	r3, #252	; 0xfc
 8004640:	059b      	lsls	r3, r3, #22
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	e002      	b.n	800464c <generate_led_pwm+0x24>
    } else
        lux_scale = 0.5;
 8004646:	23fc      	movs	r3, #252	; 0xfc
 8004648:	059b      	lsls	r3, r3, #22
 800464a:	607b      	str	r3, [r7, #4]
    /*
     * Output PWM Bits are sent for the last LED first and each of the 24 bits are sent in order of G R B bit order 7-0
     *
     * The Array contains additional byte to generate reload of data
     */
    memset( (void *) &ld.pwm_output, 0x00, sizeof( ld.pwm_output ) );
 800464c:	23a4      	movs	r3, #164	; 0xa4
 800464e:	00da      	lsls	r2, r3, #3
 8004650:	4b48      	ldr	r3, [pc, #288]	; (8004774 <generate_led_pwm+0x14c>)
 8004652:	2100      	movs	r1, #0
 8004654:	0018      	movs	r0, r3
 8004656:	f008 f91c 	bl	800c892 <memset>
    index = WS2812B_RESET_TIME;   // Start after some preamble
 800465a:	2308      	movs	r3, #8
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	2214      	movs	r2, #20
 8004660:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < LED_BAR_NO_LEDS;  i++ ) {
 8004662:	230c      	movs	r3, #12
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	2200      	movs	r2, #0
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	e074      	b.n	8004756 <generate_led_pwm+0x12e>
        for( j = 0; j < LEDS_NO_LEDS; j++ ) {
 800466c:	230a      	movs	r3, #10
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	2200      	movs	r2, #0
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	e060      	b.n	8004738 <generate_led_pwm+0x110>
            led_level = (uint8_t) ( lux_scale * (float) led_display[ i ][ j ] );
 8004676:	230c      	movs	r3, #12
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	2200      	movs	r2, #0
 800467c:	5e9a      	ldrsh	r2, [r3, r2]
 800467e:	230a      	movs	r3, #10
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	2000      	movs	r0, #0
 8004684:	5e18      	ldrsh	r0, [r3, r0]
 8004686:	493c      	ldr	r1, [pc, #240]	; (8004778 <generate_led_pwm+0x150>)
 8004688:	0013      	movs	r3, r2
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	189b      	adds	r3, r3, r2
 800468e:	181b      	adds	r3, r3, r0
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	5a5b      	ldrh	r3, [r3, r1]
 8004694:	0018      	movs	r0, r3
 8004696:	f7fc ff0d 	bl	80014b4 <__aeabi_ui2f>
 800469a:	1c03      	adds	r3, r0, #0
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	1c18      	adds	r0, r3, #0
 80046a0:	f7fc fba8 	bl	8000df4 <__aeabi_fmul>
 80046a4:	1c03      	adds	r3, r0, #0
 80046a6:	1cfc      	adds	r4, r7, #3
 80046a8:	1c18      	adds	r0, r3, #0
 80046aa:	f7fb ff39 	bl	8000520 <__aeabi_f2uiz>
 80046ae:	0003      	movs	r3, r0
 80046b0:	7023      	strb	r3, [r4, #0]
            for( mask = 0x80; mask != 0 ; mask >>= 1 ) {
 80046b2:	230f      	movs	r3, #15
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	2280      	movs	r2, #128	; 0x80
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e02f      	b.n	800471c <generate_led_pwm+0xf4>
                if( ( led_level & mask ) == 0x00 ) {
 80046bc:	1cfb      	adds	r3, r7, #3
 80046be:	220f      	movs	r2, #15
 80046c0:	18ba      	adds	r2, r7, r2
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	7812      	ldrb	r2, [r2, #0]
 80046c6:	4013      	ands	r3, r2
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d110      	bne.n	80046f0 <generate_led_pwm+0xc8>
                    ld.pwm_output[ index++ ] = NZR_0;
 80046ce:	2008      	movs	r0, #8
 80046d0:	183b      	adds	r3, r7, r0
 80046d2:	2200      	movs	r2, #0
 80046d4:	5e9a      	ldrsh	r2, [r3, r2]
 80046d6:	b293      	uxth	r3, r2
 80046d8:	3301      	adds	r3, #1
 80046da:	b299      	uxth	r1, r3
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	8019      	strh	r1, [r3, #0]
 80046e0:	0013      	movs	r3, r2
 80046e2:	4a26      	ldr	r2, [pc, #152]	; (800477c <generate_led_pwm+0x154>)
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	18d3      	adds	r3, r2, r3
 80046e8:	3304      	adds	r3, #4
 80046ea:	4a25      	ldr	r2, [pc, #148]	; (8004780 <generate_led_pwm+0x158>)
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e00f      	b.n	8004710 <generate_led_pwm+0xe8>
                } else {
                    ld.pwm_output[ index++ ] = NZR_1;
 80046f0:	2008      	movs	r0, #8
 80046f2:	183b      	adds	r3, r7, r0
 80046f4:	2200      	movs	r2, #0
 80046f6:	5e9a      	ldrsh	r2, [r3, r2]
 80046f8:	b293      	uxth	r3, r2
 80046fa:	3301      	adds	r3, #1
 80046fc:	b299      	uxth	r1, r3
 80046fe:	183b      	adds	r3, r7, r0
 8004700:	8019      	strh	r1, [r3, #0]
 8004702:	0013      	movs	r3, r2
 8004704:	4a1d      	ldr	r2, [pc, #116]	; (800477c <generate_led_pwm+0x154>)
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	18d3      	adds	r3, r2, r3
 800470a:	3304      	adds	r3, #4
 800470c:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <generate_led_pwm+0x15c>)
 800470e:	601a      	str	r2, [r3, #0]
            for( mask = 0x80; mask != 0 ; mask >>= 1 ) {
 8004710:	220f      	movs	r2, #15
 8004712:	18bb      	adds	r3, r7, r2
 8004714:	18ba      	adds	r2, r7, r2
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	0852      	lsrs	r2, r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	230f      	movs	r3, #15
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ca      	bne.n	80046bc <generate_led_pwm+0x94>
        for( j = 0; j < LEDS_NO_LEDS; j++ ) {
 8004726:	210a      	movs	r1, #10
 8004728:	187b      	adds	r3, r7, r1
 800472a:	2200      	movs	r2, #0
 800472c:	5e9b      	ldrsh	r3, [r3, r2]
 800472e:	b29b      	uxth	r3, r3
 8004730:	3301      	adds	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	187b      	adds	r3, r7, r1
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	230a      	movs	r3, #10
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	2200      	movs	r2, #0
 800473e:	5e9b      	ldrsh	r3, [r3, r2]
 8004740:	2b02      	cmp	r3, #2
 8004742:	dd98      	ble.n	8004676 <generate_led_pwm+0x4e>
    for( i = 0; i < LED_BAR_NO_LEDS;  i++ ) {
 8004744:	210c      	movs	r1, #12
 8004746:	187b      	adds	r3, r7, r1
 8004748:	2200      	movs	r2, #0
 800474a:	5e9b      	ldrsh	r3, [r3, r2]
 800474c:	b29b      	uxth	r3, r3
 800474e:	3301      	adds	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	187b      	adds	r3, r7, r1
 8004754:	801a      	strh	r2, [r3, #0]
 8004756:	230c      	movs	r3, #12
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	2200      	movs	r2, #0
 800475c:	5e9b      	ldrsh	r3, [r3, r2]
 800475e:	2b0b      	cmp	r3, #11
 8004760:	dd84      	ble.n	800466c <generate_led_pwm+0x44>
                }
            }
        }
    }
}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	46bd      	mov	sp, r7
 8004766:	b005      	add	sp, #20
 8004768:	bd90      	pop	{r4, r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	200006f8 	.word	0x200006f8
 8004770:	00000509 	.word	0x00000509
 8004774:	200000a4 	.word	0x200000a4
 8004778:	20000ebc 	.word	0x20000ebc
 800477c:	200000a0 	.word	0x200000a0
 8004780:	ffc00000 	.word	0xffc00000
 8004784:	fffff000 	.word	0xfffff000

08004788 <update_led_bar>:
  * @brief update_led_bar
  * @param  None
  * @retval : None
  */
void update_led_bar(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
	/*
	 * Generate PWM Waveform
	 */
	generate_led_pwm();
 800478c:	f7ff ff4c 	bl	8004628 <generate_led_pwm>
	/*
	 * Take the data that has been prepared using generate pwm and output over SPI 2
	 */
	LED_display_update_completed = false;
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <update_led_bar+0x34>)
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
	/*
	 * Initiate Transfer
	 */
	HAL_SPI_Transmit_DMA( &hspi2, (uint8_t *) ld.pwm_output, sizeof( ld.pwm_output ) );
 8004796:	23a4      	movs	r3, #164	; 0xa4
 8004798:	00da      	lsls	r2, r3, #3
 800479a:	4909      	ldr	r1, [pc, #36]	; (80047c0 <update_led_bar+0x38>)
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <update_led_bar+0x3c>)
 800479e:	0018      	movs	r0, r3
 80047a0:	f006 f95e 	bl	800aa60 <HAL_SPI_Transmit_DMA>
	/*
	 * Wait for it to complete - Later make this checked in main loop for LED management to speed operations up
	 */
	while( LED_display_update_completed == false )
 80047a4:	46c0      	nop			; (mov r8, r8)
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <update_led_bar+0x34>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2201      	movs	r2, #1
 80047ae:	4053      	eors	r3, r2
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f7      	bne.n	80047a6 <update_led_bar+0x1e>
		;
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000eb8 	.word	0x20000eb8
 80047c0:	200000a4 	.word	0x200000a4
 80047c4:	20000694 	.word	0x20000694

080047c8 <update_lux>:
  * @brief update lux read setting - this for routines that need instant values
  * @param  None
  * @retval : None
  */
bool update_lux(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
    float lux_level, ir_level;

    if( LTR_329ALS_get_lux_level( &lux_level, &ir_level ) == true ) {
 80047ce:	003a      	movs	r2, r7
 80047d0:	1d3b      	adds	r3, r7, #4
 80047d2:	0011      	movs	r1, r2
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 f941 	bl	8004a5c <LTR_329ALS_get_lux_level>
 80047da:	1e03      	subs	r3, r0, #0
 80047dc:	d030      	beq.n	8004840 <update_lux+0x78>
//        imx_printf( "Got LUX level: %f\r\n", lux_level );
        if( lux_level != 0 )  { // Ignore 0 reading - but count as an error - for review of performance
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2100      	movs	r1, #0
 80047e2:	1c18      	adds	r0, r3, #0
 80047e4:	f7fb fe4e 	bl	8000484 <__aeabi_fcmpeq>
 80047e8:	1e03      	subs	r3, r0, #0
 80047ea:	d11e      	bne.n	800482a <update_lux+0x62>
            /*
             * Save values
             */
            hs.current_lux_level = lux_level;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	1c18      	adds	r0, r3, #0
 80047f0:	f7fb fe96 	bl	8000520 <__aeabi_f2uiz>
 80047f4:	0002      	movs	r2, r0
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <update_lux+0x84>)
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
            hs.current_ir_lux_level = ir_level;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	1c18      	adds	r0, r3, #0
 80047fe:	f7fb fe8f 	bl	8000520 <__aeabi_f2uiz>
 8004802:	0002      	movs	r2, r0
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <update_lux+0x84>)
 8004806:	63da      	str	r2, [r3, #60]	; 0x3c
            hs.valid_lux_level = true;
 8004808:	4a10      	ldr	r2, [pc, #64]	; (800484c <update_lux+0x84>)
 800480a:	23a1      	movs	r3, #161	; 0xa1
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	18d3      	adds	r3, r2, r3
 8004810:	785a      	ldrb	r2, [r3, #1]
 8004812:	2102      	movs	r1, #2
 8004814:	430a      	orrs	r2, r1
 8004816:	705a      	strb	r2, [r3, #1]
            hs.valid_ir_lux_level = true;
 8004818:	4a0c      	ldr	r2, [pc, #48]	; (800484c <update_lux+0x84>)
 800481a:	23a1      	movs	r3, #161	; 0xa1
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	18d3      	adds	r3, r2, r3
 8004820:	785a      	ldrb	r2, [r3, #1]
 8004822:	2104      	movs	r1, #4
 8004824:	430a      	orrs	r2, r1
 8004826:	705a      	strb	r2, [r3, #1]
 8004828:	e008      	b.n	800483c <update_lux+0x74>
        } else
            hs.false_lux_count += 1;
 800482a:	4a08      	ldr	r2, [pc, #32]	; (800484c <update_lux+0x84>)
 800482c:	23b8      	movs	r3, #184	; 0xb8
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	58d3      	ldr	r3, [r2, r3]
 8004832:	1c59      	adds	r1, r3, #1
 8004834:	4a05      	ldr	r2, [pc, #20]	; (800484c <update_lux+0x84>)
 8004836:	23b8      	movs	r3, #184	; 0xb8
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	50d1      	str	r1, [r2, r3]
        return true;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <update_lux+0x7a>
    } else
        return false;
 8004840:	2300      	movs	r3, #0
}
 8004842:	0018      	movs	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	b002      	add	sp, #8
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	200006f8 	.word	0x200006f8

08004850 <update_temp_humidity>:
  * @param  None
  * @retval : success / failure
  */

bool update_temp_humidity(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
    float temperature, humidity;
    if( Si7020_get_temp( &temperature, &humidity ) == true ) {
 8004856:	003a      	movs	r2, r7
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	0011      	movs	r1, r2
 800485c:	0018      	movs	r0, r3
 800485e:	f000 fd7d 	bl	800535c <Si7020_get_temp>
 8004862:	1e03      	subs	r3, r0, #0
 8004864:	d01b      	beq.n	800489e <update_temp_humidity+0x4e>
        hs.current_temp_level = temperature;
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <update_temp_humidity+0x58>)
 800486a:	635a      	str	r2, [r3, #52]	; 0x34
        hs.current_humidity_level = humidity;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	1c18      	adds	r0, r3, #0
 8004870:	f7fb fe56 	bl	8000520 <__aeabi_f2uiz>
 8004874:	0002      	movs	r2, r0
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <update_temp_humidity+0x58>)
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
        hs.valid_temp_level = true;
 800487a:	4a0b      	ldr	r2, [pc, #44]	; (80048a8 <update_temp_humidity+0x58>)
 800487c:	23a1      	movs	r3, #161	; 0xa1
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	18d3      	adds	r3, r2, r3
 8004882:	785a      	ldrb	r2, [r3, #1]
 8004884:	2101      	movs	r1, #1
 8004886:	430a      	orrs	r2, r1
 8004888:	705a      	strb	r2, [r3, #1]
        hs.valid_humidity_level = true;
 800488a:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <update_temp_humidity+0x58>)
 800488c:	23a1      	movs	r3, #161	; 0xa1
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	5cd1      	ldrb	r1, [r2, r3]
 8004892:	2080      	movs	r0, #128	; 0x80
 8004894:	4240      	negs	r0, r0
 8004896:	4301      	orrs	r1, r0
 8004898:	54d1      	strb	r1, [r2, r3]
        return true;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <update_temp_humidity+0x50>
    } else
        return false;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	0018      	movs	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	200006f8 	.word	0x200006f8

080048ac <init_LTR_329ALS>:
  * @brief  i2c_init_I2C_LTR_329ALS
  * @param  None
  * @retval : None
  */
bool init_LTR_329ALS(void)
{
 80048ac:	b5b0      	push	{r4, r5, r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af02      	add	r7, sp, #8
    bool result;
    uint8_t tx_buffer[ 4 ];
    uint8_t rx_buffer[ 4 ];

    hs.lux_noise_count = 0;
 80048b2:	4a62      	ldr	r2, [pc, #392]	; (8004a3c <init_LTR_329ALS+0x190>)
 80048b4:	23b4      	movs	r3, #180	; 0xb4
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	2100      	movs	r1, #0
 80048ba:	50d1      	str	r1, [r2, r3]
    hs.last_lux_level = 0;
 80048bc:	4a5f      	ldr	r2, [pc, #380]	; (8004a3c <init_LTR_329ALS+0x190>)
 80048be:	23b6      	movs	r3, #182	; 0xb6
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	2100      	movs	r1, #0
 80048c4:	50d1      	str	r1, [r2, r3]
    als_time = ALS_INT_100;
 80048c6:	4b5e      	ldr	r3, [pc, #376]	; (8004a40 <init_LTR_329ALS+0x194>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	801a      	strh	r2, [r3, #0]
    ignore_sensor = true;
 80048cc:	4b5d      	ldr	r3, [pc, #372]	; (8004a44 <init_LTR_329ALS+0x198>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	801a      	strh	r2, [r3, #0]

    tx_buffer[ 0 ] = ALS_CONTR;
 80048d2:	2108      	movs	r1, #8
 80048d4:	187b      	adds	r3, r7, r1
 80048d6:	2280      	movs	r2, #128	; 0x80
 80048d8:	701a      	strb	r2, [r3, #0]
    tx_buffer[ 1 ] = ALS_ACTIVE;  // Wake up
 80048da:	187b      	adds	r3, r7, r1
 80048dc:	2201      	movs	r2, #1
 80048de:	705a      	strb	r2, [r3, #1]

    result = i2c_write_sensor( I2C_LTR_329ALS , tx_buffer, 2 );
 80048e0:	250f      	movs	r5, #15
 80048e2:	197c      	adds	r4, r7, r5
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	2202      	movs	r2, #2
 80048e8:	0019      	movs	r1, r3
 80048ea:	2000      	movs	r0, #0
 80048ec:	f001 fbce 	bl	800608c <i2c_write_sensor>
 80048f0:	0003      	movs	r3, r0
 80048f2:	7023      	strb	r3, [r4, #0]
    if( result == false ) {
 80048f4:	197b      	adds	r3, r7, r5
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2201      	movs	r2, #1
 80048fa:	4053      	eors	r3, r2
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <init_LTR_329ALS+0x62>
        printf( "*** LTR-329ALS Wake up Failed\r\n" );
 8004902:	4b51      	ldr	r3, [pc, #324]	; (8004a48 <init_LTR_329ALS+0x19c>)
 8004904:	0018      	movs	r0, r3
 8004906:	f008 f847 	bl	800c998 <puts>
        return false;
 800490a:	2300      	movs	r3, #0
 800490c:	e091      	b.n	8004a32 <init_LTR_329ALS+0x186>
    }
    HAL_Delay( 10 );       // Time to be active.
 800490e:	200a      	movs	r0, #10
 8004910:	f003 f848 	bl	80079a4 <HAL_Delay>

    tx_buffer[ 0 ] = PART_ID;
 8004914:	2108      	movs	r1, #8
 8004916:	187b      	adds	r3, r7, r1
 8004918:	2286      	movs	r2, #134	; 0x86
 800491a:	701a      	strb	r2, [r3, #0]
    if( i2c_write_read_sensor( I2C_LTR_329ALS, tx_buffer, 1, rx_buffer, 1 ) == false ) {
 800491c:	1d3a      	adds	r2, r7, #4
 800491e:	1879      	adds	r1, r7, r1
 8004920:	2301      	movs	r3, #1
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	0013      	movs	r3, r2
 8004926:	2201      	movs	r2, #1
 8004928:	2000      	movs	r0, #0
 800492a:	f001 fb2f 	bl	8005f8c <i2c_write_read_sensor>
 800492e:	0003      	movs	r3, r0
 8004930:	001a      	movs	r2, r3
 8004932:	2301      	movs	r3, #1
 8004934:	4053      	eors	r3, r2
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <init_LTR_329ALS+0x94>
        PRINTF( "LTR 329ALS Failed to read Part ID, result: %d\r\n", result );
        return false;
 800493c:	2300      	movs	r3, #0
 800493e:	e078      	b.n	8004a32 <init_LTR_329ALS+0x186>
    }
    printf( "LUX Sensor Part ID: 0x%02X\r\n", rx_buffer[ 0 ] );
 8004940:	1d3b      	adds	r3, r7, #4
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	001a      	movs	r2, r3
 8004946:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <init_LTR_329ALS+0x1a0>)
 8004948:	0011      	movs	r1, r2
 800494a:	0018      	movs	r0, r3
 800494c:	f007 ffaa 	bl	800c8a4 <iprintf>

    tx_buffer[ 0 ] = MANUFAC_ID;
 8004950:	2108      	movs	r1, #8
 8004952:	187b      	adds	r3, r7, r1
 8004954:	2287      	movs	r2, #135	; 0x87
 8004956:	701a      	strb	r2, [r3, #0]
    if( i2c_write_read_sensor( I2C_LTR_329ALS, tx_buffer, 1, rx_buffer, 1 ) == false ) {
 8004958:	1d3a      	adds	r2, r7, #4
 800495a:	1879      	adds	r1, r7, r1
 800495c:	2301      	movs	r3, #1
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	0013      	movs	r3, r2
 8004962:	2201      	movs	r2, #1
 8004964:	2000      	movs	r0, #0
 8004966:	f001 fb11 	bl	8005f8c <i2c_write_read_sensor>
 800496a:	0003      	movs	r3, r0
 800496c:	001a      	movs	r2, r3
 800496e:	2301      	movs	r3, #1
 8004970:	4053      	eors	r3, r2
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <init_LTR_329ALS+0xd0>
        PRINTF( "LTR 329ALS Failed to read Manufacturing ID, result: %d\r\n", result );
        return false;
 8004978:	2300      	movs	r3, #0
 800497a:	e05a      	b.n	8004a32 <init_LTR_329ALS+0x186>
    }
    printf( "LUX Sensor Manufacturing ID: 0x%02X\r\n", rx_buffer[ 0 ] );
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	001a      	movs	r2, r3
 8004982:	4b33      	ldr	r3, [pc, #204]	; (8004a50 <init_LTR_329ALS+0x1a4>)
 8004984:	0011      	movs	r1, r2
 8004986:	0018      	movs	r0, r3
 8004988:	f007 ff8c 	bl	800c8a4 <iprintf>


    tx_buffer[ 0 ] = ALS_CONTR;
 800498c:	2108      	movs	r1, #8
 800498e:	187b      	adds	r3, r7, r1
 8004990:	2280      	movs	r2, #128	; 0x80
 8004992:	701a      	strb	r2, [r3, #0]
    tx_buffer[ 1 ] = ALS_GAIN_1 | ALS_ACTIVE;  // Start with 1X Gain
 8004994:	187b      	adds	r3, r7, r1
 8004996:	2201      	movs	r2, #1
 8004998:	705a      	strb	r2, [r3, #1]

    result = i2c_write_sensor(  I2C_LTR_329ALS , tx_buffer, 2 );
 800499a:	250f      	movs	r5, #15
 800499c:	197c      	adds	r4, r7, r5
 800499e:	187b      	adds	r3, r7, r1
 80049a0:	2202      	movs	r2, #2
 80049a2:	0019      	movs	r1, r3
 80049a4:	2000      	movs	r0, #0
 80049a6:	f001 fb71 	bl	800608c <i2c_write_sensor>
 80049aa:	0003      	movs	r3, r0
 80049ac:	7023      	strb	r3, [r4, #0]
    if( result == false ) {
 80049ae:	197b      	adds	r3, r7, r5
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2201      	movs	r2, #1
 80049b4:	4053      	eors	r3, r2
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <init_LTR_329ALS+0x124>
        printf( "\r\nLTR-329ALS Set Mode (Gain) Failed: %u\r\n", result );
 80049bc:	230f      	movs	r3, #15
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <init_LTR_329ALS+0x1a8>)
 80049c4:	0011      	movs	r1, r2
 80049c6:	0018      	movs	r0, r3
 80049c8:	f007 ff6c 	bl	800c8a4 <iprintf>
        return false;
 80049cc:	2300      	movs	r3, #0
 80049ce:	e030      	b.n	8004a32 <init_LTR_329ALS+0x186>
    }

    tx_buffer[ 0 ] = ALS_MEAS_RATE;  // Measurement Rate Register
 80049d0:	2108      	movs	r1, #8
 80049d2:	187b      	adds	r3, r7, r1
 80049d4:	2285      	movs	r2, #133	; 0x85
 80049d6:	701a      	strb	r2, [r3, #0]
    als_time = ALS_INT_100; // save for later calculation
 80049d8:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <init_LTR_329ALS+0x194>)
 80049da:	2200      	movs	r2, #0
 80049dc:	801a      	strh	r2, [r3, #0]
    tx_buffer[ 1 ] = ( als_time  << 3  ) | ALS_MES_500;  // Defaults
 80049de:	4b18      	ldr	r3, [pc, #96]	; (8004a40 <init_LTR_329ALS+0x194>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	5e9b      	ldrsh	r3, [r3, r2]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	b25b      	sxtb	r3, r3
 80049e8:	2203      	movs	r2, #3
 80049ea:	4313      	orrs	r3, r2
 80049ec:	b25b      	sxtb	r3, r3
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	187b      	adds	r3, r7, r1
 80049f2:	705a      	strb	r2, [r3, #1]

    result = i2c_write_sensor(  I2C_LTR_329ALS , tx_buffer, 2 );
 80049f4:	250f      	movs	r5, #15
 80049f6:	197c      	adds	r4, r7, r5
 80049f8:	187b      	adds	r3, r7, r1
 80049fa:	2202      	movs	r2, #2
 80049fc:	0019      	movs	r1, r3
 80049fe:	2000      	movs	r0, #0
 8004a00:	f001 fb44 	bl	800608c <i2c_write_sensor>
 8004a04:	0003      	movs	r3, r0
 8004a06:	7023      	strb	r3, [r4, #0]
    if( result == false ) {
 8004a08:	197b      	adds	r3, r7, r5
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	4053      	eors	r3, r2
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <init_LTR_329ALS+0x17e>
        printf( "\r\nLTR-329ALS Config Rate up failed: %u\r\n", result );
 8004a16:	230f      	movs	r3, #15
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	781a      	ldrb	r2, [r3, #0]
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <init_LTR_329ALS+0x1ac>)
 8004a1e:	0011      	movs	r1, r2
 8004a20:	0018      	movs	r0, r3
 8004a22:	f007 ff3f 	bl	800c8a4 <iprintf>
        return false;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e003      	b.n	8004a32 <init_LTR_329ALS+0x186>
    }
    ignore_sensor = false;
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <init_LTR_329ALS+0x198>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	801a      	strh	r2, [r3, #0]
    return true;
 8004a30:	2301      	movs	r3, #1
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b004      	add	sp, #16
 8004a38:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	200006f8 	.word	0x200006f8
 8004a40:	200005cc 	.word	0x200005cc
 8004a44:	200005ce 	.word	0x200005ce
 8004a48:	0800e874 	.word	0x0800e874
 8004a4c:	0800e894 	.word	0x0800e894
 8004a50:	0800e8b4 	.word	0x0800e8b4
 8004a54:	0800e8dc 	.word	0x0800e8dc
 8004a58:	0800e908 	.word	0x0800e908

08004a5c <LTR_329ALS_get_lux_level>:
  * @param  pointers to lux and ir level integers
  * @retval : true if result is valid
  */

bool LTR_329ALS_get_lux_level( float *lux_level, float *ir_level )
{
 8004a5c:	b5b0      	push	{r4, r5, r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]

    uint16_t result, count;
    uint8_t rx_buffer[ 4 ], tx_buffer[ 4 ], gain;
    // uint8_t old_gain_setting;

    result = false;
 8004a66:	2316      	movs	r3, #22
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	801a      	strh	r2, [r3, #0]
    count = 0;
 8004a6e:	2314      	movs	r3, #20
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	2200      	movs	r2, #0
 8004a74:	801a      	strh	r2, [r3, #0]

    do {
        tx_buffer[ 0 ] = 0x8C;
 8004a76:	2108      	movs	r1, #8
 8004a78:	187b      	adds	r3, r7, r1
 8004a7a:	228c      	movs	r2, #140	; 0x8c
 8004a7c:	701a      	strb	r2, [r3, #0]
        if( i2c_write_read_sensor(  I2C_LTR_329ALS , tx_buffer, 1, rx_buffer, 1 ) == false ) {
 8004a7e:	230c      	movs	r3, #12
 8004a80:	18fa      	adds	r2, r7, r3
 8004a82:	1879      	adds	r1, r7, r1
 8004a84:	2301      	movs	r3, #1
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	0013      	movs	r3, r2
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f001 fa7d 	bl	8005f8c <i2c_write_read_sensor>
 8004a92:	0003      	movs	r3, r0
 8004a94:	001a      	movs	r2, r3
 8004a96:	2301      	movs	r3, #1
 8004a98:	4053      	eors	r3, r2
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d148      	bne.n	8004b32 <LTR_329ALS_get_lux_level+0xd6>
            goto fail_read;
        }

        PRINTF( "LTR-329ALS Read 0x8C, Value: 0x%02x\r\n", rx_buffer[ 0 ] );

        if( (rx_buffer[ 0 ] & ALS_DATA_INVALID ) ) {
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b25b      	sxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	da16      	bge.n	8004ada <LTR_329ALS_get_lux_level+0x7e>
           //printf( "LTR 329ALS has Bad data: 0x%02x\r\n", rx_buffer[ 0 ] );
           /*
            * Read the bad data and drop it
            */
           tx_buffer[ 0 ] = ALS_DATA_CH1_0;
 8004aac:	2108      	movs	r1, #8
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	2288      	movs	r2, #136	; 0x88
 8004ab2:	701a      	strb	r2, [r3, #0]
           if( i2c_write_read_sensor( I2C_LTR_329ALS, tx_buffer, 1, rx_buffer, 4 ) == false ) {
 8004ab4:	230c      	movs	r3, #12
 8004ab6:	18fa      	adds	r2, r7, r3
 8004ab8:	1879      	adds	r1, r7, r1
 8004aba:	2304      	movs	r3, #4
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	0013      	movs	r3, r2
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f001 fa62 	bl	8005f8c <i2c_write_read_sensor>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	001a      	movs	r2, r3
 8004acc:	2301      	movs	r3, #1
 8004ace:	4053      	eors	r3, r2
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d100      	bne.n	8004ad8 <LTR_329ALS_get_lux_level+0x7c>
 8004ad6:	e09f      	b.n	8004c18 <LTR_329ALS_get_lux_level+0x1bc>
               PRINTF( "2)LTR 329ALS I2C write failed, result: %d\r\n" );
               goto fail_read;
 8004ad8:	e02e      	b.n	8004b38 <LTR_329ALS_get_lux_level+0xdc>
           PRINTF( "LTR-329ALS Read Invalid Data from 0x88, Value: 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n", rx_buffer[ 0 ], rx_buffer[ 1 ], rx_buffer[ 2 ], rx_buffer[ 3 ] );

           goto return_old_data;
        }

        if( !(rx_buffer[ 0 ] & ALS_DATA_NEW ) ) {
 8004ada:	230c      	movs	r3, #12
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	001a      	movs	r2, r3
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d100      	bne.n	8004aea <LTR_329ALS_get_lux_level+0x8e>
 8004ae8:	e098      	b.n	8004c1c <LTR_329ALS_get_lux_level+0x1c0>
        	goto return_old_data;
        }

//        old_gain_setting = rx_buffer[ 0 ] & 0x70;

        gain = als_gain[ ( ( rx_buffer[ 0 ] & 0x70 ) >> 4 ) ];    // Read what the div rate should be
 8004aea:	200c      	movs	r0, #12
 8004aec:	183b      	adds	r3, r7, r0
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	111b      	asrs	r3, r3, #4
 8004af2:	2207      	movs	r2, #7
 8004af4:	401a      	ands	r2, r3
 8004af6:	2313      	movs	r3, #19
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	4953      	ldr	r1, [pc, #332]	; (8004c48 <LTR_329ALS_get_lux_level+0x1ec>)
 8004afc:	5c8a      	ldrb	r2, [r1, r2]
 8004afe:	701a      	strb	r2, [r3, #0]
        tx_buffer[ 0 ] = ALS_DATA_CH1_0;
 8004b00:	2108      	movs	r1, #8
 8004b02:	187b      	adds	r3, r7, r1
 8004b04:	2288      	movs	r2, #136	; 0x88
 8004b06:	701a      	strb	r2, [r3, #0]
        if( i2c_write_read_sensor( I2C_LTR_329ALS, tx_buffer, 1, rx_buffer, 4 ) == false ) {
 8004b08:	183a      	adds	r2, r7, r0
 8004b0a:	1879      	adds	r1, r7, r1
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	0013      	movs	r3, r2
 8004b12:	2201      	movs	r2, #1
 8004b14:	2000      	movs	r0, #0
 8004b16:	f001 fa39 	bl	8005f8c <i2c_write_read_sensor>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4053      	eors	r3, r2
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <LTR_329ALS_get_lux_level+0xda>
            goto fail_read;
        }

        PRINTF( "LTR-329ALS Read ALS_DATA_CH1_0, Values: 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n", rx_buffer[ 0 ], rx_buffer[ 1 ], rx_buffer[ 2 ], rx_buffer[ 3 ] );

        result = true;
 8004b28:	2316      	movs	r3, #22
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	801a      	strh	r2, [r3, #0]
 8004b30:	e002      	b.n	8004b38 <LTR_329ALS_get_lux_level+0xdc>
            goto fail_read;
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	e000      	b.n	8004b38 <LTR_329ALS_get_lux_level+0xdc>
            goto fail_read;
 8004b36:	46c0      	nop			; (mov r8, r8)
fail_read:
        if( count > 0 )
        	PRINTF( "LUX Bad data count:%u\r\n", count );
        count += 1;
 8004b38:	2114      	movs	r1, #20
 8004b3a:	187b      	adds	r3, r7, r1
 8004b3c:	187a      	adds	r2, r7, r1
 8004b3e:	8812      	ldrh	r2, [r2, #0]
 8004b40:	3201      	adds	r2, #1
 8004b42:	801a      	strh	r2, [r3, #0]

    } while( ( count < 10 ) && ( result == false ) );
 8004b44:	187b      	adds	r3, r7, r1
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	2b09      	cmp	r3, #9
 8004b4a:	d804      	bhi.n	8004b56 <LTR_329ALS_get_lux_level+0xfa>
 8004b4c:	2316      	movs	r3, #22
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d08f      	beq.n	8004a76 <LTR_329ALS_get_lux_level+0x1a>

    if( result == false ) {
 8004b56:	2316      	movs	r3, #22
 8004b58:	18fb      	adds	r3, r7, r3
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <LTR_329ALS_get_lux_level+0x108>
    	/*
    	 * Failing to read SPI Bus, should probably do a reset - more testing before we enable this feature
    	 */
    	return false;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e06d      	b.n	8004c40 <LTR_329ALS_get_lux_level+0x1e4>
    }
    calc_lux( lux_level, ir_level, gain, rx_buffer );
 8004b64:	2313      	movs	r3, #19
 8004b66:	18fb      	adds	r3, r7, r3
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7fc fca2 	bl	80014b4 <__aeabi_ui2f>
 8004b70:	1c02      	adds	r2, r0, #0
 8004b72:	230c      	movs	r3, #12
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f86d 	bl	8004c58 <calc_lux>
    /*
     * Check if we have random noise from the LUX sensor - don't want a random glitch to change real data - change can not be > 10% between samples, if it is, then must exist for 5 steps (5 Seconds)
     * Ignore during provisioning as laser activity (lux spikes) are expected
     */
    if( fabs( *lux_level - hs.last_lux_level ) > ( *lux_level * 0.10 ) ) {
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681c      	ldr	r4, [r3, #0]
 8004b82:	4a32      	ldr	r2, [pc, #200]	; (8004c4c <LTR_329ALS_get_lux_level+0x1f0>)
 8004b84:	23b6      	movs	r3, #182	; 0xb6
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	58d3      	ldr	r3, [r2, r3]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7fc fc92 	bl	80014b4 <__aeabi_ui2f>
 8004b90:	1c03      	adds	r3, r0, #0
 8004b92:	1c19      	adds	r1, r3, #0
 8004b94:	1c20      	adds	r0, r4, #0
 8004b96:	f7fc fa5f 	bl	8001058 <__aeabi_fsub>
 8004b9a:	1c03      	adds	r3, r0, #0
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	1c18      	adds	r0, r3, #0
 8004ba2:	f7fe fa33 	bl	800300c <__aeabi_f2d>
 8004ba6:	0004      	movs	r4, r0
 8004ba8:	000d      	movs	r5, r1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	1c18      	adds	r0, r3, #0
 8004bb0:	f7fe fa2c 	bl	800300c <__aeabi_f2d>
 8004bb4:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <LTR_329ALS_get_lux_level+0x1f4>)
 8004bb6:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <LTR_329ALS_get_lux_level+0x1f8>)
 8004bb8:	f7fd fbe2 	bl	8002380 <__aeabi_dmul>
 8004bbc:	0002      	movs	r2, r0
 8004bbe:	000b      	movs	r3, r1
 8004bc0:	0020      	movs	r0, r4
 8004bc2:	0029      	movs	r1, r5
 8004bc4:	f7fb fc3e 	bl	8000444 <__aeabi_dcmpgt>
 8004bc8:	1e03      	subs	r3, r0, #0
 8004bca:	d014      	beq.n	8004bf6 <LTR_329ALS_get_lux_level+0x19a>
        if( hs.lux_noise_count < 5 ) {
 8004bcc:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <LTR_329ALS_get_lux_level+0x1f0>)
 8004bce:	23b4      	movs	r3, #180	; 0xb4
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	58d3      	ldr	r3, [r2, r3]
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d809      	bhi.n	8004bec <LTR_329ALS_get_lux_level+0x190>
            PRINTF( "Ignoring LUX reading: Last valid: %0.2f, Current: %0.2f\r\n", hs.last_lux_level , hs.current_lux_level );
            hs.lux_noise_count += 1;
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <LTR_329ALS_get_lux_level+0x1f0>)
 8004bda:	23b4      	movs	r3, #180	; 0xb4
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	58d3      	ldr	r3, [r2, r3]
 8004be0:	1c59      	adds	r1, r3, #1
 8004be2:	4a1a      	ldr	r2, [pc, #104]	; (8004c4c <LTR_329ALS_get_lux_level+0x1f0>)
 8004be4:	23b4      	movs	r3, #180	; 0xb4
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	50d1      	str	r1, [r2, r3]
            goto return_old_data;
 8004bea:	e018      	b.n	8004c1e <LTR_329ALS_get_lux_level+0x1c2>
        } else {
            hs.lux_noise_count = 0;
 8004bec:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <LTR_329ALS_get_lux_level+0x1f0>)
 8004bee:	23b4      	movs	r3, #180	; 0xb4
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	50d1      	str	r1, [r2, r3]
        }
    }
    hs.lux_noise_count = 0;
 8004bf6:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <LTR_329ALS_get_lux_level+0x1f0>)
 8004bf8:	23b4      	movs	r3, #180	; 0xb4
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	50d1      	str	r1, [r2, r3]
    hs.last_lux_level = *lux_level;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	1c18      	adds	r0, r3, #0
 8004c06:	f7fb fc8b 	bl	8000520 <__aeabi_f2uiz>
 8004c0a:	0001      	movs	r1, r0
 8004c0c:	4a0f      	ldr	r2, [pc, #60]	; (8004c4c <LTR_329ALS_get_lux_level+0x1f0>)
 8004c0e:	23b6      	movs	r3, #182	; 0xb6
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	50d1      	str	r1, [r2, r3]
    return( true );
 8004c14:	2301      	movs	r3, #1
 8004c16:	e013      	b.n	8004c40 <LTR_329ALS_get_lux_level+0x1e4>
           goto return_old_data;
 8004c18:	46c0      	nop			; (mov r8, r8)
 8004c1a:	e000      	b.n	8004c1e <LTR_329ALS_get_lux_level+0x1c2>
        	goto return_old_data;
 8004c1c:	46c0      	nop			; (mov r8, r8)
	/*
	 * Use old data
	 */
return_old_data:
	*lux_level = hs.current_lux_level;
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <LTR_329ALS_get_lux_level+0x1f0>)
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	0018      	movs	r0, r3
 8004c24:	f7fc fc46 	bl	80014b4 <__aeabi_ui2f>
 8004c28:	1c02      	adds	r2, r0, #0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
	*ir_level = hs.current_ir_lux_level;
 8004c2e:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <LTR_329ALS_get_lux_level+0x1f0>)
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	0018      	movs	r0, r3
 8004c34:	f7fc fc3e 	bl	80014b4 <__aeabi_ui2f>
 8004c38:	1c02      	adds	r2, r0, #0
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	601a      	str	r2, [r3, #0]
	return( true );
 8004c3e:	2301      	movs	r3, #1

}
 8004c40:	0018      	movs	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b006      	add	sp, #24
 8004c46:	bdb0      	pop	{r4, r5, r7, pc}
 8004c48:	0800f200 	.word	0x0800f200
 8004c4c:	200006f8 	.word	0x200006f8
 8004c50:	9999999a 	.word	0x9999999a
 8004c54:	3fb99999 	.word	0x3fb99999

08004c58 <calc_lux>:
/*
 * Calculate the LUX based on received values
 */
void calc_lux( float *lux_level, float *ir_level, float gain, uint8_t *rx_buffer )

{
 8004c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
    uint16_t lux_ch0, lux_ch1;
    float PFactor, ratio, als_lux;

    lux_ch1 = ( rx_buffer[ 0 ] | (uint16_t) ( rx_buffer[ 1 ] << 8 ) );
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b299      	uxth	r1, r3
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	201a      	movs	r0, #26
 8004c7a:	183b      	adds	r3, r7, r0
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	801a      	strh	r2, [r3, #0]

    lux_ch0 = ( rx_buffer[ 2 ] | (uint16_t) ( rx_buffer[ 3 ] << 8 ) );
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	3302      	adds	r3, #2
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	b299      	uxth	r1, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	3303      	adds	r3, #3
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	2618      	movs	r6, #24
 8004c96:	19bb      	adds	r3, r7, r6
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	801a      	strh	r2, [r3, #0]
    *   ALS_LUX = 0
    *  END
    *
    */

    PFactor = 1;
 8004c9c:	23fe      	movs	r3, #254	; 0xfe
 8004c9e:	059b      	lsls	r3, r3, #22
 8004ca0:	617b      	str	r3, [r7, #20]

    ratio = (float)(lux_ch1) / (float) ( ( lux_ch0 + lux_ch1 ) );
 8004ca2:	0005      	movs	r5, r0
 8004ca4:	183b      	adds	r3, r7, r0
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7fc fc03 	bl	80014b4 <__aeabi_ui2f>
 8004cae:	1c04      	adds	r4, r0, #0
 8004cb0:	19bb      	adds	r3, r7, r6
 8004cb2:	881a      	ldrh	r2, [r3, #0]
 8004cb4:	0028      	movs	r0, r5
 8004cb6:	183b      	adds	r3, r7, r0
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	18d3      	adds	r3, r2, r3
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7fc fbaf 	bl	8001420 <__aeabi_i2f>
 8004cc2:	1c03      	adds	r3, r0, #0
 8004cc4:	1c19      	adds	r1, r3, #0
 8004cc6:	1c20      	adds	r0, r4, #0
 8004cc8:	f7fb febc 	bl	8000a44 <__aeabi_fdiv>
 8004ccc:	1c03      	adds	r3, r0, #0
 8004cce:	613b      	str	r3, [r7, #16]
    if( ratio < 0.45 )
 8004cd0:	6938      	ldr	r0, [r7, #16]
 8004cd2:	f7fe f99b 	bl	800300c <__aeabi_f2d>
 8004cd6:	4acf      	ldr	r2, [pc, #828]	; (8005014 <calc_lux+0x3bc>)
 8004cd8:	4bcf      	ldr	r3, [pc, #828]	; (8005018 <calc_lux+0x3c0>)
 8004cda:	f7fb fb9f 	bl	800041c <__aeabi_dcmplt>
 8004cde:	1e03      	subs	r3, r0, #0
 8004ce0:	d05c      	beq.n	8004d9c <calc_lux+0x144>
        als_lux = ( ( ( ( 1.7743 * (float) lux_ch0 ) + ( 1.1059 * (float) lux_ch1 ) ) / (float) gain ) / als_val[ als_time ] ) * PFactor;
 8004ce2:	2318      	movs	r3, #24
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f7fc fbe3 	bl	80014b4 <__aeabi_ui2f>
 8004cee:	1c03      	adds	r3, r0, #0
 8004cf0:	1c18      	adds	r0, r3, #0
 8004cf2:	f7fe f98b 	bl	800300c <__aeabi_f2d>
 8004cf6:	4ac9      	ldr	r2, [pc, #804]	; (800501c <calc_lux+0x3c4>)
 8004cf8:	4bc9      	ldr	r3, [pc, #804]	; (8005020 <calc_lux+0x3c8>)
 8004cfa:	f7fd fb41 	bl	8002380 <__aeabi_dmul>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	000c      	movs	r4, r1
 8004d02:	0025      	movs	r5, r4
 8004d04:	001c      	movs	r4, r3
 8004d06:	231a      	movs	r3, #26
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7fc fbd1 	bl	80014b4 <__aeabi_ui2f>
 8004d12:	1c03      	adds	r3, r0, #0
 8004d14:	1c18      	adds	r0, r3, #0
 8004d16:	f7fe f979 	bl	800300c <__aeabi_f2d>
 8004d1a:	4ac2      	ldr	r2, [pc, #776]	; (8005024 <calc_lux+0x3cc>)
 8004d1c:	4bc2      	ldr	r3, [pc, #776]	; (8005028 <calc_lux+0x3d0>)
 8004d1e:	f7fd fb2f 	bl	8002380 <__aeabi_dmul>
 8004d22:	0002      	movs	r2, r0
 8004d24:	000b      	movs	r3, r1
 8004d26:	0020      	movs	r0, r4
 8004d28:	0029      	movs	r1, r5
 8004d2a:	f7fc fc03 	bl	8001534 <__aeabi_dadd>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	000c      	movs	r4, r1
 8004d32:	0025      	movs	r5, r4
 8004d34:	001c      	movs	r4, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fe f968 	bl	800300c <__aeabi_f2d>
 8004d3c:	0002      	movs	r2, r0
 8004d3e:	000b      	movs	r3, r1
 8004d40:	0020      	movs	r0, r4
 8004d42:	0029      	movs	r1, r5
 8004d44:	f7fc ff12 	bl	8001b6c <__aeabi_ddiv>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	000c      	movs	r4, r1
 8004d4c:	0025      	movs	r5, r4
 8004d4e:	001c      	movs	r4, r3
 8004d50:	4bb6      	ldr	r3, [pc, #728]	; (800502c <calc_lux+0x3d4>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	5e9b      	ldrsh	r3, [r3, r2]
 8004d56:	001a      	movs	r2, r3
 8004d58:	4bb5      	ldr	r3, [pc, #724]	; (8005030 <calc_lux+0x3d8>)
 8004d5a:	0092      	lsls	r2, r2, #2
 8004d5c:	58d3      	ldr	r3, [r2, r3]
 8004d5e:	1c18      	adds	r0, r3, #0
 8004d60:	f7fe f954 	bl	800300c <__aeabi_f2d>
 8004d64:	0002      	movs	r2, r0
 8004d66:	000b      	movs	r3, r1
 8004d68:	0020      	movs	r0, r4
 8004d6a:	0029      	movs	r1, r5
 8004d6c:	f7fc fefe 	bl	8001b6c <__aeabi_ddiv>
 8004d70:	0003      	movs	r3, r0
 8004d72:	000c      	movs	r4, r1
 8004d74:	0025      	movs	r5, r4
 8004d76:	001c      	movs	r4, r3
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f7fe f947 	bl	800300c <__aeabi_f2d>
 8004d7e:	0002      	movs	r2, r0
 8004d80:	000b      	movs	r3, r1
 8004d82:	0020      	movs	r0, r4
 8004d84:	0029      	movs	r1, r5
 8004d86:	f7fd fafb 	bl	8002380 <__aeabi_dmul>
 8004d8a:	0003      	movs	r3, r0
 8004d8c:	000c      	movs	r4, r1
 8004d8e:	0018      	movs	r0, r3
 8004d90:	0021      	movs	r1, r4
 8004d92:	f7fe f98d 	bl	80030b0 <__aeabi_d2f>
 8004d96:	1c03      	adds	r3, r0, #0
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	e0df      	b.n	8004f5c <calc_lux+0x304>
    else if ( ratio < 0.64 && ratio >= 0.45 )
 8004d9c:	6938      	ldr	r0, [r7, #16]
 8004d9e:	f7fe f935 	bl	800300c <__aeabi_f2d>
 8004da2:	4aa4      	ldr	r2, [pc, #656]	; (8005034 <calc_lux+0x3dc>)
 8004da4:	4ba4      	ldr	r3, [pc, #656]	; (8005038 <calc_lux+0x3e0>)
 8004da6:	f7fb fb39 	bl	800041c <__aeabi_dcmplt>
 8004daa:	1e03      	subs	r3, r0, #0
 8004dac:	d065      	beq.n	8004e7a <calc_lux+0x222>
 8004dae:	6938      	ldr	r0, [r7, #16]
 8004db0:	f7fe f92c 	bl	800300c <__aeabi_f2d>
 8004db4:	4a97      	ldr	r2, [pc, #604]	; (8005014 <calc_lux+0x3bc>)
 8004db6:	4b98      	ldr	r3, [pc, #608]	; (8005018 <calc_lux+0x3c0>)
 8004db8:	f7fb fb4e 	bl	8000458 <__aeabi_dcmpge>
 8004dbc:	1e03      	subs	r3, r0, #0
 8004dbe:	d05c      	beq.n	8004e7a <calc_lux+0x222>
        als_lux = ( ( ( ( 4.2785 * (float) lux_ch0 ) - ( 1.9548 * (float) lux_ch1 ) ) / (float) gain ) / als_val[ als_time ] ) * PFactor;
 8004dc0:	2318      	movs	r3, #24
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f7fc fb74 	bl	80014b4 <__aeabi_ui2f>
 8004dcc:	1c03      	adds	r3, r0, #0
 8004dce:	1c18      	adds	r0, r3, #0
 8004dd0:	f7fe f91c 	bl	800300c <__aeabi_f2d>
 8004dd4:	4a99      	ldr	r2, [pc, #612]	; (800503c <calc_lux+0x3e4>)
 8004dd6:	4b9a      	ldr	r3, [pc, #616]	; (8005040 <calc_lux+0x3e8>)
 8004dd8:	f7fd fad2 	bl	8002380 <__aeabi_dmul>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	000c      	movs	r4, r1
 8004de0:	0025      	movs	r5, r4
 8004de2:	001c      	movs	r4, r3
 8004de4:	231a      	movs	r3, #26
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7fc fb62 	bl	80014b4 <__aeabi_ui2f>
 8004df0:	1c03      	adds	r3, r0, #0
 8004df2:	1c18      	adds	r0, r3, #0
 8004df4:	f7fe f90a 	bl	800300c <__aeabi_f2d>
 8004df8:	4a92      	ldr	r2, [pc, #584]	; (8005044 <calc_lux+0x3ec>)
 8004dfa:	4b93      	ldr	r3, [pc, #588]	; (8005048 <calc_lux+0x3f0>)
 8004dfc:	f7fd fac0 	bl	8002380 <__aeabi_dmul>
 8004e00:	0002      	movs	r2, r0
 8004e02:	000b      	movs	r3, r1
 8004e04:	0020      	movs	r0, r4
 8004e06:	0029      	movs	r1, r5
 8004e08:	f7fd fd2c 	bl	8002864 <__aeabi_dsub>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	000c      	movs	r4, r1
 8004e10:	0025      	movs	r5, r4
 8004e12:	001c      	movs	r4, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7fe f8f9 	bl	800300c <__aeabi_f2d>
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	000b      	movs	r3, r1
 8004e1e:	0020      	movs	r0, r4
 8004e20:	0029      	movs	r1, r5
 8004e22:	f7fc fea3 	bl	8001b6c <__aeabi_ddiv>
 8004e26:	0003      	movs	r3, r0
 8004e28:	000c      	movs	r4, r1
 8004e2a:	0025      	movs	r5, r4
 8004e2c:	001c      	movs	r4, r3
 8004e2e:	4b7f      	ldr	r3, [pc, #508]	; (800502c <calc_lux+0x3d4>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	5e9b      	ldrsh	r3, [r3, r2]
 8004e34:	001a      	movs	r2, r3
 8004e36:	4b7e      	ldr	r3, [pc, #504]	; (8005030 <calc_lux+0x3d8>)
 8004e38:	0092      	lsls	r2, r2, #2
 8004e3a:	58d3      	ldr	r3, [r2, r3]
 8004e3c:	1c18      	adds	r0, r3, #0
 8004e3e:	f7fe f8e5 	bl	800300c <__aeabi_f2d>
 8004e42:	0002      	movs	r2, r0
 8004e44:	000b      	movs	r3, r1
 8004e46:	0020      	movs	r0, r4
 8004e48:	0029      	movs	r1, r5
 8004e4a:	f7fc fe8f 	bl	8001b6c <__aeabi_ddiv>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	000c      	movs	r4, r1
 8004e52:	0025      	movs	r5, r4
 8004e54:	001c      	movs	r4, r3
 8004e56:	6978      	ldr	r0, [r7, #20]
 8004e58:	f7fe f8d8 	bl	800300c <__aeabi_f2d>
 8004e5c:	0002      	movs	r2, r0
 8004e5e:	000b      	movs	r3, r1
 8004e60:	0020      	movs	r0, r4
 8004e62:	0029      	movs	r1, r5
 8004e64:	f7fd fa8c 	bl	8002380 <__aeabi_dmul>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	000c      	movs	r4, r1
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	0021      	movs	r1, r4
 8004e70:	f7fe f91e 	bl	80030b0 <__aeabi_d2f>
 8004e74:	1c03      	adds	r3, r0, #0
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	e070      	b.n	8004f5c <calc_lux+0x304>
    else if ( ratio < 0.85 && ratio >= 0.64 )
 8004e7a:	6938      	ldr	r0, [r7, #16]
 8004e7c:	f7fe f8c6 	bl	800300c <__aeabi_f2d>
 8004e80:	4a72      	ldr	r2, [pc, #456]	; (800504c <calc_lux+0x3f4>)
 8004e82:	4b73      	ldr	r3, [pc, #460]	; (8005050 <calc_lux+0x3f8>)
 8004e84:	f7fb faca 	bl	800041c <__aeabi_dcmplt>
 8004e88:	1e03      	subs	r3, r0, #0
 8004e8a:	d065      	beq.n	8004f58 <calc_lux+0x300>
 8004e8c:	6938      	ldr	r0, [r7, #16]
 8004e8e:	f7fe f8bd 	bl	800300c <__aeabi_f2d>
 8004e92:	4a68      	ldr	r2, [pc, #416]	; (8005034 <calc_lux+0x3dc>)
 8004e94:	4b68      	ldr	r3, [pc, #416]	; (8005038 <calc_lux+0x3e0>)
 8004e96:	f7fb fadf 	bl	8000458 <__aeabi_dcmpge>
 8004e9a:	1e03      	subs	r3, r0, #0
 8004e9c:	d05c      	beq.n	8004f58 <calc_lux+0x300>
        als_lux = ( ( ( ( 0.5926 * (float) lux_ch0 ) + ( 0.1185 * (float) lux_ch1 ) ) / (float) gain ) / als_val[ als_time ] ) * PFactor;
 8004e9e:	2318      	movs	r3, #24
 8004ea0:	18fb      	adds	r3, r7, r3
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f7fc fb05 	bl	80014b4 <__aeabi_ui2f>
 8004eaa:	1c03      	adds	r3, r0, #0
 8004eac:	1c18      	adds	r0, r3, #0
 8004eae:	f7fe f8ad 	bl	800300c <__aeabi_f2d>
 8004eb2:	4a68      	ldr	r2, [pc, #416]	; (8005054 <calc_lux+0x3fc>)
 8004eb4:	4b68      	ldr	r3, [pc, #416]	; (8005058 <calc_lux+0x400>)
 8004eb6:	f7fd fa63 	bl	8002380 <__aeabi_dmul>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	000c      	movs	r4, r1
 8004ebe:	0025      	movs	r5, r4
 8004ec0:	001c      	movs	r4, r3
 8004ec2:	231a      	movs	r3, #26
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f7fc faf3 	bl	80014b4 <__aeabi_ui2f>
 8004ece:	1c03      	adds	r3, r0, #0
 8004ed0:	1c18      	adds	r0, r3, #0
 8004ed2:	f7fe f89b 	bl	800300c <__aeabi_f2d>
 8004ed6:	4a61      	ldr	r2, [pc, #388]	; (800505c <calc_lux+0x404>)
 8004ed8:	4b61      	ldr	r3, [pc, #388]	; (8005060 <calc_lux+0x408>)
 8004eda:	f7fd fa51 	bl	8002380 <__aeabi_dmul>
 8004ede:	0002      	movs	r2, r0
 8004ee0:	000b      	movs	r3, r1
 8004ee2:	0020      	movs	r0, r4
 8004ee4:	0029      	movs	r1, r5
 8004ee6:	f7fc fb25 	bl	8001534 <__aeabi_dadd>
 8004eea:	0003      	movs	r3, r0
 8004eec:	000c      	movs	r4, r1
 8004eee:	0025      	movs	r5, r4
 8004ef0:	001c      	movs	r4, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fe f88a 	bl	800300c <__aeabi_f2d>
 8004ef8:	0002      	movs	r2, r0
 8004efa:	000b      	movs	r3, r1
 8004efc:	0020      	movs	r0, r4
 8004efe:	0029      	movs	r1, r5
 8004f00:	f7fc fe34 	bl	8001b6c <__aeabi_ddiv>
 8004f04:	0003      	movs	r3, r0
 8004f06:	000c      	movs	r4, r1
 8004f08:	0025      	movs	r5, r4
 8004f0a:	001c      	movs	r4, r3
 8004f0c:	4b47      	ldr	r3, [pc, #284]	; (800502c <calc_lux+0x3d4>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	5e9b      	ldrsh	r3, [r3, r2]
 8004f12:	001a      	movs	r2, r3
 8004f14:	4b46      	ldr	r3, [pc, #280]	; (8005030 <calc_lux+0x3d8>)
 8004f16:	0092      	lsls	r2, r2, #2
 8004f18:	58d3      	ldr	r3, [r2, r3]
 8004f1a:	1c18      	adds	r0, r3, #0
 8004f1c:	f7fe f876 	bl	800300c <__aeabi_f2d>
 8004f20:	0002      	movs	r2, r0
 8004f22:	000b      	movs	r3, r1
 8004f24:	0020      	movs	r0, r4
 8004f26:	0029      	movs	r1, r5
 8004f28:	f7fc fe20 	bl	8001b6c <__aeabi_ddiv>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	000c      	movs	r4, r1
 8004f30:	0025      	movs	r5, r4
 8004f32:	001c      	movs	r4, r3
 8004f34:	6978      	ldr	r0, [r7, #20]
 8004f36:	f7fe f869 	bl	800300c <__aeabi_f2d>
 8004f3a:	0002      	movs	r2, r0
 8004f3c:	000b      	movs	r3, r1
 8004f3e:	0020      	movs	r0, r4
 8004f40:	0029      	movs	r1, r5
 8004f42:	f7fd fa1d 	bl	8002380 <__aeabi_dmul>
 8004f46:	0003      	movs	r3, r0
 8004f48:	000c      	movs	r4, r1
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	0021      	movs	r1, r4
 8004f4e:	f7fe f8af 	bl	80030b0 <__aeabi_d2f>
 8004f52:	1c03      	adds	r3, r0, #0
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	e001      	b.n	8004f5c <calc_lux+0x304>
    else
        als_lux = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61fb      	str	r3, [r7, #28]

    *lux_level = als_lux;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	601a      	str	r2, [r3, #0]

    if( ratio < 0.45 )
 8004f62:	6938      	ldr	r0, [r7, #16]
 8004f64:	f7fe f852 	bl	800300c <__aeabi_f2d>
 8004f68:	4a2a      	ldr	r2, [pc, #168]	; (8005014 <calc_lux+0x3bc>)
 8004f6a:	4b2b      	ldr	r3, [pc, #172]	; (8005018 <calc_lux+0x3c0>)
 8004f6c:	f7fb fa56 	bl	800041c <__aeabi_dcmplt>
 8004f70:	1e03      	subs	r3, r0, #0
 8004f72:	d077      	beq.n	8005064 <calc_lux+0x40c>
        als_lux = ( ( ( ( 1.7743 * (float) lux_ch0 ) + ( 1.1059 * (float) lux_ch1 ) ) / (float) gain ) / als_val[ als_time ] );
 8004f74:	2318      	movs	r3, #24
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f7fc fa9a 	bl	80014b4 <__aeabi_ui2f>
 8004f80:	1c03      	adds	r3, r0, #0
 8004f82:	1c18      	adds	r0, r3, #0
 8004f84:	f7fe f842 	bl	800300c <__aeabi_f2d>
 8004f88:	4a24      	ldr	r2, [pc, #144]	; (800501c <calc_lux+0x3c4>)
 8004f8a:	4b25      	ldr	r3, [pc, #148]	; (8005020 <calc_lux+0x3c8>)
 8004f8c:	f7fd f9f8 	bl	8002380 <__aeabi_dmul>
 8004f90:	0003      	movs	r3, r0
 8004f92:	000c      	movs	r4, r1
 8004f94:	0025      	movs	r5, r4
 8004f96:	001c      	movs	r4, r3
 8004f98:	231a      	movs	r3, #26
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f7fc fa88 	bl	80014b4 <__aeabi_ui2f>
 8004fa4:	1c03      	adds	r3, r0, #0
 8004fa6:	1c18      	adds	r0, r3, #0
 8004fa8:	f7fe f830 	bl	800300c <__aeabi_f2d>
 8004fac:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <calc_lux+0x3cc>)
 8004fae:	4b1e      	ldr	r3, [pc, #120]	; (8005028 <calc_lux+0x3d0>)
 8004fb0:	f7fd f9e6 	bl	8002380 <__aeabi_dmul>
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	000b      	movs	r3, r1
 8004fb8:	0020      	movs	r0, r4
 8004fba:	0029      	movs	r1, r5
 8004fbc:	f7fc faba 	bl	8001534 <__aeabi_dadd>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	000c      	movs	r4, r1
 8004fc4:	0025      	movs	r5, r4
 8004fc6:	001c      	movs	r4, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fe f81f 	bl	800300c <__aeabi_f2d>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	000b      	movs	r3, r1
 8004fd2:	0020      	movs	r0, r4
 8004fd4:	0029      	movs	r1, r5
 8004fd6:	f7fc fdc9 	bl	8001b6c <__aeabi_ddiv>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	000c      	movs	r4, r1
 8004fde:	0025      	movs	r5, r4
 8004fe0:	001c      	movs	r4, r3
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <calc_lux+0x3d4>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	5e9b      	ldrsh	r3, [r3, r2]
 8004fe8:	001a      	movs	r2, r3
 8004fea:	4b11      	ldr	r3, [pc, #68]	; (8005030 <calc_lux+0x3d8>)
 8004fec:	0092      	lsls	r2, r2, #2
 8004fee:	58d3      	ldr	r3, [r2, r3]
 8004ff0:	1c18      	adds	r0, r3, #0
 8004ff2:	f7fe f80b 	bl	800300c <__aeabi_f2d>
 8004ff6:	0002      	movs	r2, r0
 8004ff8:	000b      	movs	r3, r1
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	0029      	movs	r1, r5
 8004ffe:	f7fc fdb5 	bl	8001b6c <__aeabi_ddiv>
 8005002:	0003      	movs	r3, r0
 8005004:	000c      	movs	r4, r1
 8005006:	0018      	movs	r0, r3
 8005008:	0021      	movs	r1, r4
 800500a:	f7fe f851 	bl	80030b0 <__aeabi_d2f>
 800500e:	1c03      	adds	r3, r0, #0
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	e0ed      	b.n	80051f0 <calc_lux+0x598>
 8005014:	cccccccd 	.word	0xcccccccd
 8005018:	3fdccccc 	.word	0x3fdccccc
 800501c:	6594af4f 	.word	0x6594af4f
 8005020:	3ffc6388 	.word	0x3ffc6388
 8005024:	32ca57a8 	.word	0x32ca57a8
 8005028:	3ff1b1c4 	.word	0x3ff1b1c4
 800502c:	200005cc 	.word	0x200005cc
 8005030:	0800f208 	.word	0x0800f208
 8005034:	47ae147b 	.word	0x47ae147b
 8005038:	3fe47ae1 	.word	0x3fe47ae1
 800503c:	1a9fbe77 	.word	0x1a9fbe77
 8005040:	40111d2f 	.word	0x40111d2f
 8005044:	5d638866 	.word	0x5d638866
 8005048:	3fff46dc 	.word	0x3fff46dc
 800504c:	33333333 	.word	0x33333333
 8005050:	3feb3333 	.word	0x3feb3333
 8005054:	467381d8 	.word	0x467381d8
 8005058:	3fe2f694 	.word	0x3fe2f694
 800505c:	189374bc 	.word	0x189374bc
 8005060:	3fbe5604 	.word	0x3fbe5604
    else if ( ratio < 0.64 && ratio >= 0.45 )
 8005064:	6938      	ldr	r0, [r7, #16]
 8005066:	f7fd ffd1 	bl	800300c <__aeabi_f2d>
 800506a:	4a65      	ldr	r2, [pc, #404]	; (8005200 <calc_lux+0x5a8>)
 800506c:	4b65      	ldr	r3, [pc, #404]	; (8005204 <calc_lux+0x5ac>)
 800506e:	f7fb f9d5 	bl	800041c <__aeabi_dcmplt>
 8005072:	1e03      	subs	r3, r0, #0
 8005074:	d058      	beq.n	8005128 <calc_lux+0x4d0>
 8005076:	6938      	ldr	r0, [r7, #16]
 8005078:	f7fd ffc8 	bl	800300c <__aeabi_f2d>
 800507c:	4a62      	ldr	r2, [pc, #392]	; (8005208 <calc_lux+0x5b0>)
 800507e:	4b63      	ldr	r3, [pc, #396]	; (800520c <calc_lux+0x5b4>)
 8005080:	f7fb f9ea 	bl	8000458 <__aeabi_dcmpge>
 8005084:	1e03      	subs	r3, r0, #0
 8005086:	d04f      	beq.n	8005128 <calc_lux+0x4d0>
        als_lux = ( ( ( ( 4.2785 * (float) lux_ch0 ) - ( 1.9548 * (float) lux_ch1 ) ) / (float) gain ) / als_val[ als_time ] );
 8005088:	2318      	movs	r3, #24
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	0018      	movs	r0, r3
 8005090:	f7fc fa10 	bl	80014b4 <__aeabi_ui2f>
 8005094:	1c03      	adds	r3, r0, #0
 8005096:	1c18      	adds	r0, r3, #0
 8005098:	f7fd ffb8 	bl	800300c <__aeabi_f2d>
 800509c:	4a5c      	ldr	r2, [pc, #368]	; (8005210 <calc_lux+0x5b8>)
 800509e:	4b5d      	ldr	r3, [pc, #372]	; (8005214 <calc_lux+0x5bc>)
 80050a0:	f7fd f96e 	bl	8002380 <__aeabi_dmul>
 80050a4:	0003      	movs	r3, r0
 80050a6:	000c      	movs	r4, r1
 80050a8:	0025      	movs	r5, r4
 80050aa:	001c      	movs	r4, r3
 80050ac:	231a      	movs	r3, #26
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	0018      	movs	r0, r3
 80050b4:	f7fc f9fe 	bl	80014b4 <__aeabi_ui2f>
 80050b8:	1c03      	adds	r3, r0, #0
 80050ba:	1c18      	adds	r0, r3, #0
 80050bc:	f7fd ffa6 	bl	800300c <__aeabi_f2d>
 80050c0:	4a55      	ldr	r2, [pc, #340]	; (8005218 <calc_lux+0x5c0>)
 80050c2:	4b56      	ldr	r3, [pc, #344]	; (800521c <calc_lux+0x5c4>)
 80050c4:	f7fd f95c 	bl	8002380 <__aeabi_dmul>
 80050c8:	0002      	movs	r2, r0
 80050ca:	000b      	movs	r3, r1
 80050cc:	0020      	movs	r0, r4
 80050ce:	0029      	movs	r1, r5
 80050d0:	f7fd fbc8 	bl	8002864 <__aeabi_dsub>
 80050d4:	0003      	movs	r3, r0
 80050d6:	000c      	movs	r4, r1
 80050d8:	0025      	movs	r5, r4
 80050da:	001c      	movs	r4, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7fd ff95 	bl	800300c <__aeabi_f2d>
 80050e2:	0002      	movs	r2, r0
 80050e4:	000b      	movs	r3, r1
 80050e6:	0020      	movs	r0, r4
 80050e8:	0029      	movs	r1, r5
 80050ea:	f7fc fd3f 	bl	8001b6c <__aeabi_ddiv>
 80050ee:	0003      	movs	r3, r0
 80050f0:	000c      	movs	r4, r1
 80050f2:	0025      	movs	r5, r4
 80050f4:	001c      	movs	r4, r3
 80050f6:	4b4a      	ldr	r3, [pc, #296]	; (8005220 <calc_lux+0x5c8>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	5e9b      	ldrsh	r3, [r3, r2]
 80050fc:	001a      	movs	r2, r3
 80050fe:	4b49      	ldr	r3, [pc, #292]	; (8005224 <calc_lux+0x5cc>)
 8005100:	0092      	lsls	r2, r2, #2
 8005102:	58d3      	ldr	r3, [r2, r3]
 8005104:	1c18      	adds	r0, r3, #0
 8005106:	f7fd ff81 	bl	800300c <__aeabi_f2d>
 800510a:	0002      	movs	r2, r0
 800510c:	000b      	movs	r3, r1
 800510e:	0020      	movs	r0, r4
 8005110:	0029      	movs	r1, r5
 8005112:	f7fc fd2b 	bl	8001b6c <__aeabi_ddiv>
 8005116:	0003      	movs	r3, r0
 8005118:	000c      	movs	r4, r1
 800511a:	0018      	movs	r0, r3
 800511c:	0021      	movs	r1, r4
 800511e:	f7fd ffc7 	bl	80030b0 <__aeabi_d2f>
 8005122:	1c03      	adds	r3, r0, #0
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	e063      	b.n	80051f0 <calc_lux+0x598>
    else if ( ratio < 0.85 && ratio >= 0.64 )
 8005128:	6938      	ldr	r0, [r7, #16]
 800512a:	f7fd ff6f 	bl	800300c <__aeabi_f2d>
 800512e:	4a3e      	ldr	r2, [pc, #248]	; (8005228 <calc_lux+0x5d0>)
 8005130:	4b3e      	ldr	r3, [pc, #248]	; (800522c <calc_lux+0x5d4>)
 8005132:	f7fb f973 	bl	800041c <__aeabi_dcmplt>
 8005136:	1e03      	subs	r3, r0, #0
 8005138:	d058      	beq.n	80051ec <calc_lux+0x594>
 800513a:	6938      	ldr	r0, [r7, #16]
 800513c:	f7fd ff66 	bl	800300c <__aeabi_f2d>
 8005140:	4a2f      	ldr	r2, [pc, #188]	; (8005200 <calc_lux+0x5a8>)
 8005142:	4b30      	ldr	r3, [pc, #192]	; (8005204 <calc_lux+0x5ac>)
 8005144:	f7fb f988 	bl	8000458 <__aeabi_dcmpge>
 8005148:	1e03      	subs	r3, r0, #0
 800514a:	d04f      	beq.n	80051ec <calc_lux+0x594>
        als_lux = ( ( ( ( 0.5926 * (float) lux_ch0 ) + ( 0.1185 * (float) lux_ch1 ) ) / (float) gain ) / als_val[ als_time ] );
 800514c:	2318      	movs	r3, #24
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	0018      	movs	r0, r3
 8005154:	f7fc f9ae 	bl	80014b4 <__aeabi_ui2f>
 8005158:	1c03      	adds	r3, r0, #0
 800515a:	1c18      	adds	r0, r3, #0
 800515c:	f7fd ff56 	bl	800300c <__aeabi_f2d>
 8005160:	4a33      	ldr	r2, [pc, #204]	; (8005230 <calc_lux+0x5d8>)
 8005162:	4b34      	ldr	r3, [pc, #208]	; (8005234 <calc_lux+0x5dc>)
 8005164:	f7fd f90c 	bl	8002380 <__aeabi_dmul>
 8005168:	0003      	movs	r3, r0
 800516a:	000c      	movs	r4, r1
 800516c:	0025      	movs	r5, r4
 800516e:	001c      	movs	r4, r3
 8005170:	231a      	movs	r3, #26
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	0018      	movs	r0, r3
 8005178:	f7fc f99c 	bl	80014b4 <__aeabi_ui2f>
 800517c:	1c03      	adds	r3, r0, #0
 800517e:	1c18      	adds	r0, r3, #0
 8005180:	f7fd ff44 	bl	800300c <__aeabi_f2d>
 8005184:	4a2c      	ldr	r2, [pc, #176]	; (8005238 <calc_lux+0x5e0>)
 8005186:	4b2d      	ldr	r3, [pc, #180]	; (800523c <calc_lux+0x5e4>)
 8005188:	f7fd f8fa 	bl	8002380 <__aeabi_dmul>
 800518c:	0002      	movs	r2, r0
 800518e:	000b      	movs	r3, r1
 8005190:	0020      	movs	r0, r4
 8005192:	0029      	movs	r1, r5
 8005194:	f7fc f9ce 	bl	8001534 <__aeabi_dadd>
 8005198:	0003      	movs	r3, r0
 800519a:	000c      	movs	r4, r1
 800519c:	0025      	movs	r5, r4
 800519e:	001c      	movs	r4, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fd ff33 	bl	800300c <__aeabi_f2d>
 80051a6:	0002      	movs	r2, r0
 80051a8:	000b      	movs	r3, r1
 80051aa:	0020      	movs	r0, r4
 80051ac:	0029      	movs	r1, r5
 80051ae:	f7fc fcdd 	bl	8001b6c <__aeabi_ddiv>
 80051b2:	0003      	movs	r3, r0
 80051b4:	000c      	movs	r4, r1
 80051b6:	0025      	movs	r5, r4
 80051b8:	001c      	movs	r4, r3
 80051ba:	4b19      	ldr	r3, [pc, #100]	; (8005220 <calc_lux+0x5c8>)
 80051bc:	2200      	movs	r2, #0
 80051be:	5e9b      	ldrsh	r3, [r3, r2]
 80051c0:	001a      	movs	r2, r3
 80051c2:	4b18      	ldr	r3, [pc, #96]	; (8005224 <calc_lux+0x5cc>)
 80051c4:	0092      	lsls	r2, r2, #2
 80051c6:	58d3      	ldr	r3, [r2, r3]
 80051c8:	1c18      	adds	r0, r3, #0
 80051ca:	f7fd ff1f 	bl	800300c <__aeabi_f2d>
 80051ce:	0002      	movs	r2, r0
 80051d0:	000b      	movs	r3, r1
 80051d2:	0020      	movs	r0, r4
 80051d4:	0029      	movs	r1, r5
 80051d6:	f7fc fcc9 	bl	8001b6c <__aeabi_ddiv>
 80051da:	0003      	movs	r3, r0
 80051dc:	000c      	movs	r4, r1
 80051de:	0018      	movs	r0, r3
 80051e0:	0021      	movs	r1, r4
 80051e2:	f7fd ff65 	bl	80030b0 <__aeabi_d2f>
 80051e6:	1c03      	adds	r3, r0, #0
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	e001      	b.n	80051f0 <calc_lux+0x598>
    else
        als_lux = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]

    *ir_level = als_lux;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	601a      	str	r2, [r3, #0]
            printf( "LTR-329ALS Set Mode (Gain) Failed, result: %d\r\n", wiced_result );
        }
    }
     */

}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b009      	add	sp, #36	; 0x24
 80051fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	47ae147b 	.word	0x47ae147b
 8005204:	3fe47ae1 	.word	0x3fe47ae1
 8005208:	cccccccd 	.word	0xcccccccd
 800520c:	3fdccccc 	.word	0x3fdccccc
 8005210:	1a9fbe77 	.word	0x1a9fbe77
 8005214:	40111d2f 	.word	0x40111d2f
 8005218:	5d638866 	.word	0x5d638866
 800521c:	3fff46dc 	.word	0x3fff46dc
 8005220:	200005cc 	.word	0x200005cc
 8005224:	0800f208 	.word	0x0800f208
 8005228:	33333333 	.word	0x33333333
 800522c:	3feb3333 	.word	0x3feb3333
 8005230:	467381d8 	.word	0x467381d8
 8005234:	3fe2f694 	.word	0x3fe2f694
 8005238:	189374bc 	.word	0x189374bc
 800523c:	3fbe5604 	.word	0x3fbe5604

08005240 <init_Si7020>:
  * @brief  init_Si7020
  * @param  None
  * @retval : None
  */
bool init_Si7020(void)
{
 8005240:	b5b0      	push	{r4, r5, r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
    PRINTF( "Setting up I2C for Si7020\r\n" );

    /*
     * Set up the config for the the Silicon Labs Temp and Humidity Sensor
     */
    tx_buffer[ 0 ] = 0xE6;      // Write RH/T User Register
 8005246:	2110      	movs	r1, #16
 8005248:	187b      	adds	r3, r7, r1
 800524a:	22e6      	movs	r2, #230	; 0xe6
 800524c:	701a      	strb	r2, [r3, #0]
    tx_buffer[ 1 ] = 0x00;      // 12 Bit RH & 14 Bit Temp - No Heater
 800524e:	187b      	adds	r3, r7, r1
 8005250:	2200      	movs	r2, #0
 8005252:	705a      	strb	r2, [r3, #1]
    result = i2c_write_sensor( I2C_Si7020, tx_buffer, 2 );
 8005254:	2517      	movs	r5, #23
 8005256:	197c      	adds	r4, r7, r5
 8005258:	187b      	adds	r3, r7, r1
 800525a:	2202      	movs	r2, #2
 800525c:	0019      	movs	r1, r3
 800525e:	2001      	movs	r0, #1
 8005260:	f000 ff14 	bl	800608c <i2c_write_sensor>
 8005264:	0003      	movs	r3, r0
 8005266:	7023      	strb	r3, [r4, #0]
    if( result != true ) {
 8005268:	197b      	adds	r3, r7, r5
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2201      	movs	r2, #1
 800526e:	4053      	eors	r3, r2
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <init_Si7020+0x3a>
        PRINTF( "\r\nSi7020 I2C transmit Failed\r\n" );
        return false;
 8005276:	2300      	movs	r3, #0
 8005278:	e06b      	b.n	8005352 <init_Si7020+0x112>
    }
    /*
     * Read the serial number
     */
    tx_buffer[ 0 ] = 0xFA;      // Read from First Byte of ID
 800527a:	2110      	movs	r1, #16
 800527c:	187b      	adds	r3, r7, r1
 800527e:	22fa      	movs	r2, #250	; 0xfa
 8005280:	701a      	strb	r2, [r3, #0]
    tx_buffer[ 1 ] = 0x0F;      //
 8005282:	187b      	adds	r3, r7, r1
 8005284:	220f      	movs	r2, #15
 8005286:	705a      	strb	r2, [r3, #1]
    result = i2c_write_sensor( I2C_Si7020, tx_buffer, 2 );
 8005288:	2517      	movs	r5, #23
 800528a:	197c      	adds	r4, r7, r5
 800528c:	187b      	adds	r3, r7, r1
 800528e:	2202      	movs	r2, #2
 8005290:	0019      	movs	r1, r3
 8005292:	2001      	movs	r0, #1
 8005294:	f000 fefa 	bl	800608c <i2c_write_sensor>
 8005298:	0003      	movs	r3, r0
 800529a:	7023      	strb	r3, [r4, #0]
    if( result != true ) {
 800529c:	197b      	adds	r3, r7, r5
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2201      	movs	r2, #1
 80052a2:	4053      	eors	r3, r2
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <init_Si7020+0x6e>
        PRINTF( "\r\nSi7020 I2C transmit Failed\r\n" );
        return false;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e051      	b.n	8005352 <init_Si7020+0x112>
    }

    result = i2c_read_sensor( I2C_Si7020, rx_buffer, 8 );
 80052ae:	2517      	movs	r5, #23
 80052b0:	197c      	adds	r4, r7, r5
 80052b2:	2308      	movs	r3, #8
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	2208      	movs	r2, #8
 80052b8:	0019      	movs	r1, r3
 80052ba:	2001      	movs	r0, #1
 80052bc:	f000 ff2c 	bl	8006118 <i2c_read_sensor>
 80052c0:	0003      	movs	r3, r0
 80052c2:	7023      	strb	r3, [r4, #0]
    if( result != true ) {
 80052c4:	197b      	adds	r3, r7, r5
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2201      	movs	r2, #1
 80052ca:	4053      	eors	r3, r2
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <init_Si7020+0x96>
        PRINTF( "\r\nSi7020 I2C read Serial Number\r\n" );
        return false;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e03d      	b.n	8005352 <init_Si7020+0x112>
    }
    PRINTF( "Temperature Sensor serial number output: %02X%02X%02X%02X%02X%02X%02X%02X", rx_buffer[ 0 ], rx_buffer[ 1 ], rx_buffer[ 2 ], rx_buffer[ 3 ],
    		rx_buffer[ 4 ], rx_buffer[ 5 ], rx_buffer[ 6 ], rx_buffer[ 7 ] );

    tx_buffer[ 0 ] = 0xFC;      // Read from 2nd Byte of ID
 80052d6:	2110      	movs	r1, #16
 80052d8:	187b      	adds	r3, r7, r1
 80052da:	22fc      	movs	r2, #252	; 0xfc
 80052dc:	701a      	strb	r2, [r3, #0]
    tx_buffer[ 1 ] = 0xC9;      //
 80052de:	187b      	adds	r3, r7, r1
 80052e0:	22c9      	movs	r2, #201	; 0xc9
 80052e2:	705a      	strb	r2, [r3, #1]
    result = i2c_write_sensor( I2C_Si7020, tx_buffer, 2 );
 80052e4:	2517      	movs	r5, #23
 80052e6:	197c      	adds	r4, r7, r5
 80052e8:	187b      	adds	r3, r7, r1
 80052ea:	2202      	movs	r2, #2
 80052ec:	0019      	movs	r1, r3
 80052ee:	2001      	movs	r0, #1
 80052f0:	f000 fecc 	bl	800608c <i2c_write_sensor>
 80052f4:	0003      	movs	r3, r0
 80052f6:	7023      	strb	r3, [r4, #0]
    if( result != true ) {
 80052f8:	197b      	adds	r3, r7, r5
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2201      	movs	r2, #1
 80052fe:	4053      	eors	r3, r2
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <init_Si7020+0xca>
        PRINTF( "\r\nSi7020 I2C transmit Failed\r\n" );
        return false;
 8005306:	2300      	movs	r3, #0
 8005308:	e023      	b.n	8005352 <init_Si7020+0x112>
    }

    result = i2c_read_sensor( I2C_Si7020, rx_buffer, 6 );
 800530a:	2517      	movs	r5, #23
 800530c:	197c      	adds	r4, r7, r5
 800530e:	2308      	movs	r3, #8
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	2206      	movs	r2, #6
 8005314:	0019      	movs	r1, r3
 8005316:	2001      	movs	r0, #1
 8005318:	f000 fefe 	bl	8006118 <i2c_read_sensor>
 800531c:	0003      	movs	r3, r0
 800531e:	7023      	strb	r3, [r4, #0]
    if( result != true ) {
 8005320:	197b      	adds	r3, r7, r5
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2201      	movs	r2, #1
 8005326:	4053      	eors	r3, r2
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <init_Si7020+0xf2>
        PRINTF( "\r\nSi7020 I2C read Serial Number\r\n" );
        return false;
 800532e:	2300      	movs	r3, #0
 8005330:	e00f      	b.n	8005352 <init_Si7020+0x112>
    }
    PRINTF( "-%02X%02X%02X%02X%02X%02X\r\n", rx_buffer[ 0 ], rx_buffer[ 1 ], rx_buffer[ 2 ], rx_buffer[ 3 ],
    		rx_buffer[ 4 ], rx_buffer[ 5 ] );
    if( Si7020_get_temp( &temp, &humidity ) == false )
 8005332:	003a      	movs	r2, r7
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	0011      	movs	r1, r2
 8005338:	0018      	movs	r0, r3
 800533a:	f000 f80f 	bl	800535c <Si7020_get_temp>
 800533e:	0003      	movs	r3, r0
 8005340:	001a      	movs	r2, r3
 8005342:	2301      	movs	r3, #1
 8005344:	4053      	eors	r3, r2
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <init_Si7020+0x110>
        return false;
 800534c:	2300      	movs	r3, #0
 800534e:	e000      	b.n	8005352 <init_Si7020+0x112>
    /*
     * Display if in debug mode
     */
    PRINTF( "I2C Si7020 Temp: %0.02fC, Humidity: %0.02f%%RH\r\n", temp, humidity );
    return true;
 8005350:	2301      	movs	r3, #1
}
 8005352:	0018      	movs	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	b006      	add	sp, #24
 8005358:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800535c <Si7020_get_temp>:
  * @param  None
  * @retval : None
  */

bool Si7020_get_temp(float *temp, float *humidity)
{
 800535c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]

    /*
     * Read the Temp and Humidity Sensor
     */

    tx_buffer[ 0 ] = 0xF5;      // Read RH first then Temp should be available without delay
 8005366:	210c      	movs	r1, #12
 8005368:	187b      	adds	r3, r7, r1
 800536a:	22f5      	movs	r2, #245	; 0xf5
 800536c:	701a      	strb	r2, [r3, #0]
    result = i2c_write_sensor( I2C_Si7020, tx_buffer, 1 );
 800536e:	2517      	movs	r5, #23
 8005370:	197c      	adds	r4, r7, r5
 8005372:	187b      	adds	r3, r7, r1
 8005374:	2201      	movs	r2, #1
 8005376:	0019      	movs	r1, r3
 8005378:	2001      	movs	r0, #1
 800537a:	f000 fe87 	bl	800608c <i2c_write_sensor>
 800537e:	0003      	movs	r3, r0
 8005380:	7023      	strb	r3, [r4, #0]
    if( result != true ) {
 8005382:	197b      	adds	r3, r7, r5
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2201      	movs	r2, #1
 8005388:	4053      	eors	r3, r2
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <Si7020_get_temp+0x38>
        PRINTF( "\r\nSi7020 I2C write Failed\r\n" );
        return false;
 8005390:	2300      	movs	r3, #0
 8005392:	e0f7      	b.n	8005584 <Si7020_get_temp+0x228>
    }

    HAL_Delay( 25 );    // Wait for device to process
 8005394:	2019      	movs	r0, #25
 8005396:	f002 fb05 	bl	80079a4 <HAL_Delay>

    result = i2c_read_sensor( I2C_Si7020, rx_buffer, 3 );
 800539a:	2517      	movs	r5, #23
 800539c:	197c      	adds	r4, r7, r5
 800539e:	2310      	movs	r3, #16
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	2203      	movs	r2, #3
 80053a4:	0019      	movs	r1, r3
 80053a6:	2001      	movs	r0, #1
 80053a8:	f000 feb6 	bl	8006118 <i2c_read_sensor>
 80053ac:	0003      	movs	r3, r0
 80053ae:	7023      	strb	r3, [r4, #0]
    if( result != true ) {
 80053b0:	197b      	adds	r3, r7, r5
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2201      	movs	r2, #1
 80053b6:	4053      	eors	r3, r2
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <Si7020_get_temp+0x66>
        PRINTF( "\r\nSi7020 I2C read humidity Failed\r\n" );
        return false;
 80053be:	2300      	movs	r3, #0
 80053c0:	e0e0      	b.n	8005584 <Si7020_get_temp+0x228>
    }

    crc = Si_crc( &rx_buffer[ 0 ], 2 );
 80053c2:	2516      	movs	r5, #22
 80053c4:	197c      	adds	r4, r7, r5
 80053c6:	2610      	movs	r6, #16
 80053c8:	19bb      	adds	r3, r7, r6
 80053ca:	2102      	movs	r1, #2
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 f8ef 	bl	80055b0 <Si_crc>
 80053d2:	0003      	movs	r3, r0
 80053d4:	7023      	strb	r3, [r4, #0]
    PRINTF( "Humidity Read: 0x%02x, 0x%02x, 0x%02x CRC: 0x%02x\r\n", rx_buffer[ 0 ], rx_buffer[ 1 ], rx_buffer[ 2 ], crc );

    if( rx_buffer[ 2 ] == crc ) {  // Verify CRC
 80053d6:	19bb      	adds	r3, r7, r6
 80053d8:	789b      	ldrb	r3, [r3, #2]
 80053da:	197a      	adds	r2, r7, r5
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d000      	beq.n	80053e4 <Si7020_get_temp+0x88>
 80053e2:	e0c5      	b.n	8005570 <Si7020_get_temp+0x214>
        calc = ( (uint16_t)( rx_buffer[ 0 ] ) << 8 ) | (uint16_t) rx_buffer[ 1 ];
 80053e4:	2110      	movs	r1, #16
 80053e6:	187b      	adds	r3, r7, r1
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	b21a      	sxth	r2, r3
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	b21b      	sxth	r3, r3
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b21a      	sxth	r2, r3
 80053f8:	2114      	movs	r1, #20
 80053fa:	187b      	adds	r3, r7, r1
 80053fc:	801a      	strh	r2, [r3, #0]
        *humidity = ( ( 125.0 * (float) calc ) / 65536.0 ) - 6;    // From data sheet
 80053fe:	187b      	adds	r3, r7, r1
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	0018      	movs	r0, r3
 8005404:	f7fc f856 	bl	80014b4 <__aeabi_ui2f>
 8005408:	1c03      	adds	r3, r0, #0
 800540a:	1c18      	adds	r0, r3, #0
 800540c:	f7fd fdfe 	bl	800300c <__aeabi_f2d>
 8005410:	2200      	movs	r2, #0
 8005412:	4b5e      	ldr	r3, [pc, #376]	; (800558c <Si7020_get_temp+0x230>)
 8005414:	f7fc ffb4 	bl	8002380 <__aeabi_dmul>
 8005418:	0003      	movs	r3, r0
 800541a:	000c      	movs	r4, r1
 800541c:	0018      	movs	r0, r3
 800541e:	0021      	movs	r1, r4
 8005420:	2200      	movs	r2, #0
 8005422:	4b5b      	ldr	r3, [pc, #364]	; (8005590 <Si7020_get_temp+0x234>)
 8005424:	f7fc fba2 	bl	8001b6c <__aeabi_ddiv>
 8005428:	0003      	movs	r3, r0
 800542a:	000c      	movs	r4, r1
 800542c:	0018      	movs	r0, r3
 800542e:	0021      	movs	r1, r4
 8005430:	2200      	movs	r2, #0
 8005432:	4b58      	ldr	r3, [pc, #352]	; (8005594 <Si7020_get_temp+0x238>)
 8005434:	f7fd fa16 	bl	8002864 <__aeabi_dsub>
 8005438:	0003      	movs	r3, r0
 800543a:	000c      	movs	r4, r1
 800543c:	0018      	movs	r0, r3
 800543e:	0021      	movs	r1, r4
 8005440:	f7fd fe36 	bl	80030b0 <__aeabi_d2f>
 8005444:	1c02      	adds	r2, r0, #0
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	601a      	str	r2, [r3, #0]
        /*
         *  Check if this passes the sniff test
         */
        if( *humidity > 100)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4952      	ldr	r1, [pc, #328]	; (8005598 <Si7020_get_temp+0x23c>)
 8005450:	1c18      	adds	r0, r3, #0
 8005452:	f7fb f831 	bl	80004b8 <__aeabi_fcmpgt>
 8005456:	1e03      	subs	r3, r0, #0
 8005458:	d003      	beq.n	8005462 <Si7020_get_temp+0x106>
            *humidity  = 100.0;  // Check for out of range values
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	4a4e      	ldr	r2, [pc, #312]	; (8005598 <Si7020_get_temp+0x23c>)
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	e00a      	b.n	8005478 <Si7020_get_temp+0x11c>
        else if ( *humidity < 0.0 )
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2100      	movs	r1, #0
 8005468:	1c18      	adds	r0, r3, #0
 800546a:	f7fb f811 	bl	8000490 <__aeabi_fcmplt>
 800546e:	1e03      	subs	r3, r0, #0
 8005470:	d002      	beq.n	8005478 <Si7020_get_temp+0x11c>
            *humidity = 0.0;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]

        tx_buffer[ 0 ] = 0xF3;      // Read Temp from last RH reading
 8005478:	210c      	movs	r1, #12
 800547a:	187b      	adds	r3, r7, r1
 800547c:	22f3      	movs	r2, #243	; 0xf3
 800547e:	701a      	strb	r2, [r3, #0]
        result = i2c_write_sensor( I2C_Si7020, tx_buffer, 1 );
 8005480:	2517      	movs	r5, #23
 8005482:	197c      	adds	r4, r7, r5
 8005484:	187b      	adds	r3, r7, r1
 8005486:	2201      	movs	r2, #1
 8005488:	0019      	movs	r1, r3
 800548a:	2001      	movs	r0, #1
 800548c:	f000 fdfe 	bl	800608c <i2c_write_sensor>
 8005490:	0003      	movs	r3, r0
 8005492:	7023      	strb	r3, [r4, #0]
        if( result != true ) {
 8005494:	197b      	adds	r3, r7, r5
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2201      	movs	r2, #1
 800549a:	4053      	eors	r3, r2
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <Si7020_get_temp+0x14a>
            PRINTF( "\r\nSi7020 I2C write Failed\r\n" );
            return false;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e06e      	b.n	8005584 <Si7020_get_temp+0x228>
        }

        HAL_Delay( 25 );    // Wait for device to process
 80054a6:	2019      	movs	r0, #25
 80054a8:	f002 fa7c 	bl	80079a4 <HAL_Delay>

        result = i2c_read_sensor( I2C_Si7020, rx_buffer, 3 );
 80054ac:	2517      	movs	r5, #23
 80054ae:	197c      	adds	r4, r7, r5
 80054b0:	2310      	movs	r3, #16
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	2203      	movs	r2, #3
 80054b6:	0019      	movs	r1, r3
 80054b8:	2001      	movs	r0, #1
 80054ba:	f000 fe2d 	bl	8006118 <i2c_read_sensor>
 80054be:	0003      	movs	r3, r0
 80054c0:	7023      	strb	r3, [r4, #0]
        if( result != true ) {
 80054c2:	197b      	adds	r3, r7, r5
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2201      	movs	r2, #1
 80054c8:	4053      	eors	r3, r2
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <Si7020_get_temp+0x178>
            PRINTF( "\r\nSi7020 I2C read temp Failed\r\n" );
            return false;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e057      	b.n	8005584 <Si7020_get_temp+0x228>
        }

        crc = Si_crc( &rx_buffer[ 0 ], 2 );
 80054d4:	2516      	movs	r5, #22
 80054d6:	197c      	adds	r4, r7, r5
 80054d8:	2610      	movs	r6, #16
 80054da:	19bb      	adds	r3, r7, r6
 80054dc:	2102      	movs	r1, #2
 80054de:	0018      	movs	r0, r3
 80054e0:	f000 f866 	bl	80055b0 <Si_crc>
 80054e4:	0003      	movs	r3, r0
 80054e6:	7023      	strb	r3, [r4, #0]
        PRINTF( "Temp Read: 0x%02x, 0x%02x, 0x%02x CRC: 0x%02x\r\n", rx_buffer[ 0 ], rx_buffer[ 1 ], rx_buffer[ 2 ], Si_crc( &rx_buffer[ 0 ], 2 ) );

        if( rx_buffer[ 2 ] == crc ) {  // Verify CRC
 80054e8:	19bb      	adds	r3, r7, r6
 80054ea:	789b      	ldrb	r3, [r3, #2]
 80054ec:	197a      	adds	r2, r7, r5
 80054ee:	7812      	ldrb	r2, [r2, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d133      	bne.n	800555c <Si7020_get_temp+0x200>
            calc = ( (uint16_t)( rx_buffer[ 0 ] ) << 8 ) | (uint16_t) rx_buffer[ 1 ];
 80054f4:	2110      	movs	r1, #16
 80054f6:	187b      	adds	r3, r7, r1
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	b21a      	sxth	r2, r3
 80054fe:	187b      	adds	r3, r7, r1
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	b21b      	sxth	r3, r3
 8005504:	4313      	orrs	r3, r2
 8005506:	b21a      	sxth	r2, r3
 8005508:	2114      	movs	r1, #20
 800550a:	187b      	adds	r3, r7, r1
 800550c:	801a      	strh	r2, [r3, #0]
            *temp = ( ( 175.72 * (float) calc ) / 65536.0 ) - 46.85;
 800550e:	187b      	adds	r3, r7, r1
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	0018      	movs	r0, r3
 8005514:	f7fb ffce 	bl	80014b4 <__aeabi_ui2f>
 8005518:	1c03      	adds	r3, r0, #0
 800551a:	1c18      	adds	r0, r3, #0
 800551c:	f7fd fd76 	bl	800300c <__aeabi_f2d>
 8005520:	4a1e      	ldr	r2, [pc, #120]	; (800559c <Si7020_get_temp+0x240>)
 8005522:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <Si7020_get_temp+0x244>)
 8005524:	f7fc ff2c 	bl	8002380 <__aeabi_dmul>
 8005528:	0003      	movs	r3, r0
 800552a:	000c      	movs	r4, r1
 800552c:	0018      	movs	r0, r3
 800552e:	0021      	movs	r1, r4
 8005530:	2200      	movs	r2, #0
 8005532:	4b17      	ldr	r3, [pc, #92]	; (8005590 <Si7020_get_temp+0x234>)
 8005534:	f7fc fb1a 	bl	8001b6c <__aeabi_ddiv>
 8005538:	0003      	movs	r3, r0
 800553a:	000c      	movs	r4, r1
 800553c:	0018      	movs	r0, r3
 800553e:	0021      	movs	r1, r4
 8005540:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <Si7020_get_temp+0x248>)
 8005542:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <Si7020_get_temp+0x24c>)
 8005544:	f7fd f98e 	bl	8002864 <__aeabi_dsub>
 8005548:	0003      	movs	r3, r0
 800554a:	000c      	movs	r4, r1
 800554c:	0018      	movs	r0, r3
 800554e:	0021      	movs	r1, r4
 8005550:	f7fd fdae 	bl	80030b0 <__aeabi_d2f>
 8005554:	1c02      	adds	r2, r0, #0
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e012      	b.n	8005582 <Si7020_get_temp+0x226>

            PRINTF( "I2C Si7020 Temp: %0.02fC, Humidity: %0.02f%%RH\r\n", *temp, *humidity );

        } else {
            PRINTF( "Failed Temperature CRC\r\n" );
            hs.false_temp_count += 1;
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <Si7020_get_temp+0x250>)
 800555e:	23b0      	movs	r3, #176	; 0xb0
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	58d3      	ldr	r3, [r2, r3]
 8005564:	1c59      	adds	r1, r3, #1
 8005566:	4a11      	ldr	r2, [pc, #68]	; (80055ac <Si7020_get_temp+0x250>)
 8005568:	23b0      	movs	r3, #176	; 0xb0
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	50d1      	str	r1, [r2, r3]
 800556e:	e008      	b.n	8005582 <Si7020_get_temp+0x226>
        }
    } else {
        PRINTF( "Failed Humidity CRC\r\n" );
        hs.false_temp_count += 1;
 8005570:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <Si7020_get_temp+0x250>)
 8005572:	23b0      	movs	r3, #176	; 0xb0
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	58d3      	ldr	r3, [r2, r3]
 8005578:	1c59      	adds	r1, r3, #1
 800557a:	4a0c      	ldr	r2, [pc, #48]	; (80055ac <Si7020_get_temp+0x250>)
 800557c:	23b0      	movs	r3, #176	; 0xb0
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	50d1      	str	r1, [r2, r3]
    }
    return true;
 8005582:	2301      	movs	r3, #1
}
 8005584:	0018      	movs	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	b007      	add	sp, #28
 800558a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800558c:	405f4000 	.word	0x405f4000
 8005590:	40f00000 	.word	0x40f00000
 8005594:	40180000 	.word	0x40180000
 8005598:	42c80000 	.word	0x42c80000
 800559c:	3d70a3d7 	.word	0x3d70a3d7
 80055a0:	4065f70a 	.word	0x4065f70a
 80055a4:	cccccccd 	.word	0xcccccccd
 80055a8:	40476ccc 	.word	0x40476ccc
 80055ac:	200006f8 	.word	0x200006f8

080055b0 <Si_crc>:
/*
 * Calculate the CRC generator polynomial of x8 + x5 + x4 + 1, with an initialization of 0x00.
 */
uint8_t Si_crc( uint8_t *bytes, uint16_t length )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	000a      	movs	r2, r1
 80055ba:	1cbb      	adds	r3, r7, #2
 80055bc:	801a      	strh	r2, [r3, #0]

	uint8_t crc, i, j;

	crc = 0;
 80055be:	230f      	movs	r3, #15
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]

	for( i = 0; i < length; i++ ) {
 80055c6:	230e      	movs	r3, #14
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	e038      	b.n	8005642 <Si_crc+0x92>
		crc ^= bytes[ i ];
 80055d0:	230e      	movs	r3, #14
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	18d3      	adds	r3, r2, r3
 80055da:	7819      	ldrb	r1, [r3, #0]
 80055dc:	220f      	movs	r2, #15
 80055de:	18bb      	adds	r3, r7, r2
 80055e0:	18ba      	adds	r2, r7, r2
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	404a      	eors	r2, r1
 80055e6:	701a      	strb	r2, [r3, #0]
	    for( j = 8; j > 0; j-- ) {
 80055e8:	230d      	movs	r3, #13
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	2208      	movs	r2, #8
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	e01c      	b.n	800562c <Si_crc+0x7c>
	    	if( crc & 0x80 )
 80055f2:	230f      	movs	r3, #15
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	b25b      	sxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	da0a      	bge.n	8005614 <Si_crc+0x64>
	    		crc = ( crc << 1 ) ^ 0x131;
 80055fe:	210f      	movs	r1, #15
 8005600:	187b      	adds	r3, r7, r1
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	b25b      	sxtb	r3, r3
 8005608:	2231      	movs	r2, #49	; 0x31
 800560a:	4053      	eors	r3, r2
 800560c:	b25a      	sxtb	r2, r3
 800560e:	187b      	adds	r3, r7, r1
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	e005      	b.n	8005620 <Si_crc+0x70>
	    	else
	    		crc = ( crc << 1 );
 8005614:	230f      	movs	r3, #15
 8005616:	18fa      	adds	r2, r7, r3
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	18db      	adds	r3, r3, r3
 800561e:	7013      	strb	r3, [r2, #0]
	    for( j = 8; j > 0; j-- ) {
 8005620:	210d      	movs	r1, #13
 8005622:	187b      	adds	r3, r7, r1
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	187b      	adds	r3, r7, r1
 8005628:	3a01      	subs	r2, #1
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	230d      	movs	r3, #13
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1dd      	bne.n	80055f2 <Si_crc+0x42>
	for( i = 0; i < length; i++ ) {
 8005636:	210e      	movs	r1, #14
 8005638:	187b      	adds	r3, r7, r1
 800563a:	781a      	ldrb	r2, [r3, #0]
 800563c:	187b      	adds	r3, r7, r1
 800563e:	3201      	adds	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	230e      	movs	r3, #14
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	1cba      	adds	r2, r7, #2
 800564c:	8812      	ldrh	r2, [r2, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d8be      	bhi.n	80055d0 <Si_crc+0x20>
	    }

	}
	return crc;
 8005652:	230f      	movs	r3, #15
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	781b      	ldrb	r3, [r3, #0]

}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b004      	add	sp, #16
 800565e:	bd80      	pop	{r7, pc}

08005660 <get_environmental_sensor_measurement>:
uint8_t work_buffer[ BSEC_MAX_STATE_BLOB_SIZE ];
uint32_t bsec_state_len = 0;
uint32_t n_samples = 0;

bool get_environmental_sensor_measurement( uint32_t current_time )
{
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005662:	b08f      	sub	sp, #60	; 0x3c
 8005664:	af02      	add	r7, sp, #8
 8005666:	61f8      	str	r0, [r7, #28]

    int64_t time_stamp;

    bsec_library_return_t bsec_status = BSEC_OK;
 8005668:	2317      	movs	r3, #23
 800566a:	2218      	movs	r2, #24
 800566c:	4694      	mov	ip, r2
 800566e:	44bc      	add	ip, r7
 8005670:	4463      	add	r3, ip
 8005672:	2000      	movs	r0, #0
 8005674:	7018      	strb	r0, [r3, #0]

    /*
     * Get the timestamp in nanoseconds before calling bsec_sensor_control()
     */
    time_stamp = (uint64_t) current_time * 1000000;
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	001d      	movs	r5, r3
 800567a:	2300      	movs	r3, #0
 800567c:	001e      	movs	r6, r3
 800567e:	002b      	movs	r3, r5
 8005680:	0034      	movs	r4, r6
 8005682:	0ed8      	lsrs	r0, r3, #27
 8005684:	0162      	lsls	r2, r4, #5
 8005686:	617a      	str	r2, [r7, #20]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4302      	orrs	r2, r0
 800568c:	617a      	str	r2, [r7, #20]
 800568e:	015b      	lsls	r3, r3, #5
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	697c      	ldr	r4, [r7, #20]
 8005696:	1b5b      	subs	r3, r3, r5
 8005698:	41b4      	sbcs	r4, r6
 800569a:	0dd8      	lsrs	r0, r3, #23
 800569c:	0262      	lsls	r2, r4, #9
 800569e:	60fa      	str	r2, [r7, #12]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4302      	orrs	r2, r0
 80056a4:	60fa      	str	r2, [r7, #12]
 80056a6:	025b      	lsls	r3, r3, #9
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	68fc      	ldr	r4, [r7, #12]
 80056ae:	195b      	adds	r3, r3, r5
 80056b0:	4174      	adcs	r4, r6
 80056b2:	0e98      	lsrs	r0, r3, #26
 80056b4:	01a2      	lsls	r2, r4, #6
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4302      	orrs	r2, r0
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	019a      	lsls	r2, r3, #6
 80056c0:	603a      	str	r2, [r7, #0]
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	1ac9      	subs	r1, r1, r3
 80056c8:	41a2      	sbcs	r2, r4
 80056ca:	000b      	movs	r3, r1
 80056cc:	0014      	movs	r4, r2
 80056ce:	195b      	adds	r3, r3, r5
 80056d0:	4174      	adcs	r4, r6
 80056d2:	623b      	str	r3, [r7, #32]
 80056d4:	627c      	str	r4, [r7, #36]	; 0x24

    /* Retrieve sensor settings to be used in this time instant by calling bsec_sensor_control */
    bsec_sensor_control( time_stamp, &sensor_settings );
 80056d6:	4a28      	ldr	r2, [pc, #160]	; (8005778 <get_environmental_sensor_measurement+0x118>)
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80056dc:	0018      	movs	r0, r3
 80056de:	0021      	movs	r1, r4
 80056e0:	f7fe fc2e 	bl	8003f40 <bsec_sensor_control>

    /* Trigger a measurement if necessary */
    bme680_bsec_trigger_measurement( &sensor_settings, sleep );
 80056e4:	4a25      	ldr	r2, [pc, #148]	; (800577c <get_environmental_sensor_measurement+0x11c>)
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <get_environmental_sensor_measurement+0x118>)
 80056e8:	0011      	movs	r1, r2
 80056ea:	0018      	movs	r0, r3
 80056ec:	f7fe fc33 	bl	8003f56 <bme680_bsec_trigger_measurement>

    /* Read data from last measurement */
    num_bsec_inputs = 0;
 80056f0:	4b23      	ldr	r3, [pc, #140]	; (8005780 <get_environmental_sensor_measurement+0x120>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
    bme680_bsec_read_data(time_stamp, bsec_inputs, &num_bsec_inputs, sensor_settings.process_data);
 80056f6:	4b20      	ldr	r3, [pc, #128]	; (8005778 <get_environmental_sensor_measurement+0x118>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	001c      	movs	r4, r3
 80056fc:	4b20      	ldr	r3, [pc, #128]	; (8005780 <get_environmental_sensor_measurement+0x120>)
 80056fe:	4a21      	ldr	r2, [pc, #132]	; (8005784 <get_environmental_sensor_measurement+0x124>)
 8005700:	6a38      	ldr	r0, [r7, #32]
 8005702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005704:	9400      	str	r4, [sp, #0]
 8005706:	f7fe fc2f 	bl	8003f68 <bme680_bsec_read_data>

    /* Time to invoke BSEC to perform the actual processing */
    bme680_bsec_process_data(bsec_inputs, num_bsec_inputs, output_ready);
 800570a:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <get_environmental_sensor_measurement+0x120>)
 800570c:	7819      	ldrb	r1, [r3, #0]
 800570e:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <get_environmental_sensor_measurement+0x128>)
 8005710:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <get_environmental_sensor_measurement+0x124>)
 8005712:	0018      	movs	r0, r3
 8005714:	f7fe fc33 	bl	8003f7e <bme680_bsec_process_data>

    /* Increment sample counter */
    n_samples++;
 8005718:	4b1c      	ldr	r3, [pc, #112]	; (800578c <get_environmental_sensor_measurement+0x12c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	4b1b      	ldr	r3, [pc, #108]	; (800578c <get_environmental_sensor_measurement+0x12c>)
 8005720:	601a      	str	r2, [r3, #0]

    /* Retrieve and store state if the passed save_intvl */
    if ( n_samples >= BME680_SAVE_STATE_INTERVAL )  {
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <get_environmental_sensor_measurement+0x12c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b04      	cmp	r3, #4
 8005728:	d921      	bls.n	800576e <get_environmental_sensor_measurement+0x10e>
        bsec_status = bsec_get_state(0, bsec_state, sizeof(bsec_state), work_buffer, sizeof(work_buffer), &bsec_state_len);
 800572a:	2517      	movs	r5, #23
 800572c:	2318      	movs	r3, #24
 800572e:	18fb      	adds	r3, r7, r3
 8005730:	195c      	adds	r4, r3, r5
 8005732:	4a17      	ldr	r2, [pc, #92]	; (8005790 <get_environmental_sensor_measurement+0x130>)
 8005734:	4917      	ldr	r1, [pc, #92]	; (8005794 <get_environmental_sensor_measurement+0x134>)
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <get_environmental_sensor_measurement+0x138>)
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	238b      	movs	r3, #139	; 0x8b
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	0013      	movs	r3, r2
 8005740:	228b      	movs	r2, #139	; 0x8b
 8005742:	2000      	movs	r0, #0
 8005744:	f7fe fc26 	bl	8003f94 <bsec_get_state>
 8005748:	0003      	movs	r3, r0
 800574a:	7023      	strb	r3, [r4, #0]
        if (bsec_status == BSEC_OK)  {
 800574c:	2318      	movs	r3, #24
 800574e:	18fb      	adds	r3, r7, r3
 8005750:	195b      	adds	r3, r3, r5
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	b25b      	sxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <get_environmental_sensor_measurement+0x108>
            state_save( bsec_state, bsec_state_len );
 800575a:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <get_environmental_sensor_measurement+0x138>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <get_environmental_sensor_measurement+0x134>)
 8005760:	0011      	movs	r1, r2
 8005762:	0018      	movs	r0, r3
 8005764:	f000 f89a 	bl	800589c <state_save>
        }
        n_samples = 0;
 8005768:	4b08      	ldr	r3, [pc, #32]	; (800578c <get_environmental_sensor_measurement+0x12c>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
    }
    /*
     * Data was stored in callback function as argument to bme680_bsec_process_data
     */
    return true;
 800576e:	2301      	movs	r3, #1
}
 8005770:	0018      	movs	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	b00d      	add	sp, #52	; 0x34
 8005776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005778:	20000fe0 	.word	0x20000fe0
 800577c:	0800579d 	.word	0x0800579d
 8005780:	200005d0 	.word	0x200005d0
 8005784:	20000ff8 	.word	0x20000ff8
 8005788:	080057b5 	.word	0x080057b5
 800578c:	200005d8 	.word	0x200005d8
 8005790:	20000f50 	.word	0x20000f50
 8005794:	20001078 	.word	0x20001078
 8005798:	200005d4 	.word	0x200005d4

0800579c <sleep>:
 * @param[in]       t_ms    time in milliseconds
 *
 * @return          none
 */
void sleep(uint32_t t_ms)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
    // ...
    // Please insert system specific function sleep or delay for t_ms milliseconds
    // ...
    HAL_Delay( t_ms );
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	0018      	movs	r0, r3
 80057a8:	f002 f8fc 	bl	80079a4 <HAL_Delay>
}
 80057ac:	46c0      	nop			; (mov r8, r8)
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b002      	add	sp, #8
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <output_ready>:
 * @return          none
 */
void output_ready(int64_t timestamp, float iaq, uint8_t iaq_accuracy, float temperature, float humidity,
     float pressure, float raw_temperature, float raw_humidity, float gas, bsec_library_return_t bsec_status,
     float static_iaq, float co2_equivalent, float breath_voc_equivalent)
{
 80057b4:	b590      	push	{r4, r7, lr}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60b8      	str	r0, [r7, #8]
 80057bc:	60f9      	str	r1, [r7, #12]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	001a      	movs	r2, r3
 80057c2:	1cfb      	adds	r3, r7, #3
 80057c4:	701a      	strb	r2, [r3, #0]
    float altitude;

    // ...
    // Please insert system specific code to further process or display the BSEC outputs
    // ...
    altitude = 44330 * (1 - (pow( ( pressure / 1013.25 ), (1/5.255) ) ) );
 80057c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c8:	f7fd fc20 	bl	800300c <__aeabi_f2d>
 80057cc:	2200      	movs	r2, #0
 80057ce:	4b2c      	ldr	r3, [pc, #176]	; (8005880 <output_ready+0xcc>)
 80057d0:	f7fc f9cc 	bl	8001b6c <__aeabi_ddiv>
 80057d4:	0003      	movs	r3, r0
 80057d6:	000c      	movs	r4, r1
 80057d8:	0018      	movs	r0, r3
 80057da:	0021      	movs	r1, r4
 80057dc:	4b29      	ldr	r3, [pc, #164]	; (8005884 <output_ready+0xd0>)
 80057de:	4c2a      	ldr	r4, [pc, #168]	; (8005888 <output_ready+0xd4>)
 80057e0:	001a      	movs	r2, r3
 80057e2:	0023      	movs	r3, r4
 80057e4:	f007 ffe0 	bl	800d7a8 <pow>
 80057e8:	0003      	movs	r3, r0
 80057ea:	000c      	movs	r4, r1
 80057ec:	001a      	movs	r2, r3
 80057ee:	0023      	movs	r3, r4
 80057f0:	2000      	movs	r0, #0
 80057f2:	4926      	ldr	r1, [pc, #152]	; (800588c <output_ready+0xd8>)
 80057f4:	f7fd f836 	bl	8002864 <__aeabi_dsub>
 80057f8:	0003      	movs	r3, r0
 80057fa:	000c      	movs	r4, r1
 80057fc:	0018      	movs	r0, r3
 80057fe:	0021      	movs	r1, r4
 8005800:	2200      	movs	r2, #0
 8005802:	4b23      	ldr	r3, [pc, #140]	; (8005890 <output_ready+0xdc>)
 8005804:	f7fc fdbc 	bl	8002380 <__aeabi_dmul>
 8005808:	0003      	movs	r3, r0
 800580a:	000c      	movs	r4, r1
 800580c:	0018      	movs	r0, r3
 800580e:	0021      	movs	r1, r4
 8005810:	f7fd fc4e 	bl	80030b0 <__aeabi_d2f>
 8005814:	1c03      	adds	r3, r0, #0
 8005816:	617b      	str	r3, [r7, #20]
            bsec_status, iaq, (uint16_t) iaq_accuracy, temperature, humidity, pressure, altitude, raw_temperature, raw_humidity, gas, co2_equivalent, breath_voc_equivalent );
            */
    /*
     * Update current settings
     */
    hs.current_iaq = iaq;
 8005818:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <output_ready+0xe0>)
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
    hs.current_iaq_accuracy = iaq_accuracy;
 800581e:	1cfb      	adds	r3, r7, #3
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b299      	uxth	r1, r3
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <output_ready+0xe0>)
 8005826:	2244      	movs	r2, #68	; 0x44
 8005828:	5299      	strh	r1, [r3, r2]
    hs.current_temperature = temperature;
 800582a:	4b1a      	ldr	r3, [pc, #104]	; (8005894 <output_ready+0xe0>)
 800582c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582e:	649a      	str	r2, [r3, #72]	; 0x48
    hs.current_humidity = humidity;
 8005830:	4b18      	ldr	r3, [pc, #96]	; (8005894 <output_ready+0xe0>)
 8005832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005834:	64da      	str	r2, [r3, #76]	; 0x4c
    hs.current_pressure = pressure;
 8005836:	4b17      	ldr	r3, [pc, #92]	; (8005894 <output_ready+0xe0>)
 8005838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583a:	651a      	str	r2, [r3, #80]	; 0x50
    hs.current_altitude = altitude;
 800583c:	4b15      	ldr	r3, [pc, #84]	; (8005894 <output_ready+0xe0>)
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	655a      	str	r2, [r3, #84]	; 0x54
    hs.current_raw_temperature = raw_temperature;
 8005842:	4b14      	ldr	r3, [pc, #80]	; (8005894 <output_ready+0xe0>)
 8005844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005846:	659a      	str	r2, [r3, #88]	; 0x58
    hs.current_raw_humidity = raw_humidity;
 8005848:	4b12      	ldr	r3, [pc, #72]	; (8005894 <output_ready+0xe0>)
 800584a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800584c:	65da      	str	r2, [r3, #92]	; 0x5c
    hs.current_gas = gas;
 800584e:	4b11      	ldr	r3, [pc, #68]	; (8005894 <output_ready+0xe0>)
 8005850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005852:	661a      	str	r2, [r3, #96]	; 0x60
    hs.current_co2_equivalent = co2_equivalent;
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <output_ready+0xe0>)
 8005856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005858:	665a      	str	r2, [r3, #100]	; 0x64
    hs.current_breath_voc_equivalent = breath_voc_equivalent;
 800585a:	4b0e      	ldr	r3, [pc, #56]	; (8005894 <output_ready+0xe0>)
 800585c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800585e:	669a      	str	r2, [r3, #104]	; 0x68
    hs.valid_environmental_sensor = true;
 8005860:	4a0c      	ldr	r2, [pc, #48]	; (8005894 <output_ready+0xe0>)
 8005862:	23a1      	movs	r3, #161	; 0xa1
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	18d3      	adds	r3, r2, r3
 8005868:	785a      	ldrb	r2, [r3, #1]
 800586a:	2110      	movs	r1, #16
 800586c:	430a      	orrs	r2, r1
 800586e:	705a      	strb	r2, [r3, #1]
    bms680_ready_request_pending = false;   // Got the data its good
 8005870:	4b09      	ldr	r3, [pc, #36]	; (8005898 <output_ready+0xe4>)
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	46bd      	mov	sp, r7
 800587a:	b007      	add	sp, #28
 800587c:	bd90      	pop	{r4, r7, pc}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	408faa00 	.word	0x408faa00
 8005884:	ccd9456c 	.word	0xccd9456c
 8005888:	3fc85b95 	.word	0x3fc85b95
 800588c:	3ff00000 	.word	0x3ff00000
 8005890:	40e5a540 	.word	0x40e5a540
 8005894:	200006f8 	.word	0x200006f8
 8005898:	20000004 	.word	0x20000004

0800589c <state_save>:
 * @param[in]       length          length of the state string to be stored
 *
 * @return          none
 */
void state_save(const uint8_t *state_buffer, uint32_t length)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
    // ...
    // Save the string some form of non-volatile memory, if possible.
    // ...
    printf( "BME680 Requesting: %lu Bytes for State storage\r\n", length );
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <state_save+0x44>)
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f006 fff9 	bl	800c8a4 <iprintf>
    if( length > BSEC_MAX_PROPERTY_BLOB_SIZE )
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	23e3      	movs	r3, #227	; 0xe3
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d80d      	bhi.n	80058d8 <state_save+0x3c>
        return;

    memcpy( &hs.bsec_state, state_buffer, length );
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <state_save+0x48>)
 80058c2:	0018      	movs	r0, r3
 80058c4:	f006 ffdc 	bl	800c880 <memcpy>
    hs.bsec_state_valid = true;
 80058c8:	4a07      	ldr	r2, [pc, #28]	; (80058e8 <state_save+0x4c>)
 80058ca:	23a1      	movs	r3, #161	; 0xa1
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	5cd1      	ldrb	r1, [r2, r3]
 80058d0:	2002      	movs	r0, #2
 80058d2:	4301      	orrs	r1, r0
 80058d4:	54d1      	strb	r1, [r2, r3]
 80058d6:	e000      	b.n	80058da <state_save+0x3e>
        return;
 80058d8:	46c0      	nop			; (mov r8, r8)
}
 80058da:	46bd      	mov	sp, r7
 80058dc:	b002      	add	sp, #8
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	0800ea90 	.word	0x0800ea90
 80058e4:	20000874 	.word	0x20000874
 80058e8:	200006f8 	.word	0x200006f8

080058ec <i2c_init_lux>:
    };
/******************************************************
 *               Function Definitions
 ******************************************************/
void i2c_init_lux(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
    if( init_LTR_329ALS() == true ) {
 80058f0:	f7fe ffdc 	bl	80048ac <init_LTR_329ALS>
 80058f4:	1e03      	subs	r3, r0, #0
 80058f6:	d00a      	beq.n	800590e <i2c_init_lux+0x22>
        PRINTF( "Lux Initialized\r\n" );
        i2c_devices[ I2C_LTR_329ALS ].enabled = true;
 80058f8:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <i2c_init_lux+0x44>)
 80058fa:	7f1a      	ldrb	r2, [r3, #28]
 80058fc:	2102      	movs	r1, #2
 80058fe:	430a      	orrs	r2, r1
 8005900:	771a      	strb	r2, [r3, #28]
        i2c_devices[ I2C_LTR_329ALS ].sensor_error = false;
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <i2c_init_lux+0x44>)
 8005904:	7f1a      	ldrb	r2, [r3, #28]
 8005906:	2101      	movs	r1, #1
 8005908:	438a      	bics	r2, r1
 800590a:	771a      	strb	r2, [r3, #28]
        PRINTF( "Failed to initialize Lux sensor\r\n" );
        reset_i2c( I2C_LTR_329ALS );
        i2c_devices[ I2C_LTR_329ALS ].enabled = false;
        i2c_devices[ I2C_LTR_329ALS ].sensor_error = true;
    }
}
 800590c:	e00c      	b.n	8005928 <i2c_init_lux+0x3c>
        reset_i2c( I2C_LTR_329ALS );
 800590e:	2000      	movs	r0, #0
 8005910:	f000 fc48 	bl	80061a4 <reset_i2c>
        i2c_devices[ I2C_LTR_329ALS ].enabled = false;
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <i2c_init_lux+0x44>)
 8005916:	7f1a      	ldrb	r2, [r3, #28]
 8005918:	2102      	movs	r1, #2
 800591a:	438a      	bics	r2, r1
 800591c:	771a      	strb	r2, [r3, #28]
        i2c_devices[ I2C_LTR_329ALS ].sensor_error = true;
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <i2c_init_lux+0x44>)
 8005920:	7f1a      	ldrb	r2, [r3, #28]
 8005922:	2101      	movs	r1, #1
 8005924:	430a      	orrs	r2, r1
 8005926:	771a      	strb	r2, [r3, #28]
}
 8005928:	46c0      	nop			; (mov r8, r8)
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	200005e8 	.word	0x200005e8

08005934 <i2c_init_temp_humidity>:
void i2c_init_temp_humidity(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
    if( init_Si7020() == true ) {
 8005938:	f7ff fc82 	bl	8005240 <init_Si7020>
 800593c:	1e03      	subs	r3, r0, #0
 800593e:	d00c      	beq.n	800595a <i2c_init_temp_humidity+0x26>
        PRINTF( "Temp Initialized\r\n" );
        i2c_devices[ I2C_Si7020 ].enabled = true;
 8005940:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <i2c_init_temp_humidity+0x4c>)
 8005942:	223c      	movs	r2, #60	; 0x3c
 8005944:	5c99      	ldrb	r1, [r3, r2]
 8005946:	2002      	movs	r0, #2
 8005948:	4301      	orrs	r1, r0
 800594a:	5499      	strb	r1, [r3, r2]
        i2c_devices[ I2C_Si7020 ].sensor_error = false;
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <i2c_init_temp_humidity+0x4c>)
 800594e:	223c      	movs	r2, #60	; 0x3c
 8005950:	5c99      	ldrb	r1, [r3, r2]
 8005952:	2001      	movs	r0, #1
 8005954:	4381      	bics	r1, r0
 8005956:	5499      	strb	r1, [r3, r2]
        PRINTF( "Failed to initialize Temp sensor\r\n" );
        reset_i2c( I2C_Si7020 );
        i2c_devices[ I2C_Si7020 ].enabled = false;
        i2c_devices[ I2C_Si7020 ].sensor_error = true;
    }
}
 8005958:	e00e      	b.n	8005978 <i2c_init_temp_humidity+0x44>
        reset_i2c( I2C_Si7020 );
 800595a:	2001      	movs	r0, #1
 800595c:	f000 fc22 	bl	80061a4 <reset_i2c>
        i2c_devices[ I2C_Si7020 ].enabled = false;
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <i2c_init_temp_humidity+0x4c>)
 8005962:	223c      	movs	r2, #60	; 0x3c
 8005964:	5c99      	ldrb	r1, [r3, r2]
 8005966:	2002      	movs	r0, #2
 8005968:	4381      	bics	r1, r0
 800596a:	5499      	strb	r1, [r3, r2]
        i2c_devices[ I2C_Si7020 ].sensor_error = true;
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <i2c_init_temp_humidity+0x4c>)
 800596e:	223c      	movs	r2, #60	; 0x3c
 8005970:	5c99      	ldrb	r1, [r3, r2]
 8005972:	2001      	movs	r0, #1
 8005974:	4301      	orrs	r1, r0
 8005976:	5499      	strb	r1, [r3, r2]
}
 8005978:	46c0      	nop			; (mov r8, r8)
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	200005e8 	.word	0x200005e8

08005984 <i2c_init_CO2_voc>:
void i2c_init_CO2_voc(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
    if( init_SGP30() == true )  {
 8005988:	f000 fc92 	bl	80062b0 <init_SGP30>
 800598c:	1e03      	subs	r3, r0, #0
 800598e:	d00c      	beq.n	80059aa <i2c_init_CO2_voc+0x26>
        PRINTF( "CO2/VOC Initialized\r\n" );
        i2c_devices[ I2C_SGP30 ].enabled = true;
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <i2c_init_CO2_voc+0x4c>)
 8005992:	225c      	movs	r2, #92	; 0x5c
 8005994:	5c99      	ldrb	r1, [r3, r2]
 8005996:	2002      	movs	r0, #2
 8005998:	4301      	orrs	r1, r0
 800599a:	5499      	strb	r1, [r3, r2]
        i2c_devices[ I2C_SGP30 ].sensor_error = false;
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <i2c_init_CO2_voc+0x4c>)
 800599e:	225c      	movs	r2, #92	; 0x5c
 80059a0:	5c99      	ldrb	r1, [r3, r2]
 80059a2:	2001      	movs	r0, #1
 80059a4:	4381      	bics	r1, r0
 80059a6:	5499      	strb	r1, [r3, r2]
        PRINTF( "Failed to initialize CO2/VOC sensor\r\n" );
        reset_i2c( I2C_SGP30 );
        i2c_devices[ I2C_SGP30 ].enabled = false;
        i2c_devices[ I2C_SGP30 ].sensor_error = true;
    }
}
 80059a8:	e00e      	b.n	80059c8 <i2c_init_CO2_voc+0x44>
        reset_i2c( I2C_SGP30 );
 80059aa:	2002      	movs	r0, #2
 80059ac:	f000 fbfa 	bl	80061a4 <reset_i2c>
        i2c_devices[ I2C_SGP30 ].enabled = false;
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <i2c_init_CO2_voc+0x4c>)
 80059b2:	225c      	movs	r2, #92	; 0x5c
 80059b4:	5c99      	ldrb	r1, [r3, r2]
 80059b6:	2002      	movs	r0, #2
 80059b8:	4381      	bics	r1, r0
 80059ba:	5499      	strb	r1, [r3, r2]
        i2c_devices[ I2C_SGP30 ].sensor_error = true;
 80059bc:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <i2c_init_CO2_voc+0x4c>)
 80059be:	225c      	movs	r2, #92	; 0x5c
 80059c0:	5c99      	ldrb	r1, [r3, r2]
 80059c2:	2001      	movs	r0, #1
 80059c4:	4301      	orrs	r1, r0
 80059c6:	5499      	strb	r1, [r3, r2]
}
 80059c8:	46c0      	nop			; (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	200005e8 	.word	0x200005e8

080059d4 <i2c_init_particulate_matter>:
void i2c_init_particulate_matter(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
    if( init_SPS30() == true )  {
 80059d8:	f000 fd9a 	bl	8006510 <init_SPS30>
 80059dc:	1e03      	subs	r3, r0, #0
 80059de:	d00c      	beq.n	80059fa <i2c_init_particulate_matter+0x26>
        PRINTF( "Particulate Matter Sensor Initialized\r\n" );
        i2c_devices[ I2C_SPS30 ].enabled = true;
 80059e0:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <i2c_init_particulate_matter+0x4c>)
 80059e2:	227c      	movs	r2, #124	; 0x7c
 80059e4:	5c99      	ldrb	r1, [r3, r2]
 80059e6:	2002      	movs	r0, #2
 80059e8:	4301      	orrs	r1, r0
 80059ea:	5499      	strb	r1, [r3, r2]
        i2c_devices[ I2C_SPS30 ].sensor_error = false;
 80059ec:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <i2c_init_particulate_matter+0x4c>)
 80059ee:	227c      	movs	r2, #124	; 0x7c
 80059f0:	5c99      	ldrb	r1, [r3, r2]
 80059f2:	2001      	movs	r0, #1
 80059f4:	4381      	bics	r1, r0
 80059f6:	5499      	strb	r1, [r3, r2]
        PRINTF( "Failed to initialize Particulate Matter sensor\r\n" );
        reset_i2c( I2C_SPS30 );
        i2c_devices[ I2C_SPS30 ].enabled = false;
        i2c_devices[ I2C_SPS30 ].sensor_error = true;
    }
}
 80059f8:	e00e      	b.n	8005a18 <i2c_init_particulate_matter+0x44>
        reset_i2c( I2C_SPS30 );
 80059fa:	2003      	movs	r0, #3
 80059fc:	f000 fbd2 	bl	80061a4 <reset_i2c>
        i2c_devices[ I2C_SPS30 ].enabled = false;
 8005a00:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <i2c_init_particulate_matter+0x4c>)
 8005a02:	227c      	movs	r2, #124	; 0x7c
 8005a04:	5c99      	ldrb	r1, [r3, r2]
 8005a06:	2002      	movs	r0, #2
 8005a08:	4381      	bics	r1, r0
 8005a0a:	5499      	strb	r1, [r3, r2]
        i2c_devices[ I2C_SPS30 ].sensor_error = true;
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <i2c_init_particulate_matter+0x4c>)
 8005a0e:	227c      	movs	r2, #124	; 0x7c
 8005a10:	5c99      	ldrb	r1, [r3, r2]
 8005a12:	2001      	movs	r0, #1
 8005a14:	4301      	orrs	r1, r0
 8005a16:	5499      	strb	r1, [r3, r2]
}
 8005a18:	46c0      	nop			; (mov r8, r8)
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	200005e8 	.word	0x200005e8

08005a24 <i2c_init_enviromental>:
void i2c_init_enviromental(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
    if( init_bme680() == true )  {
 8005a28:	f7fe fa84 	bl	8003f34 <init_bme680>
 8005a2c:	1e03      	subs	r3, r0, #0
 8005a2e:	d00c      	beq.n	8005a4a <i2c_init_enviromental+0x26>
        PRINTF( "Environmental Sensor Initialized\r\n" );
        i2c_devices[ I2C_BME680 ].enabled = true;
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <i2c_init_enviromental+0x4c>)
 8005a32:	229c      	movs	r2, #156	; 0x9c
 8005a34:	5c99      	ldrb	r1, [r3, r2]
 8005a36:	2002      	movs	r0, #2
 8005a38:	4301      	orrs	r1, r0
 8005a3a:	5499      	strb	r1, [r3, r2]
        i2c_devices[ I2C_BME680 ].sensor_error = false;
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <i2c_init_enviromental+0x4c>)
 8005a3e:	229c      	movs	r2, #156	; 0x9c
 8005a40:	5c99      	ldrb	r1, [r3, r2]
 8005a42:	2001      	movs	r0, #1
 8005a44:	4381      	bics	r1, r0
 8005a46:	5499      	strb	r1, [r3, r2]
        PRINTF( "Failed to initialize Environmental sensor\r\n" );
        reset_i2c( I2C_BME680 );
        i2c_devices[ I2C_BME680 ].enabled = false;
        i2c_devices[ I2C_BME680 ].sensor_error = true;
    }
}
 8005a48:	e00e      	b.n	8005a68 <i2c_init_enviromental+0x44>
        reset_i2c( I2C_BME680 );
 8005a4a:	2004      	movs	r0, #4
 8005a4c:	f000 fbaa 	bl	80061a4 <reset_i2c>
        i2c_devices[ I2C_BME680 ].enabled = false;
 8005a50:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <i2c_init_enviromental+0x4c>)
 8005a52:	229c      	movs	r2, #156	; 0x9c
 8005a54:	5c99      	ldrb	r1, [r3, r2]
 8005a56:	2002      	movs	r0, #2
 8005a58:	4381      	bics	r1, r0
 8005a5a:	5499      	strb	r1, [r3, r2]
        i2c_devices[ I2C_BME680 ].sensor_error = true;
 8005a5c:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <i2c_init_enviromental+0x4c>)
 8005a5e:	229c      	movs	r2, #156	; 0x9c
 8005a60:	5c99      	ldrb	r1, [r3, r2]
 8005a62:	2001      	movs	r0, #1
 8005a64:	4301      	orrs	r1, r0
 8005a66:	5499      	strb	r1, [r3, r2]
}
 8005a68:	46c0      	nop			; (mov r8, r8)
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	200005e8 	.word	0x200005e8

08005a74 <i2c_init>:
  * @brief  i2c_init - i2c functions are called on timer based devices - setup a mutex to prevent reentantancy issues.
  * @param  None
  * @retval : None
  */
void i2c_init(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
    i2c_init_lux();
 8005a78:	f7ff ff38 	bl	80058ec <i2c_init_lux>
    i2c_init_temp_humidity();
 8005a7c:	f7ff ff5a 	bl	8005934 <i2c_init_temp_humidity>
    i2c_init_CO2_voc();
 8005a80:	f7ff ff80 	bl	8005984 <i2c_init_CO2_voc>
    i2c_init_particulate_matter();
 8005a84:	f7ff ffa6 	bl	80059d4 <i2c_init_particulate_matter>
    i2c_init_enviromental();
 8005a88:	f7ff ffcc 	bl	8005a24 <i2c_init_enviromental>

    printf( "I2C Devices Initialized\r\n" );
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <i2c_init+0x28>)
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f006 ff82 	bl	800c998 <puts>
}
 8005a94:	46c0      	nop			; (mov r8, r8)
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	0800ebc8 	.word	0x0800ebc8

08005aa0 <i2c_manager_init>:
  * @brief  Initialize the i2c peripherals system
  * @param  None
  * @retval : None
  */
void i2c_manager_init( uint32_t current_time )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

    /*
     * Start clean
     */
    memset( &i2c_devices, 0x00, sizeof( i2c_devices ) );
 8005aa8:	4b67      	ldr	r3, [pc, #412]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005aaa:	22a0      	movs	r2, #160	; 0xa0
 8005aac:	2100      	movs	r1, #0
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f006 feef 	bl	800c892 <memset>
     * Setup each device
     */
    /*
     * LTR_329ALS, - Lux sensor
     */
    i2c_devices[ I2C_LTR_329ALS ].device = &hi2c2;
 8005ab4:	4b64      	ldr	r3, [pc, #400]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005ab6:	4a65      	ldr	r2, [pc, #404]	; (8005c4c <i2c_manager_init+0x1ac>)
 8005ab8:	601a      	str	r2, [r3, #0]
    i2c_devices[ I2C_LTR_329ALS ].address = I2C_LTR_329ALS_ADDRESS;    // External LUX Sensor LTR-329ALS
 8005aba:	4b63      	ldr	r3, [pc, #396]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005abc:	2229      	movs	r2, #41	; 0x29
 8005abe:	711a      	strb	r2, [r3, #4]

    i2c_devices[ I2C_LTR_329ALS ].samples = 0;
 8005ac0:	4b61      	ldr	r3, [pc, #388]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	609a      	str	r2, [r3, #8]
    i2c_devices[ I2C_LTR_329ALS ].sample_rate = DEFAULT_SAMPLE_RATE;
 8005ac6:	4b60      	ldr	r3, [pc, #384]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005ac8:	22fa      	movs	r2, #250	; 0xfa
 8005aca:	0092      	lsls	r2, r2, #2
 8005acc:	60da      	str	r2, [r3, #12]
    i2c_devices[ I2C_LTR_329ALS ].last_sample_time = current_time - ( SAMPLE_STAGGER * 2 );
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3b91      	subs	r3, #145	; 0x91
 8005ad2:	3bff      	subs	r3, #255	; 0xff
 8005ad4:	001a      	movs	r2, r3
 8005ad6:	4b5c      	ldr	r3, [pc, #368]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005ad8:	611a      	str	r2, [r3, #16]
    i2c_devices[ I2C_LTR_329ALS ].sensor_delay = 0;         // Ready to read immediately
 8005ada:	4b5b      	ldr	r3, [pc, #364]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	615a      	str	r2, [r3, #20]
    i2c_devices[ I2C_LTR_329ALS ].error_count = 0;
 8005ae0:	4b59      	ldr	r3, [pc, #356]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	619a      	str	r2, [r3, #24]
    i2c_devices[ I2C_LTR_329ALS ].sensor_error = false;
 8005ae6:	4b58      	ldr	r3, [pc, #352]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005ae8:	7f1a      	ldrb	r2, [r3, #28]
 8005aea:	2101      	movs	r1, #1
 8005aec:	438a      	bics	r2, r1
 8005aee:	771a      	strb	r2, [r3, #28]
    i2c_devices[ I2C_LTR_329ALS ].enabled = true;
 8005af0:	4b55      	ldr	r3, [pc, #340]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005af2:	7f1a      	ldrb	r2, [r3, #28]
 8005af4:	2102      	movs	r1, #2
 8005af6:	430a      	orrs	r2, r1
 8005af8:	771a      	strb	r2, [r3, #28]
    /*
     * Si7020 - Temperature Humidity Sensor
     */
    i2c_devices[ I2C_Si7020 ].device = &hi2c2;
 8005afa:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005afc:	4a53      	ldr	r2, [pc, #332]	; (8005c4c <i2c_manager_init+0x1ac>)
 8005afe:	621a      	str	r2, [r3, #32]
    i2c_devices[ I2C_Si7020 ].address = I2C_Si7020_ADDRESS;        // Default for on board Temp / Humidity Sensor Si7020
 8005b00:	4b51      	ldr	r3, [pc, #324]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b02:	2224      	movs	r2, #36	; 0x24
 8005b04:	2140      	movs	r1, #64	; 0x40
 8005b06:	5499      	strb	r1, [r3, r2]

    i2c_devices[ I2C_Si7020 ].samples = 0;
 8005b08:	4b4f      	ldr	r3, [pc, #316]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	629a      	str	r2, [r3, #40]	; 0x28
    i2c_devices[ I2C_Si7020 ].sample_rate = DEFAULT_SAMPLE_RATE;
 8005b0e:	4b4e      	ldr	r3, [pc, #312]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b10:	22fa      	movs	r2, #250	; 0xfa
 8005b12:	0092      	lsls	r2, r2, #2
 8005b14:	62da      	str	r2, [r3, #44]	; 0x2c
    i2c_devices[ I2C_Si7020 ].last_sample_time = current_time - ( SAMPLE_STAGGER * 3 );
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a4d      	ldr	r2, [pc, #308]	; (8005c50 <i2c_manager_init+0x1b0>)
 8005b1a:	189a      	adds	r2, r3, r2
 8005b1c:	4b4a      	ldr	r3, [pc, #296]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
    i2c_devices[ I2C_Si7020 ].sensor_delay = 0;             // Ready to read immediately
 8005b20:	4b49      	ldr	r3, [pc, #292]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	635a      	str	r2, [r3, #52]	; 0x34
    i2c_devices[ I2C_Si7020 ].error_count = 0;
 8005b26:	4b48      	ldr	r3, [pc, #288]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
    i2c_devices[ I2C_Si7020 ].sensor_error = false;
 8005b2c:	4b46      	ldr	r3, [pc, #280]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b2e:	223c      	movs	r2, #60	; 0x3c
 8005b30:	5c99      	ldrb	r1, [r3, r2]
 8005b32:	2001      	movs	r0, #1
 8005b34:	4381      	bics	r1, r0
 8005b36:	5499      	strb	r1, [r3, r2]
    i2c_devices[ I2C_Si7020 ].enabled = true;
 8005b38:	4b43      	ldr	r3, [pc, #268]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b3a:	223c      	movs	r2, #60	; 0x3c
 8005b3c:	5c99      	ldrb	r1, [r3, r2]
 8005b3e:	2002      	movs	r0, #2
 8005b40:	4301      	orrs	r1, r0
 8005b42:	5499      	strb	r1, [r3, r2]
    /*
     * SGP30 - CO2 / VOC Sensor
     */
    i2c_devices[ I2C_SGP30 ].device = &hi2c2;
 8005b44:	4b40      	ldr	r3, [pc, #256]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b46:	4a41      	ldr	r2, [pc, #260]	; (8005c4c <i2c_manager_init+0x1ac>)
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40
    i2c_devices[ I2C_SGP30 ].address = I2C_SGP30_ADDRESS;
 8005b4a:	4b3f      	ldr	r3, [pc, #252]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b4c:	2244      	movs	r2, #68	; 0x44
 8005b4e:	2158      	movs	r1, #88	; 0x58
 8005b50:	5499      	strb	r1, [r3, r2]

    i2c_devices[ I2C_SGP30 ].samples = 0;
 8005b52:	4b3d      	ldr	r3, [pc, #244]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	649a      	str	r2, [r3, #72]	; 0x48
    i2c_devices[ I2C_SGP30 ].sample_rate = DEFAULT_SAMPLE_RATE;
 8005b58:	4b3b      	ldr	r3, [pc, #236]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b5a:	22fa      	movs	r2, #250	; 0xfa
 8005b5c:	0092      	lsls	r2, r2, #2
 8005b5e:	64da      	str	r2, [r3, #76]	; 0x4c
    i2c_devices[ I2C_SGP30 ].last_sample_time = current_time - ( SAMPLE_STAGGER * 4 );
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a3c      	ldr	r2, [pc, #240]	; (8005c54 <i2c_manager_init+0x1b4>)
 8005b64:	189a      	adds	r2, r3, r2
 8005b66:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b68:	651a      	str	r2, [r3, #80]	; 0x50
    i2c_devices[ I2C_SGP30 ].sensor_delay = 0;             // Ready to read immediately
 8005b6a:	4b37      	ldr	r3, [pc, #220]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54
    i2c_devices[ I2C_SGP30 ].error_count = 0;
 8005b70:	4b35      	ldr	r3, [pc, #212]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	659a      	str	r2, [r3, #88]	; 0x58
    i2c_devices[ I2C_SGP30 ].sensor_error = false;
 8005b76:	4b34      	ldr	r3, [pc, #208]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b78:	225c      	movs	r2, #92	; 0x5c
 8005b7a:	5c99      	ldrb	r1, [r3, r2]
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	4381      	bics	r1, r0
 8005b80:	5499      	strb	r1, [r3, r2]
    i2c_devices[ I2C_SGP30 ].enabled = true;
 8005b82:	4b31      	ldr	r3, [pc, #196]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b84:	225c      	movs	r2, #92	; 0x5c
 8005b86:	5c99      	ldrb	r1, [r3, r2]
 8005b88:	2002      	movs	r0, #2
 8005b8a:	4301      	orrs	r1, r0
 8005b8c:	5499      	strb	r1, [r3, r2]
    /*
     * SPS30 - Particulate Matter
     */
    i2c_devices[ I2C_SPS30 ].device = &hi2c2;
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b90:	4a2e      	ldr	r2, [pc, #184]	; (8005c4c <i2c_manager_init+0x1ac>)
 8005b92:	661a      	str	r2, [r3, #96]	; 0x60
    i2c_devices[ I2C_SPS30 ].address = I2C_SPS30_ADDRESS;
 8005b94:	4b2c      	ldr	r3, [pc, #176]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b96:	2264      	movs	r2, #100	; 0x64
 8005b98:	2169      	movs	r1, #105	; 0x69
 8005b9a:	5499      	strb	r1, [r3, r2]

    i2c_devices[ I2C_SPS30 ].samples = 0;
 8005b9c:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	669a      	str	r2, [r3, #104]	; 0x68
    i2c_devices[ I2C_SPS30 ].sample_rate = DEFAULT_SAMPLE_RATE;
 8005ba2:	4b29      	ldr	r3, [pc, #164]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005ba4:	22fa      	movs	r2, #250	; 0xfa
 8005ba6:	0092      	lsls	r2, r2, #2
 8005ba8:	66da      	str	r2, [r3, #108]	; 0x6c
    i2c_devices[ I2C_SPS30 ].last_sample_time = current_time - ( SAMPLE_STAGGER * 5 );
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2a      	ldr	r2, [pc, #168]	; (8005c58 <i2c_manager_init+0x1b8>)
 8005bae:	189a      	adds	r2, r3, r2
 8005bb0:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005bb2:	671a      	str	r2, [r3, #112]	; 0x70
    i2c_devices[ I2C_SPS30 ].sensor_delay = 1000;
 8005bb4:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005bb6:	22fa      	movs	r2, #250	; 0xfa
 8005bb8:	0092      	lsls	r2, r2, #2
 8005bba:	675a      	str	r2, [r3, #116]	; 0x74
    i2c_devices[ I2C_SPS30 ].error_count = 0;
 8005bbc:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	679a      	str	r2, [r3, #120]	; 0x78
    i2c_devices[ I2C_SPS30 ].sensor_error = false;
 8005bc2:	4b21      	ldr	r3, [pc, #132]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005bc4:	227c      	movs	r2, #124	; 0x7c
 8005bc6:	5c99      	ldrb	r1, [r3, r2]
 8005bc8:	2001      	movs	r0, #1
 8005bca:	4381      	bics	r1, r0
 8005bcc:	5499      	strb	r1, [r3, r2]
    i2c_devices[ I2C_SPS30 ].enabled = true;
 8005bce:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005bd0:	227c      	movs	r2, #124	; 0x7c
 8005bd2:	5c99      	ldrb	r1, [r3, r2]
 8005bd4:	2002      	movs	r0, #2
 8005bd6:	4301      	orrs	r1, r0
 8005bd8:	5499      	strb	r1, [r3, r2]
    /*
     * BME680 - Environmental Sensor
     */
    i2c_devices[ I2C_BME680 ].device = &hi2c2;
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <i2c_manager_init+0x1ac>)
 8005be0:	505a      	str	r2, [r3, r1]
    i2c_devices[ I2C_BME680 ].address = I2C_BME680_ADDRESS;
 8005be2:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005be4:	2284      	movs	r2, #132	; 0x84
 8005be6:	2176      	movs	r1, #118	; 0x76
 8005be8:	5499      	strb	r1, [r3, r2]

    i2c_devices[ I2C_BME680 ].samples = 0;
 8005bea:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005bec:	2288      	movs	r2, #136	; 0x88
 8005bee:	2100      	movs	r1, #0
 8005bf0:	5099      	str	r1, [r3, r2]
    i2c_devices[ I2C_BME680 ].sample_rate = 3000;
 8005bf2:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005bf4:	228c      	movs	r2, #140	; 0x8c
 8005bf6:	4919      	ldr	r1, [pc, #100]	; (8005c5c <i2c_manager_init+0x1bc>)
 8005bf8:	5099      	str	r1, [r3, r2]
    i2c_devices[ I2C_BME680 ].last_sample_time = current_time - ( SAMPLE_STAGGER * 6 );
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <i2c_manager_init+0x1c0>)
 8005bfe:	189a      	adds	r2, r3, r2
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005c02:	2190      	movs	r1, #144	; 0x90
 8005c04:	505a      	str	r2, [r3, r1]
    i2c_devices[ I2C_BME680 ].sensor_delay = 0;
 8005c06:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005c08:	2294      	movs	r2, #148	; 0x94
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	5099      	str	r1, [r3, r2]
    i2c_devices[ I2C_BME680 ].error_count = 0;
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005c10:	2298      	movs	r2, #152	; 0x98
 8005c12:	2100      	movs	r1, #0
 8005c14:	5099      	str	r1, [r3, r2]
    i2c_devices[ I2C_BME680 ].sensor_error = false;
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005c18:	229c      	movs	r2, #156	; 0x9c
 8005c1a:	5c99      	ldrb	r1, [r3, r2]
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	4381      	bics	r1, r0
 8005c20:	5499      	strb	r1, [r3, r2]
    i2c_devices[ I2C_BME680 ].enabled = true;
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <i2c_manager_init+0x1a8>)
 8005c24:	229c      	movs	r2, #156	; 0x9c
 8005c26:	5c99      	ldrb	r1, [r3, r2]
 8005c28:	2002      	movs	r0, #2
 8005c2a:	4301      	orrs	r1, r0
 8005c2c:	5499      	strb	r1, [r3, r2]
    /*
     * Initialize all sensors now data structures are setup
     */
    i2c_init();
 8005c2e:	f7ff ff21 	bl	8005a74 <i2c_init>
    i2c.error_reset_count = 0;
 8005c32:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <i2c_manager_init+0x1c4>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	805a      	strh	r2, [r3, #2]
    i2c.state = SENSOR_SELECT_INIT;
 8005c38:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <i2c_manager_init+0x1c4>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b002      	add	sp, #8
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	200005e8 	.word	0x200005e8
 8005c4c:	20000c04 	.word	0x20000c04
 8005c50:	fffffda8 	.word	0xfffffda8
 8005c54:	fffffce0 	.word	0xfffffce0
 8005c58:	fffffc18 	.word	0xfffffc18
 8005c5c:	00000bb8 	.word	0x00000bb8
 8005c60:	fffffb50 	.word	0xfffffb50
 8005c64:	200005dc 	.word	0x200005dc

08005c68 <i2c_sensor_process>:

void i2c_sensor_process( uint32_t current_time )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
    return;
#endif
    bool complete;
    uint16_t debug_factor;

    debug_factor = 1;
 8005c70:	230c      	movs	r3, #12
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	2201      	movs	r2, #1
 8005c76:	801a      	strh	r2, [r3, #0]
        debug_factor = 10;
    }
#endif

    do {
        complete = false;
 8005c78:	230f      	movs	r3, #15
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
        switch( i2c.state ) {
 8005c80:	4bbd      	ldr	r3, [pc, #756]	; (8005f78 <i2c_sensor_process+0x310>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b07      	cmp	r3, #7
 8005c86:	d900      	bls.n	8005c8a <i2c_sensor_process+0x22>
 8005c88:	e163      	b.n	8005f52 <i2c_sensor_process+0x2ea>
 8005c8a:	009a      	lsls	r2, r3, #2
 8005c8c:	4bbb      	ldr	r3, [pc, #748]	; (8005f7c <i2c_sensor_process+0x314>)
 8005c8e:	18d3      	adds	r3, r2, r3
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	469f      	mov	pc, r3
            case SENSOR_RESET_I2C :
                i2c_init();
 8005c94:	f7ff feee 	bl	8005a74 <i2c_init>
                i2c.state = SENSOR_SELECT_INIT;
 8005c98:	4bb7      	ldr	r3, [pc, #732]	; (8005f78 <i2c_sensor_process+0x310>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	701a      	strb	r2, [r3, #0]
                break;
 8005c9e:	e15d      	b.n	8005f5c <i2c_sensor_process+0x2f4>
            case SENSOR_SELECT_INIT :
                i2c.device = 0;
 8005ca0:	4bb5      	ldr	r3, [pc, #724]	; (8005f78 <i2c_sensor_process+0x310>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	711a      	strb	r2, [r3, #4]
                i2c.state = SENSOR_SELECT_SENSOR;
 8005ca6:	4bb4      	ldr	r3, [pc, #720]	; (8005f78 <i2c_sensor_process+0x310>)
 8005ca8:	2202      	movs	r2, #2
 8005caa:	701a      	strb	r2, [r3, #0]
                break;
 8005cac:	e156      	b.n	8005f5c <i2c_sensor_process+0x2f4>
            case SENSOR_SELECT_SENSOR :
                if( ( i2c_devices[ i2c.device ].enabled == true ) && ( i2c_devices[ i2c.device ].sample_rate != 0 ) &&
 8005cae:	4bb2      	ldr	r3, [pc, #712]	; (8005f78 <i2c_sensor_process+0x310>)
 8005cb0:	791b      	ldrb	r3, [r3, #4]
 8005cb2:	4ab3      	ldr	r2, [pc, #716]	; (8005f80 <i2c_sensor_process+0x318>)
 8005cb4:	2118      	movs	r1, #24
 8005cb6:	015b      	lsls	r3, r3, #5
 8005cb8:	18d3      	adds	r3, r2, r3
 8005cba:	185b      	adds	r3, r3, r1
 8005cbc:	791b      	ldrb	r3, [r3, #4]
 8005cbe:	079b      	lsls	r3, r3, #30
 8005cc0:	0fdb      	lsrs	r3, r3, #31
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d12e      	bne.n	8005d26 <i2c_sensor_process+0xbe>
 8005cc8:	4bab      	ldr	r3, [pc, #684]	; (8005f78 <i2c_sensor_process+0x310>)
 8005cca:	791b      	ldrb	r3, [r3, #4]
 8005ccc:	4aac      	ldr	r2, [pc, #688]	; (8005f80 <i2c_sensor_process+0x318>)
 8005cce:	015b      	lsls	r3, r3, #5
 8005cd0:	18d3      	adds	r3, r2, r3
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d025      	beq.n	8005d26 <i2c_sensor_process+0xbe>
                        ( imx_is_later( current_time, i2c_devices[ i2c.device ].last_sample_time +
 8005cda:	4ba7      	ldr	r3, [pc, #668]	; (8005f78 <i2c_sensor_process+0x310>)
 8005cdc:	791b      	ldrb	r3, [r3, #4]
 8005cde:	4aa8      	ldr	r2, [pc, #672]	; (8005f80 <i2c_sensor_process+0x318>)
 8005ce0:	015b      	lsls	r3, r3, #5
 8005ce2:	18d3      	adds	r3, r2, r3
 8005ce4:	3310      	adds	r3, #16
 8005ce6:	681a      	ldr	r2, [r3, #0]
                        ( i2c_devices[ i2c.device ].sample_rate * debug_factor ) ) == true)  ) {
 8005ce8:	4ba3      	ldr	r3, [pc, #652]	; (8005f78 <i2c_sensor_process+0x310>)
 8005cea:	791b      	ldrb	r3, [r3, #4]
 8005cec:	49a4      	ldr	r1, [pc, #656]	; (8005f80 <i2c_sensor_process+0x318>)
 8005cee:	015b      	lsls	r3, r3, #5
 8005cf0:	18cb      	adds	r3, r1, r3
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	210c      	movs	r1, #12
 8005cf8:	1879      	adds	r1, r7, r1
 8005cfa:	8809      	ldrh	r1, [r1, #0]
 8005cfc:	434b      	muls	r3, r1
                        ( imx_is_later( current_time, i2c_devices[ i2c.device ].last_sample_time +
 8005cfe:	18d2      	adds	r2, r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	0011      	movs	r1, r2
 8005d04:	0018      	movs	r0, r3
 8005d06:	f001 fd70 	bl	80077ea <imx_is_later>
 8005d0a:	1e03      	subs	r3, r0, #0
                if( ( i2c_devices[ i2c.device ].enabled == true ) && ( i2c_devices[ i2c.device ].sample_rate != 0 ) &&
 8005d0c:	d00b      	beq.n	8005d26 <i2c_sensor_process+0xbe>
                    /*
                     * Process this device
                     */
                    i2c_devices[ i2c.device ].last_sample_time = current_time;
 8005d0e:	4b9a      	ldr	r3, [pc, #616]	; (8005f78 <i2c_sensor_process+0x310>)
 8005d10:	791b      	ldrb	r3, [r3, #4]
 8005d12:	4a9b      	ldr	r2, [pc, #620]	; (8005f80 <i2c_sensor_process+0x318>)
 8005d14:	015b      	lsls	r3, r3, #5
 8005d16:	18d3      	adds	r3, r2, r3
 8005d18:	3310      	adds	r3, #16
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
                    i2c.state = SENSOR_REQUEST;
 8005d1e:	4b96      	ldr	r3, [pc, #600]	; (8005f78 <i2c_sensor_process+0x310>)
 8005d20:	2203      	movs	r2, #3
 8005d22:	701a      	strb	r2, [r3, #0]
                } else
                    i2c.state = SENSOR_NEXT;
                break;
 8005d24:	e11a      	b.n	8005f5c <i2c_sensor_process+0x2f4>
                    i2c.state = SENSOR_NEXT;
 8005d26:	4b94      	ldr	r3, [pc, #592]	; (8005f78 <i2c_sensor_process+0x310>)
 8005d28:	2206      	movs	r2, #6
 8005d2a:	701a      	strb	r2, [r3, #0]
                break;
 8005d2c:	e116      	b.n	8005f5c <i2c_sensor_process+0x2f4>
            case SENSOR_REQUEST :
                i2c_devices[ i2c.device ].samples += 1;
 8005d2e:	4b92      	ldr	r3, [pc, #584]	; (8005f78 <i2c_sensor_process+0x310>)
 8005d30:	791b      	ldrb	r3, [r3, #4]
 8005d32:	4a93      	ldr	r2, [pc, #588]	; (8005f80 <i2c_sensor_process+0x318>)
 8005d34:	015b      	lsls	r3, r3, #5
 8005d36:	18d3      	adds	r3, r2, r3
 8005d38:	3308      	adds	r3, #8
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a8e      	ldr	r2, [pc, #568]	; (8005f78 <i2c_sensor_process+0x310>)
 8005d3e:	7912      	ldrb	r2, [r2, #4]
 8005d40:	0010      	movs	r0, r2
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	498e      	ldr	r1, [pc, #568]	; (8005f80 <i2c_sensor_process+0x318>)
 8005d46:	0143      	lsls	r3, r0, #5
 8005d48:	18cb      	adds	r3, r1, r3
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	601a      	str	r2, [r3, #0]
                PRINTF( "Sensor Request, Sensor: %u\r\n", i2c.device );
                switch( i2c.device ) {
 8005d4e:	4b8a      	ldr	r3, [pc, #552]	; (8005f78 <i2c_sensor_process+0x310>)
 8005d50:	791b      	ldrb	r3, [r3, #4]
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d900      	bls.n	8005d58 <i2c_sensor_process+0xf0>
 8005d56:	e06d      	b.n	8005e34 <i2c_sensor_process+0x1cc>
 8005d58:	009a      	lsls	r2, r3, #2
 8005d5a:	4b8a      	ldr	r3, [pc, #552]	; (8005f84 <i2c_sensor_process+0x31c>)
 8005d5c:	18d3      	adds	r3, r2, r3
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	469f      	mov	pc, r3
                    case I2C_LTR_329ALS :
                        if( update_lux() == true ){
 8005d62:	f7fe fd31 	bl	80047c8 <update_lux>
 8005d66:	1e03      	subs	r3, r0, #0
 8005d68:	d005      	beq.n	8005d76 <i2c_sensor_process+0x10e>
                            i2c_devices[ I2C_LTR_329ALS ].sensor_error = false;
 8005d6a:	4b85      	ldr	r3, [pc, #532]	; (8005f80 <i2c_sensor_process+0x318>)
 8005d6c:	7f1a      	ldrb	r2, [r3, #28]
 8005d6e:	2101      	movs	r1, #1
 8005d70:	438a      	bics	r2, r1
 8005d72:	771a      	strb	r2, [r3, #28]
 8005d74:	e004      	b.n	8005d80 <i2c_sensor_process+0x118>
                        } else
                            i2c_devices[ I2C_LTR_329ALS ].sensor_error = true;
 8005d76:	4b82      	ldr	r3, [pc, #520]	; (8005f80 <i2c_sensor_process+0x318>)
 8005d78:	7f1a      	ldrb	r2, [r3, #28]
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	771a      	strb	r2, [r3, #28]
                        i2c.state = SENSOR_REQUEST_COMPLETE;
 8005d80:	4b7d      	ldr	r3, [pc, #500]	; (8005f78 <i2c_sensor_process+0x310>)
 8005d82:	2207      	movs	r2, #7
 8005d84:	701a      	strb	r2, [r3, #0]
                        break;
 8005d86:	e059      	b.n	8005e3c <i2c_sensor_process+0x1d4>
                    case I2C_Si7020 :
                        if( update_temp_humidity() == true ) {
 8005d88:	f7fe fd62 	bl	8004850 <update_temp_humidity>
 8005d8c:	1e03      	subs	r3, r0, #0
 8005d8e:	d006      	beq.n	8005d9e <i2c_sensor_process+0x136>
                            /*
                             * Reset any sensor error
                             */
                            i2c_devices[ I2C_Si7020 ].sensor_error = false;
 8005d90:	4b7b      	ldr	r3, [pc, #492]	; (8005f80 <i2c_sensor_process+0x318>)
 8005d92:	223c      	movs	r2, #60	; 0x3c
 8005d94:	5c99      	ldrb	r1, [r3, r2]
 8005d96:	2001      	movs	r0, #1
 8005d98:	4381      	bics	r1, r0
 8005d9a:	5499      	strb	r1, [r3, r2]
 8005d9c:	e005      	b.n	8005daa <i2c_sensor_process+0x142>
                        } else {
                            i2c_devices[ I2C_Si7020 ].sensor_error = true;
 8005d9e:	4b78      	ldr	r3, [pc, #480]	; (8005f80 <i2c_sensor_process+0x318>)
 8005da0:	223c      	movs	r2, #60	; 0x3c
 8005da2:	5c99      	ldrb	r1, [r3, r2]
 8005da4:	2001      	movs	r0, #1
 8005da6:	4301      	orrs	r1, r0
 8005da8:	5499      	strb	r1, [r3, r2]
                        }
                        i2c.state = SENSOR_REQUEST_COMPLETE;
 8005daa:	4b73      	ldr	r3, [pc, #460]	; (8005f78 <i2c_sensor_process+0x310>)
 8005dac:	2207      	movs	r2, #7
 8005dae:	701a      	strb	r2, [r3, #0]
                        break;
 8005db0:	e044      	b.n	8005e3c <i2c_sensor_process+0x1d4>
                    case I2C_SGP30 :
                        if( update_co2_voc() == true ) {
 8005db2:	f7fe f8ff 	bl	8003fb4 <update_co2_voc>
 8005db6:	1e03      	subs	r3, r0, #0
 8005db8:	d006      	beq.n	8005dc8 <i2c_sensor_process+0x160>
                            /*
                             * Reset any sensor error
                             */
                            i2c_devices[ I2C_SGP30 ].sensor_error = false;
 8005dba:	4b71      	ldr	r3, [pc, #452]	; (8005f80 <i2c_sensor_process+0x318>)
 8005dbc:	225c      	movs	r2, #92	; 0x5c
 8005dbe:	5c99      	ldrb	r1, [r3, r2]
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	4381      	bics	r1, r0
 8005dc4:	5499      	strb	r1, [r3, r2]
 8005dc6:	e005      	b.n	8005dd4 <i2c_sensor_process+0x16c>
                        } else {
                            i2c_devices[ I2C_SGP30 ].sensor_error = true;
 8005dc8:	4b6d      	ldr	r3, [pc, #436]	; (8005f80 <i2c_sensor_process+0x318>)
 8005dca:	225c      	movs	r2, #92	; 0x5c
 8005dcc:	5c99      	ldrb	r1, [r3, r2]
 8005dce:	2001      	movs	r0, #1
 8005dd0:	4301      	orrs	r1, r0
 8005dd2:	5499      	strb	r1, [r3, r2]
                        }
                        i2c.state = SENSOR_REQUEST_COMPLETE;
 8005dd4:	4b68      	ldr	r3, [pc, #416]	; (8005f78 <i2c_sensor_process+0x310>)
 8005dd6:	2207      	movs	r2, #7
 8005dd8:	701a      	strb	r2, [r3, #0]
                        break;
 8005dda:	e02f      	b.n	8005e3c <i2c_sensor_process+0x1d4>
                    case I2C_SPS30 :
                        if( start_particulate_matter_measurement() == true ) {
 8005ddc:	f000 fc46 	bl	800666c <start_particulate_matter_measurement>
 8005de0:	1e03      	subs	r3, r0, #0
 8005de2:	d006      	beq.n	8005df2 <i2c_sensor_process+0x18a>
                            /*
                             * Reset any sensor error
                             */
                            i2c_devices[ I2C_SPS30 ].sensor_error = false;
 8005de4:	4b66      	ldr	r3, [pc, #408]	; (8005f80 <i2c_sensor_process+0x318>)
 8005de6:	227c      	movs	r2, #124	; 0x7c
 8005de8:	5c99      	ldrb	r1, [r3, r2]
 8005dea:	2001      	movs	r0, #1
 8005dec:	4381      	bics	r1, r0
 8005dee:	5499      	strb	r1, [r3, r2]
 8005df0:	e005      	b.n	8005dfe <i2c_sensor_process+0x196>
                        } else {
                            i2c_devices[ I2C_SPS30 ].sensor_error = true;
 8005df2:	4b63      	ldr	r3, [pc, #396]	; (8005f80 <i2c_sensor_process+0x318>)
 8005df4:	227c      	movs	r2, #124	; 0x7c
 8005df6:	5c99      	ldrb	r1, [r3, r2]
 8005df8:	2001      	movs	r0, #1
 8005dfa:	4301      	orrs	r1, r0
 8005dfc:	5499      	strb	r1, [r3, r2]
                        }
                        i2c.state = SENSOR_WAIT_SENSOR_PROCESSING_TIME;
 8005dfe:	4b5e      	ldr	r3, [pc, #376]	; (8005f78 <i2c_sensor_process+0x310>)
 8005e00:	2204      	movs	r2, #4
 8005e02:	701a      	strb	r2, [r3, #0]
                        break;
 8005e04:	e01a      	b.n	8005e3c <i2c_sensor_process+0x1d4>
                    case I2C_BME680 :
                        if( get_environmental_sensor_measurement( current_time ) == true ) {
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f7ff fc29 	bl	8005660 <get_environmental_sensor_measurement>
 8005e0e:	1e03      	subs	r3, r0, #0
 8005e10:	d006      	beq.n	8005e20 <i2c_sensor_process+0x1b8>
                            /*
                             * Reset any sensor error
                             */
                            i2c_devices[ I2C_BME680 ].sensor_error = false;
 8005e12:	4b5b      	ldr	r3, [pc, #364]	; (8005f80 <i2c_sensor_process+0x318>)
 8005e14:	229c      	movs	r2, #156	; 0x9c
 8005e16:	5c99      	ldrb	r1, [r3, r2]
 8005e18:	2001      	movs	r0, #1
 8005e1a:	4381      	bics	r1, r0
 8005e1c:	5499      	strb	r1, [r3, r2]
 8005e1e:	e005      	b.n	8005e2c <i2c_sensor_process+0x1c4>
                        } else {
                            i2c_devices[ I2C_BME680 ].sensor_error = true;
 8005e20:	4b57      	ldr	r3, [pc, #348]	; (8005f80 <i2c_sensor_process+0x318>)
 8005e22:	229c      	movs	r2, #156	; 0x9c
 8005e24:	5c99      	ldrb	r1, [r3, r2]
 8005e26:	2001      	movs	r0, #1
 8005e28:	4301      	orrs	r1, r0
 8005e2a:	5499      	strb	r1, [r3, r2]
                        }
                        i2c.state = SENSOR_WAIT_SENSOR_PROCESSING_TIME;
 8005e2c:	4b52      	ldr	r3, [pc, #328]	; (8005f78 <i2c_sensor_process+0x310>)
 8005e2e:	2204      	movs	r2, #4
 8005e30:	701a      	strb	r2, [r3, #0]
                        break;
 8005e32:	e003      	b.n	8005e3c <i2c_sensor_process+0x1d4>

                    default :   // Something wrong here
                        i2c.state = SENSOR_SELECT_INIT;
 8005e34:	4b50      	ldr	r3, [pc, #320]	; (8005f78 <i2c_sensor_process+0x310>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
                        break;
 8005e3a:	46c0      	nop			; (mov r8, r8)
                }
                break;
 8005e3c:	e08e      	b.n	8005f5c <i2c_sensor_process+0x2f4>
            case SENSOR_WAIT_SENSOR_PROCESSING_TIME :
                if( imx_is_later( current_time, i2c.write_time + i2c_devices[ i2c.device ].sensor_delay ) )
 8005e3e:	4b4e      	ldr	r3, [pc, #312]	; (8005f78 <i2c_sensor_process+0x310>)
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	4b4d      	ldr	r3, [pc, #308]	; (8005f78 <i2c_sensor_process+0x310>)
 8005e44:	791b      	ldrb	r3, [r3, #4]
 8005e46:	494e      	ldr	r1, [pc, #312]	; (8005f80 <i2c_sensor_process+0x318>)
 8005e48:	015b      	lsls	r3, r3, #5
 8005e4a:	18cb      	adds	r3, r1, r3
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	18d2      	adds	r2, r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	0011      	movs	r1, r2
 8005e56:	0018      	movs	r0, r3
 8005e58:	f001 fcc7 	bl	80077ea <imx_is_later>
 8005e5c:	1e03      	subs	r3, r0, #0
 8005e5e:	d100      	bne.n	8005e62 <i2c_sensor_process+0x1fa>
 8005e60:	e07b      	b.n	8005f5a <i2c_sensor_process+0x2f2>
                    i2c.state = SENSOR_READ;
 8005e62:	4b45      	ldr	r3, [pc, #276]	; (8005f78 <i2c_sensor_process+0x310>)
 8005e64:	2205      	movs	r2, #5
 8005e66:	701a      	strb	r2, [r3, #0]
                break;
 8005e68:	e077      	b.n	8005f5a <i2c_sensor_process+0x2f2>
            case SENSOR_READ :
                switch( i2c.device ) {
 8005e6a:	4b43      	ldr	r3, [pc, #268]	; (8005f78 <i2c_sensor_process+0x310>)
 8005e6c:	791b      	ldrb	r3, [r3, #4]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d114      	bne.n	8005e9c <i2c_sensor_process+0x234>
                    case I2C_SPS30 :
                        if( update_particulate_matter() == true ) {
 8005e72:	f000 fc0f 	bl	8006694 <update_particulate_matter>
 8005e76:	1e03      	subs	r3, r0, #0
 8005e78:	d006      	beq.n	8005e88 <i2c_sensor_process+0x220>
                            i2c_devices[ I2C_SPS30 ].sensor_error = false;
 8005e7a:	4b41      	ldr	r3, [pc, #260]	; (8005f80 <i2c_sensor_process+0x318>)
 8005e7c:	227c      	movs	r2, #124	; 0x7c
 8005e7e:	5c99      	ldrb	r1, [r3, r2]
 8005e80:	2001      	movs	r0, #1
 8005e82:	4381      	bics	r1, r0
 8005e84:	5499      	strb	r1, [r3, r2]
 8005e86:	e005      	b.n	8005e94 <i2c_sensor_process+0x22c>
                        } else {
                            i2c_devices[ I2C_SPS30 ].sensor_error = true;
 8005e88:	4b3d      	ldr	r3, [pc, #244]	; (8005f80 <i2c_sensor_process+0x318>)
 8005e8a:	227c      	movs	r2, #124	; 0x7c
 8005e8c:	5c99      	ldrb	r1, [r3, r2]
 8005e8e:	2001      	movs	r0, #1
 8005e90:	4301      	orrs	r1, r0
 8005e92:	5499      	strb	r1, [r3, r2]
                        }
                        i2c.state = SENSOR_REQUEST_COMPLETE;
 8005e94:	4b38      	ldr	r3, [pc, #224]	; (8005f78 <i2c_sensor_process+0x310>)
 8005e96:	2207      	movs	r2, #7
 8005e98:	701a      	strb	r2, [r3, #0]
                        break;
 8005e9a:	e003      	b.n	8005ea4 <i2c_sensor_process+0x23c>
                default:
                        i2c.state = SENSOR_REQUEST_COMPLETE;
 8005e9c:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <i2c_sensor_process+0x310>)
 8005e9e:	2207      	movs	r2, #7
 8005ea0:	701a      	strb	r2, [r3, #0]
                        break;
 8005ea2:	46c0      	nop			; (mov r8, r8)
                }
                break;
 8005ea4:	e05a      	b.n	8005f5c <i2c_sensor_process+0x2f4>
            case SENSOR_REQUEST_COMPLETE :
                i2c_devices[ i2c.device ].last_sample_time = current_time;
 8005ea6:	4b34      	ldr	r3, [pc, #208]	; (8005f78 <i2c_sensor_process+0x310>)
 8005ea8:	791b      	ldrb	r3, [r3, #4]
 8005eaa:	4a35      	ldr	r2, [pc, #212]	; (8005f80 <i2c_sensor_process+0x318>)
 8005eac:	015b      	lsls	r3, r3, #5
 8005eae:	18d3      	adds	r3, r2, r3
 8005eb0:	3310      	adds	r3, #16
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	601a      	str	r2, [r3, #0]
                i2c.state = SENSOR_NEXT;
 8005eb6:	4b30      	ldr	r3, [pc, #192]	; (8005f78 <i2c_sensor_process+0x310>)
 8005eb8:	2206      	movs	r2, #6
 8005eba:	701a      	strb	r2, [r3, #0]
                break;
 8005ebc:	e04e      	b.n	8005f5c <i2c_sensor_process+0x2f4>
            case SENSOR_NEXT :
                i2c.device += 1;
 8005ebe:	4b2e      	ldr	r3, [pc, #184]	; (8005f78 <i2c_sensor_process+0x310>)
 8005ec0:	791b      	ldrb	r3, [r3, #4]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	4b2c      	ldr	r3, [pc, #176]	; (8005f78 <i2c_sensor_process+0x310>)
 8005ec8:	711a      	strb	r2, [r3, #4]
                if( i2c.device >= NO_I2C_DEVICES ) {
 8005eca:	4b2b      	ldr	r3, [pc, #172]	; (8005f78 <i2c_sensor_process+0x310>)
 8005ecc:	791b      	ldrb	r3, [r3, #4]
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d937      	bls.n	8005f42 <i2c_sensor_process+0x2da>
                    /*
                     * See if we have any sensors in error condition and try to re initialize them
                     */
                    i2c.error_reset_count += 1;
 8005ed2:	4b29      	ldr	r3, [pc, #164]	; (8005f78 <i2c_sensor_process+0x310>)
 8005ed4:	885b      	ldrh	r3, [r3, #2]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	4b27      	ldr	r3, [pc, #156]	; (8005f78 <i2c_sensor_process+0x310>)
 8005edc:	805a      	strh	r2, [r3, #2]
                    if( i2c.error_reset_count >= ERROR_RESET_MAX ) {
 8005ede:	4b26      	ldr	r3, [pc, #152]	; (8005f78 <i2c_sensor_process+0x310>)
 8005ee0:	885b      	ldrh	r3, [r3, #2]
 8005ee2:	4a29      	ldr	r2, [pc, #164]	; (8005f88 <i2c_sensor_process+0x320>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d929      	bls.n	8005f3c <i2c_sensor_process+0x2d4>
                        if( i2c_devices[ I2C_LTR_329ALS ].sensor_error == true ) {
 8005ee8:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <i2c_sensor_process+0x318>)
 8005eea:	7f1b      	ldrb	r3, [r3, #28]
 8005eec:	2201      	movs	r2, #1
 8005eee:	4013      	ands	r3, r2
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <i2c_sensor_process+0x292>
                            i2c_init_lux();
 8005ef6:	f7ff fcf9 	bl	80058ec <i2c_init_lux>
                        }
                        if( i2c_devices[ I2C_Si7020 ].sensor_error == true ) {
 8005efa:	4b21      	ldr	r3, [pc, #132]	; (8005f80 <i2c_sensor_process+0x318>)
 8005efc:	223c      	movs	r2, #60	; 0x3c
 8005efe:	5c9b      	ldrb	r3, [r3, r2]
 8005f00:	2201      	movs	r2, #1
 8005f02:	4013      	ands	r3, r2
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <i2c_sensor_process+0x2a6>
                            i2c_init_temp_humidity();
 8005f0a:	f7ff fd13 	bl	8005934 <i2c_init_temp_humidity>
                        }
                        if( i2c_devices[ I2C_SGP30 ].sensor_error == true ) {
 8005f0e:	4b1c      	ldr	r3, [pc, #112]	; (8005f80 <i2c_sensor_process+0x318>)
 8005f10:	225c      	movs	r2, #92	; 0x5c
 8005f12:	5c9b      	ldrb	r3, [r3, r2]
 8005f14:	2201      	movs	r2, #1
 8005f16:	4013      	ands	r3, r2
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <i2c_sensor_process+0x2ba>
                            i2c_init_CO2_voc();
 8005f1e:	f7ff fd31 	bl	8005984 <i2c_init_CO2_voc>
                        }
                        if( i2c_devices[ I2C_SPS30 ].sensor_error == true ) {
 8005f22:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <i2c_sensor_process+0x318>)
 8005f24:	227c      	movs	r2, #124	; 0x7c
 8005f26:	5c9b      	ldrb	r3, [r3, r2]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <i2c_sensor_process+0x2ce>
                            i2c_init_particulate_matter();
 8005f32:	f7ff fd4f 	bl	80059d4 <i2c_init_particulate_matter>
                        /*
                        if( i2c_devices[ I2C_BME680 ].sensor_error == true ) {
                            i2c_init_enviromental();
                        }
                        */
                        i2c.error_reset_count = 0;
 8005f36:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <i2c_sensor_process+0x310>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	805a      	strh	r2, [r3, #2]
                    }

                    i2c.device = 0;
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <i2c_sensor_process+0x310>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	711a      	strb	r2, [r3, #4]
                }
                i2c.state = SENSOR_SELECT_SENSOR;
 8005f42:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <i2c_sensor_process+0x310>)
 8005f44:	2202      	movs	r2, #2
 8005f46:	701a      	strb	r2, [r3, #0]
                complete = true;
 8005f48:	230f      	movs	r3, #15
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
                break;
 8005f50:	e004      	b.n	8005f5c <i2c_sensor_process+0x2f4>
            default :
                i2c.state = SENSOR_RESET_I2C;
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <i2c_sensor_process+0x310>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
                break;
 8005f58:	e000      	b.n	8005f5c <i2c_sensor_process+0x2f4>
                break;
 8005f5a:	46c0      	nop			; (mov r8, r8)
        }

    } while( complete == false );
 8005f5c:	230f      	movs	r3, #15
 8005f5e:	18fb      	adds	r3, r7, r3
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2201      	movs	r2, #1
 8005f64:	4053      	eors	r3, r2
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d000      	beq.n	8005f6e <i2c_sensor_process+0x306>
 8005f6c:	e684      	b.n	8005c78 <i2c_sensor_process+0x10>

}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b004      	add	sp, #16
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	200005dc 	.word	0x200005dc
 8005f7c:	0800f228 	.word	0x0800f228
 8005f80:	200005e8 	.word	0x200005e8
 8005f84:	0800f248 	.word	0x0800f248
 8005f88:	000003e7 	.word	0x000003e7

08005f8c <i2c_write_read_sensor>:
  * @param  Perphieral ID, Buffer, count
  * @retval : true/false based on succcess
  */

bool i2c_write_read_sensor( i2c_devices_t i2c_device, uint8_t *tx_data, uint16_t tx_count, uint8_t *rx_data, uint16_t rx_count )
{
 8005f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8e:	b089      	sub	sp, #36	; 0x24
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	0011      	movs	r1, r2
 8005f96:	607b      	str	r3, [r7, #4]
 8005f98:	240f      	movs	r4, #15
 8005f9a:	193b      	adds	r3, r7, r4
 8005f9c:	1c02      	adds	r2, r0, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	18fb      	adds	r3, r7, r3
 8005fa4:	1c0a      	adds	r2, r1, #0
 8005fa6:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef i2c_result;

    if( i2c_device >= NO_I2C_DEVICES)
 8005fa8:	193b      	adds	r3, r7, r4
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d901      	bls.n	8005fb4 <i2c_write_read_sensor+0x28>
        return false;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e065      	b.n	8006080 <i2c_write_read_sensor+0xf4>

    /*
     * Send the write request out first
     */
    i2c_result = HAL_I2C_Master_Transmit( i2c_devices[ i2c_device ].device, i2c_devices[ i2c_device ].address, tx_data, tx_count, I2C_DEFAULT_TIMEOUT );
 8005fb4:	210f      	movs	r1, #15
 8005fb6:	187b      	adds	r3, r7, r1
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	4b33      	ldr	r3, [pc, #204]	; (8006088 <i2c_write_read_sensor+0xfc>)
 8005fbc:	0152      	lsls	r2, r2, #5
 8005fbe:	58d0      	ldr	r0, [r2, r3]
 8005fc0:	187b      	adds	r3, r7, r1
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	4a30      	ldr	r2, [pc, #192]	; (8006088 <i2c_write_read_sensor+0xfc>)
 8005fc6:	015b      	lsls	r3, r3, #5
 8005fc8:	18d3      	adds	r3, r2, r3
 8005fca:	3304      	adds	r3, #4
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b299      	uxth	r1, r3
 8005fd0:	2617      	movs	r6, #23
 8005fd2:	19bc      	adds	r4, r7, r6
 8005fd4:	230c      	movs	r3, #12
 8005fd6:	18fb      	adds	r3, r7, r3
 8005fd8:	881d      	ldrh	r5, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	230a      	movs	r3, #10
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	002b      	movs	r3, r5
 8005fe2:	f002 fedd 	bl	8008da0 <HAL_I2C_Master_Transmit>
 8005fe6:	0003      	movs	r3, r0
 8005fe8:	7023      	strb	r3, [r4, #0]
    if( i2c_result != HAL_OK ) {
 8005fea:	19bb      	adds	r3, r7, r6
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d011      	beq.n	8006016 <i2c_write_read_sensor+0x8a>
        i2c_devices[ i2c_device ].error_count += 1;
 8005ff2:	210f      	movs	r1, #15
 8005ff4:	187b      	adds	r3, r7, r1
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	4a23      	ldr	r2, [pc, #140]	; (8006088 <i2c_write_read_sensor+0xfc>)
 8005ffa:	015b      	lsls	r3, r3, #5
 8005ffc:	18d3      	adds	r3, r2, r3
 8005ffe:	3318      	adds	r3, #24
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	187b      	adds	r3, r7, r1
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	3201      	adds	r2, #1
 8006008:	491f      	ldr	r1, [pc, #124]	; (8006088 <i2c_write_read_sensor+0xfc>)
 800600a:	015b      	lsls	r3, r3, #5
 800600c:	18cb      	adds	r3, r1, r3
 800600e:	3318      	adds	r3, #24
 8006010:	601a      	str	r2, [r3, #0]
        PRINTF( "Failed to transmit message, for i2c device %u: result: %u\r\n", i2c_device, i2c_result );
        return false;
 8006012:	2300      	movs	r3, #0
 8006014:	e034      	b.n	8006080 <i2c_write_read_sensor+0xf4>
    }
    /*
     * Get read response
     */
    i2c_result = HAL_I2C_Master_Receive( i2c_devices[ i2c_device ].device, i2c_devices[ i2c_device ].address, rx_data, rx_count, I2C_DEFAULT_TIMEOUT );
 8006016:	210f      	movs	r1, #15
 8006018:	187b      	adds	r3, r7, r1
 800601a:	781a      	ldrb	r2, [r3, #0]
 800601c:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <i2c_write_read_sensor+0xfc>)
 800601e:	0152      	lsls	r2, r2, #5
 8006020:	58d0      	ldr	r0, [r2, r3]
 8006022:	187b      	adds	r3, r7, r1
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	4a18      	ldr	r2, [pc, #96]	; (8006088 <i2c_write_read_sensor+0xfc>)
 8006028:	015b      	lsls	r3, r3, #5
 800602a:	18d3      	adds	r3, r2, r3
 800602c:	3304      	adds	r3, #4
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	b299      	uxth	r1, r3
 8006032:	2617      	movs	r6, #23
 8006034:	19bc      	adds	r4, r7, r6
 8006036:	2328      	movs	r3, #40	; 0x28
 8006038:	2208      	movs	r2, #8
 800603a:	4694      	mov	ip, r2
 800603c:	44bc      	add	ip, r7
 800603e:	4463      	add	r3, ip
 8006040:	881d      	ldrh	r5, [r3, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	230a      	movs	r3, #10
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	002b      	movs	r3, r5
 800604a:	f002 ffb1 	bl	8008fb0 <HAL_I2C_Master_Receive>
 800604e:	0003      	movs	r3, r0
 8006050:	7023      	strb	r3, [r4, #0]
    if( i2c_result != HAL_OK ) {
 8006052:	19bb      	adds	r3, r7, r6
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d011      	beq.n	800607e <i2c_write_read_sensor+0xf2>
        i2c_devices[ i2c_device ].error_count += 1;
 800605a:	210f      	movs	r1, #15
 800605c:	187b      	adds	r3, r7, r1
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	4a09      	ldr	r2, [pc, #36]	; (8006088 <i2c_write_read_sensor+0xfc>)
 8006062:	015b      	lsls	r3, r3, #5
 8006064:	18d3      	adds	r3, r2, r3
 8006066:	3318      	adds	r3, #24
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	187b      	adds	r3, r7, r1
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	3201      	adds	r2, #1
 8006070:	4905      	ldr	r1, [pc, #20]	; (8006088 <i2c_write_read_sensor+0xfc>)
 8006072:	015b      	lsls	r3, r3, #5
 8006074:	18cb      	adds	r3, r1, r3
 8006076:	3318      	adds	r3, #24
 8006078:	601a      	str	r2, [r3, #0]
        PRINTF( "Failed to receive message, for i2c device %u: result: %u\r\n", i2c_device, i2c_result );
        return false;
 800607a:	2300      	movs	r3, #0
 800607c:	e000      	b.n	8006080 <i2c_write_read_sensor+0xf4>
    }

    return true;
 800607e:	2301      	movs	r3, #1
}
 8006080:	0018      	movs	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	b007      	add	sp, #28
 8006086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006088:	200005e8 	.word	0x200005e8

0800608c <i2c_write_sensor>:
  * @param  Perphieral ID, Buffer, count
  * @retval : true/false based on succcess
  */

bool i2c_write_sensor( i2c_devices_t i2c_device, uint8_t *tx_data, uint16_t tx_count )
{
 800608c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608e:	b087      	sub	sp, #28
 8006090:	af02      	add	r7, sp, #8
 8006092:	6039      	str	r1, [r7, #0]
 8006094:	0011      	movs	r1, r2
 8006096:	1dfb      	adds	r3, r7, #7
 8006098:	1c02      	adds	r2, r0, #0
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	1d3b      	adds	r3, r7, #4
 800609e:	1c0a      	adds	r2, r1, #0
 80060a0:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef i2c_result;

    if( i2c_device >= NO_I2C_DEVICES)
 80060a2:	1dfb      	adds	r3, r7, #7
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d901      	bls.n	80060ae <i2c_write_sensor+0x22>
        return false;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e02e      	b.n	800610c <i2c_write_sensor+0x80>

    /*
     * Send the write request
     */
    i2c_result = HAL_I2C_Master_Transmit( i2c_devices[ i2c_device ].device, i2c_devices[ i2c_device ].address, tx_data, tx_count, I2C_DEFAULT_TIMEOUT );
 80060ae:	1dfb      	adds	r3, r7, #7
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	4b18      	ldr	r3, [pc, #96]	; (8006114 <i2c_write_sensor+0x88>)
 80060b4:	0152      	lsls	r2, r2, #5
 80060b6:	58d0      	ldr	r0, [r2, r3]
 80060b8:	1dfb      	adds	r3, r7, #7
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	4a15      	ldr	r2, [pc, #84]	; (8006114 <i2c_write_sensor+0x88>)
 80060be:	015b      	lsls	r3, r3, #5
 80060c0:	18d3      	adds	r3, r2, r3
 80060c2:	3304      	adds	r3, #4
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	b299      	uxth	r1, r3
 80060c8:	260f      	movs	r6, #15
 80060ca:	19bc      	adds	r4, r7, r6
 80060cc:	1d3b      	adds	r3, r7, #4
 80060ce:	881d      	ldrh	r5, [r3, #0]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	230a      	movs	r3, #10
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	002b      	movs	r3, r5
 80060d8:	f002 fe62 	bl	8008da0 <HAL_I2C_Master_Transmit>
 80060dc:	0003      	movs	r3, r0
 80060de:	7023      	strb	r3, [r4, #0]
    if( i2c_result != HAL_OK ) {
 80060e0:	19bb      	adds	r3, r7, r6
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d010      	beq.n	800610a <i2c_write_sensor+0x7e>
        i2c_devices[ i2c_device ].error_count += 1;
 80060e8:	1dfb      	adds	r3, r7, #7
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	4a09      	ldr	r2, [pc, #36]	; (8006114 <i2c_write_sensor+0x88>)
 80060ee:	015b      	lsls	r3, r3, #5
 80060f0:	18d3      	adds	r3, r2, r3
 80060f2:	3318      	adds	r3, #24
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	1dfb      	adds	r3, r7, #7
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	3201      	adds	r2, #1
 80060fc:	4905      	ldr	r1, [pc, #20]	; (8006114 <i2c_write_sensor+0x88>)
 80060fe:	015b      	lsls	r3, r3, #5
 8006100:	18cb      	adds	r3, r1, r3
 8006102:	3318      	adds	r3, #24
 8006104:	601a      	str	r2, [r3, #0]
        PRINTF( "Failed to transmit message, for i2c device %u: result: %u\r\n", i2c_device, i2c_result );
        return false;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <i2c_write_sensor+0x80>
    }

    return true;
 800610a:	2301      	movs	r3, #1
}
 800610c:	0018      	movs	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	b005      	add	sp, #20
 8006112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006114:	200005e8 	.word	0x200005e8

08006118 <i2c_read_sensor>:
  * @param  Perphieral ID, Buffer, count
  * @retval : true/false based on succcess
  */

bool i2c_read_sensor( i2c_devices_t i2c_device, uint8_t *rx_data, uint16_t rx_count )
{
 8006118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800611a:	b087      	sub	sp, #28
 800611c:	af02      	add	r7, sp, #8
 800611e:	6039      	str	r1, [r7, #0]
 8006120:	0011      	movs	r1, r2
 8006122:	1dfb      	adds	r3, r7, #7
 8006124:	1c02      	adds	r2, r0, #0
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	1d3b      	adds	r3, r7, #4
 800612a:	1c0a      	adds	r2, r1, #0
 800612c:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef i2c_result;

    if( i2c_device >= NO_I2C_DEVICES)
 800612e:	1dfb      	adds	r3, r7, #7
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b04      	cmp	r3, #4
 8006134:	d901      	bls.n	800613a <i2c_read_sensor+0x22>
        return false;
 8006136:	2300      	movs	r3, #0
 8006138:	e02e      	b.n	8006198 <i2c_read_sensor+0x80>

    /*
     * Send the read request
     */
    i2c_result = HAL_I2C_Master_Receive( i2c_devices[ i2c_device ].device, i2c_devices[ i2c_device ].address, rx_data, rx_count, I2C_DEFAULT_TIMEOUT );
 800613a:	1dfb      	adds	r3, r7, #7
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <i2c_read_sensor+0x88>)
 8006140:	0152      	lsls	r2, r2, #5
 8006142:	58d0      	ldr	r0, [r2, r3]
 8006144:	1dfb      	adds	r3, r7, #7
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	4a15      	ldr	r2, [pc, #84]	; (80061a0 <i2c_read_sensor+0x88>)
 800614a:	015b      	lsls	r3, r3, #5
 800614c:	18d3      	adds	r3, r2, r3
 800614e:	3304      	adds	r3, #4
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	b299      	uxth	r1, r3
 8006154:	260f      	movs	r6, #15
 8006156:	19bc      	adds	r4, r7, r6
 8006158:	1d3b      	adds	r3, r7, #4
 800615a:	881d      	ldrh	r5, [r3, #0]
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	230a      	movs	r3, #10
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	002b      	movs	r3, r5
 8006164:	f002 ff24 	bl	8008fb0 <HAL_I2C_Master_Receive>
 8006168:	0003      	movs	r3, r0
 800616a:	7023      	strb	r3, [r4, #0]
    if( i2c_result != HAL_OK ) {
 800616c:	19bb      	adds	r3, r7, r6
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d010      	beq.n	8006196 <i2c_read_sensor+0x7e>
        i2c_devices[ i2c_device ].error_count += 1;
 8006174:	1dfb      	adds	r3, r7, #7
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <i2c_read_sensor+0x88>)
 800617a:	015b      	lsls	r3, r3, #5
 800617c:	18d3      	adds	r3, r2, r3
 800617e:	3318      	adds	r3, #24
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	1dfb      	adds	r3, r7, #7
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	3201      	adds	r2, #1
 8006188:	4905      	ldr	r1, [pc, #20]	; (80061a0 <i2c_read_sensor+0x88>)
 800618a:	015b      	lsls	r3, r3, #5
 800618c:	18cb      	adds	r3, r1, r3
 800618e:	3318      	adds	r3, #24
 8006190:	601a      	str	r2, [r3, #0]
        PRINTF( "Failed to receive message, for i2c device %u: result: %u\r\n", i2c_device, i2c_result );
        return false;
 8006192:	2300      	movs	r3, #0
 8006194:	e000      	b.n	8006198 <i2c_read_sensor+0x80>
    }

    return true;
 8006196:	2301      	movs	r3, #1
}
 8006198:	0018      	movs	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	b005      	add	sp, #20
 800619e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a0:	200005e8 	.word	0x200005e8

080061a4 <reset_i2c>:
  * @brief Force SCL and SDA High
  * @param  I2C Device
  * @retval : None
  */
static void reset_i2c(uint16_t i2c_device )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	0002      	movs	r2, r0
 80061ac:	1dbb      	adds	r3, r7, #6
 80061ae:	801a      	strh	r2, [r3, #0]

    return;
 80061b0:	46c0      	nop			; (mov r8, r8)
/*
    wiced_gpio_output_high( WICED_GPIO_9  );    // SCL
    wiced_rtos_delay_milliseconds( 1 );
    wiced_gpio_output_high( WICED_GPIO_10  );   // SDA
*/
}
 80061b2:	46bd      	mov	sp, r7
 80061b4:	b002      	add	sp, #8
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <sensirion_sleep_usec>:
  * @brief sleep some uS
  * @param  micro seconds to sleep
  * @retval : None
  */
void sensirion_sleep_usec(uint32_t useconds)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
    HAL_Delay( useconds / 1000 );
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	23fa      	movs	r3, #250	; 0xfa
 80061c4:	0099      	lsls	r1, r3, #2
 80061c6:	0010      	movs	r0, r2
 80061c8:	f7f9 ff9c 	bl	8000104 <__udivsi3>
 80061cc:	0003      	movs	r3, r0
 80061ce:	0018      	movs	r0, r3
 80061d0:	f001 fbe8 	bl	80079a4 <HAL_Delay>
}
 80061d4:	46c0      	nop			; (mov r8, r8)
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b002      	add	sp, #8
 80061da:	bd80      	pop	{r7, pc}

080061dc <sensirion_i2c_init>:
  * @brief setup I2C
  * @param  None
  * @retval : None
  */
void sensirion_i2c_init(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
    /*
     * This is handled automatically in i2c handler code
     */
}
 80061e0:	46c0      	nop			; (mov r8, r8)
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <sensirion_i2c_read>:
  * @brief Read from I2C bus
  * @param  Address, pointer to data, count of data
  * @retval : True/False
  */
uint8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6039      	str	r1, [r7, #0]
 80061ee:	0011      	movs	r1, r2
 80061f0:	1dfb      	adds	r3, r7, #7
 80061f2:	1c02      	adds	r2, r0, #0
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	1d3b      	adds	r3, r7, #4
 80061f8:	1c0a      	adds	r2, r1, #0
 80061fa:	801a      	strh	r2, [r3, #0]

    if( address == I2C_SGP30_ADDRESS ) {
 80061fc:	1dfb      	adds	r3, r7, #7
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b58      	cmp	r3, #88	; 0x58
 8006202:	d10c      	bne.n	800621e <sensirion_i2c_read+0x38>
        if( i2c_read_sensor( I2C_SGP30, data, count ) == true )
 8006204:	1d3b      	adds	r3, r7, #4
 8006206:	881a      	ldrh	r2, [r3, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	0019      	movs	r1, r3
 800620c:	2002      	movs	r0, #2
 800620e:	f7ff ff83 	bl	8006118 <i2c_read_sensor>
 8006212:	1e03      	subs	r3, r0, #0
 8006214:	d001      	beq.n	800621a <sensirion_i2c_read+0x34>
            return STATUS_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	e013      	b.n	8006242 <sensirion_i2c_read+0x5c>
        else
            return STATUS_FAIL;
 800621a:	23ff      	movs	r3, #255	; 0xff
 800621c:	e011      	b.n	8006242 <sensirion_i2c_read+0x5c>
    } else if( address == I2C_SPS30_ADDRESS ) {
 800621e:	1dfb      	adds	r3, r7, #7
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b69      	cmp	r3, #105	; 0x69
 8006224:	d10c      	bne.n	8006240 <sensirion_i2c_read+0x5a>
        if( i2c_read_sensor( I2C_SPS30, data, count ) == true )
 8006226:	1d3b      	adds	r3, r7, #4
 8006228:	881a      	ldrh	r2, [r3, #0]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	0019      	movs	r1, r3
 800622e:	2003      	movs	r0, #3
 8006230:	f7ff ff72 	bl	8006118 <i2c_read_sensor>
 8006234:	1e03      	subs	r3, r0, #0
 8006236:	d001      	beq.n	800623c <sensirion_i2c_read+0x56>
            return STATUS_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	e002      	b.n	8006242 <sensirion_i2c_read+0x5c>
        else
            return STATUS_FAIL;
 800623c:	23ff      	movs	r3, #255	; 0xff
 800623e:	e000      	b.n	8006242 <sensirion_i2c_read+0x5c>
    } else
        return STATUS_FAIL;
 8006240:	23ff      	movs	r3, #255	; 0xff
}
 8006242:	0018      	movs	r0, r3
 8006244:	46bd      	mov	sp, r7
 8006246:	b002      	add	sp, #8
 8006248:	bd80      	pop	{r7, pc}

0800624a <sensirion_i2c_write>:
  * @brief Read from I2C bus
  * @param  Address, pointer to data, count of data
  * @retval : True/False
  */
uint8_t sensirion_i2c_write(uint8_t address, const uint8_t* data, uint16_t count)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	6039      	str	r1, [r7, #0]
 8006252:	0011      	movs	r1, r2
 8006254:	1dfb      	adds	r3, r7, #7
 8006256:	1c02      	adds	r2, r0, #0
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	1c0a      	adds	r2, r1, #0
 800625e:	801a      	strh	r2, [r3, #0]

    if( address == I2C_SGP30_ADDRESS ) {
 8006260:	1dfb      	adds	r3, r7, #7
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b58      	cmp	r3, #88	; 0x58
 8006266:	d10c      	bne.n	8006282 <sensirion_i2c_write+0x38>
        if( i2c_write_sensor( I2C_SGP30, (uint8_t *) data, count ) == true )
 8006268:	1d3b      	adds	r3, r7, #4
 800626a:	881a      	ldrh	r2, [r3, #0]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	0019      	movs	r1, r3
 8006270:	2002      	movs	r0, #2
 8006272:	f7ff ff0b 	bl	800608c <i2c_write_sensor>
 8006276:	1e03      	subs	r3, r0, #0
 8006278:	d001      	beq.n	800627e <sensirion_i2c_write+0x34>
            return STATUS_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	e013      	b.n	80062a6 <sensirion_i2c_write+0x5c>
        else
            return STATUS_FAIL;
 800627e:	23ff      	movs	r3, #255	; 0xff
 8006280:	e011      	b.n	80062a6 <sensirion_i2c_write+0x5c>
    } else if( address == I2C_SPS30_ADDRESS ) {
 8006282:	1dfb      	adds	r3, r7, #7
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b69      	cmp	r3, #105	; 0x69
 8006288:	d10c      	bne.n	80062a4 <sensirion_i2c_write+0x5a>
        if( i2c_write_sensor( I2C_SPS30, (uint8_t *) data, count ) == true )
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	881a      	ldrh	r2, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	0019      	movs	r1, r3
 8006292:	2003      	movs	r0, #3
 8006294:	f7ff fefa 	bl	800608c <i2c_write_sensor>
 8006298:	1e03      	subs	r3, r0, #0
 800629a:	d001      	beq.n	80062a0 <sensirion_i2c_write+0x56>
            return STATUS_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	e002      	b.n	80062a6 <sensirion_i2c_write+0x5c>
        else
            return STATUS_FAIL;
 80062a0:	23ff      	movs	r3, #255	; 0xff
 80062a2:	e000      	b.n	80062a6 <sensirion_i2c_write+0x5c>
    } else
        return STATUS_FAIL;
 80062a4:	23ff      	movs	r3, #255	; 0xff
}
 80062a6:	0018      	movs	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b002      	add	sp, #8
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <init_SGP30>:
  * @brief Initialize the SPS30 Sensor
  * @param  None
  * @retval : None
  */
bool init_SGP30(void)
{
 80062b0:	b5b0      	push	{r4, r5, r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
    uint16_t feature_set_version;
    uint8_t product_type;
    uint16_t ethanol_raw_signal;
    uint16_t h2_raw_signal;

    const char *driver_version = sgp30_get_driver_version();
 80062b6:	f000 fe41 	bl	8006f3c <sgp30_get_driver_version>
 80062ba:	0003      	movs	r3, r0
 80062bc:	617b      	str	r3, [r7, #20]
    if (driver_version) {
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d011      	beq.n	80062e8 <init_SGP30+0x38>
        printf("SGP30 driver version %s\r\n", driver_version);
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4b5c      	ldr	r3, [pc, #368]	; (8006438 <init_SGP30+0x188>)
 80062c8:	0011      	movs	r1, r2
 80062ca:	0018      	movs	r0, r3
 80062cc:	f006 faea 	bl	800c8a4 <iprintf>
    } else {
        printf("fatal: Getting driver version failed\r\n");
        return false;
    }

    if( ( probe = sgp30_probe() ) != STATUS_OK) {
 80062d0:	f000 fef8 	bl	80070c4 <sgp30_probe>
 80062d4:	0003      	movs	r3, r0
 80062d6:	001a      	movs	r2, r3
 80062d8:	2112      	movs	r1, #18
 80062da:	187b      	adds	r3, r7, r1
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	187b      	adds	r3, r7, r1
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00c      	beq.n	8006300 <init_SGP30+0x50>
 80062e6:	e005      	b.n	80062f4 <init_SGP30+0x44>
        printf("fatal: Getting driver version failed\r\n");
 80062e8:	4b54      	ldr	r3, [pc, #336]	; (800643c <init_SGP30+0x18c>)
 80062ea:	0018      	movs	r0, r3
 80062ec:	f006 fb54 	bl	800c998 <puts>
        return false;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e09d      	b.n	8006430 <init_SGP30+0x180>
        if (probe == SGP30_ERR_UNSUPPORTED_FEATURE_SET)
            printf( "Your sensor needs at least feature set version 1.0 (0x20)\r\n" );
        printf("SGP sensor probing failed\r\n");
 80062f4:	4b52      	ldr	r3, [pc, #328]	; (8006440 <init_SGP30+0x190>)
 80062f6:	0018      	movs	r0, r3
 80062f8:	f006 fb4e 	bl	800c998 <puts>
        return false;
 80062fc:	2300      	movs	r3, #0
 80062fe:	e097      	b.n	8006430 <init_SGP30+0x180>
    }
    printf("SGP sensor probing successful\r\n");
 8006300:	4b50      	ldr	r3, [pc, #320]	; (8006444 <init_SGP30+0x194>)
 8006302:	0018      	movs	r0, r3
 8006304:	f006 fb48 	bl	800c998 <puts>

    err = sgp30_get_feature_set_version(&feature_set_version, &product_type);
 8006308:	230d      	movs	r3, #13
 800630a:	18fa      	adds	r2, r7, r3
 800630c:	230e      	movs	r3, #14
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	0011      	movs	r1, r2
 8006312:	0018      	movs	r0, r3
 8006314:	f000 fe1c 	bl	8006f50 <sgp30_get_feature_set_version>
 8006318:	0003      	movs	r3, r0
 800631a:	001a      	movs	r2, r3
 800631c:	2110      	movs	r1, #16
 800631e:	187b      	adds	r3, r7, r1
 8006320:	801a      	strh	r2, [r3, #0]
    if (err == STATUS_OK) {
 8006322:	187b      	adds	r3, r7, r1
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d11f      	bne.n	800636a <init_SGP30+0xba>
        printf("Feature set version: %u\r\n", feature_set_version);
 800632a:	230e      	movs	r3, #14
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	001a      	movs	r2, r3
 8006332:	4b45      	ldr	r3, [pc, #276]	; (8006448 <init_SGP30+0x198>)
 8006334:	0011      	movs	r1, r2
 8006336:	0018      	movs	r0, r3
 8006338:	f006 fab4 	bl	800c8a4 <iprintf>
        printf("Product type: %u\r\n", product_type);
 800633c:	230d      	movs	r3, #13
 800633e:	18fb      	adds	r3, r7, r3
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	001a      	movs	r2, r3
 8006344:	4b41      	ldr	r3, [pc, #260]	; (800644c <init_SGP30+0x19c>)
 8006346:	0011      	movs	r1, r2
 8006348:	0018      	movs	r0, r3
 800634a:	f006 faab 	bl	800c8a4 <iprintf>
        printf("sgp30_get_feature_set_version failed!\r\n");
        return false;
    }

    uint64_t serial_id;
    err = sgp30_get_serial_id(&serial_id);
 800634e:	003b      	movs	r3, r7
 8006350:	0018      	movs	r0, r3
 8006352:	f000 fe33 	bl	8006fbc <sgp30_get_serial_id>
 8006356:	0003      	movs	r3, r0
 8006358:	001a      	movs	r2, r3
 800635a:	2110      	movs	r1, #16
 800635c:	187b      	adds	r3, r7, r1
 800635e:	801a      	strh	r2, [r3, #0]
    if (err == STATUS_OK) {
 8006360:	187b      	adds	r3, r7, r1
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d130      	bne.n	80063ca <init_SGP30+0x11a>
 8006368:	e005      	b.n	8006376 <init_SGP30+0xc6>
        printf("sgp30_get_feature_set_version failed!\r\n");
 800636a:	4b39      	ldr	r3, [pc, #228]	; (8006450 <init_SGP30+0x1a0>)
 800636c:	0018      	movs	r0, r3
 800636e:	f006 fb13 	bl	800c998 <puts>
        return false;
 8006372:	2300      	movs	r3, #0
 8006374:	e05c      	b.n	8006430 <init_SGP30+0x180>
        printf("SerialID: 0x%lx%lx\r\n", (uint32_t) ( ( serial_id & 0xFFFFFFFF00000000 ) > 32 ), (uint32_t) ( serial_id & 0x00000000FFFFFFFF ) );
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2100      	movs	r1, #0
 800637c:	4011      	ands	r1, r2
 800637e:	000c      	movs	r4, r1
 8006380:	2100      	movs	r1, #0
 8006382:	438b      	bics	r3, r1
 8006384:	001d      	movs	r5, r3
 8006386:	2301      	movs	r3, #1
 8006388:	2d00      	cmp	r5, #0
 800638a:	d103      	bne.n	8006394 <init_SGP30+0xe4>
 800638c:	d101      	bne.n	8006392 <init_SGP30+0xe2>
 800638e:	2c20      	cmp	r4, #32
 8006390:	d800      	bhi.n	8006394 <init_SGP30+0xe4>
 8006392:	2300      	movs	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	0019      	movs	r1, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	687c      	ldr	r4, [r7, #4]
 800639c:	001a      	movs	r2, r3
 800639e:	4b2d      	ldr	r3, [pc, #180]	; (8006454 <init_SGP30+0x1a4>)
 80063a0:	0018      	movs	r0, r3
 80063a2:	f006 fa7f 	bl	800c8a4 <iprintf>
        printf("sgp30_get_serial_id failed!\n");
        return false;
    }

    /* Read gas raw signals */
    err = sgp30_measure_raw_blocking_read(&ethanol_raw_signal, &h2_raw_signal);
 80063a6:	2308      	movs	r3, #8
 80063a8:	18fa      	adds	r2, r7, r3
 80063aa:	230a      	movs	r3, #10
 80063ac:	18fb      	adds	r3, r7, r3
 80063ae:	0011      	movs	r1, r2
 80063b0:	0018      	movs	r0, r3
 80063b2:	f000 fd25 	bl	8006e00 <sgp30_measure_raw_blocking_read>
 80063b6:	0003      	movs	r3, r0
 80063b8:	001a      	movs	r2, r3
 80063ba:	2110      	movs	r1, #16
 80063bc:	187b      	adds	r3, r7, r1
 80063be:	801a      	strh	r2, [r3, #0]
    if (err == STATUS_OK) {
 80063c0:	187b      	adds	r3, r7, r1
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d119      	bne.n	80063fc <init_SGP30+0x14c>
 80063c8:	e005      	b.n	80063d6 <init_SGP30+0x126>
        printf("sgp30_get_serial_id failed!\n");
 80063ca:	4b23      	ldr	r3, [pc, #140]	; (8006458 <init_SGP30+0x1a8>)
 80063cc:	0018      	movs	r0, r3
 80063ce:	f006 fae3 	bl	800c998 <puts>
        return false;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e02c      	b.n	8006430 <init_SGP30+0x180>
        /* Print ethanol raw signal and h2 raw signal */
        printf("Ethanol raw signal: %u\n", ethanol_raw_signal);
 80063d6:	230a      	movs	r3, #10
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	001a      	movs	r2, r3
 80063de:	4b1f      	ldr	r3, [pc, #124]	; (800645c <init_SGP30+0x1ac>)
 80063e0:	0011      	movs	r1, r2
 80063e2:	0018      	movs	r0, r3
 80063e4:	f006 fa5e 	bl	800c8a4 <iprintf>
        printf("H2 raw signal: %u\n", h2_raw_signal);
 80063e8:	2308      	movs	r3, #8
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	001a      	movs	r2, r3
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <init_SGP30+0x1b0>)
 80063f2:	0011      	movs	r1, r2
 80063f4:	0018      	movs	r0, r3
 80063f6:	f006 fa55 	bl	800c8a4 <iprintf>
 80063fa:	e003      	b.n	8006404 <init_SGP30+0x154>
    } else {
        printf("error reading raw signals\n");
 80063fc:	4b19      	ldr	r3, [pc, #100]	; (8006464 <init_SGP30+0x1b4>)
 80063fe:	0018      	movs	r0, r3
 8006400:	f006 faca 	bl	800c998 <puts>

    /* Consider the two cases (A) and (B):
     * (A) If no baseline is available or the most recent baseline is more than
     *     one week old, it must discarded. A new baseline is found with
     *     sgp30_iaq_init() */
    err = sgp30_iaq_init();
 8006404:	f000 fe42 	bl	800708c <sgp30_iaq_init>
 8006408:	0003      	movs	r3, r0
 800640a:	001a      	movs	r2, r3
 800640c:	2110      	movs	r1, #16
 800640e:	187b      	adds	r3, r7, r1
 8006410:	801a      	strh	r2, [r3, #0]
    if (err == STATUS_OK) {
 8006412:	187b      	adds	r3, r7, r1
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d105      	bne.n	8006426 <init_SGP30+0x176>
        printf("sgp30_iaq_init done\r\n");
 800641a:	4b13      	ldr	r3, [pc, #76]	; (8006468 <init_SGP30+0x1b8>)
 800641c:	0018      	movs	r0, r3
 800641e:	f006 fabb 	bl	800c998 <puts>
     * faster start-up */
    /* IMPLEMENT: retrieve iaq_baseline from presistent storage;
     * err = sgp30_set_iaq_baseline(iaq_baseline);
     */

    return true;
 8006422:	2301      	movs	r3, #1
 8006424:	e004      	b.n	8006430 <init_SGP30+0x180>
        printf("sgp30_iaq_init failed!\r\n");
 8006426:	4b11      	ldr	r3, [pc, #68]	; (800646c <init_SGP30+0x1bc>)
 8006428:	0018      	movs	r0, r3
 800642a:	f006 fab5 	bl	800c998 <puts>
        return false;
 800642e:	2300      	movs	r3, #0
}
 8006430:	0018      	movs	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	b006      	add	sp, #24
 8006436:	bdb0      	pop	{r4, r5, r7, pc}
 8006438:	0800edb0 	.word	0x0800edb0
 800643c:	0800edcc 	.word	0x0800edcc
 8006440:	0800edf4 	.word	0x0800edf4
 8006444:	0800ee10 	.word	0x0800ee10
 8006448:	0800ee30 	.word	0x0800ee30
 800644c:	0800ee4c 	.word	0x0800ee4c
 8006450:	0800ee60 	.word	0x0800ee60
 8006454:	0800ee88 	.word	0x0800ee88
 8006458:	0800eea0 	.word	0x0800eea0
 800645c:	0800eebc 	.word	0x0800eebc
 8006460:	0800eed4 	.word	0x0800eed4
 8006464:	0800eee8 	.word	0x0800eee8
 8006468:	0800ef04 	.word	0x0800ef04
 800646c:	0800ef1c 	.word	0x0800ef1c

08006470 <get_voc_co2_eq>:

static uint16_t reading_count = 0;
bool get_voc_co2_eq( uint16_t *tvoc_ppb, uint16_t *co2_eq_ppm )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
    uint16_t err;

    if( hs.valid_humidity_level == true ) {
 800647a:	4a20      	ldr	r2, [pc, #128]	; (80064fc <get_voc_co2_eq+0x8c>)
 800647c:	23a1      	movs	r3, #161	; 0xa1
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	5cd3      	ldrb	r3, [r2, r3]
 8006482:	227f      	movs	r2, #127	; 0x7f
 8006484:	4393      	bics	r3, r2
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <get_voc_co2_eq+0x22>
        uint32_t ah = hs.current_humidity_level;   // absolute humidity in mg/m^3
 800648c:	4b1b      	ldr	r3, [pc, #108]	; (80064fc <get_voc_co2_eq+0x8c>)
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	60fb      	str	r3, [r7, #12]
        //  sgp30_set_absolute_humidity(ah);        // Enable once we have Pressure
    }

    err = sgp30_measure_iaq_blocking_read( tvoc_ppb, co2_eq_ppm );
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	0011      	movs	r1, r2
 8006498:	0018      	movs	r0, r3
 800649a:	f000 fc8b 	bl	8006db4 <sgp30_measure_iaq_blocking_read>
 800649e:	0003      	movs	r3, r0
 80064a0:	001a      	movs	r2, r3
 80064a2:	210a      	movs	r1, #10
 80064a4:	187b      	adds	r3, r7, r1
 80064a6:	801a      	strh	r2, [r3, #0]
    if( err == STATUS_OK) {
 80064a8:	187b      	adds	r3, r7, r1
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <get_voc_co2_eq+0x4c>
        PRINTF("tVOC  Concentration: %uppb\r\n", *tvoc_ppb);
        PRINTF("CO2eq Concentration: %uppm\r\n", *co2_eq_ppm);
    } else {
        printf("error reading IAQ values\n");
 80064b0:	4b13      	ldr	r3, [pc, #76]	; (8006500 <get_voc_co2_eq+0x90>)
 80064b2:	0018      	movs	r0, r3
 80064b4:	f006 fa70 	bl	800c998 <puts>
        return false;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e01b      	b.n	80064f4 <get_voc_co2_eq+0x84>
    }

    /* Persist the current baseline every hour */
    if( ++reading_count % 3600 == 3599) {
 80064bc:	4b11      	ldr	r3, [pc, #68]	; (8006504 <get_voc_co2_eq+0x94>)
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <get_voc_co2_eq+0x94>)
 80064c6:	801a      	strh	r2, [r3, #0]
 80064c8:	4b0e      	ldr	r3, [pc, #56]	; (8006504 <get_voc_co2_eq+0x94>)
 80064ca:	881a      	ldrh	r2, [r3, #0]
 80064cc:	23e1      	movs	r3, #225	; 0xe1
 80064ce:	0119      	lsls	r1, r3, #4
 80064d0:	0010      	movs	r0, r2
 80064d2:	f7f9 fe9d 	bl	8000210 <__aeabi_uidivmod>
 80064d6:	000b      	movs	r3, r1
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4a0b      	ldr	r2, [pc, #44]	; (8006508 <get_voc_co2_eq+0x98>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d108      	bne.n	80064f2 <get_voc_co2_eq+0x82>
        err = sgp30_get_iaq_baseline( &hs.iaq_baseline );
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <get_voc_co2_eq+0x9c>)
 80064e2:	0018      	movs	r0, r3
 80064e4:	f000 fce0 	bl	8006ea8 <sgp30_get_iaq_baseline>
 80064e8:	0003      	movs	r3, r0
 80064ea:	001a      	movs	r2, r3
 80064ec:	230a      	movs	r3, #10
 80064ee:	18fb      	adds	r3, r7, r3
 80064f0:	801a      	strh	r2, [r3, #0]
        if (err == STATUS_OK) {
            /* IMPLEMENT: store baseline to persistent storage */
        }
    }

    return true;
 80064f2:	2301      	movs	r3, #1
}
 80064f4:	0018      	movs	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b004      	add	sp, #16
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	200006f8 	.word	0x200006f8
 8006500:	0800ef34 	.word	0x0800ef34
 8006504:	20000688 	.word	0x20000688
 8006508:	00000e0f 	.word	0x00000e0f
 800650c:	2000086c 	.word	0x2000086c

08006510 <init_SPS30>:
  * @brief Initialize the SPS30 Sensor
  * @param  None
  * @retval : None
  */
bool init_SPS30(void)
{
 8006510:	b5b0      	push	{r4, r5, r7, lr}
 8006512:	b08e      	sub	sp, #56	; 0x38
 8006514:	af02      	add	r7, sp, #8
    struct sps30_measurement m;
    int16_t ret;

    /* Initialize I2C bus */
    sensirion_i2c_init();
 8006516:	f7ff fe61 	bl	80061dc <sensirion_i2c_init>

    if( sps30_probe() != 0) {
 800651a:	f000 fdec 	bl	80070f6 <sps30_probe>
 800651e:	1e03      	subs	r3, r0, #0
 8006520:	d001      	beq.n	8006526 <init_SPS30+0x16>
        PRINTF("SPS sensor probing failed\n");
        return false;
 8006522:	2300      	movs	r3, #0
 8006524:	e084      	b.n	8006630 <init_SPS30+0x120>
    }

    PRINTF("SPS sensor probing successful\n");

    ret = sps30_start_measurement();
 8006526:	252e      	movs	r5, #46	; 0x2e
 8006528:	197c      	adds	r4, r7, r5
 800652a:	f000 fe69 	bl	8007200 <sps30_start_measurement>
 800652e:	0003      	movs	r3, r0
 8006530:	8023      	strh	r3, [r4, #0]
    if (ret < 0) {
 8006532:	197b      	adds	r3, r7, r5
 8006534:	2200      	movs	r2, #0
 8006536:	5e9b      	ldrsh	r3, [r3, r2]
 8006538:	2b00      	cmp	r3, #0
 800653a:	da01      	bge.n	8006540 <init_SPS30+0x30>
        PRINTF("error starting Particulate measurement\n");
        return false;
 800653c:	2300      	movs	r3, #0
 800653e:	e077      	b.n	8006630 <init_SPS30+0x120>
    }
//    PRINTF("measurements started\n");

    sensirion_sleep_usec(SPS30_MEASUREMENT_DURATION_USEC); /* wait 1s */
 8006540:	4b3d      	ldr	r3, [pc, #244]	; (8006638 <init_SPS30+0x128>)
 8006542:	0018      	movs	r0, r3
 8006544:	f7ff fe38 	bl	80061b8 <sensirion_sleep_usec>
    ret = sps30_read_measurement( &m );
 8006548:	252e      	movs	r5, #46	; 0x2e
 800654a:	197c      	adds	r4, r7, r5
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	0018      	movs	r0, r3
 8006550:	f000 fe74 	bl	800723c <sps30_read_measurement>
 8006554:	0003      	movs	r3, r0
 8006556:	8023      	strh	r3, [r4, #0]
    if (ret < 0) {
 8006558:	197b      	adds	r3, r7, r5
 800655a:	2200      	movs	r2, #0
 800655c:	5e9b      	ldrsh	r3, [r3, r2]
 800655e:	2b00      	cmp	r3, #0
 8006560:	da01      	bge.n	8006566 <init_SPS30+0x56>
        PRINTF("error reading Particulate measurement: %d\n", ret );
        return false;
 8006562:	2300      	movs	r3, #0
 8006564:	e064      	b.n	8006630 <init_SPS30+0x120>
        ;
    }
    /*
     * Initialize the Kalman Filters
     */
    imx_kalman_filter_init( &hs.kf_PM_1_0, 6, 6, 0.2, m.mc_1p0 );
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4c34      	ldr	r4, [pc, #208]	; (800663c <init_SPS30+0x12c>)
 800656c:	4a34      	ldr	r2, [pc, #208]	; (8006640 <init_SPS30+0x130>)
 800656e:	4934      	ldr	r1, [pc, #208]	; (8006640 <init_SPS30+0x130>)
 8006570:	4834      	ldr	r0, [pc, #208]	; (8006644 <init_SPS30+0x134>)
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	1c23      	adds	r3, r4, #0
 8006576:	f001 f88b 	bl	8007690 <imx_kalman_filter_init>
    imx_kalman_filter_init( &hs.kf_PM_2_5, 6, 6, 0.2, m.mc_2p5 );
 800657a:	1d3b      	adds	r3, r7, #4
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	4c2f      	ldr	r4, [pc, #188]	; (800663c <init_SPS30+0x12c>)
 8006580:	4a2f      	ldr	r2, [pc, #188]	; (8006640 <init_SPS30+0x130>)
 8006582:	492f      	ldr	r1, [pc, #188]	; (8006640 <init_SPS30+0x130>)
 8006584:	4830      	ldr	r0, [pc, #192]	; (8006648 <init_SPS30+0x138>)
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	1c23      	adds	r3, r4, #0
 800658a:	f001 f881 	bl	8007690 <imx_kalman_filter_init>
    imx_kalman_filter_init( &hs.kf_PM_4_0, 6, 6, 0.2, m.mc_4p0 );
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	4c2a      	ldr	r4, [pc, #168]	; (800663c <init_SPS30+0x12c>)
 8006594:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <init_SPS30+0x130>)
 8006596:	492a      	ldr	r1, [pc, #168]	; (8006640 <init_SPS30+0x130>)
 8006598:	482c      	ldr	r0, [pc, #176]	; (800664c <init_SPS30+0x13c>)
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	1c23      	adds	r3, r4, #0
 800659e:	f001 f877 	bl	8007690 <imx_kalman_filter_init>
    imx_kalman_filter_init( &hs.kf_PM_10_0, 6, 6, 0.2, m.mc_10p0 );
 80065a2:	1d3b      	adds	r3, r7, #4
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	4c25      	ldr	r4, [pc, #148]	; (800663c <init_SPS30+0x12c>)
 80065a8:	4a25      	ldr	r2, [pc, #148]	; (8006640 <init_SPS30+0x130>)
 80065aa:	4925      	ldr	r1, [pc, #148]	; (8006640 <init_SPS30+0x130>)
 80065ac:	4828      	ldr	r0, [pc, #160]	; (8006650 <init_SPS30+0x140>)
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	1c23      	adds	r3, r4, #0
 80065b2:	f001 f86d 	bl	8007690 <imx_kalman_filter_init>
    imx_kalman_filter_init( &hs.kf_no_PM_0_5, 6, 6, 0.2, m.nc_0p5 );
 80065b6:	1d3b      	adds	r3, r7, #4
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	4c20      	ldr	r4, [pc, #128]	; (800663c <init_SPS30+0x12c>)
 80065bc:	4a20      	ldr	r2, [pc, #128]	; (8006640 <init_SPS30+0x130>)
 80065be:	4920      	ldr	r1, [pc, #128]	; (8006640 <init_SPS30+0x130>)
 80065c0:	4824      	ldr	r0, [pc, #144]	; (8006654 <init_SPS30+0x144>)
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	1c23      	adds	r3, r4, #0
 80065c6:	f001 f863 	bl	8007690 <imx_kalman_filter_init>
    imx_kalman_filter_init( &hs.kf_no_PM_1_0, 6, 6, 0.2, m.nc_1p0 );
 80065ca:	1d3b      	adds	r3, r7, #4
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	4c1b      	ldr	r4, [pc, #108]	; (800663c <init_SPS30+0x12c>)
 80065d0:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <init_SPS30+0x130>)
 80065d2:	491b      	ldr	r1, [pc, #108]	; (8006640 <init_SPS30+0x130>)
 80065d4:	4820      	ldr	r0, [pc, #128]	; (8006658 <init_SPS30+0x148>)
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	1c23      	adds	r3, r4, #0
 80065da:	f001 f859 	bl	8007690 <imx_kalman_filter_init>
    imx_kalman_filter_init( &hs.kf_no_PM_2_5, 6, 6, 0.2, m.nc_2p5 );
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	4c16      	ldr	r4, [pc, #88]	; (800663c <init_SPS30+0x12c>)
 80065e4:	4a16      	ldr	r2, [pc, #88]	; (8006640 <init_SPS30+0x130>)
 80065e6:	4916      	ldr	r1, [pc, #88]	; (8006640 <init_SPS30+0x130>)
 80065e8:	481c      	ldr	r0, [pc, #112]	; (800665c <init_SPS30+0x14c>)
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	1c23      	adds	r3, r4, #0
 80065ee:	f001 f84f 	bl	8007690 <imx_kalman_filter_init>
    imx_kalman_filter_init( &hs.kf_no_PM_4_0, 6, 6, 0.2, m.nc_4p0 );
 80065f2:	1d3b      	adds	r3, r7, #4
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	4c11      	ldr	r4, [pc, #68]	; (800663c <init_SPS30+0x12c>)
 80065f8:	4a11      	ldr	r2, [pc, #68]	; (8006640 <init_SPS30+0x130>)
 80065fa:	4911      	ldr	r1, [pc, #68]	; (8006640 <init_SPS30+0x130>)
 80065fc:	4818      	ldr	r0, [pc, #96]	; (8006660 <init_SPS30+0x150>)
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	1c23      	adds	r3, r4, #0
 8006602:	f001 f845 	bl	8007690 <imx_kalman_filter_init>
    imx_kalman_filter_init( &hs.kf_no_PM_10_0, 6, 6, 0.2, m.nc_10p0 );
 8006606:	1d3b      	adds	r3, r7, #4
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	4c0c      	ldr	r4, [pc, #48]	; (800663c <init_SPS30+0x12c>)
 800660c:	4a0c      	ldr	r2, [pc, #48]	; (8006640 <init_SPS30+0x130>)
 800660e:	490c      	ldr	r1, [pc, #48]	; (8006640 <init_SPS30+0x130>)
 8006610:	4814      	ldr	r0, [pc, #80]	; (8006664 <init_SPS30+0x154>)
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	1c23      	adds	r3, r4, #0
 8006616:	f001 f83b 	bl	8007690 <imx_kalman_filter_init>
    imx_kalman_filter_init( &hs.kf_typical_particle, 6, 6, 0.2, m.typical_particle_size );
 800661a:	1d3b      	adds	r3, r7, #4
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	4c07      	ldr	r4, [pc, #28]	; (800663c <init_SPS30+0x12c>)
 8006620:	4a07      	ldr	r2, [pc, #28]	; (8006640 <init_SPS30+0x130>)
 8006622:	4907      	ldr	r1, [pc, #28]	; (8006640 <init_SPS30+0x130>)
 8006624:	4810      	ldr	r0, [pc, #64]	; (8006668 <init_SPS30+0x158>)
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	1c23      	adds	r3, r4, #0
 800662a:	f001 f831 	bl	8007690 <imx_kalman_filter_init>
    return true;
 800662e:	2301      	movs	r3, #1
}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	b00c      	add	sp, #48	; 0x30
 8006636:	bdb0      	pop	{r4, r5, r7, pc}
 8006638:	000f4240 	.word	0x000f4240
 800663c:	3e4ccccd 	.word	0x3e4ccccd
 8006640:	40c00000 	.word	0x40c00000
 8006644:	20000790 	.word	0x20000790
 8006648:	200007a4 	.word	0x200007a4
 800664c:	200007b8 	.word	0x200007b8
 8006650:	200007cc 	.word	0x200007cc
 8006654:	200007e0 	.word	0x200007e0
 8006658:	200007f4 	.word	0x200007f4
 800665c:	20000808 	.word	0x20000808
 8006660:	2000081c 	.word	0x2000081c
 8006664:	20000830 	.word	0x20000830
 8006668:	20000844 	.word	0x20000844

0800666c <start_particulate_matter_measurement>:

bool start_particulate_matter_measurement(void)
{
 800666c:	b590      	push	{r4, r7, lr}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
    int16_t ret;

    ret = sps30_start_measurement();
 8006672:	1dbc      	adds	r4, r7, #6
 8006674:	f000 fdc4 	bl	8007200 <sps30_start_measurement>
 8006678:	0003      	movs	r3, r0
 800667a:	8023      	strh	r3, [r4, #0]
    if (ret < 0) {
 800667c:	1dbb      	adds	r3, r7, #6
 800667e:	2200      	movs	r2, #0
 8006680:	5e9b      	ldrsh	r3, [r3, r2]
 8006682:	2b00      	cmp	r3, #0
 8006684:	da01      	bge.n	800668a <start_particulate_matter_measurement+0x1e>
        return false;
 8006686:	2300      	movs	r3, #0
 8006688:	e000      	b.n	800668c <start_particulate_matter_measurement+0x20>
    }
    return true;
 800668a:	2301      	movs	r3, #1
}
 800668c:	0018      	movs	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	b003      	add	sp, #12
 8006692:	bd90      	pop	{r4, r7, pc}

08006694 <update_particulate_matter>:

bool update_particulate_matter(void)
{
 8006694:	b5b0      	push	{r4, r5, r7, lr}
 8006696:	b08c      	sub	sp, #48	; 0x30
 8006698:	af00      	add	r7, sp, #0
    struct sps30_measurement m;
    int16_t ret;

    ret = sps30_read_measurement( &m );
 800669a:	252e      	movs	r5, #46	; 0x2e
 800669c:	197c      	adds	r4, r7, r5
 800669e:	1d3b      	adds	r3, r7, #4
 80066a0:	0018      	movs	r0, r3
 80066a2:	f000 fdcb 	bl	800723c <sps30_read_measurement>
 80066a6:	0003      	movs	r3, r0
 80066a8:	8023      	strh	r3, [r4, #0]
    if (ret < 0) {
 80066aa:	197b      	adds	r3, r7, r5
 80066ac:	2200      	movs	r2, #0
 80066ae:	5e9b      	ldrsh	r3, [r3, r2]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	da01      	bge.n	80066b8 <update_particulate_matter+0x24>
        return false;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e075      	b.n	80067a4 <update_particulate_matter+0x110>
    } else {
        hs.current_PM_1_0 = imx_kalman_filter_update_estimate( &hs.kf_PM_1_0, m.mc_1p0, 0 );
 80066b8:	1d3b      	adds	r3, r7, #4
 80066ba:	6819      	ldr	r1, [r3, #0]
 80066bc:	2200      	movs	r2, #0
 80066be:	4b3b      	ldr	r3, [pc, #236]	; (80067ac <update_particulate_matter+0x118>)
 80066c0:	0018      	movs	r0, r3
 80066c2:	f000 fffd 	bl	80076c0 <imx_kalman_filter_update_estimate>
 80066c6:	1c02      	adds	r2, r0, #0
 80066c8:	4b39      	ldr	r3, [pc, #228]	; (80067b0 <update_particulate_matter+0x11c>)
 80066ca:	66da      	str	r2, [r3, #108]	; 0x6c
        hs.current_PM_2_5 = imx_kalman_filter_update_estimate( &hs.kf_PM_2_5, m.mc_2p5, 0  );
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	6859      	ldr	r1, [r3, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	4b38      	ldr	r3, [pc, #224]	; (80067b4 <update_particulate_matter+0x120>)
 80066d4:	0018      	movs	r0, r3
 80066d6:	f000 fff3 	bl	80076c0 <imx_kalman_filter_update_estimate>
 80066da:	1c02      	adds	r2, r0, #0
 80066dc:	4b34      	ldr	r3, [pc, #208]	; (80067b0 <update_particulate_matter+0x11c>)
 80066de:	671a      	str	r2, [r3, #112]	; 0x70
        hs.current_PM_4_0 = imx_kalman_filter_update_estimate( &hs.kf_PM_4_0, m.mc_4p0, 0  );
 80066e0:	1d3b      	adds	r3, r7, #4
 80066e2:	6899      	ldr	r1, [r3, #8]
 80066e4:	2200      	movs	r2, #0
 80066e6:	4b34      	ldr	r3, [pc, #208]	; (80067b8 <update_particulate_matter+0x124>)
 80066e8:	0018      	movs	r0, r3
 80066ea:	f000 ffe9 	bl	80076c0 <imx_kalman_filter_update_estimate>
 80066ee:	1c02      	adds	r2, r0, #0
 80066f0:	4b2f      	ldr	r3, [pc, #188]	; (80067b0 <update_particulate_matter+0x11c>)
 80066f2:	675a      	str	r2, [r3, #116]	; 0x74
        hs.current_PM_10_0 = imx_kalman_filter_update_estimate( &hs.kf_PM_10_0, m.mc_10p0, 0  );
 80066f4:	1d3b      	adds	r3, r7, #4
 80066f6:	68d9      	ldr	r1, [r3, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	4b30      	ldr	r3, [pc, #192]	; (80067bc <update_particulate_matter+0x128>)
 80066fc:	0018      	movs	r0, r3
 80066fe:	f000 ffdf 	bl	80076c0 <imx_kalman_filter_update_estimate>
 8006702:	1c02      	adds	r2, r0, #0
 8006704:	4b2a      	ldr	r3, [pc, #168]	; (80067b0 <update_particulate_matter+0x11c>)
 8006706:	679a      	str	r2, [r3, #120]	; 0x78
        hs.current_no_PM_0_5 = imx_kalman_filter_update_estimate( &hs.kf_no_PM_0_5, m.nc_0p5, 0  );
 8006708:	1d3b      	adds	r3, r7, #4
 800670a:	6919      	ldr	r1, [r3, #16]
 800670c:	2200      	movs	r2, #0
 800670e:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <update_particulate_matter+0x12c>)
 8006710:	0018      	movs	r0, r3
 8006712:	f000 ffd5 	bl	80076c0 <imx_kalman_filter_update_estimate>
 8006716:	1c02      	adds	r2, r0, #0
 8006718:	4b25      	ldr	r3, [pc, #148]	; (80067b0 <update_particulate_matter+0x11c>)
 800671a:	67da      	str	r2, [r3, #124]	; 0x7c
        hs.current_no_PM_1_0 = imx_kalman_filter_update_estimate( &hs.kf_no_PM_1_0, m.nc_1p0, 0  );
 800671c:	1d3b      	adds	r3, r7, #4
 800671e:	6959      	ldr	r1, [r3, #20]
 8006720:	2200      	movs	r2, #0
 8006722:	4b28      	ldr	r3, [pc, #160]	; (80067c4 <update_particulate_matter+0x130>)
 8006724:	0018      	movs	r0, r3
 8006726:	f000 ffcb 	bl	80076c0 <imx_kalman_filter_update_estimate>
 800672a:	1c01      	adds	r1, r0, #0
 800672c:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <update_particulate_matter+0x11c>)
 800672e:	2280      	movs	r2, #128	; 0x80
 8006730:	5099      	str	r1, [r3, r2]
        hs.current_no_PM_2_5 = imx_kalman_filter_update_estimate( &hs.kf_no_PM_2_5, m.nc_2p5, 0  );
 8006732:	1d3b      	adds	r3, r7, #4
 8006734:	6999      	ldr	r1, [r3, #24]
 8006736:	2200      	movs	r2, #0
 8006738:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <update_particulate_matter+0x134>)
 800673a:	0018      	movs	r0, r3
 800673c:	f000 ffc0 	bl	80076c0 <imx_kalman_filter_update_estimate>
 8006740:	1c01      	adds	r1, r0, #0
 8006742:	4b1b      	ldr	r3, [pc, #108]	; (80067b0 <update_particulate_matter+0x11c>)
 8006744:	2284      	movs	r2, #132	; 0x84
 8006746:	5099      	str	r1, [r3, r2]
        hs.current_no_PM_4_0 = imx_kalman_filter_update_estimate( &hs.kf_no_PM_4_0, m.nc_4p0, 0  );
 8006748:	1d3b      	adds	r3, r7, #4
 800674a:	69d9      	ldr	r1, [r3, #28]
 800674c:	2200      	movs	r2, #0
 800674e:	4b1f      	ldr	r3, [pc, #124]	; (80067cc <update_particulate_matter+0x138>)
 8006750:	0018      	movs	r0, r3
 8006752:	f000 ffb5 	bl	80076c0 <imx_kalman_filter_update_estimate>
 8006756:	1c01      	adds	r1, r0, #0
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <update_particulate_matter+0x11c>)
 800675a:	2288      	movs	r2, #136	; 0x88
 800675c:	5099      	str	r1, [r3, r2]
        hs.current_no_PM_10_0 = imx_kalman_filter_update_estimate( &hs.kf_no_PM_10_0, m.nc_10p0, 0  );
 800675e:	1d3b      	adds	r3, r7, #4
 8006760:	6a19      	ldr	r1, [r3, #32]
 8006762:	2200      	movs	r2, #0
 8006764:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <update_particulate_matter+0x13c>)
 8006766:	0018      	movs	r0, r3
 8006768:	f000 ffaa 	bl	80076c0 <imx_kalman_filter_update_estimate>
 800676c:	1c01      	adds	r1, r0, #0
 800676e:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <update_particulate_matter+0x11c>)
 8006770:	228c      	movs	r2, #140	; 0x8c
 8006772:	5099      	str	r1, [r3, r2]
        hs.current_PM_index = 0;           // Calculate this value somehow
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <update_particulate_matter+0x11c>)
 8006776:	2294      	movs	r2, #148	; 0x94
 8006778:	2100      	movs	r1, #0
 800677a:	5099      	str	r1, [r3, r2]
        hs.current_typical_particle = imx_kalman_filter_update_estimate( &hs.kf_typical_particle, m.typical_particle_size, 0 );
 800677c:	1d3b      	adds	r3, r7, #4
 800677e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006780:	2200      	movs	r2, #0
 8006782:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <update_particulate_matter+0x140>)
 8006784:	0018      	movs	r0, r3
 8006786:	f000 ff9b 	bl	80076c0 <imx_kalman_filter_update_estimate>
 800678a:	1c01      	adds	r1, r0, #0
 800678c:	4b08      	ldr	r3, [pc, #32]	; (80067b0 <update_particulate_matter+0x11c>)
 800678e:	2290      	movs	r2, #144	; 0x90
 8006790:	5099      	str	r1, [r3, r2]
        hs.valid_particulate_matter = true;
 8006792:	4a07      	ldr	r2, [pc, #28]	; (80067b0 <update_particulate_matter+0x11c>)
 8006794:	23a1      	movs	r3, #161	; 0xa1
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	18d3      	adds	r3, r2, r3
 800679a:	785a      	ldrb	r2, [r3, #1]
 800679c:	2108      	movs	r1, #8
 800679e:	430a      	orrs	r2, r1
 80067a0:	705a      	strb	r2, [r3, #1]

    }
    return true;
 80067a2:	2301      	movs	r3, #1
}
 80067a4:	0018      	movs	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b00c      	add	sp, #48	; 0x30
 80067aa:	bdb0      	pop	{r4, r5, r7, pc}
 80067ac:	20000790 	.word	0x20000790
 80067b0:	200006f8 	.word	0x200006f8
 80067b4:	200007a4 	.word	0x200007a4
 80067b8:	200007b8 	.word	0x200007b8
 80067bc:	200007cc 	.word	0x200007cc
 80067c0:	200007e0 	.word	0x200007e0
 80067c4:	200007f4 	.word	0x200007f4
 80067c8:	20000808 	.word	0x20000808
 80067cc:	2000081c 	.word	0x2000081c
 80067d0:	20000830 	.word	0x20000830
 80067d4:	20000844 	.word	0x20000844

080067d8 <sensirion_common_generate_crc>:
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"

uint8_t sensirion_common_generate_crc(uint8_t *data, uint16_t count) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	000a      	movs	r2, r1
 80067e2:	1cbb      	adds	r3, r7, #2
 80067e4:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80067e6:	230d      	movs	r3, #13
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	22ff      	movs	r2, #255	; 0xff
 80067ec:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80067ee:	230e      	movs	r3, #14
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	2200      	movs	r2, #0
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	e038      	b.n	800686a <sensirion_common_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80067f8:	230e      	movs	r3, #14
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	18d3      	adds	r3, r2, r3
 8006802:	7819      	ldrb	r1, [r3, #0]
 8006804:	220d      	movs	r2, #13
 8006806:	18bb      	adds	r3, r7, r2
 8006808:	18ba      	adds	r2, r7, r2
 800680a:	7812      	ldrb	r2, [r2, #0]
 800680c:	404a      	eors	r2, r1
 800680e:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8006810:	230c      	movs	r3, #12
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	2208      	movs	r2, #8
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	e01c      	b.n	8006854 <sensirion_common_generate_crc+0x7c>
            if (crc & 0x80)
 800681a:	230d      	movs	r3, #13
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	b25b      	sxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	da0a      	bge.n	800683c <sensirion_common_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8006826:	210d      	movs	r1, #13
 8006828:	187b      	adds	r3, r7, r1
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	b25b      	sxtb	r3, r3
 8006830:	2231      	movs	r2, #49	; 0x31
 8006832:	4053      	eors	r3, r2
 8006834:	b25a      	sxtb	r2, r3
 8006836:	187b      	adds	r3, r7, r1
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	e005      	b.n	8006848 <sensirion_common_generate_crc+0x70>
            else
                crc = (crc << 1);
 800683c:	230d      	movs	r3, #13
 800683e:	18fa      	adds	r2, r7, r3
 8006840:	18fb      	adds	r3, r7, r3
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	18db      	adds	r3, r3, r3
 8006846:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8006848:	220c      	movs	r2, #12
 800684a:	18bb      	adds	r3, r7, r2
 800684c:	18ba      	adds	r2, r7, r2
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	3a01      	subs	r2, #1
 8006852:	701a      	strb	r2, [r3, #0]
 8006854:	230c      	movs	r3, #12
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1dd      	bne.n	800681a <sensirion_common_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800685e:	220e      	movs	r2, #14
 8006860:	18bb      	adds	r3, r7, r2
 8006862:	18ba      	adds	r2, r7, r2
 8006864:	8812      	ldrh	r2, [r2, #0]
 8006866:	3201      	adds	r2, #1
 8006868:	801a      	strh	r2, [r3, #0]
 800686a:	230e      	movs	r3, #14
 800686c:	18fa      	adds	r2, r7, r3
 800686e:	1cbb      	adds	r3, r7, #2
 8006870:	8812      	ldrh	r2, [r2, #0]
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d3bf      	bcc.n	80067f8 <sensirion_common_generate_crc+0x20>
        }
    }
    return crc;
 8006878:	230d      	movs	r3, #13
 800687a:	18fb      	adds	r3, r7, r3
 800687c:	781b      	ldrb	r3, [r3, #0]
}
 800687e:	0018      	movs	r0, r3
 8006880:	46bd      	mov	sp, r7
 8006882:	b004      	add	sp, #16
 8006884:	bd80      	pop	{r7, pc}

08006886 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(uint8_t *data, uint16_t count,
                                  uint8_t checksum) {
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	0008      	movs	r0, r1
 8006890:	0011      	movs	r1, r2
 8006892:	1cbb      	adds	r3, r7, #2
 8006894:	1c02      	adds	r2, r0, #0
 8006896:	801a      	strh	r2, [r3, #0]
 8006898:	1c7b      	adds	r3, r7, #1
 800689a:	1c0a      	adds	r2, r1, #0
 800689c:	701a      	strb	r2, [r3, #0]
    if (sensirion_common_generate_crc(data, count) != checksum)
 800689e:	1cbb      	adds	r3, r7, #2
 80068a0:	881a      	ldrh	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	0011      	movs	r1, r2
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7ff ff96 	bl	80067d8 <sensirion_common_generate_crc>
 80068ac:	0003      	movs	r3, r0
 80068ae:	001a      	movs	r2, r3
 80068b0:	1c7b      	adds	r3, r7, #1
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d002      	beq.n	80068be <sensirion_common_check_crc+0x38>
        return STATUS_FAIL;
 80068b8:	2301      	movs	r3, #1
 80068ba:	425b      	negs	r3, r3
 80068bc:	e000      	b.n	80068c0 <sensirion_common_check_crc+0x3a>
    return STATUS_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	0018      	movs	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b002      	add	sp, #8
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <sensirion_fill_cmd_send_buf>:

uint16_t sensirion_fill_cmd_send_buf(uint8_t *buf, uint16_t cmd,
                                     const uint16_t *args, uint8_t num_args) {
 80068c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	0008      	movs	r0, r1
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	0019      	movs	r1, r3
 80068d6:	250a      	movs	r5, #10
 80068d8:	197b      	adds	r3, r7, r5
 80068da:	1c02      	adds	r2, r0, #0
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	2309      	movs	r3, #9
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	1c0a      	adds	r2, r1, #0
 80068e4:	701a      	strb	r2, [r3, #0]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 80068e6:	2014      	movs	r0, #20
 80068e8:	183b      	adds	r3, r7, r0
 80068ea:	2200      	movs	r2, #0
 80068ec:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 80068ee:	197b      	adds	r3, r7, r5
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	0a1b      	lsrs	r3, r3, #8
 80068f4:	b299      	uxth	r1, r3
 80068f6:	183b      	adds	r3, r7, r0
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	0004      	movs	r4, r0
 80068fc:	183a      	adds	r2, r7, r0
 80068fe:	1c58      	adds	r0, r3, #1
 8006900:	8010      	strh	r0, [r2, #0]
 8006902:	001a      	movs	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	189b      	adds	r3, r3, r2
 8006908:	b2ca      	uxtb	r2, r1
 800690a:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 800690c:	0020      	movs	r0, r4
 800690e:	183b      	adds	r3, r7, r0
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	183a      	adds	r2, r7, r0
 8006914:	1c59      	adds	r1, r3, #1
 8006916:	8011      	strh	r1, [r2, #0]
 8006918:	001a      	movs	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	189b      	adds	r3, r3, r2
 800691e:	197a      	adds	r2, r7, r5
 8006920:	8812      	ldrh	r2, [r2, #0]
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8006926:	2317      	movs	r3, #23
 8006928:	18fb      	adds	r3, r7, r3
 800692a:	2200      	movs	r2, #0
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e042      	b.n	80069b6 <sensirion_fill_cmd_send_buf+0xee>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8006930:	2617      	movs	r6, #23
 8006932:	19bb      	adds	r3, r7, r6
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	18d3      	adds	r3, r2, r3
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	0a1b      	lsrs	r3, r3, #8
 8006940:	b299      	uxth	r1, r3
 8006942:	2414      	movs	r4, #20
 8006944:	193b      	adds	r3, r7, r4
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	193a      	adds	r2, r7, r4
 800694a:	1c58      	adds	r0, r3, #1
 800694c:	8010      	strh	r0, [r2, #0]
 800694e:	001a      	movs	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	189b      	adds	r3, r3, r2
 8006954:	b2ca      	uxtb	r2, r1
 8006956:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8006958:	19bb      	adds	r3, r7, r6
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	18d3      	adds	r3, r2, r3
 8006962:	8819      	ldrh	r1, [r3, #0]
 8006964:	193b      	adds	r3, r7, r4
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	193a      	adds	r2, r7, r4
 800696a:	1c58      	adds	r0, r3, #1
 800696c:	8010      	strh	r0, [r2, #0]
 800696e:	001a      	movs	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	189b      	adds	r3, r3, r2
 8006974:	b2ca      	uxtb	r2, r1
 8006976:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t *)&buf[idx - 2],
 8006978:	0025      	movs	r5, r4
 800697a:	193b      	adds	r3, r7, r4
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	3b02      	subs	r3, #2
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	18d3      	adds	r3, r2, r3
 8006984:	2213      	movs	r2, #19
 8006986:	18bc      	adds	r4, r7, r2
 8006988:	2102      	movs	r1, #2
 800698a:	0018      	movs	r0, r3
 800698c:	f7ff ff24 	bl	80067d8 <sensirion_common_generate_crc>
 8006990:	0003      	movs	r3, r0
 8006992:	7023      	strb	r3, [r4, #0]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8006994:	197b      	adds	r3, r7, r5
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	197a      	adds	r2, r7, r5
 800699a:	1c59      	adds	r1, r3, #1
 800699c:	8011      	strh	r1, [r2, #0]
 800699e:	001a      	movs	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	189b      	adds	r3, r3, r2
 80069a4:	2213      	movs	r2, #19
 80069a6:	18ba      	adds	r2, r7, r2
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 80069ac:	19bb      	adds	r3, r7, r6
 80069ae:	19ba      	adds	r2, r7, r6
 80069b0:	7812      	ldrb	r2, [r2, #0]
 80069b2:	3201      	adds	r2, #1
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	2317      	movs	r3, #23
 80069b8:	18fa      	adds	r2, r7, r3
 80069ba:	2309      	movs	r3, #9
 80069bc:	18fb      	adds	r3, r7, r3
 80069be:	7812      	ldrb	r2, [r2, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d3b4      	bcc.n	8006930 <sensirion_fill_cmd_send_buf+0x68>
    }
    return idx;
 80069c6:	2314      	movs	r3, #20
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	881b      	ldrh	r3, [r3, #0]
}
 80069cc:	0018      	movs	r0, r3
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b007      	add	sp, #28
 80069d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069d4 <sensirion_i2c_read_bytes>:

int16_t sensirion_i2c_read_bytes(uint8_t address, uint8_t *data,
                                 uint16_t num_words) {
 80069d4:	b5b0      	push	{r4, r5, r7, lr}
 80069d6:	b096      	sub	sp, #88	; 0x58
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6039      	str	r1, [r7, #0]
 80069dc:	0011      	movs	r1, r2
 80069de:	1dfb      	adds	r3, r7, #7
 80069e0:	1c02      	adds	r2, r0, #0
 80069e2:	701a      	strb	r2, [r3, #0]
 80069e4:	1d3b      	adds	r3, r7, #4
 80069e6:	1c0a      	adds	r2, r1, #0
 80069e8:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 80069ea:	2052      	movs	r0, #82	; 0x52
 80069ec:	1839      	adds	r1, r7, r0
 80069ee:	1d3b      	adds	r3, r7, #4
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	1c1a      	adds	r2, r3, #0
 80069f4:	1892      	adds	r2, r2, r2
 80069f6:	18d3      	adds	r3, r2, r3
 80069f8:	800b      	strh	r3, [r1, #0]
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t *const buf8 = (uint8_t *)word_buf;
 80069fa:	2308      	movs	r3, #8
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8006a00:	183b      	adds	r3, r7, r0
 8006a02:	881a      	ldrh	r2, [r3, #0]
 8006a04:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a06:	1dfb      	adds	r3, r7, #7
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f7ff fbeb 	bl	80061e6 <sensirion_i2c_read>
 8006a10:	0003      	movs	r3, r0
 8006a12:	001a      	movs	r2, r3
 8006a14:	214a      	movs	r1, #74	; 0x4a
 8006a16:	187b      	adds	r3, r7, r1
 8006a18:	801a      	strh	r2, [r3, #0]
    if (ret != STATUS_OK)
 8006a1a:	187b      	adds	r3, r7, r1
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	5e9b      	ldrsh	r3, [r3, r2]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <sensirion_i2c_read_bytes+0x5a>
        return ret;
 8006a24:	234a      	movs	r3, #74	; 0x4a
 8006a26:	18fb      	adds	r3, r7, r3
 8006a28:	2200      	movs	r2, #0
 8006a2a:	5e9b      	ldrsh	r3, [r3, r2]
 8006a2c:	e053      	b.n	8006ad6 <sensirion_i2c_read_bytes+0x102>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8006a2e:	2356      	movs	r3, #86	; 0x56
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	2200      	movs	r2, #0
 8006a34:	801a      	strh	r2, [r3, #0]
 8006a36:	2354      	movs	r3, #84	; 0x54
 8006a38:	18fb      	adds	r3, r7, r3
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	e041      	b.n	8006ac4 <sensirion_i2c_read_bytes+0xf0>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8006a40:	2156      	movs	r1, #86	; 0x56
 8006a42:	187b      	adds	r3, r7, r1
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a48:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8006a4a:	187b      	adds	r3, r7, r1
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	3302      	adds	r3, #2
 8006a50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a52:	18d3      	adds	r3, r2, r3
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	001a      	movs	r2, r3
 8006a58:	2102      	movs	r1, #2
 8006a5a:	f7ff ff14 	bl	8006886 <sensirion_common_check_crc>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	001a      	movs	r2, r3
 8006a62:	214a      	movs	r1, #74	; 0x4a
 8006a64:	187b      	adds	r3, r7, r1
 8006a66:	801a      	strh	r2, [r3, #0]
        if (ret != STATUS_OK)
 8006a68:	187b      	adds	r3, r7, r1
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	5e9b      	ldrsh	r3, [r3, r2]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d004      	beq.n	8006a7c <sensirion_i2c_read_bytes+0xa8>
            return ret;
 8006a72:	234a      	movs	r3, #74	; 0x4a
 8006a74:	18fb      	adds	r3, r7, r3
 8006a76:	2200      	movs	r2, #0
 8006a78:	5e9b      	ldrsh	r3, [r3, r2]
 8006a7a:	e02c      	b.n	8006ad6 <sensirion_i2c_read_bytes+0x102>

        data[j++] = buf8[i];
 8006a7c:	2456      	movs	r4, #86	; 0x56
 8006a7e:	193b      	adds	r3, r7, r4
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a84:	18d2      	adds	r2, r2, r3
 8006a86:	2554      	movs	r5, #84	; 0x54
 8006a88:	197b      	adds	r3, r7, r5
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	1979      	adds	r1, r7, r5
 8006a8e:	1c58      	adds	r0, r3, #1
 8006a90:	8008      	strh	r0, [r1, #0]
 8006a92:	0019      	movs	r1, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	185b      	adds	r3, r3, r1
 8006a98:	7812      	ldrb	r2, [r2, #0]
 8006a9a:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8006a9c:	193b      	adds	r3, r7, r4
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006aa4:	18d2      	adds	r2, r2, r3
 8006aa6:	197b      	adds	r3, r7, r5
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	1979      	adds	r1, r7, r5
 8006aac:	1c58      	adds	r0, r3, #1
 8006aae:	8008      	strh	r0, [r1, #0]
 8006ab0:	0019      	movs	r1, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	185b      	adds	r3, r3, r1
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8006aba:	193b      	adds	r3, r7, r4
 8006abc:	193a      	adds	r2, r7, r4
 8006abe:	8812      	ldrh	r2, [r2, #0]
 8006ac0:	3203      	adds	r2, #3
 8006ac2:	801a      	strh	r2, [r3, #0]
 8006ac4:	2356      	movs	r3, #86	; 0x56
 8006ac6:	18fa      	adds	r2, r7, r3
 8006ac8:	2352      	movs	r3, #82	; 0x52
 8006aca:	18fb      	adds	r3, r7, r3
 8006acc:	8812      	ldrh	r2, [r2, #0]
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d3b5      	bcc.n	8006a40 <sensirion_i2c_read_bytes+0x6c>
    }

    return STATUS_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	b016      	add	sp, #88	; 0x58
 8006adc:	bdb0      	pop	{r4, r5, r7, pc}

08006ade <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t *data_words,
                                 uint16_t num_words) {
 8006ade:	b5b0      	push	{r4, r5, r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6039      	str	r1, [r7, #0]
 8006ae6:	0011      	movs	r1, r2
 8006ae8:	1dfb      	adds	r3, r7, #7
 8006aea:	1c02      	adds	r2, r0, #0
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	1d3b      	adds	r3, r7, #4
 8006af0:	1c0a      	adds	r2, r1, #0
 8006af2:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t i;

    ret = sensirion_i2c_read_bytes(address, (uint8_t *)data_words, num_words);
 8006af4:	250c      	movs	r5, #12
 8006af6:	197c      	adds	r4, r7, r5
 8006af8:	1d3b      	adds	r3, r7, #4
 8006afa:	881a      	ldrh	r2, [r3, #0]
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	1dfb      	adds	r3, r7, #7
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	0018      	movs	r0, r3
 8006b04:	f7ff ff66 	bl	80069d4 <sensirion_i2c_read_bytes>
 8006b08:	0003      	movs	r3, r0
 8006b0a:	8023      	strh	r3, [r4, #0]
    if (ret != STATUS_OK)
 8006b0c:	197b      	adds	r3, r7, r5
 8006b0e:	2200      	movs	r2, #0
 8006b10:	5e9b      	ldrsh	r3, [r3, r2]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <sensirion_i2c_read_words+0x42>
        return ret;
 8006b16:	230c      	movs	r3, #12
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	5e9b      	ldrsh	r3, [r3, r2]
 8006b1e:	e02d      	b.n	8006b7c <sensirion_i2c_read_words+0x9e>

    for (i = 0; i < num_words; ++i)
 8006b20:	230f      	movs	r3, #15
 8006b22:	18fb      	adds	r3, r7, r3
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	e01f      	b.n	8006b6a <sensirion_i2c_read_words+0x8c>
        data_words[i] = be16_to_cpu(data_words[i]);
 8006b2a:	200f      	movs	r0, #15
 8006b2c:	183b      	adds	r3, r7, r0
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	18d3      	adds	r3, r2, r3
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	b21a      	sxth	r2, r3
 8006b3c:	183b      	adds	r3, r7, r0
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	18cb      	adds	r3, r1, r3
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	0a1b      	lsrs	r3, r3, #8
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	b21b      	sxth	r3, r3
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	b219      	sxth	r1, r3
 8006b52:	183b      	adds	r3, r7, r0
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	18d3      	adds	r3, r2, r3
 8006b5c:	b28a      	uxth	r2, r1
 8006b5e:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i)
 8006b60:	183b      	adds	r3, r7, r0
 8006b62:	183a      	adds	r2, r7, r0
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	3201      	adds	r2, #1
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	230f      	movs	r3, #15
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	1d3a      	adds	r2, r7, #4
 8006b74:	8812      	ldrh	r2, [r2, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d8d7      	bhi.n	8006b2a <sensirion_i2c_read_words+0x4c>

    return STATUS_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b004      	add	sp, #16
 8006b82:	bdb0      	pop	{r4, r5, r7, pc}

08006b84 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8006b84:	b590      	push	{r4, r7, lr}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	0002      	movs	r2, r0
 8006b8c:	1dfb      	adds	r3, r7, #7
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	1d3b      	adds	r3, r7, #4
 8006b92:	1c0a      	adds	r2, r1, #0
 8006b94:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8006b96:	1d3b      	adds	r3, r7, #4
 8006b98:	8819      	ldrh	r1, [r3, #0]
 8006b9a:	240c      	movs	r4, #12
 8006b9c:	1938      	adds	r0, r7, r4
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f7ff fe91 	bl	80068c8 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8006ba6:	1939      	adds	r1, r7, r4
 8006ba8:	1dfb      	adds	r3, r7, #7
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2202      	movs	r2, #2
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7ff fb4b 	bl	800624a <sensirion_i2c_write>
 8006bb4:	0003      	movs	r3, r0
 8006bb6:	b21b      	sxth	r3, r3
}
 8006bb8:	0018      	movs	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b005      	add	sp, #20
 8006bbe:	bd90      	pop	{r4, r7, pc}

08006bc0 <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t *data_words,
                                          uint16_t num_words) {
 8006bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc2:	b08f      	sub	sp, #60	; 0x3c
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	0004      	movs	r4, r0
 8006bc8:	0008      	movs	r0, r1
 8006bca:	60ba      	str	r2, [r7, #8]
 8006bcc:	0019      	movs	r1, r3
 8006bce:	260f      	movs	r6, #15
 8006bd0:	19bb      	adds	r3, r7, r6
 8006bd2:	1c22      	adds	r2, r4, #0
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	18fb      	adds	r3, r7, r3
 8006bda:	1c02      	adds	r2, r0, #0
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	1dbb      	adds	r3, r7, #6
 8006be0:	1c0a      	adds	r2, r1, #0
 8006be2:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
 8006be4:	1dbb      	adds	r3, r7, #6
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b2dd      	uxtb	r5, r3
 8006bea:	2236      	movs	r2, #54	; 0x36
 8006bec:	18bc      	adds	r4, r7, r2
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	230c      	movs	r3, #12
 8006bf2:	18fb      	adds	r3, r7, r3
 8006bf4:	8819      	ldrh	r1, [r3, #0]
 8006bf6:	2314      	movs	r3, #20
 8006bf8:	18f8      	adds	r0, r7, r3
 8006bfa:	002b      	movs	r3, r5
 8006bfc:	f7ff fe64 	bl	80068c8 <sensirion_fill_cmd_send_buf>
 8006c00:	0003      	movs	r3, r0
 8006c02:	8023      	strh	r3, [r4, #0]
    return sensirion_i2c_write(address, buf, buf_size);
 8006c04:	2236      	movs	r2, #54	; 0x36
 8006c06:	18bb      	adds	r3, r7, r2
 8006c08:	881a      	ldrh	r2, [r3, #0]
 8006c0a:	2314      	movs	r3, #20
 8006c0c:	18f9      	adds	r1, r7, r3
 8006c0e:	19bb      	adds	r3, r7, r6
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f7ff fb19 	bl	800624a <sensirion_i2c_write>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	b21b      	sxth	r3, r3
}
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	b00f      	add	sp, #60	; 0x3c
 8006c22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c24 <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t *data_words,
                                       uint16_t num_words) {
 8006c24:	b5b0      	push	{r4, r5, r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60ba      	str	r2, [r7, #8]
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	240f      	movs	r4, #15
 8006c30:	193b      	adds	r3, r7, r4
 8006c32:	1c02      	adds	r2, r0, #0
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	200c      	movs	r0, #12
 8006c38:	183b      	adds	r3, r7, r0
 8006c3a:	1c0a      	adds	r2, r1, #0
 8006c3c:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 8006c3e:	183b      	adds	r3, r7, r0
 8006c40:	8819      	ldrh	r1, [r3, #0]
 8006c42:	2514      	movs	r5, #20
 8006c44:	1978      	adds	r0, r7, r5
 8006c46:	2300      	movs	r3, #0
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f7ff fe3d 	bl	80068c8 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8006c4e:	1979      	adds	r1, r7, r5
 8006c50:	193b      	adds	r3, r7, r4
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2202      	movs	r2, #2
 8006c56:	0018      	movs	r0, r3
 8006c58:	f7ff faf7 	bl	800624a <sensirion_i2c_write>
 8006c5c:	0003      	movs	r3, r0
 8006c5e:	001a      	movs	r2, r3
 8006c60:	2116      	movs	r1, #22
 8006c62:	187b      	adds	r3, r7, r1
 8006c64:	801a      	strh	r2, [r3, #0]
    if (ret != STATUS_OK)
 8006c66:	187b      	adds	r3, r7, r1
 8006c68:	2200      	movs	r2, #0
 8006c6a:	5e9b      	ldrsh	r3, [r3, r2]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <sensirion_i2c_delayed_read_cmd+0x56>
        return ret;
 8006c70:	2316      	movs	r3, #22
 8006c72:	18fb      	adds	r3, r7, r3
 8006c74:	2200      	movs	r2, #0
 8006c76:	5e9b      	ldrsh	r3, [r3, r2]
 8006c78:	e014      	b.n	8006ca4 <sensirion_i2c_delayed_read_cmd+0x80>

    if (delay_us)
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <sensirion_i2c_delayed_read_cmd+0x64>
        sensirion_sleep_usec(delay_us);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	0018      	movs	r0, r3
 8006c84:	f7ff fa98 	bl	80061b8 <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 8006c88:	2320      	movs	r3, #32
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	4694      	mov	ip, r2
 8006c8e:	44bc      	add	ip, r7
 8006c90:	4463      	add	r3, ip
 8006c92:	881a      	ldrh	r2, [r3, #0]
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	230f      	movs	r3, #15
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f7ff ff1e 	bl	8006ade <sensirion_i2c_read_words>
 8006ca2:	0003      	movs	r3, r0
}
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b006      	add	sp, #24
 8006caa:	bdb0      	pop	{r4, r5, r7, pc}

08006cac <sensirion_i2c_read_cmd>:

int16_t sensirion_i2c_read_cmd(uint8_t address, uint16_t cmd,
                               uint16_t *data_words, uint16_t num_words) {
 8006cac:	b5b0      	push	{r4, r5, r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	0004      	movs	r4, r0
 8006cb4:	0008      	movs	r0, r1
 8006cb6:	60ba      	str	r2, [r7, #8]
 8006cb8:	0019      	movs	r1, r3
 8006cba:	250f      	movs	r5, #15
 8006cbc:	197b      	adds	r3, r7, r5
 8006cbe:	1c22      	adds	r2, r4, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	240c      	movs	r4, #12
 8006cc4:	193b      	adds	r3, r7, r4
 8006cc6:	1c02      	adds	r2, r0, #0
 8006cc8:	801a      	strh	r2, [r3, #0]
 8006cca:	1dbb      	adds	r3, r7, #6
 8006ccc:	1c0a      	adds	r2, r1, #0
 8006cce:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	193b      	adds	r3, r7, r4
 8006cd4:	8819      	ldrh	r1, [r3, #0]
 8006cd6:	197b      	adds	r3, r7, r5
 8006cd8:	7818      	ldrb	r0, [r3, #0]
 8006cda:	1dbb      	adds	r3, r7, #6
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	0013      	movs	r3, r2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f7ff ff9e 	bl	8006c24 <sensirion_i2c_delayed_read_cmd>
 8006ce8:	0003      	movs	r3, r0
                                          num_words);
}
 8006cea:	0018      	movs	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b004      	add	sp, #16
 8006cf0:	bdb0      	pop	{r4, r5, r7, pc}

08006cf2 <sgp30_check_featureset>:
 *         SGP30_ERR_INVALID_PRODUCT_TYPE if the sensor is not an SGP30,
 *         SGP30_ERR_UNSUPPORTED_FEATURE_SET if the sensor does not
 *                                           have the required FS,
 *         an error code otherwise
 */
static int16_t sgp30_check_featureset(uint16_t needed_fs) {
 8006cf2:	b5b0      	push	{r4, r5, r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	0002      	movs	r2, r0
 8006cfa:	1dbb      	adds	r3, r7, #6
 8006cfc:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t fs_version;
    uint8_t product_type;

    ret = sgp30_get_feature_set_version(&fs_version, &product_type);
 8006cfe:	250e      	movs	r5, #14
 8006d00:	197c      	adds	r4, r7, r5
 8006d02:	230b      	movs	r3, #11
 8006d04:	18fa      	adds	r2, r7, r3
 8006d06:	230c      	movs	r3, #12
 8006d08:	18fb      	adds	r3, r7, r3
 8006d0a:	0011      	movs	r1, r2
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f000 f91f 	bl	8006f50 <sgp30_get_feature_set_version>
 8006d12:	0003      	movs	r3, r0
 8006d14:	8023      	strh	r3, [r4, #0]
    if (ret != STATUS_OK)
 8006d16:	197b      	adds	r3, r7, r5
 8006d18:	2200      	movs	r2, #0
 8006d1a:	5e9b      	ldrsh	r3, [r3, r2]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d004      	beq.n	8006d2a <sgp30_check_featureset+0x38>
        return ret;
 8006d20:	230e      	movs	r3, #14
 8006d22:	18fb      	adds	r3, r7, r3
 8006d24:	2200      	movs	r2, #0
 8006d26:	5e9b      	ldrsh	r3, [r3, r2]
 8006d28:	e012      	b.n	8006d50 <sgp30_check_featureset+0x5e>

    if (product_type != SGP30_PRODUCT_TYPE)
 8006d2a:	230b      	movs	r3, #11
 8006d2c:	18fb      	adds	r3, r7, r3
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <sgp30_check_featureset+0x48>
        return SGP30_ERR_INVALID_PRODUCT_TYPE;
 8006d34:	230c      	movs	r3, #12
 8006d36:	425b      	negs	r3, r3
 8006d38:	e00a      	b.n	8006d50 <sgp30_check_featureset+0x5e>

    if (fs_version < needed_fs)
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	1dba      	adds	r2, r7, #6
 8006d42:	8812      	ldrh	r2, [r2, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d902      	bls.n	8006d4e <sgp30_check_featureset+0x5c>
        return SGP30_ERR_UNSUPPORTED_FEATURE_SET;
 8006d48:	230a      	movs	r3, #10
 8006d4a:	425b      	negs	r3, r3
 8006d4c:	e000      	b.n	8006d50 <sgp30_check_featureset+0x5e>

    return STATUS_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	0018      	movs	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b004      	add	sp, #16
 8006d56:	bdb0      	pop	{r4, r5, r7, pc}

08006d58 <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 8006d5c:	2358      	movs	r3, #88	; 0x58
 8006d5e:	4a04      	ldr	r2, [pc, #16]	; (8006d70 <sgp30_measure_iaq+0x18>)
 8006d60:	0011      	movs	r1, r2
 8006d62:	0018      	movs	r0, r3
 8006d64:	f7ff ff0e 	bl	8006b84 <sensirion_i2c_write_cmd>
 8006d68:	0003      	movs	r3, r0
}
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	00002008 	.word	0x00002008

08006d74 <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t *tvoc_ppb, uint16_t *co2_eq_ppm) {
 8006d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8006d7e:	2058      	movs	r0, #88	; 0x58
 8006d80:	260e      	movs	r6, #14
 8006d82:	19bc      	adds	r4, r7, r6
 8006d84:	2508      	movs	r5, #8
 8006d86:	197b      	adds	r3, r7, r5
 8006d88:	2202      	movs	r2, #2
 8006d8a:	0019      	movs	r1, r3
 8006d8c:	f7ff fea7 	bl	8006ade <sensirion_i2c_read_words>
 8006d90:	0003      	movs	r3, r0
 8006d92:	8023      	strh	r3, [r4, #0]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 8006d94:	197b      	adds	r3, r7, r5
 8006d96:	885a      	ldrh	r2, [r3, #2]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 8006d9c:	197b      	adds	r3, r7, r5
 8006d9e:	881a      	ldrh	r2, [r3, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	801a      	strh	r2, [r3, #0]

    return ret;
 8006da4:	19bb      	adds	r3, r7, r6
 8006da6:	2200      	movs	r2, #0
 8006da8:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006daa:	0018      	movs	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b005      	add	sp, #20
 8006db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006db4 <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t *tvoc_ppb,
                                        uint16_t *co2_eq_ppm) {
 8006db4:	b5b0      	push	{r4, r5, r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 8006dbe:	250e      	movs	r5, #14
 8006dc0:	197c      	adds	r4, r7, r5
 8006dc2:	f7ff ffc9 	bl	8006d58 <sgp30_measure_iaq>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	8023      	strh	r3, [r4, #0]
    if (ret != STATUS_OK)
 8006dca:	197b      	adds	r3, r7, r5
 8006dcc:	2200      	movs	r2, #0
 8006dce:	5e9b      	ldrsh	r3, [r3, r2]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <sgp30_measure_iaq_blocking_read+0x2a>
        return ret;
 8006dd4:	230e      	movs	r3, #14
 8006dd6:	18fb      	adds	r3, r7, r3
 8006dd8:	2200      	movs	r2, #0
 8006dda:	5e9b      	ldrsh	r3, [r3, r2]
 8006ddc:	e00a      	b.n	8006df4 <sgp30_measure_iaq_blocking_read+0x40>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <sgp30_measure_iaq_blocking_read+0x48>)
 8006de0:	0018      	movs	r0, r3
 8006de2:	f7ff f9e9 	bl	80061b8 <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	0011      	movs	r1, r2
 8006dec:	0018      	movs	r0, r3
 8006dee:	f7ff ffc1 	bl	8006d74 <sgp30_read_iaq>
 8006df2:	0003      	movs	r3, r0
}
 8006df4:	0018      	movs	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b004      	add	sp, #16
 8006dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8006dfc:	00002ee0 	.word	0x00002ee0

08006e00 <sgp30_measure_raw_blocking_read>:
    uint16_t tvoc_ppb;
    return sgp30_measure_iaq_blocking_read(&tvoc_ppb, co2_eq_ppm);
}

int16_t sgp30_measure_raw_blocking_read(uint16_t *ethanol_raw_signal,
                                        uint16_t *h2_raw_signal) {
 8006e00:	b5b0      	push	{r4, r5, r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_raw();
 8006e0a:	250e      	movs	r5, #14
 8006e0c:	197c      	adds	r4, r7, r5
 8006e0e:	f000 f81d 	bl	8006e4c <sgp30_measure_raw>
 8006e12:	0003      	movs	r3, r0
 8006e14:	8023      	strh	r3, [r4, #0]
    if (ret != STATUS_OK)
 8006e16:	197b      	adds	r3, r7, r5
 8006e18:	2200      	movs	r2, #0
 8006e1a:	5e9b      	ldrsh	r3, [r3, r2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <sgp30_measure_raw_blocking_read+0x2a>
        return ret;
 8006e20:	230e      	movs	r3, #14
 8006e22:	18fb      	adds	r3, r7, r3
 8006e24:	2200      	movs	r2, #0
 8006e26:	5e9b      	ldrsh	r3, [r3, r2]
 8006e28:	e00a      	b.n	8006e40 <sgp30_measure_raw_blocking_read+0x40>

    sensirion_sleep_usec(SGP30_CMD_RAW_MEASURE_DURATION_US);
 8006e2a:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <sgp30_measure_raw_blocking_read+0x48>)
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f7ff f9c3 	bl	80061b8 <sensirion_sleep_usec>

    return sgp30_read_raw(ethanol_raw_signal, h2_raw_signal);
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	0011      	movs	r1, r2
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f000 f815 	bl	8006e68 <sgp30_read_raw>
 8006e3e:	0003      	movs	r3, r0
}
 8006e40:	0018      	movs	r0, r3
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b004      	add	sp, #16
 8006e46:	bdb0      	pop	{r4, r5, r7, pc}
 8006e48:	000061a8 	.word	0x000061a8

08006e4c <sgp30_measure_raw>:

int16_t sgp30_measure_raw() {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_RAW_MEASURE);
 8006e50:	2358      	movs	r3, #88	; 0x58
 8006e52:	4a04      	ldr	r2, [pc, #16]	; (8006e64 <sgp30_measure_raw+0x18>)
 8006e54:	0011      	movs	r1, r2
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7ff fe94 	bl	8006b84 <sensirion_i2c_write_cmd>
 8006e5c:	0003      	movs	r3, r0
}
 8006e5e:	0018      	movs	r0, r3
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	00002050 	.word	0x00002050

08006e68 <sgp30_read_raw>:

int16_t sgp30_read_raw(uint16_t *ethanol_raw_signal, uint16_t *h2_raw_signal) {
 8006e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_RAW_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8006e72:	2058      	movs	r0, #88	; 0x58
 8006e74:	260e      	movs	r6, #14
 8006e76:	19bc      	adds	r4, r7, r6
 8006e78:	2508      	movs	r5, #8
 8006e7a:	197b      	adds	r3, r7, r5
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	0019      	movs	r1, r3
 8006e80:	f7ff fe2d 	bl	8006ade <sensirion_i2c_read_words>
 8006e84:	0003      	movs	r3, r0
 8006e86:	8023      	strh	r3, [r4, #0]
                                   SGP30_CMD_RAW_MEASURE_WORDS);

    *ethanol_raw_signal = words[1];
 8006e88:	197b      	adds	r3, r7, r5
 8006e8a:	885a      	ldrh	r2, [r3, #2]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	801a      	strh	r2, [r3, #0]
    *h2_raw_signal = words[0];
 8006e90:	197b      	adds	r3, r7, r5
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	801a      	strh	r2, [r3, #0]

    return ret;
 8006e98:	19bb      	adds	r3, r7, r6
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b005      	add	sp, #20
 8006ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006ea8 <sgp30_get_iaq_baseline>:

int16_t sgp30_get_iaq_baseline(uint32_t *baseline) {
 8006ea8:	b5b0      	push	{r4, r5, r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_IAQ_BASELINE_WORDS];

    ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_GET_IAQ_BASELINE);
 8006eb0:	2358      	movs	r3, #88	; 0x58
    ret =
 8006eb2:	250e      	movs	r5, #14
 8006eb4:	197c      	adds	r4, r7, r5
 8006eb6:	4a1f      	ldr	r2, [pc, #124]	; (8006f34 <sgp30_get_iaq_baseline+0x8c>)
 8006eb8:	0011      	movs	r1, r2
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7ff fe62 	bl	8006b84 <sensirion_i2c_write_cmd>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	8023      	strh	r3, [r4, #0]

    if (ret != STATUS_OK)
 8006ec4:	197b      	adds	r3, r7, r5
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	5e9b      	ldrsh	r3, [r3, r2]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <sgp30_get_iaq_baseline+0x30>
        return ret;
 8006ece:	230e      	movs	r3, #14
 8006ed0:	18fb      	adds	r3, r7, r3
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	5e9b      	ldrsh	r3, [r3, r2]
 8006ed6:	e029      	b.n	8006f2c <sgp30_get_iaq_baseline+0x84>

    sensirion_sleep_usec(SGP30_CMD_GET_IAQ_BASELINE_DURATION_US);
 8006ed8:	4b17      	ldr	r3, [pc, #92]	; (8006f38 <sgp30_get_iaq_baseline+0x90>)
 8006eda:	0018      	movs	r0, r3
 8006edc:	f7ff f96c 	bl	80061b8 <sensirion_sleep_usec>

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8006ee0:	2058      	movs	r0, #88	; 0x58
 8006ee2:	250e      	movs	r5, #14
 8006ee4:	197c      	adds	r4, r7, r5
 8006ee6:	2308      	movs	r3, #8
 8006ee8:	18fb      	adds	r3, r7, r3
 8006eea:	2202      	movs	r2, #2
 8006eec:	0019      	movs	r1, r3
 8006eee:	f7ff fdf6 	bl	8006ade <sensirion_i2c_read_words>
 8006ef2:	0003      	movs	r3, r0
 8006ef4:	8023      	strh	r3, [r4, #0]
                                   SGP30_CMD_GET_IAQ_BASELINE_WORDS);

    if (ret != STATUS_OK)
 8006ef6:	197b      	adds	r3, r7, r5
 8006ef8:	2200      	movs	r2, #0
 8006efa:	5e9b      	ldrsh	r3, [r3, r2]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <sgp30_get_iaq_baseline+0x62>
        return ret;
 8006f00:	230e      	movs	r3, #14
 8006f02:	18fb      	adds	r3, r7, r3
 8006f04:	2200      	movs	r2, #0
 8006f06:	5e9b      	ldrsh	r3, [r3, r2]
 8006f08:	e010      	b.n	8006f2c <sgp30_get_iaq_baseline+0x84>

    *baseline = ((uint32_t)words[1] << 16) | ((uint32_t)words[0]);
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	18bb      	adds	r3, r7, r2
 8006f0e:	885b      	ldrh	r3, [r3, #2]
 8006f10:	041b      	lsls	r3, r3, #16
 8006f12:	18ba      	adds	r2, r7, r2
 8006f14:	8812      	ldrh	r2, [r2, #0]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	601a      	str	r2, [r3, #0]

    if (*baseline)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <sgp30_get_iaq_baseline+0x80>
        return STATUS_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e001      	b.n	8006f2c <sgp30_get_iaq_baseline+0x84>
    return STATUS_FAIL;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	425b      	negs	r3, r3
}
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b004      	add	sp, #16
 8006f32:	bdb0      	pop	{r4, r5, r7, pc}
 8006f34:	00002015 	.word	0x00002015
 8006f38:	00002710 	.word	0x00002710

08006f3c <sgp30_get_driver_version>:
    sensirion_sleep_usec(SGP30_CMD_SET_ABSOLUTE_HUMIDITY_DURATION_US);

    return ret;
}

const char *sgp30_get_driver_version() {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
    return SGP_DRV_VERSION_STR;
 8006f40:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <sgp30_get_driver_version+0x10>)
 8006f42:	681b      	ldr	r3, [r3, #0]
}
 8006f44:	0018      	movs	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	20000008 	.word	0x20000008

08006f50 <sgp30_get_feature_set_version>:
uint8_t sgp30_get_configured_address() {
    return SGP30_I2C_ADDRESS;
}

int16_t sgp30_get_feature_set_version(uint16_t *feature_set_version,
                                      uint8_t *product_type) {
 8006f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_FEATURESET_WORDS];

    ret = sensirion_i2c_delayed_read_cmd(SGP30_I2C_ADDRESS,
 8006f5a:	2058      	movs	r0, #88	; 0x58
 8006f5c:	260e      	movs	r6, #14
 8006f5e:	19bc      	adds	r4, r7, r6
 8006f60:	230c      	movs	r3, #12
 8006f62:	18fa      	adds	r2, r7, r3
 8006f64:	4d13      	ldr	r5, [pc, #76]	; (8006fb4 <sgp30_get_feature_set_version+0x64>)
 8006f66:	4914      	ldr	r1, [pc, #80]	; (8006fb8 <sgp30_get_feature_set_version+0x68>)
 8006f68:	2301      	movs	r3, #1
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	0013      	movs	r3, r2
 8006f6e:	002a      	movs	r2, r5
 8006f70:	f7ff fe58 	bl	8006c24 <sensirion_i2c_delayed_read_cmd>
 8006f74:	0003      	movs	r3, r0
 8006f76:	8023      	strh	r3, [r4, #0]
                                         SGP30_CMD_GET_FEATURESET,
                                         SGP30_CMD_GET_FEATURESET_DURATION_US,
                                         words, SGP30_CMD_GET_FEATURESET_WORDS);

    if (ret != STATUS_OK)
 8006f78:	19bb      	adds	r3, r7, r6
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	5e9b      	ldrsh	r3, [r3, r2]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <sgp30_get_feature_set_version+0x3c>
        return ret;
 8006f82:	230e      	movs	r3, #14
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	2200      	movs	r2, #0
 8006f88:	5e9b      	ldrsh	r3, [r3, r2]
 8006f8a:	e00f      	b.n	8006fac <sgp30_get_feature_set_version+0x5c>

    *feature_set_version = words[0] & 0x00FF;
 8006f8c:	210c      	movs	r1, #12
 8006f8e:	187b      	adds	r3, r7, r1
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	22ff      	movs	r2, #255	; 0xff
 8006f94:	4013      	ands	r3, r2
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	801a      	strh	r2, [r3, #0]
    *product_type = (uint8_t)((words[0] & 0xF000) >> 12);
 8006f9c:	187b      	adds	r3, r7, r1
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	0b1b      	lsrs	r3, r3, #12
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	701a      	strb	r2, [r3, #0]

    return STATUS_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	0018      	movs	r0, r3
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	b005      	add	sp, #20
 8006fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fb4:	00002710 	.word	0x00002710
 8006fb8:	0000202f 	.word	0x0000202f

08006fbc <sgp30_get_serial_id>:

int16_t sgp30_get_serial_id(uint64_t *serial_id) {
 8006fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fbe:	b093      	sub	sp, #76	; 0x4c
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6378      	str	r0, [r7, #52]	; 0x34
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_SERIAL_ID_WORDS];

    ret = sensirion_i2c_delayed_read_cmd(SGP30_I2C_ADDRESS,
 8006fc4:	2358      	movs	r3, #88	; 0x58
 8006fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006fc8:	230e      	movs	r3, #14
 8006fca:	2130      	movs	r1, #48	; 0x30
 8006fcc:	187a      	adds	r2, r7, r1
 8006fce:	18d6      	adds	r6, r2, r3
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	187b      	adds	r3, r7, r1
 8006fd4:	1899      	adds	r1, r3, r2
 8006fd6:	23fa      	movs	r3, #250	; 0xfa
 8006fd8:	005a      	lsls	r2, r3, #1
 8006fda:	482b      	ldr	r0, [pc, #172]	; (8007088 <sgp30_get_serial_id+0xcc>)
 8006fdc:	2303      	movs	r3, #3
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	000b      	movs	r3, r1
 8006fe2:	0001      	movs	r1, r0
 8006fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fe6:	f7ff fe1d 	bl	8006c24 <sensirion_i2c_delayed_read_cmd>
 8006fea:	0003      	movs	r3, r0
 8006fec:	8033      	strh	r3, [r6, #0]
                                         SGP30_CMD_GET_SERIAL_ID,
                                         SGP30_CMD_GET_SERIAL_ID_DURATION_US,
                                         words, SGP30_CMD_GET_SERIAL_ID_WORDS);

    if (ret != STATUS_OK)
 8006fee:	230e      	movs	r3, #14
 8006ff0:	2230      	movs	r2, #48	; 0x30
 8006ff2:	4694      	mov	ip, r2
 8006ff4:	44bc      	add	ip, r7
 8006ff6:	4463      	add	r3, ip
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	5e9b      	ldrsh	r3, [r3, r2]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <sgp30_get_serial_id+0x54>
        return ret;
 8007000:	230e      	movs	r3, #14
 8007002:	2230      	movs	r2, #48	; 0x30
 8007004:	4694      	mov	ip, r2
 8007006:	44bc      	add	ip, r7
 8007008:	4463      	add	r3, ip
 800700a:	2200      	movs	r2, #0
 800700c:	5e9b      	ldrsh	r3, [r3, r2]
 800700e:	e037      	b.n	8007080 <sgp30_get_serial_id+0xc4>

    *serial_id = (((uint64_t)words[0]) << 32) | (((uint64_t)words[1]) << 16) |
 8007010:	2208      	movs	r2, #8
 8007012:	2130      	movs	r1, #48	; 0x30
 8007014:	187b      	adds	r3, r7, r1
 8007016:	189b      	adds	r3, r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	623b      	str	r3, [r7, #32]
 800701c:	2300      	movs	r3, #0
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	001b      	movs	r3, r3
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007026:	2300      	movs	r3, #0
 8007028:	62bb      	str	r3, [r7, #40]	; 0x28
 800702a:	187b      	adds	r3, r7, r1
 800702c:	189b      	adds	r3, r3, r2
 800702e:	885b      	ldrh	r3, [r3, #2]
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
 8007036:	69b8      	ldr	r0, [r7, #24]
 8007038:	69f9      	ldr	r1, [r7, #28]
 800703a:	0003      	movs	r3, r0
 800703c:	0c1b      	lsrs	r3, r3, #16
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	0003      	movs	r3, r0
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007048:	6938      	ldr	r0, [r7, #16]
 800704a:	6979      	ldr	r1, [r7, #20]
 800704c:	0006      	movs	r6, r0
 800704e:	4333      	orrs	r3, r6
 8007050:	001c      	movs	r4, r3
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	430b      	orrs	r3, r1
 8007056:	001d      	movs	r5, r3
                 (((uint64_t)words[2]) << 0);
 8007058:	2130      	movs	r1, #48	; 0x30
 800705a:	187b      	adds	r3, r7, r1
 800705c:	189b      	adds	r3, r3, r2
 800705e:	889b      	ldrh	r3, [r3, #4]
 8007060:	60bb      	str	r3, [r7, #8]
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
    *serial_id = (((uint64_t)words[0]) << 32) | (((uint64_t)words[1]) << 16) |
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	0011      	movs	r1, r2
 800706c:	4321      	orrs	r1, r4
 800706e:	6039      	str	r1, [r7, #0]
 8007070:	432b      	orrs	r3, r5
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6019      	str	r1, [r3, #0]
 800707c:	605a      	str	r2, [r3, #4]

    return STATUS_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	0018      	movs	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	b011      	add	sp, #68	; 0x44
 8007086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007088:	00003682 	.word	0x00003682

0800708c <sgp30_iaq_init>:

int16_t sgp30_iaq_init() {
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 8007092:	2358      	movs	r3, #88	; 0x58
    int16_t ret =
 8007094:	1dbc      	adds	r4, r7, #6
 8007096:	4a09      	ldr	r2, [pc, #36]	; (80070bc <sgp30_iaq_init+0x30>)
 8007098:	0011      	movs	r1, r2
 800709a:	0018      	movs	r0, r3
 800709c:	f7ff fd72 	bl	8006b84 <sensirion_i2c_write_cmd>
 80070a0:	0003      	movs	r3, r0
 80070a2:	8023      	strh	r3, [r4, #0]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 80070a4:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <sgp30_iaq_init+0x34>)
 80070a6:	0018      	movs	r0, r3
 80070a8:	f7ff f886 	bl	80061b8 <sensirion_sleep_usec>
    return ret;
 80070ac:	1dbb      	adds	r3, r7, #6
 80070ae:	2200      	movs	r2, #0
 80070b0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80070b2:	0018      	movs	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	b003      	add	sp, #12
 80070b8:	bd90      	pop	{r4, r7, pc}
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	00002003 	.word	0x00002003
 80070c0:	00002710 	.word	0x00002710

080070c4 <sgp30_probe>:

int16_t sgp30_probe() {
 80070c4:	b590      	push	{r4, r7, lr}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
    int16_t ret = sgp30_check_featureset(0x20);
 80070ca:	1dbc      	adds	r4, r7, #6
 80070cc:	2020      	movs	r0, #32
 80070ce:	f7ff fe10 	bl	8006cf2 <sgp30_check_featureset>
 80070d2:	0003      	movs	r3, r0
 80070d4:	8023      	strh	r3, [r4, #0]

    if (ret != STATUS_OK)
 80070d6:	1dbb      	adds	r3, r7, #6
 80070d8:	2200      	movs	r2, #0
 80070da:	5e9b      	ldrsh	r3, [r3, r2]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <sgp30_probe+0x24>
        return ret;
 80070e0:	1dbb      	adds	r3, r7, #6
 80070e2:	2200      	movs	r2, #0
 80070e4:	5e9b      	ldrsh	r3, [r3, r2]
 80070e6:	e002      	b.n	80070ee <sgp30_probe+0x2a>

    return sgp30_iaq_init();
 80070e8:	f7ff ffd0 	bl	800708c <sgp30_iaq_init>
 80070ec:	0003      	movs	r3, r0
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b003      	add	sp, #12
 80070f4:	bd90      	pop	{r4, r7, pc}

080070f6 <sps30_probe>:

const char *sps_get_driver_version() {
    return "x";
}

int16_t sps30_probe() {
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b088      	sub	sp, #32
 80070fa:	af00      	add	r7, sp, #0
    char serial[SPS30_MAX_SERIAL_LEN];

    return sps30_get_serial(serial);
 80070fc:	003b      	movs	r3, r7
 80070fe:	0018      	movs	r0, r3
 8007100:	f000 f806 	bl	8007110 <sps30_get_serial>
 8007104:	0003      	movs	r3, r0
}
 8007106:	0018      	movs	r0, r3
 8007108:	46bd      	mov	sp, r7
 800710a:	b008      	add	sp, #32
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <sps30_get_serial>:
    *major = (version & 0xff00) >> 8;
    *minor = (version & 0x00ff);
    return ret;
}

int16_t sps30_get_serial(char *serial) {
 8007110:	b5b0      	push	{r4, r5, r7, lr}
 8007112:	b08e      	sub	sp, #56	; 0x38
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
    union {
        char serial[SPS30_MAX_SERIAL_LEN];
        uint16_t __enforce_alignment;
    } buffer;

    ret = sensirion_i2c_read_cmd(SPS30_I2C_ADDRESS, SPS_CMD_GET_SERIAL,
 8007118:	2532      	movs	r5, #50	; 0x32
 800711a:	197c      	adds	r4, r7, r5
 800711c:	2308      	movs	r3, #8
 800711e:	18fa      	adds	r2, r7, r3
 8007120:	4936      	ldr	r1, [pc, #216]	; (80071fc <sps30_get_serial+0xec>)
 8007122:	2310      	movs	r3, #16
 8007124:	2069      	movs	r0, #105	; 0x69
 8007126:	f7ff fdc1 	bl	8006cac <sensirion_i2c_read_cmd>
 800712a:	0003      	movs	r3, r0
 800712c:	8023      	strh	r3, [r4, #0]
                                 (uint16_t *)buffer.serial,
                                 SENSIRION_NUM_WORDS(buffer.serial));
    if (ret != STATUS_OK)
 800712e:	197b      	adds	r3, r7, r5
 8007130:	2200      	movs	r2, #0
 8007132:	5e9b      	ldrsh	r3, [r3, r2]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <sps30_get_serial+0x32>
        return ret;
 8007138:	2332      	movs	r3, #50	; 0x32
 800713a:	18fb      	adds	r3, r7, r3
 800713c:	2200      	movs	r2, #0
 800713e:	5e9b      	ldrsh	r3, [r3, r2]
 8007140:	e058      	b.n	80071f4 <sps30_get_serial+0xe4>

    SENSIRION_WORDS_TO_BYTES(buffer.serial, SENSIRION_NUM_WORDS(buffer.serial));
 8007142:	2308      	movs	r3, #8
 8007144:	18fb      	adds	r3, r7, r3
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007148:	232a      	movs	r3, #42	; 0x2a
 800714a:	18fb      	adds	r3, r7, r3
 800714c:	2210      	movs	r2, #16
 800714e:	801a      	strh	r2, [r3, #0]
 8007150:	2334      	movs	r3, #52	; 0x34
 8007152:	18fb      	adds	r3, r7, r3
 8007154:	2200      	movs	r2, #0
 8007156:	801a      	strh	r2, [r3, #0]
 8007158:	e01f      	b.n	800719a <sps30_get_serial+0x8a>
 800715a:	2034      	movs	r0, #52	; 0x34
 800715c:	183b      	adds	r3, r7, r0
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007164:	18d3      	adds	r3, r2, r3
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	b21a      	sxth	r2, r3
 800716c:	183b      	adds	r3, r7, r0
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007174:	18cb      	adds	r3, r1, r3
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	0a1b      	lsrs	r3, r3, #8
 800717a:	b29b      	uxth	r3, r3
 800717c:	b21b      	sxth	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	b219      	sxth	r1, r3
 8007182:	183b      	adds	r3, r7, r0
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800718a:	18d3      	adds	r3, r2, r3
 800718c:	b28a      	uxth	r2, r1
 800718e:	801a      	strh	r2, [r3, #0]
 8007190:	183b      	adds	r3, r7, r0
 8007192:	183a      	adds	r2, r7, r0
 8007194:	8812      	ldrh	r2, [r2, #0]
 8007196:	3201      	adds	r2, #1
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	2334      	movs	r3, #52	; 0x34
 800719c:	18fa      	adds	r2, r7, r3
 800719e:	232a      	movs	r3, #42	; 0x2a
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	8812      	ldrh	r2, [r2, #0]
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d3d7      	bcc.n	800715a <sps30_get_serial+0x4a>
    for (i = 0; i < SPS30_MAX_SERIAL_LEN; ++i) {
 80071aa:	2336      	movs	r3, #54	; 0x36
 80071ac:	18fb      	adds	r3, r7, r3
 80071ae:	2200      	movs	r2, #0
 80071b0:	801a      	strh	r2, [r3, #0]
 80071b2:	e019      	b.n	80071e8 <sps30_get_serial+0xd8>
        serial[i] = buffer.serial[i];
 80071b4:	2036      	movs	r0, #54	; 0x36
 80071b6:	183b      	adds	r3, r7, r0
 80071b8:	881a      	ldrh	r2, [r3, #0]
 80071ba:	183b      	adds	r3, r7, r0
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	18cb      	adds	r3, r1, r3
 80071c2:	2108      	movs	r1, #8
 80071c4:	1879      	adds	r1, r7, r1
 80071c6:	5c8a      	ldrb	r2, [r1, r2]
 80071c8:	701a      	strb	r2, [r3, #0]
        if (serial[i] == '\0')
 80071ca:	183b      	adds	r3, r7, r0
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	18d3      	adds	r3, r2, r3
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <sps30_get_serial+0xcc>
            return 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	e00b      	b.n	80071f4 <sps30_get_serial+0xe4>
    for (i = 0; i < SPS30_MAX_SERIAL_LEN; ++i) {
 80071dc:	2236      	movs	r2, #54	; 0x36
 80071de:	18bb      	adds	r3, r7, r2
 80071e0:	18ba      	adds	r2, r7, r2
 80071e2:	8812      	ldrh	r2, [r2, #0]
 80071e4:	3201      	adds	r2, #1
 80071e6:	801a      	strh	r2, [r3, #0]
 80071e8:	2336      	movs	r3, #54	; 0x36
 80071ea:	18fb      	adds	r3, r7, r3
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	2b1f      	cmp	r3, #31
 80071f0:	d9e0      	bls.n	80071b4 <sps30_get_serial+0xa4>
    }

    return 0;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	0018      	movs	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b00e      	add	sp, #56	; 0x38
 80071fa:	bdb0      	pop	{r4, r5, r7, pc}
 80071fc:	0000d033 	.word	0x0000d033

08007200 <sps30_start_measurement>:

int16_t sps30_start_measurement() {
 8007200:	b590      	push	{r4, r7, lr}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
    const uint16_t arg = SPS_CMD_START_MEASUREMENT_ARG;
 8007206:	1d3b      	adds	r3, r7, #4
 8007208:	22c0      	movs	r2, #192	; 0xc0
 800720a:	0092      	lsls	r2, r2, #2
 800720c:	801a      	strh	r2, [r3, #0]

    int16_t ret = sensirion_i2c_write_cmd_with_args(
 800720e:	1dbc      	adds	r4, r7, #6
 8007210:	1d3a      	adds	r2, r7, #4
 8007212:	2301      	movs	r3, #1
 8007214:	2110      	movs	r1, #16
 8007216:	2069      	movs	r0, #105	; 0x69
 8007218:	f7ff fcd2 	bl	8006bc0 <sensirion_i2c_write_cmd_with_args>
 800721c:	0003      	movs	r3, r0
 800721e:	8023      	strh	r3, [r4, #0]
        SPS30_I2C_ADDRESS, SPS_CMD_START_MEASUREMENT, &arg,
        SENSIRION_NUM_WORDS(arg));

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
 8007220:	4b05      	ldr	r3, [pc, #20]	; (8007238 <sps30_start_measurement+0x38>)
 8007222:	0018      	movs	r0, r3
 8007224:	f7fe ffc8 	bl	80061b8 <sensirion_sleep_usec>

    return ret;
 8007228:	1dbb      	adds	r3, r7, #6
 800722a:	2200      	movs	r2, #0
 800722c:	5e9b      	ldrsh	r3, [r3, r2]
}
 800722e:	0018      	movs	r0, r3
 8007230:	46bd      	mov	sp, r7
 8007232:	b003      	add	sp, #12
 8007234:	bd90      	pop	{r4, r7, pc}
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	00002710 	.word	0x00002710

0800723c <sps30_read_measurement>:
int16_t sps30_read_data_ready(uint16_t *data_ready) {
    return sensirion_i2c_read_cmd(SPS30_I2C_ADDRESS, SPS_CMD_GET_DATA_READY,
                                  data_ready, SENSIRION_NUM_WORDS(*data_ready));
}

int16_t sps30_read_measurement(struct sps30_measurement *measurement) {
 800723c:	b5b0      	push	{r4, r5, r7, lr}
 800723e:	b090      	sub	sp, #64	; 0x40
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
        uint16_t u16_value[2];
        uint32_t u32_value;
        float32_t f32_value;
    } val, data[10];

    ret = sensirion_i2c_read_cmd(SPS30_I2C_ADDRESS, SPS_CMD_READ_MEASUREMENT,
 8007244:	253c      	movs	r5, #60	; 0x3c
 8007246:	197c      	adds	r4, r7, r5
 8007248:	2308      	movs	r3, #8
 800724a:	18fa      	adds	r2, r7, r3
 800724c:	23c0      	movs	r3, #192	; 0xc0
 800724e:	0099      	lsls	r1, r3, #2
 8007250:	2314      	movs	r3, #20
 8007252:	2069      	movs	r0, #105	; 0x69
 8007254:	f7ff fd2a 	bl	8006cac <sensirion_i2c_read_cmd>
 8007258:	0003      	movs	r3, r0
 800725a:	8023      	strh	r3, [r4, #0]
                                 data->u16_value, SENSIRION_NUM_WORDS(data));
    if (ret != STATUS_OK)
 800725c:	197b      	adds	r3, r7, r5
 800725e:	2200      	movs	r2, #0
 8007260:	5e9b      	ldrsh	r3, [r3, r2]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <sps30_read_measurement+0x34>
        return ret;
 8007266:	233c      	movs	r3, #60	; 0x3c
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	2200      	movs	r2, #0
 800726c:	5e9b      	ldrsh	r3, [r3, r2]
 800726e:	e20b      	b.n	8007688 <sps30_read_measurement+0x44c>

    SENSIRION_WORDS_TO_BYTES(data->u16_value, SENSIRION_NUM_WORDS(data));
 8007270:	2308      	movs	r3, #8
 8007272:	18fb      	adds	r3, r7, r3
 8007274:	63bb      	str	r3, [r7, #56]	; 0x38
 8007276:	2336      	movs	r3, #54	; 0x36
 8007278:	18fb      	adds	r3, r7, r3
 800727a:	2214      	movs	r2, #20
 800727c:	801a      	strh	r2, [r3, #0]
 800727e:	233e      	movs	r3, #62	; 0x3e
 8007280:	18fb      	adds	r3, r7, r3
 8007282:	2200      	movs	r2, #0
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	e01f      	b.n	80072c8 <sps30_read_measurement+0x8c>
 8007288:	203e      	movs	r0, #62	; 0x3e
 800728a:	183b      	adds	r3, r7, r0
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007292:	18d3      	adds	r3, r2, r3
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	b21a      	sxth	r2, r3
 800729a:	183b      	adds	r3, r7, r0
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072a2:	18cb      	adds	r3, r1, r3
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	0a1b      	lsrs	r3, r3, #8
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	b21b      	sxth	r3, r3
 80072ac:	4313      	orrs	r3, r2
 80072ae:	b219      	sxth	r1, r3
 80072b0:	183b      	adds	r3, r7, r0
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b8:	18d3      	adds	r3, r2, r3
 80072ba:	b28a      	uxth	r2, r1
 80072bc:	801a      	strh	r2, [r3, #0]
 80072be:	183b      	adds	r3, r7, r0
 80072c0:	183a      	adds	r2, r7, r0
 80072c2:	8812      	ldrh	r2, [r2, #0]
 80072c4:	3201      	adds	r2, #1
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	233e      	movs	r3, #62	; 0x3e
 80072ca:	18fa      	adds	r2, r7, r3
 80072cc:	2336      	movs	r3, #54	; 0x36
 80072ce:	18fb      	adds	r3, r7, r3
 80072d0:	8812      	ldrh	r2, [r2, #0]
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d3d7      	bcc.n	8007288 <sps30_read_measurement+0x4c>

    idx = 0;
 80072d8:	2434      	movs	r4, #52	; 0x34
 80072da:	193b      	adds	r3, r7, r4
 80072dc:	2200      	movs	r2, #0
 80072de:	801a      	strh	r2, [r3, #0]
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 80072e0:	193b      	adds	r3, r7, r4
 80072e2:	881a      	ldrh	r2, [r3, #0]
 80072e4:	2508      	movs	r5, #8
 80072e6:	197b      	adds	r3, r7, r5
 80072e8:	0092      	lsls	r2, r2, #2
 80072ea:	58d3      	ldr	r3, [r2, r3]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	193a      	adds	r2, r7, r4
 80072f2:	8811      	ldrh	r1, [r2, #0]
 80072f4:	197a      	adds	r2, r7, r5
 80072f6:	0089      	lsls	r1, r1, #2
 80072f8:	588a      	ldr	r2, [r1, r2]
 80072fa:	b292      	uxth	r2, r2
 80072fc:	0a12      	lsrs	r2, r2, #8
 80072fe:	b292      	uxth	r2, r2
 8007300:	4313      	orrs	r3, r2
 8007302:	041a      	lsls	r2, r3, #16
 8007304:	193b      	adds	r3, r7, r4
 8007306:	8819      	ldrh	r1, [r3, #0]
 8007308:	197b      	adds	r3, r7, r5
 800730a:	0089      	lsls	r1, r1, #2
 800730c:	58cb      	ldr	r3, [r1, r3]
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	b29b      	uxth	r3, r3
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	1939      	adds	r1, r7, r4
 8007316:	8808      	ldrh	r0, [r1, #0]
 8007318:	1979      	adds	r1, r7, r5
 800731a:	0080      	lsls	r0, r0, #2
 800731c:	5841      	ldr	r1, [r0, r1]
 800731e:	0c09      	lsrs	r1, r1, #16
 8007320:	b289      	uxth	r1, r1
 8007322:	0a09      	lsrs	r1, r1, #8
 8007324:	b289      	uxth	r1, r1
 8007326:	430b      	orrs	r3, r1
 8007328:	041b      	lsls	r3, r3, #16
 800732a:	0c1b      	lsrs	r3, r3, #16
 800732c:	4313      	orrs	r3, r2
 800732e:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_1p0 = val.f32_value;
 8007330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]
    ++idx;
 8007336:	193b      	adds	r3, r7, r4
 8007338:	193a      	adds	r2, r7, r4
 800733a:	8812      	ldrh	r2, [r2, #0]
 800733c:	3201      	adds	r2, #1
 800733e:	801a      	strh	r2, [r3, #0]
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8007340:	193b      	adds	r3, r7, r4
 8007342:	881a      	ldrh	r2, [r3, #0]
 8007344:	197b      	adds	r3, r7, r5
 8007346:	0092      	lsls	r2, r2, #2
 8007348:	58d3      	ldr	r3, [r2, r3]
 800734a:	b29b      	uxth	r3, r3
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	193a      	adds	r2, r7, r4
 8007350:	8811      	ldrh	r1, [r2, #0]
 8007352:	197a      	adds	r2, r7, r5
 8007354:	0089      	lsls	r1, r1, #2
 8007356:	588a      	ldr	r2, [r1, r2]
 8007358:	b292      	uxth	r2, r2
 800735a:	0a12      	lsrs	r2, r2, #8
 800735c:	b292      	uxth	r2, r2
 800735e:	4313      	orrs	r3, r2
 8007360:	041a      	lsls	r2, r3, #16
 8007362:	193b      	adds	r3, r7, r4
 8007364:	8819      	ldrh	r1, [r3, #0]
 8007366:	197b      	adds	r3, r7, r5
 8007368:	0089      	lsls	r1, r1, #2
 800736a:	58cb      	ldr	r3, [r1, r3]
 800736c:	0c1b      	lsrs	r3, r3, #16
 800736e:	b29b      	uxth	r3, r3
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	1939      	adds	r1, r7, r4
 8007374:	8808      	ldrh	r0, [r1, #0]
 8007376:	1979      	adds	r1, r7, r5
 8007378:	0080      	lsls	r0, r0, #2
 800737a:	5841      	ldr	r1, [r0, r1]
 800737c:	0c09      	lsrs	r1, r1, #16
 800737e:	b289      	uxth	r1, r1
 8007380:	0a09      	lsrs	r1, r1, #8
 8007382:	b289      	uxth	r1, r1
 8007384:	430b      	orrs	r3, r1
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	0c1b      	lsrs	r3, r3, #16
 800738a:	4313      	orrs	r3, r2
 800738c:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_2p5 = val.f32_value;
 800738e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	605a      	str	r2, [r3, #4]
    ++idx;
 8007394:	193b      	adds	r3, r7, r4
 8007396:	193a      	adds	r2, r7, r4
 8007398:	8812      	ldrh	r2, [r2, #0]
 800739a:	3201      	adds	r2, #1
 800739c:	801a      	strh	r2, [r3, #0]
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800739e:	193b      	adds	r3, r7, r4
 80073a0:	881a      	ldrh	r2, [r3, #0]
 80073a2:	197b      	adds	r3, r7, r5
 80073a4:	0092      	lsls	r2, r2, #2
 80073a6:	58d3      	ldr	r3, [r2, r3]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	193a      	adds	r2, r7, r4
 80073ae:	8811      	ldrh	r1, [r2, #0]
 80073b0:	197a      	adds	r2, r7, r5
 80073b2:	0089      	lsls	r1, r1, #2
 80073b4:	588a      	ldr	r2, [r1, r2]
 80073b6:	b292      	uxth	r2, r2
 80073b8:	0a12      	lsrs	r2, r2, #8
 80073ba:	b292      	uxth	r2, r2
 80073bc:	4313      	orrs	r3, r2
 80073be:	041a      	lsls	r2, r3, #16
 80073c0:	193b      	adds	r3, r7, r4
 80073c2:	8819      	ldrh	r1, [r3, #0]
 80073c4:	197b      	adds	r3, r7, r5
 80073c6:	0089      	lsls	r1, r1, #2
 80073c8:	58cb      	ldr	r3, [r1, r3]
 80073ca:	0c1b      	lsrs	r3, r3, #16
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	021b      	lsls	r3, r3, #8
 80073d0:	1939      	adds	r1, r7, r4
 80073d2:	8808      	ldrh	r0, [r1, #0]
 80073d4:	1979      	adds	r1, r7, r5
 80073d6:	0080      	lsls	r0, r0, #2
 80073d8:	5841      	ldr	r1, [r0, r1]
 80073da:	0c09      	lsrs	r1, r1, #16
 80073dc:	b289      	uxth	r1, r1
 80073de:	0a09      	lsrs	r1, r1, #8
 80073e0:	b289      	uxth	r1, r1
 80073e2:	430b      	orrs	r3, r1
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	0c1b      	lsrs	r3, r3, #16
 80073e8:	4313      	orrs	r3, r2
 80073ea:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_4p0 = val.f32_value;
 80073ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	609a      	str	r2, [r3, #8]
    ++idx;
 80073f2:	193b      	adds	r3, r7, r4
 80073f4:	193a      	adds	r2, r7, r4
 80073f6:	8812      	ldrh	r2, [r2, #0]
 80073f8:	3201      	adds	r2, #1
 80073fa:	801a      	strh	r2, [r3, #0]
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 80073fc:	193b      	adds	r3, r7, r4
 80073fe:	881a      	ldrh	r2, [r3, #0]
 8007400:	197b      	adds	r3, r7, r5
 8007402:	0092      	lsls	r2, r2, #2
 8007404:	58d3      	ldr	r3, [r2, r3]
 8007406:	b29b      	uxth	r3, r3
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	193a      	adds	r2, r7, r4
 800740c:	8811      	ldrh	r1, [r2, #0]
 800740e:	197a      	adds	r2, r7, r5
 8007410:	0089      	lsls	r1, r1, #2
 8007412:	588a      	ldr	r2, [r1, r2]
 8007414:	b292      	uxth	r2, r2
 8007416:	0a12      	lsrs	r2, r2, #8
 8007418:	b292      	uxth	r2, r2
 800741a:	4313      	orrs	r3, r2
 800741c:	041a      	lsls	r2, r3, #16
 800741e:	193b      	adds	r3, r7, r4
 8007420:	8819      	ldrh	r1, [r3, #0]
 8007422:	197b      	adds	r3, r7, r5
 8007424:	0089      	lsls	r1, r1, #2
 8007426:	58cb      	ldr	r3, [r1, r3]
 8007428:	0c1b      	lsrs	r3, r3, #16
 800742a:	b29b      	uxth	r3, r3
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	1939      	adds	r1, r7, r4
 8007430:	8808      	ldrh	r0, [r1, #0]
 8007432:	1979      	adds	r1, r7, r5
 8007434:	0080      	lsls	r0, r0, #2
 8007436:	5841      	ldr	r1, [r0, r1]
 8007438:	0c09      	lsrs	r1, r1, #16
 800743a:	b289      	uxth	r1, r1
 800743c:	0a09      	lsrs	r1, r1, #8
 800743e:	b289      	uxth	r1, r1
 8007440:	430b      	orrs	r3, r1
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	0c1b      	lsrs	r3, r3, #16
 8007446:	4313      	orrs	r3, r2
 8007448:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_10p0 = val.f32_value;
 800744a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]
    ++idx;
 8007450:	193b      	adds	r3, r7, r4
 8007452:	193a      	adds	r2, r7, r4
 8007454:	8812      	ldrh	r2, [r2, #0]
 8007456:	3201      	adds	r2, #1
 8007458:	801a      	strh	r2, [r3, #0]
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800745a:	193b      	adds	r3, r7, r4
 800745c:	881a      	ldrh	r2, [r3, #0]
 800745e:	197b      	adds	r3, r7, r5
 8007460:	0092      	lsls	r2, r2, #2
 8007462:	58d3      	ldr	r3, [r2, r3]
 8007464:	b29b      	uxth	r3, r3
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	193a      	adds	r2, r7, r4
 800746a:	8811      	ldrh	r1, [r2, #0]
 800746c:	197a      	adds	r2, r7, r5
 800746e:	0089      	lsls	r1, r1, #2
 8007470:	588a      	ldr	r2, [r1, r2]
 8007472:	b292      	uxth	r2, r2
 8007474:	0a12      	lsrs	r2, r2, #8
 8007476:	b292      	uxth	r2, r2
 8007478:	4313      	orrs	r3, r2
 800747a:	041a      	lsls	r2, r3, #16
 800747c:	193b      	adds	r3, r7, r4
 800747e:	8819      	ldrh	r1, [r3, #0]
 8007480:	197b      	adds	r3, r7, r5
 8007482:	0089      	lsls	r1, r1, #2
 8007484:	58cb      	ldr	r3, [r1, r3]
 8007486:	0c1b      	lsrs	r3, r3, #16
 8007488:	b29b      	uxth	r3, r3
 800748a:	021b      	lsls	r3, r3, #8
 800748c:	1939      	adds	r1, r7, r4
 800748e:	8808      	ldrh	r0, [r1, #0]
 8007490:	1979      	adds	r1, r7, r5
 8007492:	0080      	lsls	r0, r0, #2
 8007494:	5841      	ldr	r1, [r0, r1]
 8007496:	0c09      	lsrs	r1, r1, #16
 8007498:	b289      	uxth	r1, r1
 800749a:	0a09      	lsrs	r1, r1, #8
 800749c:	b289      	uxth	r1, r1
 800749e:	430b      	orrs	r3, r1
 80074a0:	041b      	lsls	r3, r3, #16
 80074a2:	0c1b      	lsrs	r3, r3, #16
 80074a4:	4313      	orrs	r3, r2
 80074a6:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_0p5 = val.f32_value;
 80074a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	611a      	str	r2, [r3, #16]
    ++idx;
 80074ae:	193b      	adds	r3, r7, r4
 80074b0:	193a      	adds	r2, r7, r4
 80074b2:	8812      	ldrh	r2, [r2, #0]
 80074b4:	3201      	adds	r2, #1
 80074b6:	801a      	strh	r2, [r3, #0]
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 80074b8:	193b      	adds	r3, r7, r4
 80074ba:	881a      	ldrh	r2, [r3, #0]
 80074bc:	197b      	adds	r3, r7, r5
 80074be:	0092      	lsls	r2, r2, #2
 80074c0:	58d3      	ldr	r3, [r2, r3]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	193a      	adds	r2, r7, r4
 80074c8:	8811      	ldrh	r1, [r2, #0]
 80074ca:	197a      	adds	r2, r7, r5
 80074cc:	0089      	lsls	r1, r1, #2
 80074ce:	588a      	ldr	r2, [r1, r2]
 80074d0:	b292      	uxth	r2, r2
 80074d2:	0a12      	lsrs	r2, r2, #8
 80074d4:	b292      	uxth	r2, r2
 80074d6:	4313      	orrs	r3, r2
 80074d8:	041a      	lsls	r2, r3, #16
 80074da:	193b      	adds	r3, r7, r4
 80074dc:	8819      	ldrh	r1, [r3, #0]
 80074de:	197b      	adds	r3, r7, r5
 80074e0:	0089      	lsls	r1, r1, #2
 80074e2:	58cb      	ldr	r3, [r1, r3]
 80074e4:	0c1b      	lsrs	r3, r3, #16
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	1939      	adds	r1, r7, r4
 80074ec:	8808      	ldrh	r0, [r1, #0]
 80074ee:	1979      	adds	r1, r7, r5
 80074f0:	0080      	lsls	r0, r0, #2
 80074f2:	5841      	ldr	r1, [r0, r1]
 80074f4:	0c09      	lsrs	r1, r1, #16
 80074f6:	b289      	uxth	r1, r1
 80074f8:	0a09      	lsrs	r1, r1, #8
 80074fa:	b289      	uxth	r1, r1
 80074fc:	430b      	orrs	r3, r1
 80074fe:	041b      	lsls	r3, r3, #16
 8007500:	0c1b      	lsrs	r3, r3, #16
 8007502:	4313      	orrs	r3, r2
 8007504:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_1p0 = val.f32_value;
 8007506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	615a      	str	r2, [r3, #20]
    ++idx;
 800750c:	193b      	adds	r3, r7, r4
 800750e:	193a      	adds	r2, r7, r4
 8007510:	8812      	ldrh	r2, [r2, #0]
 8007512:	3201      	adds	r2, #1
 8007514:	801a      	strh	r2, [r3, #0]
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8007516:	193b      	adds	r3, r7, r4
 8007518:	881a      	ldrh	r2, [r3, #0]
 800751a:	197b      	adds	r3, r7, r5
 800751c:	0092      	lsls	r2, r2, #2
 800751e:	58d3      	ldr	r3, [r2, r3]
 8007520:	b29b      	uxth	r3, r3
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	193a      	adds	r2, r7, r4
 8007526:	8811      	ldrh	r1, [r2, #0]
 8007528:	197a      	adds	r2, r7, r5
 800752a:	0089      	lsls	r1, r1, #2
 800752c:	588a      	ldr	r2, [r1, r2]
 800752e:	b292      	uxth	r2, r2
 8007530:	0a12      	lsrs	r2, r2, #8
 8007532:	b292      	uxth	r2, r2
 8007534:	4313      	orrs	r3, r2
 8007536:	041a      	lsls	r2, r3, #16
 8007538:	193b      	adds	r3, r7, r4
 800753a:	8819      	ldrh	r1, [r3, #0]
 800753c:	197b      	adds	r3, r7, r5
 800753e:	0089      	lsls	r1, r1, #2
 8007540:	58cb      	ldr	r3, [r1, r3]
 8007542:	0c1b      	lsrs	r3, r3, #16
 8007544:	b29b      	uxth	r3, r3
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	1939      	adds	r1, r7, r4
 800754a:	8808      	ldrh	r0, [r1, #0]
 800754c:	1979      	adds	r1, r7, r5
 800754e:	0080      	lsls	r0, r0, #2
 8007550:	5841      	ldr	r1, [r0, r1]
 8007552:	0c09      	lsrs	r1, r1, #16
 8007554:	b289      	uxth	r1, r1
 8007556:	0a09      	lsrs	r1, r1, #8
 8007558:	b289      	uxth	r1, r1
 800755a:	430b      	orrs	r3, r1
 800755c:	041b      	lsls	r3, r3, #16
 800755e:	0c1b      	lsrs	r3, r3, #16
 8007560:	4313      	orrs	r3, r2
 8007562:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_2p5 = val.f32_value;
 8007564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	619a      	str	r2, [r3, #24]
    ++idx;
 800756a:	193b      	adds	r3, r7, r4
 800756c:	193a      	adds	r2, r7, r4
 800756e:	8812      	ldrh	r2, [r2, #0]
 8007570:	3201      	adds	r2, #1
 8007572:	801a      	strh	r2, [r3, #0]
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8007574:	193b      	adds	r3, r7, r4
 8007576:	881a      	ldrh	r2, [r3, #0]
 8007578:	197b      	adds	r3, r7, r5
 800757a:	0092      	lsls	r2, r2, #2
 800757c:	58d3      	ldr	r3, [r2, r3]
 800757e:	b29b      	uxth	r3, r3
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	193a      	adds	r2, r7, r4
 8007584:	8811      	ldrh	r1, [r2, #0]
 8007586:	197a      	adds	r2, r7, r5
 8007588:	0089      	lsls	r1, r1, #2
 800758a:	588a      	ldr	r2, [r1, r2]
 800758c:	b292      	uxth	r2, r2
 800758e:	0a12      	lsrs	r2, r2, #8
 8007590:	b292      	uxth	r2, r2
 8007592:	4313      	orrs	r3, r2
 8007594:	041a      	lsls	r2, r3, #16
 8007596:	193b      	adds	r3, r7, r4
 8007598:	8819      	ldrh	r1, [r3, #0]
 800759a:	197b      	adds	r3, r7, r5
 800759c:	0089      	lsls	r1, r1, #2
 800759e:	58cb      	ldr	r3, [r1, r3]
 80075a0:	0c1b      	lsrs	r3, r3, #16
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	1939      	adds	r1, r7, r4
 80075a8:	8808      	ldrh	r0, [r1, #0]
 80075aa:	1979      	adds	r1, r7, r5
 80075ac:	0080      	lsls	r0, r0, #2
 80075ae:	5841      	ldr	r1, [r0, r1]
 80075b0:	0c09      	lsrs	r1, r1, #16
 80075b2:	b289      	uxth	r1, r1
 80075b4:	0a09      	lsrs	r1, r1, #8
 80075b6:	b289      	uxth	r1, r1
 80075b8:	430b      	orrs	r3, r1
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	0c1b      	lsrs	r3, r3, #16
 80075be:	4313      	orrs	r3, r2
 80075c0:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_4p0 = val.f32_value;
 80075c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	61da      	str	r2, [r3, #28]
    ++idx;
 80075c8:	193b      	adds	r3, r7, r4
 80075ca:	193a      	adds	r2, r7, r4
 80075cc:	8812      	ldrh	r2, [r2, #0]
 80075ce:	3201      	adds	r2, #1
 80075d0:	801a      	strh	r2, [r3, #0]
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 80075d2:	193b      	adds	r3, r7, r4
 80075d4:	881a      	ldrh	r2, [r3, #0]
 80075d6:	197b      	adds	r3, r7, r5
 80075d8:	0092      	lsls	r2, r2, #2
 80075da:	58d3      	ldr	r3, [r2, r3]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	193a      	adds	r2, r7, r4
 80075e2:	8811      	ldrh	r1, [r2, #0]
 80075e4:	197a      	adds	r2, r7, r5
 80075e6:	0089      	lsls	r1, r1, #2
 80075e8:	588a      	ldr	r2, [r1, r2]
 80075ea:	b292      	uxth	r2, r2
 80075ec:	0a12      	lsrs	r2, r2, #8
 80075ee:	b292      	uxth	r2, r2
 80075f0:	4313      	orrs	r3, r2
 80075f2:	041a      	lsls	r2, r3, #16
 80075f4:	193b      	adds	r3, r7, r4
 80075f6:	8819      	ldrh	r1, [r3, #0]
 80075f8:	197b      	adds	r3, r7, r5
 80075fa:	0089      	lsls	r1, r1, #2
 80075fc:	58cb      	ldr	r3, [r1, r3]
 80075fe:	0c1b      	lsrs	r3, r3, #16
 8007600:	b29b      	uxth	r3, r3
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	1939      	adds	r1, r7, r4
 8007606:	8808      	ldrh	r0, [r1, #0]
 8007608:	1979      	adds	r1, r7, r5
 800760a:	0080      	lsls	r0, r0, #2
 800760c:	5841      	ldr	r1, [r0, r1]
 800760e:	0c09      	lsrs	r1, r1, #16
 8007610:	b289      	uxth	r1, r1
 8007612:	0a09      	lsrs	r1, r1, #8
 8007614:	b289      	uxth	r1, r1
 8007616:	430b      	orrs	r3, r1
 8007618:	041b      	lsls	r3, r3, #16
 800761a:	0c1b      	lsrs	r3, r3, #16
 800761c:	4313      	orrs	r3, r2
 800761e:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_10p0 = val.f32_value;
 8007620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	621a      	str	r2, [r3, #32]
    ++idx;
 8007626:	0020      	movs	r0, r4
 8007628:	183b      	adds	r3, r7, r0
 800762a:	183a      	adds	r2, r7, r0
 800762c:	8812      	ldrh	r2, [r2, #0]
 800762e:	3201      	adds	r2, #1
 8007630:	801a      	strh	r2, [r3, #0]
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8007632:	183b      	adds	r3, r7, r0
 8007634:	881a      	ldrh	r2, [r3, #0]
 8007636:	197b      	adds	r3, r7, r5
 8007638:	0092      	lsls	r2, r2, #2
 800763a:	58d3      	ldr	r3, [r2, r3]
 800763c:	b29b      	uxth	r3, r3
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	183a      	adds	r2, r7, r0
 8007642:	8811      	ldrh	r1, [r2, #0]
 8007644:	197a      	adds	r2, r7, r5
 8007646:	0089      	lsls	r1, r1, #2
 8007648:	588a      	ldr	r2, [r1, r2]
 800764a:	b292      	uxth	r2, r2
 800764c:	0a12      	lsrs	r2, r2, #8
 800764e:	b292      	uxth	r2, r2
 8007650:	4313      	orrs	r3, r2
 8007652:	041a      	lsls	r2, r3, #16
 8007654:	183b      	adds	r3, r7, r0
 8007656:	8819      	ldrh	r1, [r3, #0]
 8007658:	197b      	adds	r3, r7, r5
 800765a:	0089      	lsls	r1, r1, #2
 800765c:	58cb      	ldr	r3, [r1, r3]
 800765e:	0c1b      	lsrs	r3, r3, #16
 8007660:	b29b      	uxth	r3, r3
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	1839      	adds	r1, r7, r0
 8007666:	8808      	ldrh	r0, [r1, #0]
 8007668:	1979      	adds	r1, r7, r5
 800766a:	0080      	lsls	r0, r0, #2
 800766c:	5841      	ldr	r1, [r0, r1]
 800766e:	0c09      	lsrs	r1, r1, #16
 8007670:	b289      	uxth	r1, r1
 8007672:	0a09      	lsrs	r1, r1, #8
 8007674:	b289      	uxth	r1, r1
 8007676:	430b      	orrs	r3, r1
 8007678:	041b      	lsls	r3, r3, #16
 800767a:	0c1b      	lsrs	r3, r3, #16
 800767c:	4313      	orrs	r3, r2
 800767e:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->typical_particle_size = val.f32_value;
 8007680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	625a      	str	r2, [r3, #36]	; 0x24

    return 0;
 8007686:	2300      	movs	r3, #0
}
 8007688:	0018      	movs	r0, r3
 800768a:	46bd      	mov	sp, r7
 800768c:	b010      	add	sp, #64	; 0x40
 800768e:	bdb0      	pop	{r4, r5, r7, pc}

08007690 <imx_kalman_filter_init>:
 * SimpleKalmanFilter - a Kalman Filter implementation for single variable models.
 * Created by Denys Sene, January, 1, 2017.
 * Released under MIT License - see LICENSE file for details.
 */
void imx_kalman_filter_init( kalman_filter_t * kf, float error_measurement, float error_estimate, float q, float last_estimate )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
  kf->error_measure = error_measurement;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	601a      	str	r2, [r3, #0]
  kf->error_estimate = error_estimate;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	605a      	str	r2, [r3, #4]
  kf->last_estimate = last_estimate;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	60da      	str	r2, [r3, #12]
  kf->q = q;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	609a      	str	r2, [r3, #8]
}
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	46bd      	mov	sp, r7
 80076ba:	b004      	add	sp, #16
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <imx_kalman_filter_update_estimate>:

float imx_kalman_filter_update_estimate( kalman_filter_t *kf, float  measurement, float kalman_gain )
{
 80076c0:	b5b0      	push	{r4, r5, r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6178      	str	r0, [r7, #20]
 80076c8:	6139      	str	r1, [r7, #16]
 80076ca:	60fa      	str	r2, [r7, #12]
    float current_estimate;

    if( kalman_gain == 0 )  // Calculate or use provide value
 80076cc:	2100      	movs	r1, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7f8 fed8 	bl	8000484 <__aeabi_fcmpeq>
 80076d4:	1e03      	subs	r3, r0, #0
 80076d6:	d010      	beq.n	80076fa <imx_kalman_filter_update_estimate+0x3a>
        kalman_gain = kf->error_estimate / ( kf->error_estimate + kf->error_measure );
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	685c      	ldr	r4, [r3, #4]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	1c19      	adds	r1, r3, #0
 80076e6:	1c10      	adds	r0, r2, #0
 80076e8:	f7f9 f812 	bl	8000710 <__aeabi_fadd>
 80076ec:	1c03      	adds	r3, r0, #0
 80076ee:	1c19      	adds	r1, r3, #0
 80076f0:	1c20      	adds	r0, r4, #0
 80076f2:	f7f9 f9a7 	bl	8000a44 <__aeabi_fdiv>
 80076f6:	1c03      	adds	r3, r0, #0
 80076f8:	60fb      	str	r3, [r7, #12]
    current_estimate = kf->last_estimate + ( kalman_gain * ( measurement - kf->last_estimate) );
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	68dc      	ldr	r4, [r3, #12]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	1c19      	adds	r1, r3, #0
 8007704:	6938      	ldr	r0, [r7, #16]
 8007706:	f7f9 fca7 	bl	8001058 <__aeabi_fsub>
 800770a:	1c03      	adds	r3, r0, #0
 800770c:	68f9      	ldr	r1, [r7, #12]
 800770e:	1c18      	adds	r0, r3, #0
 8007710:	f7f9 fb70 	bl	8000df4 <__aeabi_fmul>
 8007714:	1c03      	adds	r3, r0, #0
 8007716:	1c19      	adds	r1, r3, #0
 8007718:	1c20      	adds	r0, r4, #0
 800771a:	f7f8 fff9 	bl	8000710 <__aeabi_fadd>
 800771e:	1c03      	adds	r3, r0, #0
 8007720:	61fb      	str	r3, [r7, #28]
    kf->error_estimate =  ( ( 1.0 - kalman_gain ) * kf->error_estimate ) + ( fabs( kf->last_estimate - current_estimate) * kf->q );
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7fb fc72 	bl	800300c <__aeabi_f2d>
 8007728:	0003      	movs	r3, r0
 800772a:	000c      	movs	r4, r1
 800772c:	001a      	movs	r2, r3
 800772e:	0023      	movs	r3, r4
 8007730:	2000      	movs	r0, #0
 8007732:	4923      	ldr	r1, [pc, #140]	; (80077c0 <imx_kalman_filter_update_estimate+0x100>)
 8007734:	f7fb f896 	bl	8002864 <__aeabi_dsub>
 8007738:	0003      	movs	r3, r0
 800773a:	000c      	movs	r4, r1
 800773c:	0025      	movs	r5, r4
 800773e:	001c      	movs	r4, r3
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	1c18      	adds	r0, r3, #0
 8007746:	f7fb fc61 	bl	800300c <__aeabi_f2d>
 800774a:	0002      	movs	r2, r0
 800774c:	000b      	movs	r3, r1
 800774e:	0020      	movs	r0, r4
 8007750:	0029      	movs	r1, r5
 8007752:	f7fa fe15 	bl	8002380 <__aeabi_dmul>
 8007756:	0003      	movs	r3, r0
 8007758:	000c      	movs	r4, r1
 800775a:	0025      	movs	r5, r4
 800775c:	001c      	movs	r4, r3
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	69f9      	ldr	r1, [r7, #28]
 8007764:	1c18      	adds	r0, r3, #0
 8007766:	f7f9 fc77 	bl	8001058 <__aeabi_fsub>
 800776a:	1c03      	adds	r3, r0, #0
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	1c18      	adds	r0, r3, #0
 8007772:	f7fb fc4b 	bl	800300c <__aeabi_f2d>
 8007776:	6038      	str	r0, [r7, #0]
 8007778:	6079      	str	r1, [r7, #4]
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	1c18      	adds	r0, r3, #0
 8007780:	f7fb fc44 	bl	800300c <__aeabi_f2d>
 8007784:	0002      	movs	r2, r0
 8007786:	000b      	movs	r3, r1
 8007788:	6838      	ldr	r0, [r7, #0]
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	f7fa fdf8 	bl	8002380 <__aeabi_dmul>
 8007790:	0002      	movs	r2, r0
 8007792:	000b      	movs	r3, r1
 8007794:	0020      	movs	r0, r4
 8007796:	0029      	movs	r1, r5
 8007798:	f7f9 fecc 	bl	8001534 <__aeabi_dadd>
 800779c:	0003      	movs	r3, r0
 800779e:	000c      	movs	r4, r1
 80077a0:	0018      	movs	r0, r3
 80077a2:	0021      	movs	r1, r4
 80077a4:	f7fb fc84 	bl	80030b0 <__aeabi_d2f>
 80077a8:	1c02      	adds	r2, r0, #0
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	605a      	str	r2, [r3, #4]
    kf->last_estimate = current_estimate;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	69fa      	ldr	r2, [r7, #28]
 80077b2:	60da      	str	r2, [r3, #12]

  return current_estimate;
 80077b4:	69fb      	ldr	r3, [r7, #28]
}
 80077b6:	1c18      	adds	r0, r3, #0
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b008      	add	sp, #32
 80077bc:	bdb0      	pop	{r4, r5, r7, pc}
 80077be:	46c0      	nop			; (mov r8, r8)
 80077c0:	3ff00000 	.word	0x3ff00000

080077c4 <system_init>:
  * @brief	Initialize all elements of the system
  * @param  None
  * @retval : None
  */
void system_init(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
	uint32_t current_time;
	/*
	 * Initialize each of the sub systems
	 */
	led_init();
 80077ca:	f7fc fc1f 	bl	800400c <led_init>
	init_led_bar();
 80077ce:	f7fc fcaf 	bl	8004130 <init_led_bar>
	current_time = HAL_GetTick();
 80077d2:	f000 f8dd 	bl	8007990 <HAL_GetTick>
 80077d6:	0003      	movs	r3, r0
 80077d8:	607b      	str	r3, [r7, #4]
	i2c_manager_init( current_time );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	0018      	movs	r0, r3
 80077de:	f7fe f95f 	bl	8005aa0 <i2c_manager_init>
}
 80077e2:	46c0      	nop			; (mov r8, r8)
 80077e4:	46bd      	mov	sp, r7
 80077e6:	b002      	add	sp, #8
 80077e8:	bd80      	pop	{r7, pc}

080077ea <imx_is_later>:
 * NOTE: Assume that the two times are no more than a quarter of the possible range of values apart.
 *
 * written by Eric Thelin 29 June 2016
 */
bool imx_is_later( uint32_t time1, uint32_t time2 )
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b086      	sub	sp, #24
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
	const uint32_t range_top_quarter = 0xC0000000;
 80077f4:	23c0      	movs	r3, #192	; 0xc0
 80077f6:	061b      	lsls	r3, r3, #24
 80077f8:	617b      	str	r3, [r7, #20]
	const uint32_t range_mid_point =   0x80000000;
 80077fa:	2380      	movs	r3, #128	; 0x80
 80077fc:	061b      	lsls	r3, r3, #24
 80077fe:	613b      	str	r3, [r7, #16]
	const uint32_t range_low_quarter = 0x40000000;
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	05db      	lsls	r3, r3, #23
 8007804:	60fb      	str	r3, [r7, #12]

	if ( time1 >= range_mid_point ) {
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	429a      	cmp	r2, r3
 800780c:	d30c      	bcc.n	8007828 <imx_is_later+0x3e>
		if ( time2 >= range_low_quarter ) {
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	429a      	cmp	r2, r3
 8007814:	d306      	bcc.n	8007824 <imx_is_later+0x3a>
			return ( time1 > time2 );
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	419b      	sbcs	r3, r3
 800781e:	425b      	negs	r3, r3
 8007820:	b2db      	uxtb	r3, r3
 8007822:	e00d      	b.n	8007840 <imx_is_later+0x56>
		}
		else {// Assume that time2 has rolled over and is really the bigger number
			return false;
 8007824:	2300      	movs	r3, #0
 8007826:	e00b      	b.n	8007840 <imx_is_later+0x56>
		}
	}
	else {// time1 is in the low half of the range

		if ( time2 <= range_top_quarter ) {
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	429a      	cmp	r2, r3
 800782e:	d806      	bhi.n	800783e <imx_is_later+0x54>
			return ( time1 > time2 );
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	419b      	sbcs	r3, r3
 8007838:	425b      	negs	r3, r3
 800783a:	b2db      	uxtb	r3, r3
 800783c:	e000      	b.n	8007840 <imx_is_later+0x56>
		}
		else {// Assume time1 has rolled over and is really the bigger number
			return true;
 800783e:	2301      	movs	r3, #1
		}
	}
}
 8007840:	0018      	movs	r0, r3
 8007842:	46bd      	mov	sp, r7
 8007844:	b006      	add	sp, #24
 8007846:	bd80      	pop	{r7, pc}

08007848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007848:	480d      	ldr	r0, [pc, #52]	; (8007880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800784a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800784c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800784e:	e003      	b.n	8007858 <LoopCopyDataInit>

08007850 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007850:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8007852:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007854:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007856:	3104      	adds	r1, #4

08007858 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007858:	480b      	ldr	r0, [pc, #44]	; (8007888 <LoopForever+0xa>)
  ldr r3, =_edata
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <LoopForever+0xe>)
  adds r2, r0, r1
 800785c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800785e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007860:	d3f6      	bcc.n	8007850 <CopyDataInit>
  ldr r2, =_sbss
 8007862:	4a0b      	ldr	r2, [pc, #44]	; (8007890 <LoopForever+0x12>)
  b LoopFillZerobss
 8007864:	e002      	b.n	800786c <LoopFillZerobss>

08007866 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007866:	2300      	movs	r3, #0
  str  r3, [r2]
 8007868:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800786a:	3204      	adds	r2, #4

0800786c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800786c:	4b09      	ldr	r3, [pc, #36]	; (8007894 <LoopForever+0x16>)
  cmp r2, r3
 800786e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007870:	d3f9      	bcc.n	8007866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007872:	f7fc fb53 	bl	8003f1c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8007876:	f004 ffdf 	bl	800c838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800787a:	f7fb fcc7 	bl	800320c <main>

0800787e <LoopForever>:

LoopForever:
    b LoopForever
 800787e:	e7fe      	b.n	800787e <LoopForever>
  ldr   r0, =_estack
 8007880:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8007884:	0800f348 	.word	0x0800f348
  ldr r0, =_sdata
 8007888:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800788c:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8007890:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8007894:	20001164 	.word	0x20001164

08007898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007898:	e7fe      	b.n	8007898 <ADC1_IRQHandler>
	...

0800789c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80078a2:	1dfb      	adds	r3, r7, #7
 80078a4:	2200      	movs	r2, #0
 80078a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078a8:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <HAL_Init+0x3c>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <HAL_Init+0x3c>)
 80078ae:	2180      	movs	r1, #128	; 0x80
 80078b0:	0049      	lsls	r1, r1, #1
 80078b2:	430a      	orrs	r2, r1
 80078b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80078b6:	2000      	movs	r0, #0
 80078b8:	f000 f810 	bl	80078dc <HAL_InitTick>
 80078bc:	1e03      	subs	r3, r0, #0
 80078be:	d003      	beq.n	80078c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80078c0:	1dfb      	adds	r3, r7, #7
 80078c2:	2201      	movs	r2, #1
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	e001      	b.n	80078cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80078c8:	f7fc f85a 	bl	8003980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80078cc:	1dfb      	adds	r3, r7, #7
 80078ce:	781b      	ldrb	r3, [r3, #0]
}
 80078d0:	0018      	movs	r0, r3
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b002      	add	sp, #8
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	40022000 	.word	0x40022000

080078dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078dc:	b590      	push	{r4, r7, lr}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80078e4:	230f      	movs	r3, #15
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80078ec:	4b1d      	ldr	r3, [pc, #116]	; (8007964 <HAL_InitTick+0x88>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d02b      	beq.n	800794c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80078f4:	4b1c      	ldr	r3, [pc, #112]	; (8007968 <HAL_InitTick+0x8c>)
 80078f6:	681c      	ldr	r4, [r3, #0]
 80078f8:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <HAL_InitTick+0x88>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	0019      	movs	r1, r3
 80078fe:	23fa      	movs	r3, #250	; 0xfa
 8007900:	0098      	lsls	r0, r3, #2
 8007902:	f7f8 fbff 	bl	8000104 <__udivsi3>
 8007906:	0003      	movs	r3, r0
 8007908:	0019      	movs	r1, r3
 800790a:	0020      	movs	r0, r4
 800790c:	f7f8 fbfa 	bl	8000104 <__udivsi3>
 8007910:	0003      	movs	r3, r0
 8007912:	0018      	movs	r0, r3
 8007914:	f000 fdcb 	bl	80084ae <HAL_SYSTICK_Config>
 8007918:	1e03      	subs	r3, r0, #0
 800791a:	d112      	bne.n	8007942 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b03      	cmp	r3, #3
 8007920:	d80a      	bhi.n	8007938 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	2301      	movs	r3, #1
 8007926:	425b      	negs	r3, r3
 8007928:	2200      	movs	r2, #0
 800792a:	0018      	movs	r0, r3
 800792c:	f000 fd9a 	bl	8008464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007930:	4b0e      	ldr	r3, [pc, #56]	; (800796c <HAL_InitTick+0x90>)
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	e00d      	b.n	8007954 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8007938:	230f      	movs	r3, #15
 800793a:	18fb      	adds	r3, r7, r3
 800793c:	2201      	movs	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e008      	b.n	8007954 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007942:	230f      	movs	r3, #15
 8007944:	18fb      	adds	r3, r7, r3
 8007946:	2201      	movs	r2, #1
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e003      	b.n	8007954 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800794c:	230f      	movs	r3, #15
 800794e:	18fb      	adds	r3, r7, r3
 8007950:	2201      	movs	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007954:	230f      	movs	r3, #15
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	781b      	ldrb	r3, [r3, #0]
}
 800795a:	0018      	movs	r0, r3
 800795c:	46bd      	mov	sp, r7
 800795e:	b005      	add	sp, #20
 8007960:	bd90      	pop	{r4, r7, pc}
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	20000010 	.word	0x20000010
 8007968:	20000000 	.word	0x20000000
 800796c:	2000000c 	.word	0x2000000c

08007970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <HAL_IncTick+0x18>)
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	4b04      	ldr	r3, [pc, #16]	; (800798c <HAL_IncTick+0x1c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	18d2      	adds	r2, r2, r3
 800797e:	4b02      	ldr	r3, [pc, #8]	; (8007988 <HAL_IncTick+0x18>)
 8007980:	601a      	str	r2, [r3, #0]
}
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	2000115c 	.word	0x2000115c
 800798c:	20000010 	.word	0x20000010

08007990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  return uwTick;
 8007994:	4b02      	ldr	r3, [pc, #8]	; (80079a0 <HAL_GetTick+0x10>)
 8007996:	681b      	ldr	r3, [r3, #0]
}
 8007998:	0018      	movs	r0, r3
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	2000115c 	.word	0x2000115c

080079a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80079ac:	f7ff fff0 	bl	8007990 <HAL_GetTick>
 80079b0:	0003      	movs	r3, r0
 80079b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	d004      	beq.n	80079c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <HAL_Delay+0x40>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	18d3      	adds	r3, r2, r3
 80079c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80079c8:	46c0      	nop			; (mov r8, r8)
 80079ca:	f7ff ffe1 	bl	8007990 <HAL_GetTick>
 80079ce:	0002      	movs	r2, r0
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d8f7      	bhi.n	80079ca <HAL_Delay+0x26>
  {
  }
}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	46bd      	mov	sp, r7
 80079de:	b004      	add	sp, #16
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	20000010 	.word	0x20000010

080079e8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a05      	ldr	r2, [pc, #20]	; (8007a0c <LL_ADC_SetCommonPathInternalCh+0x24>)
 80079f8:	401a      	ands	r2, r3
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	46bd      	mov	sp, r7
 8007a06:	b002      	add	sp, #8
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	fe3fffff 	.word	0xfe3fffff

08007a10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	23e0      	movs	r3, #224	; 0xe0
 8007a1e:	045b      	lsls	r3, r3, #17
 8007a20:	4013      	ands	r3, r2
}
 8007a22:	0018      	movs	r0, r3
 8007a24:	46bd      	mov	sp, r7
 8007a26:	b002      	add	sp, #8
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	2104      	movs	r1, #4
 8007a3e:	400a      	ands	r2, r1
 8007a40:	2107      	movs	r1, #7
 8007a42:	4091      	lsls	r1, r2
 8007a44:	000a      	movs	r2, r1
 8007a46:	43d2      	mvns	r2, r2
 8007a48:	401a      	ands	r2, r3
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2104      	movs	r1, #4
 8007a4e:	400b      	ands	r3, r1
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	4099      	lsls	r1, r3
 8007a54:	000b      	movs	r3, r1
 8007a56:	431a      	orrs	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8007a5c:	46c0      	nop			; (mov r8, r8)
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	b004      	add	sp, #16
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	211f      	movs	r1, #31
 8007a78:	400a      	ands	r2, r1
 8007a7a:	210f      	movs	r1, #15
 8007a7c:	4091      	lsls	r1, r2
 8007a7e:	000a      	movs	r2, r1
 8007a80:	43d2      	mvns	r2, r2
 8007a82:	401a      	ands	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	0e9b      	lsrs	r3, r3, #26
 8007a88:	210f      	movs	r1, #15
 8007a8a:	4019      	ands	r1, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	201f      	movs	r0, #31
 8007a90:	4003      	ands	r3, r0
 8007a92:	4099      	lsls	r1, r3
 8007a94:	000b      	movs	r3, r1
 8007a96:	431a      	orrs	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007a9c:	46c0      	nop			; (mov r8, r8)
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	b004      	add	sp, #16
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	035b      	lsls	r3, r3, #13
 8007ab6:	0b5b      	lsrs	r3, r3, #13
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007abe:	46c0      	nop			; (mov r8, r8)
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	b002      	add	sp, #8
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	0352      	lsls	r2, r2, #13
 8007ad8:	0b52      	lsrs	r2, r2, #13
 8007ada:	43d2      	mvns	r2, r2
 8007adc:	401a      	ands	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	b002      	add	sp, #8
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	0212      	lsls	r2, r2, #8
 8007b00:	43d2      	mvns	r2, r2
 8007b02:	401a      	ands	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	400b      	ands	r3, r1
 8007b0c:	4904      	ldr	r1, [pc, #16]	; (8007b20 <LL_ADC_SetChannelSamplingTime+0x34>)
 8007b0e:	400b      	ands	r3, r1
 8007b10:	431a      	orrs	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8007b16:	46c0      	nop			; (mov r8, r8)
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	b004      	add	sp, #16
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	46c0      	nop			; (mov r8, r8)
 8007b20:	07ffff00 	.word	0x07ffff00

08007b24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	4a05      	ldr	r2, [pc, #20]	; (8007b48 <LL_ADC_EnableInternalRegulator+0x24>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	2280      	movs	r2, #128	; 0x80
 8007b36:	0552      	lsls	r2, r2, #21
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	46bd      	mov	sp, r7
 8007b42:	b002      	add	sp, #8
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	6fffffe8 	.word	0x6fffffe8

08007b4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	2380      	movs	r3, #128	; 0x80
 8007b5a:	055b      	lsls	r3, r3, #21
 8007b5c:	401a      	ands	r2, r3
 8007b5e:	2380      	movs	r3, #128	; 0x80
 8007b60:	055b      	lsls	r3, r3, #21
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d101      	bne.n	8007b6a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b002      	add	sp, #8
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	2201      	movs	r2, #1
 8007b82:	4013      	ands	r3, r2
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <LL_ADC_IsEnabled+0x18>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e000      	b.n	8007b8e <LL_ADC_IsEnabled+0x1a>
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	0018      	movs	r0, r3
 8007b90:	46bd      	mov	sp, r7
 8007b92:	b002      	add	sp, #8
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	2204      	movs	r2, #4
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d101      	bne.n	8007bae <LL_ADC_REG_IsConversionOngoing+0x18>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	b002      	add	sp, #8
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bc0:	231f      	movs	r3, #31
 8007bc2:	18fb      	adds	r3, r7, r3
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e1aa      	b.n	8007f34 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10a      	bne.n	8007bfc <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	0018      	movs	r0, r3
 8007bea:	f7fb feed 	bl	80039c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2254      	movs	r2, #84	; 0x54
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	0018      	movs	r0, r3
 8007c02:	f7ff ffa3 	bl	8007b4c <LL_ADC_IsInternalRegulatorEnabled>
 8007c06:	1e03      	subs	r3, r0, #0
 8007c08:	d114      	bne.n	8007c34 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	0018      	movs	r0, r3
 8007c10:	f7ff ff88 	bl	8007b24 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007c14:	4bc9      	ldr	r3, [pc, #804]	; (8007f3c <HAL_ADC_Init+0x384>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	49c9      	ldr	r1, [pc, #804]	; (8007f40 <HAL_ADC_Init+0x388>)
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	f7f8 fa72 	bl	8000104 <__udivsi3>
 8007c20:	0003      	movs	r3, r0
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8007c26:	e002      	b.n	8007c2e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f9      	bne.n	8007c28 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	0018      	movs	r0, r3
 8007c3a:	f7ff ff87 	bl	8007b4c <LL_ADC_IsInternalRegulatorEnabled>
 8007c3e:	1e03      	subs	r3, r0, #0
 8007c40:	d10f      	bne.n	8007c62 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c46:	2210      	movs	r2, #16
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c52:	2201      	movs	r2, #1
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8007c5a:	231f      	movs	r3, #31
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	2201      	movs	r2, #1
 8007c60:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	0018      	movs	r0, r3
 8007c68:	f7ff ff95 	bl	8007b96 <LL_ADC_REG_IsConversionOngoing>
 8007c6c:	0003      	movs	r3, r0
 8007c6e:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c74:	2210      	movs	r2, #16
 8007c76:	4013      	ands	r3, r2
 8007c78:	d000      	beq.n	8007c7c <HAL_ADC_Init+0xc4>
 8007c7a:	e14e      	b.n	8007f1a <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d000      	beq.n	8007c84 <HAL_ADC_Init+0xcc>
 8007c82:	e14a      	b.n	8007f1a <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c88:	4aae      	ldr	r2, [pc, #696]	; (8007f44 <HAL_ADC_Init+0x38c>)
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f7ff ff6b 	bl	8007b74 <LL_ADC_IsEnabled>
 8007c9e:	1e03      	subs	r3, r0, #0
 8007ca0:	d137      	bne.n	8007d12 <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	2218      	movs	r2, #24
 8007caa:	4393      	bics	r3, r2
 8007cac:	0019      	movs	r1, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	0899      	lsrs	r1, r3, #2
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	0f9b      	lsrs	r3, r3, #30
 8007cca:	079a      	lsls	r2, r3, #30
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	23c0      	movs	r3, #192	; 0xc0
 8007cda:	061b      	lsls	r3, r3, #24
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d018      	beq.n	8007d12 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007ce4:	2380      	movs	r3, #128	; 0x80
 8007ce6:	05db      	lsls	r3, r3, #23
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d012      	beq.n	8007d12 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007cf0:	2380      	movs	r3, #128	; 0x80
 8007cf2:	061b      	lsls	r3, r3, #24
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d00c      	beq.n	8007d12 <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8007cf8:	4b93      	ldr	r3, [pc, #588]	; (8007f48 <HAL_ADC_Init+0x390>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a93      	ldr	r2, [pc, #588]	; (8007f4c <HAL_ADC_Init+0x394>)
 8007cfe:	4013      	ands	r3, r2
 8007d00:	0019      	movs	r1, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	23f0      	movs	r3, #240	; 0xf0
 8007d08:	039b      	lsls	r3, r3, #14
 8007d0a:	401a      	ands	r2, r3
 8007d0c:	4b8e      	ldr	r3, [pc, #568]	; (8007f48 <HAL_ADC_Init+0x390>)
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7e1b      	ldrb	r3, [r3, #24]
 8007d16:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7e5b      	ldrb	r3, [r3, #25]
 8007d1c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007d1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	7e9b      	ldrb	r3, [r3, #26]
 8007d24:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8007d26:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <HAL_ADC_Init+0x17e>
 8007d30:	2380      	movs	r3, #128	; 0x80
 8007d32:	015b      	lsls	r3, r3, #5
 8007d34:	e000      	b.n	8007d38 <HAL_ADC_Init+0x180>
 8007d36:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007d38:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8007d3e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	da04      	bge.n	8007d52 <HAL_ADC_Init+0x19a>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	e001      	b.n	8007d56 <HAL_ADC_Init+0x19e>
 8007d52:	2380      	movs	r3, #128	; 0x80
 8007d54:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8007d56:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	212c      	movs	r1, #44	; 0x2c
 8007d5c:	5c5b      	ldrb	r3, [r3, r1]
 8007d5e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8007d60:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	5c9b      	ldrb	r3, [r3, r2]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d115      	bne.n	8007d9e <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	7e9b      	ldrb	r3, [r3, #26]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2280      	movs	r2, #128	; 0x80
 8007d7e:	0252      	lsls	r2, r2, #9
 8007d80:	4313      	orrs	r3, r2
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e00b      	b.n	8007d9e <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d96:	2201      	movs	r2, #1
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007daa:	23e0      	movs	r3, #224	; 0xe0
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007db4:	4313      	orrs	r3, r2
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8007dc4:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8007dca:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8007dd0:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	223c      	movs	r2, #60	; 0x3c
 8007ddc:	5c9b      	ldrb	r3, [r3, r2]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d103      	bne.n	8007dea <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2201      	movs	r2, #1
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	4a57      	ldr	r2, [pc, #348]	; (8007f50 <HAL_ADC_Init+0x398>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	0019      	movs	r1, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	4a53      	ldr	r2, [pc, #332]	; (8007f54 <HAL_ADC_Init+0x39c>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	0019      	movs	r1, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6818      	ldr	r0, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	001a      	movs	r2, r3
 8007e20:	2100      	movs	r1, #0
 8007e22:	f7ff fe02 	bl	8007a2a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	494a      	ldr	r1, [pc, #296]	; (8007f58 <HAL_ADC_Init+0x3a0>)
 8007e30:	001a      	movs	r2, r3
 8007e32:	f7ff fdfa 	bl	8007a2a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d109      	bne.n	8007e52 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2110      	movs	r1, #16
 8007e4a:	4249      	negs	r1, r1
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8007e50:	e03c      	b.n	8007ecc <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691a      	ldr	r2, [r3, #16]
 8007e56:	2380      	movs	r3, #128	; 0x80
 8007e58:	039b      	lsls	r3, r3, #14
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d136      	bne.n	8007ecc <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	e00c      	b.n	8007e7e <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	40da      	lsrs	r2, r3
 8007e6e:	0013      	movs	r3, r2
 8007e70:	220f      	movs	r2, #15
 8007e72:	4013      	ands	r3, r2
 8007e74:	2b0f      	cmp	r3, #15
 8007e76:	d006      	beq.n	8007e86 <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	613b      	str	r3, [r7, #16]
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b07      	cmp	r3, #7
 8007e82:	d9ef      	bls.n	8007e64 <HAL_ADC_Init+0x2ac>
 8007e84:	e000      	b.n	8007e88 <HAL_ADC_Init+0x2d0>
        {
          break;
 8007e86:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d109      	bne.n	8007ea2 <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2110      	movs	r1, #16
 8007e9a:	4249      	negs	r1, r1
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	629a      	str	r2, [r3, #40]	; 0x28
 8007ea0:	e014      	b.n	8007ecc <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	4a2b      	ldr	r2, [pc, #172]	; (8007f5c <HAL_ADC_Init+0x3a4>)
 8007eae:	4694      	mov	ip, r2
 8007eb0:	4463      	add	r3, ip
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	221c      	movs	r2, #28
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	2210      	movs	r2, #16
 8007eba:	4252      	negs	r2, r2
 8007ebc:	409a      	lsls	r2, r3
 8007ebe:	0011      	movs	r1, r2
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	4a23      	ldr	r2, [pc, #140]	; (8007f60 <HAL_ADC_Init+0x3a8>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d10b      	bne.n	8007ef4 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee6:	2203      	movs	r2, #3
 8007ee8:	4393      	bics	r3, r2
 8007eea:	2201      	movs	r2, #1
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8007ef2:	e01c      	b.n	8007f2e <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef8:	2212      	movs	r2, #18
 8007efa:	4393      	bics	r3, r2
 8007efc:	2210      	movs	r2, #16
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f08:	2201      	movs	r2, #1
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8007f10:	231f      	movs	r3, #31
 8007f12:	18fb      	adds	r3, r7, r3
 8007f14:	2201      	movs	r2, #1
 8007f16:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8007f18:	e009      	b.n	8007f2e <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1e:	2210      	movs	r2, #16
 8007f20:	431a      	orrs	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8007f26:	231f      	movs	r3, #31
 8007f28:	18fb      	adds	r3, r7, r3
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007f2e:	231f      	movs	r3, #31
 8007f30:	18fb      	adds	r3, r7, r3
 8007f32:	781b      	ldrb	r3, [r3, #0]
}
 8007f34:	0018      	movs	r0, r3
 8007f36:	46bd      	mov	sp, r7
 8007f38:	b008      	add	sp, #32
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000000 	.word	0x20000000
 8007f40:	00030d40 	.word	0x00030d40
 8007f44:	fffffefd 	.word	0xfffffefd
 8007f48:	40012708 	.word	0x40012708
 8007f4c:	ffc3ffff 	.word	0xffc3ffff
 8007f50:	fffe0219 	.word	0xfffe0219
 8007f54:	dffffc02 	.word	0xdffffc02
 8007f58:	07ffff04 	.word	0x07ffff04
 8007f5c:	3fffffff 	.word	0x3fffffff
 8007f60:	833fffe7 	.word	0x833fffe7

08007f64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f6e:	2317      	movs	r3, #23
 8007f70:	18fb      	adds	r3, r7, r3
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2254      	movs	r2, #84	; 0x54
 8007f7e:	5c9b      	ldrb	r3, [r3, r2]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d101      	bne.n	8007f88 <HAL_ADC_ConfigChannel+0x24>
 8007f84:	2302      	movs	r3, #2
 8007f86:	e1bc      	b.n	8008302 <HAL_ADC_ConfigChannel+0x39e>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2254      	movs	r2, #84	; 0x54
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	0018      	movs	r0, r3
 8007f96:	f7ff fdfe 	bl	8007b96 <LL_ADC_REG_IsConversionOngoing>
 8007f9a:	1e03      	subs	r3, r0, #0
 8007f9c:	d000      	beq.n	8007fa0 <HAL_ADC_ConfigChannel+0x3c>
 8007f9e:	e19f      	b.n	80082e0 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d100      	bne.n	8007faa <HAL_ADC_ConfigChannel+0x46>
 8007fa8:	e13e      	b.n	8008228 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691a      	ldr	r2, [r3, #16]
 8007fae:	2380      	movs	r3, #128	; 0x80
 8007fb0:	061b      	lsls	r3, r3, #24
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d004      	beq.n	8007fc0 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007fba:	4abf      	ldr	r2, [pc, #764]	; (80082b8 <HAL_ADC_ConfigChannel+0x354>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d108      	bne.n	8007fd2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	0019      	movs	r1, r3
 8007fca:	0010      	movs	r0, r2
 8007fcc:	f7ff fd6a 	bl	8007aa4 <LL_ADC_REG_SetSequencerChAdd>
 8007fd0:	e0c9      	b.n	8008166 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	211f      	movs	r1, #31
 8007fdc:	400b      	ands	r3, r1
 8007fde:	210f      	movs	r1, #15
 8007fe0:	4099      	lsls	r1, r3
 8007fe2:	000b      	movs	r3, r1
 8007fe4:	43db      	mvns	r3, r3
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	0019      	movs	r1, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	035b      	lsls	r3, r3, #13
 8007ff0:	0b5b      	lsrs	r3, r3, #13
 8007ff2:	d105      	bne.n	8008000 <HAL_ADC_ConfigChannel+0x9c>
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	0e9b      	lsrs	r3, r3, #26
 8007ffa:	221f      	movs	r2, #31
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	e098      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2201      	movs	r2, #1
 8008006:	4013      	ands	r3, r2
 8008008:	d000      	beq.n	800800c <HAL_ADC_ConfigChannel+0xa8>
 800800a:	e091      	b.n	8008130 <HAL_ADC_ConfigChannel+0x1cc>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2202      	movs	r2, #2
 8008012:	4013      	ands	r3, r2
 8008014:	d000      	beq.n	8008018 <HAL_ADC_ConfigChannel+0xb4>
 8008016:	e089      	b.n	800812c <HAL_ADC_ConfigChannel+0x1c8>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2204      	movs	r2, #4
 800801e:	4013      	ands	r3, r2
 8008020:	d000      	beq.n	8008024 <HAL_ADC_ConfigChannel+0xc0>
 8008022:	e081      	b.n	8008128 <HAL_ADC_ConfigChannel+0x1c4>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2208      	movs	r2, #8
 800802a:	4013      	ands	r3, r2
 800802c:	d000      	beq.n	8008030 <HAL_ADC_ConfigChannel+0xcc>
 800802e:	e079      	b.n	8008124 <HAL_ADC_ConfigChannel+0x1c0>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2210      	movs	r2, #16
 8008036:	4013      	ands	r3, r2
 8008038:	d000      	beq.n	800803c <HAL_ADC_ConfigChannel+0xd8>
 800803a:	e071      	b.n	8008120 <HAL_ADC_ConfigChannel+0x1bc>
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2220      	movs	r2, #32
 8008042:	4013      	ands	r3, r2
 8008044:	d000      	beq.n	8008048 <HAL_ADC_ConfigChannel+0xe4>
 8008046:	e069      	b.n	800811c <HAL_ADC_ConfigChannel+0x1b8>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2240      	movs	r2, #64	; 0x40
 800804e:	4013      	ands	r3, r2
 8008050:	d000      	beq.n	8008054 <HAL_ADC_ConfigChannel+0xf0>
 8008052:	e061      	b.n	8008118 <HAL_ADC_ConfigChannel+0x1b4>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2280      	movs	r2, #128	; 0x80
 800805a:	4013      	ands	r3, r2
 800805c:	d000      	beq.n	8008060 <HAL_ADC_ConfigChannel+0xfc>
 800805e:	e059      	b.n	8008114 <HAL_ADC_ConfigChannel+0x1b0>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	2380      	movs	r3, #128	; 0x80
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	4013      	ands	r3, r2
 800806a:	d151      	bne.n	8008110 <HAL_ADC_ConfigChannel+0x1ac>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	2380      	movs	r3, #128	; 0x80
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4013      	ands	r3, r2
 8008076:	d149      	bne.n	800810c <HAL_ADC_ConfigChannel+0x1a8>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	2380      	movs	r3, #128	; 0x80
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	4013      	ands	r3, r2
 8008082:	d141      	bne.n	8008108 <HAL_ADC_ConfigChannel+0x1a4>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	2380      	movs	r3, #128	; 0x80
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	4013      	ands	r3, r2
 800808e:	d139      	bne.n	8008104 <HAL_ADC_ConfigChannel+0x1a0>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	2380      	movs	r3, #128	; 0x80
 8008096:	015b      	lsls	r3, r3, #5
 8008098:	4013      	ands	r3, r2
 800809a:	d131      	bne.n	8008100 <HAL_ADC_ConfigChannel+0x19c>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	2380      	movs	r3, #128	; 0x80
 80080a2:	019b      	lsls	r3, r3, #6
 80080a4:	4013      	ands	r3, r2
 80080a6:	d129      	bne.n	80080fc <HAL_ADC_ConfigChannel+0x198>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	2380      	movs	r3, #128	; 0x80
 80080ae:	01db      	lsls	r3, r3, #7
 80080b0:	4013      	ands	r3, r2
 80080b2:	d121      	bne.n	80080f8 <HAL_ADC_ConfigChannel+0x194>
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	2380      	movs	r3, #128	; 0x80
 80080ba:	021b      	lsls	r3, r3, #8
 80080bc:	4013      	ands	r3, r2
 80080be:	d119      	bne.n	80080f4 <HAL_ADC_ConfigChannel+0x190>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	2380      	movs	r3, #128	; 0x80
 80080c6:	025b      	lsls	r3, r3, #9
 80080c8:	4013      	ands	r3, r2
 80080ca:	d111      	bne.n	80080f0 <HAL_ADC_ConfigChannel+0x18c>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	2380      	movs	r3, #128	; 0x80
 80080d2:	029b      	lsls	r3, r3, #10
 80080d4:	4013      	ands	r3, r2
 80080d6:	d109      	bne.n	80080ec <HAL_ADC_ConfigChannel+0x188>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	02db      	lsls	r3, r3, #11
 80080e0:	4013      	ands	r3, r2
 80080e2:	d001      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0x184>
 80080e4:	2312      	movs	r3, #18
 80080e6:	e024      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 80080e8:	2300      	movs	r3, #0
 80080ea:	e022      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 80080ec:	2311      	movs	r3, #17
 80080ee:	e020      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 80080f0:	2310      	movs	r3, #16
 80080f2:	e01e      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 80080f4:	230f      	movs	r3, #15
 80080f6:	e01c      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 80080f8:	230e      	movs	r3, #14
 80080fa:	e01a      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 80080fc:	230d      	movs	r3, #13
 80080fe:	e018      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008100:	230c      	movs	r3, #12
 8008102:	e016      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008104:	230b      	movs	r3, #11
 8008106:	e014      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008108:	230a      	movs	r3, #10
 800810a:	e012      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 800810c:	2309      	movs	r3, #9
 800810e:	e010      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008110:	2308      	movs	r3, #8
 8008112:	e00e      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008114:	2307      	movs	r3, #7
 8008116:	e00c      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008118:	2306      	movs	r3, #6
 800811a:	e00a      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 800811c:	2305      	movs	r3, #5
 800811e:	e008      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008120:	2304      	movs	r3, #4
 8008122:	e006      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008124:	2303      	movs	r3, #3
 8008126:	e004      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008128:	2302      	movs	r3, #2
 800812a:	e002      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1ce>
 8008130:	2300      	movs	r3, #0
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	6852      	ldr	r2, [r2, #4]
 8008136:	201f      	movs	r0, #31
 8008138:	4002      	ands	r2, r0
 800813a:	4093      	lsls	r3, r2
 800813c:	000a      	movs	r2, r1
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	089b      	lsrs	r3, r3, #2
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	429a      	cmp	r2, r3
 8008152:	d808      	bhi.n	8008166 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6818      	ldr	r0, [r3, #0]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	6859      	ldr	r1, [r3, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	001a      	movs	r2, r3
 8008162:	f7ff fc7f 	bl	8007a64 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6818      	ldr	r0, [r3, #0]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	6819      	ldr	r1, [r3, #0]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	001a      	movs	r2, r3
 8008174:	f7ff fcba 	bl	8007aec <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	db00      	blt.n	8008182 <HAL_ADC_ConfigChannel+0x21e>
 8008180:	e0b8      	b.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008182:	4b4e      	ldr	r3, [pc, #312]	; (80082bc <HAL_ADC_ConfigChannel+0x358>)
 8008184:	0018      	movs	r0, r3
 8008186:	f7ff fc43 	bl	8007a10 <LL_ADC_GetCommonPathInternalCh>
 800818a:	0003      	movs	r3, r0
 800818c:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a4b      	ldr	r2, [pc, #300]	; (80082c0 <HAL_ADC_ConfigChannel+0x35c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d11d      	bne.n	80081d4 <HAL_ADC_ConfigChannel+0x270>
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	2380      	movs	r3, #128	; 0x80
 800819c:	041b      	lsls	r3, r3, #16
 800819e:	4013      	ands	r3, r2
 80081a0:	d118      	bne.n	80081d4 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2280      	movs	r2, #128	; 0x80
 80081a6:	0412      	lsls	r2, r2, #16
 80081a8:	4313      	orrs	r3, r2
 80081aa:	4a44      	ldr	r2, [pc, #272]	; (80082bc <HAL_ADC_ConfigChannel+0x358>)
 80081ac:	0019      	movs	r1, r3
 80081ae:	0010      	movs	r0, r2
 80081b0:	f7ff fc1a 	bl	80079e8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80081b4:	4b43      	ldr	r3, [pc, #268]	; (80082c4 <HAL_ADC_ConfigChannel+0x360>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4943      	ldr	r1, [pc, #268]	; (80082c8 <HAL_ADC_ConfigChannel+0x364>)
 80081ba:	0018      	movs	r0, r3
 80081bc:	f7f7 ffa2 	bl	8000104 <__udivsi3>
 80081c0:	0003      	movs	r3, r0
 80081c2:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80081c4:	e002      	b.n	80081cc <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f9      	bne.n	80081c6 <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80081d2:	e08f      	b.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a3c      	ldr	r2, [pc, #240]	; (80082cc <HAL_ADC_ConfigChannel+0x368>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d10e      	bne.n	80081fc <HAL_ADC_ConfigChannel+0x298>
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	2380      	movs	r3, #128	; 0x80
 80081e2:	045b      	lsls	r3, r3, #17
 80081e4:	4013      	ands	r3, r2
 80081e6:	d109      	bne.n	80081fc <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2280      	movs	r2, #128	; 0x80
 80081ec:	0452      	lsls	r2, r2, #17
 80081ee:	4313      	orrs	r3, r2
 80081f0:	4a32      	ldr	r2, [pc, #200]	; (80082bc <HAL_ADC_ConfigChannel+0x358>)
 80081f2:	0019      	movs	r1, r3
 80081f4:	0010      	movs	r0, r2
 80081f6:	f7ff fbf7 	bl	80079e8 <LL_ADC_SetCommonPathInternalCh>
 80081fa:	e07b      	b.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a33      	ldr	r2, [pc, #204]	; (80082d0 <HAL_ADC_ConfigChannel+0x36c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d000      	beq.n	8008208 <HAL_ADC_ConfigChannel+0x2a4>
 8008206:	e075      	b.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	2380      	movs	r3, #128	; 0x80
 800820c:	03db      	lsls	r3, r3, #15
 800820e:	4013      	ands	r3, r2
 8008210:	d000      	beq.n	8008214 <HAL_ADC_ConfigChannel+0x2b0>
 8008212:	e06f      	b.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	2280      	movs	r2, #128	; 0x80
 8008218:	03d2      	lsls	r2, r2, #15
 800821a:	4313      	orrs	r3, r2
 800821c:	4a27      	ldr	r2, [pc, #156]	; (80082bc <HAL_ADC_ConfigChannel+0x358>)
 800821e:	0019      	movs	r1, r3
 8008220:	0010      	movs	r0, r2
 8008222:	f7ff fbe1 	bl	80079e8 <LL_ADC_SetCommonPathInternalCh>
 8008226:	e065      	b.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	2380      	movs	r3, #128	; 0x80
 800822e:	061b      	lsls	r3, r3, #24
 8008230:	429a      	cmp	r2, r3
 8008232:	d004      	beq.n	800823e <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8008238:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <HAL_ADC_ConfigChannel+0x354>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d107      	bne.n	800824e <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	0019      	movs	r1, r3
 8008248:	0010      	movs	r0, r2
 800824a:	f7ff fc3c 	bl	8007ac6 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	da4e      	bge.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008256:	4b19      	ldr	r3, [pc, #100]	; (80082bc <HAL_ADC_ConfigChannel+0x358>)
 8008258:	0018      	movs	r0, r3
 800825a:	f7ff fbd9 	bl	8007a10 <LL_ADC_GetCommonPathInternalCh>
 800825e:	0003      	movs	r3, r0
 8008260:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a16      	ldr	r2, [pc, #88]	; (80082c0 <HAL_ADC_ConfigChannel+0x35c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d108      	bne.n	800827e <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	4a19      	ldr	r2, [pc, #100]	; (80082d4 <HAL_ADC_ConfigChannel+0x370>)
 8008270:	4013      	ands	r3, r2
 8008272:	4a12      	ldr	r2, [pc, #72]	; (80082bc <HAL_ADC_ConfigChannel+0x358>)
 8008274:	0019      	movs	r1, r3
 8008276:	0010      	movs	r0, r2
 8008278:	f7ff fbb6 	bl	80079e8 <LL_ADC_SetCommonPathInternalCh>
 800827c:	e03a      	b.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a12      	ldr	r2, [pc, #72]	; (80082cc <HAL_ADC_ConfigChannel+0x368>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d108      	bne.n	800829a <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	4a13      	ldr	r2, [pc, #76]	; (80082d8 <HAL_ADC_ConfigChannel+0x374>)
 800828c:	4013      	ands	r3, r2
 800828e:	4a0b      	ldr	r2, [pc, #44]	; (80082bc <HAL_ADC_ConfigChannel+0x358>)
 8008290:	0019      	movs	r1, r3
 8008292:	0010      	movs	r0, r2
 8008294:	f7ff fba8 	bl	80079e8 <LL_ADC_SetCommonPathInternalCh>
 8008298:	e02c      	b.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a0c      	ldr	r2, [pc, #48]	; (80082d0 <HAL_ADC_ConfigChannel+0x36c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d127      	bne.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	4a0d      	ldr	r2, [pc, #52]	; (80082dc <HAL_ADC_ConfigChannel+0x378>)
 80082a8:	4013      	ands	r3, r2
 80082aa:	4a04      	ldr	r2, [pc, #16]	; (80082bc <HAL_ADC_ConfigChannel+0x358>)
 80082ac:	0019      	movs	r1, r3
 80082ae:	0010      	movs	r0, r2
 80082b0:	f7ff fb9a 	bl	80079e8 <LL_ADC_SetCommonPathInternalCh>
 80082b4:	e01e      	b.n	80082f4 <HAL_ADC_ConfigChannel+0x390>
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	80000004 	.word	0x80000004
 80082bc:	40012708 	.word	0x40012708
 80082c0:	b0001000 	.word	0xb0001000
 80082c4:	20000000 	.word	0x20000000
 80082c8:	00030d40 	.word	0x00030d40
 80082cc:	b8004000 	.word	0xb8004000
 80082d0:	b4002000 	.word	0xb4002000
 80082d4:	ff7fffff 	.word	0xff7fffff
 80082d8:	feffffff 	.word	0xfeffffff
 80082dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e4:	2220      	movs	r2, #32
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80082ec:	2317      	movs	r3, #23
 80082ee:	18fb      	adds	r3, r7, r3
 80082f0:	2201      	movs	r2, #1
 80082f2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2254      	movs	r2, #84	; 0x54
 80082f8:	2100      	movs	r1, #0
 80082fa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80082fc:	2317      	movs	r3, #23
 80082fe:	18fb      	adds	r3, r7, r3
 8008300:	781b      	ldrb	r3, [r3, #0]
}
 8008302:	0018      	movs	r0, r3
 8008304:	46bd      	mov	sp, r7
 8008306:	b006      	add	sp, #24
 8008308:	bd80      	pop	{r7, pc}
 800830a:	46c0      	nop			; (mov r8, r8)

0800830c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	0002      	movs	r2, r0
 8008314:	1dfb      	adds	r3, r7, #7
 8008316:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008318:	1dfb      	adds	r3, r7, #7
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b7f      	cmp	r3, #127	; 0x7f
 800831e:	d809      	bhi.n	8008334 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008320:	1dfb      	adds	r3, r7, #7
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	001a      	movs	r2, r3
 8008326:	231f      	movs	r3, #31
 8008328:	401a      	ands	r2, r3
 800832a:	4b04      	ldr	r3, [pc, #16]	; (800833c <__NVIC_EnableIRQ+0x30>)
 800832c:	2101      	movs	r1, #1
 800832e:	4091      	lsls	r1, r2
 8008330:	000a      	movs	r2, r1
 8008332:	601a      	str	r2, [r3, #0]
  }
}
 8008334:	46c0      	nop			; (mov r8, r8)
 8008336:	46bd      	mov	sp, r7
 8008338:	b002      	add	sp, #8
 800833a:	bd80      	pop	{r7, pc}
 800833c:	e000e100 	.word	0xe000e100

08008340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008340:	b590      	push	{r4, r7, lr}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	0002      	movs	r2, r0
 8008348:	6039      	str	r1, [r7, #0]
 800834a:	1dfb      	adds	r3, r7, #7
 800834c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800834e:	1dfb      	adds	r3, r7, #7
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b7f      	cmp	r3, #127	; 0x7f
 8008354:	d828      	bhi.n	80083a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008356:	4a2f      	ldr	r2, [pc, #188]	; (8008414 <__NVIC_SetPriority+0xd4>)
 8008358:	1dfb      	adds	r3, r7, #7
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	b25b      	sxtb	r3, r3
 800835e:	089b      	lsrs	r3, r3, #2
 8008360:	33c0      	adds	r3, #192	; 0xc0
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	589b      	ldr	r3, [r3, r2]
 8008366:	1dfa      	adds	r2, r7, #7
 8008368:	7812      	ldrb	r2, [r2, #0]
 800836a:	0011      	movs	r1, r2
 800836c:	2203      	movs	r2, #3
 800836e:	400a      	ands	r2, r1
 8008370:	00d2      	lsls	r2, r2, #3
 8008372:	21ff      	movs	r1, #255	; 0xff
 8008374:	4091      	lsls	r1, r2
 8008376:	000a      	movs	r2, r1
 8008378:	43d2      	mvns	r2, r2
 800837a:	401a      	ands	r2, r3
 800837c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	019b      	lsls	r3, r3, #6
 8008382:	22ff      	movs	r2, #255	; 0xff
 8008384:	401a      	ands	r2, r3
 8008386:	1dfb      	adds	r3, r7, #7
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	0018      	movs	r0, r3
 800838c:	2303      	movs	r3, #3
 800838e:	4003      	ands	r3, r0
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008394:	481f      	ldr	r0, [pc, #124]	; (8008414 <__NVIC_SetPriority+0xd4>)
 8008396:	1dfb      	adds	r3, r7, #7
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	b25b      	sxtb	r3, r3
 800839c:	089b      	lsrs	r3, r3, #2
 800839e:	430a      	orrs	r2, r1
 80083a0:	33c0      	adds	r3, #192	; 0xc0
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80083a6:	e031      	b.n	800840c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083a8:	4a1b      	ldr	r2, [pc, #108]	; (8008418 <__NVIC_SetPriority+0xd8>)
 80083aa:	1dfb      	adds	r3, r7, #7
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	0019      	movs	r1, r3
 80083b0:	230f      	movs	r3, #15
 80083b2:	400b      	ands	r3, r1
 80083b4:	3b08      	subs	r3, #8
 80083b6:	089b      	lsrs	r3, r3, #2
 80083b8:	3306      	adds	r3, #6
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	18d3      	adds	r3, r2, r3
 80083be:	3304      	adds	r3, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	1dfa      	adds	r2, r7, #7
 80083c4:	7812      	ldrb	r2, [r2, #0]
 80083c6:	0011      	movs	r1, r2
 80083c8:	2203      	movs	r2, #3
 80083ca:	400a      	ands	r2, r1
 80083cc:	00d2      	lsls	r2, r2, #3
 80083ce:	21ff      	movs	r1, #255	; 0xff
 80083d0:	4091      	lsls	r1, r2
 80083d2:	000a      	movs	r2, r1
 80083d4:	43d2      	mvns	r2, r2
 80083d6:	401a      	ands	r2, r3
 80083d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	019b      	lsls	r3, r3, #6
 80083de:	22ff      	movs	r2, #255	; 0xff
 80083e0:	401a      	ands	r2, r3
 80083e2:	1dfb      	adds	r3, r7, #7
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	0018      	movs	r0, r3
 80083e8:	2303      	movs	r3, #3
 80083ea:	4003      	ands	r3, r0
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083f0:	4809      	ldr	r0, [pc, #36]	; (8008418 <__NVIC_SetPriority+0xd8>)
 80083f2:	1dfb      	adds	r3, r7, #7
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	001c      	movs	r4, r3
 80083f8:	230f      	movs	r3, #15
 80083fa:	4023      	ands	r3, r4
 80083fc:	3b08      	subs	r3, #8
 80083fe:	089b      	lsrs	r3, r3, #2
 8008400:	430a      	orrs	r2, r1
 8008402:	3306      	adds	r3, #6
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	18c3      	adds	r3, r0, r3
 8008408:	3304      	adds	r3, #4
 800840a:	601a      	str	r2, [r3, #0]
}
 800840c:	46c0      	nop			; (mov r8, r8)
 800840e:	46bd      	mov	sp, r7
 8008410:	b003      	add	sp, #12
 8008412:	bd90      	pop	{r4, r7, pc}
 8008414:	e000e100 	.word	0xe000e100
 8008418:	e000ed00 	.word	0xe000ed00

0800841c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3b01      	subs	r3, #1
 8008428:	4a0c      	ldr	r2, [pc, #48]	; (800845c <SysTick_Config+0x40>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d901      	bls.n	8008432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800842e:	2301      	movs	r3, #1
 8008430:	e010      	b.n	8008454 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008432:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <SysTick_Config+0x44>)
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	3a01      	subs	r2, #1
 8008438:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800843a:	2301      	movs	r3, #1
 800843c:	425b      	negs	r3, r3
 800843e:	2103      	movs	r1, #3
 8008440:	0018      	movs	r0, r3
 8008442:	f7ff ff7d 	bl	8008340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008446:	4b06      	ldr	r3, [pc, #24]	; (8008460 <SysTick_Config+0x44>)
 8008448:	2200      	movs	r2, #0
 800844a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800844c:	4b04      	ldr	r3, [pc, #16]	; (8008460 <SysTick_Config+0x44>)
 800844e:	2207      	movs	r2, #7
 8008450:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008452:	2300      	movs	r3, #0
}
 8008454:	0018      	movs	r0, r3
 8008456:	46bd      	mov	sp, r7
 8008458:	b002      	add	sp, #8
 800845a:	bd80      	pop	{r7, pc}
 800845c:	00ffffff 	.word	0x00ffffff
 8008460:	e000e010 	.word	0xe000e010

08008464 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	607a      	str	r2, [r7, #4]
 800846e:	210f      	movs	r1, #15
 8008470:	187b      	adds	r3, r7, r1
 8008472:	1c02      	adds	r2, r0, #0
 8008474:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	187b      	adds	r3, r7, r1
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	b25b      	sxtb	r3, r3
 800847e:	0011      	movs	r1, r2
 8008480:	0018      	movs	r0, r3
 8008482:	f7ff ff5d 	bl	8008340 <__NVIC_SetPriority>
}
 8008486:	46c0      	nop			; (mov r8, r8)
 8008488:	46bd      	mov	sp, r7
 800848a:	b004      	add	sp, #16
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	0002      	movs	r2, r0
 8008496:	1dfb      	adds	r3, r7, #7
 8008498:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800849a:	1dfb      	adds	r3, r7, #7
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b25b      	sxtb	r3, r3
 80084a0:	0018      	movs	r0, r3
 80084a2:	f7ff ff33 	bl	800830c <__NVIC_EnableIRQ>
}
 80084a6:	46c0      	nop			; (mov r8, r8)
 80084a8:	46bd      	mov	sp, r7
 80084aa:	b002      	add	sp, #8
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	0018      	movs	r0, r3
 80084ba:	f7ff ffaf 	bl	800841c <SysTick_Config>
 80084be:	0003      	movs	r3, r0
}
 80084c0:	0018      	movs	r0, r3
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b002      	add	sp, #8
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e077      	b.n	80085ca <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a3d      	ldr	r2, [pc, #244]	; (80085d4 <HAL_DMA_Init+0x10c>)
 80084e0:	4694      	mov	ip, r2
 80084e2:	4463      	add	r3, ip
 80084e4:	2114      	movs	r1, #20
 80084e6:	0018      	movs	r0, r3
 80084e8:	f7f7 fe0c 	bl	8000104 <__udivsi3>
 80084ec:	0003      	movs	r3, r0
 80084ee:	009a      	lsls	r2, r3, #2
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2225      	movs	r2, #37	; 0x25
 80084f8:	2102      	movs	r1, #2
 80084fa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4934      	ldr	r1, [pc, #208]	; (80085d8 <HAL_DMA_Init+0x110>)
 8008508:	400a      	ands	r2, r1
 800850a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6819      	ldr	r1, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	431a      	orrs	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	0018      	movs	r0, r3
 8008546:	f000 f9c3 	bl	80088d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	2380      	movs	r3, #128	; 0x80
 8008550:	01db      	lsls	r3, r3, #7
 8008552:	429a      	cmp	r2, r3
 8008554:	d102      	bne.n	800855c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008564:	21ff      	movs	r1, #255	; 0xff
 8008566:	400a      	ands	r2, r1
 8008568:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008572:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d011      	beq.n	80085a0 <HAL_DMA_Init+0xd8>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b04      	cmp	r3, #4
 8008582:	d80d      	bhi.n	80085a0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	0018      	movs	r0, r3
 8008588:	f000 f9ce 	bl	8008928 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	e008      	b.n	80085b2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2225      	movs	r2, #37	; 0x25
 80085bc:	2101      	movs	r1, #1
 80085be:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2224      	movs	r2, #36	; 0x24
 80085c4:	2100      	movs	r1, #0
 80085c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	0018      	movs	r0, r3
 80085cc:	46bd      	mov	sp, r7
 80085ce:	b002      	add	sp, #8
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	bffdfff8 	.word	0xbffdfff8
 80085d8:	ffff800f 	.word	0xffff800f

080085dc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ea:	2317      	movs	r3, #23
 80085ec:	18fb      	adds	r3, r7, r3
 80085ee:	2200      	movs	r2, #0
 80085f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2224      	movs	r2, #36	; 0x24
 80085f6:	5c9b      	ldrb	r3, [r3, r2]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <HAL_DMA_Start_IT+0x24>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e070      	b.n	80086e2 <HAL_DMA_Start_IT+0x106>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2224      	movs	r2, #36	; 0x24
 8008604:	2101      	movs	r1, #1
 8008606:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2225      	movs	r2, #37	; 0x25
 800860c:	5c9b      	ldrb	r3, [r3, r2]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b01      	cmp	r3, #1
 8008612:	d157      	bne.n	80086c4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2225      	movs	r2, #37	; 0x25
 8008618:	2102      	movs	r1, #2
 800861a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2101      	movs	r1, #1
 800862e:	438a      	bics	r2, r1
 8008630:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 f909 	bl	8008850 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008642:	2b00      	cmp	r3, #0
 8008644:	d008      	beq.n	8008658 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	210e      	movs	r1, #14
 8008652:	430a      	orrs	r2, r1
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	e00f      	b.n	8008678 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2104      	movs	r1, #4
 8008664:	438a      	bics	r2, r1
 8008666:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	210a      	movs	r1, #10
 8008674:	430a      	orrs	r2, r1
 8008676:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	2380      	movs	r3, #128	; 0x80
 8008680:	025b      	lsls	r3, r3, #9
 8008682:	4013      	ands	r3, r2
 8008684:	d008      	beq.n	8008698 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008690:	2180      	movs	r1, #128	; 0x80
 8008692:	0049      	lsls	r1, r1, #1
 8008694:	430a      	orrs	r2, r1
 8008696:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869c:	2b00      	cmp	r3, #0
 800869e:	d008      	beq.n	80086b2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086aa:	2180      	movs	r1, #128	; 0x80
 80086ac:	0049      	lsls	r1, r1, #1
 80086ae:	430a      	orrs	r2, r1
 80086b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2101      	movs	r1, #1
 80086be:	430a      	orrs	r2, r1
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e007      	b.n	80086d4 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2224      	movs	r2, #36	; 0x24
 80086c8:	2100      	movs	r1, #0
 80086ca:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80086cc:	2317      	movs	r3, #23
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	2202      	movs	r2, #2
 80086d2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2224      	movs	r2, #36	; 0x24
 80086d8:	2100      	movs	r1, #0
 80086da:	5499      	strb	r1, [r3, r2]

  return status;
 80086dc:	2317      	movs	r3, #23
 80086de:	18fb      	adds	r3, r7, r3
 80086e0:	781b      	ldrb	r3, [r3, #0]
}
 80086e2:	0018      	movs	r0, r3
 80086e4:	46bd      	mov	sp, r7
 80086e6:	b006      	add	sp, #24
 80086e8:	bd80      	pop	{r7, pc}
	...

080086ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80086f4:	4b55      	ldr	r3, [pc, #340]	; (800884c <HAL_DMA_IRQHandler+0x160>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	221c      	movs	r2, #28
 8008708:	4013      	ands	r3, r2
 800870a:	2204      	movs	r2, #4
 800870c:	409a      	lsls	r2, r3
 800870e:	0013      	movs	r3, r2
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4013      	ands	r3, r2
 8008714:	d027      	beq.n	8008766 <HAL_DMA_IRQHandler+0x7a>
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2204      	movs	r2, #4
 800871a:	4013      	ands	r3, r2
 800871c:	d023      	beq.n	8008766 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2220      	movs	r2, #32
 8008726:	4013      	ands	r3, r2
 8008728:	d107      	bne.n	800873a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2104      	movs	r1, #4
 8008736:	438a      	bics	r2, r1
 8008738:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800873a:	4b44      	ldr	r3, [pc, #272]	; (800884c <HAL_DMA_IRQHandler+0x160>)
 800873c:	6859      	ldr	r1, [r3, #4]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	221c      	movs	r2, #28
 8008744:	4013      	ands	r3, r2
 8008746:	2204      	movs	r2, #4
 8008748:	409a      	lsls	r2, r3
 800874a:	4b40      	ldr	r3, [pc, #256]	; (800884c <HAL_DMA_IRQHandler+0x160>)
 800874c:	430a      	orrs	r2, r1
 800874e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	2b00      	cmp	r3, #0
 8008756:	d100      	bne.n	800875a <HAL_DMA_IRQHandler+0x6e>
 8008758:	e073      	b.n	8008842 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	0010      	movs	r0, r2
 8008762:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008764:	e06d      	b.n	8008842 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	221c      	movs	r2, #28
 800876c:	4013      	ands	r3, r2
 800876e:	2202      	movs	r2, #2
 8008770:	409a      	lsls	r2, r3
 8008772:	0013      	movs	r3, r2
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4013      	ands	r3, r2
 8008778:	d02e      	beq.n	80087d8 <HAL_DMA_IRQHandler+0xec>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2202      	movs	r2, #2
 800877e:	4013      	ands	r3, r2
 8008780:	d02a      	beq.n	80087d8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2220      	movs	r2, #32
 800878a:	4013      	ands	r3, r2
 800878c:	d10b      	bne.n	80087a6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	210a      	movs	r1, #10
 800879a:	438a      	bics	r2, r1
 800879c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2225      	movs	r2, #37	; 0x25
 80087a2:	2101      	movs	r1, #1
 80087a4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80087a6:	4b29      	ldr	r3, [pc, #164]	; (800884c <HAL_DMA_IRQHandler+0x160>)
 80087a8:	6859      	ldr	r1, [r3, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	221c      	movs	r2, #28
 80087b0:	4013      	ands	r3, r2
 80087b2:	2202      	movs	r2, #2
 80087b4:	409a      	lsls	r2, r3
 80087b6:	4b25      	ldr	r3, [pc, #148]	; (800884c <HAL_DMA_IRQHandler+0x160>)
 80087b8:	430a      	orrs	r2, r1
 80087ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2224      	movs	r2, #36	; 0x24
 80087c0:	2100      	movs	r1, #0
 80087c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d03a      	beq.n	8008842 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	0010      	movs	r0, r2
 80087d4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80087d6:	e034      	b.n	8008842 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087dc:	221c      	movs	r2, #28
 80087de:	4013      	ands	r3, r2
 80087e0:	2208      	movs	r2, #8
 80087e2:	409a      	lsls	r2, r3
 80087e4:	0013      	movs	r3, r2
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4013      	ands	r3, r2
 80087ea:	d02b      	beq.n	8008844 <HAL_DMA_IRQHandler+0x158>
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2208      	movs	r2, #8
 80087f0:	4013      	ands	r3, r2
 80087f2:	d027      	beq.n	8008844 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	210e      	movs	r1, #14
 8008800:	438a      	bics	r2, r1
 8008802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 8008804:	4b11      	ldr	r3, [pc, #68]	; (800884c <HAL_DMA_IRQHandler+0x160>)
 8008806:	6859      	ldr	r1, [r3, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	221c      	movs	r2, #28
 800880e:	4013      	ands	r3, r2
 8008810:	2201      	movs	r2, #1
 8008812:	409a      	lsls	r2, r3
 8008814:	4b0d      	ldr	r3, [pc, #52]	; (800884c <HAL_DMA_IRQHandler+0x160>)
 8008816:	430a      	orrs	r2, r1
 8008818:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2225      	movs	r2, #37	; 0x25
 8008824:	2101      	movs	r1, #1
 8008826:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2224      	movs	r2, #36	; 0x24
 800882c:	2100      	movs	r1, #0
 800882e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	0010      	movs	r0, r2
 8008840:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	46c0      	nop			; (mov r8, r8)
}
 8008846:	46bd      	mov	sp, r7
 8008848:	b004      	add	sp, #16
 800884a:	bd80      	pop	{r7, pc}
 800884c:	40020000 	.word	0x40020000

08008850 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008866:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886c:	2b00      	cmp	r3, #0
 800886e:	d004      	beq.n	800887a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008878:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800887a:	4b14      	ldr	r3, [pc, #80]	; (80088cc <DMA_SetConfig+0x7c>)
 800887c:	6859      	ldr	r1, [r3, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	221c      	movs	r2, #28
 8008884:	4013      	ands	r3, r2
 8008886:	2201      	movs	r2, #1
 8008888:	409a      	lsls	r2, r3
 800888a:	4b10      	ldr	r3, [pc, #64]	; (80088cc <DMA_SetConfig+0x7c>)
 800888c:	430a      	orrs	r2, r1
 800888e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	2b10      	cmp	r3, #16
 800889e:	d108      	bne.n	80088b2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80088b0:	e007      	b.n	80088c2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	60da      	str	r2, [r3, #12]
}
 80088c2:	46c0      	nop			; (mov r8, r8)
 80088c4:	46bd      	mov	sp, r7
 80088c6:	b004      	add	sp, #16
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	40020000 	.word	0x40020000

080088d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	001a      	movs	r2, r3
 80088de:	23ff      	movs	r3, #255	; 0xff
 80088e0:	4013      	ands	r3, r2
 80088e2:	3b08      	subs	r3, #8
 80088e4:	2114      	movs	r1, #20
 80088e6:	0018      	movs	r0, r3
 80088e8:	f7f7 fc0c 	bl	8000104 <__udivsi3>
 80088ec:	0003      	movs	r3, r0
 80088ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f4:	089b      	lsrs	r3, r3, #2
 80088f6:	4a0a      	ldr	r2, [pc, #40]	; (8008920 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80088f8:	4694      	mov	ip, r2
 80088fa:	4463      	add	r3, ip
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	001a      	movs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a07      	ldr	r2, [pc, #28]	; (8008924 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8008908:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	221c      	movs	r2, #28
 800890e:	4013      	ands	r3, r2
 8008910:	2201      	movs	r2, #1
 8008912:	409a      	lsls	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8008918:	46c0      	nop			; (mov r8, r8)
 800891a:	46bd      	mov	sp, r7
 800891c:	b004      	add	sp, #16
 800891e:	bd80      	pop	{r7, pc}
 8008920:	10008200 	.word	0x10008200
 8008924:	40020880 	.word	0x40020880

08008928 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	22ff      	movs	r2, #255	; 0xff
 8008936:	4013      	ands	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4a0a      	ldr	r2, [pc, #40]	; (8008968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800893e:	4694      	mov	ip, r2
 8008940:	4463      	add	r3, ip
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	001a      	movs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a07      	ldr	r2, [pc, #28]	; (800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800894e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3b01      	subs	r3, #1
 8008954:	2203      	movs	r2, #3
 8008956:	4013      	ands	r3, r2
 8008958:	2201      	movs	r2, #1
 800895a:	409a      	lsls	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8008960:	46c0      	nop			; (mov r8, r8)
 8008962:	46bd      	mov	sp, r7
 8008964:	b004      	add	sp, #16
 8008966:	bd80      	pop	{r7, pc}
 8008968:	1000823f 	.word	0x1000823f
 800896c:	40020940 	.word	0x40020940

08008970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800897e:	e147      	b.n	8008c10 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2101      	movs	r1, #1
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	4091      	lsls	r1, r2
 800898a:	000a      	movs	r2, r1
 800898c:	4013      	ands	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d100      	bne.n	8008998 <HAL_GPIO_Init+0x28>
 8008996:	e138      	b.n	8008c0a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d003      	beq.n	80089a8 <HAL_GPIO_Init+0x38>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2b12      	cmp	r3, #18
 80089a6:	d123      	bne.n	80089f0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	08da      	lsrs	r2, r3, #3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3208      	adds	r2, #8
 80089b0:	0092      	lsls	r2, r2, #2
 80089b2:	58d3      	ldr	r3, [r2, r3]
 80089b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2207      	movs	r2, #7
 80089ba:	4013      	ands	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	220f      	movs	r2, #15
 80089c0:	409a      	lsls	r2, r3
 80089c2:	0013      	movs	r3, r2
 80089c4:	43da      	mvns	r2, r3
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	4013      	ands	r3, r2
 80089ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	691a      	ldr	r2, [r3, #16]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2107      	movs	r1, #7
 80089d4:	400b      	ands	r3, r1
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	409a      	lsls	r2, r3
 80089da:	0013      	movs	r3, r2
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	4313      	orrs	r3, r2
 80089e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	08da      	lsrs	r2, r3, #3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3208      	adds	r2, #8
 80089ea:	0092      	lsls	r2, r2, #2
 80089ec:	6939      	ldr	r1, [r7, #16]
 80089ee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	2203      	movs	r2, #3
 80089fc:	409a      	lsls	r2, r3
 80089fe:	0013      	movs	r3, r2
 8008a00:	43da      	mvns	r2, r3
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	4013      	ands	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	401a      	ands	r2, r3
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	409a      	lsls	r2, r3
 8008a16:	0013      	movs	r3, r2
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d00b      	beq.n	8008a44 <HAL_GPIO_Init+0xd4>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d007      	beq.n	8008a44 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a38:	2b11      	cmp	r3, #17
 8008a3a:	d003      	beq.n	8008a44 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2b12      	cmp	r3, #18
 8008a42:	d130      	bne.n	8008aa6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	2203      	movs	r2, #3
 8008a50:	409a      	lsls	r2, r3
 8008a52:	0013      	movs	r3, r2
 8008a54:	43da      	mvns	r2, r3
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	409a      	lsls	r2, r3
 8008a66:	0013      	movs	r3, r2
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	409a      	lsls	r2, r3
 8008a80:	0013      	movs	r3, r2
 8008a82:	43da      	mvns	r2, r3
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	4013      	ands	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	091b      	lsrs	r3, r3, #4
 8008a90:	2201      	movs	r2, #1
 8008a92:	401a      	ands	r2, r3
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	409a      	lsls	r2, r3
 8008a98:	0013      	movs	r3, r2
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	2203      	movs	r2, #3
 8008ab2:	409a      	lsls	r2, r3
 8008ab4:	0013      	movs	r3, r2
 8008ab6:	43da      	mvns	r2, r3
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	4013      	ands	r3, r2
 8008abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	689a      	ldr	r2, [r3, #8]
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	409a      	lsls	r2, r3
 8008ac8:	0013      	movs	r3, r2
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	2380      	movs	r3, #128	; 0x80
 8008adc:	055b      	lsls	r3, r3, #21
 8008ade:	4013      	ands	r3, r2
 8008ae0:	d100      	bne.n	8008ae4 <HAL_GPIO_Init+0x174>
 8008ae2:	e092      	b.n	8008c0a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008ae4:	4a50      	ldr	r2, [pc, #320]	; (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	089b      	lsrs	r3, r3, #2
 8008aea:	3318      	adds	r3, #24
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	589b      	ldr	r3, [r3, r2]
 8008af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2203      	movs	r2, #3
 8008af6:	4013      	ands	r3, r2
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	220f      	movs	r2, #15
 8008afc:	409a      	lsls	r2, r3
 8008afe:	0013      	movs	r3, r2
 8008b00:	43da      	mvns	r2, r3
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	4013      	ands	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	23a0      	movs	r3, #160	; 0xa0
 8008b0c:	05db      	lsls	r3, r3, #23
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d013      	beq.n	8008b3a <HAL_GPIO_Init+0x1ca>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a45      	ldr	r2, [pc, #276]	; (8008c2c <HAL_GPIO_Init+0x2bc>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00d      	beq.n	8008b36 <HAL_GPIO_Init+0x1c6>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a44      	ldr	r2, [pc, #272]	; (8008c30 <HAL_GPIO_Init+0x2c0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d007      	beq.n	8008b32 <HAL_GPIO_Init+0x1c2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a43      	ldr	r2, [pc, #268]	; (8008c34 <HAL_GPIO_Init+0x2c4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d101      	bne.n	8008b2e <HAL_GPIO_Init+0x1be>
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e006      	b.n	8008b3c <HAL_GPIO_Init+0x1cc>
 8008b2e:	2305      	movs	r3, #5
 8008b30:	e004      	b.n	8008b3c <HAL_GPIO_Init+0x1cc>
 8008b32:	2302      	movs	r3, #2
 8008b34:	e002      	b.n	8008b3c <HAL_GPIO_Init+0x1cc>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e000      	b.n	8008b3c <HAL_GPIO_Init+0x1cc>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	2103      	movs	r1, #3
 8008b40:	400a      	ands	r2, r1
 8008b42:	00d2      	lsls	r2, r2, #3
 8008b44:	4093      	lsls	r3, r2
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008b4c:	4936      	ldr	r1, [pc, #216]	; (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	089b      	lsrs	r3, r3, #2
 8008b52:	3318      	adds	r3, #24
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008b5a:	4a33      	ldr	r2, [pc, #204]	; (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008b5c:	2380      	movs	r3, #128	; 0x80
 8008b5e:	58d3      	ldr	r3, [r2, r3]
 8008b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	43da      	mvns	r2, r3
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	4013      	ands	r3, r2
 8008b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	2380      	movs	r3, #128	; 0x80
 8008b72:	025b      	lsls	r3, r3, #9
 8008b74:	4013      	ands	r3, r2
 8008b76:	d003      	beq.n	8008b80 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008b80:	4929      	ldr	r1, [pc, #164]	; (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008b82:	2280      	movs	r2, #128	; 0x80
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8008b88:	4a27      	ldr	r2, [pc, #156]	; (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008b8a:	2384      	movs	r3, #132	; 0x84
 8008b8c:	58d3      	ldr	r3, [r2, r3]
 8008b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	43da      	mvns	r2, r3
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	4013      	ands	r3, r2
 8008b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	2380      	movs	r3, #128	; 0x80
 8008ba0:	029b      	lsls	r3, r3, #10
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	d003      	beq.n	8008bae <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008bae:	491e      	ldr	r1, [pc, #120]	; (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008bb0:	2284      	movs	r2, #132	; 0x84
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008bb6:	4b1c      	ldr	r3, [pc, #112]	; (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	43da      	mvns	r2, r3
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	2380      	movs	r3, #128	; 0x80
 8008bcc:	035b      	lsls	r3, r3, #13
 8008bce:	4013      	ands	r3, r2
 8008bd0:	d003      	beq.n	8008bda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008bda:	4b13      	ldr	r3, [pc, #76]	; (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008be0:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	43da      	mvns	r2, r3
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	4013      	ands	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	2380      	movs	r3, #128	; 0x80
 8008bf6:	039b      	lsls	r3, r3, #14
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	d003      	beq.n	8008c04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008c04:	4b08      	ldr	r3, [pc, #32]	; (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	40da      	lsrs	r2, r3
 8008c18:	1e13      	subs	r3, r2, #0
 8008c1a:	d000      	beq.n	8008c1e <HAL_GPIO_Init+0x2ae>
 8008c1c:	e6b0      	b.n	8008980 <HAL_GPIO_Init+0x10>
  }
}
 8008c1e:	46c0      	nop			; (mov r8, r8)
 8008c20:	46bd      	mov	sp, r7
 8008c22:	b006      	add	sp, #24
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	40021800 	.word	0x40021800
 8008c2c:	50000400 	.word	0x50000400
 8008c30:	50000800 	.word	0x50000800
 8008c34:	50000c00 	.word	0x50000c00

08008c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	0008      	movs	r0, r1
 8008c42:	0011      	movs	r1, r2
 8008c44:	1cbb      	adds	r3, r7, #2
 8008c46:	1c02      	adds	r2, r0, #0
 8008c48:	801a      	strh	r2, [r3, #0]
 8008c4a:	1c7b      	adds	r3, r7, #1
 8008c4c:	1c0a      	adds	r2, r1, #0
 8008c4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c50:	1c7b      	adds	r3, r7, #1
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d004      	beq.n	8008c62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008c58:	1cbb      	adds	r3, r7, #2
 8008c5a:	881a      	ldrh	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008c60:	e003      	b.n	8008c6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008c62:	1cbb      	adds	r3, r7, #2
 8008c64:	881a      	ldrh	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	b002      	add	sp, #8
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e082      	b.n	8008d8c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2241      	movs	r2, #65	; 0x41
 8008c8a:	5c9b      	ldrb	r3, [r3, r2]
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d107      	bne.n	8008ca2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2240      	movs	r2, #64	; 0x40
 8008c96:	2100      	movs	r1, #0
 8008c98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	f7fa fed9 	bl	8003a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2241      	movs	r2, #65	; 0x41
 8008ca6:	2124      	movs	r1, #36	; 0x24
 8008ca8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	438a      	bics	r2, r1
 8008cb8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4934      	ldr	r1, [pc, #208]	; (8008d94 <HAL_I2C_Init+0x120>)
 8008cc4:	400a      	ands	r2, r1
 8008cc6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4931      	ldr	r1, [pc, #196]	; (8008d98 <HAL_I2C_Init+0x124>)
 8008cd4:	400a      	ands	r2, r1
 8008cd6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d108      	bne.n	8008cf2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2180      	movs	r1, #128	; 0x80
 8008cea:	0209      	lsls	r1, r1, #8
 8008cec:	430a      	orrs	r2, r1
 8008cee:	609a      	str	r2, [r3, #8]
 8008cf0:	e007      	b.n	8008d02 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2184      	movs	r1, #132	; 0x84
 8008cfc:	0209      	lsls	r1, r1, #8
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d104      	bne.n	8008d14 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2280      	movs	r2, #128	; 0x80
 8008d10:	0112      	lsls	r2, r2, #4
 8008d12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	491f      	ldr	r1, [pc, #124]	; (8008d9c <HAL_I2C_Init+0x128>)
 8008d20:	430a      	orrs	r2, r1
 8008d22:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	491a      	ldr	r1, [pc, #104]	; (8008d98 <HAL_I2C_Init+0x124>)
 8008d30:	400a      	ands	r2, r1
 8008d32:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	0011      	movs	r1, r2
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	021a      	lsls	r2, r3, #8
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	69d9      	ldr	r1, [r3, #28]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2101      	movs	r1, #1
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2241      	movs	r2, #65	; 0x41
 8008d78:	2120      	movs	r1, #32
 8008d7a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2242      	movs	r2, #66	; 0x42
 8008d86:	2100      	movs	r1, #0
 8008d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	b002      	add	sp, #8
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	f0ffffff 	.word	0xf0ffffff
 8008d98:	ffff7fff 	.word	0xffff7fff
 8008d9c:	02008000 	.word	0x02008000

08008da0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008da0:	b590      	push	{r4, r7, lr}
 8008da2:	b089      	sub	sp, #36	; 0x24
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	0008      	movs	r0, r1
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	0019      	movs	r1, r3
 8008dae:	230a      	movs	r3, #10
 8008db0:	18fb      	adds	r3, r7, r3
 8008db2:	1c02      	adds	r2, r0, #0
 8008db4:	801a      	strh	r2, [r3, #0]
 8008db6:	2308      	movs	r3, #8
 8008db8:	18fb      	adds	r3, r7, r3
 8008dba:	1c0a      	adds	r2, r1, #0
 8008dbc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2241      	movs	r2, #65	; 0x41
 8008dc2:	5c9b      	ldrb	r3, [r3, r2]
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d000      	beq.n	8008dcc <HAL_I2C_Master_Transmit+0x2c>
 8008dca:	e0e7      	b.n	8008f9c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2240      	movs	r2, #64	; 0x40
 8008dd0:	5c9b      	ldrb	r3, [r3, r2]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d101      	bne.n	8008dda <HAL_I2C_Master_Transmit+0x3a>
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	e0e1      	b.n	8008f9e <HAL_I2C_Master_Transmit+0x1fe>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2240      	movs	r2, #64	; 0x40
 8008dde:	2101      	movs	r1, #1
 8008de0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008de2:	f7fe fdd5 	bl	8007990 <HAL_GetTick>
 8008de6:	0003      	movs	r3, r0
 8008de8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008dea:	2380      	movs	r3, #128	; 0x80
 8008dec:	0219      	lsls	r1, r3, #8
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	2319      	movs	r3, #25
 8008df6:	2201      	movs	r2, #1
 8008df8:	f000 fa04 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 8008dfc:	1e03      	subs	r3, r0, #0
 8008dfe:	d001      	beq.n	8008e04 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e0cc      	b.n	8008f9e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2241      	movs	r2, #65	; 0x41
 8008e08:	2121      	movs	r1, #33	; 0x21
 8008e0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2242      	movs	r2, #66	; 0x42
 8008e10:	2110      	movs	r1, #16
 8008e12:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2208      	movs	r2, #8
 8008e24:	18ba      	adds	r2, r7, r2
 8008e26:	8812      	ldrh	r2, [r2, #0]
 8008e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2bff      	cmp	r3, #255	; 0xff
 8008e38:	d911      	bls.n	8008e5e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	22ff      	movs	r2, #255	; 0xff
 8008e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	2380      	movs	r3, #128	; 0x80
 8008e48:	045c      	lsls	r4, r3, #17
 8008e4a:	230a      	movs	r3, #10
 8008e4c:	18fb      	adds	r3, r7, r3
 8008e4e:	8819      	ldrh	r1, [r3, #0]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	4b55      	ldr	r3, [pc, #340]	; (8008fa8 <HAL_I2C_Master_Transmit+0x208>)
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	0023      	movs	r3, r4
 8008e58:	f000 fb60 	bl	800951c <I2C_TransferConfig>
 8008e5c:	e075      	b.n	8008f4a <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	2380      	movs	r3, #128	; 0x80
 8008e70:	049c      	lsls	r4, r3, #18
 8008e72:	230a      	movs	r3, #10
 8008e74:	18fb      	adds	r3, r7, r3
 8008e76:	8819      	ldrh	r1, [r3, #0]
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	4b4b      	ldr	r3, [pc, #300]	; (8008fa8 <HAL_I2C_Master_Transmit+0x208>)
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	0023      	movs	r3, r4
 8008e80:	f000 fb4c 	bl	800951c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008e84:	e061      	b.n	8008f4a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f000 f9f8 	bl	8009282 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e92:	1e03      	subs	r3, r0, #0
 8008e94:	d001      	beq.n	8008e9a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e081      	b.n	8008f9e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	781a      	ldrb	r2, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d03a      	beq.n	8008f4a <HAL_I2C_Master_Transmit+0x1aa>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d136      	bne.n	8008f4a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	0013      	movs	r3, r2
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2180      	movs	r1, #128	; 0x80
 8008eea:	f000 f98b 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 8008eee:	1e03      	subs	r3, r0, #0
 8008ef0:	d001      	beq.n	8008ef6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e053      	b.n	8008f9e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2bff      	cmp	r3, #255	; 0xff
 8008efe:	d911      	bls.n	8008f24 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	22ff      	movs	r2, #255	; 0xff
 8008f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	2380      	movs	r3, #128	; 0x80
 8008f0e:	045c      	lsls	r4, r3, #17
 8008f10:	230a      	movs	r3, #10
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	8819      	ldrh	r1, [r3, #0]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	0023      	movs	r3, r4
 8008f1e:	f000 fafd 	bl	800951c <I2C_TransferConfig>
 8008f22:	e012      	b.n	8008f4a <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	2380      	movs	r3, #128	; 0x80
 8008f36:	049c      	lsls	r4, r3, #18
 8008f38:	230a      	movs	r3, #10
 8008f3a:	18fb      	adds	r3, r7, r3
 8008f3c:	8819      	ldrh	r1, [r3, #0]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	2300      	movs	r3, #0
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	0023      	movs	r3, r4
 8008f46:	f000 fae9 	bl	800951c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d198      	bne.n	8008e86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f000 f9d0 	bl	8009300 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f60:	1e03      	subs	r3, r0, #0
 8008f62:	d001      	beq.n	8008f68 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e01a      	b.n	8008f9e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	490c      	ldr	r1, [pc, #48]	; (8008fac <HAL_I2C_Master_Transmit+0x20c>)
 8008f7c:	400a      	ands	r2, r1
 8008f7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2241      	movs	r2, #65	; 0x41
 8008f84:	2120      	movs	r1, #32
 8008f86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2242      	movs	r2, #66	; 0x42
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2240      	movs	r2, #64	; 0x40
 8008f94:	2100      	movs	r1, #0
 8008f96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e000      	b.n	8008f9e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8008f9c:	2302      	movs	r3, #2
  }
}
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	b007      	add	sp, #28
 8008fa4:	bd90      	pop	{r4, r7, pc}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	80002000 	.word	0x80002000
 8008fac:	fe00e800 	.word	0xfe00e800

08008fb0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fb0:	b590      	push	{r4, r7, lr}
 8008fb2:	b089      	sub	sp, #36	; 0x24
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	0008      	movs	r0, r1
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	0019      	movs	r1, r3
 8008fbe:	230a      	movs	r3, #10
 8008fc0:	18fb      	adds	r3, r7, r3
 8008fc2:	1c02      	adds	r2, r0, #0
 8008fc4:	801a      	strh	r2, [r3, #0]
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	18fb      	adds	r3, r7, r3
 8008fca:	1c0a      	adds	r2, r1, #0
 8008fcc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2241      	movs	r2, #65	; 0x41
 8008fd2:	5c9b      	ldrb	r3, [r3, r2]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b20      	cmp	r3, #32
 8008fd8:	d000      	beq.n	8008fdc <HAL_I2C_Master_Receive+0x2c>
 8008fda:	e0e8      	b.n	80091ae <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2240      	movs	r2, #64	; 0x40
 8008fe0:	5c9b      	ldrb	r3, [r3, r2]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <HAL_I2C_Master_Receive+0x3a>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e0e2      	b.n	80091b0 <HAL_I2C_Master_Receive+0x200>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2240      	movs	r2, #64	; 0x40
 8008fee:	2101      	movs	r1, #1
 8008ff0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ff2:	f7fe fccd 	bl	8007990 <HAL_GetTick>
 8008ff6:	0003      	movs	r3, r0
 8008ff8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ffa:	2380      	movs	r3, #128	; 0x80
 8008ffc:	0219      	lsls	r1, r3, #8
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	2319      	movs	r3, #25
 8009006:	2201      	movs	r2, #1
 8009008:	f000 f8fc 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 800900c:	1e03      	subs	r3, r0, #0
 800900e:	d001      	beq.n	8009014 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e0cd      	b.n	80091b0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2241      	movs	r2, #65	; 0x41
 8009018:	2122      	movs	r1, #34	; 0x22
 800901a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2242      	movs	r2, #66	; 0x42
 8009020:	2110      	movs	r1, #16
 8009022:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2208      	movs	r2, #8
 8009034:	18ba      	adds	r2, r7, r2
 8009036:	8812      	ldrh	r2, [r2, #0]
 8009038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009044:	b29b      	uxth	r3, r3
 8009046:	2bff      	cmp	r3, #255	; 0xff
 8009048:	d911      	bls.n	800906e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	22ff      	movs	r2, #255	; 0xff
 800904e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009054:	b2da      	uxtb	r2, r3
 8009056:	2380      	movs	r3, #128	; 0x80
 8009058:	045c      	lsls	r4, r3, #17
 800905a:	230a      	movs	r3, #10
 800905c:	18fb      	adds	r3, r7, r3
 800905e:	8819      	ldrh	r1, [r3, #0]
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	4b55      	ldr	r3, [pc, #340]	; (80091b8 <HAL_I2C_Master_Receive+0x208>)
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	0023      	movs	r3, r4
 8009068:	f000 fa58 	bl	800951c <I2C_TransferConfig>
 800906c:	e076      	b.n	800915c <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009072:	b29a      	uxth	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800907c:	b2da      	uxtb	r2, r3
 800907e:	2380      	movs	r3, #128	; 0x80
 8009080:	049c      	lsls	r4, r3, #18
 8009082:	230a      	movs	r3, #10
 8009084:	18fb      	adds	r3, r7, r3
 8009086:	8819      	ldrh	r1, [r3, #0]
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	4b4b      	ldr	r3, [pc, #300]	; (80091b8 <HAL_I2C_Master_Receive+0x208>)
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	0023      	movs	r3, r4
 8009090:	f000 fa44 	bl	800951c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009094:	e062      	b.n	800915c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	0018      	movs	r0, r3
 800909e:	f000 f96b 	bl	8009378 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090a2:	1e03      	subs	r3, r0, #0
 80090a4:	d001      	beq.n	80090aa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e082      	b.n	80091b0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b4:	b2d2      	uxtb	r2, r2
 80090b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090bc:	1c5a      	adds	r2, r3, #1
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c6:	3b01      	subs	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	3b01      	subs	r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d03a      	beq.n	800915c <HAL_I2C_Master_Receive+0x1ac>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d136      	bne.n	800915c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	0013      	movs	r3, r2
 80090f8:	2200      	movs	r2, #0
 80090fa:	2180      	movs	r1, #128	; 0x80
 80090fc:	f000 f882 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 8009100:	1e03      	subs	r3, r0, #0
 8009102:	d001      	beq.n	8009108 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e053      	b.n	80091b0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800910c:	b29b      	uxth	r3, r3
 800910e:	2bff      	cmp	r3, #255	; 0xff
 8009110:	d911      	bls.n	8009136 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	22ff      	movs	r2, #255	; 0xff
 8009116:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911c:	b2da      	uxtb	r2, r3
 800911e:	2380      	movs	r3, #128	; 0x80
 8009120:	045c      	lsls	r4, r3, #17
 8009122:	230a      	movs	r3, #10
 8009124:	18fb      	adds	r3, r7, r3
 8009126:	8819      	ldrh	r1, [r3, #0]
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	2300      	movs	r3, #0
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	0023      	movs	r3, r4
 8009130:	f000 f9f4 	bl	800951c <I2C_TransferConfig>
 8009134:	e012      	b.n	800915c <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009144:	b2da      	uxtb	r2, r3
 8009146:	2380      	movs	r3, #128	; 0x80
 8009148:	049c      	lsls	r4, r3, #18
 800914a:	230a      	movs	r3, #10
 800914c:	18fb      	adds	r3, r7, r3
 800914e:	8819      	ldrh	r1, [r3, #0]
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	2300      	movs	r3, #0
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	0023      	movs	r3, r4
 8009158:	f000 f9e0 	bl	800951c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009160:	b29b      	uxth	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d197      	bne.n	8009096 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	0018      	movs	r0, r3
 800916e:	f000 f8c7 	bl	8009300 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009172:	1e03      	subs	r3, r0, #0
 8009174:	d001      	beq.n	800917a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e01a      	b.n	80091b0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2220      	movs	r2, #32
 8009180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	490b      	ldr	r1, [pc, #44]	; (80091bc <HAL_I2C_Master_Receive+0x20c>)
 800918e:	400a      	ands	r2, r1
 8009190:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2241      	movs	r2, #65	; 0x41
 8009196:	2120      	movs	r1, #32
 8009198:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2242      	movs	r2, #66	; 0x42
 800919e:	2100      	movs	r1, #0
 80091a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2240      	movs	r2, #64	; 0x40
 80091a6:	2100      	movs	r1, #0
 80091a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	e000      	b.n	80091b0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80091ae:	2302      	movs	r3, #2
  }
}
 80091b0:	0018      	movs	r0, r3
 80091b2:	46bd      	mov	sp, r7
 80091b4:	b007      	add	sp, #28
 80091b6:	bd90      	pop	{r4, r7, pc}
 80091b8:	80002400 	.word	0x80002400
 80091bc:	fe00e800 	.word	0xfe00e800

080091c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	2202      	movs	r2, #2
 80091d0:	4013      	ands	r3, r2
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d103      	bne.n	80091de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2200      	movs	r2, #0
 80091dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	2201      	movs	r2, #1
 80091e6:	4013      	ands	r3, r2
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d007      	beq.n	80091fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	699a      	ldr	r2, [r3, #24]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2101      	movs	r1, #1
 80091f8:	430a      	orrs	r2, r1
 80091fa:	619a      	str	r2, [r3, #24]
  }
}
 80091fc:	46c0      	nop			; (mov r8, r8)
 80091fe:	46bd      	mov	sp, r7
 8009200:	b002      	add	sp, #8
 8009202:	bd80      	pop	{r7, pc}

08009204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	1dfb      	adds	r3, r7, #7
 8009212:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009214:	e021      	b.n	800925a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	3301      	adds	r3, #1
 800921a:	d01e      	beq.n	800925a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800921c:	f7fe fbb8 	bl	8007990 <HAL_GetTick>
 8009220:	0002      	movs	r2, r0
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	429a      	cmp	r2, r3
 800922a:	d302      	bcc.n	8009232 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d113      	bne.n	800925a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009236:	2220      	movs	r2, #32
 8009238:	431a      	orrs	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2241      	movs	r2, #65	; 0x41
 8009242:	2120      	movs	r1, #32
 8009244:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2242      	movs	r2, #66	; 0x42
 800924a:	2100      	movs	r1, #0
 800924c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2240      	movs	r2, #64	; 0x40
 8009252:	2100      	movs	r1, #0
 8009254:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e00f      	b.n	800927a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	4013      	ands	r3, r2
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	425a      	negs	r2, r3
 800926a:	4153      	adcs	r3, r2
 800926c:	b2db      	uxtb	r3, r3
 800926e:	001a      	movs	r2, r3
 8009270:	1dfb      	adds	r3, r7, #7
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d0ce      	beq.n	8009216 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	0018      	movs	r0, r3
 800927c:	46bd      	mov	sp, r7
 800927e:	b004      	add	sp, #16
 8009280:	bd80      	pop	{r7, pc}

08009282 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800928e:	e02b      	b.n	80092e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	68b9      	ldr	r1, [r7, #8]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	0018      	movs	r0, r3
 8009298:	f000 f8da 	bl	8009450 <I2C_IsAcknowledgeFailed>
 800929c:	1e03      	subs	r3, r0, #0
 800929e:	d001      	beq.n	80092a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e029      	b.n	80092f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	3301      	adds	r3, #1
 80092a8:	d01e      	beq.n	80092e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092aa:	f7fe fb71 	bl	8007990 <HAL_GetTick>
 80092ae:	0002      	movs	r2, r0
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d302      	bcc.n	80092c0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d113      	bne.n	80092e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c4:	2220      	movs	r2, #32
 80092c6:	431a      	orrs	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2241      	movs	r2, #65	; 0x41
 80092d0:	2120      	movs	r1, #32
 80092d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2242      	movs	r2, #66	; 0x42
 80092d8:	2100      	movs	r1, #0
 80092da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2240      	movs	r2, #64	; 0x40
 80092e0:	2100      	movs	r1, #0
 80092e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e007      	b.n	80092f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	2202      	movs	r2, #2
 80092f0:	4013      	ands	r3, r2
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d1cc      	bne.n	8009290 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	0018      	movs	r0, r3
 80092fa:	46bd      	mov	sp, r7
 80092fc:	b004      	add	sp, #16
 80092fe:	bd80      	pop	{r7, pc}

08009300 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800930c:	e028      	b.n	8009360 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	0018      	movs	r0, r3
 8009316:	f000 f89b 	bl	8009450 <I2C_IsAcknowledgeFailed>
 800931a:	1e03      	subs	r3, r0, #0
 800931c:	d001      	beq.n	8009322 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e026      	b.n	8009370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009322:	f7fe fb35 	bl	8007990 <HAL_GetTick>
 8009326:	0002      	movs	r2, r0
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	429a      	cmp	r2, r3
 8009330:	d302      	bcc.n	8009338 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d113      	bne.n	8009360 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933c:	2220      	movs	r2, #32
 800933e:	431a      	orrs	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2241      	movs	r2, #65	; 0x41
 8009348:	2120      	movs	r1, #32
 800934a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2242      	movs	r2, #66	; 0x42
 8009350:	2100      	movs	r1, #0
 8009352:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2240      	movs	r2, #64	; 0x40
 8009358:	2100      	movs	r1, #0
 800935a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e007      	b.n	8009370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	2220      	movs	r2, #32
 8009368:	4013      	ands	r3, r2
 800936a:	2b20      	cmp	r3, #32
 800936c:	d1cf      	bne.n	800930e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	0018      	movs	r0, r3
 8009372:	46bd      	mov	sp, r7
 8009374:	b004      	add	sp, #16
 8009376:	bd80      	pop	{r7, pc}

08009378 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009384:	e055      	b.n	8009432 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	68b9      	ldr	r1, [r7, #8]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	0018      	movs	r0, r3
 800938e:	f000 f85f 	bl	8009450 <I2C_IsAcknowledgeFailed>
 8009392:	1e03      	subs	r3, r0, #0
 8009394:	d001      	beq.n	800939a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e053      	b.n	8009442 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	2220      	movs	r2, #32
 80093a2:	4013      	ands	r3, r2
 80093a4:	2b20      	cmp	r3, #32
 80093a6:	d129      	bne.n	80093fc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	2204      	movs	r2, #4
 80093b0:	4013      	ands	r3, r2
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d105      	bne.n	80093c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	e03f      	b.n	8009442 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2220      	movs	r2, #32
 80093c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	491d      	ldr	r1, [pc, #116]	; (800944c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80093d6:	400a      	ands	r2, r1
 80093d8:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2241      	movs	r2, #65	; 0x41
 80093e4:	2120      	movs	r1, #32
 80093e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2242      	movs	r2, #66	; 0x42
 80093ec:	2100      	movs	r1, #0
 80093ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2240      	movs	r2, #64	; 0x40
 80093f4:	2100      	movs	r1, #0
 80093f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e022      	b.n	8009442 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093fc:	f7fe fac8 	bl	8007990 <HAL_GetTick>
 8009400:	0002      	movs	r2, r0
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	429a      	cmp	r2, r3
 800940a:	d302      	bcc.n	8009412 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10f      	bne.n	8009432 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009416:	2220      	movs	r2, #32
 8009418:	431a      	orrs	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2241      	movs	r2, #65	; 0x41
 8009422:	2120      	movs	r1, #32
 8009424:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2240      	movs	r2, #64	; 0x40
 800942a:	2100      	movs	r1, #0
 800942c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e007      	b.n	8009442 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	2204      	movs	r2, #4
 800943a:	4013      	ands	r3, r2
 800943c:	2b04      	cmp	r3, #4
 800943e:	d1a2      	bne.n	8009386 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	0018      	movs	r0, r3
 8009444:	46bd      	mov	sp, r7
 8009446:	b004      	add	sp, #16
 8009448:	bd80      	pop	{r7, pc}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	fe00e800 	.word	0xfe00e800

08009450 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	2210      	movs	r2, #16
 8009464:	4013      	ands	r3, r2
 8009466:	2b10      	cmp	r3, #16
 8009468:	d151      	bne.n	800950e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800946a:	e021      	b.n	80094b0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	3301      	adds	r3, #1
 8009470:	d01e      	beq.n	80094b0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009472:	f7fe fa8d 	bl	8007990 <HAL_GetTick>
 8009476:	0002      	movs	r2, r0
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	429a      	cmp	r2, r3
 8009480:	d302      	bcc.n	8009488 <I2C_IsAcknowledgeFailed+0x38>
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d113      	bne.n	80094b0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948c:	2220      	movs	r2, #32
 800948e:	431a      	orrs	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2241      	movs	r2, #65	; 0x41
 8009498:	2120      	movs	r1, #32
 800949a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2242      	movs	r2, #66	; 0x42
 80094a0:	2100      	movs	r1, #0
 80094a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2240      	movs	r2, #64	; 0x40
 80094a8:	2100      	movs	r1, #0
 80094aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e02f      	b.n	8009510 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	2220      	movs	r2, #32
 80094b8:	4013      	ands	r3, r2
 80094ba:	2b20      	cmp	r3, #32
 80094bc:	d1d6      	bne.n	800946c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2210      	movs	r2, #16
 80094c4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2220      	movs	r2, #32
 80094cc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	0018      	movs	r0, r3
 80094d2:	f7ff fe75 	bl	80091c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	490d      	ldr	r1, [pc, #52]	; (8009518 <I2C_IsAcknowledgeFailed+0xc8>)
 80094e2:	400a      	ands	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ea:	2204      	movs	r2, #4
 80094ec:	431a      	orrs	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2241      	movs	r2, #65	; 0x41
 80094f6:	2120      	movs	r1, #32
 80094f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2242      	movs	r2, #66	; 0x42
 80094fe:	2100      	movs	r1, #0
 8009500:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2240      	movs	r2, #64	; 0x40
 8009506:	2100      	movs	r1, #0
 8009508:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e000      	b.n	8009510 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	0018      	movs	r0, r3
 8009512:	46bd      	mov	sp, r7
 8009514:	b004      	add	sp, #16
 8009516:	bd80      	pop	{r7, pc}
 8009518:	fe00e800 	.word	0xfe00e800

0800951c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800951c:	b590      	push	{r4, r7, lr}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	0008      	movs	r0, r1
 8009526:	0011      	movs	r1, r2
 8009528:	607b      	str	r3, [r7, #4]
 800952a:	240a      	movs	r4, #10
 800952c:	193b      	adds	r3, r7, r4
 800952e:	1c02      	adds	r2, r0, #0
 8009530:	801a      	strh	r2, [r3, #0]
 8009532:	2009      	movs	r0, #9
 8009534:	183b      	adds	r3, r7, r0
 8009536:	1c0a      	adds	r2, r1, #0
 8009538:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	6a3a      	ldr	r2, [r7, #32]
 8009542:	0d51      	lsrs	r1, r2, #21
 8009544:	2280      	movs	r2, #128	; 0x80
 8009546:	00d2      	lsls	r2, r2, #3
 8009548:	400a      	ands	r2, r1
 800954a:	490e      	ldr	r1, [pc, #56]	; (8009584 <I2C_TransferConfig+0x68>)
 800954c:	430a      	orrs	r2, r1
 800954e:	43d2      	mvns	r2, r2
 8009550:	401a      	ands	r2, r3
 8009552:	0011      	movs	r1, r2
 8009554:	193b      	adds	r3, r7, r4
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	059b      	lsls	r3, r3, #22
 800955a:	0d9a      	lsrs	r2, r3, #22
 800955c:	183b      	adds	r3, r7, r0
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	0418      	lsls	r0, r3, #16
 8009562:	23ff      	movs	r3, #255	; 0xff
 8009564:	041b      	lsls	r3, r3, #16
 8009566:	4003      	ands	r3, r0
 8009568:	431a      	orrs	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	431a      	orrs	r2, r3
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	431a      	orrs	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800957a:	46c0      	nop			; (mov r8, r8)
 800957c:	46bd      	mov	sp, r7
 800957e:	b005      	add	sp, #20
 8009580:	bd90      	pop	{r4, r7, pc}
 8009582:	46c0      	nop			; (mov r8, r8)
 8009584:	03ff63ff 	.word	0x03ff63ff

08009588 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2241      	movs	r2, #65	; 0x41
 8009596:	5c9b      	ldrb	r3, [r3, r2]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b20      	cmp	r3, #32
 800959c:	d138      	bne.n	8009610 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2240      	movs	r2, #64	; 0x40
 80095a2:	5c9b      	ldrb	r3, [r3, r2]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80095a8:	2302      	movs	r3, #2
 80095aa:	e032      	b.n	8009612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2240      	movs	r2, #64	; 0x40
 80095b0:	2101      	movs	r1, #1
 80095b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2241      	movs	r2, #65	; 0x41
 80095b8:	2124      	movs	r1, #36	; 0x24
 80095ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2101      	movs	r1, #1
 80095c8:	438a      	bics	r2, r1
 80095ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4911      	ldr	r1, [pc, #68]	; (800961c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80095d8:	400a      	ands	r2, r1
 80095da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6819      	ldr	r1, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2101      	movs	r1, #1
 80095f8:	430a      	orrs	r2, r1
 80095fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2241      	movs	r2, #65	; 0x41
 8009600:	2120      	movs	r1, #32
 8009602:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2240      	movs	r2, #64	; 0x40
 8009608:	2100      	movs	r1, #0
 800960a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	e000      	b.n	8009612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009610:	2302      	movs	r3, #2
  }
}
 8009612:	0018      	movs	r0, r3
 8009614:	46bd      	mov	sp, r7
 8009616:	b002      	add	sp, #8
 8009618:	bd80      	pop	{r7, pc}
 800961a:	46c0      	nop			; (mov r8, r8)
 800961c:	ffffefff 	.word	0xffffefff

08009620 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2241      	movs	r2, #65	; 0x41
 800962e:	5c9b      	ldrb	r3, [r3, r2]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b20      	cmp	r3, #32
 8009634:	d139      	bne.n	80096aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2240      	movs	r2, #64	; 0x40
 800963a:	5c9b      	ldrb	r3, [r3, r2]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d101      	bne.n	8009644 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009640:	2302      	movs	r3, #2
 8009642:	e033      	b.n	80096ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2240      	movs	r2, #64	; 0x40
 8009648:	2101      	movs	r1, #1
 800964a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2241      	movs	r2, #65	; 0x41
 8009650:	2124      	movs	r1, #36	; 0x24
 8009652:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2101      	movs	r1, #1
 8009660:	438a      	bics	r2, r1
 8009662:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4a11      	ldr	r2, [pc, #68]	; (80096b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009670:	4013      	ands	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	021b      	lsls	r3, r3, #8
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	4313      	orrs	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2101      	movs	r1, #1
 8009692:	430a      	orrs	r2, r1
 8009694:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2241      	movs	r2, #65	; 0x41
 800969a:	2120      	movs	r1, #32
 800969c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2240      	movs	r2, #64	; 0x40
 80096a2:	2100      	movs	r1, #0
 80096a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	e000      	b.n	80096ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80096aa:	2302      	movs	r3, #2
  }
}
 80096ac:	0018      	movs	r0, r3
 80096ae:	46bd      	mov	sp, r7
 80096b0:	b004      	add	sp, #16
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	fffff0ff 	.word	0xfffff0ff

080096b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80096c0:	4b19      	ldr	r3, [pc, #100]	; (8009728 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a19      	ldr	r2, [pc, #100]	; (800972c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80096c6:	4013      	ands	r3, r2
 80096c8:	0019      	movs	r1, r3
 80096ca:	4b17      	ldr	r3, [pc, #92]	; (8009728 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	2380      	movs	r3, #128	; 0x80
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	429a      	cmp	r2, r3
 80096da:	d11f      	bne.n	800971c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80096dc:	4b14      	ldr	r3, [pc, #80]	; (8009730 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	0013      	movs	r3, r2
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	189b      	adds	r3, r3, r2
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	4912      	ldr	r1, [pc, #72]	; (8009734 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80096ea:	0018      	movs	r0, r3
 80096ec:	f7f6 fd0a 	bl	8000104 <__udivsi3>
 80096f0:	0003      	movs	r3, r0
 80096f2:	3301      	adds	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80096f6:	e008      	b.n	800970a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3b01      	subs	r3, #1
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	e001      	b.n	800970a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e009      	b.n	800971e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800970a:	4b07      	ldr	r3, [pc, #28]	; (8009728 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800970c:	695a      	ldr	r2, [r3, #20]
 800970e:	2380      	movs	r3, #128	; 0x80
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	401a      	ands	r2, r3
 8009714:	2380      	movs	r3, #128	; 0x80
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	429a      	cmp	r2, r3
 800971a:	d0ed      	beq.n	80096f8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	0018      	movs	r0, r3
 8009720:	46bd      	mov	sp, r7
 8009722:	b004      	add	sp, #16
 8009724:	bd80      	pop	{r7, pc}
 8009726:	46c0      	nop			; (mov r8, r8)
 8009728:	40007000 	.word	0x40007000
 800972c:	fffff9ff 	.word	0xfffff9ff
 8009730:	20000000 	.word	0x20000000
 8009734:	000f4240 	.word	0x000f4240

08009738 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800973c:	4b03      	ldr	r3, [pc, #12]	; (800974c <LL_RCC_GetAPB1Prescaler+0x14>)
 800973e:	689a      	ldr	r2, [r3, #8]
 8009740:	23e0      	movs	r3, #224	; 0xe0
 8009742:	01db      	lsls	r3, r3, #7
 8009744:	4013      	ands	r3, r2
}
 8009746:	0018      	movs	r0, r3
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	40021000 	.word	0x40021000

08009750 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e304      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2201      	movs	r2, #1
 8009768:	4013      	ands	r3, r2
 800976a:	d100      	bne.n	800976e <HAL_RCC_OscConfig+0x1e>
 800976c:	e07c      	b.n	8009868 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800976e:	4bc3      	ldr	r3, [pc, #780]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	2238      	movs	r2, #56	; 0x38
 8009774:	4013      	ands	r3, r2
 8009776:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009778:	4bc0      	ldr	r3, [pc, #768]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	2203      	movs	r2, #3
 800977e:	4013      	ands	r3, r2
 8009780:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	2b10      	cmp	r3, #16
 8009786:	d102      	bne.n	800978e <HAL_RCC_OscConfig+0x3e>
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2b03      	cmp	r3, #3
 800978c:	d002      	beq.n	8009794 <HAL_RCC_OscConfig+0x44>
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	2b08      	cmp	r3, #8
 8009792:	d10b      	bne.n	80097ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009794:	4bb9      	ldr	r3, [pc, #740]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	2380      	movs	r3, #128	; 0x80
 800979a:	029b      	lsls	r3, r3, #10
 800979c:	4013      	ands	r3, r2
 800979e:	d062      	beq.n	8009866 <HAL_RCC_OscConfig+0x116>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d15e      	bne.n	8009866 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e2df      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	2380      	movs	r3, #128	; 0x80
 80097b2:	025b      	lsls	r3, r3, #9
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d107      	bne.n	80097c8 <HAL_RCC_OscConfig+0x78>
 80097b8:	4bb0      	ldr	r3, [pc, #704]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	4baf      	ldr	r3, [pc, #700]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80097be:	2180      	movs	r1, #128	; 0x80
 80097c0:	0249      	lsls	r1, r1, #9
 80097c2:	430a      	orrs	r2, r1
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	e020      	b.n	800980a <HAL_RCC_OscConfig+0xba>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	23a0      	movs	r3, #160	; 0xa0
 80097ce:	02db      	lsls	r3, r3, #11
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d10e      	bne.n	80097f2 <HAL_RCC_OscConfig+0xa2>
 80097d4:	4ba9      	ldr	r3, [pc, #676]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	4ba8      	ldr	r3, [pc, #672]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80097da:	2180      	movs	r1, #128	; 0x80
 80097dc:	02c9      	lsls	r1, r1, #11
 80097de:	430a      	orrs	r2, r1
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	4ba6      	ldr	r3, [pc, #664]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	4ba5      	ldr	r3, [pc, #660]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80097e8:	2180      	movs	r1, #128	; 0x80
 80097ea:	0249      	lsls	r1, r1, #9
 80097ec:	430a      	orrs	r2, r1
 80097ee:	601a      	str	r2, [r3, #0]
 80097f0:	e00b      	b.n	800980a <HAL_RCC_OscConfig+0xba>
 80097f2:	4ba2      	ldr	r3, [pc, #648]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	4ba1      	ldr	r3, [pc, #644]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80097f8:	49a1      	ldr	r1, [pc, #644]	; (8009a80 <HAL_RCC_OscConfig+0x330>)
 80097fa:	400a      	ands	r2, r1
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	4b9f      	ldr	r3, [pc, #636]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	4b9e      	ldr	r3, [pc, #632]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009804:	499f      	ldr	r1, [pc, #636]	; (8009a84 <HAL_RCC_OscConfig+0x334>)
 8009806:	400a      	ands	r2, r1
 8009808:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d014      	beq.n	800983c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009812:	f7fe f8bd 	bl	8007990 <HAL_GetTick>
 8009816:	0003      	movs	r3, r0
 8009818:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800981a:	e008      	b.n	800982e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800981c:	f7fe f8b8 	bl	8007990 <HAL_GetTick>
 8009820:	0002      	movs	r2, r0
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b64      	cmp	r3, #100	; 0x64
 8009828:	d901      	bls.n	800982e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e29e      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800982e:	4b93      	ldr	r3, [pc, #588]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	2380      	movs	r3, #128	; 0x80
 8009834:	029b      	lsls	r3, r3, #10
 8009836:	4013      	ands	r3, r2
 8009838:	d0f0      	beq.n	800981c <HAL_RCC_OscConfig+0xcc>
 800983a:	e015      	b.n	8009868 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800983c:	f7fe f8a8 	bl	8007990 <HAL_GetTick>
 8009840:	0003      	movs	r3, r0
 8009842:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009844:	e008      	b.n	8009858 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009846:	f7fe f8a3 	bl	8007990 <HAL_GetTick>
 800984a:	0002      	movs	r2, r0
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	2b64      	cmp	r3, #100	; 0x64
 8009852:	d901      	bls.n	8009858 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e289      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009858:	4b88      	ldr	r3, [pc, #544]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	2380      	movs	r3, #128	; 0x80
 800985e:	029b      	lsls	r3, r3, #10
 8009860:	4013      	ands	r3, r2
 8009862:	d1f0      	bne.n	8009846 <HAL_RCC_OscConfig+0xf6>
 8009864:	e000      	b.n	8009868 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009866:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2202      	movs	r2, #2
 800986e:	4013      	ands	r3, r2
 8009870:	d100      	bne.n	8009874 <HAL_RCC_OscConfig+0x124>
 8009872:	e099      	b.n	80099a8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009874:	4b81      	ldr	r3, [pc, #516]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	2238      	movs	r2, #56	; 0x38
 800987a:	4013      	ands	r3, r2
 800987c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800987e:	4b7f      	ldr	r3, [pc, #508]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	2203      	movs	r2, #3
 8009884:	4013      	ands	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	2b10      	cmp	r3, #16
 800988c:	d102      	bne.n	8009894 <HAL_RCC_OscConfig+0x144>
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d002      	beq.n	800989a <HAL_RCC_OscConfig+0x14a>
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d135      	bne.n	8009906 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800989a:	4b78      	ldr	r3, [pc, #480]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	2380      	movs	r3, #128	; 0x80
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	4013      	ands	r3, r2
 80098a4:	d005      	beq.n	80098b2 <HAL_RCC_OscConfig+0x162>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e25c      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098b2:	4b72      	ldr	r3, [pc, #456]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	4a74      	ldr	r2, [pc, #464]	; (8009a88 <HAL_RCC_OscConfig+0x338>)
 80098b8:	4013      	ands	r3, r2
 80098ba:	0019      	movs	r1, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	021a      	lsls	r2, r3, #8
 80098c2:	4b6e      	ldr	r3, [pc, #440]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80098c4:	430a      	orrs	r2, r1
 80098c6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d112      	bne.n	80098f4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80098ce:	4b6b      	ldr	r3, [pc, #428]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a6e      	ldr	r2, [pc, #440]	; (8009a8c <HAL_RCC_OscConfig+0x33c>)
 80098d4:	4013      	ands	r3, r2
 80098d6:	0019      	movs	r1, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691a      	ldr	r2, [r3, #16]
 80098dc:	4b67      	ldr	r3, [pc, #412]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80098de:	430a      	orrs	r2, r1
 80098e0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80098e2:	4b66      	ldr	r3, [pc, #408]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	0adb      	lsrs	r3, r3, #11
 80098e8:	2207      	movs	r2, #7
 80098ea:	4013      	ands	r3, r2
 80098ec:	4a68      	ldr	r2, [pc, #416]	; (8009a90 <HAL_RCC_OscConfig+0x340>)
 80098ee:	40da      	lsrs	r2, r3
 80098f0:	4b68      	ldr	r3, [pc, #416]	; (8009a94 <HAL_RCC_OscConfig+0x344>)
 80098f2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80098f4:	4b68      	ldr	r3, [pc, #416]	; (8009a98 <HAL_RCC_OscConfig+0x348>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	0018      	movs	r0, r3
 80098fa:	f7fd ffef 	bl	80078dc <HAL_InitTick>
 80098fe:	1e03      	subs	r3, r0, #0
 8009900:	d051      	beq.n	80099a6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e232      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d030      	beq.n	8009970 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800990e:	4b5b      	ldr	r3, [pc, #364]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a5e      	ldr	r2, [pc, #376]	; (8009a8c <HAL_RCC_OscConfig+0x33c>)
 8009914:	4013      	ands	r3, r2
 8009916:	0019      	movs	r1, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	691a      	ldr	r2, [r3, #16]
 800991c:	4b57      	ldr	r3, [pc, #348]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 800991e:	430a      	orrs	r2, r1
 8009920:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009922:	4b56      	ldr	r3, [pc, #344]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	4b55      	ldr	r3, [pc, #340]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009928:	2180      	movs	r1, #128	; 0x80
 800992a:	0049      	lsls	r1, r1, #1
 800992c:	430a      	orrs	r2, r1
 800992e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009930:	f7fe f82e 	bl	8007990 <HAL_GetTick>
 8009934:	0003      	movs	r3, r0
 8009936:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009938:	e008      	b.n	800994c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800993a:	f7fe f829 	bl	8007990 <HAL_GetTick>
 800993e:	0002      	movs	r2, r0
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	2b02      	cmp	r3, #2
 8009946:	d901      	bls.n	800994c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e20f      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800994c:	4b4b      	ldr	r3, [pc, #300]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	2380      	movs	r3, #128	; 0x80
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	4013      	ands	r3, r2
 8009956:	d0f0      	beq.n	800993a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009958:	4b48      	ldr	r3, [pc, #288]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	4a4a      	ldr	r2, [pc, #296]	; (8009a88 <HAL_RCC_OscConfig+0x338>)
 800995e:	4013      	ands	r3, r2
 8009960:	0019      	movs	r1, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	021a      	lsls	r2, r3, #8
 8009968:	4b44      	ldr	r3, [pc, #272]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 800996a:	430a      	orrs	r2, r1
 800996c:	605a      	str	r2, [r3, #4]
 800996e:	e01b      	b.n	80099a8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009970:	4b42      	ldr	r3, [pc, #264]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	4b41      	ldr	r3, [pc, #260]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009976:	4949      	ldr	r1, [pc, #292]	; (8009a9c <HAL_RCC_OscConfig+0x34c>)
 8009978:	400a      	ands	r2, r1
 800997a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800997c:	f7fe f808 	bl	8007990 <HAL_GetTick>
 8009980:	0003      	movs	r3, r0
 8009982:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009984:	e008      	b.n	8009998 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009986:	f7fe f803 	bl	8007990 <HAL_GetTick>
 800998a:	0002      	movs	r2, r0
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	2b02      	cmp	r3, #2
 8009992:	d901      	bls.n	8009998 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e1e9      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009998:	4b38      	ldr	r3, [pc, #224]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	2380      	movs	r3, #128	; 0x80
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	4013      	ands	r3, r2
 80099a2:	d1f0      	bne.n	8009986 <HAL_RCC_OscConfig+0x236>
 80099a4:	e000      	b.n	80099a8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2208      	movs	r2, #8
 80099ae:	4013      	ands	r3, r2
 80099b0:	d047      	beq.n	8009a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80099b2:	4b32      	ldr	r3, [pc, #200]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	2238      	movs	r2, #56	; 0x38
 80099b8:	4013      	ands	r3, r2
 80099ba:	2b18      	cmp	r3, #24
 80099bc:	d10a      	bne.n	80099d4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80099be:	4b2f      	ldr	r3, [pc, #188]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80099c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099c2:	2202      	movs	r2, #2
 80099c4:	4013      	ands	r3, r2
 80099c6:	d03c      	beq.n	8009a42 <HAL_RCC_OscConfig+0x2f2>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d138      	bne.n	8009a42 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e1cb      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d019      	beq.n	8009a10 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80099dc:	4b27      	ldr	r3, [pc, #156]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80099de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80099e0:	4b26      	ldr	r3, [pc, #152]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 80099e2:	2101      	movs	r1, #1
 80099e4:	430a      	orrs	r2, r1
 80099e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e8:	f7fd ffd2 	bl	8007990 <HAL_GetTick>
 80099ec:	0003      	movs	r3, r0
 80099ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80099f0:	e008      	b.n	8009a04 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099f2:	f7fd ffcd 	bl	8007990 <HAL_GetTick>
 80099f6:	0002      	movs	r2, r0
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d901      	bls.n	8009a04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e1b3      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a04:	4b1d      	ldr	r3, [pc, #116]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a08:	2202      	movs	r2, #2
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	d0f1      	beq.n	80099f2 <HAL_RCC_OscConfig+0x2a2>
 8009a0e:	e018      	b.n	8009a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009a10:	4b1a      	ldr	r3, [pc, #104]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009a12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a14:	4b19      	ldr	r3, [pc, #100]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009a16:	2101      	movs	r1, #1
 8009a18:	438a      	bics	r2, r1
 8009a1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a1c:	f7fd ffb8 	bl	8007990 <HAL_GetTick>
 8009a20:	0003      	movs	r3, r0
 8009a22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a24:	e008      	b.n	8009a38 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a26:	f7fd ffb3 	bl	8007990 <HAL_GetTick>
 8009a2a:	0002      	movs	r2, r0
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d901      	bls.n	8009a38 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e199      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a38:	4b10      	ldr	r3, [pc, #64]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	4013      	ands	r3, r2
 8009a40:	d1f1      	bne.n	8009a26 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2204      	movs	r2, #4
 8009a48:	4013      	ands	r3, r2
 8009a4a:	d100      	bne.n	8009a4e <HAL_RCC_OscConfig+0x2fe>
 8009a4c:	e0c6      	b.n	8009bdc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a4e:	231f      	movs	r3, #31
 8009a50:	18fb      	adds	r3, r7, r3
 8009a52:	2200      	movs	r2, #0
 8009a54:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8009a56:	4b09      	ldr	r3, [pc, #36]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	2238      	movs	r2, #56	; 0x38
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	2b20      	cmp	r3, #32
 8009a60:	d11e      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009a62:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <HAL_RCC_OscConfig+0x32c>)
 8009a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a66:	2202      	movs	r2, #2
 8009a68:	4013      	ands	r3, r2
 8009a6a:	d100      	bne.n	8009a6e <HAL_RCC_OscConfig+0x31e>
 8009a6c:	e0b6      	b.n	8009bdc <HAL_RCC_OscConfig+0x48c>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d000      	beq.n	8009a78 <HAL_RCC_OscConfig+0x328>
 8009a76:	e0b1      	b.n	8009bdc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e177      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
 8009a7c:	40021000 	.word	0x40021000
 8009a80:	fffeffff 	.word	0xfffeffff
 8009a84:	fffbffff 	.word	0xfffbffff
 8009a88:	ffff80ff 	.word	0xffff80ff
 8009a8c:	ffffc7ff 	.word	0xffffc7ff
 8009a90:	00f42400 	.word	0x00f42400
 8009a94:	20000000 	.word	0x20000000
 8009a98:	2000000c 	.word	0x2000000c
 8009a9c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009aa0:	4bb4      	ldr	r3, [pc, #720]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aa4:	2380      	movs	r3, #128	; 0x80
 8009aa6:	055b      	lsls	r3, r3, #21
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	d101      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x360>
 8009aac:	2301      	movs	r3, #1
 8009aae:	e000      	b.n	8009ab2 <HAL_RCC_OscConfig+0x362>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d011      	beq.n	8009ada <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009ab6:	4baf      	ldr	r3, [pc, #700]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aba:	4bae      	ldr	r3, [pc, #696]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009abc:	2180      	movs	r1, #128	; 0x80
 8009abe:	0549      	lsls	r1, r1, #21
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	63da      	str	r2, [r3, #60]	; 0x3c
 8009ac4:	4bab      	ldr	r3, [pc, #684]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ac8:	2380      	movs	r3, #128	; 0x80
 8009aca:	055b      	lsls	r3, r3, #21
 8009acc:	4013      	ands	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8009ad2:	231f      	movs	r3, #31
 8009ad4:	18fb      	adds	r3, r7, r3
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ada:	4ba7      	ldr	r3, [pc, #668]	; (8009d78 <HAL_RCC_OscConfig+0x628>)
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	2380      	movs	r3, #128	; 0x80
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	d11a      	bne.n	8009b1c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ae6:	4ba4      	ldr	r3, [pc, #656]	; (8009d78 <HAL_RCC_OscConfig+0x628>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	4ba3      	ldr	r3, [pc, #652]	; (8009d78 <HAL_RCC_OscConfig+0x628>)
 8009aec:	2180      	movs	r1, #128	; 0x80
 8009aee:	0049      	lsls	r1, r1, #1
 8009af0:	430a      	orrs	r2, r1
 8009af2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009af4:	f7fd ff4c 	bl	8007990 <HAL_GetTick>
 8009af8:	0003      	movs	r3, r0
 8009afa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009afc:	e008      	b.n	8009b10 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009afe:	f7fd ff47 	bl	8007990 <HAL_GetTick>
 8009b02:	0002      	movs	r2, r0
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d901      	bls.n	8009b10 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e12d      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b10:	4b99      	ldr	r3, [pc, #612]	; (8009d78 <HAL_RCC_OscConfig+0x628>)
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	2380      	movs	r3, #128	; 0x80
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	4013      	ands	r3, r2
 8009b1a:	d0f0      	beq.n	8009afe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d106      	bne.n	8009b32 <HAL_RCC_OscConfig+0x3e2>
 8009b24:	4b93      	ldr	r3, [pc, #588]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b28:	4b92      	ldr	r3, [pc, #584]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b30:	e01c      	b.n	8009b6c <HAL_RCC_OscConfig+0x41c>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	2b05      	cmp	r3, #5
 8009b38:	d10c      	bne.n	8009b54 <HAL_RCC_OscConfig+0x404>
 8009b3a:	4b8e      	ldr	r3, [pc, #568]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b3e:	4b8d      	ldr	r3, [pc, #564]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b40:	2104      	movs	r1, #4
 8009b42:	430a      	orrs	r2, r1
 8009b44:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b46:	4b8b      	ldr	r3, [pc, #556]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b4a:	4b8a      	ldr	r3, [pc, #552]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b52:	e00b      	b.n	8009b6c <HAL_RCC_OscConfig+0x41c>
 8009b54:	4b87      	ldr	r3, [pc, #540]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b58:	4b86      	ldr	r3, [pc, #536]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	438a      	bics	r2, r1
 8009b5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b60:	4b84      	ldr	r3, [pc, #528]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b64:	4b83      	ldr	r3, [pc, #524]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b66:	2104      	movs	r1, #4
 8009b68:	438a      	bics	r2, r1
 8009b6a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d014      	beq.n	8009b9e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b74:	f7fd ff0c 	bl	8007990 <HAL_GetTick>
 8009b78:	0003      	movs	r3, r0
 8009b7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b7c:	e009      	b.n	8009b92 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b7e:	f7fd ff07 	bl	8007990 <HAL_GetTick>
 8009b82:	0002      	movs	r2, r0
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	4a7c      	ldr	r2, [pc, #496]	; (8009d7c <HAL_RCC_OscConfig+0x62c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e0ec      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b92:	4b78      	ldr	r3, [pc, #480]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b96:	2202      	movs	r2, #2
 8009b98:	4013      	ands	r3, r2
 8009b9a:	d0f0      	beq.n	8009b7e <HAL_RCC_OscConfig+0x42e>
 8009b9c:	e013      	b.n	8009bc6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b9e:	f7fd fef7 	bl	8007990 <HAL_GetTick>
 8009ba2:	0003      	movs	r3, r0
 8009ba4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009ba6:	e009      	b.n	8009bbc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ba8:	f7fd fef2 	bl	8007990 <HAL_GetTick>
 8009bac:	0002      	movs	r2, r0
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	4a72      	ldr	r2, [pc, #456]	; (8009d7c <HAL_RCC_OscConfig+0x62c>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d901      	bls.n	8009bbc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e0d7      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bbc:	4b6d      	ldr	r3, [pc, #436]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	d1f0      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009bc6:	231f      	movs	r3, #31
 8009bc8:	18fb      	adds	r3, r7, r3
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d105      	bne.n	8009bdc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009bd0:	4b68      	ldr	r3, [pc, #416]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bd4:	4b67      	ldr	r3, [pc, #412]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009bd6:	496a      	ldr	r1, [pc, #424]	; (8009d80 <HAL_RCC_OscConfig+0x630>)
 8009bd8:	400a      	ands	r2, r1
 8009bda:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d100      	bne.n	8009be6 <HAL_RCC_OscConfig+0x496>
 8009be4:	e0c1      	b.n	8009d6a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009be6:	4b63      	ldr	r3, [pc, #396]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	2238      	movs	r2, #56	; 0x38
 8009bec:	4013      	ands	r3, r2
 8009bee:	2b10      	cmp	r3, #16
 8009bf0:	d100      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x4a4>
 8009bf2:	e081      	b.n	8009cf8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d156      	bne.n	8009caa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bfc:	4b5d      	ldr	r3, [pc, #372]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	4b5c      	ldr	r3, [pc, #368]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009c02:	4960      	ldr	r1, [pc, #384]	; (8009d84 <HAL_RCC_OscConfig+0x634>)
 8009c04:	400a      	ands	r2, r1
 8009c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c08:	f7fd fec2 	bl	8007990 <HAL_GetTick>
 8009c0c:	0003      	movs	r3, r0
 8009c0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c10:	e008      	b.n	8009c24 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c12:	f7fd febd 	bl	8007990 <HAL_GetTick>
 8009c16:	0002      	movs	r2, r0
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d901      	bls.n	8009c24 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e0a3      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c24:	4b53      	ldr	r3, [pc, #332]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	2380      	movs	r3, #128	; 0x80
 8009c2a:	049b      	lsls	r3, r3, #18
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	d1f0      	bne.n	8009c12 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c30:	4b50      	ldr	r3, [pc, #320]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	4a54      	ldr	r2, [pc, #336]	; (8009d88 <HAL_RCC_OscConfig+0x638>)
 8009c36:	4013      	ands	r3, r2
 8009c38:	0019      	movs	r1, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1a      	ldr	r2, [r3, #32]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	431a      	orrs	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c48:	021b      	lsls	r3, r3, #8
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	431a      	orrs	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	4b45      	ldr	r3, [pc, #276]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009c60:	430a      	orrs	r2, r1
 8009c62:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c64:	4b43      	ldr	r3, [pc, #268]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	4b42      	ldr	r3, [pc, #264]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009c6a:	2180      	movs	r1, #128	; 0x80
 8009c6c:	0449      	lsls	r1, r1, #17
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009c72:	4b40      	ldr	r3, [pc, #256]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	4b3f      	ldr	r3, [pc, #252]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009c78:	2180      	movs	r1, #128	; 0x80
 8009c7a:	0549      	lsls	r1, r1, #21
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c80:	f7fd fe86 	bl	8007990 <HAL_GetTick>
 8009c84:	0003      	movs	r3, r0
 8009c86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c88:	e008      	b.n	8009c9c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c8a:	f7fd fe81 	bl	8007990 <HAL_GetTick>
 8009c8e:	0002      	movs	r2, r0
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d901      	bls.n	8009c9c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e067      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c9c:	4b35      	ldr	r3, [pc, #212]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	2380      	movs	r3, #128	; 0x80
 8009ca2:	049b      	lsls	r3, r3, #18
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	d0f0      	beq.n	8009c8a <HAL_RCC_OscConfig+0x53a>
 8009ca8:	e05f      	b.n	8009d6a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009caa:	4b32      	ldr	r3, [pc, #200]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4b31      	ldr	r3, [pc, #196]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009cb0:	4934      	ldr	r1, [pc, #208]	; (8009d84 <HAL_RCC_OscConfig+0x634>)
 8009cb2:	400a      	ands	r2, r1
 8009cb4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8009cb6:	4b2f      	ldr	r3, [pc, #188]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	4b2e      	ldr	r3, [pc, #184]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009cbc:	2103      	movs	r1, #3
 8009cbe:	438a      	bics	r2, r1
 8009cc0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009cc2:	4b2c      	ldr	r3, [pc, #176]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009cc4:	68da      	ldr	r2, [r3, #12]
 8009cc6:	4b2b      	ldr	r3, [pc, #172]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009cc8:	4930      	ldr	r1, [pc, #192]	; (8009d8c <HAL_RCC_OscConfig+0x63c>)
 8009cca:	400a      	ands	r2, r1
 8009ccc:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cce:	f7fd fe5f 	bl	8007990 <HAL_GetTick>
 8009cd2:	0003      	movs	r3, r0
 8009cd4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009cd6:	e008      	b.n	8009cea <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cd8:	f7fd fe5a 	bl	8007990 <HAL_GetTick>
 8009cdc:	0002      	movs	r2, r0
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d901      	bls.n	8009cea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e040      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009cea:	4b22      	ldr	r3, [pc, #136]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	2380      	movs	r3, #128	; 0x80
 8009cf0:	049b      	lsls	r3, r3, #18
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	d1f0      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x588>
 8009cf6:	e038      	b.n	8009d6a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d101      	bne.n	8009d04 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e033      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009d04:	4b1b      	ldr	r3, [pc, #108]	; (8009d74 <HAL_RCC_OscConfig+0x624>)
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2203      	movs	r2, #3
 8009d0e:	401a      	ands	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a1b      	ldr	r3, [r3, #32]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d126      	bne.n	8009d66 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2270      	movs	r2, #112	; 0x70
 8009d1c:	401a      	ands	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d11f      	bne.n	8009d66 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	23fe      	movs	r3, #254	; 0xfe
 8009d2a:	01db      	lsls	r3, r3, #7
 8009d2c:	401a      	ands	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d32:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d116      	bne.n	8009d66 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	23f8      	movs	r3, #248	; 0xf8
 8009d3c:	039b      	lsls	r3, r3, #14
 8009d3e:	401a      	ands	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d10e      	bne.n	8009d66 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	23e0      	movs	r3, #224	; 0xe0
 8009d4c:	051b      	lsls	r3, r3, #20
 8009d4e:	401a      	ands	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d106      	bne.n	8009d66 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	0f5b      	lsrs	r3, r3, #29
 8009d5c:	075a      	lsls	r2, r3, #29
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d001      	beq.n	8009d6a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e000      	b.n	8009d6c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	b008      	add	sp, #32
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	40021000 	.word	0x40021000
 8009d78:	40007000 	.word	0x40007000
 8009d7c:	00001388 	.word	0x00001388
 8009d80:	efffffff 	.word	0xefffffff
 8009d84:	feffffff 	.word	0xfeffffff
 8009d88:	11c1808c 	.word	0x11c1808c
 8009d8c:	eefeffff 	.word	0xeefeffff

08009d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e0e9      	b.n	8009f78 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009da4:	4b76      	ldr	r3, [pc, #472]	; (8009f80 <HAL_RCC_ClockConfig+0x1f0>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2207      	movs	r2, #7
 8009daa:	4013      	ands	r3, r2
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d91e      	bls.n	8009df0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009db2:	4b73      	ldr	r3, [pc, #460]	; (8009f80 <HAL_RCC_ClockConfig+0x1f0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2207      	movs	r2, #7
 8009db8:	4393      	bics	r3, r2
 8009dba:	0019      	movs	r1, r3
 8009dbc:	4b70      	ldr	r3, [pc, #448]	; (8009f80 <HAL_RCC_ClockConfig+0x1f0>)
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009dc4:	f7fd fde4 	bl	8007990 <HAL_GetTick>
 8009dc8:	0003      	movs	r3, r0
 8009dca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009dcc:	e009      	b.n	8009de2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dce:	f7fd fddf 	bl	8007990 <HAL_GetTick>
 8009dd2:	0002      	movs	r2, r0
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	4a6a      	ldr	r2, [pc, #424]	; (8009f84 <HAL_RCC_ClockConfig+0x1f4>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e0ca      	b.n	8009f78 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009de2:	4b67      	ldr	r3, [pc, #412]	; (8009f80 <HAL_RCC_ClockConfig+0x1f0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2207      	movs	r2, #7
 8009de8:	4013      	ands	r3, r2
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d1ee      	bne.n	8009dce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2202      	movs	r2, #2
 8009df6:	4013      	ands	r3, r2
 8009df8:	d015      	beq.n	8009e26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2204      	movs	r2, #4
 8009e00:	4013      	ands	r3, r2
 8009e02:	d006      	beq.n	8009e12 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009e04:	4b60      	ldr	r3, [pc, #384]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009e06:	689a      	ldr	r2, [r3, #8]
 8009e08:	4b5f      	ldr	r3, [pc, #380]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009e0a:	21e0      	movs	r1, #224	; 0xe0
 8009e0c:	01c9      	lsls	r1, r1, #7
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e12:	4b5d      	ldr	r3, [pc, #372]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	4a5d      	ldr	r2, [pc, #372]	; (8009f8c <HAL_RCC_ClockConfig+0x1fc>)
 8009e18:	4013      	ands	r3, r2
 8009e1a:	0019      	movs	r1, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689a      	ldr	r2, [r3, #8]
 8009e20:	4b59      	ldr	r3, [pc, #356]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009e22:	430a      	orrs	r2, r1
 8009e24:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	d057      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d107      	bne.n	8009e48 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e38:	4b53      	ldr	r3, [pc, #332]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	2380      	movs	r3, #128	; 0x80
 8009e3e:	029b      	lsls	r3, r3, #10
 8009e40:	4013      	ands	r3, r2
 8009e42:	d12b      	bne.n	8009e9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e097      	b.n	8009f78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d107      	bne.n	8009e60 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e50:	4b4d      	ldr	r3, [pc, #308]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	2380      	movs	r3, #128	; 0x80
 8009e56:	049b      	lsls	r3, r3, #18
 8009e58:	4013      	ands	r3, r2
 8009e5a:	d11f      	bne.n	8009e9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e08b      	b.n	8009f78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d107      	bne.n	8009e78 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e68:	4b47      	ldr	r3, [pc, #284]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	2380      	movs	r3, #128	; 0x80
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	4013      	ands	r3, r2
 8009e72:	d113      	bne.n	8009e9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e07f      	b.n	8009f78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	d106      	bne.n	8009e8e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009e80:	4b41      	ldr	r3, [pc, #260]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e84:	2202      	movs	r2, #2
 8009e86:	4013      	ands	r3, r2
 8009e88:	d108      	bne.n	8009e9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e074      	b.n	8009f78 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e8e:	4b3e      	ldr	r3, [pc, #248]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e92:	2202      	movs	r2, #2
 8009e94:	4013      	ands	r3, r2
 8009e96:	d101      	bne.n	8009e9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e06d      	b.n	8009f78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009e9c:	4b3a      	ldr	r3, [pc, #232]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	2207      	movs	r2, #7
 8009ea2:	4393      	bics	r3, r2
 8009ea4:	0019      	movs	r1, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685a      	ldr	r2, [r3, #4]
 8009eaa:	4b37      	ldr	r3, [pc, #220]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009eac:	430a      	orrs	r2, r1
 8009eae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eb0:	f7fd fd6e 	bl	8007990 <HAL_GetTick>
 8009eb4:	0003      	movs	r3, r0
 8009eb6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009eb8:	e009      	b.n	8009ece <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009eba:	f7fd fd69 	bl	8007990 <HAL_GetTick>
 8009ebe:	0002      	movs	r2, r0
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	4a2f      	ldr	r2, [pc, #188]	; (8009f84 <HAL_RCC_ClockConfig+0x1f4>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d901      	bls.n	8009ece <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e054      	b.n	8009f78 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ece:	4b2e      	ldr	r3, [pc, #184]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	2238      	movs	r2, #56	; 0x38
 8009ed4:	401a      	ands	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	00db      	lsls	r3, r3, #3
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d1ec      	bne.n	8009eba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ee0:	4b27      	ldr	r3, [pc, #156]	; (8009f80 <HAL_RCC_ClockConfig+0x1f0>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2207      	movs	r2, #7
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d21e      	bcs.n	8009f2c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009eee:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <HAL_RCC_ClockConfig+0x1f0>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2207      	movs	r2, #7
 8009ef4:	4393      	bics	r3, r2
 8009ef6:	0019      	movs	r1, r3
 8009ef8:	4b21      	ldr	r3, [pc, #132]	; (8009f80 <HAL_RCC_ClockConfig+0x1f0>)
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	430a      	orrs	r2, r1
 8009efe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009f00:	f7fd fd46 	bl	8007990 <HAL_GetTick>
 8009f04:	0003      	movs	r3, r0
 8009f06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009f08:	e009      	b.n	8009f1e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f0a:	f7fd fd41 	bl	8007990 <HAL_GetTick>
 8009f0e:	0002      	movs	r2, r0
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	4a1b      	ldr	r2, [pc, #108]	; (8009f84 <HAL_RCC_ClockConfig+0x1f4>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d901      	bls.n	8009f1e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e02c      	b.n	8009f78 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009f1e:	4b18      	ldr	r3, [pc, #96]	; (8009f80 <HAL_RCC_ClockConfig+0x1f0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2207      	movs	r2, #7
 8009f24:	4013      	ands	r3, r2
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d1ee      	bne.n	8009f0a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2204      	movs	r2, #4
 8009f32:	4013      	ands	r3, r2
 8009f34:	d009      	beq.n	8009f4a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	4a15      	ldr	r2, [pc, #84]	; (8009f90 <HAL_RCC_ClockConfig+0x200>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	0019      	movs	r1, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68da      	ldr	r2, [r3, #12]
 8009f44:	4b10      	ldr	r3, [pc, #64]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009f46:	430a      	orrs	r2, r1
 8009f48:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009f4a:	f000 f829 	bl	8009fa0 <HAL_RCC_GetSysClockFreq>
 8009f4e:	0001      	movs	r1, r0
 8009f50:	4b0d      	ldr	r3, [pc, #52]	; (8009f88 <HAL_RCC_ClockConfig+0x1f8>)
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	0a1b      	lsrs	r3, r3, #8
 8009f56:	220f      	movs	r2, #15
 8009f58:	401a      	ands	r2, r3
 8009f5a:	4b0e      	ldr	r3, [pc, #56]	; (8009f94 <HAL_RCC_ClockConfig+0x204>)
 8009f5c:	0092      	lsls	r2, r2, #2
 8009f5e:	58d3      	ldr	r3, [r2, r3]
 8009f60:	221f      	movs	r2, #31
 8009f62:	4013      	ands	r3, r2
 8009f64:	000a      	movs	r2, r1
 8009f66:	40da      	lsrs	r2, r3
 8009f68:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <HAL_RCC_ClockConfig+0x208>)
 8009f6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009f6c:	4b0b      	ldr	r3, [pc, #44]	; (8009f9c <HAL_RCC_ClockConfig+0x20c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	0018      	movs	r0, r3
 8009f72:	f7fd fcb3 	bl	80078dc <HAL_InitTick>
 8009f76:	0003      	movs	r3, r0
}
 8009f78:	0018      	movs	r0, r3
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	b004      	add	sp, #16
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40022000 	.word	0x40022000
 8009f84:	00001388 	.word	0x00001388
 8009f88:	40021000 	.word	0x40021000
 8009f8c:	fffff0ff 	.word	0xfffff0ff
 8009f90:	ffff8fff 	.word	0xffff8fff
 8009f94:	0800f0a0 	.word	0x0800f0a0
 8009f98:	20000000 	.word	0x20000000
 8009f9c:	2000000c 	.word	0x2000000c

08009fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009fa6:	4b3c      	ldr	r3, [pc, #240]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	2238      	movs	r2, #56	; 0x38
 8009fac:	4013      	ands	r3, r2
 8009fae:	d10f      	bne.n	8009fd0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009fb0:	4b39      	ldr	r3, [pc, #228]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	0adb      	lsrs	r3, r3, #11
 8009fb6:	2207      	movs	r2, #7
 8009fb8:	4013      	ands	r3, r2
 8009fba:	2201      	movs	r2, #1
 8009fbc:	409a      	lsls	r2, r3
 8009fbe:	0013      	movs	r3, r2
 8009fc0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	4835      	ldr	r0, [pc, #212]	; (800a09c <HAL_RCC_GetSysClockFreq+0xfc>)
 8009fc6:	f7f6 f89d 	bl	8000104 <__udivsi3>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	613b      	str	r3, [r7, #16]
 8009fce:	e05d      	b.n	800a08c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009fd0:	4b31      	ldr	r3, [pc, #196]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	2238      	movs	r2, #56	; 0x38
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	2b08      	cmp	r3, #8
 8009fda:	d102      	bne.n	8009fe2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009fdc:	4b30      	ldr	r3, [pc, #192]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8009fde:	613b      	str	r3, [r7, #16]
 8009fe0:	e054      	b.n	800a08c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009fe2:	4b2d      	ldr	r3, [pc, #180]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	2238      	movs	r2, #56	; 0x38
 8009fe8:	4013      	ands	r3, r2
 8009fea:	2b10      	cmp	r3, #16
 8009fec:	d138      	bne.n	800a060 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009fee:	4b2a      	ldr	r3, [pc, #168]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	2203      	movs	r2, #3
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ff8:	4b27      	ldr	r3, [pc, #156]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	091b      	lsrs	r3, r3, #4
 8009ffe:	2207      	movs	r2, #7
 800a000:	4013      	ands	r3, r2
 800a002:	3301      	adds	r3, #1
 800a004:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b03      	cmp	r3, #3
 800a00a:	d10d      	bne.n	800a028 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a00c:	68b9      	ldr	r1, [r7, #8]
 800a00e:	4824      	ldr	r0, [pc, #144]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x100>)
 800a010:	f7f6 f878 	bl	8000104 <__udivsi3>
 800a014:	0003      	movs	r3, r0
 800a016:	0019      	movs	r1, r3
 800a018:	4b1f      	ldr	r3, [pc, #124]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	0a1b      	lsrs	r3, r3, #8
 800a01e:	227f      	movs	r2, #127	; 0x7f
 800a020:	4013      	ands	r3, r2
 800a022:	434b      	muls	r3, r1
 800a024:	617b      	str	r3, [r7, #20]
        break;
 800a026:	e00d      	b.n	800a044 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a028:	68b9      	ldr	r1, [r7, #8]
 800a02a:	481c      	ldr	r0, [pc, #112]	; (800a09c <HAL_RCC_GetSysClockFreq+0xfc>)
 800a02c:	f7f6 f86a 	bl	8000104 <__udivsi3>
 800a030:	0003      	movs	r3, r0
 800a032:	0019      	movs	r1, r3
 800a034:	4b18      	ldr	r3, [pc, #96]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	0a1b      	lsrs	r3, r3, #8
 800a03a:	227f      	movs	r2, #127	; 0x7f
 800a03c:	4013      	ands	r3, r2
 800a03e:	434b      	muls	r3, r1
 800a040:	617b      	str	r3, [r7, #20]
        break;
 800a042:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a044:	4b14      	ldr	r3, [pc, #80]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	0f5b      	lsrs	r3, r3, #29
 800a04a:	2207      	movs	r2, #7
 800a04c:	4013      	ands	r3, r2
 800a04e:	3301      	adds	r3, #1
 800a050:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	6978      	ldr	r0, [r7, #20]
 800a056:	f7f6 f855 	bl	8000104 <__udivsi3>
 800a05a:	0003      	movs	r3, r0
 800a05c:	613b      	str	r3, [r7, #16]
 800a05e:	e015      	b.n	800a08c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800a060:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	2238      	movs	r2, #56	; 0x38
 800a066:	4013      	ands	r3, r2
 800a068:	2b20      	cmp	r3, #32
 800a06a:	d103      	bne.n	800a074 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a06c:	2380      	movs	r3, #128	; 0x80
 800a06e:	021b      	lsls	r3, r3, #8
 800a070:	613b      	str	r3, [r7, #16]
 800a072:	e00b      	b.n	800a08c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800a074:	4b08      	ldr	r3, [pc, #32]	; (800a098 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	2238      	movs	r2, #56	; 0x38
 800a07a:	4013      	ands	r3, r2
 800a07c:	2b18      	cmp	r3, #24
 800a07e:	d103      	bne.n	800a088 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a080:	23fa      	movs	r3, #250	; 0xfa
 800a082:	01db      	lsls	r3, r3, #7
 800a084:	613b      	str	r3, [r7, #16]
 800a086:	e001      	b.n	800a08c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a08c:	693b      	ldr	r3, [r7, #16]
}
 800a08e:	0018      	movs	r0, r3
 800a090:	46bd      	mov	sp, r7
 800a092:	b006      	add	sp, #24
 800a094:	bd80      	pop	{r7, pc}
 800a096:	46c0      	nop			; (mov r8, r8)
 800a098:	40021000 	.word	0x40021000
 800a09c:	00f42400 	.word	0x00f42400
 800a0a0:	007a1200 	.word	0x007a1200

0800a0a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0a8:	4b02      	ldr	r3, [pc, #8]	; (800a0b4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
}
 800a0ac:	0018      	movs	r0, r3
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	46c0      	nop			; (mov r8, r8)
 800a0b4:	20000000 	.word	0x20000000

0800a0b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0b8:	b5b0      	push	{r4, r5, r7, lr}
 800a0ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a0bc:	f7ff fff2 	bl	800a0a4 <HAL_RCC_GetHCLKFreq>
 800a0c0:	0004      	movs	r4, r0
 800a0c2:	f7ff fb39 	bl	8009738 <LL_RCC_GetAPB1Prescaler>
 800a0c6:	0003      	movs	r3, r0
 800a0c8:	0b1a      	lsrs	r2, r3, #12
 800a0ca:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a0cc:	0092      	lsls	r2, r2, #2
 800a0ce:	58d3      	ldr	r3, [r2, r3]
 800a0d0:	221f      	movs	r2, #31
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	40dc      	lsrs	r4, r3
 800a0d6:	0023      	movs	r3, r4
}
 800a0d8:	0018      	movs	r0, r3
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a0de:	46c0      	nop			; (mov r8, r8)
 800a0e0:	0800f0e0 	.word	0x0800f0e0

0800a0e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a0ec:	2313      	movs	r3, #19
 800a0ee:	18fb      	adds	r3, r7, r3
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0f4:	2312      	movs	r3, #18
 800a0f6:	18fb      	adds	r3, r7, r3
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	2380      	movs	r3, #128	; 0x80
 800a102:	029b      	lsls	r3, r3, #10
 800a104:	4013      	ands	r3, r2
 800a106:	d100      	bne.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a108:	e0a4      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a10a:	2311      	movs	r3, #17
 800a10c:	18fb      	adds	r3, r7, r3
 800a10e:	2200      	movs	r2, #0
 800a110:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a112:	4ba5      	ldr	r3, [pc, #660]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a116:	2380      	movs	r3, #128	; 0x80
 800a118:	055b      	lsls	r3, r3, #21
 800a11a:	4013      	ands	r3, r2
 800a11c:	d111      	bne.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a11e:	4ba2      	ldr	r3, [pc, #648]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a122:	4ba1      	ldr	r3, [pc, #644]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a124:	2180      	movs	r1, #128	; 0x80
 800a126:	0549      	lsls	r1, r1, #21
 800a128:	430a      	orrs	r2, r1
 800a12a:	63da      	str	r2, [r3, #60]	; 0x3c
 800a12c:	4b9e      	ldr	r3, [pc, #632]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a12e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a130:	2380      	movs	r3, #128	; 0x80
 800a132:	055b      	lsls	r3, r3, #21
 800a134:	4013      	ands	r3, r2
 800a136:	60bb      	str	r3, [r7, #8]
 800a138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a13a:	2311      	movs	r3, #17
 800a13c:	18fb      	adds	r3, r7, r3
 800a13e:	2201      	movs	r2, #1
 800a140:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a142:	4b9a      	ldr	r3, [pc, #616]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	4b99      	ldr	r3, [pc, #612]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a148:	2180      	movs	r1, #128	; 0x80
 800a14a:	0049      	lsls	r1, r1, #1
 800a14c:	430a      	orrs	r2, r1
 800a14e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a150:	f7fd fc1e 	bl	8007990 <HAL_GetTick>
 800a154:	0003      	movs	r3, r0
 800a156:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a158:	e00b      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a15a:	f7fd fc19 	bl	8007990 <HAL_GetTick>
 800a15e:	0002      	movs	r2, r0
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	2b02      	cmp	r3, #2
 800a166:	d904      	bls.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 800a168:	2313      	movs	r3, #19
 800a16a:	18fb      	adds	r3, r7, r3
 800a16c:	2203      	movs	r2, #3
 800a16e:	701a      	strb	r2, [r3, #0]
        break;
 800a170:	e005      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a172:	4b8e      	ldr	r3, [pc, #568]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	2380      	movs	r3, #128	; 0x80
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	4013      	ands	r3, r2
 800a17c:	d0ed      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800a17e:	2313      	movs	r3, #19
 800a180:	18fb      	adds	r3, r7, r3
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d154      	bne.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a188:	4b87      	ldr	r3, [pc, #540]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a18a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a18c:	23c0      	movs	r3, #192	; 0xc0
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4013      	ands	r3, r2
 800a192:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d019      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xea>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d014      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a1a4:	4b80      	ldr	r3, [pc, #512]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1a8:	4a81      	ldr	r2, [pc, #516]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a1ae:	4b7e      	ldr	r3, [pc, #504]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1b2:	4b7d      	ldr	r3, [pc, #500]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1b4:	2180      	movs	r1, #128	; 0x80
 800a1b6:	0249      	lsls	r1, r1, #9
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a1bc:	4b7a      	ldr	r3, [pc, #488]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1c0:	4b79      	ldr	r3, [pc, #484]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1c2:	497c      	ldr	r1, [pc, #496]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800a1c4:	400a      	ands	r2, r1
 800a1c6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a1c8:	4b77      	ldr	r3, [pc, #476]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	d016      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d6:	f7fd fbdb 	bl	8007990 <HAL_GetTick>
 800a1da:	0003      	movs	r3, r0
 800a1dc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1de:	e00c      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1e0:	f7fd fbd6 	bl	8007990 <HAL_GetTick>
 800a1e4:	0002      	movs	r2, r0
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	4a73      	ldr	r2, [pc, #460]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d904      	bls.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 800a1f0:	2313      	movs	r3, #19
 800a1f2:	18fb      	adds	r3, r7, r3
 800a1f4:	2203      	movs	r2, #3
 800a1f6:	701a      	strb	r2, [r3, #0]
            break;
 800a1f8:	e004      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1fa:	4b6b      	ldr	r3, [pc, #428]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1fe:	2202      	movs	r2, #2
 800a200:	4013      	ands	r3, r2
 800a202:	d0ed      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800a204:	2313      	movs	r3, #19
 800a206:	18fb      	adds	r3, r7, r3
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a20e:	4b66      	ldr	r3, [pc, #408]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a212:	4a67      	ldr	r2, [pc, #412]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a214:	4013      	ands	r3, r2
 800a216:	0019      	movs	r1, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a21c:	4b62      	ldr	r3, [pc, #392]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a21e:	430a      	orrs	r2, r1
 800a220:	65da      	str	r2, [r3, #92]	; 0x5c
 800a222:	e00c      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a224:	2312      	movs	r3, #18
 800a226:	18fb      	adds	r3, r7, r3
 800a228:	2213      	movs	r2, #19
 800a22a:	18ba      	adds	r2, r7, r2
 800a22c:	7812      	ldrb	r2, [r2, #0]
 800a22e:	701a      	strb	r2, [r3, #0]
 800a230:	e005      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a232:	2312      	movs	r3, #18
 800a234:	18fb      	adds	r3, r7, r3
 800a236:	2213      	movs	r2, #19
 800a238:	18ba      	adds	r2, r7, r2
 800a23a:	7812      	ldrb	r2, [r2, #0]
 800a23c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a23e:	2311      	movs	r3, #17
 800a240:	18fb      	adds	r3, r7, r3
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d105      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a248:	4b57      	ldr	r3, [pc, #348]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a24a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a24c:	4b56      	ldr	r3, [pc, #344]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a24e:	495b      	ldr	r1, [pc, #364]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a250:	400a      	ands	r2, r1
 800a252:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2201      	movs	r2, #1
 800a25a:	4013      	ands	r3, r2
 800a25c:	d009      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a25e:	4b52      	ldr	r3, [pc, #328]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a262:	2203      	movs	r2, #3
 800a264:	4393      	bics	r3, r2
 800a266:	0019      	movs	r1, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	4b4e      	ldr	r3, [pc, #312]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a26e:	430a      	orrs	r2, r1
 800a270:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2220      	movs	r2, #32
 800a278:	4013      	ands	r3, r2
 800a27a:	d009      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a27c:	4b4a      	ldr	r3, [pc, #296]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a27e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a280:	4a4f      	ldr	r2, [pc, #316]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800a282:	4013      	ands	r3, r2
 800a284:	0019      	movs	r1, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	689a      	ldr	r2, [r3, #8]
 800a28a:	4b47      	ldr	r3, [pc, #284]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a28c:	430a      	orrs	r2, r1
 800a28e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	2380      	movs	r3, #128	; 0x80
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4013      	ands	r3, r2
 800a29a:	d009      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a29c:	4b42      	ldr	r3, [pc, #264]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a29e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a0:	4a48      	ldr	r2, [pc, #288]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	0019      	movs	r1, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	695a      	ldr	r2, [r3, #20]
 800a2aa:	4b3f      	ldr	r3, [pc, #252]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2ac:	430a      	orrs	r2, r1
 800a2ae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	2380      	movs	r3, #128	; 0x80
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	d009      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2bc:	4b3a      	ldr	r3, [pc, #232]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c0:	4a41      	ldr	r2, [pc, #260]	; (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	0019      	movs	r1, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	699a      	ldr	r2, [r3, #24]
 800a2ca:	4b37      	ldr	r3, [pc, #220]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2240      	movs	r2, #64	; 0x40
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	d009      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a2da:	4b33      	ldr	r3, [pc, #204]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2de:	4a3b      	ldr	r2, [pc, #236]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	0019      	movs	r1, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68da      	ldr	r2, [r3, #12]
 800a2e8:	4b2f      	ldr	r3, [pc, #188]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	2380      	movs	r3, #128	; 0x80
 800a2f4:	01db      	lsls	r3, r3, #7
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	d015      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2fa:	4b2b      	ldr	r3, [pc, #172]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	0899      	lsrs	r1, r3, #2
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	69da      	ldr	r2, [r3, #28]
 800a306:	4b28      	ldr	r3, [pc, #160]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a308:	430a      	orrs	r2, r1
 800a30a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	69da      	ldr	r2, [r3, #28]
 800a310:	2380      	movs	r3, #128	; 0x80
 800a312:	05db      	lsls	r3, r3, #23
 800a314:	429a      	cmp	r2, r3
 800a316:	d106      	bne.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a318:	4b23      	ldr	r3, [pc, #140]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a31a:	68da      	ldr	r2, [r3, #12]
 800a31c:	4b22      	ldr	r3, [pc, #136]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a31e:	2180      	movs	r1, #128	; 0x80
 800a320:	0249      	lsls	r1, r1, #9
 800a322:	430a      	orrs	r2, r1
 800a324:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	2380      	movs	r3, #128	; 0x80
 800a32c:	039b      	lsls	r3, r3, #14
 800a32e:	4013      	ands	r3, r2
 800a330:	d016      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a332:	4b1d      	ldr	r3, [pc, #116]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a336:	4a26      	ldr	r2, [pc, #152]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a338:	4013      	ands	r3, r2
 800a33a:	0019      	movs	r1, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a1a      	ldr	r2, [r3, #32]
 800a340:	4b19      	ldr	r3, [pc, #100]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a342:	430a      	orrs	r2, r1
 800a344:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a1a      	ldr	r2, [r3, #32]
 800a34a:	2380      	movs	r3, #128	; 0x80
 800a34c:	03db      	lsls	r3, r3, #15
 800a34e:	429a      	cmp	r2, r3
 800a350:	d106      	bne.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a352:	4b15      	ldr	r3, [pc, #84]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a354:	68da      	ldr	r2, [r3, #12]
 800a356:	4b14      	ldr	r3, [pc, #80]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a358:	2180      	movs	r1, #128	; 0x80
 800a35a:	0449      	lsls	r1, r1, #17
 800a35c:	430a      	orrs	r2, r1
 800a35e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	2380      	movs	r3, #128	; 0x80
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	4013      	ands	r3, r2
 800a36a:	d016      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a36c:	4b0e      	ldr	r3, [pc, #56]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a370:	4a18      	ldr	r2, [pc, #96]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a372:	4013      	ands	r3, r2
 800a374:	0019      	movs	r1, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	691a      	ldr	r2, [r3, #16]
 800a37a:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a37c:	430a      	orrs	r2, r1
 800a37e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	691a      	ldr	r2, [r3, #16]
 800a384:	2380      	movs	r3, #128	; 0x80
 800a386:	01db      	lsls	r3, r3, #7
 800a388:	429a      	cmp	r2, r3
 800a38a:	d106      	bne.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a38c:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a38e:	68da      	ldr	r2, [r3, #12]
 800a390:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a392:	2180      	movs	r1, #128	; 0x80
 800a394:	0249      	lsls	r1, r1, #9
 800a396:	430a      	orrs	r2, r1
 800a398:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 800a39a:	2312      	movs	r3, #18
 800a39c:	18fb      	adds	r3, r7, r3
 800a39e:	781b      	ldrb	r3, [r3, #0]
}
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	b006      	add	sp, #24
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	40021000 	.word	0x40021000
 800a3ac:	40007000 	.word	0x40007000
 800a3b0:	fffffcff 	.word	0xfffffcff
 800a3b4:	fffeffff 	.word	0xfffeffff
 800a3b8:	00001388 	.word	0x00001388
 800a3bc:	efffffff 	.word	0xefffffff
 800a3c0:	fffff3ff 	.word	0xfffff3ff
 800a3c4:	fff3ffff 	.word	0xfff3ffff
 800a3c8:	ffcfffff 	.word	0xffcfffff
 800a3cc:	ffffcfff 	.word	0xffffcfff
 800a3d0:	ffbfffff 	.word	0xffbfffff
 800a3d4:	ffff3fff 	.word	0xffff3fff

0800a3d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a3d8:	b5b0      	push	{r4, r5, r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a3e0:	230f      	movs	r3, #15
 800a3e2:	18fb      	adds	r3, r7, r3
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d100      	bne.n	800a3f0 <HAL_RTC_Init+0x18>
 800a3ee:	e07f      	b.n	800a4f0 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2229      	movs	r2, #41	; 0x29
 800a3f4:	5c9b      	ldrb	r3, [r3, r2]
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10b      	bne.n	800a414 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2228      	movs	r2, #40	; 0x28
 800a400:	2100      	movs	r1, #0
 800a402:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2288      	movs	r2, #136	; 0x88
 800a408:	0212      	lsls	r2, r2, #8
 800a40a:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	0018      	movs	r0, r3
 800a410:	f7f9 fb6c 	bl	8003aec <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2229      	movs	r2, #41	; 0x29
 800a418:	2102      	movs	r1, #2
 800a41a:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	22ca      	movs	r2, #202	; 0xca
 800a422:	625a      	str	r2, [r3, #36]	; 0x24
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2253      	movs	r2, #83	; 0x53
 800a42a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a42c:	250f      	movs	r5, #15
 800a42e:	197c      	adds	r4, r7, r5
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	0018      	movs	r0, r3
 800a434:	f000 f9c7 	bl	800a7c6 <RTC_EnterInitMode>
 800a438:	0003      	movs	r3, r0
 800a43a:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800a43c:	197b      	adds	r3, r7, r5
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d148      	bne.n	800a4d6 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	699a      	ldr	r2, [r3, #24]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	492c      	ldr	r1, [pc, #176]	; (800a500 <HAL_RTC_Init+0x128>)
 800a450:	400a      	ands	r2, r1
 800a452:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6999      	ldr	r1, [r3, #24]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	431a      	orrs	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	69db      	ldr	r3, [r3, #28]
 800a468:	431a      	orrs	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	430a      	orrs	r2, r1
 800a470:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	6912      	ldr	r2, [r2, #16]
 800a47a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6919      	ldr	r1, [r3, #16]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	041a      	lsls	r2, r3, #16
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	430a      	orrs	r2, r1
 800a48e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a490:	250f      	movs	r5, #15
 800a492:	197c      	adds	r4, r7, r5
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	0018      	movs	r0, r3
 800a498:	f000 f9d8 	bl	800a84c <RTC_ExitInitMode>
 800a49c:	0003      	movs	r3, r0
 800a49e:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800a4a0:	197b      	adds	r3, r7, r5
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d116      	bne.n	800a4d6 <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	699a      	ldr	r2, [r3, #24]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	00d2      	lsls	r2, r2, #3
 800a4b4:	08d2      	lsrs	r2, r2, #3
 800a4b6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6999      	ldr	r1, [r3, #24]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	22ff      	movs	r2, #255	; 0xff
 800a4dc:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800a4de:	230f      	movs	r3, #15
 800a4e0:	18fb      	adds	r3, r7, r3
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d103      	bne.n	800a4f0 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2229      	movs	r2, #41	; 0x29
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800a4f0:	230f      	movs	r3, #15
 800a4f2:	18fb      	adds	r3, r7, r3
 800a4f4:	781b      	ldrb	r3, [r3, #0]
}
 800a4f6:	0018      	movs	r0, r3
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	b004      	add	sp, #16
 800a4fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a4fe:	46c0      	nop			; (mov r8, r8)
 800a500:	fb8fffbf 	.word	0xfb8fffbf

0800a504 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a504:	b5b0      	push	{r4, r5, r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2228      	movs	r2, #40	; 0x28
 800a514:	5c9b      	ldrb	r3, [r3, r2]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d101      	bne.n	800a51e <HAL_RTC_SetTime+0x1a>
 800a51a:	2302      	movs	r3, #2
 800a51c:	e092      	b.n	800a644 <HAL_RTC_SetTime+0x140>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2228      	movs	r2, #40	; 0x28
 800a522:	2101      	movs	r1, #1
 800a524:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2229      	movs	r2, #41	; 0x29
 800a52a:	2102      	movs	r1, #2
 800a52c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	22ca      	movs	r2, #202	; 0xca
 800a534:	625a      	str	r2, [r3, #36]	; 0x24
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2253      	movs	r2, #83	; 0x53
 800a53c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a53e:	2513      	movs	r5, #19
 800a540:	197c      	adds	r4, r7, r5
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	0018      	movs	r0, r3
 800a546:	f000 f93e 	bl	800a7c6 <RTC_EnterInitMode>
 800a54a:	0003      	movs	r3, r0
 800a54c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800a54e:	197b      	adds	r3, r7, r5
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d162      	bne.n	800a61c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d125      	bne.n	800a5a8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	2240      	movs	r2, #64	; 0x40
 800a564:	4013      	ands	r3, r2
 800a566:	d102      	bne.n	800a56e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	2200      	movs	r2, #0
 800a56c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	0018      	movs	r0, r3
 800a574:	f000 f9b0 	bl	800a8d8 <RTC_ByteToBcd2>
 800a578:	0003      	movs	r3, r0
 800a57a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	785b      	ldrb	r3, [r3, #1]
 800a580:	0018      	movs	r0, r3
 800a582:	f000 f9a9 	bl	800a8d8 <RTC_ByteToBcd2>
 800a586:	0003      	movs	r3, r0
 800a588:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a58a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	789b      	ldrb	r3, [r3, #2]
 800a590:	0018      	movs	r0, r3
 800a592:	f000 f9a1 	bl	800a8d8 <RTC_ByteToBcd2>
 800a596:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a598:	0022      	movs	r2, r4
 800a59a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	78db      	ldrb	r3, [r3, #3]
 800a5a0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	617b      	str	r3, [r7, #20]
 800a5a6:	e017      	b.n	800a5d8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	2240      	movs	r2, #64	; 0x40
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	d102      	bne.n	800a5ba <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	785b      	ldrb	r3, [r3, #1]
 800a5c4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a5c6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a5cc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	78db      	ldrb	r3, [r3, #3]
 800a5d2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	491b      	ldr	r1, [pc, #108]	; (800a64c <HAL_RTC_SetTime+0x148>)
 800a5e0:	400a      	ands	r2, r1
 800a5e2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	699a      	ldr	r2, [r3, #24]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4918      	ldr	r1, [pc, #96]	; (800a650 <HAL_RTC_SetTime+0x14c>)
 800a5f0:	400a      	ands	r2, r1
 800a5f2:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6999      	ldr	r1, [r3, #24]
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	68da      	ldr	r2, [r3, #12]
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	431a      	orrs	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	430a      	orrs	r2, r1
 800a60a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a60c:	2313      	movs	r3, #19
 800a60e:	18fc      	adds	r4, r7, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	0018      	movs	r0, r3
 800a614:	f000 f91a 	bl	800a84c <RTC_ExitInitMode>
 800a618:	0003      	movs	r3, r0
 800a61a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	22ff      	movs	r2, #255	; 0xff
 800a622:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800a624:	2313      	movs	r3, #19
 800a626:	18fb      	adds	r3, r7, r3
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d103      	bne.n	800a636 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2229      	movs	r2, #41	; 0x29
 800a632:	2101      	movs	r1, #1
 800a634:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2228      	movs	r2, #40	; 0x28
 800a63a:	2100      	movs	r1, #0
 800a63c:	5499      	strb	r1, [r3, r2]

  return status;
 800a63e:	2313      	movs	r3, #19
 800a640:	18fb      	adds	r3, r7, r3
 800a642:	781b      	ldrb	r3, [r3, #0]
}
 800a644:	0018      	movs	r0, r3
 800a646:	46bd      	mov	sp, r7
 800a648:	b006      	add	sp, #24
 800a64a:	bdb0      	pop	{r4, r5, r7, pc}
 800a64c:	007f7f7f 	.word	0x007f7f7f
 800a650:	fffbffff 	.word	0xfffbffff

0800a654 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a654:	b5b0      	push	{r4, r5, r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2228      	movs	r2, #40	; 0x28
 800a664:	5c9b      	ldrb	r3, [r3, r2]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d101      	bne.n	800a66e <HAL_RTC_SetDate+0x1a>
 800a66a:	2302      	movs	r3, #2
 800a66c:	e07e      	b.n	800a76c <HAL_RTC_SetDate+0x118>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2228      	movs	r2, #40	; 0x28
 800a672:	2101      	movs	r1, #1
 800a674:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2229      	movs	r2, #41	; 0x29
 800a67a:	2102      	movs	r1, #2
 800a67c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10e      	bne.n	800a6a2 <HAL_RTC_SetDate+0x4e>
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	785b      	ldrb	r3, [r3, #1]
 800a688:	001a      	movs	r2, r3
 800a68a:	2310      	movs	r3, #16
 800a68c:	4013      	ands	r3, r2
 800a68e:	d008      	beq.n	800a6a2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	785b      	ldrb	r3, [r3, #1]
 800a694:	2210      	movs	r2, #16
 800a696:	4393      	bics	r3, r2
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	330a      	adds	r3, #10
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d11c      	bne.n	800a6e2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	78db      	ldrb	r3, [r3, #3]
 800a6ac:	0018      	movs	r0, r3
 800a6ae:	f000 f913 	bl	800a8d8 <RTC_ByteToBcd2>
 800a6b2:	0003      	movs	r3, r0
 800a6b4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	785b      	ldrb	r3, [r3, #1]
 800a6ba:	0018      	movs	r0, r3
 800a6bc:	f000 f90c 	bl	800a8d8 <RTC_ByteToBcd2>
 800a6c0:	0003      	movs	r3, r0
 800a6c2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a6c4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	789b      	ldrb	r3, [r3, #2]
 800a6ca:	0018      	movs	r0, r3
 800a6cc:	f000 f904 	bl	800a8d8 <RTC_ByteToBcd2>
 800a6d0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a6d2:	0022      	movs	r2, r4
 800a6d4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	e00e      	b.n	800a700 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	78db      	ldrb	r3, [r3, #3]
 800a6e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	785b      	ldrb	r3, [r3, #1]
 800a6ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a6ee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a6f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	22ca      	movs	r2, #202	; 0xca
 800a706:	625a      	str	r2, [r3, #36]	; 0x24
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2253      	movs	r2, #83	; 0x53
 800a70e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a710:	2513      	movs	r5, #19
 800a712:	197c      	adds	r4, r7, r5
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	0018      	movs	r0, r3
 800a718:	f000 f855 	bl	800a7c6 <RTC_EnterInitMode>
 800a71c:	0003      	movs	r3, r0
 800a71e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800a720:	197b      	adds	r3, r7, r5
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10d      	bne.n	800a744 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	4911      	ldr	r1, [pc, #68]	; (800a774 <HAL_RTC_SetDate+0x120>)
 800a730:	400a      	ands	r2, r1
 800a732:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a734:	2313      	movs	r3, #19
 800a736:	18fc      	adds	r4, r7, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	0018      	movs	r0, r3
 800a73c:	f000 f886 	bl	800a84c <RTC_ExitInitMode>
 800a740:	0003      	movs	r3, r0
 800a742:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	22ff      	movs	r2, #255	; 0xff
 800a74a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a74c:	2313      	movs	r3, #19
 800a74e:	18fb      	adds	r3, r7, r3
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d103      	bne.n	800a75e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2229      	movs	r2, #41	; 0x29
 800a75a:	2101      	movs	r1, #1
 800a75c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2228      	movs	r2, #40	; 0x28
 800a762:	2100      	movs	r1, #0
 800a764:	5499      	strb	r1, [r3, r2]

  return status;
 800a766:	2313      	movs	r3, #19
 800a768:	18fb      	adds	r3, r7, r3
 800a76a:	781b      	ldrb	r3, [r3, #0]
}
 800a76c:	0018      	movs	r0, r3
 800a76e:	46bd      	mov	sp, r7
 800a770:	b006      	add	sp, #24
 800a772:	bdb0      	pop	{r4, r5, r7, pc}
 800a774:	00ffff3f 	.word	0x00ffff3f

0800a778 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68da      	ldr	r2, [r3, #12]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	21a0      	movs	r1, #160	; 0xa0
 800a78c:	438a      	bics	r2, r1
 800a78e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a790:	f7fd f8fe 	bl	8007990 <HAL_GetTick>
 800a794:	0003      	movs	r3, r0
 800a796:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800a798:	e00a      	b.n	800a7b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a79a:	f7fd f8f9 	bl	8007990 <HAL_GetTick>
 800a79e:	0002      	movs	r2, r0
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	1ad2      	subs	r2, r2, r3
 800a7a4:	23fa      	movs	r3, #250	; 0xfa
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d901      	bls.n	800a7b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e006      	b.n	800a7be <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	d0ee      	beq.n	800a79a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	0018      	movs	r0, r3
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	b004      	add	sp, #16
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800a7ce:	230f      	movs	r3, #15
 800a7d0:	18fb      	adds	r3, r7, r3
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	2240      	movs	r2, #64	; 0x40
 800a7de:	4013      	ands	r3, r2
 800a7e0:	d12d      	bne.n	800a83e <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68da      	ldr	r2, [r3, #12]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2180      	movs	r1, #128	; 0x80
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a7f2:	f7fd f8cd 	bl	8007990 <HAL_GetTick>
 800a7f6:	0003      	movs	r3, r0
 800a7f8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a7fa:	e015      	b.n	800a828 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800a7fc:	f7fd f8c8 	bl	8007990 <HAL_GetTick>
 800a800:	0002      	movs	r2, r0
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	1ad2      	subs	r2, r2, r3
 800a806:	210f      	movs	r1, #15
 800a808:	187b      	adds	r3, r7, r1
 800a80a:	1879      	adds	r1, r7, r1
 800a80c:	7809      	ldrb	r1, [r1, #0]
 800a80e:	7019      	strb	r1, [r3, #0]
 800a810:	23fa      	movs	r3, #250	; 0xfa
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	429a      	cmp	r2, r3
 800a816:	d907      	bls.n	800a828 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 800a818:	230f      	movs	r3, #15
 800a81a:	18fb      	adds	r3, r7, r3
 800a81c:	2203      	movs	r2, #3
 800a81e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2229      	movs	r2, #41	; 0x29
 800a824:	2103      	movs	r1, #3
 800a826:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	2240      	movs	r2, #64	; 0x40
 800a830:	4013      	ands	r3, r2
 800a832:	d104      	bne.n	800a83e <RTC_EnterInitMode+0x78>
 800a834:	230f      	movs	r3, #15
 800a836:	18fb      	adds	r3, r7, r3
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d1de      	bne.n	800a7fc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a83e:	230f      	movs	r3, #15
 800a840:	18fb      	adds	r3, r7, r3
 800a842:	781b      	ldrb	r3, [r3, #0]
}
 800a844:	0018      	movs	r0, r3
 800a846:	46bd      	mov	sp, r7
 800a848:	b004      	add	sp, #16
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a854:	230f      	movs	r3, #15
 800a856:	18fb      	adds	r3, r7, r3
 800a858:	2200      	movs	r2, #0
 800a85a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a85c:	4b1d      	ldr	r3, [pc, #116]	; (800a8d4 <RTC_ExitInitMode+0x88>)
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	4b1c      	ldr	r3, [pc, #112]	; (800a8d4 <RTC_ExitInitMode+0x88>)
 800a862:	2180      	movs	r1, #128	; 0x80
 800a864:	438a      	bics	r2, r1
 800a866:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a868:	4b1a      	ldr	r3, [pc, #104]	; (800a8d4 <RTC_ExitInitMode+0x88>)
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	2220      	movs	r2, #32
 800a86e:	4013      	ands	r3, r2
 800a870:	d10e      	bne.n	800a890 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	0018      	movs	r0, r3
 800a876:	f7ff ff7f 	bl	800a778 <HAL_RTC_WaitForSynchro>
 800a87a:	1e03      	subs	r3, r0, #0
 800a87c:	d022      	beq.n	800a8c4 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2229      	movs	r2, #41	; 0x29
 800a882:	2103      	movs	r1, #3
 800a884:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800a886:	230f      	movs	r3, #15
 800a888:	18fb      	adds	r3, r7, r3
 800a88a:	2203      	movs	r2, #3
 800a88c:	701a      	strb	r2, [r3, #0]
 800a88e:	e019      	b.n	800a8c4 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a890:	4b10      	ldr	r3, [pc, #64]	; (800a8d4 <RTC_ExitInitMode+0x88>)
 800a892:	699a      	ldr	r2, [r3, #24]
 800a894:	4b0f      	ldr	r3, [pc, #60]	; (800a8d4 <RTC_ExitInitMode+0x88>)
 800a896:	2120      	movs	r1, #32
 800a898:	438a      	bics	r2, r1
 800a89a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	0018      	movs	r0, r3
 800a8a0:	f7ff ff6a 	bl	800a778 <HAL_RTC_WaitForSynchro>
 800a8a4:	1e03      	subs	r3, r0, #0
 800a8a6:	d007      	beq.n	800a8b8 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2229      	movs	r2, #41	; 0x29
 800a8ac:	2103      	movs	r1, #3
 800a8ae:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800a8b0:	230f      	movs	r3, #15
 800a8b2:	18fb      	adds	r3, r7, r3
 800a8b4:	2203      	movs	r2, #3
 800a8b6:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a8b8:	4b06      	ldr	r3, [pc, #24]	; (800a8d4 <RTC_ExitInitMode+0x88>)
 800a8ba:	699a      	ldr	r2, [r3, #24]
 800a8bc:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <RTC_ExitInitMode+0x88>)
 800a8be:	2120      	movs	r1, #32
 800a8c0:	430a      	orrs	r2, r1
 800a8c2:	619a      	str	r2, [r3, #24]
  }

  return status;
 800a8c4:	230f      	movs	r3, #15
 800a8c6:	18fb      	adds	r3, r7, r3
 800a8c8:	781b      	ldrb	r3, [r3, #0]
}
 800a8ca:	0018      	movs	r0, r3
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	b004      	add	sp, #16
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	46c0      	nop			; (mov r8, r8)
 800a8d4:	40002800 	.word	0x40002800

0800a8d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	0002      	movs	r2, r0
 800a8e0:	1dfb      	adds	r3, r7, #7
 800a8e2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800a8e8:	230b      	movs	r3, #11
 800a8ea:	18fb      	adds	r3, r7, r3
 800a8ec:	1dfa      	adds	r2, r7, #7
 800a8ee:	7812      	ldrb	r2, [r2, #0]
 800a8f0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800a8f2:	e008      	b.n	800a906 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800a8fa:	220b      	movs	r2, #11
 800a8fc:	18bb      	adds	r3, r7, r2
 800a8fe:	18ba      	adds	r2, r7, r2
 800a900:	7812      	ldrb	r2, [r2, #0]
 800a902:	3a0a      	subs	r2, #10
 800a904:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800a906:	230b      	movs	r3, #11
 800a908:	18fb      	adds	r3, r7, r3
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	d8f1      	bhi.n	800a8f4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	b2db      	uxtb	r3, r3
 800a914:	011b      	lsls	r3, r3, #4
 800a916:	b2da      	uxtb	r2, r3
 800a918:	230b      	movs	r3, #11
 800a91a:	18fb      	adds	r3, r7, r3
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	4313      	orrs	r3, r2
 800a920:	b2db      	uxtb	r3, r3
}
 800a922:	0018      	movs	r0, r3
 800a924:	46bd      	mov	sp, r7
 800a926:	b004      	add	sp, #16
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e08a      	b.n	800aa54 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	225d      	movs	r2, #93	; 0x5d
 800a948:	5c9b      	ldrb	r3, [r3, r2]
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d107      	bne.n	800a960 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	225c      	movs	r2, #92	; 0x5c
 800a954:	2100      	movs	r1, #0
 800a956:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	0018      	movs	r0, r3
 800a95c:	f7f9 f8ec 	bl	8003b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	225d      	movs	r2, #93	; 0x5d
 800a964:	2102      	movs	r1, #2
 800a966:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2140      	movs	r1, #64	; 0x40
 800a974:	438a      	bics	r2, r1
 800a976:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68da      	ldr	r2, [r3, #12]
 800a97c:	23e0      	movs	r3, #224	; 0xe0
 800a97e:	00db      	lsls	r3, r3, #3
 800a980:	429a      	cmp	r2, r3
 800a982:	d902      	bls.n	800a98a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a984:	2300      	movs	r3, #0
 800a986:	60fb      	str	r3, [r7, #12]
 800a988:	e002      	b.n	800a990 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a98a:	2380      	movs	r3, #128	; 0x80
 800a98c:	015b      	lsls	r3, r3, #5
 800a98e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	68da      	ldr	r2, [r3, #12]
 800a994:	23f0      	movs	r3, #240	; 0xf0
 800a996:	011b      	lsls	r3, r3, #4
 800a998:	429a      	cmp	r2, r3
 800a99a:	d008      	beq.n	800a9ae <HAL_SPI_Init+0x82>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68da      	ldr	r2, [r3, #12]
 800a9a0:	23e0      	movs	r3, #224	; 0xe0
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d002      	beq.n	800a9ae <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10c      	bne.n	800a9d0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	23e0      	movs	r3, #224	; 0xe0
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d903      	bls.n	800a9ca <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	631a      	str	r2, [r3, #48]	; 0x30
 800a9c8:	e002      	b.n	800a9d0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	431a      	orrs	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	431a      	orrs	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6999      	ldr	r1, [r3, #24]
 800a9ea:	2380      	movs	r3, #128	; 0x80
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	400b      	ands	r3, r1
 800a9f0:	431a      	orrs	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	431a      	orrs	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	431a      	orrs	r2, r3
 800a9fe:	0011      	movs	r1, r2
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	0c1b      	lsrs	r3, r3, #16
 800aa12:	2204      	movs	r2, #4
 800aa14:	401a      	ands	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1a:	431a      	orrs	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa20:	431a      	orrs	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	431a      	orrs	r2, r3
 800aa28:	0011      	movs	r1, r2
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	430a      	orrs	r2, r1
 800aa32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	69da      	ldr	r2, [r3, #28]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4907      	ldr	r1, [pc, #28]	; (800aa5c <HAL_SPI_Init+0x130>)
 800aa40:	400a      	ands	r2, r1
 800aa42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	225d      	movs	r2, #93	; 0x5d
 800aa4e:	2101      	movs	r1, #1
 800aa50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	0018      	movs	r0, r3
 800aa56:	46bd      	mov	sp, r7
 800aa58:	b004      	add	sp, #16
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	fffff7ff 	.word	0xfffff7ff

0800aa60 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	1dbb      	adds	r3, r7, #6
 800aa6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa6e:	2317      	movs	r3, #23
 800aa70:	18fb      	adds	r3, r7, r3
 800aa72:	2200      	movs	r2, #0
 800aa74:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	225c      	movs	r2, #92	; 0x5c
 800aa7a:	5c9b      	ldrb	r3, [r3, r2]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d101      	bne.n	800aa84 <HAL_SPI_Transmit_DMA+0x24>
 800aa80:	2302      	movs	r3, #2
 800aa82:	e0df      	b.n	800ac44 <HAL_SPI_Transmit_DMA+0x1e4>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	225c      	movs	r2, #92	; 0x5c
 800aa88:	2101      	movs	r1, #1
 800aa8a:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	225d      	movs	r2, #93	; 0x5d
 800aa90:	5c9b      	ldrb	r3, [r3, r2]
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d004      	beq.n	800aaa2 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 800aa98:	2317      	movs	r3, #23
 800aa9a:	18fb      	adds	r3, r7, r3
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	701a      	strb	r2, [r3, #0]
    goto error;
 800aaa0:	e0c9      	b.n	800ac36 <HAL_SPI_Transmit_DMA+0x1d6>
  }

  if ((pData == NULL) || (Size == 0U))
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d003      	beq.n	800aab0 <HAL_SPI_Transmit_DMA+0x50>
 800aaa8:	1dbb      	adds	r3, r7, #6
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d104      	bne.n	800aaba <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 800aab0:	2317      	movs	r3, #23
 800aab2:	18fb      	adds	r3, r7, r3
 800aab4:	2201      	movs	r2, #1
 800aab6:	701a      	strb	r2, [r3, #0]
    goto error;
 800aab8:	e0bd      	b.n	800ac36 <HAL_SPI_Transmit_DMA+0x1d6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	225d      	movs	r2, #93	; 0x5d
 800aabe:	2103      	movs	r1, #3
 800aac0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	1dba      	adds	r2, r7, #6
 800aad2:	8812      	ldrh	r2, [r2, #0]
 800aad4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	1dba      	adds	r2, r7, #6
 800aada:	8812      	ldrh	r2, [r2, #0]
 800aadc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2244      	movs	r2, #68	; 0x44
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2246      	movs	r2, #70	; 0x46
 800aafc:	2100      	movs	r1, #0
 800aafe:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	2380      	movs	r3, #128	; 0x80
 800ab06:	021b      	lsls	r3, r3, #8
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d108      	bne.n	800ab1e <HAL_SPI_Transmit_DMA+0xbe>
  {
    SPI_1LINE_TX(hspi);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2180      	movs	r1, #128	; 0x80
 800ab18:	01c9      	lsls	r1, r1, #7
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab22:	4a4a      	ldr	r2, [pc, #296]	; (800ac4c <HAL_SPI_Transmit_DMA+0x1ec>)
 800ab24:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab2a:	4a49      	ldr	r2, [pc, #292]	; (800ac50 <HAL_SPI_Transmit_DMA+0x1f0>)
 800ab2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab32:	4a48      	ldr	r2, [pc, #288]	; (800ac54 <HAL_SPI_Transmit_DMA+0x1f4>)
 800ab34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	685a      	ldr	r2, [r3, #4]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4943      	ldr	r1, [pc, #268]	; (800ac58 <HAL_SPI_Transmit_DMA+0x1f8>)
 800ab4a:	400a      	ands	r2, r1
 800ab4c:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	68da      	ldr	r2, [r3, #12]
 800ab52:	23e0      	movs	r3, #224	; 0xe0
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d82f      	bhi.n	800abba <HAL_SPI_Transmit_DMA+0x15a>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5e:	699a      	ldr	r2, [r3, #24]
 800ab60:	2380      	movs	r3, #128	; 0x80
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d128      	bne.n	800abba <HAL_SPI_Transmit_DMA+0x15a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	001a      	movs	r2, r3
 800ab70:	2301      	movs	r3, #1
 800ab72:	4013      	ands	r3, r2
 800ab74:	d10f      	bne.n	800ab96 <HAL_SPI_Transmit_DMA+0x136>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4935      	ldr	r1, [pc, #212]	; (800ac58 <HAL_SPI_Transmit_DMA+0x1f8>)
 800ab82:	400a      	ands	r2, r1
 800ab84:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	085b      	lsrs	r3, r3, #1
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab94:	e011      	b.n	800abba <HAL_SPI_Transmit_DMA+0x15a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2180      	movs	r1, #128	; 0x80
 800aba2:	01c9      	lsls	r1, r1, #7
 800aba4:	430a      	orrs	r2, r1
 800aba6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abac:	b29b      	uxth	r3, r3
 800abae:	085b      	lsrs	r3, r3, #1
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	3301      	adds	r3, #1
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	0019      	movs	r1, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	330c      	adds	r3, #12
 800abca:	001a      	movs	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	f7fd fd03 	bl	80085dc <HAL_DMA_Start_IT>
 800abd6:	1e03      	subs	r3, r0, #0
 800abd8:	d00e      	beq.n	800abf8 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abde:	2210      	movs	r2, #16
 800abe0:	431a      	orrs	r2, r3
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800abe6:	2317      	movs	r3, #23
 800abe8:	18fb      	adds	r3, r7, r3
 800abea:	2201      	movs	r2, #1
 800abec:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	225d      	movs	r2, #93	; 0x5d
 800abf2:	2101      	movs	r1, #1
 800abf4:	5499      	strb	r1, [r3, r2]
    goto error;
 800abf6:	e01e      	b.n	800ac36 <HAL_SPI_Transmit_DMA+0x1d6>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2240      	movs	r2, #64	; 0x40
 800ac00:	4013      	ands	r3, r2
 800ac02:	2b40      	cmp	r3, #64	; 0x40
 800ac04:	d007      	beq.n	800ac16 <HAL_SPI_Transmit_DMA+0x1b6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2140      	movs	r1, #64	; 0x40
 800ac12:	430a      	orrs	r2, r1
 800ac14:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2120      	movs	r1, #32
 800ac22:	430a      	orrs	r2, r1
 800ac24:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2102      	movs	r1, #2
 800ac32:	430a      	orrs	r2, r1
 800ac34:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	225c      	movs	r2, #92	; 0x5c
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ac3e:	2317      	movs	r3, #23
 800ac40:	18fb      	adds	r3, r7, r3
 800ac42:	781b      	ldrb	r3, [r3, #0]
}
 800ac44:	0018      	movs	r0, r3
 800ac46:	46bd      	mov	sp, r7
 800ac48:	b006      	add	sp, #24
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	0800ad39 	.word	0x0800ad39
 800ac50:	0800ac8d 	.word	0x0800ac8d
 800ac54:	0800ad57 	.word	0x0800ad57
 800ac58:	ffffbfff 	.word	0xffffbfff

0800ac5c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ac64:	46c0      	nop			; (mov r8, r8)
 800ac66:	46bd      	mov	sp, r7
 800ac68:	b002      	add	sp, #8
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ac74:	46c0      	nop			; (mov r8, r8)
 800ac76:	46bd      	mov	sp, r7
 800ac78:	b002      	add	sp, #8
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ac84:	46c0      	nop			; (mov r8, r8)
 800ac86:	46bd      	mov	sp, r7
 800ac88:	b002      	add	sp, #8
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac9a:	f7fc fe79 	bl	8007990 <HAL_GetTick>
 800ac9e:	0003      	movs	r3, r0
 800aca0:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2220      	movs	r2, #32
 800acaa:	4013      	ands	r3, r2
 800acac:	2b20      	cmp	r3, #32
 800acae:	d03c      	beq.n	800ad2a <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2120      	movs	r1, #32
 800acbc:	438a      	bics	r2, r1
 800acbe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2102      	movs	r1, #2
 800accc:	438a      	bics	r2, r1
 800acce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2164      	movs	r1, #100	; 0x64
 800acd6:	0018      	movs	r0, r3
 800acd8:	f000 f942 	bl	800af60 <SPI_EndRxTxTransaction>
 800acdc:	1e03      	subs	r3, r0, #0
 800acde:	d005      	beq.n	800acec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ace4:	2220      	movs	r2, #32
 800ace6:	431a      	orrs	r2, r3
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10a      	bne.n	800ad0a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acf4:	2300      	movs	r3, #0
 800acf6:	60fb      	str	r3, [r7, #12]
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	225d      	movs	r2, #93	; 0x5d
 800ad14:	2101      	movs	r1, #1
 800ad16:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d004      	beq.n	800ad2a <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	0018      	movs	r0, r3
 800ad24:	f7ff ffaa 	bl	800ac7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ad28:	e003      	b.n	800ad32 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	f7ff ff95 	bl	800ac5c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad32:	46bd      	mov	sp, r7
 800ad34:	b006      	add	sp, #24
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad44:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	0018      	movs	r0, r3
 800ad4a:	f7ff ff8f 	bl	800ac6c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad4e:	46c0      	nop			; (mov r8, r8)
 800ad50:	46bd      	mov	sp, r7
 800ad52:	b004      	add	sp, #16
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	685a      	ldr	r2, [r3, #4]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2103      	movs	r1, #3
 800ad70:	438a      	bics	r2, r1
 800ad72:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad78:	2210      	movs	r2, #16
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	225d      	movs	r2, #93	; 0x5d
 800ad84:	2101      	movs	r1, #1
 800ad86:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	0018      	movs	r0, r3
 800ad8c:	f7ff ff76 	bl	800ac7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad90:	46c0      	nop			; (mov r8, r8)
 800ad92:	46bd      	mov	sp, r7
 800ad94:	b004      	add	sp, #16
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	1dfb      	adds	r3, r7, #7
 800ada6:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ada8:	e050      	b.n	800ae4c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	3301      	adds	r3, #1
 800adae:	d04d      	beq.n	800ae4c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800adb0:	f7fc fdee 	bl	8007990 <HAL_GetTick>
 800adb4:	0002      	movs	r2, r0
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d902      	bls.n	800adc6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d142      	bne.n	800ae4c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	685a      	ldr	r2, [r3, #4]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	21e0      	movs	r1, #224	; 0xe0
 800add2:	438a      	bics	r2, r1
 800add4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	2382      	movs	r3, #130	; 0x82
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	429a      	cmp	r2, r3
 800ade0:	d113      	bne.n	800ae0a <SPI_WaitFlagStateUntilTimeout+0x72>
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	689a      	ldr	r2, [r3, #8]
 800ade6:	2380      	movs	r3, #128	; 0x80
 800ade8:	021b      	lsls	r3, r3, #8
 800adea:	429a      	cmp	r2, r3
 800adec:	d005      	beq.n	800adfa <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	689a      	ldr	r2, [r3, #8]
 800adf2:	2380      	movs	r3, #128	; 0x80
 800adf4:	00db      	lsls	r3, r3, #3
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d107      	bne.n	800ae0a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2140      	movs	r1, #64	; 0x40
 800ae06:	438a      	bics	r2, r1
 800ae08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae0e:	2380      	movs	r3, #128	; 0x80
 800ae10:	019b      	lsls	r3, r3, #6
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d110      	bne.n	800ae38 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4914      	ldr	r1, [pc, #80]	; (800ae74 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800ae22:	400a      	ands	r2, r1
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2180      	movs	r1, #128	; 0x80
 800ae32:	0189      	lsls	r1, r1, #6
 800ae34:	430a      	orrs	r2, r1
 800ae36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	225d      	movs	r2, #93	; 0x5d
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	225c      	movs	r2, #92	; 0x5c
 800ae44:	2100      	movs	r1, #0
 800ae46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	e00f      	b.n	800ae6c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	4013      	ands	r3, r2
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	425a      	negs	r2, r3
 800ae5c:	4153      	adcs	r3, r2
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	001a      	movs	r2, r3
 800ae62:	1dfb      	adds	r3, r7, #7
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d19f      	bne.n	800adaa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	b004      	add	sp, #16
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	ffffdfff 	.word	0xffffdfff

0800ae78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
 800ae84:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800ae86:	e05c      	b.n	800af42 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	23c0      	movs	r3, #192	; 0xc0
 800ae8c:	00db      	lsls	r3, r3, #3
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d106      	bne.n	800aea0 <SPI_WaitFifoStateUntilTimeout+0x28>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d103      	bne.n	800aea0 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	330c      	adds	r3, #12
 800ae9e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	3301      	adds	r3, #1
 800aea4:	d04d      	beq.n	800af42 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800aea6:	f7fc fd73 	bl	8007990 <HAL_GetTick>
 800aeaa:	0002      	movs	r2, r0
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	1ad3      	subs	r3, r2, r3
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d902      	bls.n	800aebc <SPI_WaitFifoStateUntilTimeout+0x44>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d142      	bne.n	800af42 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685a      	ldr	r2, [r3, #4]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	21e0      	movs	r1, #224	; 0xe0
 800aec8:	438a      	bics	r2, r1
 800aeca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	2382      	movs	r3, #130	; 0x82
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d113      	bne.n	800af00 <SPI_WaitFifoStateUntilTimeout+0x88>
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	689a      	ldr	r2, [r3, #8]
 800aedc:	2380      	movs	r3, #128	; 0x80
 800aede:	021b      	lsls	r3, r3, #8
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d005      	beq.n	800aef0 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	2380      	movs	r3, #128	; 0x80
 800aeea:	00db      	lsls	r3, r3, #3
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d107      	bne.n	800af00 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2140      	movs	r1, #64	; 0x40
 800aefc:	438a      	bics	r2, r1
 800aefe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af04:	2380      	movs	r3, #128	; 0x80
 800af06:	019b      	lsls	r3, r3, #6
 800af08:	429a      	cmp	r2, r3
 800af0a:	d110      	bne.n	800af2e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4911      	ldr	r1, [pc, #68]	; (800af5c <SPI_WaitFifoStateUntilTimeout+0xe4>)
 800af18:	400a      	ands	r2, r1
 800af1a:	601a      	str	r2, [r3, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2180      	movs	r1, #128	; 0x80
 800af28:	0189      	lsls	r1, r1, #6
 800af2a:	430a      	orrs	r2, r1
 800af2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	225d      	movs	r2, #93	; 0x5d
 800af32:	2101      	movs	r1, #1
 800af34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	225c      	movs	r2, #92	; 0x5c
 800af3a:	2100      	movs	r1, #0
 800af3c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	e008      	b.n	800af54 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	4013      	ands	r3, r2
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d19a      	bne.n	800ae88 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	0018      	movs	r0, r3
 800af56:	46bd      	mov	sp, r7
 800af58:	b004      	add	sp, #16
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	ffffdfff 	.word	0xffffdfff

0800af60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af02      	add	r7, sp, #8
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	23c0      	movs	r3, #192	; 0xc0
 800af70:	0159      	lsls	r1, r3, #5
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	0013      	movs	r3, r2
 800af7a:	2200      	movs	r2, #0
 800af7c:	f7ff ff7c 	bl	800ae78 <SPI_WaitFifoStateUntilTimeout>
 800af80:	1e03      	subs	r3, r0, #0
 800af82:	d007      	beq.n	800af94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af88:	2220      	movs	r2, #32
 800af8a:	431a      	orrs	r2, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e027      	b.n	800afe4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	0013      	movs	r3, r2
 800af9e:	2200      	movs	r2, #0
 800afa0:	2180      	movs	r1, #128	; 0x80
 800afa2:	f7ff fef9 	bl	800ad98 <SPI_WaitFlagStateUntilTimeout>
 800afa6:	1e03      	subs	r3, r0, #0
 800afa8:	d007      	beq.n	800afba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afae:	2220      	movs	r2, #32
 800afb0:	431a      	orrs	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800afb6:	2303      	movs	r3, #3
 800afb8:	e014      	b.n	800afe4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	23c0      	movs	r3, #192	; 0xc0
 800afbe:	00d9      	lsls	r1, r3, #3
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	0013      	movs	r3, r2
 800afc8:	2200      	movs	r2, #0
 800afca:	f7ff ff55 	bl	800ae78 <SPI_WaitFifoStateUntilTimeout>
 800afce:	1e03      	subs	r3, r0, #0
 800afd0:	d007      	beq.n	800afe2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afd6:	2220      	movs	r2, #32
 800afd8:	431a      	orrs	r2, r3
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800afde:	2303      	movs	r3, #3
 800afe0:	e000      	b.n	800afe4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	0018      	movs	r0, r3
 800afe6:	46bd      	mov	sp, r7
 800afe8:	b004      	add	sp, #16
 800afea:	bd80      	pop	{r7, pc}

0800afec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e046      	b.n	800b08c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2280      	movs	r2, #128	; 0x80
 800b002:	589b      	ldr	r3, [r3, r2]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d107      	bne.n	800b018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	227c      	movs	r2, #124	; 0x7c
 800b00c:	2100      	movs	r1, #0
 800b00e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	0018      	movs	r0, r3
 800b014:	f7f8 fe42 	bl	8003c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2280      	movs	r2, #128	; 0x80
 800b01c:	2124      	movs	r1, #36	; 0x24
 800b01e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2101      	movs	r1, #1
 800b02c:	438a      	bics	r2, r1
 800b02e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	0018      	movs	r0, r3
 800b034:	f000 f8dc 	bl	800b1f0 <UART_SetConfig>
 800b038:	0003      	movs	r3, r0
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d101      	bne.n	800b042 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	e024      	b.n	800b08c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	0018      	movs	r0, r3
 800b04e:	f001 f97d 	bl	800c34c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	490d      	ldr	r1, [pc, #52]	; (800b094 <HAL_UART_Init+0xa8>)
 800b05e:	400a      	ands	r2, r1
 800b060:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689a      	ldr	r2, [r3, #8]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	212a      	movs	r1, #42	; 0x2a
 800b06e:	438a      	bics	r2, r1
 800b070:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2101      	movs	r1, #1
 800b07e:	430a      	orrs	r2, r1
 800b080:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	0018      	movs	r0, r3
 800b086:	f001 fa15 	bl	800c4b4 <UART_CheckIdleState>
 800b08a:	0003      	movs	r3, r0
}
 800b08c:	0018      	movs	r0, r3
 800b08e:	46bd      	mov	sp, r7
 800b090:	b002      	add	sp, #8
 800b092:	bd80      	pop	{r7, pc}
 800b094:	ffffb7ff 	.word	0xffffb7ff

0800b098 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b08a      	sub	sp, #40	; 0x28
 800b09c:	af02      	add	r7, sp, #8
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	1dbb      	adds	r3, r7, #6
 800b0a6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2280      	movs	r2, #128	; 0x80
 800b0ac:	589b      	ldr	r3, [r3, r2]
 800b0ae:	2b20      	cmp	r3, #32
 800b0b0:	d000      	beq.n	800b0b4 <HAL_UART_Transmit+0x1c>
 800b0b2:	e097      	b.n	800b1e4 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d003      	beq.n	800b0c2 <HAL_UART_Transmit+0x2a>
 800b0ba:	1dbb      	adds	r3, r7, #6
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e08f      	b.n	800b1e6 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	689a      	ldr	r2, [r3, #8]
 800b0ca:	2380      	movs	r3, #128	; 0x80
 800b0cc:	015b      	lsls	r3, r3, #5
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d109      	bne.n	800b0e6 <HAL_UART_Transmit+0x4e>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d105      	bne.n	800b0e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	4013      	ands	r3, r2
 800b0e0:	d001      	beq.n	800b0e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e07f      	b.n	800b1e6 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	227c      	movs	r2, #124	; 0x7c
 800b0ea:	5c9b      	ldrb	r3, [r3, r2]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d101      	bne.n	800b0f4 <HAL_UART_Transmit+0x5c>
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	e078      	b.n	800b1e6 <HAL_UART_Transmit+0x14e>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	227c      	movs	r2, #124	; 0x7c
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2288      	movs	r2, #136	; 0x88
 800b100:	2100      	movs	r1, #0
 800b102:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2280      	movs	r2, #128	; 0x80
 800b108:	2121      	movs	r1, #33	; 0x21
 800b10a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b10c:	f7fc fc40 	bl	8007990 <HAL_GetTick>
 800b110:	0003      	movs	r3, r0
 800b112:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	1dba      	adds	r2, r7, #6
 800b118:	2154      	movs	r1, #84	; 0x54
 800b11a:	8812      	ldrh	r2, [r2, #0]
 800b11c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	1dba      	adds	r2, r7, #6
 800b122:	2156      	movs	r1, #86	; 0x56
 800b124:	8812      	ldrh	r2, [r2, #0]
 800b126:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	689a      	ldr	r2, [r3, #8]
 800b12c:	2380      	movs	r3, #128	; 0x80
 800b12e:	015b      	lsls	r3, r3, #5
 800b130:	429a      	cmp	r2, r3
 800b132:	d108      	bne.n	800b146 <HAL_UART_Transmit+0xae>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d104      	bne.n	800b146 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800b13c:	2300      	movs	r3, #0
 800b13e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	61bb      	str	r3, [r7, #24]
 800b144:	e003      	b.n	800b14e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b14e:	e02c      	b.n	800b1aa <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b150:	697a      	ldr	r2, [r7, #20]
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	0013      	movs	r3, r2
 800b15a:	2200      	movs	r2, #0
 800b15c:	2180      	movs	r1, #128	; 0x80
 800b15e:	f001 f9f3 	bl	800c548 <UART_WaitOnFlagUntilTimeout>
 800b162:	1e03      	subs	r3, r0, #0
 800b164:	d001      	beq.n	800b16a <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e03d      	b.n	800b1e6 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10b      	bne.n	800b188 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	001a      	movs	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	05d2      	lsls	r2, r2, #23
 800b17c:	0dd2      	lsrs	r2, r2, #23
 800b17e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	3302      	adds	r3, #2
 800b184:	61bb      	str	r3, [r7, #24]
 800b186:	e007      	b.n	800b198 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	781a      	ldrb	r2, [r3, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	3301      	adds	r3, #1
 800b196:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2256      	movs	r2, #86	; 0x56
 800b19c:	5a9b      	ldrh	r3, [r3, r2]
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	b299      	uxth	r1, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2256      	movs	r2, #86	; 0x56
 800b1a8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2256      	movs	r2, #86	; 0x56
 800b1ae:	5a9b      	ldrh	r3, [r3, r2]
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1cc      	bne.n	800b150 <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	0013      	movs	r3, r2
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2140      	movs	r1, #64	; 0x40
 800b1c4:	f001 f9c0 	bl	800c548 <UART_WaitOnFlagUntilTimeout>
 800b1c8:	1e03      	subs	r3, r0, #0
 800b1ca:	d001      	beq.n	800b1d0 <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e00a      	b.n	800b1e6 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2280      	movs	r2, #128	; 0x80
 800b1d4:	2120      	movs	r1, #32
 800b1d6:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	227c      	movs	r2, #124	; 0x7c
 800b1dc:	2100      	movs	r1, #0
 800b1de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	e000      	b.n	800b1e6 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800b1e4:	2302      	movs	r3, #2
  }
}
 800b1e6:	0018      	movs	r0, r3
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	b008      	add	sp, #32
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f2:	b0a1      	sub	sp, #132	; 0x84
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1fc:	231b      	movs	r3, #27
 800b1fe:	2258      	movs	r2, #88	; 0x58
 800b200:	18ba      	adds	r2, r7, r2
 800b202:	18d2      	adds	r2, r2, r3
 800b204:	2300      	movs	r3, #0
 800b206:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800b208:	2300      	movs	r3, #0
 800b20a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b20c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b20e:	689a      	ldr	r2, [r3, #8]
 800b210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	431a      	orrs	r2, r3
 800b216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	431a      	orrs	r2, r3
 800b21c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b21e:	69db      	ldr	r3, [r3, #28]
 800b220:	4313      	orrs	r3, r2
 800b222:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 800b224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b226:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b228:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b22a:	4313      	orrs	r3, r2
 800b22c:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b22e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	4bbe      	ldr	r3, [pc, #760]	; (800b530 <UART_SetConfig+0x340>)
 800b236:	401a      	ands	r2, r3
 800b238:	0011      	movs	r1, r2
 800b23a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b240:	430b      	orrs	r3, r1
 800b242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	685a      	ldr	r2, [r3, #4]
 800b24a:	4bba      	ldr	r3, [pc, #744]	; (800b534 <UART_SetConfig+0x344>)
 800b24c:	401a      	ands	r2, r3
 800b24e:	0010      	movs	r0, r2
 800b250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b252:	68d9      	ldr	r1, [r3, #12]
 800b254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	0003      	movs	r3, r0
 800b25a:	430b      	orrs	r3, r1
 800b25c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	4bb3      	ldr	r3, [pc, #716]	; (800b538 <UART_SetConfig+0x348>)
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d004      	beq.n	800b278 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b270:	6a1a      	ldr	r2, [r3, #32]
 800b272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b274:	4313      	orrs	r3, r2
 800b276:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689a      	ldr	r2, [r3, #8]
 800b27e:	4baf      	ldr	r3, [pc, #700]	; (800b53c <UART_SetConfig+0x34c>)
 800b280:	401a      	ands	r2, r3
 800b282:	0011      	movs	r1, r2
 800b284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b28a:	430b      	orrs	r3, r1
 800b28c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b28e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b294:	230f      	movs	r3, #15
 800b296:	439a      	bics	r2, r3
 800b298:	0010      	movs	r0, r2
 800b29a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b29c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b29e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	0003      	movs	r3, r0
 800b2a4:	430b      	orrs	r3, r1
 800b2a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	4ba4      	ldr	r3, [pc, #656]	; (800b540 <UART_SetConfig+0x350>)
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d12f      	bne.n	800b312 <UART_SetConfig+0x122>
 800b2b2:	4ba4      	ldr	r3, [pc, #656]	; (800b544 <UART_SetConfig+0x354>)
 800b2b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d013      	beq.n	800b2e6 <UART_SetConfig+0xf6>
 800b2be:	d304      	bcc.n	800b2ca <UART_SetConfig+0xda>
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d009      	beq.n	800b2d8 <UART_SetConfig+0xe8>
 800b2c4:	2b03      	cmp	r3, #3
 800b2c6:	d015      	beq.n	800b2f4 <UART_SetConfig+0x104>
 800b2c8:	e01b      	b.n	800b302 <UART_SetConfig+0x112>
 800b2ca:	2323      	movs	r3, #35	; 0x23
 800b2cc:	2258      	movs	r2, #88	; 0x58
 800b2ce:	18ba      	adds	r2, r7, r2
 800b2d0:	18d2      	adds	r2, r2, r3
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	7013      	strb	r3, [r2, #0]
 800b2d6:	e070      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b2d8:	2323      	movs	r3, #35	; 0x23
 800b2da:	2258      	movs	r2, #88	; 0x58
 800b2dc:	18ba      	adds	r2, r7, r2
 800b2de:	18d2      	adds	r2, r2, r3
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	7013      	strb	r3, [r2, #0]
 800b2e4:	e069      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b2e6:	2323      	movs	r3, #35	; 0x23
 800b2e8:	2258      	movs	r2, #88	; 0x58
 800b2ea:	18ba      	adds	r2, r7, r2
 800b2ec:	18d2      	adds	r2, r2, r3
 800b2ee:	2304      	movs	r3, #4
 800b2f0:	7013      	strb	r3, [r2, #0]
 800b2f2:	e062      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b2f4:	2323      	movs	r3, #35	; 0x23
 800b2f6:	2258      	movs	r2, #88	; 0x58
 800b2f8:	18ba      	adds	r2, r7, r2
 800b2fa:	18d2      	adds	r2, r2, r3
 800b2fc:	2308      	movs	r3, #8
 800b2fe:	7013      	strb	r3, [r2, #0]
 800b300:	e05b      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b302:	2323      	movs	r3, #35	; 0x23
 800b304:	2258      	movs	r2, #88	; 0x58
 800b306:	18ba      	adds	r2, r7, r2
 800b308:	18d2      	adds	r2, r2, r3
 800b30a:	2310      	movs	r3, #16
 800b30c:	7013      	strb	r3, [r2, #0]
 800b30e:	46c0      	nop			; (mov r8, r8)
 800b310:	e053      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	4b8c      	ldr	r3, [pc, #560]	; (800b548 <UART_SetConfig+0x358>)
 800b318:	429a      	cmp	r2, r3
 800b31a:	d106      	bne.n	800b32a <UART_SetConfig+0x13a>
 800b31c:	2323      	movs	r3, #35	; 0x23
 800b31e:	2258      	movs	r2, #88	; 0x58
 800b320:	18ba      	adds	r2, r7, r2
 800b322:	18d2      	adds	r2, r2, r3
 800b324:	2300      	movs	r3, #0
 800b326:	7013      	strb	r3, [r2, #0]
 800b328:	e047      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b32a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	4b82      	ldr	r3, [pc, #520]	; (800b538 <UART_SetConfig+0x348>)
 800b330:	429a      	cmp	r2, r3
 800b332:	d13c      	bne.n	800b3ae <UART_SetConfig+0x1be>
 800b334:	4b83      	ldr	r3, [pc, #524]	; (800b544 <UART_SetConfig+0x354>)
 800b336:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b338:	23c0      	movs	r3, #192	; 0xc0
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	401a      	ands	r2, r3
 800b33e:	2380      	movs	r3, #128	; 0x80
 800b340:	00db      	lsls	r3, r3, #3
 800b342:	429a      	cmp	r2, r3
 800b344:	d01d      	beq.n	800b382 <UART_SetConfig+0x192>
 800b346:	2380      	movs	r3, #128	; 0x80
 800b348:	00db      	lsls	r3, r3, #3
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d802      	bhi.n	800b354 <UART_SetConfig+0x164>
 800b34e:	2a00      	cmp	r2, #0
 800b350:	d009      	beq.n	800b366 <UART_SetConfig+0x176>
 800b352:	e024      	b.n	800b39e <UART_SetConfig+0x1ae>
 800b354:	2380      	movs	r3, #128	; 0x80
 800b356:	011b      	lsls	r3, r3, #4
 800b358:	429a      	cmp	r2, r3
 800b35a:	d00b      	beq.n	800b374 <UART_SetConfig+0x184>
 800b35c:	23c0      	movs	r3, #192	; 0xc0
 800b35e:	011b      	lsls	r3, r3, #4
 800b360:	429a      	cmp	r2, r3
 800b362:	d015      	beq.n	800b390 <UART_SetConfig+0x1a0>
 800b364:	e01b      	b.n	800b39e <UART_SetConfig+0x1ae>
 800b366:	2323      	movs	r3, #35	; 0x23
 800b368:	2258      	movs	r2, #88	; 0x58
 800b36a:	18ba      	adds	r2, r7, r2
 800b36c:	18d2      	adds	r2, r2, r3
 800b36e:	2300      	movs	r3, #0
 800b370:	7013      	strb	r3, [r2, #0]
 800b372:	e022      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b374:	2323      	movs	r3, #35	; 0x23
 800b376:	2258      	movs	r2, #88	; 0x58
 800b378:	18ba      	adds	r2, r7, r2
 800b37a:	18d2      	adds	r2, r2, r3
 800b37c:	2302      	movs	r3, #2
 800b37e:	7013      	strb	r3, [r2, #0]
 800b380:	e01b      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b382:	2323      	movs	r3, #35	; 0x23
 800b384:	2258      	movs	r2, #88	; 0x58
 800b386:	18ba      	adds	r2, r7, r2
 800b388:	18d2      	adds	r2, r2, r3
 800b38a:	2304      	movs	r3, #4
 800b38c:	7013      	strb	r3, [r2, #0]
 800b38e:	e014      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b390:	2323      	movs	r3, #35	; 0x23
 800b392:	2258      	movs	r2, #88	; 0x58
 800b394:	18ba      	adds	r2, r7, r2
 800b396:	18d2      	adds	r2, r2, r3
 800b398:	2308      	movs	r3, #8
 800b39a:	7013      	strb	r3, [r2, #0]
 800b39c:	e00d      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b39e:	2323      	movs	r3, #35	; 0x23
 800b3a0:	2258      	movs	r2, #88	; 0x58
 800b3a2:	18ba      	adds	r2, r7, r2
 800b3a4:	18d2      	adds	r2, r2, r3
 800b3a6:	2310      	movs	r3, #16
 800b3a8:	7013      	strb	r3, [r2, #0]
 800b3aa:	46c0      	nop			; (mov r8, r8)
 800b3ac:	e005      	b.n	800b3ba <UART_SetConfig+0x1ca>
 800b3ae:	2323      	movs	r3, #35	; 0x23
 800b3b0:	2258      	movs	r2, #88	; 0x58
 800b3b2:	18ba      	adds	r2, r7, r2
 800b3b4:	18d2      	adds	r2, r2, r3
 800b3b6:	2310      	movs	r3, #16
 800b3b8:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	4b5e      	ldr	r3, [pc, #376]	; (800b538 <UART_SetConfig+0x348>)
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d001      	beq.n	800b3c8 <UART_SetConfig+0x1d8>
 800b3c4:	f000 fbe8 	bl	800bb98 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b3c8:	2323      	movs	r3, #35	; 0x23
 800b3ca:	2258      	movs	r2, #88	; 0x58
 800b3cc:	4694      	mov	ip, r2
 800b3ce:	44bc      	add	ip, r7
 800b3d0:	4463      	add	r3, ip
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	d100      	bne.n	800b3da <UART_SetConfig+0x1ea>
 800b3d8:	e05e      	b.n	800b498 <UART_SetConfig+0x2a8>
 800b3da:	dc02      	bgt.n	800b3e2 <UART_SetConfig+0x1f2>
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d007      	beq.n	800b3f0 <UART_SetConfig+0x200>
 800b3e0:	e174      	b.n	800b6cc <UART_SetConfig+0x4dc>
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	d100      	bne.n	800b3e8 <UART_SetConfig+0x1f8>
 800b3e6:	e0c9      	b.n	800b57c <UART_SetConfig+0x38c>
 800b3e8:	2b08      	cmp	r3, #8
 800b3ea:	d100      	bne.n	800b3ee <UART_SetConfig+0x1fe>
 800b3ec:	e11a      	b.n	800b624 <UART_SetConfig+0x434>
 800b3ee:	e16d      	b.n	800b6cc <UART_SetConfig+0x4dc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800b3f0:	f7fe fe62 	bl	800a0b8 <HAL_RCC_GetPCLK1Freq>
 800b3f4:	0002      	movs	r2, r0
 800b3f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d044      	beq.n	800b488 <UART_SetConfig+0x298>
 800b3fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b402:	2b01      	cmp	r3, #1
 800b404:	d03e      	beq.n	800b484 <UART_SetConfig+0x294>
 800b406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d038      	beq.n	800b480 <UART_SetConfig+0x290>
 800b40e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b412:	2b03      	cmp	r3, #3
 800b414:	d032      	beq.n	800b47c <UART_SetConfig+0x28c>
 800b416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41a:	2b04      	cmp	r3, #4
 800b41c:	d02c      	beq.n	800b478 <UART_SetConfig+0x288>
 800b41e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b422:	2b05      	cmp	r3, #5
 800b424:	d026      	beq.n	800b474 <UART_SetConfig+0x284>
 800b426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42a:	2b06      	cmp	r3, #6
 800b42c:	d020      	beq.n	800b470 <UART_SetConfig+0x280>
 800b42e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b432:	2b07      	cmp	r3, #7
 800b434:	d01a      	beq.n	800b46c <UART_SetConfig+0x27c>
 800b436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43a:	2b08      	cmp	r3, #8
 800b43c:	d014      	beq.n	800b468 <UART_SetConfig+0x278>
 800b43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b442:	2b09      	cmp	r3, #9
 800b444:	d00e      	beq.n	800b464 <UART_SetConfig+0x274>
 800b446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44a:	2b0a      	cmp	r3, #10
 800b44c:	d008      	beq.n	800b460 <UART_SetConfig+0x270>
 800b44e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	2b0b      	cmp	r3, #11
 800b454:	d102      	bne.n	800b45c <UART_SetConfig+0x26c>
 800b456:	2380      	movs	r3, #128	; 0x80
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	e016      	b.n	800b48a <UART_SetConfig+0x29a>
 800b45c:	2301      	movs	r3, #1
 800b45e:	e014      	b.n	800b48a <UART_SetConfig+0x29a>
 800b460:	2380      	movs	r3, #128	; 0x80
 800b462:	e012      	b.n	800b48a <UART_SetConfig+0x29a>
 800b464:	2340      	movs	r3, #64	; 0x40
 800b466:	e010      	b.n	800b48a <UART_SetConfig+0x29a>
 800b468:	2320      	movs	r3, #32
 800b46a:	e00e      	b.n	800b48a <UART_SetConfig+0x29a>
 800b46c:	2310      	movs	r3, #16
 800b46e:	e00c      	b.n	800b48a <UART_SetConfig+0x29a>
 800b470:	230c      	movs	r3, #12
 800b472:	e00a      	b.n	800b48a <UART_SetConfig+0x29a>
 800b474:	230a      	movs	r3, #10
 800b476:	e008      	b.n	800b48a <UART_SetConfig+0x29a>
 800b478:	2308      	movs	r3, #8
 800b47a:	e006      	b.n	800b48a <UART_SetConfig+0x29a>
 800b47c:	2306      	movs	r3, #6
 800b47e:	e004      	b.n	800b48a <UART_SetConfig+0x29a>
 800b480:	2304      	movs	r3, #4
 800b482:	e002      	b.n	800b48a <UART_SetConfig+0x29a>
 800b484:	2302      	movs	r3, #2
 800b486:	e000      	b.n	800b48a <UART_SetConfig+0x29a>
 800b488:	2301      	movs	r3, #1
 800b48a:	0019      	movs	r1, r3
 800b48c:	0010      	movs	r0, r2
 800b48e:	f7f4 fe39 	bl	8000104 <__udivsi3>
 800b492:	0003      	movs	r3, r0
 800b494:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800b496:	e120      	b.n	800b6da <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800b498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d043      	beq.n	800b528 <UART_SetConfig+0x338>
 800b4a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d03d      	beq.n	800b524 <UART_SetConfig+0x334>
 800b4a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d037      	beq.n	800b520 <UART_SetConfig+0x330>
 800b4b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	d031      	beq.n	800b51c <UART_SetConfig+0x32c>
 800b4b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4bc:	2b04      	cmp	r3, #4
 800b4be:	d02b      	beq.n	800b518 <UART_SetConfig+0x328>
 800b4c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	2b05      	cmp	r3, #5
 800b4c6:	d025      	beq.n	800b514 <UART_SetConfig+0x324>
 800b4c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4cc:	2b06      	cmp	r3, #6
 800b4ce:	d01f      	beq.n	800b510 <UART_SetConfig+0x320>
 800b4d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d4:	2b07      	cmp	r3, #7
 800b4d6:	d019      	beq.n	800b50c <UART_SetConfig+0x31c>
 800b4d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	d013      	beq.n	800b508 <UART_SetConfig+0x318>
 800b4e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e4:	2b09      	cmp	r3, #9
 800b4e6:	d00d      	beq.n	800b504 <UART_SetConfig+0x314>
 800b4e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	2b0a      	cmp	r3, #10
 800b4ee:	d007      	beq.n	800b500 <UART_SetConfig+0x310>
 800b4f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f4:	2b0b      	cmp	r3, #11
 800b4f6:	d101      	bne.n	800b4fc <UART_SetConfig+0x30c>
 800b4f8:	4b14      	ldr	r3, [pc, #80]	; (800b54c <UART_SetConfig+0x35c>)
 800b4fa:	e016      	b.n	800b52a <UART_SetConfig+0x33a>
 800b4fc:	4b14      	ldr	r3, [pc, #80]	; (800b550 <UART_SetConfig+0x360>)
 800b4fe:	e014      	b.n	800b52a <UART_SetConfig+0x33a>
 800b500:	4b14      	ldr	r3, [pc, #80]	; (800b554 <UART_SetConfig+0x364>)
 800b502:	e012      	b.n	800b52a <UART_SetConfig+0x33a>
 800b504:	4b14      	ldr	r3, [pc, #80]	; (800b558 <UART_SetConfig+0x368>)
 800b506:	e010      	b.n	800b52a <UART_SetConfig+0x33a>
 800b508:	4b14      	ldr	r3, [pc, #80]	; (800b55c <UART_SetConfig+0x36c>)
 800b50a:	e00e      	b.n	800b52a <UART_SetConfig+0x33a>
 800b50c:	4b14      	ldr	r3, [pc, #80]	; (800b560 <UART_SetConfig+0x370>)
 800b50e:	e00c      	b.n	800b52a <UART_SetConfig+0x33a>
 800b510:	4b14      	ldr	r3, [pc, #80]	; (800b564 <UART_SetConfig+0x374>)
 800b512:	e00a      	b.n	800b52a <UART_SetConfig+0x33a>
 800b514:	4b14      	ldr	r3, [pc, #80]	; (800b568 <UART_SetConfig+0x378>)
 800b516:	e008      	b.n	800b52a <UART_SetConfig+0x33a>
 800b518:	4b14      	ldr	r3, [pc, #80]	; (800b56c <UART_SetConfig+0x37c>)
 800b51a:	e006      	b.n	800b52a <UART_SetConfig+0x33a>
 800b51c:	4b14      	ldr	r3, [pc, #80]	; (800b570 <UART_SetConfig+0x380>)
 800b51e:	e004      	b.n	800b52a <UART_SetConfig+0x33a>
 800b520:	4b14      	ldr	r3, [pc, #80]	; (800b574 <UART_SetConfig+0x384>)
 800b522:	e002      	b.n	800b52a <UART_SetConfig+0x33a>
 800b524:	4b14      	ldr	r3, [pc, #80]	; (800b578 <UART_SetConfig+0x388>)
 800b526:	e000      	b.n	800b52a <UART_SetConfig+0x33a>
 800b528:	4b09      	ldr	r3, [pc, #36]	; (800b550 <UART_SetConfig+0x360>)
 800b52a:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800b52c:	e0d5      	b.n	800b6da <UART_SetConfig+0x4ea>
 800b52e:	46c0      	nop			; (mov r8, r8)
 800b530:	cfff69f3 	.word	0xcfff69f3
 800b534:	ffffcfff 	.word	0xffffcfff
 800b538:	40008000 	.word	0x40008000
 800b53c:	11fff4ff 	.word	0x11fff4ff
 800b540:	40013800 	.word	0x40013800
 800b544:	40021000 	.word	0x40021000
 800b548:	40004400 	.word	0x40004400
 800b54c:	0000f424 	.word	0x0000f424
 800b550:	00f42400 	.word	0x00f42400
 800b554:	0001e848 	.word	0x0001e848
 800b558:	0003d090 	.word	0x0003d090
 800b55c:	0007a120 	.word	0x0007a120
 800b560:	000f4240 	.word	0x000f4240
 800b564:	00145855 	.word	0x00145855
 800b568:	00186a00 	.word	0x00186a00
 800b56c:	001e8480 	.word	0x001e8480
 800b570:	0028b0aa 	.word	0x0028b0aa
 800b574:	003d0900 	.word	0x003d0900
 800b578:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800b57c:	f7fe fd10 	bl	8009fa0 <HAL_RCC_GetSysClockFreq>
 800b580:	0002      	movs	r2, r0
 800b582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d044      	beq.n	800b614 <UART_SetConfig+0x424>
 800b58a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d03e      	beq.n	800b610 <UART_SetConfig+0x420>
 800b592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b596:	2b02      	cmp	r3, #2
 800b598:	d038      	beq.n	800b60c <UART_SetConfig+0x41c>
 800b59a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d032      	beq.n	800b608 <UART_SetConfig+0x418>
 800b5a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a6:	2b04      	cmp	r3, #4
 800b5a8:	d02c      	beq.n	800b604 <UART_SetConfig+0x414>
 800b5aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ae:	2b05      	cmp	r3, #5
 800b5b0:	d026      	beq.n	800b600 <UART_SetConfig+0x410>
 800b5b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b6:	2b06      	cmp	r3, #6
 800b5b8:	d020      	beq.n	800b5fc <UART_SetConfig+0x40c>
 800b5ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5be:	2b07      	cmp	r3, #7
 800b5c0:	d01a      	beq.n	800b5f8 <UART_SetConfig+0x408>
 800b5c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c6:	2b08      	cmp	r3, #8
 800b5c8:	d014      	beq.n	800b5f4 <UART_SetConfig+0x404>
 800b5ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ce:	2b09      	cmp	r3, #9
 800b5d0:	d00e      	beq.n	800b5f0 <UART_SetConfig+0x400>
 800b5d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	2b0a      	cmp	r3, #10
 800b5d8:	d008      	beq.n	800b5ec <UART_SetConfig+0x3fc>
 800b5da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	2b0b      	cmp	r3, #11
 800b5e0:	d102      	bne.n	800b5e8 <UART_SetConfig+0x3f8>
 800b5e2:	2380      	movs	r3, #128	; 0x80
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	e016      	b.n	800b616 <UART_SetConfig+0x426>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e014      	b.n	800b616 <UART_SetConfig+0x426>
 800b5ec:	2380      	movs	r3, #128	; 0x80
 800b5ee:	e012      	b.n	800b616 <UART_SetConfig+0x426>
 800b5f0:	2340      	movs	r3, #64	; 0x40
 800b5f2:	e010      	b.n	800b616 <UART_SetConfig+0x426>
 800b5f4:	2320      	movs	r3, #32
 800b5f6:	e00e      	b.n	800b616 <UART_SetConfig+0x426>
 800b5f8:	2310      	movs	r3, #16
 800b5fa:	e00c      	b.n	800b616 <UART_SetConfig+0x426>
 800b5fc:	230c      	movs	r3, #12
 800b5fe:	e00a      	b.n	800b616 <UART_SetConfig+0x426>
 800b600:	230a      	movs	r3, #10
 800b602:	e008      	b.n	800b616 <UART_SetConfig+0x426>
 800b604:	2308      	movs	r3, #8
 800b606:	e006      	b.n	800b616 <UART_SetConfig+0x426>
 800b608:	2306      	movs	r3, #6
 800b60a:	e004      	b.n	800b616 <UART_SetConfig+0x426>
 800b60c:	2304      	movs	r3, #4
 800b60e:	e002      	b.n	800b616 <UART_SetConfig+0x426>
 800b610:	2302      	movs	r3, #2
 800b612:	e000      	b.n	800b616 <UART_SetConfig+0x426>
 800b614:	2301      	movs	r3, #1
 800b616:	0019      	movs	r1, r3
 800b618:	0010      	movs	r0, r2
 800b61a:	f7f4 fd73 	bl	8000104 <__udivsi3>
 800b61e:	0003      	movs	r3, r0
 800b620:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800b622:	e05a      	b.n	800b6da <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800b624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d04b      	beq.n	800b6c4 <UART_SetConfig+0x4d4>
 800b62c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	2b01      	cmp	r3, #1
 800b632:	d044      	beq.n	800b6be <UART_SetConfig+0x4ce>
 800b634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d03d      	beq.n	800b6b8 <UART_SetConfig+0x4c8>
 800b63c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b640:	2b03      	cmp	r3, #3
 800b642:	d037      	beq.n	800b6b4 <UART_SetConfig+0x4c4>
 800b644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b648:	2b04      	cmp	r3, #4
 800b64a:	d030      	beq.n	800b6ae <UART_SetConfig+0x4be>
 800b64c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b650:	2b05      	cmp	r3, #5
 800b652:	d02a      	beq.n	800b6aa <UART_SetConfig+0x4ba>
 800b654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b658:	2b06      	cmp	r3, #6
 800b65a:	d024      	beq.n	800b6a6 <UART_SetConfig+0x4b6>
 800b65c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b660:	2b07      	cmp	r3, #7
 800b662:	d01d      	beq.n	800b6a0 <UART_SetConfig+0x4b0>
 800b664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	2b08      	cmp	r3, #8
 800b66a:	d016      	beq.n	800b69a <UART_SetConfig+0x4aa>
 800b66c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	2b09      	cmp	r3, #9
 800b672:	d00f      	beq.n	800b694 <UART_SetConfig+0x4a4>
 800b674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b678:	2b0a      	cmp	r3, #10
 800b67a:	d008      	beq.n	800b68e <UART_SetConfig+0x49e>
 800b67c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	2b0b      	cmp	r3, #11
 800b682:	d101      	bne.n	800b688 <UART_SetConfig+0x498>
 800b684:	2380      	movs	r3, #128	; 0x80
 800b686:	e01f      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b688:	2380      	movs	r3, #128	; 0x80
 800b68a:	021b      	lsls	r3, r3, #8
 800b68c:	e01c      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b68e:	2380      	movs	r3, #128	; 0x80
 800b690:	005b      	lsls	r3, r3, #1
 800b692:	e019      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b694:	2380      	movs	r3, #128	; 0x80
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	e016      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b69a:	2380      	movs	r3, #128	; 0x80
 800b69c:	00db      	lsls	r3, r3, #3
 800b69e:	e013      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b6a0:	2380      	movs	r3, #128	; 0x80
 800b6a2:	011b      	lsls	r3, r3, #4
 800b6a4:	e010      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b6a6:	4bbf      	ldr	r3, [pc, #764]	; (800b9a4 <UART_SetConfig+0x7b4>)
 800b6a8:	e00e      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b6aa:	4bbf      	ldr	r3, [pc, #764]	; (800b9a8 <UART_SetConfig+0x7b8>)
 800b6ac:	e00c      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b6ae:	2380      	movs	r3, #128	; 0x80
 800b6b0:	015b      	lsls	r3, r3, #5
 800b6b2:	e009      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b6b4:	4bbd      	ldr	r3, [pc, #756]	; (800b9ac <UART_SetConfig+0x7bc>)
 800b6b6:	e007      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b6b8:	2380      	movs	r3, #128	; 0x80
 800b6ba:	019b      	lsls	r3, r3, #6
 800b6bc:	e004      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b6be:	2380      	movs	r3, #128	; 0x80
 800b6c0:	01db      	lsls	r3, r3, #7
 800b6c2:	e001      	b.n	800b6c8 <UART_SetConfig+0x4d8>
 800b6c4:	2380      	movs	r3, #128	; 0x80
 800b6c6:	021b      	lsls	r3, r3, #8
 800b6c8:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800b6ca:	e006      	b.n	800b6da <UART_SetConfig+0x4ea>
      default:
        ret = HAL_ERROR;
 800b6cc:	231b      	movs	r3, #27
 800b6ce:	2258      	movs	r2, #88	; 0x58
 800b6d0:	18ba      	adds	r2, r7, r2
 800b6d2:	18d2      	adds	r2, r2, r3
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	7013      	strb	r3, [r2, #0]
        break;
 800b6d8:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800b6da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <UART_SetConfig+0x4f4>
 800b6e0:	f000 fe14 	bl	800c30c <UART_SetConfig+0x111c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	0013      	movs	r3, r2
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	189a      	adds	r2, r3, r2
 800b6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d305      	bcc.n	800b700 <UART_SetConfig+0x510>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d908      	bls.n	800b712 <UART_SetConfig+0x522>
      {
        ret = HAL_ERROR;
 800b700:	231b      	movs	r3, #27
 800b702:	2258      	movs	r2, #88	; 0x58
 800b704:	4694      	mov	ip, r2
 800b706:	44bc      	add	ip, r7
 800b708:	4463      	add	r3, ip
 800b70a:	2201      	movs	r2, #1
 800b70c:	701a      	strb	r2, [r3, #0]
 800b70e:	f000 fdfd 	bl	800c30c <UART_SetConfig+0x111c>
      }
      else
      {
        switch (clocksource)
 800b712:	2323      	movs	r3, #35	; 0x23
 800b714:	2258      	movs	r2, #88	; 0x58
 800b716:	4694      	mov	ip, r2
 800b718:	44bc      	add	ip, r7
 800b71a:	4463      	add	r3, ip
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d100      	bne.n	800b724 <UART_SetConfig+0x534>
 800b722:	e08c      	b.n	800b83e <UART_SetConfig+0x64e>
 800b724:	dc02      	bgt.n	800b72c <UART_SetConfig+0x53c>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d007      	beq.n	800b73a <UART_SetConfig+0x54a>
 800b72a:	e216      	b.n	800bb5a <UART_SetConfig+0x96a>
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d100      	bne.n	800b732 <UART_SetConfig+0x542>
 800b730:	e0f2      	b.n	800b918 <UART_SetConfig+0x728>
 800b732:	2b08      	cmp	r3, #8
 800b734:	d100      	bne.n	800b738 <UART_SetConfig+0x548>
 800b736:	e199      	b.n	800ba6c <UART_SetConfig+0x87c>
 800b738:	e20f      	b.n	800bb5a <UART_SetConfig+0x96a>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800b73a:	f7fe fcbd 	bl	800a0b8 <HAL_RCC_GetPCLK1Freq>
 800b73e:	0003      	movs	r3, r0
 800b740:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b744:	64bb      	str	r3, [r7, #72]	; 0x48
 800b746:	2300      	movs	r3, #0
 800b748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b74a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d050      	beq.n	800b7f4 <UART_SetConfig+0x604>
 800b752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	2b01      	cmp	r3, #1
 800b758:	d049      	beq.n	800b7ee <UART_SetConfig+0x5fe>
 800b75a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d042      	beq.n	800b7e8 <UART_SetConfig+0x5f8>
 800b762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b766:	2b03      	cmp	r3, #3
 800b768:	d03b      	beq.n	800b7e2 <UART_SetConfig+0x5f2>
 800b76a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d034      	beq.n	800b7dc <UART_SetConfig+0x5ec>
 800b772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	2b05      	cmp	r3, #5
 800b778:	d02d      	beq.n	800b7d6 <UART_SetConfig+0x5e6>
 800b77a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77e:	2b06      	cmp	r3, #6
 800b780:	d026      	beq.n	800b7d0 <UART_SetConfig+0x5e0>
 800b782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b786:	2b07      	cmp	r3, #7
 800b788:	d01f      	beq.n	800b7ca <UART_SetConfig+0x5da>
 800b78a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	2b08      	cmp	r3, #8
 800b790:	d018      	beq.n	800b7c4 <UART_SetConfig+0x5d4>
 800b792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	2b09      	cmp	r3, #9
 800b798:	d011      	beq.n	800b7be <UART_SetConfig+0x5ce>
 800b79a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	2b0a      	cmp	r3, #10
 800b7a0:	d00a      	beq.n	800b7b8 <UART_SetConfig+0x5c8>
 800b7a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	2b0b      	cmp	r3, #11
 800b7a8:	d103      	bne.n	800b7b2 <UART_SetConfig+0x5c2>
 800b7aa:	2380      	movs	r3, #128	; 0x80
 800b7ac:	005b      	lsls	r3, r3, #1
 800b7ae:	2400      	movs	r4, #0
 800b7b0:	e022      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	2400      	movs	r4, #0
 800b7b6:	e01f      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7b8:	2380      	movs	r3, #128	; 0x80
 800b7ba:	2400      	movs	r4, #0
 800b7bc:	e01c      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7be:	2340      	movs	r3, #64	; 0x40
 800b7c0:	2400      	movs	r4, #0
 800b7c2:	e019      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7c4:	2320      	movs	r3, #32
 800b7c6:	2400      	movs	r4, #0
 800b7c8:	e016      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7ca:	2310      	movs	r3, #16
 800b7cc:	2400      	movs	r4, #0
 800b7ce:	e013      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7d0:	230c      	movs	r3, #12
 800b7d2:	2400      	movs	r4, #0
 800b7d4:	e010      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7d6:	230a      	movs	r3, #10
 800b7d8:	2400      	movs	r4, #0
 800b7da:	e00d      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7dc:	2308      	movs	r3, #8
 800b7de:	2400      	movs	r4, #0
 800b7e0:	e00a      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7e2:	2306      	movs	r3, #6
 800b7e4:	2400      	movs	r4, #0
 800b7e6:	e007      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7e8:	2304      	movs	r3, #4
 800b7ea:	2400      	movs	r4, #0
 800b7ec:	e004      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	2400      	movs	r4, #0
 800b7f2:	e001      	b.n	800b7f8 <UART_SetConfig+0x608>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	2400      	movs	r4, #0
 800b7f8:	001a      	movs	r2, r3
 800b7fa:	0023      	movs	r3, r4
 800b7fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b7fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b800:	f7f4 fe6e 	bl	80004e0 <__aeabi_uldivmod>
 800b804:	0003      	movs	r3, r0
 800b806:	000c      	movs	r4, r1
 800b808:	0e1a      	lsrs	r2, r3, #24
 800b80a:	0226      	lsls	r6, r4, #8
 800b80c:	4316      	orrs	r6, r2
 800b80e:	021d      	lsls	r5, r3, #8
 800b810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	085b      	lsrs	r3, r3, #1
 800b816:	643b      	str	r3, [r7, #64]	; 0x40
 800b818:	2300      	movs	r3, #0
 800b81a:	647b      	str	r3, [r7, #68]	; 0x44
 800b81c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b81e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b820:	1940      	adds	r0, r0, r5
 800b822:	4171      	adcs	r1, r6
 800b824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	63bb      	str	r3, [r7, #56]	; 0x38
 800b82a:	2300      	movs	r3, #0
 800b82c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b82e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b832:	f7f4 fe55 	bl	80004e0 <__aeabi_uldivmod>
 800b836:	0003      	movs	r3, r0
 800b838:	000c      	movs	r4, r1
 800b83a:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800b83c:	e195      	b.n	800bb6a <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b83e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	2b00      	cmp	r3, #0
 800b844:	d04f      	beq.n	800b8e6 <UART_SetConfig+0x6f6>
 800b846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d048      	beq.n	800b8e0 <UART_SetConfig+0x6f0>
 800b84e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	2b02      	cmp	r3, #2
 800b854:	d041      	beq.n	800b8da <UART_SetConfig+0x6ea>
 800b856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d03a      	beq.n	800b8d4 <UART_SetConfig+0x6e4>
 800b85e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	2b04      	cmp	r3, #4
 800b864:	d033      	beq.n	800b8ce <UART_SetConfig+0x6de>
 800b866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	2b05      	cmp	r3, #5
 800b86c:	d02c      	beq.n	800b8c8 <UART_SetConfig+0x6d8>
 800b86e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b872:	2b06      	cmp	r3, #6
 800b874:	d025      	beq.n	800b8c2 <UART_SetConfig+0x6d2>
 800b876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	2b07      	cmp	r3, #7
 800b87c:	d01e      	beq.n	800b8bc <UART_SetConfig+0x6cc>
 800b87e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	2b08      	cmp	r3, #8
 800b884:	d017      	beq.n	800b8b6 <UART_SetConfig+0x6c6>
 800b886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88a:	2b09      	cmp	r3, #9
 800b88c:	d010      	beq.n	800b8b0 <UART_SetConfig+0x6c0>
 800b88e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	2b0a      	cmp	r3, #10
 800b894:	d009      	beq.n	800b8aa <UART_SetConfig+0x6ba>
 800b896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89a:	2b0b      	cmp	r3, #11
 800b89c:	d102      	bne.n	800b8a4 <UART_SetConfig+0x6b4>
 800b89e:	4b44      	ldr	r3, [pc, #272]	; (800b9b0 <UART_SetConfig+0x7c0>)
 800b8a0:	2400      	movs	r4, #0
 800b8a2:	e022      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8a4:	4b43      	ldr	r3, [pc, #268]	; (800b9b4 <UART_SetConfig+0x7c4>)
 800b8a6:	2400      	movs	r4, #0
 800b8a8:	e01f      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8aa:	4b43      	ldr	r3, [pc, #268]	; (800b9b8 <UART_SetConfig+0x7c8>)
 800b8ac:	2400      	movs	r4, #0
 800b8ae:	e01c      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8b0:	4b42      	ldr	r3, [pc, #264]	; (800b9bc <UART_SetConfig+0x7cc>)
 800b8b2:	2400      	movs	r4, #0
 800b8b4:	e019      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8b6:	4b42      	ldr	r3, [pc, #264]	; (800b9c0 <UART_SetConfig+0x7d0>)
 800b8b8:	2400      	movs	r4, #0
 800b8ba:	e016      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8bc:	4b41      	ldr	r3, [pc, #260]	; (800b9c4 <UART_SetConfig+0x7d4>)
 800b8be:	2400      	movs	r4, #0
 800b8c0:	e013      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8c2:	4b41      	ldr	r3, [pc, #260]	; (800b9c8 <UART_SetConfig+0x7d8>)
 800b8c4:	2400      	movs	r4, #0
 800b8c6:	e010      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8c8:	4b40      	ldr	r3, [pc, #256]	; (800b9cc <UART_SetConfig+0x7dc>)
 800b8ca:	2400      	movs	r4, #0
 800b8cc:	e00d      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8ce:	4b40      	ldr	r3, [pc, #256]	; (800b9d0 <UART_SetConfig+0x7e0>)
 800b8d0:	2400      	movs	r4, #0
 800b8d2:	e00a      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8d4:	4b3f      	ldr	r3, [pc, #252]	; (800b9d4 <UART_SetConfig+0x7e4>)
 800b8d6:	2400      	movs	r4, #0
 800b8d8:	e007      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8da:	4b3f      	ldr	r3, [pc, #252]	; (800b9d8 <UART_SetConfig+0x7e8>)
 800b8dc:	2400      	movs	r4, #0
 800b8de:	e004      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8e0:	4b3e      	ldr	r3, [pc, #248]	; (800b9dc <UART_SetConfig+0x7ec>)
 800b8e2:	2400      	movs	r4, #0
 800b8e4:	e001      	b.n	800b8ea <UART_SetConfig+0x6fa>
 800b8e6:	4b33      	ldr	r3, [pc, #204]	; (800b9b4 <UART_SetConfig+0x7c4>)
 800b8e8:	2400      	movs	r4, #0
 800b8ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b8ec:	6852      	ldr	r2, [r2, #4]
 800b8ee:	0852      	lsrs	r2, r2, #1
 800b8f0:	633a      	str	r2, [r7, #48]	; 0x30
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	637a      	str	r2, [r7, #52]	; 0x34
 800b8f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8fa:	18c0      	adds	r0, r0, r3
 800b8fc:	4161      	adcs	r1, r4
 800b8fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	62bb      	str	r3, [r7, #40]	; 0x28
 800b904:	2300      	movs	r3, #0
 800b906:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90c:	f7f4 fde8 	bl	80004e0 <__aeabi_uldivmod>
 800b910:	0003      	movs	r3, r0
 800b912:	000c      	movs	r4, r1
 800b914:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800b916:	e128      	b.n	800bb6a <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800b918:	f7fe fb42 	bl	8009fa0 <HAL_RCC_GetSysClockFreq>
 800b91c:	0003      	movs	r3, r0
 800b91e:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b920:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b922:	623b      	str	r3, [r7, #32]
 800b924:	2300      	movs	r3, #0
 800b926:	627b      	str	r3, [r7, #36]	; 0x24
 800b928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d100      	bne.n	800b932 <UART_SetConfig+0x742>
 800b930:	e071      	b.n	800ba16 <UART_SetConfig+0x826>
 800b932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b936:	2b01      	cmp	r3, #1
 800b938:	d100      	bne.n	800b93c <UART_SetConfig+0x74c>
 800b93a:	e069      	b.n	800ba10 <UART_SetConfig+0x820>
 800b93c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b940:	2b02      	cmp	r3, #2
 800b942:	d100      	bne.n	800b946 <UART_SetConfig+0x756>
 800b944:	e061      	b.n	800ba0a <UART_SetConfig+0x81a>
 800b946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d05a      	beq.n	800ba04 <UART_SetConfig+0x814>
 800b94e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b952:	2b04      	cmp	r3, #4
 800b954:	d053      	beq.n	800b9fe <UART_SetConfig+0x80e>
 800b956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95a:	2b05      	cmp	r3, #5
 800b95c:	d04c      	beq.n	800b9f8 <UART_SetConfig+0x808>
 800b95e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	2b06      	cmp	r3, #6
 800b964:	d045      	beq.n	800b9f2 <UART_SetConfig+0x802>
 800b966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96a:	2b07      	cmp	r3, #7
 800b96c:	d03e      	beq.n	800b9ec <UART_SetConfig+0x7fc>
 800b96e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b972:	2b08      	cmp	r3, #8
 800b974:	d037      	beq.n	800b9e6 <UART_SetConfig+0x7f6>
 800b976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	2b09      	cmp	r3, #9
 800b97c:	d030      	beq.n	800b9e0 <UART_SetConfig+0x7f0>
 800b97e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b982:	2b0a      	cmp	r3, #10
 800b984:	d00a      	beq.n	800b99c <UART_SetConfig+0x7ac>
 800b986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98a:	2b0b      	cmp	r3, #11
 800b98c:	d103      	bne.n	800b996 <UART_SetConfig+0x7a6>
 800b98e:	2380      	movs	r3, #128	; 0x80
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	2400      	movs	r4, #0
 800b994:	e041      	b.n	800ba1a <UART_SetConfig+0x82a>
 800b996:	2301      	movs	r3, #1
 800b998:	2400      	movs	r4, #0
 800b99a:	e03e      	b.n	800ba1a <UART_SetConfig+0x82a>
 800b99c:	2380      	movs	r3, #128	; 0x80
 800b99e:	2400      	movs	r4, #0
 800b9a0:	e03b      	b.n	800ba1a <UART_SetConfig+0x82a>
 800b9a2:	46c0      	nop			; (mov r8, r8)
 800b9a4:	00000aaa 	.word	0x00000aaa
 800b9a8:	00000ccc 	.word	0x00000ccc
 800b9ac:	00001555 	.word	0x00001555
 800b9b0:	00f42400 	.word	0x00f42400
 800b9b4:	f4240000 	.word	0xf4240000
 800b9b8:	01e84800 	.word	0x01e84800
 800b9bc:	03d09000 	.word	0x03d09000
 800b9c0:	07a12000 	.word	0x07a12000
 800b9c4:	0f424000 	.word	0x0f424000
 800b9c8:	14585500 	.word	0x14585500
 800b9cc:	186a0000 	.word	0x186a0000
 800b9d0:	1e848000 	.word	0x1e848000
 800b9d4:	28b0aa00 	.word	0x28b0aa00
 800b9d8:	3d090000 	.word	0x3d090000
 800b9dc:	7a120000 	.word	0x7a120000
 800b9e0:	2340      	movs	r3, #64	; 0x40
 800b9e2:	2400      	movs	r4, #0
 800b9e4:	e019      	b.n	800ba1a <UART_SetConfig+0x82a>
 800b9e6:	2320      	movs	r3, #32
 800b9e8:	2400      	movs	r4, #0
 800b9ea:	e016      	b.n	800ba1a <UART_SetConfig+0x82a>
 800b9ec:	2310      	movs	r3, #16
 800b9ee:	2400      	movs	r4, #0
 800b9f0:	e013      	b.n	800ba1a <UART_SetConfig+0x82a>
 800b9f2:	230c      	movs	r3, #12
 800b9f4:	2400      	movs	r4, #0
 800b9f6:	e010      	b.n	800ba1a <UART_SetConfig+0x82a>
 800b9f8:	230a      	movs	r3, #10
 800b9fa:	2400      	movs	r4, #0
 800b9fc:	e00d      	b.n	800ba1a <UART_SetConfig+0x82a>
 800b9fe:	2308      	movs	r3, #8
 800ba00:	2400      	movs	r4, #0
 800ba02:	e00a      	b.n	800ba1a <UART_SetConfig+0x82a>
 800ba04:	2306      	movs	r3, #6
 800ba06:	2400      	movs	r4, #0
 800ba08:	e007      	b.n	800ba1a <UART_SetConfig+0x82a>
 800ba0a:	2304      	movs	r3, #4
 800ba0c:	2400      	movs	r4, #0
 800ba0e:	e004      	b.n	800ba1a <UART_SetConfig+0x82a>
 800ba10:	2302      	movs	r3, #2
 800ba12:	2400      	movs	r4, #0
 800ba14:	e001      	b.n	800ba1a <UART_SetConfig+0x82a>
 800ba16:	2301      	movs	r3, #1
 800ba18:	2400      	movs	r4, #0
 800ba1a:	001a      	movs	r2, r3
 800ba1c:	0023      	movs	r3, r4
 800ba1e:	6a38      	ldr	r0, [r7, #32]
 800ba20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba22:	f7f4 fd5d 	bl	80004e0 <__aeabi_uldivmod>
 800ba26:	0003      	movs	r3, r0
 800ba28:	000c      	movs	r4, r1
 800ba2a:	0e1a      	lsrs	r2, r3, #24
 800ba2c:	0221      	lsls	r1, r4, #8
 800ba2e:	6579      	str	r1, [r7, #84]	; 0x54
 800ba30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba32:	4311      	orrs	r1, r2
 800ba34:	6579      	str	r1, [r7, #84]	; 0x54
 800ba36:	021b      	lsls	r3, r3, #8
 800ba38:	653b      	str	r3, [r7, #80]	; 0x50
 800ba3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	085b      	lsrs	r3, r3, #1
 800ba40:	61bb      	str	r3, [r7, #24]
 800ba42:	2300      	movs	r3, #0
 800ba44:	61fb      	str	r3, [r7, #28]
 800ba46:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	69fc      	ldr	r4, [r7, #28]
 800ba4e:	18c0      	adds	r0, r0, r3
 800ba50:	4161      	adcs	r1, r4
 800ba52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	613b      	str	r3, [r7, #16]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	617b      	str	r3, [r7, #20]
 800ba5c:	693a      	ldr	r2, [r7, #16]
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f7f4 fd3e 	bl	80004e0 <__aeabi_uldivmod>
 800ba64:	0003      	movs	r3, r0
 800ba66:	000c      	movs	r4, r1
 800ba68:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800ba6a:	e07e      	b.n	800bb6a <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d058      	beq.n	800bb26 <UART_SetConfig+0x936>
 800ba74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d050      	beq.n	800bb1e <UART_SetConfig+0x92e>
 800ba7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d048      	beq.n	800bb16 <UART_SetConfig+0x926>
 800ba84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d041      	beq.n	800bb10 <UART_SetConfig+0x920>
 800ba8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	2b04      	cmp	r3, #4
 800ba92:	d039      	beq.n	800bb08 <UART_SetConfig+0x918>
 800ba94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	2b05      	cmp	r3, #5
 800ba9a:	d032      	beq.n	800bb02 <UART_SetConfig+0x912>
 800ba9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa0:	2b06      	cmp	r3, #6
 800baa2:	d02b      	beq.n	800bafc <UART_SetConfig+0x90c>
 800baa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	2b07      	cmp	r3, #7
 800baaa:	d023      	beq.n	800baf4 <UART_SetConfig+0x904>
 800baac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	2b08      	cmp	r3, #8
 800bab2:	d01b      	beq.n	800baec <UART_SetConfig+0x8fc>
 800bab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	2b09      	cmp	r3, #9
 800baba:	d013      	beq.n	800bae4 <UART_SetConfig+0x8f4>
 800babc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	2b0a      	cmp	r3, #10
 800bac2:	d00b      	beq.n	800badc <UART_SetConfig+0x8ec>
 800bac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	2b0b      	cmp	r3, #11
 800baca:	d103      	bne.n	800bad4 <UART_SetConfig+0x8e4>
 800bacc:	2380      	movs	r3, #128	; 0x80
 800bace:	021b      	lsls	r3, r3, #8
 800bad0:	2400      	movs	r4, #0
 800bad2:	e02b      	b.n	800bb2c <UART_SetConfig+0x93c>
 800bad4:	2380      	movs	r3, #128	; 0x80
 800bad6:	041b      	lsls	r3, r3, #16
 800bad8:	2400      	movs	r4, #0
 800bada:	e027      	b.n	800bb2c <UART_SetConfig+0x93c>
 800badc:	2380      	movs	r3, #128	; 0x80
 800bade:	025b      	lsls	r3, r3, #9
 800bae0:	2400      	movs	r4, #0
 800bae2:	e023      	b.n	800bb2c <UART_SetConfig+0x93c>
 800bae4:	2380      	movs	r3, #128	; 0x80
 800bae6:	029b      	lsls	r3, r3, #10
 800bae8:	2400      	movs	r4, #0
 800baea:	e01f      	b.n	800bb2c <UART_SetConfig+0x93c>
 800baec:	2380      	movs	r3, #128	; 0x80
 800baee:	02db      	lsls	r3, r3, #11
 800baf0:	2400      	movs	r4, #0
 800baf2:	e01b      	b.n	800bb2c <UART_SetConfig+0x93c>
 800baf4:	2380      	movs	r3, #128	; 0x80
 800baf6:	031b      	lsls	r3, r3, #12
 800baf8:	2400      	movs	r4, #0
 800bafa:	e017      	b.n	800bb2c <UART_SetConfig+0x93c>
 800bafc:	4bb7      	ldr	r3, [pc, #732]	; (800bddc <UART_SetConfig+0xbec>)
 800bafe:	2400      	movs	r4, #0
 800bb00:	e014      	b.n	800bb2c <UART_SetConfig+0x93c>
 800bb02:	4bb7      	ldr	r3, [pc, #732]	; (800bde0 <UART_SetConfig+0xbf0>)
 800bb04:	2400      	movs	r4, #0
 800bb06:	e011      	b.n	800bb2c <UART_SetConfig+0x93c>
 800bb08:	2380      	movs	r3, #128	; 0x80
 800bb0a:	035b      	lsls	r3, r3, #13
 800bb0c:	2400      	movs	r4, #0
 800bb0e:	e00d      	b.n	800bb2c <UART_SetConfig+0x93c>
 800bb10:	4bb4      	ldr	r3, [pc, #720]	; (800bde4 <UART_SetConfig+0xbf4>)
 800bb12:	2400      	movs	r4, #0
 800bb14:	e00a      	b.n	800bb2c <UART_SetConfig+0x93c>
 800bb16:	2380      	movs	r3, #128	; 0x80
 800bb18:	039b      	lsls	r3, r3, #14
 800bb1a:	2400      	movs	r4, #0
 800bb1c:	e006      	b.n	800bb2c <UART_SetConfig+0x93c>
 800bb1e:	2380      	movs	r3, #128	; 0x80
 800bb20:	03db      	lsls	r3, r3, #15
 800bb22:	2400      	movs	r4, #0
 800bb24:	e002      	b.n	800bb2c <UART_SetConfig+0x93c>
 800bb26:	2380      	movs	r3, #128	; 0x80
 800bb28:	041b      	lsls	r3, r3, #16
 800bb2a:	2400      	movs	r4, #0
 800bb2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb2e:	6852      	ldr	r2, [r2, #4]
 800bb30:	0852      	lsrs	r2, r2, #1
 800bb32:	60ba      	str	r2, [r7, #8]
 800bb34:	2200      	movs	r2, #0
 800bb36:	60fa      	str	r2, [r7, #12]
 800bb38:	68b8      	ldr	r0, [r7, #8]
 800bb3a:	68f9      	ldr	r1, [r7, #12]
 800bb3c:	18c0      	adds	r0, r0, r3
 800bb3e:	4161      	adcs	r1, r4
 800bb40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	603b      	str	r3, [r7, #0]
 800bb46:	2300      	movs	r3, #0
 800bb48:	607b      	str	r3, [r7, #4]
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f7f4 fcc7 	bl	80004e0 <__aeabi_uldivmod>
 800bb52:	0003      	movs	r3, r0
 800bb54:	000c      	movs	r4, r1
 800bb56:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800bb58:	e007      	b.n	800bb6a <UART_SetConfig+0x97a>
          default:
            ret = HAL_ERROR;
 800bb5a:	231b      	movs	r3, #27
 800bb5c:	2258      	movs	r2, #88	; 0x58
 800bb5e:	4694      	mov	ip, r2
 800bb60:	44bc      	add	ip, r7
 800bb62:	4463      	add	r3, ip
 800bb64:	2201      	movs	r2, #1
 800bb66:	701a      	strb	r2, [r3, #0]
            break;
 800bb68:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb6c:	4a9e      	ldr	r2, [pc, #632]	; (800bde8 <UART_SetConfig+0xbf8>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d909      	bls.n	800bb86 <UART_SetConfig+0x996>
 800bb72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb74:	4a9d      	ldr	r2, [pc, #628]	; (800bdec <UART_SetConfig+0xbfc>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d805      	bhi.n	800bb86 <UART_SetConfig+0x996>
        {
          huart->Instance->BRR = usartdiv;
 800bb7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bb80:	60da      	str	r2, [r3, #12]
 800bb82:	f000 fbc3 	bl	800c30c <UART_SetConfig+0x111c>
        }
        else
        {
          ret = HAL_ERROR;
 800bb86:	231b      	movs	r3, #27
 800bb88:	2258      	movs	r2, #88	; 0x58
 800bb8a:	4694      	mov	ip, r2
 800bb8c:	44bc      	add	ip, r7
 800bb8e:	4463      	add	r3, ip
 800bb90:	2201      	movs	r2, #1
 800bb92:	701a      	strb	r2, [r3, #0]
 800bb94:	f000 fbba 	bl	800c30c <UART_SetConfig+0x111c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb9a:	69da      	ldr	r2, [r3, #28]
 800bb9c:	2380      	movs	r3, #128	; 0x80
 800bb9e:	021b      	lsls	r3, r3, #8
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d000      	beq.n	800bba6 <UART_SetConfig+0x9b6>
 800bba4:	e1e6      	b.n	800bf74 <UART_SetConfig+0xd84>
  {
    switch (clocksource)
 800bba6:	2323      	movs	r3, #35	; 0x23
 800bba8:	2258      	movs	r2, #88	; 0x58
 800bbaa:	4694      	mov	ip, r2
 800bbac:	44bc      	add	ip, r7
 800bbae:	4463      	add	r3, ip
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d100      	bne.n	800bbb8 <UART_SetConfig+0x9c8>
 800bbb6:	e06c      	b.n	800bc92 <UART_SetConfig+0xaa2>
 800bbb8:	dc02      	bgt.n	800bbc0 <UART_SetConfig+0x9d0>
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d007      	beq.n	800bbce <UART_SetConfig+0x9de>
 800bbbe:	e1a5      	b.n	800bf0c <UART_SetConfig+0xd1c>
 800bbc0:	2b04      	cmp	r3, #4
 800bbc2:	d100      	bne.n	800bbc6 <UART_SetConfig+0x9d6>
 800bbc4:	e0bc      	b.n	800bd40 <UART_SetConfig+0xb50>
 800bbc6:	2b08      	cmp	r3, #8
 800bbc8:	d100      	bne.n	800bbcc <UART_SetConfig+0x9dc>
 800bbca:	e13e      	b.n	800be4a <UART_SetConfig+0xc5a>
 800bbcc:	e19e      	b.n	800bf0c <UART_SetConfig+0xd1c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbce:	f7fe fa73 	bl	800a0b8 <HAL_RCC_GetPCLK1Freq>
 800bbd2:	0003      	movs	r3, r0
 800bbd4:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d044      	beq.n	800bc68 <UART_SetConfig+0xa78>
 800bbde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d03e      	beq.n	800bc64 <UART_SetConfig+0xa74>
 800bbe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d038      	beq.n	800bc60 <UART_SetConfig+0xa70>
 800bbee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d032      	beq.n	800bc5c <UART_SetConfig+0xa6c>
 800bbf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfa:	2b04      	cmp	r3, #4
 800bbfc:	d02c      	beq.n	800bc58 <UART_SetConfig+0xa68>
 800bbfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc02:	2b05      	cmp	r3, #5
 800bc04:	d026      	beq.n	800bc54 <UART_SetConfig+0xa64>
 800bc06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	2b06      	cmp	r3, #6
 800bc0c:	d020      	beq.n	800bc50 <UART_SetConfig+0xa60>
 800bc0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc12:	2b07      	cmp	r3, #7
 800bc14:	d01a      	beq.n	800bc4c <UART_SetConfig+0xa5c>
 800bc16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1a:	2b08      	cmp	r3, #8
 800bc1c:	d014      	beq.n	800bc48 <UART_SetConfig+0xa58>
 800bc1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc22:	2b09      	cmp	r3, #9
 800bc24:	d00e      	beq.n	800bc44 <UART_SetConfig+0xa54>
 800bc26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	2b0a      	cmp	r3, #10
 800bc2c:	d008      	beq.n	800bc40 <UART_SetConfig+0xa50>
 800bc2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc32:	2b0b      	cmp	r3, #11
 800bc34:	d102      	bne.n	800bc3c <UART_SetConfig+0xa4c>
 800bc36:	2380      	movs	r3, #128	; 0x80
 800bc38:	005b      	lsls	r3, r3, #1
 800bc3a:	e016      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e014      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc40:	2380      	movs	r3, #128	; 0x80
 800bc42:	e012      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc44:	2340      	movs	r3, #64	; 0x40
 800bc46:	e010      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc48:	2320      	movs	r3, #32
 800bc4a:	e00e      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc4c:	2310      	movs	r3, #16
 800bc4e:	e00c      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc50:	230c      	movs	r3, #12
 800bc52:	e00a      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc54:	230a      	movs	r3, #10
 800bc56:	e008      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc58:	2308      	movs	r3, #8
 800bc5a:	e006      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc5c:	2306      	movs	r3, #6
 800bc5e:	e004      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc60:	2304      	movs	r3, #4
 800bc62:	e002      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc64:	2302      	movs	r3, #2
 800bc66:	e000      	b.n	800bc6a <UART_SetConfig+0xa7a>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	0019      	movs	r1, r3
 800bc6c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800bc6e:	f7f4 fa49 	bl	8000104 <__udivsi3>
 800bc72:	0003      	movs	r3, r0
 800bc74:	005a      	lsls	r2, r3, #1
 800bc76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	085b      	lsrs	r3, r3, #1
 800bc7c:	18d2      	adds	r2, r2, r3
 800bc7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	0019      	movs	r1, r3
 800bc84:	0010      	movs	r0, r2
 800bc86:	f7f4 fa3d 	bl	8000104 <__udivsi3>
 800bc8a:	0003      	movs	r3, r0
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800bc90:	e144      	b.n	800bf1c <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d043      	beq.n	800bd22 <UART_SetConfig+0xb32>
 800bc9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d03d      	beq.n	800bd1e <UART_SetConfig+0xb2e>
 800bca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d037      	beq.n	800bd1a <UART_SetConfig+0xb2a>
 800bcaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d031      	beq.n	800bd16 <UART_SetConfig+0xb26>
 800bcb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d02b      	beq.n	800bd12 <UART_SetConfig+0xb22>
 800bcba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbe:	2b05      	cmp	r3, #5
 800bcc0:	d025      	beq.n	800bd0e <UART_SetConfig+0xb1e>
 800bcc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc6:	2b06      	cmp	r3, #6
 800bcc8:	d01f      	beq.n	800bd0a <UART_SetConfig+0xb1a>
 800bcca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcce:	2b07      	cmp	r3, #7
 800bcd0:	d019      	beq.n	800bd06 <UART_SetConfig+0xb16>
 800bcd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	2b08      	cmp	r3, #8
 800bcd8:	d013      	beq.n	800bd02 <UART_SetConfig+0xb12>
 800bcda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	2b09      	cmp	r3, #9
 800bce0:	d00d      	beq.n	800bcfe <UART_SetConfig+0xb0e>
 800bce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	2b0a      	cmp	r3, #10
 800bce8:	d007      	beq.n	800bcfa <UART_SetConfig+0xb0a>
 800bcea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	2b0b      	cmp	r3, #11
 800bcf0:	d101      	bne.n	800bcf6 <UART_SetConfig+0xb06>
 800bcf2:	4b3f      	ldr	r3, [pc, #252]	; (800bdf0 <UART_SetConfig+0xc00>)
 800bcf4:	e016      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bcf6:	4b3f      	ldr	r3, [pc, #252]	; (800bdf4 <UART_SetConfig+0xc04>)
 800bcf8:	e014      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bcfa:	4b3f      	ldr	r3, [pc, #252]	; (800bdf8 <UART_SetConfig+0xc08>)
 800bcfc:	e012      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bcfe:	4b3f      	ldr	r3, [pc, #252]	; (800bdfc <UART_SetConfig+0xc0c>)
 800bd00:	e010      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bd02:	4b3f      	ldr	r3, [pc, #252]	; (800be00 <UART_SetConfig+0xc10>)
 800bd04:	e00e      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bd06:	4b3f      	ldr	r3, [pc, #252]	; (800be04 <UART_SetConfig+0xc14>)
 800bd08:	e00c      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bd0a:	4b3f      	ldr	r3, [pc, #252]	; (800be08 <UART_SetConfig+0xc18>)
 800bd0c:	e00a      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bd0e:	4b3f      	ldr	r3, [pc, #252]	; (800be0c <UART_SetConfig+0xc1c>)
 800bd10:	e008      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bd12:	4b3f      	ldr	r3, [pc, #252]	; (800be10 <UART_SetConfig+0xc20>)
 800bd14:	e006      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bd16:	4b3f      	ldr	r3, [pc, #252]	; (800be14 <UART_SetConfig+0xc24>)
 800bd18:	e004      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bd1a:	4b3f      	ldr	r3, [pc, #252]	; (800be18 <UART_SetConfig+0xc28>)
 800bd1c:	e002      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bd1e:	4b3f      	ldr	r3, [pc, #252]	; (800be1c <UART_SetConfig+0xc2c>)
 800bd20:	e000      	b.n	800bd24 <UART_SetConfig+0xb34>
 800bd22:	4b34      	ldr	r3, [pc, #208]	; (800bdf4 <UART_SetConfig+0xc04>)
 800bd24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd26:	6852      	ldr	r2, [r2, #4]
 800bd28:	0852      	lsrs	r2, r2, #1
 800bd2a:	189a      	adds	r2, r3, r2
 800bd2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	0019      	movs	r1, r3
 800bd32:	0010      	movs	r0, r2
 800bd34:	f7f4 f9e6 	bl	8000104 <__udivsi3>
 800bd38:	0003      	movs	r3, r0
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800bd3e:	e0ed      	b.n	800bf1c <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd40:	f7fe f92e 	bl	8009fa0 <HAL_RCC_GetSysClockFreq>
 800bd44:	0003      	movs	r3, r0
 800bd46:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d100      	bne.n	800bd52 <UART_SetConfig+0xb62>
 800bd50:	e066      	b.n	800be20 <UART_SetConfig+0xc30>
 800bd52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d03e      	beq.n	800bdd8 <UART_SetConfig+0xbe8>
 800bd5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d038      	beq.n	800bdd4 <UART_SetConfig+0xbe4>
 800bd62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	d032      	beq.n	800bdd0 <UART_SetConfig+0xbe0>
 800bd6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d02c      	beq.n	800bdcc <UART_SetConfig+0xbdc>
 800bd72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd76:	2b05      	cmp	r3, #5
 800bd78:	d026      	beq.n	800bdc8 <UART_SetConfig+0xbd8>
 800bd7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7e:	2b06      	cmp	r3, #6
 800bd80:	d020      	beq.n	800bdc4 <UART_SetConfig+0xbd4>
 800bd82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd86:	2b07      	cmp	r3, #7
 800bd88:	d01a      	beq.n	800bdc0 <UART_SetConfig+0xbd0>
 800bd8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8e:	2b08      	cmp	r3, #8
 800bd90:	d014      	beq.n	800bdbc <UART_SetConfig+0xbcc>
 800bd92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd96:	2b09      	cmp	r3, #9
 800bd98:	d00e      	beq.n	800bdb8 <UART_SetConfig+0xbc8>
 800bd9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9e:	2b0a      	cmp	r3, #10
 800bda0:	d008      	beq.n	800bdb4 <UART_SetConfig+0xbc4>
 800bda2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda6:	2b0b      	cmp	r3, #11
 800bda8:	d102      	bne.n	800bdb0 <UART_SetConfig+0xbc0>
 800bdaa:	2380      	movs	r3, #128	; 0x80
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	e038      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e036      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdb4:	2380      	movs	r3, #128	; 0x80
 800bdb6:	e034      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdb8:	2340      	movs	r3, #64	; 0x40
 800bdba:	e032      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdbc:	2320      	movs	r3, #32
 800bdbe:	e030      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdc0:	2310      	movs	r3, #16
 800bdc2:	e02e      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdc4:	230c      	movs	r3, #12
 800bdc6:	e02c      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdc8:	230a      	movs	r3, #10
 800bdca:	e02a      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdcc:	2308      	movs	r3, #8
 800bdce:	e028      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdd0:	2306      	movs	r3, #6
 800bdd2:	e026      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdd4:	2304      	movs	r3, #4
 800bdd6:	e024      	b.n	800be22 <UART_SetConfig+0xc32>
 800bdd8:	2302      	movs	r3, #2
 800bdda:	e022      	b.n	800be22 <UART_SetConfig+0xc32>
 800bddc:	000aaa00 	.word	0x000aaa00
 800bde0:	000ccc00 	.word	0x000ccc00
 800bde4:	00155500 	.word	0x00155500
 800bde8:	000002ff 	.word	0x000002ff
 800bdec:	000fffff 	.word	0x000fffff
 800bdf0:	0001e848 	.word	0x0001e848
 800bdf4:	01e84800 	.word	0x01e84800
 800bdf8:	0003d090 	.word	0x0003d090
 800bdfc:	0007a120 	.word	0x0007a120
 800be00:	000f4240 	.word	0x000f4240
 800be04:	001e8480 	.word	0x001e8480
 800be08:	0028b0aa 	.word	0x0028b0aa
 800be0c:	0030d400 	.word	0x0030d400
 800be10:	003d0900 	.word	0x003d0900
 800be14:	00516154 	.word	0x00516154
 800be18:	007a1200 	.word	0x007a1200
 800be1c:	00f42400 	.word	0x00f42400
 800be20:	2301      	movs	r3, #1
 800be22:	0019      	movs	r1, r3
 800be24:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800be26:	f7f4 f96d 	bl	8000104 <__udivsi3>
 800be2a:	0003      	movs	r3, r0
 800be2c:	005a      	lsls	r2, r3, #1
 800be2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	085b      	lsrs	r3, r3, #1
 800be34:	18d2      	adds	r2, r2, r3
 800be36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	0019      	movs	r1, r3
 800be3c:	0010      	movs	r0, r2
 800be3e:	f7f4 f961 	bl	8000104 <__udivsi3>
 800be42:	0003      	movs	r3, r0
 800be44:	b29b      	uxth	r3, r3
 800be46:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800be48:	e068      	b.n	800bf1c <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d04c      	beq.n	800beec <UART_SetConfig+0xcfc>
 800be52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be56:	2b01      	cmp	r3, #1
 800be58:	d045      	beq.n	800bee6 <UART_SetConfig+0xcf6>
 800be5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d03e      	beq.n	800bee0 <UART_SetConfig+0xcf0>
 800be62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be66:	2b03      	cmp	r3, #3
 800be68:	d038      	beq.n	800bedc <UART_SetConfig+0xcec>
 800be6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6e:	2b04      	cmp	r3, #4
 800be70:	d031      	beq.n	800bed6 <UART_SetConfig+0xce6>
 800be72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be76:	2b05      	cmp	r3, #5
 800be78:	d02b      	beq.n	800bed2 <UART_SetConfig+0xce2>
 800be7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7e:	2b06      	cmp	r3, #6
 800be80:	d025      	beq.n	800bece <UART_SetConfig+0xcde>
 800be82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	2b07      	cmp	r3, #7
 800be88:	d01e      	beq.n	800bec8 <UART_SetConfig+0xcd8>
 800be8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	2b08      	cmp	r3, #8
 800be90:	d017      	beq.n	800bec2 <UART_SetConfig+0xcd2>
 800be92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	2b09      	cmp	r3, #9
 800be98:	d010      	beq.n	800bebc <UART_SetConfig+0xccc>
 800be9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9e:	2b0a      	cmp	r3, #10
 800bea0:	d009      	beq.n	800beb6 <UART_SetConfig+0xcc6>
 800bea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	2b0b      	cmp	r3, #11
 800bea8:	d102      	bne.n	800beb0 <UART_SetConfig+0xcc0>
 800beaa:	2380      	movs	r3, #128	; 0x80
 800beac:	005b      	lsls	r3, r3, #1
 800beae:	e01f      	b.n	800bef0 <UART_SetConfig+0xd00>
 800beb0:	2380      	movs	r3, #128	; 0x80
 800beb2:	025b      	lsls	r3, r3, #9
 800beb4:	e01c      	b.n	800bef0 <UART_SetConfig+0xd00>
 800beb6:	2380      	movs	r3, #128	; 0x80
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	e019      	b.n	800bef0 <UART_SetConfig+0xd00>
 800bebc:	2380      	movs	r3, #128	; 0x80
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	e016      	b.n	800bef0 <UART_SetConfig+0xd00>
 800bec2:	2380      	movs	r3, #128	; 0x80
 800bec4:	011b      	lsls	r3, r3, #4
 800bec6:	e013      	b.n	800bef0 <UART_SetConfig+0xd00>
 800bec8:	2380      	movs	r3, #128	; 0x80
 800beca:	015b      	lsls	r3, r3, #5
 800becc:	e010      	b.n	800bef0 <UART_SetConfig+0xd00>
 800bece:	4bb7      	ldr	r3, [pc, #732]	; (800c1ac <UART_SetConfig+0xfbc>)
 800bed0:	e00e      	b.n	800bef0 <UART_SetConfig+0xd00>
 800bed2:	4bb7      	ldr	r3, [pc, #732]	; (800c1b0 <UART_SetConfig+0xfc0>)
 800bed4:	e00c      	b.n	800bef0 <UART_SetConfig+0xd00>
 800bed6:	2380      	movs	r3, #128	; 0x80
 800bed8:	019b      	lsls	r3, r3, #6
 800beda:	e009      	b.n	800bef0 <UART_SetConfig+0xd00>
 800bedc:	4bb5      	ldr	r3, [pc, #724]	; (800c1b4 <UART_SetConfig+0xfc4>)
 800bede:	e007      	b.n	800bef0 <UART_SetConfig+0xd00>
 800bee0:	2380      	movs	r3, #128	; 0x80
 800bee2:	01db      	lsls	r3, r3, #7
 800bee4:	e004      	b.n	800bef0 <UART_SetConfig+0xd00>
 800bee6:	2380      	movs	r3, #128	; 0x80
 800bee8:	021b      	lsls	r3, r3, #8
 800beea:	e001      	b.n	800bef0 <UART_SetConfig+0xd00>
 800beec:	2380      	movs	r3, #128	; 0x80
 800beee:	025b      	lsls	r3, r3, #9
 800bef0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bef2:	6852      	ldr	r2, [r2, #4]
 800bef4:	0852      	lsrs	r2, r2, #1
 800bef6:	189a      	adds	r2, r3, r2
 800bef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	0019      	movs	r1, r3
 800befe:	0010      	movs	r0, r2
 800bf00:	f7f4 f900 	bl	8000104 <__udivsi3>
 800bf04:	0003      	movs	r3, r0
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800bf0a:	e007      	b.n	800bf1c <UART_SetConfig+0xd2c>
      default:
        ret = HAL_ERROR;
 800bf0c:	231b      	movs	r3, #27
 800bf0e:	2258      	movs	r2, #88	; 0x58
 800bf10:	4694      	mov	ip, r2
 800bf12:	44bc      	add	ip, r7
 800bf14:	4463      	add	r3, ip
 800bf16:	2201      	movs	r2, #1
 800bf18:	701a      	strb	r2, [r3, #0]
        break;
 800bf1a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf1e:	2b0f      	cmp	r3, #15
 800bf20:	d920      	bls.n	800bf64 <UART_SetConfig+0xd74>
 800bf22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf24:	4aa4      	ldr	r2, [pc, #656]	; (800c1b8 <UART_SetConfig+0xfc8>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d81c      	bhi.n	800bf64 <UART_SetConfig+0xd74>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	200e      	movs	r0, #14
 800bf30:	2458      	movs	r4, #88	; 0x58
 800bf32:	193b      	adds	r3, r7, r4
 800bf34:	181b      	adds	r3, r3, r0
 800bf36:	210f      	movs	r1, #15
 800bf38:	438a      	bics	r2, r1
 800bf3a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf3e:	085b      	lsrs	r3, r3, #1
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	2207      	movs	r2, #7
 800bf44:	4013      	ands	r3, r2
 800bf46:	b299      	uxth	r1, r3
 800bf48:	193b      	adds	r3, r7, r4
 800bf4a:	181b      	adds	r3, r3, r0
 800bf4c:	193a      	adds	r2, r7, r4
 800bf4e:	1812      	adds	r2, r2, r0
 800bf50:	8812      	ldrh	r2, [r2, #0]
 800bf52:	430a      	orrs	r2, r1
 800bf54:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800bf56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	193a      	adds	r2, r7, r4
 800bf5c:	1812      	adds	r2, r2, r0
 800bf5e:	8812      	ldrh	r2, [r2, #0]
 800bf60:	60da      	str	r2, [r3, #12]
 800bf62:	e1d3      	b.n	800c30c <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 800bf64:	231b      	movs	r3, #27
 800bf66:	2258      	movs	r2, #88	; 0x58
 800bf68:	4694      	mov	ip, r2
 800bf6a:	44bc      	add	ip, r7
 800bf6c:	4463      	add	r3, ip
 800bf6e:	2201      	movs	r2, #1
 800bf70:	701a      	strb	r2, [r3, #0]
 800bf72:	e1cb      	b.n	800c30c <UART_SetConfig+0x111c>
    }
  }
  else
  {
    switch (clocksource)
 800bf74:	2323      	movs	r3, #35	; 0x23
 800bf76:	2258      	movs	r2, #88	; 0x58
 800bf78:	4694      	mov	ip, r2
 800bf7a:	44bc      	add	ip, r7
 800bf7c:	4463      	add	r3, ip
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d100      	bne.n	800bf86 <UART_SetConfig+0xd96>
 800bf84:	e06c      	b.n	800c060 <UART_SetConfig+0xe70>
 800bf86:	dc02      	bgt.n	800bf8e <UART_SetConfig+0xd9e>
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d007      	beq.n	800bf9c <UART_SetConfig+0xdac>
 800bf8c:	e1a3      	b.n	800c2d6 <UART_SetConfig+0x10e6>
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d100      	bne.n	800bf94 <UART_SetConfig+0xda4>
 800bf92:	e0bc      	b.n	800c10e <UART_SetConfig+0xf1e>
 800bf94:	2b08      	cmp	r3, #8
 800bf96:	d100      	bne.n	800bf9a <UART_SetConfig+0xdaa>
 800bf98:	e13d      	b.n	800c216 <UART_SetConfig+0x1026>
 800bf9a:	e19c      	b.n	800c2d6 <UART_SetConfig+0x10e6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf9c:	f7fe f88c 	bl	800a0b8 <HAL_RCC_GetPCLK1Freq>
 800bfa0:	0003      	movs	r3, r0
 800bfa2:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d044      	beq.n	800c036 <UART_SetConfig+0xe46>
 800bfac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d03e      	beq.n	800c032 <UART_SetConfig+0xe42>
 800bfb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb8:	2b02      	cmp	r3, #2
 800bfba:	d038      	beq.n	800c02e <UART_SetConfig+0xe3e>
 800bfbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc0:	2b03      	cmp	r3, #3
 800bfc2:	d032      	beq.n	800c02a <UART_SetConfig+0xe3a>
 800bfc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	d02c      	beq.n	800c026 <UART_SetConfig+0xe36>
 800bfcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd0:	2b05      	cmp	r3, #5
 800bfd2:	d026      	beq.n	800c022 <UART_SetConfig+0xe32>
 800bfd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd8:	2b06      	cmp	r3, #6
 800bfda:	d020      	beq.n	800c01e <UART_SetConfig+0xe2e>
 800bfdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe0:	2b07      	cmp	r3, #7
 800bfe2:	d01a      	beq.n	800c01a <UART_SetConfig+0xe2a>
 800bfe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe8:	2b08      	cmp	r3, #8
 800bfea:	d014      	beq.n	800c016 <UART_SetConfig+0xe26>
 800bfec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff0:	2b09      	cmp	r3, #9
 800bff2:	d00e      	beq.n	800c012 <UART_SetConfig+0xe22>
 800bff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff8:	2b0a      	cmp	r3, #10
 800bffa:	d008      	beq.n	800c00e <UART_SetConfig+0xe1e>
 800bffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c000:	2b0b      	cmp	r3, #11
 800c002:	d102      	bne.n	800c00a <UART_SetConfig+0xe1a>
 800c004:	2380      	movs	r3, #128	; 0x80
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	e016      	b.n	800c038 <UART_SetConfig+0xe48>
 800c00a:	2301      	movs	r3, #1
 800c00c:	e014      	b.n	800c038 <UART_SetConfig+0xe48>
 800c00e:	2380      	movs	r3, #128	; 0x80
 800c010:	e012      	b.n	800c038 <UART_SetConfig+0xe48>
 800c012:	2340      	movs	r3, #64	; 0x40
 800c014:	e010      	b.n	800c038 <UART_SetConfig+0xe48>
 800c016:	2320      	movs	r3, #32
 800c018:	e00e      	b.n	800c038 <UART_SetConfig+0xe48>
 800c01a:	2310      	movs	r3, #16
 800c01c:	e00c      	b.n	800c038 <UART_SetConfig+0xe48>
 800c01e:	230c      	movs	r3, #12
 800c020:	e00a      	b.n	800c038 <UART_SetConfig+0xe48>
 800c022:	230a      	movs	r3, #10
 800c024:	e008      	b.n	800c038 <UART_SetConfig+0xe48>
 800c026:	2308      	movs	r3, #8
 800c028:	e006      	b.n	800c038 <UART_SetConfig+0xe48>
 800c02a:	2306      	movs	r3, #6
 800c02c:	e004      	b.n	800c038 <UART_SetConfig+0xe48>
 800c02e:	2304      	movs	r3, #4
 800c030:	e002      	b.n	800c038 <UART_SetConfig+0xe48>
 800c032:	2302      	movs	r3, #2
 800c034:	e000      	b.n	800c038 <UART_SetConfig+0xe48>
 800c036:	2301      	movs	r3, #1
 800c038:	0019      	movs	r1, r3
 800c03a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c03c:	f7f4 f862 	bl	8000104 <__udivsi3>
 800c040:	0003      	movs	r3, r0
 800c042:	001a      	movs	r2, r3
 800c044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	085b      	lsrs	r3, r3, #1
 800c04a:	18d2      	adds	r2, r2, r3
 800c04c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	0019      	movs	r1, r3
 800c052:	0010      	movs	r0, r2
 800c054:	f7f4 f856 	bl	8000104 <__udivsi3>
 800c058:	0003      	movs	r3, r0
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800c05e:	e142      	b.n	800c2e6 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	2b00      	cmp	r3, #0
 800c066:	d043      	beq.n	800c0f0 <UART_SetConfig+0xf00>
 800c068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d03d      	beq.n	800c0ec <UART_SetConfig+0xefc>
 800c070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	2b02      	cmp	r3, #2
 800c076:	d037      	beq.n	800c0e8 <UART_SetConfig+0xef8>
 800c078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	2b03      	cmp	r3, #3
 800c07e:	d031      	beq.n	800c0e4 <UART_SetConfig+0xef4>
 800c080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	2b04      	cmp	r3, #4
 800c086:	d02b      	beq.n	800c0e0 <UART_SetConfig+0xef0>
 800c088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	2b05      	cmp	r3, #5
 800c08e:	d025      	beq.n	800c0dc <UART_SetConfig+0xeec>
 800c090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c094:	2b06      	cmp	r3, #6
 800c096:	d01f      	beq.n	800c0d8 <UART_SetConfig+0xee8>
 800c098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09c:	2b07      	cmp	r3, #7
 800c09e:	d019      	beq.n	800c0d4 <UART_SetConfig+0xee4>
 800c0a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a4:	2b08      	cmp	r3, #8
 800c0a6:	d013      	beq.n	800c0d0 <UART_SetConfig+0xee0>
 800c0a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	2b09      	cmp	r3, #9
 800c0ae:	d00d      	beq.n	800c0cc <UART_SetConfig+0xedc>
 800c0b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b4:	2b0a      	cmp	r3, #10
 800c0b6:	d007      	beq.n	800c0c8 <UART_SetConfig+0xed8>
 800c0b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0bc:	2b0b      	cmp	r3, #11
 800c0be:	d101      	bne.n	800c0c4 <UART_SetConfig+0xed4>
 800c0c0:	4b3e      	ldr	r3, [pc, #248]	; (800c1bc <UART_SetConfig+0xfcc>)
 800c0c2:	e016      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0c4:	4b3e      	ldr	r3, [pc, #248]	; (800c1c0 <UART_SetConfig+0xfd0>)
 800c0c6:	e014      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0c8:	4b3e      	ldr	r3, [pc, #248]	; (800c1c4 <UART_SetConfig+0xfd4>)
 800c0ca:	e012      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0cc:	4b3e      	ldr	r3, [pc, #248]	; (800c1c8 <UART_SetConfig+0xfd8>)
 800c0ce:	e010      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0d0:	4b3e      	ldr	r3, [pc, #248]	; (800c1cc <UART_SetConfig+0xfdc>)
 800c0d2:	e00e      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0d4:	4b3e      	ldr	r3, [pc, #248]	; (800c1d0 <UART_SetConfig+0xfe0>)
 800c0d6:	e00c      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0d8:	4b3e      	ldr	r3, [pc, #248]	; (800c1d4 <UART_SetConfig+0xfe4>)
 800c0da:	e00a      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0dc:	4b3e      	ldr	r3, [pc, #248]	; (800c1d8 <UART_SetConfig+0xfe8>)
 800c0de:	e008      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0e0:	4b3e      	ldr	r3, [pc, #248]	; (800c1dc <UART_SetConfig+0xfec>)
 800c0e2:	e006      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0e4:	4b3e      	ldr	r3, [pc, #248]	; (800c1e0 <UART_SetConfig+0xff0>)
 800c0e6:	e004      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0e8:	4b3e      	ldr	r3, [pc, #248]	; (800c1e4 <UART_SetConfig+0xff4>)
 800c0ea:	e002      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0ec:	4b3e      	ldr	r3, [pc, #248]	; (800c1e8 <UART_SetConfig+0xff8>)
 800c0ee:	e000      	b.n	800c0f2 <UART_SetConfig+0xf02>
 800c0f0:	4b33      	ldr	r3, [pc, #204]	; (800c1c0 <UART_SetConfig+0xfd0>)
 800c0f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c0f4:	6852      	ldr	r2, [r2, #4]
 800c0f6:	0852      	lsrs	r2, r2, #1
 800c0f8:	189a      	adds	r2, r3, r2
 800c0fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	0019      	movs	r1, r3
 800c100:	0010      	movs	r0, r2
 800c102:	f7f3 ffff 	bl	8000104 <__udivsi3>
 800c106:	0003      	movs	r3, r0
 800c108:	b29b      	uxth	r3, r3
 800c10a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800c10c:	e0eb      	b.n	800c2e6 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c10e:	f7fd ff47 	bl	8009fa0 <HAL_RCC_GetSysClockFreq>
 800c112:	0003      	movs	r3, r0
 800c114:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d100      	bne.n	800c120 <UART_SetConfig+0xf30>
 800c11e:	e065      	b.n	800c1ec <UART_SetConfig+0xffc>
 800c120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c124:	2b01      	cmp	r3, #1
 800c126:	d03e      	beq.n	800c1a6 <UART_SetConfig+0xfb6>
 800c128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d038      	beq.n	800c1a2 <UART_SetConfig+0xfb2>
 800c130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c134:	2b03      	cmp	r3, #3
 800c136:	d032      	beq.n	800c19e <UART_SetConfig+0xfae>
 800c138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13c:	2b04      	cmp	r3, #4
 800c13e:	d02c      	beq.n	800c19a <UART_SetConfig+0xfaa>
 800c140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c144:	2b05      	cmp	r3, #5
 800c146:	d026      	beq.n	800c196 <UART_SetConfig+0xfa6>
 800c148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14c:	2b06      	cmp	r3, #6
 800c14e:	d020      	beq.n	800c192 <UART_SetConfig+0xfa2>
 800c150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c154:	2b07      	cmp	r3, #7
 800c156:	d01a      	beq.n	800c18e <UART_SetConfig+0xf9e>
 800c158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15c:	2b08      	cmp	r3, #8
 800c15e:	d014      	beq.n	800c18a <UART_SetConfig+0xf9a>
 800c160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c164:	2b09      	cmp	r3, #9
 800c166:	d00e      	beq.n	800c186 <UART_SetConfig+0xf96>
 800c168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16c:	2b0a      	cmp	r3, #10
 800c16e:	d008      	beq.n	800c182 <UART_SetConfig+0xf92>
 800c170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	2b0b      	cmp	r3, #11
 800c176:	d102      	bne.n	800c17e <UART_SetConfig+0xf8e>
 800c178:	2380      	movs	r3, #128	; 0x80
 800c17a:	005b      	lsls	r3, r3, #1
 800c17c:	e037      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c17e:	2301      	movs	r3, #1
 800c180:	e035      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c182:	2380      	movs	r3, #128	; 0x80
 800c184:	e033      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c186:	2340      	movs	r3, #64	; 0x40
 800c188:	e031      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c18a:	2320      	movs	r3, #32
 800c18c:	e02f      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c18e:	2310      	movs	r3, #16
 800c190:	e02d      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c192:	230c      	movs	r3, #12
 800c194:	e02b      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c196:	230a      	movs	r3, #10
 800c198:	e029      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c19a:	2308      	movs	r3, #8
 800c19c:	e027      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c19e:	2306      	movs	r3, #6
 800c1a0:	e025      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c1a2:	2304      	movs	r3, #4
 800c1a4:	e023      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c1a6:	2302      	movs	r3, #2
 800c1a8:	e021      	b.n	800c1ee <UART_SetConfig+0xffe>
 800c1aa:	46c0      	nop			; (mov r8, r8)
 800c1ac:	00001554 	.word	0x00001554
 800c1b0:	00001998 	.word	0x00001998
 800c1b4:	00002aaa 	.word	0x00002aaa
 800c1b8:	0000ffff 	.word	0x0000ffff
 800c1bc:	0000f424 	.word	0x0000f424
 800c1c0:	00f42400 	.word	0x00f42400
 800c1c4:	0001e848 	.word	0x0001e848
 800c1c8:	0003d090 	.word	0x0003d090
 800c1cc:	0007a120 	.word	0x0007a120
 800c1d0:	000f4240 	.word	0x000f4240
 800c1d4:	00145855 	.word	0x00145855
 800c1d8:	00186a00 	.word	0x00186a00
 800c1dc:	001e8480 	.word	0x001e8480
 800c1e0:	0028b0aa 	.word	0x0028b0aa
 800c1e4:	003d0900 	.word	0x003d0900
 800c1e8:	007a1200 	.word	0x007a1200
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	0019      	movs	r1, r3
 800c1f0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c1f2:	f7f3 ff87 	bl	8000104 <__udivsi3>
 800c1f6:	0003      	movs	r3, r0
 800c1f8:	001a      	movs	r2, r3
 800c1fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	085b      	lsrs	r3, r3, #1
 800c200:	18d2      	adds	r2, r2, r3
 800c202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	0019      	movs	r1, r3
 800c208:	0010      	movs	r0, r2
 800c20a:	f7f3 ff7b 	bl	8000104 <__udivsi3>
 800c20e:	0003      	movs	r3, r0
 800c210:	b29b      	uxth	r3, r3
 800c212:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800c214:	e067      	b.n	800c2e6 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d04b      	beq.n	800c2b6 <UART_SetConfig+0x10c6>
 800c21e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c222:	2b01      	cmp	r3, #1
 800c224:	d044      	beq.n	800c2b0 <UART_SetConfig+0x10c0>
 800c226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d03d      	beq.n	800c2aa <UART_SetConfig+0x10ba>
 800c22e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c232:	2b03      	cmp	r3, #3
 800c234:	d037      	beq.n	800c2a6 <UART_SetConfig+0x10b6>
 800c236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23a:	2b04      	cmp	r3, #4
 800c23c:	d030      	beq.n	800c2a0 <UART_SetConfig+0x10b0>
 800c23e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c242:	2b05      	cmp	r3, #5
 800c244:	d02a      	beq.n	800c29c <UART_SetConfig+0x10ac>
 800c246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24a:	2b06      	cmp	r3, #6
 800c24c:	d024      	beq.n	800c298 <UART_SetConfig+0x10a8>
 800c24e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c252:	2b07      	cmp	r3, #7
 800c254:	d01d      	beq.n	800c292 <UART_SetConfig+0x10a2>
 800c256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25a:	2b08      	cmp	r3, #8
 800c25c:	d016      	beq.n	800c28c <UART_SetConfig+0x109c>
 800c25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c262:	2b09      	cmp	r3, #9
 800c264:	d00f      	beq.n	800c286 <UART_SetConfig+0x1096>
 800c266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26a:	2b0a      	cmp	r3, #10
 800c26c:	d008      	beq.n	800c280 <UART_SetConfig+0x1090>
 800c26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c272:	2b0b      	cmp	r3, #11
 800c274:	d101      	bne.n	800c27a <UART_SetConfig+0x108a>
 800c276:	2380      	movs	r3, #128	; 0x80
 800c278:	e01f      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c27a:	2380      	movs	r3, #128	; 0x80
 800c27c:	021b      	lsls	r3, r3, #8
 800c27e:	e01c      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c280:	2380      	movs	r3, #128	; 0x80
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	e019      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c286:	2380      	movs	r3, #128	; 0x80
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	e016      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c28c:	2380      	movs	r3, #128	; 0x80
 800c28e:	00db      	lsls	r3, r3, #3
 800c290:	e013      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c292:	2380      	movs	r3, #128	; 0x80
 800c294:	011b      	lsls	r3, r3, #4
 800c296:	e010      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c298:	4b28      	ldr	r3, [pc, #160]	; (800c33c <UART_SetConfig+0x114c>)
 800c29a:	e00e      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c29c:	4b28      	ldr	r3, [pc, #160]	; (800c340 <UART_SetConfig+0x1150>)
 800c29e:	e00c      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c2a0:	2380      	movs	r3, #128	; 0x80
 800c2a2:	015b      	lsls	r3, r3, #5
 800c2a4:	e009      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c2a6:	4b27      	ldr	r3, [pc, #156]	; (800c344 <UART_SetConfig+0x1154>)
 800c2a8:	e007      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c2aa:	2380      	movs	r3, #128	; 0x80
 800c2ac:	019b      	lsls	r3, r3, #6
 800c2ae:	e004      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c2b0:	2380      	movs	r3, #128	; 0x80
 800c2b2:	01db      	lsls	r3, r3, #7
 800c2b4:	e001      	b.n	800c2ba <UART_SetConfig+0x10ca>
 800c2b6:	2380      	movs	r3, #128	; 0x80
 800c2b8:	021b      	lsls	r3, r3, #8
 800c2ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2bc:	6852      	ldr	r2, [r2, #4]
 800c2be:	0852      	lsrs	r2, r2, #1
 800c2c0:	189a      	adds	r2, r3, r2
 800c2c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	0019      	movs	r1, r3
 800c2c8:	0010      	movs	r0, r2
 800c2ca:	f7f3 ff1b 	bl	8000104 <__udivsi3>
 800c2ce:	0003      	movs	r3, r0
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800c2d4:	e007      	b.n	800c2e6 <UART_SetConfig+0x10f6>
      default:
        ret = HAL_ERROR;
 800c2d6:	231b      	movs	r3, #27
 800c2d8:	2258      	movs	r2, #88	; 0x58
 800c2da:	4694      	mov	ip, r2
 800c2dc:	44bc      	add	ip, r7
 800c2de:	4463      	add	r3, ip
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	701a      	strb	r2, [r3, #0]
        break;
 800c2e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2e8:	2b0f      	cmp	r3, #15
 800c2ea:	d908      	bls.n	800c2fe <UART_SetConfig+0x110e>
 800c2ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2ee:	4a16      	ldr	r2, [pc, #88]	; (800c348 <UART_SetConfig+0x1158>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d804      	bhi.n	800c2fe <UART_SetConfig+0x110e>
    {
      huart->Instance->BRR = usartdiv;
 800c2f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c2fa:	60da      	str	r2, [r3, #12]
 800c2fc:	e006      	b.n	800c30c <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 800c2fe:	231b      	movs	r3, #27
 800c300:	2258      	movs	r2, #88	; 0x58
 800c302:	4694      	mov	ip, r2
 800c304:	44bc      	add	ip, r7
 800c306:	4463      	add	r3, ip
 800c308:	2201      	movs	r2, #1
 800c30a:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c30c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c30e:	226a      	movs	r2, #106	; 0x6a
 800c310:	2101      	movs	r1, #1
 800c312:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c316:	2268      	movs	r2, #104	; 0x68
 800c318:	2101      	movs	r1, #1
 800c31a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c31c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c31e:	2200      	movs	r2, #0
 800c320:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c324:	2200      	movs	r2, #0
 800c326:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c328:	231b      	movs	r3, #27
 800c32a:	2258      	movs	r2, #88	; 0x58
 800c32c:	4694      	mov	ip, r2
 800c32e:	44bc      	add	ip, r7
 800c330:	4463      	add	r3, ip
 800c332:	781b      	ldrb	r3, [r3, #0]
}
 800c334:	0018      	movs	r0, r3
 800c336:	46bd      	mov	sp, r7
 800c338:	b021      	add	sp, #132	; 0x84
 800c33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c33c:	00000aaa 	.word	0x00000aaa
 800c340:	00000ccc 	.word	0x00000ccc
 800c344:	00001555 	.word	0x00001555
 800c348:	0000ffff 	.word	0x0000ffff

0800c34c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c358:	2201      	movs	r2, #1
 800c35a:	4013      	ands	r3, r2
 800c35c:	d00b      	beq.n	800c376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	4a4a      	ldr	r2, [pc, #296]	; (800c490 <UART_AdvFeatureConfig+0x144>)
 800c366:	4013      	ands	r3, r2
 800c368:	0019      	movs	r1, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	430a      	orrs	r2, r1
 800c374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37a:	2202      	movs	r2, #2
 800c37c:	4013      	ands	r3, r2
 800c37e:	d00b      	beq.n	800c398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	4a43      	ldr	r2, [pc, #268]	; (800c494 <UART_AdvFeatureConfig+0x148>)
 800c388:	4013      	ands	r3, r2
 800c38a:	0019      	movs	r1, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	430a      	orrs	r2, r1
 800c396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c39c:	2204      	movs	r2, #4
 800c39e:	4013      	ands	r3, r2
 800c3a0:	d00b      	beq.n	800c3ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	4a3b      	ldr	r2, [pc, #236]	; (800c498 <UART_AdvFeatureConfig+0x14c>)
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	0019      	movs	r1, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	430a      	orrs	r2, r1
 800c3b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3be:	2208      	movs	r2, #8
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	d00b      	beq.n	800c3dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	4a34      	ldr	r2, [pc, #208]	; (800c49c <UART_AdvFeatureConfig+0x150>)
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	0019      	movs	r1, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	430a      	orrs	r2, r1
 800c3da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e0:	2210      	movs	r2, #16
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	d00b      	beq.n	800c3fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	4a2c      	ldr	r2, [pc, #176]	; (800c4a0 <UART_AdvFeatureConfig+0x154>)
 800c3ee:	4013      	ands	r3, r2
 800c3f0:	0019      	movs	r1, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	430a      	orrs	r2, r1
 800c3fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c402:	2220      	movs	r2, #32
 800c404:	4013      	ands	r3, r2
 800c406:	d00b      	beq.n	800c420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	4a25      	ldr	r2, [pc, #148]	; (800c4a4 <UART_AdvFeatureConfig+0x158>)
 800c410:	4013      	ands	r3, r2
 800c412:	0019      	movs	r1, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	430a      	orrs	r2, r1
 800c41e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c424:	2240      	movs	r2, #64	; 0x40
 800c426:	4013      	ands	r3, r2
 800c428:	d01d      	beq.n	800c466 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	4a1d      	ldr	r2, [pc, #116]	; (800c4a8 <UART_AdvFeatureConfig+0x15c>)
 800c432:	4013      	ands	r3, r2
 800c434:	0019      	movs	r1, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	430a      	orrs	r2, r1
 800c440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c446:	2380      	movs	r3, #128	; 0x80
 800c448:	035b      	lsls	r3, r3, #13
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d10b      	bne.n	800c466 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	4a15      	ldr	r2, [pc, #84]	; (800c4ac <UART_AdvFeatureConfig+0x160>)
 800c456:	4013      	ands	r3, r2
 800c458:	0019      	movs	r1, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	430a      	orrs	r2, r1
 800c464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46a:	2280      	movs	r2, #128	; 0x80
 800c46c:	4013      	ands	r3, r2
 800c46e:	d00b      	beq.n	800c488 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	4a0e      	ldr	r2, [pc, #56]	; (800c4b0 <UART_AdvFeatureConfig+0x164>)
 800c478:	4013      	ands	r3, r2
 800c47a:	0019      	movs	r1, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	430a      	orrs	r2, r1
 800c486:	605a      	str	r2, [r3, #4]
  }
}
 800c488:	46c0      	nop			; (mov r8, r8)
 800c48a:	46bd      	mov	sp, r7
 800c48c:	b002      	add	sp, #8
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	fffdffff 	.word	0xfffdffff
 800c494:	fffeffff 	.word	0xfffeffff
 800c498:	fffbffff 	.word	0xfffbffff
 800c49c:	ffff7fff 	.word	0xffff7fff
 800c4a0:	ffffefff 	.word	0xffffefff
 800c4a4:	ffffdfff 	.word	0xffffdfff
 800c4a8:	ffefffff 	.word	0xffefffff
 800c4ac:	ff9fffff 	.word	0xff9fffff
 800c4b0:	fff7ffff 	.word	0xfff7ffff

0800c4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af02      	add	r7, sp, #8
 800c4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2288      	movs	r2, #136	; 0x88
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c4c4:	f7fb fa64 	bl	8007990 <HAL_GetTick>
 800c4c8:	0003      	movs	r3, r0
 800c4ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2208      	movs	r2, #8
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	2b08      	cmp	r3, #8
 800c4d8:	d10d      	bne.n	800c4f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	2380      	movs	r3, #128	; 0x80
 800c4de:	0399      	lsls	r1, r3, #14
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	4b18      	ldr	r3, [pc, #96]	; (800c544 <UART_CheckIdleState+0x90>)
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	0013      	movs	r3, r2
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f000 f82d 	bl	800c548 <UART_WaitOnFlagUntilTimeout>
 800c4ee:	1e03      	subs	r3, r0, #0
 800c4f0:	d001      	beq.n	800c4f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e021      	b.n	800c53a <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2204      	movs	r2, #4
 800c4fe:	4013      	ands	r3, r2
 800c500:	2b04      	cmp	r3, #4
 800c502:	d10d      	bne.n	800c520 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	2380      	movs	r3, #128	; 0x80
 800c508:	03d9      	lsls	r1, r3, #15
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <UART_CheckIdleState+0x90>)
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	0013      	movs	r3, r2
 800c512:	2200      	movs	r2, #0
 800c514:	f000 f818 	bl	800c548 <UART_WaitOnFlagUntilTimeout>
 800c518:	1e03      	subs	r3, r0, #0
 800c51a:	d001      	beq.n	800c520 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c51c:	2303      	movs	r3, #3
 800c51e:	e00c      	b.n	800c53a <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2280      	movs	r2, #128	; 0x80
 800c524:	2120      	movs	r1, #32
 800c526:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2284      	movs	r2, #132	; 0x84
 800c52c:	2120      	movs	r1, #32
 800c52e:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	227c      	movs	r2, #124	; 0x7c
 800c534:	2100      	movs	r1, #0
 800c536:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	0018      	movs	r0, r3
 800c53c:	46bd      	mov	sp, r7
 800c53e:	b004      	add	sp, #16
 800c540:	bd80      	pop	{r7, pc}
 800c542:	46c0      	nop			; (mov r8, r8)
 800c544:	01ffffff 	.word	0x01ffffff

0800c548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	603b      	str	r3, [r7, #0]
 800c554:	1dfb      	adds	r3, r7, #7
 800c556:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c558:	e02b      	b.n	800c5b2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	3301      	adds	r3, #1
 800c55e:	d028      	beq.n	800c5b2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c560:	f7fb fa16 	bl	8007990 <HAL_GetTick>
 800c564:	0002      	movs	r2, r0
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	69ba      	ldr	r2, [r7, #24]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d302      	bcc.n	800c576 <UART_WaitOnFlagUntilTimeout+0x2e>
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d11d      	bne.n	800c5b2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4916      	ldr	r1, [pc, #88]	; (800c5dc <UART_WaitOnFlagUntilTimeout+0x94>)
 800c582:	400a      	ands	r2, r1
 800c584:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	689a      	ldr	r2, [r3, #8]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2101      	movs	r1, #1
 800c592:	438a      	bics	r2, r1
 800c594:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2280      	movs	r2, #128	; 0x80
 800c59a:	2120      	movs	r1, #32
 800c59c:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2284      	movs	r2, #132	; 0x84
 800c5a2:	2120      	movs	r1, #32
 800c5a4:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	227c      	movs	r2, #124	; 0x7c
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	e00f      	b.n	800c5d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	69db      	ldr	r3, [r3, #28]
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	4013      	ands	r3, r2
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	1ad3      	subs	r3, r2, r3
 800c5c0:	425a      	negs	r2, r3
 800c5c2:	4153      	adcs	r3, r2
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	001a      	movs	r2, r3
 800c5c8:	1dfb      	adds	r3, r7, #7
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d0c4      	beq.n	800c55a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c5d0:	2300      	movs	r3, #0
}
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	b004      	add	sp, #16
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	46c0      	nop			; (mov r8, r8)
 800c5dc:	fffffe5f 	.word	0xfffffe5f

0800c5e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	227c      	movs	r2, #124	; 0x7c
 800c5ec:	5c9b      	ldrb	r3, [r3, r2]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d101      	bne.n	800c5f6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c5f2:	2302      	movs	r3, #2
 800c5f4:	e027      	b.n	800c646 <HAL_UARTEx_DisableFifoMode+0x66>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	227c      	movs	r2, #124	; 0x7c
 800c5fa:	2101      	movs	r1, #1
 800c5fc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2280      	movs	r2, #128	; 0x80
 800c602:	2124      	movs	r1, #36	; 0x24
 800c604:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2101      	movs	r1, #1
 800c61a:	438a      	bics	r2, r1
 800c61c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	4a0b      	ldr	r2, [pc, #44]	; (800c650 <HAL_UARTEx_DisableFifoMode+0x70>)
 800c622:	4013      	ands	r3, r2
 800c624:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2280      	movs	r2, #128	; 0x80
 800c638:	2120      	movs	r1, #32
 800c63a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	227c      	movs	r2, #124	; 0x7c
 800c640:	2100      	movs	r1, #0
 800c642:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	0018      	movs	r0, r3
 800c648:	46bd      	mov	sp, r7
 800c64a:	b004      	add	sp, #16
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	46c0      	nop			; (mov r8, r8)
 800c650:	dfffffff 	.word	0xdfffffff

0800c654 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	227c      	movs	r2, #124	; 0x7c
 800c662:	5c9b      	ldrb	r3, [r3, r2]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d101      	bne.n	800c66c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c668:	2302      	movs	r3, #2
 800c66a:	e02e      	b.n	800c6ca <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	227c      	movs	r2, #124	; 0x7c
 800c670:	2101      	movs	r1, #1
 800c672:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2280      	movs	r2, #128	; 0x80
 800c678:	2124      	movs	r1, #36	; 0x24
 800c67a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2101      	movs	r1, #1
 800c690:	438a      	bics	r2, r1
 800c692:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	00db      	lsls	r3, r3, #3
 800c69c:	08d9      	lsrs	r1, r3, #3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	430a      	orrs	r2, r1
 800c6a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	0018      	movs	r0, r3
 800c6ac:	f000 f854 	bl	800c758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2280      	movs	r2, #128	; 0x80
 800c6bc:	2120      	movs	r1, #32
 800c6be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	227c      	movs	r2, #124	; 0x7c
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	0018      	movs	r0, r3
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	b004      	add	sp, #16
 800c6d0:	bd80      	pop	{r7, pc}
	...

0800c6d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	227c      	movs	r2, #124	; 0x7c
 800c6e2:	5c9b      	ldrb	r3, [r3, r2]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d101      	bne.n	800c6ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	e02f      	b.n	800c74c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	227c      	movs	r2, #124	; 0x7c
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2280      	movs	r2, #128	; 0x80
 800c6f8:	2124      	movs	r1, #36	; 0x24
 800c6fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2101      	movs	r1, #1
 800c710:	438a      	bics	r2, r1
 800c712:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	4a0e      	ldr	r2, [pc, #56]	; (800c754 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800c71c:	4013      	ands	r3, r2
 800c71e:	0019      	movs	r1, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	430a      	orrs	r2, r1
 800c728:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	0018      	movs	r0, r3
 800c72e:	f000 f813 	bl	800c758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2280      	movs	r2, #128	; 0x80
 800c73e:	2120      	movs	r1, #32
 800c740:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	227c      	movs	r2, #124	; 0x7c
 800c746:	2100      	movs	r1, #0
 800c748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	0018      	movs	r0, r3
 800c74e:	46bd      	mov	sp, r7
 800c750:	b004      	add	sp, #16
 800c752:	bd80      	pop	{r7, pc}
 800c754:	f1ffffff 	.word	0xf1ffffff

0800c758 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c75a:	b089      	sub	sp, #36	; 0x24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c760:	2314      	movs	r3, #20
 800c762:	18fb      	adds	r3, r7, r3
 800c764:	4a2f      	ldr	r2, [pc, #188]	; (800c824 <UARTEx_SetNbDataToProcess+0xcc>)
 800c766:	ca03      	ldmia	r2!, {r0, r1}
 800c768:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c76a:	230c      	movs	r3, #12
 800c76c:	18fb      	adds	r3, r7, r3
 800c76e:	4a2e      	ldr	r2, [pc, #184]	; (800c828 <UARTEx_SetNbDataToProcess+0xd0>)
 800c770:	ca03      	ldmia	r2!, {r0, r1}
 800c772:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d108      	bne.n	800c78e <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	226a      	movs	r2, #106	; 0x6a
 800c780:	2101      	movs	r1, #1
 800c782:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2268      	movs	r2, #104	; 0x68
 800c788:	2101      	movs	r1, #1
 800c78a:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c78c:	e046      	b.n	800c81c <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c78e:	261f      	movs	r6, #31
 800c790:	19bb      	adds	r3, r7, r6
 800c792:	2208      	movs	r2, #8
 800c794:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c796:	201e      	movs	r0, #30
 800c798:	183b      	adds	r3, r7, r0
 800c79a:	2208      	movs	r2, #8
 800c79c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	0e5b      	lsrs	r3, r3, #25
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	241d      	movs	r4, #29
 800c7aa:	193b      	adds	r3, r7, r4
 800c7ac:	2107      	movs	r1, #7
 800c7ae:	400a      	ands	r2, r1
 800c7b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	0f5b      	lsrs	r3, r3, #29
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	251c      	movs	r5, #28
 800c7be:	197b      	adds	r3, r7, r5
 800c7c0:	2107      	movs	r1, #7
 800c7c2:	400a      	ands	r2, r1
 800c7c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c7c6:	183b      	adds	r3, r7, r0
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	197a      	adds	r2, r7, r5
 800c7cc:	7812      	ldrb	r2, [r2, #0]
 800c7ce:	2114      	movs	r1, #20
 800c7d0:	1879      	adds	r1, r7, r1
 800c7d2:	5c8a      	ldrb	r2, [r1, r2]
 800c7d4:	435a      	muls	r2, r3
 800c7d6:	0010      	movs	r0, r2
 800c7d8:	197b      	adds	r3, r7, r5
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	250c      	movs	r5, #12
 800c7de:	197a      	adds	r2, r7, r5
 800c7e0:	5cd3      	ldrb	r3, [r2, r3]
 800c7e2:	0019      	movs	r1, r3
 800c7e4:	f7f3 fd18 	bl	8000218 <__divsi3>
 800c7e8:	0003      	movs	r3, r0
 800c7ea:	b299      	uxth	r1, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	226a      	movs	r2, #106	; 0x6a
 800c7f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c7f2:	19bb      	adds	r3, r7, r6
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	193a      	adds	r2, r7, r4
 800c7f8:	7812      	ldrb	r2, [r2, #0]
 800c7fa:	2114      	movs	r1, #20
 800c7fc:	1879      	adds	r1, r7, r1
 800c7fe:	5c8a      	ldrb	r2, [r1, r2]
 800c800:	435a      	muls	r2, r3
 800c802:	0010      	movs	r0, r2
 800c804:	193b      	adds	r3, r7, r4
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	197a      	adds	r2, r7, r5
 800c80a:	5cd3      	ldrb	r3, [r2, r3]
 800c80c:	0019      	movs	r1, r3
 800c80e:	f7f3 fd03 	bl	8000218 <__divsi3>
 800c812:	0003      	movs	r3, r0
 800c814:	b299      	uxth	r1, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2268      	movs	r2, #104	; 0x68
 800c81a:	5299      	strh	r1, [r3, r2]
}
 800c81c:	46c0      	nop			; (mov r8, r8)
 800c81e:	46bd      	mov	sp, r7
 800c820:	b009      	add	sp, #36	; 0x24
 800c822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c824:	0800ef50 	.word	0x0800ef50
 800c828:	0800ef58 	.word	0x0800ef58

0800c82c <__errno>:
 800c82c:	4b01      	ldr	r3, [pc, #4]	; (800c834 <__errno+0x8>)
 800c82e:	6818      	ldr	r0, [r3, #0]
 800c830:	4770      	bx	lr
 800c832:	46c0      	nop			; (mov r8, r8)
 800c834:	20000014 	.word	0x20000014

0800c838 <__libc_init_array>:
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	2600      	movs	r6, #0
 800c83c:	4d0c      	ldr	r5, [pc, #48]	; (800c870 <__libc_init_array+0x38>)
 800c83e:	4c0d      	ldr	r4, [pc, #52]	; (800c874 <__libc_init_array+0x3c>)
 800c840:	1b64      	subs	r4, r4, r5
 800c842:	10a4      	asrs	r4, r4, #2
 800c844:	42a6      	cmp	r6, r4
 800c846:	d109      	bne.n	800c85c <__libc_init_array+0x24>
 800c848:	2600      	movs	r6, #0
 800c84a:	f001 fff3 	bl	800e834 <_init>
 800c84e:	4d0a      	ldr	r5, [pc, #40]	; (800c878 <__libc_init_array+0x40>)
 800c850:	4c0a      	ldr	r4, [pc, #40]	; (800c87c <__libc_init_array+0x44>)
 800c852:	1b64      	subs	r4, r4, r5
 800c854:	10a4      	asrs	r4, r4, #2
 800c856:	42a6      	cmp	r6, r4
 800c858:	d105      	bne.n	800c866 <__libc_init_array+0x2e>
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	00b3      	lsls	r3, r6, #2
 800c85e:	58eb      	ldr	r3, [r5, r3]
 800c860:	4798      	blx	r3
 800c862:	3601      	adds	r6, #1
 800c864:	e7ee      	b.n	800c844 <__libc_init_array+0xc>
 800c866:	00b3      	lsls	r3, r6, #2
 800c868:	58eb      	ldr	r3, [r5, r3]
 800c86a:	4798      	blx	r3
 800c86c:	3601      	adds	r6, #1
 800c86e:	e7f2      	b.n	800c856 <__libc_init_array+0x1e>
 800c870:	0800f340 	.word	0x0800f340
 800c874:	0800f340 	.word	0x0800f340
 800c878:	0800f340 	.word	0x0800f340
 800c87c:	0800f344 	.word	0x0800f344

0800c880 <memcpy>:
 800c880:	2300      	movs	r3, #0
 800c882:	b510      	push	{r4, lr}
 800c884:	429a      	cmp	r2, r3
 800c886:	d100      	bne.n	800c88a <memcpy+0xa>
 800c888:	bd10      	pop	{r4, pc}
 800c88a:	5ccc      	ldrb	r4, [r1, r3]
 800c88c:	54c4      	strb	r4, [r0, r3]
 800c88e:	3301      	adds	r3, #1
 800c890:	e7f8      	b.n	800c884 <memcpy+0x4>

0800c892 <memset>:
 800c892:	0003      	movs	r3, r0
 800c894:	1812      	adds	r2, r2, r0
 800c896:	4293      	cmp	r3, r2
 800c898:	d100      	bne.n	800c89c <memset+0xa>
 800c89a:	4770      	bx	lr
 800c89c:	7019      	strb	r1, [r3, #0]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	e7f9      	b.n	800c896 <memset+0x4>
	...

0800c8a4 <iprintf>:
 800c8a4:	b40f      	push	{r0, r1, r2, r3}
 800c8a6:	4b0b      	ldr	r3, [pc, #44]	; (800c8d4 <iprintf+0x30>)
 800c8a8:	b513      	push	{r0, r1, r4, lr}
 800c8aa:	681c      	ldr	r4, [r3, #0]
 800c8ac:	2c00      	cmp	r4, #0
 800c8ae:	d005      	beq.n	800c8bc <iprintf+0x18>
 800c8b0:	69a3      	ldr	r3, [r4, #24]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d102      	bne.n	800c8bc <iprintf+0x18>
 800c8b6:	0020      	movs	r0, r4
 800c8b8:	f000 fa3c 	bl	800cd34 <__sinit>
 800c8bc:	ab05      	add	r3, sp, #20
 800c8be:	9a04      	ldr	r2, [sp, #16]
 800c8c0:	68a1      	ldr	r1, [r4, #8]
 800c8c2:	0020      	movs	r0, r4
 800c8c4:	9301      	str	r3, [sp, #4]
 800c8c6:	f000 fc05 	bl	800d0d4 <_vfiprintf_r>
 800c8ca:	bc16      	pop	{r1, r2, r4}
 800c8cc:	bc08      	pop	{r3}
 800c8ce:	b004      	add	sp, #16
 800c8d0:	4718      	bx	r3
 800c8d2:	46c0      	nop			; (mov r8, r8)
 800c8d4:	20000014 	.word	0x20000014

0800c8d8 <_puts_r>:
 800c8d8:	b570      	push	{r4, r5, r6, lr}
 800c8da:	0005      	movs	r5, r0
 800c8dc:	000e      	movs	r6, r1
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d004      	beq.n	800c8ec <_puts_r+0x14>
 800c8e2:	6983      	ldr	r3, [r0, #24]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d101      	bne.n	800c8ec <_puts_r+0x14>
 800c8e8:	f000 fa24 	bl	800cd34 <__sinit>
 800c8ec:	69ab      	ldr	r3, [r5, #24]
 800c8ee:	68ac      	ldr	r4, [r5, #8]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d102      	bne.n	800c8fa <_puts_r+0x22>
 800c8f4:	0028      	movs	r0, r5
 800c8f6:	f000 fa1d 	bl	800cd34 <__sinit>
 800c8fa:	4b24      	ldr	r3, [pc, #144]	; (800c98c <_puts_r+0xb4>)
 800c8fc:	429c      	cmp	r4, r3
 800c8fe:	d10f      	bne.n	800c920 <_puts_r+0x48>
 800c900:	686c      	ldr	r4, [r5, #4]
 800c902:	89a3      	ldrh	r3, [r4, #12]
 800c904:	071b      	lsls	r3, r3, #28
 800c906:	d502      	bpl.n	800c90e <_puts_r+0x36>
 800c908:	6923      	ldr	r3, [r4, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d11f      	bne.n	800c94e <_puts_r+0x76>
 800c90e:	0021      	movs	r1, r4
 800c910:	0028      	movs	r0, r5
 800c912:	f000 f8a1 	bl	800ca58 <__swsetup_r>
 800c916:	2800      	cmp	r0, #0
 800c918:	d019      	beq.n	800c94e <_puts_r+0x76>
 800c91a:	2001      	movs	r0, #1
 800c91c:	4240      	negs	r0, r0
 800c91e:	bd70      	pop	{r4, r5, r6, pc}
 800c920:	4b1b      	ldr	r3, [pc, #108]	; (800c990 <_puts_r+0xb8>)
 800c922:	429c      	cmp	r4, r3
 800c924:	d101      	bne.n	800c92a <_puts_r+0x52>
 800c926:	68ac      	ldr	r4, [r5, #8]
 800c928:	e7eb      	b.n	800c902 <_puts_r+0x2a>
 800c92a:	4b1a      	ldr	r3, [pc, #104]	; (800c994 <_puts_r+0xbc>)
 800c92c:	429c      	cmp	r4, r3
 800c92e:	d1e8      	bne.n	800c902 <_puts_r+0x2a>
 800c930:	68ec      	ldr	r4, [r5, #12]
 800c932:	e7e6      	b.n	800c902 <_puts_r+0x2a>
 800c934:	3601      	adds	r6, #1
 800c936:	60a3      	str	r3, [r4, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	da04      	bge.n	800c946 <_puts_r+0x6e>
 800c93c:	69a2      	ldr	r2, [r4, #24]
 800c93e:	429a      	cmp	r2, r3
 800c940:	dc16      	bgt.n	800c970 <_puts_r+0x98>
 800c942:	290a      	cmp	r1, #10
 800c944:	d014      	beq.n	800c970 <_puts_r+0x98>
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	1c5a      	adds	r2, r3, #1
 800c94a:	6022      	str	r2, [r4, #0]
 800c94c:	7019      	strb	r1, [r3, #0]
 800c94e:	68a3      	ldr	r3, [r4, #8]
 800c950:	7831      	ldrb	r1, [r6, #0]
 800c952:	3b01      	subs	r3, #1
 800c954:	2900      	cmp	r1, #0
 800c956:	d1ed      	bne.n	800c934 <_puts_r+0x5c>
 800c958:	60a3      	str	r3, [r4, #8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	da0f      	bge.n	800c97e <_puts_r+0xa6>
 800c95e:	0022      	movs	r2, r4
 800c960:	310a      	adds	r1, #10
 800c962:	0028      	movs	r0, r5
 800c964:	f000 f822 	bl	800c9ac <__swbuf_r>
 800c968:	1c43      	adds	r3, r0, #1
 800c96a:	d0d6      	beq.n	800c91a <_puts_r+0x42>
 800c96c:	200a      	movs	r0, #10
 800c96e:	e7d6      	b.n	800c91e <_puts_r+0x46>
 800c970:	0022      	movs	r2, r4
 800c972:	0028      	movs	r0, r5
 800c974:	f000 f81a 	bl	800c9ac <__swbuf_r>
 800c978:	1c43      	adds	r3, r0, #1
 800c97a:	d1e8      	bne.n	800c94e <_puts_r+0x76>
 800c97c:	e7cd      	b.n	800c91a <_puts_r+0x42>
 800c97e:	200a      	movs	r0, #10
 800c980:	6823      	ldr	r3, [r4, #0]
 800c982:	1c5a      	adds	r2, r3, #1
 800c984:	6022      	str	r2, [r4, #0]
 800c986:	7018      	strb	r0, [r3, #0]
 800c988:	e7c9      	b.n	800c91e <_puts_r+0x46>
 800c98a:	46c0      	nop			; (mov r8, r8)
 800c98c:	0800f280 	.word	0x0800f280
 800c990:	0800f2a0 	.word	0x0800f2a0
 800c994:	0800f260 	.word	0x0800f260

0800c998 <puts>:
 800c998:	b510      	push	{r4, lr}
 800c99a:	4b03      	ldr	r3, [pc, #12]	; (800c9a8 <puts+0x10>)
 800c99c:	0001      	movs	r1, r0
 800c99e:	6818      	ldr	r0, [r3, #0]
 800c9a0:	f7ff ff9a 	bl	800c8d8 <_puts_r>
 800c9a4:	bd10      	pop	{r4, pc}
 800c9a6:	46c0      	nop			; (mov r8, r8)
 800c9a8:	20000014 	.word	0x20000014

0800c9ac <__swbuf_r>:
 800c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ae:	0005      	movs	r5, r0
 800c9b0:	000e      	movs	r6, r1
 800c9b2:	0014      	movs	r4, r2
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d004      	beq.n	800c9c2 <__swbuf_r+0x16>
 800c9b8:	6983      	ldr	r3, [r0, #24]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <__swbuf_r+0x16>
 800c9be:	f000 f9b9 	bl	800cd34 <__sinit>
 800c9c2:	4b22      	ldr	r3, [pc, #136]	; (800ca4c <__swbuf_r+0xa0>)
 800c9c4:	429c      	cmp	r4, r3
 800c9c6:	d12d      	bne.n	800ca24 <__swbuf_r+0x78>
 800c9c8:	686c      	ldr	r4, [r5, #4]
 800c9ca:	69a3      	ldr	r3, [r4, #24]
 800c9cc:	60a3      	str	r3, [r4, #8]
 800c9ce:	89a3      	ldrh	r3, [r4, #12]
 800c9d0:	071b      	lsls	r3, r3, #28
 800c9d2:	d531      	bpl.n	800ca38 <__swbuf_r+0x8c>
 800c9d4:	6923      	ldr	r3, [r4, #16]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d02e      	beq.n	800ca38 <__swbuf_r+0x8c>
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	6922      	ldr	r2, [r4, #16]
 800c9de:	b2f7      	uxtb	r7, r6
 800c9e0:	1a98      	subs	r0, r3, r2
 800c9e2:	6963      	ldr	r3, [r4, #20]
 800c9e4:	b2f6      	uxtb	r6, r6
 800c9e6:	4283      	cmp	r3, r0
 800c9e8:	dc05      	bgt.n	800c9f6 <__swbuf_r+0x4a>
 800c9ea:	0021      	movs	r1, r4
 800c9ec:	0028      	movs	r0, r5
 800c9ee:	f000 f933 	bl	800cc58 <_fflush_r>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d126      	bne.n	800ca44 <__swbuf_r+0x98>
 800c9f6:	68a3      	ldr	r3, [r4, #8]
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	60a3      	str	r3, [r4, #8]
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	6022      	str	r2, [r4, #0]
 800ca04:	701f      	strb	r7, [r3, #0]
 800ca06:	6963      	ldr	r3, [r4, #20]
 800ca08:	4283      	cmp	r3, r0
 800ca0a:	d004      	beq.n	800ca16 <__swbuf_r+0x6a>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	07db      	lsls	r3, r3, #31
 800ca10:	d51a      	bpl.n	800ca48 <__swbuf_r+0x9c>
 800ca12:	2e0a      	cmp	r6, #10
 800ca14:	d118      	bne.n	800ca48 <__swbuf_r+0x9c>
 800ca16:	0021      	movs	r1, r4
 800ca18:	0028      	movs	r0, r5
 800ca1a:	f000 f91d 	bl	800cc58 <_fflush_r>
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d012      	beq.n	800ca48 <__swbuf_r+0x9c>
 800ca22:	e00f      	b.n	800ca44 <__swbuf_r+0x98>
 800ca24:	4b0a      	ldr	r3, [pc, #40]	; (800ca50 <__swbuf_r+0xa4>)
 800ca26:	429c      	cmp	r4, r3
 800ca28:	d101      	bne.n	800ca2e <__swbuf_r+0x82>
 800ca2a:	68ac      	ldr	r4, [r5, #8]
 800ca2c:	e7cd      	b.n	800c9ca <__swbuf_r+0x1e>
 800ca2e:	4b09      	ldr	r3, [pc, #36]	; (800ca54 <__swbuf_r+0xa8>)
 800ca30:	429c      	cmp	r4, r3
 800ca32:	d1ca      	bne.n	800c9ca <__swbuf_r+0x1e>
 800ca34:	68ec      	ldr	r4, [r5, #12]
 800ca36:	e7c8      	b.n	800c9ca <__swbuf_r+0x1e>
 800ca38:	0021      	movs	r1, r4
 800ca3a:	0028      	movs	r0, r5
 800ca3c:	f000 f80c 	bl	800ca58 <__swsetup_r>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d0ca      	beq.n	800c9da <__swbuf_r+0x2e>
 800ca44:	2601      	movs	r6, #1
 800ca46:	4276      	negs	r6, r6
 800ca48:	0030      	movs	r0, r6
 800ca4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca4c:	0800f280 	.word	0x0800f280
 800ca50:	0800f2a0 	.word	0x0800f2a0
 800ca54:	0800f260 	.word	0x0800f260

0800ca58 <__swsetup_r>:
 800ca58:	4b36      	ldr	r3, [pc, #216]	; (800cb34 <__swsetup_r+0xdc>)
 800ca5a:	b570      	push	{r4, r5, r6, lr}
 800ca5c:	681d      	ldr	r5, [r3, #0]
 800ca5e:	0006      	movs	r6, r0
 800ca60:	000c      	movs	r4, r1
 800ca62:	2d00      	cmp	r5, #0
 800ca64:	d005      	beq.n	800ca72 <__swsetup_r+0x1a>
 800ca66:	69ab      	ldr	r3, [r5, #24]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d102      	bne.n	800ca72 <__swsetup_r+0x1a>
 800ca6c:	0028      	movs	r0, r5
 800ca6e:	f000 f961 	bl	800cd34 <__sinit>
 800ca72:	4b31      	ldr	r3, [pc, #196]	; (800cb38 <__swsetup_r+0xe0>)
 800ca74:	429c      	cmp	r4, r3
 800ca76:	d10f      	bne.n	800ca98 <__swsetup_r+0x40>
 800ca78:	686c      	ldr	r4, [r5, #4]
 800ca7a:	230c      	movs	r3, #12
 800ca7c:	5ee2      	ldrsh	r2, [r4, r3]
 800ca7e:	b293      	uxth	r3, r2
 800ca80:	0719      	lsls	r1, r3, #28
 800ca82:	d42d      	bmi.n	800cae0 <__swsetup_r+0x88>
 800ca84:	06d9      	lsls	r1, r3, #27
 800ca86:	d411      	bmi.n	800caac <__swsetup_r+0x54>
 800ca88:	2309      	movs	r3, #9
 800ca8a:	2001      	movs	r0, #1
 800ca8c:	6033      	str	r3, [r6, #0]
 800ca8e:	3337      	adds	r3, #55	; 0x37
 800ca90:	4313      	orrs	r3, r2
 800ca92:	81a3      	strh	r3, [r4, #12]
 800ca94:	4240      	negs	r0, r0
 800ca96:	bd70      	pop	{r4, r5, r6, pc}
 800ca98:	4b28      	ldr	r3, [pc, #160]	; (800cb3c <__swsetup_r+0xe4>)
 800ca9a:	429c      	cmp	r4, r3
 800ca9c:	d101      	bne.n	800caa2 <__swsetup_r+0x4a>
 800ca9e:	68ac      	ldr	r4, [r5, #8]
 800caa0:	e7eb      	b.n	800ca7a <__swsetup_r+0x22>
 800caa2:	4b27      	ldr	r3, [pc, #156]	; (800cb40 <__swsetup_r+0xe8>)
 800caa4:	429c      	cmp	r4, r3
 800caa6:	d1e8      	bne.n	800ca7a <__swsetup_r+0x22>
 800caa8:	68ec      	ldr	r4, [r5, #12]
 800caaa:	e7e6      	b.n	800ca7a <__swsetup_r+0x22>
 800caac:	075b      	lsls	r3, r3, #29
 800caae:	d513      	bpl.n	800cad8 <__swsetup_r+0x80>
 800cab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cab2:	2900      	cmp	r1, #0
 800cab4:	d008      	beq.n	800cac8 <__swsetup_r+0x70>
 800cab6:	0023      	movs	r3, r4
 800cab8:	3344      	adds	r3, #68	; 0x44
 800caba:	4299      	cmp	r1, r3
 800cabc:	d002      	beq.n	800cac4 <__swsetup_r+0x6c>
 800cabe:	0030      	movs	r0, r6
 800cac0:	f000 fa38 	bl	800cf34 <_free_r>
 800cac4:	2300      	movs	r3, #0
 800cac6:	6363      	str	r3, [r4, #52]	; 0x34
 800cac8:	2224      	movs	r2, #36	; 0x24
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	4393      	bics	r3, r2
 800cace:	81a3      	strh	r3, [r4, #12]
 800cad0:	2300      	movs	r3, #0
 800cad2:	6063      	str	r3, [r4, #4]
 800cad4:	6923      	ldr	r3, [r4, #16]
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	2308      	movs	r3, #8
 800cada:	89a2      	ldrh	r2, [r4, #12]
 800cadc:	4313      	orrs	r3, r2
 800cade:	81a3      	strh	r3, [r4, #12]
 800cae0:	6923      	ldr	r3, [r4, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10b      	bne.n	800cafe <__swsetup_r+0xa6>
 800cae6:	21a0      	movs	r1, #160	; 0xa0
 800cae8:	2280      	movs	r2, #128	; 0x80
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	0089      	lsls	r1, r1, #2
 800caee:	0092      	lsls	r2, r2, #2
 800caf0:	400b      	ands	r3, r1
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d003      	beq.n	800cafe <__swsetup_r+0xa6>
 800caf6:	0021      	movs	r1, r4
 800caf8:	0030      	movs	r0, r6
 800cafa:	f000 f9d7 	bl	800ceac <__smakebuf_r>
 800cafe:	2301      	movs	r3, #1
 800cb00:	89a2      	ldrh	r2, [r4, #12]
 800cb02:	4013      	ands	r3, r2
 800cb04:	d011      	beq.n	800cb2a <__swsetup_r+0xd2>
 800cb06:	2300      	movs	r3, #0
 800cb08:	60a3      	str	r3, [r4, #8]
 800cb0a:	6963      	ldr	r3, [r4, #20]
 800cb0c:	425b      	negs	r3, r3
 800cb0e:	61a3      	str	r3, [r4, #24]
 800cb10:	2000      	movs	r0, #0
 800cb12:	6923      	ldr	r3, [r4, #16]
 800cb14:	4283      	cmp	r3, r0
 800cb16:	d1be      	bne.n	800ca96 <__swsetup_r+0x3e>
 800cb18:	230c      	movs	r3, #12
 800cb1a:	5ee2      	ldrsh	r2, [r4, r3]
 800cb1c:	0613      	lsls	r3, r2, #24
 800cb1e:	d5ba      	bpl.n	800ca96 <__swsetup_r+0x3e>
 800cb20:	2340      	movs	r3, #64	; 0x40
 800cb22:	4313      	orrs	r3, r2
 800cb24:	81a3      	strh	r3, [r4, #12]
 800cb26:	3801      	subs	r0, #1
 800cb28:	e7b5      	b.n	800ca96 <__swsetup_r+0x3e>
 800cb2a:	0792      	lsls	r2, r2, #30
 800cb2c:	d400      	bmi.n	800cb30 <__swsetup_r+0xd8>
 800cb2e:	6963      	ldr	r3, [r4, #20]
 800cb30:	60a3      	str	r3, [r4, #8]
 800cb32:	e7ed      	b.n	800cb10 <__swsetup_r+0xb8>
 800cb34:	20000014 	.word	0x20000014
 800cb38:	0800f280 	.word	0x0800f280
 800cb3c:	0800f2a0 	.word	0x0800f2a0
 800cb40:	0800f260 	.word	0x0800f260

0800cb44 <__sflush_r>:
 800cb44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb46:	898a      	ldrh	r2, [r1, #12]
 800cb48:	0005      	movs	r5, r0
 800cb4a:	000c      	movs	r4, r1
 800cb4c:	0713      	lsls	r3, r2, #28
 800cb4e:	d460      	bmi.n	800cc12 <__sflush_r+0xce>
 800cb50:	684b      	ldr	r3, [r1, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	dc04      	bgt.n	800cb60 <__sflush_r+0x1c>
 800cb56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	dc01      	bgt.n	800cb60 <__sflush_r+0x1c>
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb60:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cb62:	2f00      	cmp	r7, #0
 800cb64:	d0fa      	beq.n	800cb5c <__sflush_r+0x18>
 800cb66:	2300      	movs	r3, #0
 800cb68:	682e      	ldr	r6, [r5, #0]
 800cb6a:	602b      	str	r3, [r5, #0]
 800cb6c:	2380      	movs	r3, #128	; 0x80
 800cb6e:	015b      	lsls	r3, r3, #5
 800cb70:	6a21      	ldr	r1, [r4, #32]
 800cb72:	401a      	ands	r2, r3
 800cb74:	d034      	beq.n	800cbe0 <__sflush_r+0x9c>
 800cb76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	075b      	lsls	r3, r3, #29
 800cb7c:	d506      	bpl.n	800cb8c <__sflush_r+0x48>
 800cb7e:	6863      	ldr	r3, [r4, #4]
 800cb80:	1ac0      	subs	r0, r0, r3
 800cb82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <__sflush_r+0x48>
 800cb88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb8a:	1ac0      	subs	r0, r0, r3
 800cb8c:	0002      	movs	r2, r0
 800cb8e:	6a21      	ldr	r1, [r4, #32]
 800cb90:	2300      	movs	r3, #0
 800cb92:	0028      	movs	r0, r5
 800cb94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cb96:	47b8      	blx	r7
 800cb98:	89a1      	ldrh	r1, [r4, #12]
 800cb9a:	1c43      	adds	r3, r0, #1
 800cb9c:	d106      	bne.n	800cbac <__sflush_r+0x68>
 800cb9e:	682b      	ldr	r3, [r5, #0]
 800cba0:	2b1d      	cmp	r3, #29
 800cba2:	d830      	bhi.n	800cc06 <__sflush_r+0xc2>
 800cba4:	4a2b      	ldr	r2, [pc, #172]	; (800cc54 <__sflush_r+0x110>)
 800cba6:	40da      	lsrs	r2, r3
 800cba8:	07d3      	lsls	r3, r2, #31
 800cbaa:	d52c      	bpl.n	800cc06 <__sflush_r+0xc2>
 800cbac:	2300      	movs	r3, #0
 800cbae:	6063      	str	r3, [r4, #4]
 800cbb0:	6923      	ldr	r3, [r4, #16]
 800cbb2:	6023      	str	r3, [r4, #0]
 800cbb4:	04cb      	lsls	r3, r1, #19
 800cbb6:	d505      	bpl.n	800cbc4 <__sflush_r+0x80>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	d102      	bne.n	800cbc2 <__sflush_r+0x7e>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d100      	bne.n	800cbc4 <__sflush_r+0x80>
 800cbc2:	6560      	str	r0, [r4, #84]	; 0x54
 800cbc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbc6:	602e      	str	r6, [r5, #0]
 800cbc8:	2900      	cmp	r1, #0
 800cbca:	d0c7      	beq.n	800cb5c <__sflush_r+0x18>
 800cbcc:	0023      	movs	r3, r4
 800cbce:	3344      	adds	r3, #68	; 0x44
 800cbd0:	4299      	cmp	r1, r3
 800cbd2:	d002      	beq.n	800cbda <__sflush_r+0x96>
 800cbd4:	0028      	movs	r0, r5
 800cbd6:	f000 f9ad 	bl	800cf34 <_free_r>
 800cbda:	2000      	movs	r0, #0
 800cbdc:	6360      	str	r0, [r4, #52]	; 0x34
 800cbde:	e7be      	b.n	800cb5e <__sflush_r+0x1a>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	0028      	movs	r0, r5
 800cbe4:	47b8      	blx	r7
 800cbe6:	1c43      	adds	r3, r0, #1
 800cbe8:	d1c6      	bne.n	800cb78 <__sflush_r+0x34>
 800cbea:	682b      	ldr	r3, [r5, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d0c3      	beq.n	800cb78 <__sflush_r+0x34>
 800cbf0:	2b1d      	cmp	r3, #29
 800cbf2:	d001      	beq.n	800cbf8 <__sflush_r+0xb4>
 800cbf4:	2b16      	cmp	r3, #22
 800cbf6:	d101      	bne.n	800cbfc <__sflush_r+0xb8>
 800cbf8:	602e      	str	r6, [r5, #0]
 800cbfa:	e7af      	b.n	800cb5c <__sflush_r+0x18>
 800cbfc:	2340      	movs	r3, #64	; 0x40
 800cbfe:	89a2      	ldrh	r2, [r4, #12]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	e7ab      	b.n	800cb5e <__sflush_r+0x1a>
 800cc06:	2340      	movs	r3, #64	; 0x40
 800cc08:	430b      	orrs	r3, r1
 800cc0a:	2001      	movs	r0, #1
 800cc0c:	81a3      	strh	r3, [r4, #12]
 800cc0e:	4240      	negs	r0, r0
 800cc10:	e7a5      	b.n	800cb5e <__sflush_r+0x1a>
 800cc12:	690f      	ldr	r7, [r1, #16]
 800cc14:	2f00      	cmp	r7, #0
 800cc16:	d0a1      	beq.n	800cb5c <__sflush_r+0x18>
 800cc18:	680b      	ldr	r3, [r1, #0]
 800cc1a:	600f      	str	r7, [r1, #0]
 800cc1c:	1bdb      	subs	r3, r3, r7
 800cc1e:	9301      	str	r3, [sp, #4]
 800cc20:	2300      	movs	r3, #0
 800cc22:	0792      	lsls	r2, r2, #30
 800cc24:	d100      	bne.n	800cc28 <__sflush_r+0xe4>
 800cc26:	694b      	ldr	r3, [r1, #20]
 800cc28:	60a3      	str	r3, [r4, #8]
 800cc2a:	9b01      	ldr	r3, [sp, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	dc00      	bgt.n	800cc32 <__sflush_r+0xee>
 800cc30:	e794      	b.n	800cb5c <__sflush_r+0x18>
 800cc32:	9b01      	ldr	r3, [sp, #4]
 800cc34:	003a      	movs	r2, r7
 800cc36:	6a21      	ldr	r1, [r4, #32]
 800cc38:	0028      	movs	r0, r5
 800cc3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc3c:	47b0      	blx	r6
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	dc03      	bgt.n	800cc4a <__sflush_r+0x106>
 800cc42:	2340      	movs	r3, #64	; 0x40
 800cc44:	89a2      	ldrh	r2, [r4, #12]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	e7df      	b.n	800cc0a <__sflush_r+0xc6>
 800cc4a:	9b01      	ldr	r3, [sp, #4]
 800cc4c:	183f      	adds	r7, r7, r0
 800cc4e:	1a1b      	subs	r3, r3, r0
 800cc50:	9301      	str	r3, [sp, #4]
 800cc52:	e7ea      	b.n	800cc2a <__sflush_r+0xe6>
 800cc54:	20400001 	.word	0x20400001

0800cc58 <_fflush_r>:
 800cc58:	690b      	ldr	r3, [r1, #16]
 800cc5a:	b570      	push	{r4, r5, r6, lr}
 800cc5c:	0005      	movs	r5, r0
 800cc5e:	000c      	movs	r4, r1
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d101      	bne.n	800cc68 <_fflush_r+0x10>
 800cc64:	2000      	movs	r0, #0
 800cc66:	bd70      	pop	{r4, r5, r6, pc}
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d004      	beq.n	800cc76 <_fflush_r+0x1e>
 800cc6c:	6983      	ldr	r3, [r0, #24]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <_fflush_r+0x1e>
 800cc72:	f000 f85f 	bl	800cd34 <__sinit>
 800cc76:	4b0b      	ldr	r3, [pc, #44]	; (800cca4 <_fflush_r+0x4c>)
 800cc78:	429c      	cmp	r4, r3
 800cc7a:	d109      	bne.n	800cc90 <_fflush_r+0x38>
 800cc7c:	686c      	ldr	r4, [r5, #4]
 800cc7e:	220c      	movs	r2, #12
 800cc80:	5ea3      	ldrsh	r3, [r4, r2]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d0ee      	beq.n	800cc64 <_fflush_r+0xc>
 800cc86:	0021      	movs	r1, r4
 800cc88:	0028      	movs	r0, r5
 800cc8a:	f7ff ff5b 	bl	800cb44 <__sflush_r>
 800cc8e:	e7ea      	b.n	800cc66 <_fflush_r+0xe>
 800cc90:	4b05      	ldr	r3, [pc, #20]	; (800cca8 <_fflush_r+0x50>)
 800cc92:	429c      	cmp	r4, r3
 800cc94:	d101      	bne.n	800cc9a <_fflush_r+0x42>
 800cc96:	68ac      	ldr	r4, [r5, #8]
 800cc98:	e7f1      	b.n	800cc7e <_fflush_r+0x26>
 800cc9a:	4b04      	ldr	r3, [pc, #16]	; (800ccac <_fflush_r+0x54>)
 800cc9c:	429c      	cmp	r4, r3
 800cc9e:	d1ee      	bne.n	800cc7e <_fflush_r+0x26>
 800cca0:	68ec      	ldr	r4, [r5, #12]
 800cca2:	e7ec      	b.n	800cc7e <_fflush_r+0x26>
 800cca4:	0800f280 	.word	0x0800f280
 800cca8:	0800f2a0 	.word	0x0800f2a0
 800ccac:	0800f260 	.word	0x0800f260

0800ccb0 <std>:
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	b510      	push	{r4, lr}
 800ccb4:	0004      	movs	r4, r0
 800ccb6:	6003      	str	r3, [r0, #0]
 800ccb8:	6043      	str	r3, [r0, #4]
 800ccba:	6083      	str	r3, [r0, #8]
 800ccbc:	8181      	strh	r1, [r0, #12]
 800ccbe:	6643      	str	r3, [r0, #100]	; 0x64
 800ccc0:	81c2      	strh	r2, [r0, #14]
 800ccc2:	6103      	str	r3, [r0, #16]
 800ccc4:	6143      	str	r3, [r0, #20]
 800ccc6:	6183      	str	r3, [r0, #24]
 800ccc8:	0019      	movs	r1, r3
 800ccca:	2208      	movs	r2, #8
 800cccc:	305c      	adds	r0, #92	; 0x5c
 800ccce:	f7ff fde0 	bl	800c892 <memset>
 800ccd2:	4b05      	ldr	r3, [pc, #20]	; (800cce8 <std+0x38>)
 800ccd4:	6224      	str	r4, [r4, #32]
 800ccd6:	6263      	str	r3, [r4, #36]	; 0x24
 800ccd8:	4b04      	ldr	r3, [pc, #16]	; (800ccec <std+0x3c>)
 800ccda:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccdc:	4b04      	ldr	r3, [pc, #16]	; (800ccf0 <std+0x40>)
 800ccde:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cce0:	4b04      	ldr	r3, [pc, #16]	; (800ccf4 <std+0x44>)
 800cce2:	6323      	str	r3, [r4, #48]	; 0x30
 800cce4:	bd10      	pop	{r4, pc}
 800cce6:	46c0      	nop			; (mov r8, r8)
 800cce8:	0800d611 	.word	0x0800d611
 800ccec:	0800d639 	.word	0x0800d639
 800ccf0:	0800d671 	.word	0x0800d671
 800ccf4:	0800d69d 	.word	0x0800d69d

0800ccf8 <_cleanup_r>:
 800ccf8:	b510      	push	{r4, lr}
 800ccfa:	4902      	ldr	r1, [pc, #8]	; (800cd04 <_cleanup_r+0xc>)
 800ccfc:	f000 f88c 	bl	800ce18 <_fwalk_reent>
 800cd00:	bd10      	pop	{r4, pc}
 800cd02:	46c0      	nop			; (mov r8, r8)
 800cd04:	0800cc59 	.word	0x0800cc59

0800cd08 <__sfmoreglue>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	2568      	movs	r5, #104	; 0x68
 800cd0c:	1e4a      	subs	r2, r1, #1
 800cd0e:	4355      	muls	r5, r2
 800cd10:	000e      	movs	r6, r1
 800cd12:	0029      	movs	r1, r5
 800cd14:	3174      	adds	r1, #116	; 0x74
 800cd16:	f000 f957 	bl	800cfc8 <_malloc_r>
 800cd1a:	1e04      	subs	r4, r0, #0
 800cd1c:	d008      	beq.n	800cd30 <__sfmoreglue+0x28>
 800cd1e:	2100      	movs	r1, #0
 800cd20:	002a      	movs	r2, r5
 800cd22:	6001      	str	r1, [r0, #0]
 800cd24:	6046      	str	r6, [r0, #4]
 800cd26:	300c      	adds	r0, #12
 800cd28:	60a0      	str	r0, [r4, #8]
 800cd2a:	3268      	adds	r2, #104	; 0x68
 800cd2c:	f7ff fdb1 	bl	800c892 <memset>
 800cd30:	0020      	movs	r0, r4
 800cd32:	bd70      	pop	{r4, r5, r6, pc}

0800cd34 <__sinit>:
 800cd34:	6983      	ldr	r3, [r0, #24]
 800cd36:	b513      	push	{r0, r1, r4, lr}
 800cd38:	0004      	movs	r4, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d128      	bne.n	800cd90 <__sinit+0x5c>
 800cd3e:	6483      	str	r3, [r0, #72]	; 0x48
 800cd40:	64c3      	str	r3, [r0, #76]	; 0x4c
 800cd42:	6503      	str	r3, [r0, #80]	; 0x50
 800cd44:	4b13      	ldr	r3, [pc, #76]	; (800cd94 <__sinit+0x60>)
 800cd46:	4a14      	ldr	r2, [pc, #80]	; (800cd98 <__sinit+0x64>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	6282      	str	r2, [r0, #40]	; 0x28
 800cd4c:	9301      	str	r3, [sp, #4]
 800cd4e:	4298      	cmp	r0, r3
 800cd50:	d101      	bne.n	800cd56 <__sinit+0x22>
 800cd52:	2301      	movs	r3, #1
 800cd54:	6183      	str	r3, [r0, #24]
 800cd56:	0020      	movs	r0, r4
 800cd58:	f000 f820 	bl	800cd9c <__sfp>
 800cd5c:	6060      	str	r0, [r4, #4]
 800cd5e:	0020      	movs	r0, r4
 800cd60:	f000 f81c 	bl	800cd9c <__sfp>
 800cd64:	60a0      	str	r0, [r4, #8]
 800cd66:	0020      	movs	r0, r4
 800cd68:	f000 f818 	bl	800cd9c <__sfp>
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	60e0      	str	r0, [r4, #12]
 800cd70:	2104      	movs	r1, #4
 800cd72:	6860      	ldr	r0, [r4, #4]
 800cd74:	f7ff ff9c 	bl	800ccb0 <std>
 800cd78:	2201      	movs	r2, #1
 800cd7a:	2109      	movs	r1, #9
 800cd7c:	68a0      	ldr	r0, [r4, #8]
 800cd7e:	f7ff ff97 	bl	800ccb0 <std>
 800cd82:	2202      	movs	r2, #2
 800cd84:	2112      	movs	r1, #18
 800cd86:	68e0      	ldr	r0, [r4, #12]
 800cd88:	f7ff ff92 	bl	800ccb0 <std>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	61a3      	str	r3, [r4, #24]
 800cd90:	bd13      	pop	{r0, r1, r4, pc}
 800cd92:	46c0      	nop			; (mov r8, r8)
 800cd94:	0800f25c 	.word	0x0800f25c
 800cd98:	0800ccf9 	.word	0x0800ccf9

0800cd9c <__sfp>:
 800cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9e:	4b1c      	ldr	r3, [pc, #112]	; (800ce10 <__sfp+0x74>)
 800cda0:	0007      	movs	r7, r0
 800cda2:	681e      	ldr	r6, [r3, #0]
 800cda4:	69b3      	ldr	r3, [r6, #24]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d102      	bne.n	800cdb0 <__sfp+0x14>
 800cdaa:	0030      	movs	r0, r6
 800cdac:	f7ff ffc2 	bl	800cd34 <__sinit>
 800cdb0:	3648      	adds	r6, #72	; 0x48
 800cdb2:	68b4      	ldr	r4, [r6, #8]
 800cdb4:	6873      	ldr	r3, [r6, #4]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	d504      	bpl.n	800cdc4 <__sfp+0x28>
 800cdba:	6833      	ldr	r3, [r6, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d007      	beq.n	800cdd0 <__sfp+0x34>
 800cdc0:	6836      	ldr	r6, [r6, #0]
 800cdc2:	e7f6      	b.n	800cdb2 <__sfp+0x16>
 800cdc4:	220c      	movs	r2, #12
 800cdc6:	5ea5      	ldrsh	r5, [r4, r2]
 800cdc8:	2d00      	cmp	r5, #0
 800cdca:	d00d      	beq.n	800cde8 <__sfp+0x4c>
 800cdcc:	3468      	adds	r4, #104	; 0x68
 800cdce:	e7f2      	b.n	800cdb6 <__sfp+0x1a>
 800cdd0:	2104      	movs	r1, #4
 800cdd2:	0038      	movs	r0, r7
 800cdd4:	f7ff ff98 	bl	800cd08 <__sfmoreglue>
 800cdd8:	6030      	str	r0, [r6, #0]
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d1f0      	bne.n	800cdc0 <__sfp+0x24>
 800cdde:	230c      	movs	r3, #12
 800cde0:	0004      	movs	r4, r0
 800cde2:	603b      	str	r3, [r7, #0]
 800cde4:	0020      	movs	r0, r4
 800cde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cde8:	0020      	movs	r0, r4
 800cdea:	4b0a      	ldr	r3, [pc, #40]	; (800ce14 <__sfp+0x78>)
 800cdec:	6665      	str	r5, [r4, #100]	; 0x64
 800cdee:	6025      	str	r5, [r4, #0]
 800cdf0:	6065      	str	r5, [r4, #4]
 800cdf2:	60a5      	str	r5, [r4, #8]
 800cdf4:	60e3      	str	r3, [r4, #12]
 800cdf6:	6125      	str	r5, [r4, #16]
 800cdf8:	6165      	str	r5, [r4, #20]
 800cdfa:	61a5      	str	r5, [r4, #24]
 800cdfc:	2208      	movs	r2, #8
 800cdfe:	0029      	movs	r1, r5
 800ce00:	305c      	adds	r0, #92	; 0x5c
 800ce02:	f7ff fd46 	bl	800c892 <memset>
 800ce06:	6365      	str	r5, [r4, #52]	; 0x34
 800ce08:	63a5      	str	r5, [r4, #56]	; 0x38
 800ce0a:	64a5      	str	r5, [r4, #72]	; 0x48
 800ce0c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ce0e:	e7e9      	b.n	800cde4 <__sfp+0x48>
 800ce10:	0800f25c 	.word	0x0800f25c
 800ce14:	ffff0001 	.word	0xffff0001

0800ce18 <_fwalk_reent>:
 800ce18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce1a:	0004      	movs	r4, r0
 800ce1c:	0007      	movs	r7, r0
 800ce1e:	2600      	movs	r6, #0
 800ce20:	9101      	str	r1, [sp, #4]
 800ce22:	3448      	adds	r4, #72	; 0x48
 800ce24:	2c00      	cmp	r4, #0
 800ce26:	d101      	bne.n	800ce2c <_fwalk_reent+0x14>
 800ce28:	0030      	movs	r0, r6
 800ce2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce2c:	6863      	ldr	r3, [r4, #4]
 800ce2e:	68a5      	ldr	r5, [r4, #8]
 800ce30:	9300      	str	r3, [sp, #0]
 800ce32:	9b00      	ldr	r3, [sp, #0]
 800ce34:	3b01      	subs	r3, #1
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	d501      	bpl.n	800ce3e <_fwalk_reent+0x26>
 800ce3a:	6824      	ldr	r4, [r4, #0]
 800ce3c:	e7f2      	b.n	800ce24 <_fwalk_reent+0xc>
 800ce3e:	89ab      	ldrh	r3, [r5, #12]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d908      	bls.n	800ce56 <_fwalk_reent+0x3e>
 800ce44:	220e      	movs	r2, #14
 800ce46:	5eab      	ldrsh	r3, [r5, r2]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	d004      	beq.n	800ce56 <_fwalk_reent+0x3e>
 800ce4c:	0029      	movs	r1, r5
 800ce4e:	0038      	movs	r0, r7
 800ce50:	9b01      	ldr	r3, [sp, #4]
 800ce52:	4798      	blx	r3
 800ce54:	4306      	orrs	r6, r0
 800ce56:	3568      	adds	r5, #104	; 0x68
 800ce58:	e7eb      	b.n	800ce32 <_fwalk_reent+0x1a>
	...

0800ce5c <__swhatbuf_r>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	000e      	movs	r6, r1
 800ce60:	001d      	movs	r5, r3
 800ce62:	230e      	movs	r3, #14
 800ce64:	5ec9      	ldrsh	r1, [r1, r3]
 800ce66:	b096      	sub	sp, #88	; 0x58
 800ce68:	0014      	movs	r4, r2
 800ce6a:	2900      	cmp	r1, #0
 800ce6c:	da07      	bge.n	800ce7e <__swhatbuf_r+0x22>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	602b      	str	r3, [r5, #0]
 800ce72:	89b3      	ldrh	r3, [r6, #12]
 800ce74:	061b      	lsls	r3, r3, #24
 800ce76:	d411      	bmi.n	800ce9c <__swhatbuf_r+0x40>
 800ce78:	2380      	movs	r3, #128	; 0x80
 800ce7a:	00db      	lsls	r3, r3, #3
 800ce7c:	e00f      	b.n	800ce9e <__swhatbuf_r+0x42>
 800ce7e:	466a      	mov	r2, sp
 800ce80:	f000 fc38 	bl	800d6f4 <_fstat_r>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	dbf2      	blt.n	800ce6e <__swhatbuf_r+0x12>
 800ce88:	22f0      	movs	r2, #240	; 0xf0
 800ce8a:	9b01      	ldr	r3, [sp, #4]
 800ce8c:	0212      	lsls	r2, r2, #8
 800ce8e:	4013      	ands	r3, r2
 800ce90:	4a05      	ldr	r2, [pc, #20]	; (800cea8 <__swhatbuf_r+0x4c>)
 800ce92:	189b      	adds	r3, r3, r2
 800ce94:	425a      	negs	r2, r3
 800ce96:	4153      	adcs	r3, r2
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	e7ed      	b.n	800ce78 <__swhatbuf_r+0x1c>
 800ce9c:	2340      	movs	r3, #64	; 0x40
 800ce9e:	2000      	movs	r0, #0
 800cea0:	6023      	str	r3, [r4, #0]
 800cea2:	b016      	add	sp, #88	; 0x58
 800cea4:	bd70      	pop	{r4, r5, r6, pc}
 800cea6:	46c0      	nop			; (mov r8, r8)
 800cea8:	ffffe000 	.word	0xffffe000

0800ceac <__smakebuf_r>:
 800ceac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceae:	2602      	movs	r6, #2
 800ceb0:	898b      	ldrh	r3, [r1, #12]
 800ceb2:	0005      	movs	r5, r0
 800ceb4:	000c      	movs	r4, r1
 800ceb6:	4233      	tst	r3, r6
 800ceb8:	d006      	beq.n	800cec8 <__smakebuf_r+0x1c>
 800ceba:	0023      	movs	r3, r4
 800cebc:	3347      	adds	r3, #71	; 0x47
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	6123      	str	r3, [r4, #16]
 800cec2:	2301      	movs	r3, #1
 800cec4:	6163      	str	r3, [r4, #20]
 800cec6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cec8:	ab01      	add	r3, sp, #4
 800ceca:	466a      	mov	r2, sp
 800cecc:	f7ff ffc6 	bl	800ce5c <__swhatbuf_r>
 800ced0:	9900      	ldr	r1, [sp, #0]
 800ced2:	0007      	movs	r7, r0
 800ced4:	0028      	movs	r0, r5
 800ced6:	f000 f877 	bl	800cfc8 <_malloc_r>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	d108      	bne.n	800cef0 <__smakebuf_r+0x44>
 800cede:	220c      	movs	r2, #12
 800cee0:	5ea3      	ldrsh	r3, [r4, r2]
 800cee2:	059a      	lsls	r2, r3, #22
 800cee4:	d4ef      	bmi.n	800cec6 <__smakebuf_r+0x1a>
 800cee6:	2203      	movs	r2, #3
 800cee8:	4393      	bics	r3, r2
 800ceea:	431e      	orrs	r6, r3
 800ceec:	81a6      	strh	r6, [r4, #12]
 800ceee:	e7e4      	b.n	800ceba <__smakebuf_r+0xe>
 800cef0:	4b0f      	ldr	r3, [pc, #60]	; (800cf30 <__smakebuf_r+0x84>)
 800cef2:	62ab      	str	r3, [r5, #40]	; 0x28
 800cef4:	2380      	movs	r3, #128	; 0x80
 800cef6:	89a2      	ldrh	r2, [r4, #12]
 800cef8:	6020      	str	r0, [r4, #0]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	81a3      	strh	r3, [r4, #12]
 800cefe:	9b00      	ldr	r3, [sp, #0]
 800cf00:	6120      	str	r0, [r4, #16]
 800cf02:	6163      	str	r3, [r4, #20]
 800cf04:	9b01      	ldr	r3, [sp, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00d      	beq.n	800cf26 <__smakebuf_r+0x7a>
 800cf0a:	230e      	movs	r3, #14
 800cf0c:	5ee1      	ldrsh	r1, [r4, r3]
 800cf0e:	0028      	movs	r0, r5
 800cf10:	f000 fc02 	bl	800d718 <_isatty_r>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	d006      	beq.n	800cf26 <__smakebuf_r+0x7a>
 800cf18:	2203      	movs	r2, #3
 800cf1a:	89a3      	ldrh	r3, [r4, #12]
 800cf1c:	4393      	bics	r3, r2
 800cf1e:	001a      	movs	r2, r3
 800cf20:	2301      	movs	r3, #1
 800cf22:	4313      	orrs	r3, r2
 800cf24:	81a3      	strh	r3, [r4, #12]
 800cf26:	89a0      	ldrh	r0, [r4, #12]
 800cf28:	4338      	orrs	r0, r7
 800cf2a:	81a0      	strh	r0, [r4, #12]
 800cf2c:	e7cb      	b.n	800cec6 <__smakebuf_r+0x1a>
 800cf2e:	46c0      	nop			; (mov r8, r8)
 800cf30:	0800ccf9 	.word	0x0800ccf9

0800cf34 <_free_r>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	0005      	movs	r5, r0
 800cf38:	2900      	cmp	r1, #0
 800cf3a:	d010      	beq.n	800cf5e <_free_r+0x2a>
 800cf3c:	1f0c      	subs	r4, r1, #4
 800cf3e:	6823      	ldr	r3, [r4, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	da00      	bge.n	800cf46 <_free_r+0x12>
 800cf44:	18e4      	adds	r4, r4, r3
 800cf46:	0028      	movs	r0, r5
 800cf48:	f000 fc17 	bl	800d77a <__malloc_lock>
 800cf4c:	4a1d      	ldr	r2, [pc, #116]	; (800cfc4 <_free_r+0x90>)
 800cf4e:	6813      	ldr	r3, [r2, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d105      	bne.n	800cf60 <_free_r+0x2c>
 800cf54:	6063      	str	r3, [r4, #4]
 800cf56:	6014      	str	r4, [r2, #0]
 800cf58:	0028      	movs	r0, r5
 800cf5a:	f000 fc0f 	bl	800d77c <__malloc_unlock>
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}
 800cf60:	42a3      	cmp	r3, r4
 800cf62:	d909      	bls.n	800cf78 <_free_r+0x44>
 800cf64:	6821      	ldr	r1, [r4, #0]
 800cf66:	1860      	adds	r0, r4, r1
 800cf68:	4283      	cmp	r3, r0
 800cf6a:	d1f3      	bne.n	800cf54 <_free_r+0x20>
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	1841      	adds	r1, r0, r1
 800cf72:	6021      	str	r1, [r4, #0]
 800cf74:	e7ee      	b.n	800cf54 <_free_r+0x20>
 800cf76:	0013      	movs	r3, r2
 800cf78:	685a      	ldr	r2, [r3, #4]
 800cf7a:	2a00      	cmp	r2, #0
 800cf7c:	d001      	beq.n	800cf82 <_free_r+0x4e>
 800cf7e:	42a2      	cmp	r2, r4
 800cf80:	d9f9      	bls.n	800cf76 <_free_r+0x42>
 800cf82:	6819      	ldr	r1, [r3, #0]
 800cf84:	1858      	adds	r0, r3, r1
 800cf86:	42a0      	cmp	r0, r4
 800cf88:	d10b      	bne.n	800cfa2 <_free_r+0x6e>
 800cf8a:	6820      	ldr	r0, [r4, #0]
 800cf8c:	1809      	adds	r1, r1, r0
 800cf8e:	1858      	adds	r0, r3, r1
 800cf90:	6019      	str	r1, [r3, #0]
 800cf92:	4282      	cmp	r2, r0
 800cf94:	d1e0      	bne.n	800cf58 <_free_r+0x24>
 800cf96:	6810      	ldr	r0, [r2, #0]
 800cf98:	6852      	ldr	r2, [r2, #4]
 800cf9a:	1841      	adds	r1, r0, r1
 800cf9c:	6019      	str	r1, [r3, #0]
 800cf9e:	605a      	str	r2, [r3, #4]
 800cfa0:	e7da      	b.n	800cf58 <_free_r+0x24>
 800cfa2:	42a0      	cmp	r0, r4
 800cfa4:	d902      	bls.n	800cfac <_free_r+0x78>
 800cfa6:	230c      	movs	r3, #12
 800cfa8:	602b      	str	r3, [r5, #0]
 800cfaa:	e7d5      	b.n	800cf58 <_free_r+0x24>
 800cfac:	6821      	ldr	r1, [r4, #0]
 800cfae:	1860      	adds	r0, r4, r1
 800cfb0:	4282      	cmp	r2, r0
 800cfb2:	d103      	bne.n	800cfbc <_free_r+0x88>
 800cfb4:	6810      	ldr	r0, [r2, #0]
 800cfb6:	6852      	ldr	r2, [r2, #4]
 800cfb8:	1841      	adds	r1, r0, r1
 800cfba:	6021      	str	r1, [r4, #0]
 800cfbc:	6062      	str	r2, [r4, #4]
 800cfbe:	605c      	str	r4, [r3, #4]
 800cfc0:	e7ca      	b.n	800cf58 <_free_r+0x24>
 800cfc2:	46c0      	nop			; (mov r8, r8)
 800cfc4:	2000068c 	.word	0x2000068c

0800cfc8 <_malloc_r>:
 800cfc8:	2303      	movs	r3, #3
 800cfca:	b570      	push	{r4, r5, r6, lr}
 800cfcc:	1ccd      	adds	r5, r1, #3
 800cfce:	439d      	bics	r5, r3
 800cfd0:	3508      	adds	r5, #8
 800cfd2:	0006      	movs	r6, r0
 800cfd4:	2d0c      	cmp	r5, #12
 800cfd6:	d21e      	bcs.n	800d016 <_malloc_r+0x4e>
 800cfd8:	250c      	movs	r5, #12
 800cfda:	42a9      	cmp	r1, r5
 800cfdc:	d81d      	bhi.n	800d01a <_malloc_r+0x52>
 800cfde:	0030      	movs	r0, r6
 800cfe0:	f000 fbcb 	bl	800d77a <__malloc_lock>
 800cfe4:	4a25      	ldr	r2, [pc, #148]	; (800d07c <_malloc_r+0xb4>)
 800cfe6:	6814      	ldr	r4, [r2, #0]
 800cfe8:	0021      	movs	r1, r4
 800cfea:	2900      	cmp	r1, #0
 800cfec:	d119      	bne.n	800d022 <_malloc_r+0x5a>
 800cfee:	4c24      	ldr	r4, [pc, #144]	; (800d080 <_malloc_r+0xb8>)
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d103      	bne.n	800cffe <_malloc_r+0x36>
 800cff6:	0030      	movs	r0, r6
 800cff8:	f000 faf8 	bl	800d5ec <_sbrk_r>
 800cffc:	6020      	str	r0, [r4, #0]
 800cffe:	0029      	movs	r1, r5
 800d000:	0030      	movs	r0, r6
 800d002:	f000 faf3 	bl	800d5ec <_sbrk_r>
 800d006:	1c43      	adds	r3, r0, #1
 800d008:	d12b      	bne.n	800d062 <_malloc_r+0x9a>
 800d00a:	230c      	movs	r3, #12
 800d00c:	0030      	movs	r0, r6
 800d00e:	6033      	str	r3, [r6, #0]
 800d010:	f000 fbb4 	bl	800d77c <__malloc_unlock>
 800d014:	e003      	b.n	800d01e <_malloc_r+0x56>
 800d016:	2d00      	cmp	r5, #0
 800d018:	dadf      	bge.n	800cfda <_malloc_r+0x12>
 800d01a:	230c      	movs	r3, #12
 800d01c:	6033      	str	r3, [r6, #0]
 800d01e:	2000      	movs	r0, #0
 800d020:	bd70      	pop	{r4, r5, r6, pc}
 800d022:	680b      	ldr	r3, [r1, #0]
 800d024:	1b5b      	subs	r3, r3, r5
 800d026:	d419      	bmi.n	800d05c <_malloc_r+0x94>
 800d028:	2b0b      	cmp	r3, #11
 800d02a:	d903      	bls.n	800d034 <_malloc_r+0x6c>
 800d02c:	600b      	str	r3, [r1, #0]
 800d02e:	18cc      	adds	r4, r1, r3
 800d030:	6025      	str	r5, [r4, #0]
 800d032:	e003      	b.n	800d03c <_malloc_r+0x74>
 800d034:	684b      	ldr	r3, [r1, #4]
 800d036:	428c      	cmp	r4, r1
 800d038:	d10d      	bne.n	800d056 <_malloc_r+0x8e>
 800d03a:	6013      	str	r3, [r2, #0]
 800d03c:	0030      	movs	r0, r6
 800d03e:	f000 fb9d 	bl	800d77c <__malloc_unlock>
 800d042:	0020      	movs	r0, r4
 800d044:	2207      	movs	r2, #7
 800d046:	300b      	adds	r0, #11
 800d048:	1d23      	adds	r3, r4, #4
 800d04a:	4390      	bics	r0, r2
 800d04c:	1ac3      	subs	r3, r0, r3
 800d04e:	d0e7      	beq.n	800d020 <_malloc_r+0x58>
 800d050:	425a      	negs	r2, r3
 800d052:	50e2      	str	r2, [r4, r3]
 800d054:	e7e4      	b.n	800d020 <_malloc_r+0x58>
 800d056:	6063      	str	r3, [r4, #4]
 800d058:	000c      	movs	r4, r1
 800d05a:	e7ef      	b.n	800d03c <_malloc_r+0x74>
 800d05c:	000c      	movs	r4, r1
 800d05e:	6849      	ldr	r1, [r1, #4]
 800d060:	e7c3      	b.n	800cfea <_malloc_r+0x22>
 800d062:	2303      	movs	r3, #3
 800d064:	1cc4      	adds	r4, r0, #3
 800d066:	439c      	bics	r4, r3
 800d068:	42a0      	cmp	r0, r4
 800d06a:	d0e1      	beq.n	800d030 <_malloc_r+0x68>
 800d06c:	1a21      	subs	r1, r4, r0
 800d06e:	0030      	movs	r0, r6
 800d070:	f000 fabc 	bl	800d5ec <_sbrk_r>
 800d074:	1c43      	adds	r3, r0, #1
 800d076:	d1db      	bne.n	800d030 <_malloc_r+0x68>
 800d078:	e7c7      	b.n	800d00a <_malloc_r+0x42>
 800d07a:	46c0      	nop			; (mov r8, r8)
 800d07c:	2000068c 	.word	0x2000068c
 800d080:	20000690 	.word	0x20000690

0800d084 <__sfputc_r>:
 800d084:	6893      	ldr	r3, [r2, #8]
 800d086:	b510      	push	{r4, lr}
 800d088:	3b01      	subs	r3, #1
 800d08a:	6093      	str	r3, [r2, #8]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	da04      	bge.n	800d09a <__sfputc_r+0x16>
 800d090:	6994      	ldr	r4, [r2, #24]
 800d092:	42a3      	cmp	r3, r4
 800d094:	db07      	blt.n	800d0a6 <__sfputc_r+0x22>
 800d096:	290a      	cmp	r1, #10
 800d098:	d005      	beq.n	800d0a6 <__sfputc_r+0x22>
 800d09a:	6813      	ldr	r3, [r2, #0]
 800d09c:	1c58      	adds	r0, r3, #1
 800d09e:	6010      	str	r0, [r2, #0]
 800d0a0:	7019      	strb	r1, [r3, #0]
 800d0a2:	0008      	movs	r0, r1
 800d0a4:	bd10      	pop	{r4, pc}
 800d0a6:	f7ff fc81 	bl	800c9ac <__swbuf_r>
 800d0aa:	0001      	movs	r1, r0
 800d0ac:	e7f9      	b.n	800d0a2 <__sfputc_r+0x1e>

0800d0ae <__sfputs_r>:
 800d0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b0:	0006      	movs	r6, r0
 800d0b2:	000f      	movs	r7, r1
 800d0b4:	0014      	movs	r4, r2
 800d0b6:	18d5      	adds	r5, r2, r3
 800d0b8:	42ac      	cmp	r4, r5
 800d0ba:	d101      	bne.n	800d0c0 <__sfputs_r+0x12>
 800d0bc:	2000      	movs	r0, #0
 800d0be:	e007      	b.n	800d0d0 <__sfputs_r+0x22>
 800d0c0:	7821      	ldrb	r1, [r4, #0]
 800d0c2:	003a      	movs	r2, r7
 800d0c4:	0030      	movs	r0, r6
 800d0c6:	f7ff ffdd 	bl	800d084 <__sfputc_r>
 800d0ca:	3401      	adds	r4, #1
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	d1f3      	bne.n	800d0b8 <__sfputs_r+0xa>
 800d0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0d4 <_vfiprintf_r>:
 800d0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0d6:	b0a1      	sub	sp, #132	; 0x84
 800d0d8:	9003      	str	r0, [sp, #12]
 800d0da:	000f      	movs	r7, r1
 800d0dc:	0016      	movs	r6, r2
 800d0de:	001d      	movs	r5, r3
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d005      	beq.n	800d0f0 <_vfiprintf_r+0x1c>
 800d0e4:	6983      	ldr	r3, [r0, #24]
 800d0e6:	9305      	str	r3, [sp, #20]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d101      	bne.n	800d0f0 <_vfiprintf_r+0x1c>
 800d0ec:	f7ff fe22 	bl	800cd34 <__sinit>
 800d0f0:	4b7b      	ldr	r3, [pc, #492]	; (800d2e0 <_vfiprintf_r+0x20c>)
 800d0f2:	429f      	cmp	r7, r3
 800d0f4:	d15c      	bne.n	800d1b0 <_vfiprintf_r+0xdc>
 800d0f6:	9b03      	ldr	r3, [sp, #12]
 800d0f8:	685f      	ldr	r7, [r3, #4]
 800d0fa:	89bb      	ldrh	r3, [r7, #12]
 800d0fc:	071b      	lsls	r3, r3, #28
 800d0fe:	d563      	bpl.n	800d1c8 <_vfiprintf_r+0xf4>
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d060      	beq.n	800d1c8 <_vfiprintf_r+0xf4>
 800d106:	2300      	movs	r3, #0
 800d108:	ac08      	add	r4, sp, #32
 800d10a:	6163      	str	r3, [r4, #20]
 800d10c:	3320      	adds	r3, #32
 800d10e:	7663      	strb	r3, [r4, #25]
 800d110:	3310      	adds	r3, #16
 800d112:	76a3      	strb	r3, [r4, #26]
 800d114:	9507      	str	r5, [sp, #28]
 800d116:	0035      	movs	r5, r6
 800d118:	782b      	ldrb	r3, [r5, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d001      	beq.n	800d122 <_vfiprintf_r+0x4e>
 800d11e:	2b25      	cmp	r3, #37	; 0x25
 800d120:	d15c      	bne.n	800d1dc <_vfiprintf_r+0x108>
 800d122:	1bab      	subs	r3, r5, r6
 800d124:	9305      	str	r3, [sp, #20]
 800d126:	d00c      	beq.n	800d142 <_vfiprintf_r+0x6e>
 800d128:	0032      	movs	r2, r6
 800d12a:	0039      	movs	r1, r7
 800d12c:	9803      	ldr	r0, [sp, #12]
 800d12e:	f7ff ffbe 	bl	800d0ae <__sfputs_r>
 800d132:	1c43      	adds	r3, r0, #1
 800d134:	d100      	bne.n	800d138 <_vfiprintf_r+0x64>
 800d136:	e0c4      	b.n	800d2c2 <_vfiprintf_r+0x1ee>
 800d138:	6962      	ldr	r2, [r4, #20]
 800d13a:	9b05      	ldr	r3, [sp, #20]
 800d13c:	4694      	mov	ip, r2
 800d13e:	4463      	add	r3, ip
 800d140:	6163      	str	r3, [r4, #20]
 800d142:	782b      	ldrb	r3, [r5, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d100      	bne.n	800d14a <_vfiprintf_r+0x76>
 800d148:	e0bb      	b.n	800d2c2 <_vfiprintf_r+0x1ee>
 800d14a:	2201      	movs	r2, #1
 800d14c:	2300      	movs	r3, #0
 800d14e:	4252      	negs	r2, r2
 800d150:	6062      	str	r2, [r4, #4]
 800d152:	a904      	add	r1, sp, #16
 800d154:	3254      	adds	r2, #84	; 0x54
 800d156:	1852      	adds	r2, r2, r1
 800d158:	1c6e      	adds	r6, r5, #1
 800d15a:	6023      	str	r3, [r4, #0]
 800d15c:	60e3      	str	r3, [r4, #12]
 800d15e:	60a3      	str	r3, [r4, #8]
 800d160:	7013      	strb	r3, [r2, #0]
 800d162:	65a3      	str	r3, [r4, #88]	; 0x58
 800d164:	7831      	ldrb	r1, [r6, #0]
 800d166:	2205      	movs	r2, #5
 800d168:	485e      	ldr	r0, [pc, #376]	; (800d2e4 <_vfiprintf_r+0x210>)
 800d16a:	f000 fafb 	bl	800d764 <memchr>
 800d16e:	1c75      	adds	r5, r6, #1
 800d170:	2800      	cmp	r0, #0
 800d172:	d135      	bne.n	800d1e0 <_vfiprintf_r+0x10c>
 800d174:	6822      	ldr	r2, [r4, #0]
 800d176:	06d3      	lsls	r3, r2, #27
 800d178:	d504      	bpl.n	800d184 <_vfiprintf_r+0xb0>
 800d17a:	2353      	movs	r3, #83	; 0x53
 800d17c:	a904      	add	r1, sp, #16
 800d17e:	185b      	adds	r3, r3, r1
 800d180:	2120      	movs	r1, #32
 800d182:	7019      	strb	r1, [r3, #0]
 800d184:	0713      	lsls	r3, r2, #28
 800d186:	d504      	bpl.n	800d192 <_vfiprintf_r+0xbe>
 800d188:	2353      	movs	r3, #83	; 0x53
 800d18a:	a904      	add	r1, sp, #16
 800d18c:	185b      	adds	r3, r3, r1
 800d18e:	212b      	movs	r1, #43	; 0x2b
 800d190:	7019      	strb	r1, [r3, #0]
 800d192:	7833      	ldrb	r3, [r6, #0]
 800d194:	2b2a      	cmp	r3, #42	; 0x2a
 800d196:	d02c      	beq.n	800d1f2 <_vfiprintf_r+0x11e>
 800d198:	0035      	movs	r5, r6
 800d19a:	2100      	movs	r1, #0
 800d19c:	200a      	movs	r0, #10
 800d19e:	68e3      	ldr	r3, [r4, #12]
 800d1a0:	782a      	ldrb	r2, [r5, #0]
 800d1a2:	1c6e      	adds	r6, r5, #1
 800d1a4:	3a30      	subs	r2, #48	; 0x30
 800d1a6:	2a09      	cmp	r2, #9
 800d1a8:	d964      	bls.n	800d274 <_vfiprintf_r+0x1a0>
 800d1aa:	2900      	cmp	r1, #0
 800d1ac:	d02e      	beq.n	800d20c <_vfiprintf_r+0x138>
 800d1ae:	e026      	b.n	800d1fe <_vfiprintf_r+0x12a>
 800d1b0:	4b4d      	ldr	r3, [pc, #308]	; (800d2e8 <_vfiprintf_r+0x214>)
 800d1b2:	429f      	cmp	r7, r3
 800d1b4:	d102      	bne.n	800d1bc <_vfiprintf_r+0xe8>
 800d1b6:	9b03      	ldr	r3, [sp, #12]
 800d1b8:	689f      	ldr	r7, [r3, #8]
 800d1ba:	e79e      	b.n	800d0fa <_vfiprintf_r+0x26>
 800d1bc:	4b4b      	ldr	r3, [pc, #300]	; (800d2ec <_vfiprintf_r+0x218>)
 800d1be:	429f      	cmp	r7, r3
 800d1c0:	d19b      	bne.n	800d0fa <_vfiprintf_r+0x26>
 800d1c2:	9b03      	ldr	r3, [sp, #12]
 800d1c4:	68df      	ldr	r7, [r3, #12]
 800d1c6:	e798      	b.n	800d0fa <_vfiprintf_r+0x26>
 800d1c8:	0039      	movs	r1, r7
 800d1ca:	9803      	ldr	r0, [sp, #12]
 800d1cc:	f7ff fc44 	bl	800ca58 <__swsetup_r>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d098      	beq.n	800d106 <_vfiprintf_r+0x32>
 800d1d4:	2001      	movs	r0, #1
 800d1d6:	4240      	negs	r0, r0
 800d1d8:	b021      	add	sp, #132	; 0x84
 800d1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1dc:	3501      	adds	r5, #1
 800d1de:	e79b      	b.n	800d118 <_vfiprintf_r+0x44>
 800d1e0:	4b40      	ldr	r3, [pc, #256]	; (800d2e4 <_vfiprintf_r+0x210>)
 800d1e2:	6822      	ldr	r2, [r4, #0]
 800d1e4:	1ac0      	subs	r0, r0, r3
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	4083      	lsls	r3, r0
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	002e      	movs	r6, r5
 800d1f0:	e7b8      	b.n	800d164 <_vfiprintf_r+0x90>
 800d1f2:	9b07      	ldr	r3, [sp, #28]
 800d1f4:	1d19      	adds	r1, r3, #4
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	9107      	str	r1, [sp, #28]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	db01      	blt.n	800d202 <_vfiprintf_r+0x12e>
 800d1fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800d200:	e004      	b.n	800d20c <_vfiprintf_r+0x138>
 800d202:	425b      	negs	r3, r3
 800d204:	60e3      	str	r3, [r4, #12]
 800d206:	2302      	movs	r3, #2
 800d208:	4313      	orrs	r3, r2
 800d20a:	6023      	str	r3, [r4, #0]
 800d20c:	782b      	ldrb	r3, [r5, #0]
 800d20e:	2b2e      	cmp	r3, #46	; 0x2e
 800d210:	d10a      	bne.n	800d228 <_vfiprintf_r+0x154>
 800d212:	786b      	ldrb	r3, [r5, #1]
 800d214:	2b2a      	cmp	r3, #42	; 0x2a
 800d216:	d135      	bne.n	800d284 <_vfiprintf_r+0x1b0>
 800d218:	9b07      	ldr	r3, [sp, #28]
 800d21a:	3502      	adds	r5, #2
 800d21c:	1d1a      	adds	r2, r3, #4
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	9207      	str	r2, [sp, #28]
 800d222:	2b00      	cmp	r3, #0
 800d224:	db2b      	blt.n	800d27e <_vfiprintf_r+0x1aa>
 800d226:	9309      	str	r3, [sp, #36]	; 0x24
 800d228:	4e31      	ldr	r6, [pc, #196]	; (800d2f0 <_vfiprintf_r+0x21c>)
 800d22a:	7829      	ldrb	r1, [r5, #0]
 800d22c:	2203      	movs	r2, #3
 800d22e:	0030      	movs	r0, r6
 800d230:	f000 fa98 	bl	800d764 <memchr>
 800d234:	2800      	cmp	r0, #0
 800d236:	d006      	beq.n	800d246 <_vfiprintf_r+0x172>
 800d238:	2340      	movs	r3, #64	; 0x40
 800d23a:	1b80      	subs	r0, r0, r6
 800d23c:	4083      	lsls	r3, r0
 800d23e:	6822      	ldr	r2, [r4, #0]
 800d240:	3501      	adds	r5, #1
 800d242:	4313      	orrs	r3, r2
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	7829      	ldrb	r1, [r5, #0]
 800d248:	2206      	movs	r2, #6
 800d24a:	482a      	ldr	r0, [pc, #168]	; (800d2f4 <_vfiprintf_r+0x220>)
 800d24c:	1c6e      	adds	r6, r5, #1
 800d24e:	7621      	strb	r1, [r4, #24]
 800d250:	f000 fa88 	bl	800d764 <memchr>
 800d254:	2800      	cmp	r0, #0
 800d256:	d03a      	beq.n	800d2ce <_vfiprintf_r+0x1fa>
 800d258:	4b27      	ldr	r3, [pc, #156]	; (800d2f8 <_vfiprintf_r+0x224>)
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d125      	bne.n	800d2aa <_vfiprintf_r+0x1d6>
 800d25e:	2207      	movs	r2, #7
 800d260:	9b07      	ldr	r3, [sp, #28]
 800d262:	3307      	adds	r3, #7
 800d264:	4393      	bics	r3, r2
 800d266:	3308      	adds	r3, #8
 800d268:	9307      	str	r3, [sp, #28]
 800d26a:	6963      	ldr	r3, [r4, #20]
 800d26c:	9a04      	ldr	r2, [sp, #16]
 800d26e:	189b      	adds	r3, r3, r2
 800d270:	6163      	str	r3, [r4, #20]
 800d272:	e750      	b.n	800d116 <_vfiprintf_r+0x42>
 800d274:	4343      	muls	r3, r0
 800d276:	2101      	movs	r1, #1
 800d278:	189b      	adds	r3, r3, r2
 800d27a:	0035      	movs	r5, r6
 800d27c:	e790      	b.n	800d1a0 <_vfiprintf_r+0xcc>
 800d27e:	2301      	movs	r3, #1
 800d280:	425b      	negs	r3, r3
 800d282:	e7d0      	b.n	800d226 <_vfiprintf_r+0x152>
 800d284:	2300      	movs	r3, #0
 800d286:	200a      	movs	r0, #10
 800d288:	001a      	movs	r2, r3
 800d28a:	3501      	adds	r5, #1
 800d28c:	6063      	str	r3, [r4, #4]
 800d28e:	7829      	ldrb	r1, [r5, #0]
 800d290:	1c6e      	adds	r6, r5, #1
 800d292:	3930      	subs	r1, #48	; 0x30
 800d294:	2909      	cmp	r1, #9
 800d296:	d903      	bls.n	800d2a0 <_vfiprintf_r+0x1cc>
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d0c5      	beq.n	800d228 <_vfiprintf_r+0x154>
 800d29c:	9209      	str	r2, [sp, #36]	; 0x24
 800d29e:	e7c3      	b.n	800d228 <_vfiprintf_r+0x154>
 800d2a0:	4342      	muls	r2, r0
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	1852      	adds	r2, r2, r1
 800d2a6:	0035      	movs	r5, r6
 800d2a8:	e7f1      	b.n	800d28e <_vfiprintf_r+0x1ba>
 800d2aa:	ab07      	add	r3, sp, #28
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	003a      	movs	r2, r7
 800d2b0:	4b12      	ldr	r3, [pc, #72]	; (800d2fc <_vfiprintf_r+0x228>)
 800d2b2:	0021      	movs	r1, r4
 800d2b4:	9803      	ldr	r0, [sp, #12]
 800d2b6:	e000      	b.n	800d2ba <_vfiprintf_r+0x1e6>
 800d2b8:	bf00      	nop
 800d2ba:	9004      	str	r0, [sp, #16]
 800d2bc:	9b04      	ldr	r3, [sp, #16]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	d1d3      	bne.n	800d26a <_vfiprintf_r+0x196>
 800d2c2:	89bb      	ldrh	r3, [r7, #12]
 800d2c4:	065b      	lsls	r3, r3, #25
 800d2c6:	d500      	bpl.n	800d2ca <_vfiprintf_r+0x1f6>
 800d2c8:	e784      	b.n	800d1d4 <_vfiprintf_r+0x100>
 800d2ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d2cc:	e784      	b.n	800d1d8 <_vfiprintf_r+0x104>
 800d2ce:	ab07      	add	r3, sp, #28
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	003a      	movs	r2, r7
 800d2d4:	4b09      	ldr	r3, [pc, #36]	; (800d2fc <_vfiprintf_r+0x228>)
 800d2d6:	0021      	movs	r1, r4
 800d2d8:	9803      	ldr	r0, [sp, #12]
 800d2da:	f000 f87f 	bl	800d3dc <_printf_i>
 800d2de:	e7ec      	b.n	800d2ba <_vfiprintf_r+0x1e6>
 800d2e0:	0800f280 	.word	0x0800f280
 800d2e4:	0800f2c0 	.word	0x0800f2c0
 800d2e8:	0800f2a0 	.word	0x0800f2a0
 800d2ec:	0800f260 	.word	0x0800f260
 800d2f0:	0800f2c6 	.word	0x0800f2c6
 800d2f4:	0800f2ca 	.word	0x0800f2ca
 800d2f8:	00000000 	.word	0x00000000
 800d2fc:	0800d0af 	.word	0x0800d0af

0800d300 <_printf_common>:
 800d300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d302:	0015      	movs	r5, r2
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	688a      	ldr	r2, [r1, #8]
 800d308:	690b      	ldr	r3, [r1, #16]
 800d30a:	9000      	str	r0, [sp, #0]
 800d30c:	000c      	movs	r4, r1
 800d30e:	4293      	cmp	r3, r2
 800d310:	da00      	bge.n	800d314 <_printf_common+0x14>
 800d312:	0013      	movs	r3, r2
 800d314:	0022      	movs	r2, r4
 800d316:	602b      	str	r3, [r5, #0]
 800d318:	3243      	adds	r2, #67	; 0x43
 800d31a:	7812      	ldrb	r2, [r2, #0]
 800d31c:	2a00      	cmp	r2, #0
 800d31e:	d001      	beq.n	800d324 <_printf_common+0x24>
 800d320:	3301      	adds	r3, #1
 800d322:	602b      	str	r3, [r5, #0]
 800d324:	6823      	ldr	r3, [r4, #0]
 800d326:	069b      	lsls	r3, r3, #26
 800d328:	d502      	bpl.n	800d330 <_printf_common+0x30>
 800d32a:	682b      	ldr	r3, [r5, #0]
 800d32c:	3302      	adds	r3, #2
 800d32e:	602b      	str	r3, [r5, #0]
 800d330:	2706      	movs	r7, #6
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	401f      	ands	r7, r3
 800d336:	d027      	beq.n	800d388 <_printf_common+0x88>
 800d338:	0023      	movs	r3, r4
 800d33a:	3343      	adds	r3, #67	; 0x43
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	1e5a      	subs	r2, r3, #1
 800d340:	4193      	sbcs	r3, r2
 800d342:	6822      	ldr	r2, [r4, #0]
 800d344:	0692      	lsls	r2, r2, #26
 800d346:	d430      	bmi.n	800d3aa <_printf_common+0xaa>
 800d348:	0022      	movs	r2, r4
 800d34a:	9901      	ldr	r1, [sp, #4]
 800d34c:	3243      	adds	r2, #67	; 0x43
 800d34e:	9800      	ldr	r0, [sp, #0]
 800d350:	9e08      	ldr	r6, [sp, #32]
 800d352:	47b0      	blx	r6
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d025      	beq.n	800d3a4 <_printf_common+0xa4>
 800d358:	2306      	movs	r3, #6
 800d35a:	6820      	ldr	r0, [r4, #0]
 800d35c:	682a      	ldr	r2, [r5, #0]
 800d35e:	68e1      	ldr	r1, [r4, #12]
 800d360:	4003      	ands	r3, r0
 800d362:	2500      	movs	r5, #0
 800d364:	2b04      	cmp	r3, #4
 800d366:	d103      	bne.n	800d370 <_printf_common+0x70>
 800d368:	1a8d      	subs	r5, r1, r2
 800d36a:	43eb      	mvns	r3, r5
 800d36c:	17db      	asrs	r3, r3, #31
 800d36e:	401d      	ands	r5, r3
 800d370:	68a3      	ldr	r3, [r4, #8]
 800d372:	6922      	ldr	r2, [r4, #16]
 800d374:	4293      	cmp	r3, r2
 800d376:	dd01      	ble.n	800d37c <_printf_common+0x7c>
 800d378:	1a9b      	subs	r3, r3, r2
 800d37a:	18ed      	adds	r5, r5, r3
 800d37c:	2700      	movs	r7, #0
 800d37e:	42bd      	cmp	r5, r7
 800d380:	d120      	bne.n	800d3c4 <_printf_common+0xc4>
 800d382:	2000      	movs	r0, #0
 800d384:	e010      	b.n	800d3a8 <_printf_common+0xa8>
 800d386:	3701      	adds	r7, #1
 800d388:	68e3      	ldr	r3, [r4, #12]
 800d38a:	682a      	ldr	r2, [r5, #0]
 800d38c:	1a9b      	subs	r3, r3, r2
 800d38e:	42bb      	cmp	r3, r7
 800d390:	ddd2      	ble.n	800d338 <_printf_common+0x38>
 800d392:	0022      	movs	r2, r4
 800d394:	2301      	movs	r3, #1
 800d396:	3219      	adds	r2, #25
 800d398:	9901      	ldr	r1, [sp, #4]
 800d39a:	9800      	ldr	r0, [sp, #0]
 800d39c:	9e08      	ldr	r6, [sp, #32]
 800d39e:	47b0      	blx	r6
 800d3a0:	1c43      	adds	r3, r0, #1
 800d3a2:	d1f0      	bne.n	800d386 <_printf_common+0x86>
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	4240      	negs	r0, r0
 800d3a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d3aa:	2030      	movs	r0, #48	; 0x30
 800d3ac:	18e1      	adds	r1, r4, r3
 800d3ae:	3143      	adds	r1, #67	; 0x43
 800d3b0:	7008      	strb	r0, [r1, #0]
 800d3b2:	0021      	movs	r1, r4
 800d3b4:	1c5a      	adds	r2, r3, #1
 800d3b6:	3145      	adds	r1, #69	; 0x45
 800d3b8:	7809      	ldrb	r1, [r1, #0]
 800d3ba:	18a2      	adds	r2, r4, r2
 800d3bc:	3243      	adds	r2, #67	; 0x43
 800d3be:	3302      	adds	r3, #2
 800d3c0:	7011      	strb	r1, [r2, #0]
 800d3c2:	e7c1      	b.n	800d348 <_printf_common+0x48>
 800d3c4:	0022      	movs	r2, r4
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	321a      	adds	r2, #26
 800d3ca:	9901      	ldr	r1, [sp, #4]
 800d3cc:	9800      	ldr	r0, [sp, #0]
 800d3ce:	9e08      	ldr	r6, [sp, #32]
 800d3d0:	47b0      	blx	r6
 800d3d2:	1c43      	adds	r3, r0, #1
 800d3d4:	d0e6      	beq.n	800d3a4 <_printf_common+0xa4>
 800d3d6:	3701      	adds	r7, #1
 800d3d8:	e7d1      	b.n	800d37e <_printf_common+0x7e>
	...

0800d3dc <_printf_i>:
 800d3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3de:	b089      	sub	sp, #36	; 0x24
 800d3e0:	9204      	str	r2, [sp, #16]
 800d3e2:	000a      	movs	r2, r1
 800d3e4:	3243      	adds	r2, #67	; 0x43
 800d3e6:	9305      	str	r3, [sp, #20]
 800d3e8:	9003      	str	r0, [sp, #12]
 800d3ea:	9202      	str	r2, [sp, #8]
 800d3ec:	7e0a      	ldrb	r2, [r1, #24]
 800d3ee:	000c      	movs	r4, r1
 800d3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3f2:	2a6e      	cmp	r2, #110	; 0x6e
 800d3f4:	d100      	bne.n	800d3f8 <_printf_i+0x1c>
 800d3f6:	e086      	b.n	800d506 <_printf_i+0x12a>
 800d3f8:	d81f      	bhi.n	800d43a <_printf_i+0x5e>
 800d3fa:	2a63      	cmp	r2, #99	; 0x63
 800d3fc:	d033      	beq.n	800d466 <_printf_i+0x8a>
 800d3fe:	d808      	bhi.n	800d412 <_printf_i+0x36>
 800d400:	2a00      	cmp	r2, #0
 800d402:	d100      	bne.n	800d406 <_printf_i+0x2a>
 800d404:	e08c      	b.n	800d520 <_printf_i+0x144>
 800d406:	2a58      	cmp	r2, #88	; 0x58
 800d408:	d04d      	beq.n	800d4a6 <_printf_i+0xca>
 800d40a:	0025      	movs	r5, r4
 800d40c:	3542      	adds	r5, #66	; 0x42
 800d40e:	702a      	strb	r2, [r5, #0]
 800d410:	e030      	b.n	800d474 <_printf_i+0x98>
 800d412:	2a64      	cmp	r2, #100	; 0x64
 800d414:	d001      	beq.n	800d41a <_printf_i+0x3e>
 800d416:	2a69      	cmp	r2, #105	; 0x69
 800d418:	d1f7      	bne.n	800d40a <_printf_i+0x2e>
 800d41a:	6819      	ldr	r1, [r3, #0]
 800d41c:	6825      	ldr	r5, [r4, #0]
 800d41e:	1d0a      	adds	r2, r1, #4
 800d420:	0628      	lsls	r0, r5, #24
 800d422:	d529      	bpl.n	800d478 <_printf_i+0x9c>
 800d424:	6808      	ldr	r0, [r1, #0]
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	2800      	cmp	r0, #0
 800d42a:	da03      	bge.n	800d434 <_printf_i+0x58>
 800d42c:	232d      	movs	r3, #45	; 0x2d
 800d42e:	9a02      	ldr	r2, [sp, #8]
 800d430:	4240      	negs	r0, r0
 800d432:	7013      	strb	r3, [r2, #0]
 800d434:	4e6b      	ldr	r6, [pc, #428]	; (800d5e4 <_printf_i+0x208>)
 800d436:	270a      	movs	r7, #10
 800d438:	e04f      	b.n	800d4da <_printf_i+0xfe>
 800d43a:	2a73      	cmp	r2, #115	; 0x73
 800d43c:	d074      	beq.n	800d528 <_printf_i+0x14c>
 800d43e:	d808      	bhi.n	800d452 <_printf_i+0x76>
 800d440:	2a6f      	cmp	r2, #111	; 0x6f
 800d442:	d01f      	beq.n	800d484 <_printf_i+0xa8>
 800d444:	2a70      	cmp	r2, #112	; 0x70
 800d446:	d1e0      	bne.n	800d40a <_printf_i+0x2e>
 800d448:	2220      	movs	r2, #32
 800d44a:	6809      	ldr	r1, [r1, #0]
 800d44c:	430a      	orrs	r2, r1
 800d44e:	6022      	str	r2, [r4, #0]
 800d450:	e003      	b.n	800d45a <_printf_i+0x7e>
 800d452:	2a75      	cmp	r2, #117	; 0x75
 800d454:	d016      	beq.n	800d484 <_printf_i+0xa8>
 800d456:	2a78      	cmp	r2, #120	; 0x78
 800d458:	d1d7      	bne.n	800d40a <_printf_i+0x2e>
 800d45a:	0022      	movs	r2, r4
 800d45c:	2178      	movs	r1, #120	; 0x78
 800d45e:	3245      	adds	r2, #69	; 0x45
 800d460:	7011      	strb	r1, [r2, #0]
 800d462:	4e61      	ldr	r6, [pc, #388]	; (800d5e8 <_printf_i+0x20c>)
 800d464:	e022      	b.n	800d4ac <_printf_i+0xd0>
 800d466:	0025      	movs	r5, r4
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	3542      	adds	r5, #66	; 0x42
 800d46c:	1d11      	adds	r1, r2, #4
 800d46e:	6019      	str	r1, [r3, #0]
 800d470:	6813      	ldr	r3, [r2, #0]
 800d472:	702b      	strb	r3, [r5, #0]
 800d474:	2301      	movs	r3, #1
 800d476:	e065      	b.n	800d544 <_printf_i+0x168>
 800d478:	6808      	ldr	r0, [r1, #0]
 800d47a:	601a      	str	r2, [r3, #0]
 800d47c:	0669      	lsls	r1, r5, #25
 800d47e:	d5d3      	bpl.n	800d428 <_printf_i+0x4c>
 800d480:	b200      	sxth	r0, r0
 800d482:	e7d1      	b.n	800d428 <_printf_i+0x4c>
 800d484:	6819      	ldr	r1, [r3, #0]
 800d486:	6825      	ldr	r5, [r4, #0]
 800d488:	1d08      	adds	r0, r1, #4
 800d48a:	6018      	str	r0, [r3, #0]
 800d48c:	6808      	ldr	r0, [r1, #0]
 800d48e:	062e      	lsls	r6, r5, #24
 800d490:	d505      	bpl.n	800d49e <_printf_i+0xc2>
 800d492:	4e54      	ldr	r6, [pc, #336]	; (800d5e4 <_printf_i+0x208>)
 800d494:	2708      	movs	r7, #8
 800d496:	2a6f      	cmp	r2, #111	; 0x6f
 800d498:	d01b      	beq.n	800d4d2 <_printf_i+0xf6>
 800d49a:	270a      	movs	r7, #10
 800d49c:	e019      	b.n	800d4d2 <_printf_i+0xf6>
 800d49e:	066d      	lsls	r5, r5, #25
 800d4a0:	d5f7      	bpl.n	800d492 <_printf_i+0xb6>
 800d4a2:	b280      	uxth	r0, r0
 800d4a4:	e7f5      	b.n	800d492 <_printf_i+0xb6>
 800d4a6:	3145      	adds	r1, #69	; 0x45
 800d4a8:	4e4e      	ldr	r6, [pc, #312]	; (800d5e4 <_printf_i+0x208>)
 800d4aa:	700a      	strb	r2, [r1, #0]
 800d4ac:	6818      	ldr	r0, [r3, #0]
 800d4ae:	6822      	ldr	r2, [r4, #0]
 800d4b0:	1d01      	adds	r1, r0, #4
 800d4b2:	6800      	ldr	r0, [r0, #0]
 800d4b4:	6019      	str	r1, [r3, #0]
 800d4b6:	0615      	lsls	r5, r2, #24
 800d4b8:	d521      	bpl.n	800d4fe <_printf_i+0x122>
 800d4ba:	07d3      	lsls	r3, r2, #31
 800d4bc:	d502      	bpl.n	800d4c4 <_printf_i+0xe8>
 800d4be:	2320      	movs	r3, #32
 800d4c0:	431a      	orrs	r2, r3
 800d4c2:	6022      	str	r2, [r4, #0]
 800d4c4:	2710      	movs	r7, #16
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	d103      	bne.n	800d4d2 <_printf_i+0xf6>
 800d4ca:	2320      	movs	r3, #32
 800d4cc:	6822      	ldr	r2, [r4, #0]
 800d4ce:	439a      	bics	r2, r3
 800d4d0:	6022      	str	r2, [r4, #0]
 800d4d2:	0023      	movs	r3, r4
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	3343      	adds	r3, #67	; 0x43
 800d4d8:	701a      	strb	r2, [r3, #0]
 800d4da:	6863      	ldr	r3, [r4, #4]
 800d4dc:	60a3      	str	r3, [r4, #8]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	db58      	blt.n	800d594 <_printf_i+0x1b8>
 800d4e2:	2204      	movs	r2, #4
 800d4e4:	6821      	ldr	r1, [r4, #0]
 800d4e6:	4391      	bics	r1, r2
 800d4e8:	6021      	str	r1, [r4, #0]
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d154      	bne.n	800d598 <_printf_i+0x1bc>
 800d4ee:	9d02      	ldr	r5, [sp, #8]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d05a      	beq.n	800d5aa <_printf_i+0x1ce>
 800d4f4:	0025      	movs	r5, r4
 800d4f6:	7833      	ldrb	r3, [r6, #0]
 800d4f8:	3542      	adds	r5, #66	; 0x42
 800d4fa:	702b      	strb	r3, [r5, #0]
 800d4fc:	e055      	b.n	800d5aa <_printf_i+0x1ce>
 800d4fe:	0655      	lsls	r5, r2, #25
 800d500:	d5db      	bpl.n	800d4ba <_printf_i+0xde>
 800d502:	b280      	uxth	r0, r0
 800d504:	e7d9      	b.n	800d4ba <_printf_i+0xde>
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	680d      	ldr	r5, [r1, #0]
 800d50a:	1d10      	adds	r0, r2, #4
 800d50c:	6949      	ldr	r1, [r1, #20]
 800d50e:	6018      	str	r0, [r3, #0]
 800d510:	6813      	ldr	r3, [r2, #0]
 800d512:	062e      	lsls	r6, r5, #24
 800d514:	d501      	bpl.n	800d51a <_printf_i+0x13e>
 800d516:	6019      	str	r1, [r3, #0]
 800d518:	e002      	b.n	800d520 <_printf_i+0x144>
 800d51a:	066d      	lsls	r5, r5, #25
 800d51c:	d5fb      	bpl.n	800d516 <_printf_i+0x13a>
 800d51e:	8019      	strh	r1, [r3, #0]
 800d520:	2300      	movs	r3, #0
 800d522:	9d02      	ldr	r5, [sp, #8]
 800d524:	6123      	str	r3, [r4, #16]
 800d526:	e04f      	b.n	800d5c8 <_printf_i+0x1ec>
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	1d11      	adds	r1, r2, #4
 800d52c:	6019      	str	r1, [r3, #0]
 800d52e:	6815      	ldr	r5, [r2, #0]
 800d530:	2100      	movs	r1, #0
 800d532:	6862      	ldr	r2, [r4, #4]
 800d534:	0028      	movs	r0, r5
 800d536:	f000 f915 	bl	800d764 <memchr>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d001      	beq.n	800d542 <_printf_i+0x166>
 800d53e:	1b40      	subs	r0, r0, r5
 800d540:	6060      	str	r0, [r4, #4]
 800d542:	6863      	ldr	r3, [r4, #4]
 800d544:	6123      	str	r3, [r4, #16]
 800d546:	2300      	movs	r3, #0
 800d548:	9a02      	ldr	r2, [sp, #8]
 800d54a:	7013      	strb	r3, [r2, #0]
 800d54c:	e03c      	b.n	800d5c8 <_printf_i+0x1ec>
 800d54e:	6923      	ldr	r3, [r4, #16]
 800d550:	002a      	movs	r2, r5
 800d552:	9904      	ldr	r1, [sp, #16]
 800d554:	9803      	ldr	r0, [sp, #12]
 800d556:	9d05      	ldr	r5, [sp, #20]
 800d558:	47a8      	blx	r5
 800d55a:	1c43      	adds	r3, r0, #1
 800d55c:	d03e      	beq.n	800d5dc <_printf_i+0x200>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	079b      	lsls	r3, r3, #30
 800d562:	d415      	bmi.n	800d590 <_printf_i+0x1b4>
 800d564:	9b07      	ldr	r3, [sp, #28]
 800d566:	68e0      	ldr	r0, [r4, #12]
 800d568:	4298      	cmp	r0, r3
 800d56a:	da39      	bge.n	800d5e0 <_printf_i+0x204>
 800d56c:	0018      	movs	r0, r3
 800d56e:	e037      	b.n	800d5e0 <_printf_i+0x204>
 800d570:	0022      	movs	r2, r4
 800d572:	2301      	movs	r3, #1
 800d574:	3219      	adds	r2, #25
 800d576:	9904      	ldr	r1, [sp, #16]
 800d578:	9803      	ldr	r0, [sp, #12]
 800d57a:	9e05      	ldr	r6, [sp, #20]
 800d57c:	47b0      	blx	r6
 800d57e:	1c43      	adds	r3, r0, #1
 800d580:	d02c      	beq.n	800d5dc <_printf_i+0x200>
 800d582:	3501      	adds	r5, #1
 800d584:	68e3      	ldr	r3, [r4, #12]
 800d586:	9a07      	ldr	r2, [sp, #28]
 800d588:	1a9b      	subs	r3, r3, r2
 800d58a:	42ab      	cmp	r3, r5
 800d58c:	dcf0      	bgt.n	800d570 <_printf_i+0x194>
 800d58e:	e7e9      	b.n	800d564 <_printf_i+0x188>
 800d590:	2500      	movs	r5, #0
 800d592:	e7f7      	b.n	800d584 <_printf_i+0x1a8>
 800d594:	2800      	cmp	r0, #0
 800d596:	d0ad      	beq.n	800d4f4 <_printf_i+0x118>
 800d598:	9d02      	ldr	r5, [sp, #8]
 800d59a:	0039      	movs	r1, r7
 800d59c:	f7f2 fe38 	bl	8000210 <__aeabi_uidivmod>
 800d5a0:	5c73      	ldrb	r3, [r6, r1]
 800d5a2:	3d01      	subs	r5, #1
 800d5a4:	702b      	strb	r3, [r5, #0]
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d1f7      	bne.n	800d59a <_printf_i+0x1be>
 800d5aa:	2f08      	cmp	r7, #8
 800d5ac:	d109      	bne.n	800d5c2 <_printf_i+0x1e6>
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	07db      	lsls	r3, r3, #31
 800d5b2:	d506      	bpl.n	800d5c2 <_printf_i+0x1e6>
 800d5b4:	6863      	ldr	r3, [r4, #4]
 800d5b6:	6922      	ldr	r2, [r4, #16]
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	dc02      	bgt.n	800d5c2 <_printf_i+0x1e6>
 800d5bc:	2330      	movs	r3, #48	; 0x30
 800d5be:	3d01      	subs	r5, #1
 800d5c0:	702b      	strb	r3, [r5, #0]
 800d5c2:	9b02      	ldr	r3, [sp, #8]
 800d5c4:	1b5b      	subs	r3, r3, r5
 800d5c6:	6123      	str	r3, [r4, #16]
 800d5c8:	9b05      	ldr	r3, [sp, #20]
 800d5ca:	aa07      	add	r2, sp, #28
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	0021      	movs	r1, r4
 800d5d0:	9b04      	ldr	r3, [sp, #16]
 800d5d2:	9803      	ldr	r0, [sp, #12]
 800d5d4:	f7ff fe94 	bl	800d300 <_printf_common>
 800d5d8:	1c43      	adds	r3, r0, #1
 800d5da:	d1b8      	bne.n	800d54e <_printf_i+0x172>
 800d5dc:	2001      	movs	r0, #1
 800d5de:	4240      	negs	r0, r0
 800d5e0:	b009      	add	sp, #36	; 0x24
 800d5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e4:	0800f2d1 	.word	0x0800f2d1
 800d5e8:	0800f2e2 	.word	0x0800f2e2

0800d5ec <_sbrk_r>:
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	b570      	push	{r4, r5, r6, lr}
 800d5f0:	4c06      	ldr	r4, [pc, #24]	; (800d60c <_sbrk_r+0x20>)
 800d5f2:	0005      	movs	r5, r0
 800d5f4:	0008      	movs	r0, r1
 800d5f6:	6023      	str	r3, [r4, #0]
 800d5f8:	f7f6 fc64 	bl	8003ec4 <_sbrk>
 800d5fc:	1c43      	adds	r3, r0, #1
 800d5fe:	d103      	bne.n	800d608 <_sbrk_r+0x1c>
 800d600:	6823      	ldr	r3, [r4, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d000      	beq.n	800d608 <_sbrk_r+0x1c>
 800d606:	602b      	str	r3, [r5, #0]
 800d608:	bd70      	pop	{r4, r5, r6, pc}
 800d60a:	46c0      	nop			; (mov r8, r8)
 800d60c:	20001160 	.word	0x20001160

0800d610 <__sread>:
 800d610:	b570      	push	{r4, r5, r6, lr}
 800d612:	000c      	movs	r4, r1
 800d614:	250e      	movs	r5, #14
 800d616:	5f49      	ldrsh	r1, [r1, r5]
 800d618:	f000 f8b2 	bl	800d780 <_read_r>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	db03      	blt.n	800d628 <__sread+0x18>
 800d620:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d622:	181b      	adds	r3, r3, r0
 800d624:	6563      	str	r3, [r4, #84]	; 0x54
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	4a02      	ldr	r2, [pc, #8]	; (800d634 <__sread+0x24>)
 800d62c:	4013      	ands	r3, r2
 800d62e:	81a3      	strh	r3, [r4, #12]
 800d630:	e7f9      	b.n	800d626 <__sread+0x16>
 800d632:	46c0      	nop			; (mov r8, r8)
 800d634:	ffffefff 	.word	0xffffefff

0800d638 <__swrite>:
 800d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63a:	001f      	movs	r7, r3
 800d63c:	898b      	ldrh	r3, [r1, #12]
 800d63e:	0005      	movs	r5, r0
 800d640:	000c      	movs	r4, r1
 800d642:	0016      	movs	r6, r2
 800d644:	05db      	lsls	r3, r3, #23
 800d646:	d505      	bpl.n	800d654 <__swrite+0x1c>
 800d648:	230e      	movs	r3, #14
 800d64a:	5ec9      	ldrsh	r1, [r1, r3]
 800d64c:	2200      	movs	r2, #0
 800d64e:	2302      	movs	r3, #2
 800d650:	f000 f874 	bl	800d73c <_lseek_r>
 800d654:	89a3      	ldrh	r3, [r4, #12]
 800d656:	4a05      	ldr	r2, [pc, #20]	; (800d66c <__swrite+0x34>)
 800d658:	0028      	movs	r0, r5
 800d65a:	4013      	ands	r3, r2
 800d65c:	81a3      	strh	r3, [r4, #12]
 800d65e:	0032      	movs	r2, r6
 800d660:	230e      	movs	r3, #14
 800d662:	5ee1      	ldrsh	r1, [r4, r3]
 800d664:	003b      	movs	r3, r7
 800d666:	f000 f81f 	bl	800d6a8 <_write_r>
 800d66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d66c:	ffffefff 	.word	0xffffefff

0800d670 <__sseek>:
 800d670:	b570      	push	{r4, r5, r6, lr}
 800d672:	000c      	movs	r4, r1
 800d674:	250e      	movs	r5, #14
 800d676:	5f49      	ldrsh	r1, [r1, r5]
 800d678:	f000 f860 	bl	800d73c <_lseek_r>
 800d67c:	89a3      	ldrh	r3, [r4, #12]
 800d67e:	1c42      	adds	r2, r0, #1
 800d680:	d103      	bne.n	800d68a <__sseek+0x1a>
 800d682:	4a05      	ldr	r2, [pc, #20]	; (800d698 <__sseek+0x28>)
 800d684:	4013      	ands	r3, r2
 800d686:	81a3      	strh	r3, [r4, #12]
 800d688:	bd70      	pop	{r4, r5, r6, pc}
 800d68a:	2280      	movs	r2, #128	; 0x80
 800d68c:	0152      	lsls	r2, r2, #5
 800d68e:	4313      	orrs	r3, r2
 800d690:	81a3      	strh	r3, [r4, #12]
 800d692:	6560      	str	r0, [r4, #84]	; 0x54
 800d694:	e7f8      	b.n	800d688 <__sseek+0x18>
 800d696:	46c0      	nop			; (mov r8, r8)
 800d698:	ffffefff 	.word	0xffffefff

0800d69c <__sclose>:
 800d69c:	b510      	push	{r4, lr}
 800d69e:	230e      	movs	r3, #14
 800d6a0:	5ec9      	ldrsh	r1, [r1, r3]
 800d6a2:	f000 f815 	bl	800d6d0 <_close_r>
 800d6a6:	bd10      	pop	{r4, pc}

0800d6a8 <_write_r>:
 800d6a8:	b570      	push	{r4, r5, r6, lr}
 800d6aa:	0005      	movs	r5, r0
 800d6ac:	0008      	movs	r0, r1
 800d6ae:	0011      	movs	r1, r2
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	4c06      	ldr	r4, [pc, #24]	; (800d6cc <_write_r+0x24>)
 800d6b4:	6022      	str	r2, [r4, #0]
 800d6b6:	001a      	movs	r2, r3
 800d6b8:	f7f6 fbbb 	bl	8003e32 <_write>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	d103      	bne.n	800d6c8 <_write_r+0x20>
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d000      	beq.n	800d6c8 <_write_r+0x20>
 800d6c6:	602b      	str	r3, [r5, #0]
 800d6c8:	bd70      	pop	{r4, r5, r6, pc}
 800d6ca:	46c0      	nop			; (mov r8, r8)
 800d6cc:	20001160 	.word	0x20001160

0800d6d0 <_close_r>:
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	b570      	push	{r4, r5, r6, lr}
 800d6d4:	4c06      	ldr	r4, [pc, #24]	; (800d6f0 <_close_r+0x20>)
 800d6d6:	0005      	movs	r5, r0
 800d6d8:	0008      	movs	r0, r1
 800d6da:	6023      	str	r3, [r4, #0]
 800d6dc:	f7f6 fbc5 	bl	8003e6a <_close>
 800d6e0:	1c43      	adds	r3, r0, #1
 800d6e2:	d103      	bne.n	800d6ec <_close_r+0x1c>
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d000      	beq.n	800d6ec <_close_r+0x1c>
 800d6ea:	602b      	str	r3, [r5, #0]
 800d6ec:	bd70      	pop	{r4, r5, r6, pc}
 800d6ee:	46c0      	nop			; (mov r8, r8)
 800d6f0:	20001160 	.word	0x20001160

0800d6f4 <_fstat_r>:
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	b570      	push	{r4, r5, r6, lr}
 800d6f8:	4c06      	ldr	r4, [pc, #24]	; (800d714 <_fstat_r+0x20>)
 800d6fa:	0005      	movs	r5, r0
 800d6fc:	0008      	movs	r0, r1
 800d6fe:	0011      	movs	r1, r2
 800d700:	6023      	str	r3, [r4, #0]
 800d702:	f7f6 fbbc 	bl	8003e7e <_fstat>
 800d706:	1c43      	adds	r3, r0, #1
 800d708:	d103      	bne.n	800d712 <_fstat_r+0x1e>
 800d70a:	6823      	ldr	r3, [r4, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d000      	beq.n	800d712 <_fstat_r+0x1e>
 800d710:	602b      	str	r3, [r5, #0]
 800d712:	bd70      	pop	{r4, r5, r6, pc}
 800d714:	20001160 	.word	0x20001160

0800d718 <_isatty_r>:
 800d718:	2300      	movs	r3, #0
 800d71a:	b570      	push	{r4, r5, r6, lr}
 800d71c:	4c06      	ldr	r4, [pc, #24]	; (800d738 <_isatty_r+0x20>)
 800d71e:	0005      	movs	r5, r0
 800d720:	0008      	movs	r0, r1
 800d722:	6023      	str	r3, [r4, #0]
 800d724:	f7f6 fbb9 	bl	8003e9a <_isatty>
 800d728:	1c43      	adds	r3, r0, #1
 800d72a:	d103      	bne.n	800d734 <_isatty_r+0x1c>
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d000      	beq.n	800d734 <_isatty_r+0x1c>
 800d732:	602b      	str	r3, [r5, #0]
 800d734:	bd70      	pop	{r4, r5, r6, pc}
 800d736:	46c0      	nop			; (mov r8, r8)
 800d738:	20001160 	.word	0x20001160

0800d73c <_lseek_r>:
 800d73c:	b570      	push	{r4, r5, r6, lr}
 800d73e:	0005      	movs	r5, r0
 800d740:	0008      	movs	r0, r1
 800d742:	0011      	movs	r1, r2
 800d744:	2200      	movs	r2, #0
 800d746:	4c06      	ldr	r4, [pc, #24]	; (800d760 <_lseek_r+0x24>)
 800d748:	6022      	str	r2, [r4, #0]
 800d74a:	001a      	movs	r2, r3
 800d74c:	f7f6 fbae 	bl	8003eac <_lseek>
 800d750:	1c43      	adds	r3, r0, #1
 800d752:	d103      	bne.n	800d75c <_lseek_r+0x20>
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d000      	beq.n	800d75c <_lseek_r+0x20>
 800d75a:	602b      	str	r3, [r5, #0]
 800d75c:	bd70      	pop	{r4, r5, r6, pc}
 800d75e:	46c0      	nop			; (mov r8, r8)
 800d760:	20001160 	.word	0x20001160

0800d764 <memchr>:
 800d764:	b2c9      	uxtb	r1, r1
 800d766:	1882      	adds	r2, r0, r2
 800d768:	4290      	cmp	r0, r2
 800d76a:	d101      	bne.n	800d770 <memchr+0xc>
 800d76c:	2000      	movs	r0, #0
 800d76e:	4770      	bx	lr
 800d770:	7803      	ldrb	r3, [r0, #0]
 800d772:	428b      	cmp	r3, r1
 800d774:	d0fb      	beq.n	800d76e <memchr+0xa>
 800d776:	3001      	adds	r0, #1
 800d778:	e7f6      	b.n	800d768 <memchr+0x4>

0800d77a <__malloc_lock>:
 800d77a:	4770      	bx	lr

0800d77c <__malloc_unlock>:
 800d77c:	4770      	bx	lr
	...

0800d780 <_read_r>:
 800d780:	b570      	push	{r4, r5, r6, lr}
 800d782:	0005      	movs	r5, r0
 800d784:	0008      	movs	r0, r1
 800d786:	0011      	movs	r1, r2
 800d788:	2200      	movs	r2, #0
 800d78a:	4c06      	ldr	r4, [pc, #24]	; (800d7a4 <_read_r+0x24>)
 800d78c:	6022      	str	r2, [r4, #0]
 800d78e:	001a      	movs	r2, r3
 800d790:	f7f6 fb32 	bl	8003df8 <_read>
 800d794:	1c43      	adds	r3, r0, #1
 800d796:	d103      	bne.n	800d7a0 <_read_r+0x20>
 800d798:	6823      	ldr	r3, [r4, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d000      	beq.n	800d7a0 <_read_r+0x20>
 800d79e:	602b      	str	r3, [r5, #0]
 800d7a0:	bd70      	pop	{r4, r5, r6, pc}
 800d7a2:	46c0      	nop			; (mov r8, r8)
 800d7a4:	20001160 	.word	0x20001160

0800d7a8 <pow>:
 800d7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7aa:	2400      	movs	r4, #0
 800d7ac:	b091      	sub	sp, #68	; 0x44
 800d7ae:	001f      	movs	r7, r3
 800d7b0:	9000      	str	r0, [sp, #0]
 800d7b2:	9101      	str	r1, [sp, #4]
 800d7b4:	0016      	movs	r6, r2
 800d7b6:	f000 f98d 	bl	800dad4 <__ieee754_pow>
 800d7ba:	4bbe      	ldr	r3, [pc, #760]	; (800dab4 <pow+0x30c>)
 800d7bc:	9002      	str	r0, [sp, #8]
 800d7be:	9103      	str	r1, [sp, #12]
 800d7c0:	571c      	ldrsb	r4, [r3, r4]
 800d7c2:	1c63      	adds	r3, r4, #1
 800d7c4:	d100      	bne.n	800d7c8 <pow+0x20>
 800d7c6:	e0d4      	b.n	800d972 <pow+0x1ca>
 800d7c8:	0032      	movs	r2, r6
 800d7ca:	003b      	movs	r3, r7
 800d7cc:	0030      	movs	r0, r6
 800d7ce:	0039      	movs	r1, r7
 800d7d0:	f7f5 fb90 	bl	8002ef4 <__aeabi_dcmpun>
 800d7d4:	1e05      	subs	r5, r0, #0
 800d7d6:	d000      	beq.n	800d7da <pow+0x32>
 800d7d8:	e0cb      	b.n	800d972 <pow+0x1ca>
 800d7da:	9a00      	ldr	r2, [sp, #0]
 800d7dc:	9b01      	ldr	r3, [sp, #4]
 800d7de:	0010      	movs	r0, r2
 800d7e0:	0019      	movs	r1, r3
 800d7e2:	f7f5 fb87 	bl	8002ef4 <__aeabi_dcmpun>
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	9005      	str	r0, [sp, #20]
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d01e      	beq.n	800d82c <pow+0x84>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	0030      	movs	r0, r6
 800d7f2:	0039      	movs	r1, r7
 800d7f4:	f7f2 fe0c 	bl	8000410 <__aeabi_dcmpeq>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d100      	bne.n	800d7fe <pow+0x56>
 800d7fc:	e0b9      	b.n	800d972 <pow+0x1ca>
 800d7fe:	2301      	movs	r3, #1
 800d800:	9306      	str	r3, [sp, #24]
 800d802:	4bad      	ldr	r3, [pc, #692]	; (800dab8 <pow+0x310>)
 800d804:	950e      	str	r5, [sp, #56]	; 0x38
 800d806:	9307      	str	r3, [sp, #28]
 800d808:	9a00      	ldr	r2, [sp, #0]
 800d80a:	9b01      	ldr	r3, [sp, #4]
 800d80c:	9208      	str	r2, [sp, #32]
 800d80e:	9309      	str	r3, [sp, #36]	; 0x24
 800d810:	2200      	movs	r2, #0
 800d812:	4baa      	ldr	r3, [pc, #680]	; (800dabc <pow+0x314>)
 800d814:	960a      	str	r6, [sp, #40]	; 0x28
 800d816:	970b      	str	r7, [sp, #44]	; 0x2c
 800d818:	920c      	str	r2, [sp, #48]	; 0x30
 800d81a:	930d      	str	r3, [sp, #52]	; 0x34
 800d81c:	2c02      	cmp	r4, #2
 800d81e:	d033      	beq.n	800d888 <pow+0xe0>
 800d820:	a806      	add	r0, sp, #24
 800d822:	f000 ff0b 	bl	800e63c <matherr>
 800d826:	2800      	cmp	r0, #0
 800d828:	d125      	bne.n	800d876 <pow+0xce>
 800d82a:	e059      	b.n	800d8e0 <pow+0x138>
 800d82c:	2300      	movs	r3, #0
 800d82e:	9800      	ldr	r0, [sp, #0]
 800d830:	9901      	ldr	r1, [sp, #4]
 800d832:	f7f2 fded 	bl	8000410 <__aeabi_dcmpeq>
 800d836:	2800      	cmp	r0, #0
 800d838:	d057      	beq.n	800d8ea <pow+0x142>
 800d83a:	2200      	movs	r2, #0
 800d83c:	2300      	movs	r3, #0
 800d83e:	0030      	movs	r0, r6
 800d840:	0039      	movs	r1, r7
 800d842:	f7f2 fde5 	bl	8000410 <__aeabi_dcmpeq>
 800d846:	1e05      	subs	r5, r0, #0
 800d848:	d021      	beq.n	800d88e <pow+0xe6>
 800d84a:	2301      	movs	r3, #1
 800d84c:	9306      	str	r3, [sp, #24]
 800d84e:	4b9a      	ldr	r3, [pc, #616]	; (800dab8 <pow+0x310>)
 800d850:	960a      	str	r6, [sp, #40]	; 0x28
 800d852:	970b      	str	r7, [sp, #44]	; 0x2c
 800d854:	9307      	str	r3, [sp, #28]
 800d856:	9b05      	ldr	r3, [sp, #20]
 800d858:	930e      	str	r3, [sp, #56]	; 0x38
 800d85a:	9a00      	ldr	r2, [sp, #0]
 800d85c:	9b01      	ldr	r3, [sp, #4]
 800d85e:	9208      	str	r2, [sp, #32]
 800d860:	9309      	str	r3, [sp, #36]	; 0x24
 800d862:	2200      	movs	r2, #0
 800d864:	2300      	movs	r3, #0
 800d866:	920c      	str	r2, [sp, #48]	; 0x30
 800d868:	930d      	str	r3, [sp, #52]	; 0x34
 800d86a:	2c00      	cmp	r4, #0
 800d86c:	d0d8      	beq.n	800d820 <pow+0x78>
 800d86e:	2200      	movs	r2, #0
 800d870:	4b92      	ldr	r3, [pc, #584]	; (800dabc <pow+0x314>)
 800d872:	920c      	str	r2, [sp, #48]	; 0x30
 800d874:	930d      	str	r3, [sp, #52]	; 0x34
 800d876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d004      	beq.n	800d888 <pow+0xe0>
 800d87e:	f7fe ffd5 	bl	800c82c <__errno>
 800d882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	6003      	str	r3, [r0, #0]
 800d888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d88a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d88c:	e06f      	b.n	800d96e <pow+0x1c6>
 800d88e:	0030      	movs	r0, r6
 800d890:	0039      	movs	r1, r7
 800d892:	f000 fecb 	bl	800e62c <finite>
 800d896:	2800      	cmp	r0, #0
 800d898:	d06b      	beq.n	800d972 <pow+0x1ca>
 800d89a:	2200      	movs	r2, #0
 800d89c:	2300      	movs	r3, #0
 800d89e:	0030      	movs	r0, r6
 800d8a0:	0039      	movs	r1, r7
 800d8a2:	f7f2 fdbb 	bl	800041c <__aeabi_dcmplt>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d063      	beq.n	800d972 <pow+0x1ca>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	9306      	str	r3, [sp, #24]
 800d8ae:	4b82      	ldr	r3, [pc, #520]	; (800dab8 <pow+0x310>)
 800d8b0:	950e      	str	r5, [sp, #56]	; 0x38
 800d8b2:	9307      	str	r3, [sp, #28]
 800d8b4:	9b00      	ldr	r3, [sp, #0]
 800d8b6:	9c01      	ldr	r4, [sp, #4]
 800d8b8:	9308      	str	r3, [sp, #32]
 800d8ba:	9409      	str	r4, [sp, #36]	; 0x24
 800d8bc:	4b7d      	ldr	r3, [pc, #500]	; (800dab4 <pow+0x30c>)
 800d8be:	960a      	str	r6, [sp, #40]	; 0x28
 800d8c0:	970b      	str	r7, [sp, #44]	; 0x2c
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	b25b      	sxtb	r3, r3
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d104      	bne.n	800d8d4 <pow+0x12c>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	2400      	movs	r4, #0
 800d8ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d8d0:	940d      	str	r4, [sp, #52]	; 0x34
 800d8d2:	e7a5      	b.n	800d820 <pow+0x78>
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	497a      	ldr	r1, [pc, #488]	; (800dac0 <pow+0x318>)
 800d8d8:	900c      	str	r0, [sp, #48]	; 0x30
 800d8da:	910d      	str	r1, [sp, #52]	; 0x34
 800d8dc:	2b02      	cmp	r3, #2
 800d8de:	d19f      	bne.n	800d820 <pow+0x78>
 800d8e0:	f7fe ffa4 	bl	800c82c <__errno>
 800d8e4:	2321      	movs	r3, #33	; 0x21
 800d8e6:	6003      	str	r3, [r0, #0]
 800d8e8:	e7c5      	b.n	800d876 <pow+0xce>
 800d8ea:	9802      	ldr	r0, [sp, #8]
 800d8ec:	9903      	ldr	r1, [sp, #12]
 800d8ee:	f000 fe9d 	bl	800e62c <finite>
 800d8f2:	9005      	str	r0, [sp, #20]
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d000      	beq.n	800d8fa <pow+0x152>
 800d8f8:	e0a5      	b.n	800da46 <pow+0x29e>
 800d8fa:	9800      	ldr	r0, [sp, #0]
 800d8fc:	9901      	ldr	r1, [sp, #4]
 800d8fe:	f000 fe95 	bl	800e62c <finite>
 800d902:	2800      	cmp	r0, #0
 800d904:	d100      	bne.n	800d908 <pow+0x160>
 800d906:	e09e      	b.n	800da46 <pow+0x29e>
 800d908:	0030      	movs	r0, r6
 800d90a:	0039      	movs	r1, r7
 800d90c:	f000 fe8e 	bl	800e62c <finite>
 800d910:	2800      	cmp	r0, #0
 800d912:	d100      	bne.n	800d916 <pow+0x16e>
 800d914:	e097      	b.n	800da46 <pow+0x29e>
 800d916:	2500      	movs	r5, #0
 800d918:	4b66      	ldr	r3, [pc, #408]	; (800dab4 <pow+0x30c>)
 800d91a:	ac06      	add	r4, sp, #24
 800d91c:	575d      	ldrsb	r5, [r3, r5]
 800d91e:	9a02      	ldr	r2, [sp, #8]
 800d920:	9b03      	ldr	r3, [sp, #12]
 800d922:	0019      	movs	r1, r3
 800d924:	0010      	movs	r0, r2
 800d926:	f7f5 fae5 	bl	8002ef4 <__aeabi_dcmpun>
 800d92a:	4b63      	ldr	r3, [pc, #396]	; (800dab8 <pow+0x310>)
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d031      	beq.n	800d994 <pow+0x1ec>
 800d930:	2201      	movs	r2, #1
 800d932:	6063      	str	r3, [r4, #4]
 800d934:	9b05      	ldr	r3, [sp, #20]
 800d936:	9206      	str	r2, [sp, #24]
 800d938:	6223      	str	r3, [r4, #32]
 800d93a:	6126      	str	r6, [r4, #16]
 800d93c:	6167      	str	r7, [r4, #20]
 800d93e:	9a00      	ldr	r2, [sp, #0]
 800d940:	9b01      	ldr	r3, [sp, #4]
 800d942:	60a2      	str	r2, [r4, #8]
 800d944:	60e3      	str	r3, [r4, #12]
 800d946:	2200      	movs	r2, #0
 800d948:	2300      	movs	r3, #0
 800d94a:	2d00      	cmp	r5, #0
 800d94c:	d115      	bne.n	800d97a <pow+0x1d2>
 800d94e:	61a2      	str	r2, [r4, #24]
 800d950:	61e3      	str	r3, [r4, #28]
 800d952:	0020      	movs	r0, r4
 800d954:	f000 fe72 	bl	800e63c <matherr>
 800d958:	2800      	cmp	r0, #0
 800d95a:	d016      	beq.n	800d98a <pow+0x1e2>
 800d95c:	6a23      	ldr	r3, [r4, #32]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d003      	beq.n	800d96a <pow+0x1c2>
 800d962:	f7fe ff63 	bl	800c82c <__errno>
 800d966:	6a23      	ldr	r3, [r4, #32]
 800d968:	6003      	str	r3, [r0, #0]
 800d96a:	69a3      	ldr	r3, [r4, #24]
 800d96c:	69e4      	ldr	r4, [r4, #28]
 800d96e:	9302      	str	r3, [sp, #8]
 800d970:	9403      	str	r4, [sp, #12]
 800d972:	9802      	ldr	r0, [sp, #8]
 800d974:	9903      	ldr	r1, [sp, #12]
 800d976:	b011      	add	sp, #68	; 0x44
 800d978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d97a:	0010      	movs	r0, r2
 800d97c:	0019      	movs	r1, r3
 800d97e:	f7f4 f8f5 	bl	8001b6c <__aeabi_ddiv>
 800d982:	61a0      	str	r0, [r4, #24]
 800d984:	61e1      	str	r1, [r4, #28]
 800d986:	2d02      	cmp	r5, #2
 800d988:	d1e3      	bne.n	800d952 <pow+0x1aa>
 800d98a:	f7fe ff4f 	bl	800c82c <__errno>
 800d98e:	2321      	movs	r3, #33	; 0x21
 800d990:	6003      	str	r3, [r0, #0]
 800d992:	e7e3      	b.n	800d95c <pow+0x1b4>
 800d994:	2203      	movs	r2, #3
 800d996:	6126      	str	r6, [r4, #16]
 800d998:	6167      	str	r7, [r4, #20]
 800d99a:	9206      	str	r2, [sp, #24]
 800d99c:	6063      	str	r3, [r4, #4]
 800d99e:	6220      	str	r0, [r4, #32]
 800d9a0:	9a00      	ldr	r2, [sp, #0]
 800d9a2:	9b01      	ldr	r3, [sp, #4]
 800d9a4:	0030      	movs	r0, r6
 800d9a6:	60a2      	str	r2, [r4, #8]
 800d9a8:	60e3      	str	r3, [r4, #12]
 800d9aa:	0039      	movs	r1, r7
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	4b45      	ldr	r3, [pc, #276]	; (800dac4 <pow+0x31c>)
 800d9b0:	f7f4 fce6 	bl	8002380 <__aeabi_dmul>
 800d9b4:	0006      	movs	r6, r0
 800d9b6:	000f      	movs	r7, r1
 800d9b8:	2d00      	cmp	r5, #0
 800d9ba:	d124      	bne.n	800da06 <pow+0x25e>
 800d9bc:	9800      	ldr	r0, [sp, #0]
 800d9be:	9901      	ldr	r1, [sp, #4]
 800d9c0:	22e0      	movs	r2, #224	; 0xe0
 800d9c2:	4b41      	ldr	r3, [pc, #260]	; (800dac8 <pow+0x320>)
 800d9c4:	0612      	lsls	r2, r2, #24
 800d9c6:	61a2      	str	r2, [r4, #24]
 800d9c8:	61e3      	str	r3, [r4, #28]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	f7f2 fd25 	bl	800041c <__aeabi_dcmplt>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d030      	beq.n	800da38 <pow+0x290>
 800d9d6:	0030      	movs	r0, r6
 800d9d8:	0039      	movs	r1, r7
 800d9da:	f000 fe37 	bl	800e64c <rint>
 800d9de:	0032      	movs	r2, r6
 800d9e0:	003b      	movs	r3, r7
 800d9e2:	f7f2 fd15 	bl	8000410 <__aeabi_dcmpeq>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d104      	bne.n	800d9f4 <pow+0x24c>
 800d9ea:	22e0      	movs	r2, #224	; 0xe0
 800d9ec:	4b37      	ldr	r3, [pc, #220]	; (800dacc <pow+0x324>)
 800d9ee:	0612      	lsls	r2, r2, #24
 800d9f0:	61a2      	str	r2, [r4, #24]
 800d9f2:	61e3      	str	r3, [r4, #28]
 800d9f4:	4b2f      	ldr	r3, [pc, #188]	; (800dab4 <pow+0x30c>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	b25b      	sxtb	r3, r3
 800d9fa:	2b02      	cmp	r3, #2
 800d9fc:	d11c      	bne.n	800da38 <pow+0x290>
 800d9fe:	f7fe ff15 	bl	800c82c <__errno>
 800da02:	2322      	movs	r3, #34	; 0x22
 800da04:	e7c4      	b.n	800d990 <pow+0x1e8>
 800da06:	2200      	movs	r2, #0
 800da08:	9800      	ldr	r0, [sp, #0]
 800da0a:	9901      	ldr	r1, [sp, #4]
 800da0c:	4b30      	ldr	r3, [pc, #192]	; (800dad0 <pow+0x328>)
 800da0e:	61a2      	str	r2, [r4, #24]
 800da10:	61e3      	str	r3, [r4, #28]
 800da12:	2200      	movs	r2, #0
 800da14:	2300      	movs	r3, #0
 800da16:	f7f2 fd01 	bl	800041c <__aeabi_dcmplt>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d0ea      	beq.n	800d9f4 <pow+0x24c>
 800da1e:	0030      	movs	r0, r6
 800da20:	0039      	movs	r1, r7
 800da22:	f000 fe13 	bl	800e64c <rint>
 800da26:	0032      	movs	r2, r6
 800da28:	003b      	movs	r3, r7
 800da2a:	f7f2 fcf1 	bl	8000410 <__aeabi_dcmpeq>
 800da2e:	2800      	cmp	r0, #0
 800da30:	d1e0      	bne.n	800d9f4 <pow+0x24c>
 800da32:	2200      	movs	r2, #0
 800da34:	4b22      	ldr	r3, [pc, #136]	; (800dac0 <pow+0x318>)
 800da36:	e7db      	b.n	800d9f0 <pow+0x248>
 800da38:	0020      	movs	r0, r4
 800da3a:	f000 fdff 	bl	800e63c <matherr>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d000      	beq.n	800da44 <pow+0x29c>
 800da42:	e78b      	b.n	800d95c <pow+0x1b4>
 800da44:	e7db      	b.n	800d9fe <pow+0x256>
 800da46:	2200      	movs	r2, #0
 800da48:	9802      	ldr	r0, [sp, #8]
 800da4a:	9903      	ldr	r1, [sp, #12]
 800da4c:	2300      	movs	r3, #0
 800da4e:	f7f2 fcdf 	bl	8000410 <__aeabi_dcmpeq>
 800da52:	2800      	cmp	r0, #0
 800da54:	d100      	bne.n	800da58 <pow+0x2b0>
 800da56:	e78c      	b.n	800d972 <pow+0x1ca>
 800da58:	9800      	ldr	r0, [sp, #0]
 800da5a:	9901      	ldr	r1, [sp, #4]
 800da5c:	f000 fde6 	bl	800e62c <finite>
 800da60:	2800      	cmp	r0, #0
 800da62:	d100      	bne.n	800da66 <pow+0x2be>
 800da64:	e785      	b.n	800d972 <pow+0x1ca>
 800da66:	0030      	movs	r0, r6
 800da68:	0039      	movs	r1, r7
 800da6a:	f000 fddf 	bl	800e62c <finite>
 800da6e:	2800      	cmp	r0, #0
 800da70:	d100      	bne.n	800da74 <pow+0x2cc>
 800da72:	e77e      	b.n	800d972 <pow+0x1ca>
 800da74:	2304      	movs	r3, #4
 800da76:	9306      	str	r3, [sp, #24]
 800da78:	4b0f      	ldr	r3, [pc, #60]	; (800dab8 <pow+0x310>)
 800da7a:	960a      	str	r6, [sp, #40]	; 0x28
 800da7c:	970b      	str	r7, [sp, #44]	; 0x2c
 800da7e:	9307      	str	r3, [sp, #28]
 800da80:	2300      	movs	r3, #0
 800da82:	930e      	str	r3, [sp, #56]	; 0x38
 800da84:	9b00      	ldr	r3, [sp, #0]
 800da86:	9c01      	ldr	r4, [sp, #4]
 800da88:	9308      	str	r3, [sp, #32]
 800da8a:	9409      	str	r4, [sp, #36]	; 0x24
 800da8c:	2300      	movs	r3, #0
 800da8e:	2400      	movs	r4, #0
 800da90:	930c      	str	r3, [sp, #48]	; 0x30
 800da92:	940d      	str	r4, [sp, #52]	; 0x34
 800da94:	4b07      	ldr	r3, [pc, #28]	; (800dab4 <pow+0x30c>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	b25b      	sxtb	r3, r3
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d103      	bne.n	800daa6 <pow+0x2fe>
 800da9e:	f7fe fec5 	bl	800c82c <__errno>
 800daa2:	2322      	movs	r3, #34	; 0x22
 800daa4:	e71f      	b.n	800d8e6 <pow+0x13e>
 800daa6:	a806      	add	r0, sp, #24
 800daa8:	f000 fdc8 	bl	800e63c <matherr>
 800daac:	2800      	cmp	r0, #0
 800daae:	d000      	beq.n	800dab2 <pow+0x30a>
 800dab0:	e6e1      	b.n	800d876 <pow+0xce>
 800dab2:	e7f4      	b.n	800da9e <pow+0x2f6>
 800dab4:	20000078 	.word	0x20000078
 800dab8:	0800f2f3 	.word	0x0800f2f3
 800dabc:	3ff00000 	.word	0x3ff00000
 800dac0:	fff00000 	.word	0xfff00000
 800dac4:	3fe00000 	.word	0x3fe00000
 800dac8:	47efffff 	.word	0x47efffff
 800dacc:	c7efffff 	.word	0xc7efffff
 800dad0:	7ff00000 	.word	0x7ff00000

0800dad4 <__ieee754_pow>:
 800dad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dad6:	b095      	sub	sp, #84	; 0x54
 800dad8:	9202      	str	r2, [sp, #8]
 800dada:	9303      	str	r3, [sp, #12]
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	000e      	movs	r6, r1
 800dae0:	9902      	ldr	r1, [sp, #8]
 800dae2:	005d      	lsls	r5, r3, #1
 800dae4:	9304      	str	r3, [sp, #16]
 800dae6:	000b      	movs	r3, r1
 800dae8:	086d      	lsrs	r5, r5, #1
 800daea:	0007      	movs	r7, r0
 800daec:	432b      	orrs	r3, r5
 800daee:	d101      	bne.n	800daf4 <__ieee754_pow+0x20>
 800daf0:	f000 fcad 	bl	800e44e <__ieee754_pow+0x97a>
 800daf4:	4b7e      	ldr	r3, [pc, #504]	; (800dcf0 <__ieee754_pow+0x21c>)
 800daf6:	0074      	lsls	r4, r6, #1
 800daf8:	9608      	str	r6, [sp, #32]
 800dafa:	9000      	str	r0, [sp, #0]
 800dafc:	0864      	lsrs	r4, r4, #1
 800dafe:	469c      	mov	ip, r3
 800db00:	429c      	cmp	r4, r3
 800db02:	dc0b      	bgt.n	800db1c <__ieee754_pow+0x48>
 800db04:	d104      	bne.n	800db10 <__ieee754_pow+0x3c>
 800db06:	2800      	cmp	r0, #0
 800db08:	d108      	bne.n	800db1c <__ieee754_pow+0x48>
 800db0a:	42a5      	cmp	r5, r4
 800db0c:	dc0c      	bgt.n	800db28 <__ieee754_pow+0x54>
 800db0e:	e001      	b.n	800db14 <__ieee754_pow+0x40>
 800db10:	429d      	cmp	r5, r3
 800db12:	dc03      	bgt.n	800db1c <__ieee754_pow+0x48>
 800db14:	4565      	cmp	r5, ip
 800db16:	d10d      	bne.n	800db34 <__ieee754_pow+0x60>
 800db18:	2900      	cmp	r1, #0
 800db1a:	d00b      	beq.n	800db34 <__ieee754_pow+0x60>
 800db1c:	4b75      	ldr	r3, [pc, #468]	; (800dcf4 <__ieee754_pow+0x220>)
 800db1e:	18e4      	adds	r4, r4, r3
 800db20:	4327      	orrs	r7, r4
 800db22:	d101      	bne.n	800db28 <__ieee754_pow+0x54>
 800db24:	f000 fc93 	bl	800e44e <__ieee754_pow+0x97a>
 800db28:	4873      	ldr	r0, [pc, #460]	; (800dcf8 <__ieee754_pow+0x224>)
 800db2a:	f000 fd89 	bl	800e640 <nan>
 800db2e:	9000      	str	r0, [sp, #0]
 800db30:	9101      	str	r1, [sp, #4]
 800db32:	e061      	b.n	800dbf8 <__ieee754_pow+0x124>
 800db34:	2300      	movs	r3, #0
 800db36:	9306      	str	r3, [sp, #24]
 800db38:	2e00      	cmp	r6, #0
 800db3a:	da17      	bge.n	800db6c <__ieee754_pow+0x98>
 800db3c:	4a6f      	ldr	r2, [pc, #444]	; (800dcfc <__ieee754_pow+0x228>)
 800db3e:	4295      	cmp	r5, r2
 800db40:	dc4d      	bgt.n	800dbde <__ieee754_pow+0x10a>
 800db42:	4a6f      	ldr	r2, [pc, #444]	; (800dd00 <__ieee754_pow+0x22c>)
 800db44:	4295      	cmp	r5, r2
 800db46:	dd11      	ble.n	800db6c <__ieee754_pow+0x98>
 800db48:	4b6e      	ldr	r3, [pc, #440]	; (800dd04 <__ieee754_pow+0x230>)
 800db4a:	152a      	asrs	r2, r5, #20
 800db4c:	18d2      	adds	r2, r2, r3
 800db4e:	2a14      	cmp	r2, #20
 800db50:	dd25      	ble.n	800db9e <__ieee754_pow+0xca>
 800db52:	2034      	movs	r0, #52	; 0x34
 800db54:	1a82      	subs	r2, r0, r2
 800db56:	9802      	ldr	r0, [sp, #8]
 800db58:	40d0      	lsrs	r0, r2
 800db5a:	0003      	movs	r3, r0
 800db5c:	4093      	lsls	r3, r2
 800db5e:	428b      	cmp	r3, r1
 800db60:	d104      	bne.n	800db6c <__ieee754_pow+0x98>
 800db62:	2201      	movs	r2, #1
 800db64:	4010      	ands	r0, r2
 800db66:	1892      	adds	r2, r2, r2
 800db68:	1a13      	subs	r3, r2, r0
 800db6a:	9306      	str	r3, [sp, #24]
 800db6c:	2900      	cmp	r1, #0
 800db6e:	d15e      	bne.n	800dc2e <__ieee754_pow+0x15a>
 800db70:	4565      	cmp	r5, ip
 800db72:	d123      	bne.n	800dbbc <__ieee754_pow+0xe8>
 800db74:	4b5f      	ldr	r3, [pc, #380]	; (800dcf4 <__ieee754_pow+0x220>)
 800db76:	18e3      	adds	r3, r4, r3
 800db78:	431f      	orrs	r7, r3
 800db7a:	d101      	bne.n	800db80 <__ieee754_pow+0xac>
 800db7c:	f000 fc67 	bl	800e44e <__ieee754_pow+0x97a>
 800db80:	4b5f      	ldr	r3, [pc, #380]	; (800dd00 <__ieee754_pow+0x22c>)
 800db82:	429c      	cmp	r4, r3
 800db84:	dd2d      	ble.n	800dbe2 <__ieee754_pow+0x10e>
 800db86:	9b02      	ldr	r3, [sp, #8]
 800db88:	9c03      	ldr	r4, [sp, #12]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	9401      	str	r4, [sp, #4]
 800db8e:	9b04      	ldr	r3, [sp, #16]
 800db90:	2b00      	cmp	r3, #0
 800db92:	da31      	bge.n	800dbf8 <__ieee754_pow+0x124>
 800db94:	2300      	movs	r3, #0
 800db96:	2400      	movs	r4, #0
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	9401      	str	r4, [sp, #4]
 800db9c:	e02c      	b.n	800dbf8 <__ieee754_pow+0x124>
 800db9e:	2900      	cmp	r1, #0
 800dba0:	d145      	bne.n	800dc2e <__ieee754_pow+0x15a>
 800dba2:	2314      	movs	r3, #20
 800dba4:	1a9a      	subs	r2, r3, r2
 800dba6:	002b      	movs	r3, r5
 800dba8:	4113      	asrs	r3, r2
 800dbaa:	0019      	movs	r1, r3
 800dbac:	4091      	lsls	r1, r2
 800dbae:	42a9      	cmp	r1, r5
 800dbb0:	d104      	bne.n	800dbbc <__ieee754_pow+0xe8>
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	1892      	adds	r2, r2, r2
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	9306      	str	r3, [sp, #24]
 800dbbc:	4b52      	ldr	r3, [pc, #328]	; (800dd08 <__ieee754_pow+0x234>)
 800dbbe:	429d      	cmp	r5, r3
 800dbc0:	d11e      	bne.n	800dc00 <__ieee754_pow+0x12c>
 800dbc2:	0038      	movs	r0, r7
 800dbc4:	0031      	movs	r1, r6
 800dbc6:	9b04      	ldr	r3, [sp, #16]
 800dbc8:	9000      	str	r0, [sp, #0]
 800dbca:	9101      	str	r1, [sp, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	da13      	bge.n	800dbf8 <__ieee754_pow+0x124>
 800dbd0:	003a      	movs	r2, r7
 800dbd2:	0033      	movs	r3, r6
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	494c      	ldr	r1, [pc, #304]	; (800dd08 <__ieee754_pow+0x234>)
 800dbd8:	f7f3 ffc8 	bl	8001b6c <__aeabi_ddiv>
 800dbdc:	e7a7      	b.n	800db2e <__ieee754_pow+0x5a>
 800dbde:	2302      	movs	r3, #2
 800dbe0:	e7c3      	b.n	800db6a <__ieee754_pow+0x96>
 800dbe2:	9b04      	ldr	r3, [sp, #16]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	dad5      	bge.n	800db94 <__ieee754_pow+0xc0>
 800dbe8:	2280      	movs	r2, #128	; 0x80
 800dbea:	0612      	lsls	r2, r2, #24
 800dbec:	4694      	mov	ip, r2
 800dbee:	9b02      	ldr	r3, [sp, #8]
 800dbf0:	9300      	str	r3, [sp, #0]
 800dbf2:	9b03      	ldr	r3, [sp, #12]
 800dbf4:	4463      	add	r3, ip
 800dbf6:	9301      	str	r3, [sp, #4]
 800dbf8:	9800      	ldr	r0, [sp, #0]
 800dbfa:	9901      	ldr	r1, [sp, #4]
 800dbfc:	b015      	add	sp, #84	; 0x54
 800dbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc00:	2380      	movs	r3, #128	; 0x80
 800dc02:	9a04      	ldr	r2, [sp, #16]
 800dc04:	05db      	lsls	r3, r3, #23
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d106      	bne.n	800dc18 <__ieee754_pow+0x144>
 800dc0a:	003a      	movs	r2, r7
 800dc0c:	0033      	movs	r3, r6
 800dc0e:	0038      	movs	r0, r7
 800dc10:	0031      	movs	r1, r6
 800dc12:	f7f4 fbb5 	bl	8002380 <__aeabi_dmul>
 800dc16:	e78a      	b.n	800db2e <__ieee754_pow+0x5a>
 800dc18:	4b3c      	ldr	r3, [pc, #240]	; (800dd0c <__ieee754_pow+0x238>)
 800dc1a:	9a04      	ldr	r2, [sp, #16]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d106      	bne.n	800dc2e <__ieee754_pow+0x15a>
 800dc20:	2e00      	cmp	r6, #0
 800dc22:	db04      	blt.n	800dc2e <__ieee754_pow+0x15a>
 800dc24:	0038      	movs	r0, r7
 800dc26:	0031      	movs	r1, r6
 800dc28:	f000 fc4a 	bl	800e4c0 <__ieee754_sqrt>
 800dc2c:	e77f      	b.n	800db2e <__ieee754_pow+0x5a>
 800dc2e:	0038      	movs	r0, r7
 800dc30:	0031      	movs	r1, r6
 800dc32:	f000 fcf7 	bl	800e624 <fabs>
 800dc36:	9000      	str	r0, [sp, #0]
 800dc38:	9101      	str	r1, [sp, #4]
 800dc3a:	2f00      	cmp	r7, #0
 800dc3c:	d12e      	bne.n	800dc9c <__ieee754_pow+0x1c8>
 800dc3e:	2c00      	cmp	r4, #0
 800dc40:	d004      	beq.n	800dc4c <__ieee754_pow+0x178>
 800dc42:	4a31      	ldr	r2, [pc, #196]	; (800dd08 <__ieee754_pow+0x234>)
 800dc44:	00b3      	lsls	r3, r6, #2
 800dc46:	089b      	lsrs	r3, r3, #2
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d127      	bne.n	800dc9c <__ieee754_pow+0x1c8>
 800dc4c:	9b04      	ldr	r3, [sp, #16]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	da07      	bge.n	800dc62 <__ieee754_pow+0x18e>
 800dc52:	9a00      	ldr	r2, [sp, #0]
 800dc54:	9b01      	ldr	r3, [sp, #4]
 800dc56:	2000      	movs	r0, #0
 800dc58:	492b      	ldr	r1, [pc, #172]	; (800dd08 <__ieee754_pow+0x234>)
 800dc5a:	f7f3 ff87 	bl	8001b6c <__aeabi_ddiv>
 800dc5e:	9000      	str	r0, [sp, #0]
 800dc60:	9101      	str	r1, [sp, #4]
 800dc62:	9b08      	ldr	r3, [sp, #32]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	dac7      	bge.n	800dbf8 <__ieee754_pow+0x124>
 800dc68:	4b22      	ldr	r3, [pc, #136]	; (800dcf4 <__ieee754_pow+0x220>)
 800dc6a:	18e4      	adds	r4, r4, r3
 800dc6c:	9b06      	ldr	r3, [sp, #24]
 800dc6e:	431c      	orrs	r4, r3
 800dc70:	d108      	bne.n	800dc84 <__ieee754_pow+0x1b0>
 800dc72:	9a00      	ldr	r2, [sp, #0]
 800dc74:	9b01      	ldr	r3, [sp, #4]
 800dc76:	0010      	movs	r0, r2
 800dc78:	0019      	movs	r1, r3
 800dc7a:	f7f4 fdf3 	bl	8002864 <__aeabi_dsub>
 800dc7e:	0002      	movs	r2, r0
 800dc80:	000b      	movs	r3, r1
 800dc82:	e7a9      	b.n	800dbd8 <__ieee754_pow+0x104>
 800dc84:	9b06      	ldr	r3, [sp, #24]
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d1b6      	bne.n	800dbf8 <__ieee754_pow+0x124>
 800dc8a:	9800      	ldr	r0, [sp, #0]
 800dc8c:	2180      	movs	r1, #128	; 0x80
 800dc8e:	0002      	movs	r2, r0
 800dc90:	9801      	ldr	r0, [sp, #4]
 800dc92:	0609      	lsls	r1, r1, #24
 800dc94:	1843      	adds	r3, r0, r1
 800dc96:	9200      	str	r2, [sp, #0]
 800dc98:	9301      	str	r3, [sp, #4]
 800dc9a:	e7ad      	b.n	800dbf8 <__ieee754_pow+0x124>
 800dc9c:	0ff3      	lsrs	r3, r6, #31
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	9310      	str	r3, [sp, #64]	; 0x40
 800dca2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dca4:	9b06      	ldr	r3, [sp, #24]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	d104      	bne.n	800dcb4 <__ieee754_pow+0x1e0>
 800dcaa:	003a      	movs	r2, r7
 800dcac:	0033      	movs	r3, r6
 800dcae:	0038      	movs	r0, r7
 800dcb0:	0031      	movs	r1, r6
 800dcb2:	e7e2      	b.n	800dc7a <__ieee754_pow+0x1a6>
 800dcb4:	4b16      	ldr	r3, [pc, #88]	; (800dd10 <__ieee754_pow+0x23c>)
 800dcb6:	429d      	cmp	r5, r3
 800dcb8:	dc00      	bgt.n	800dcbc <__ieee754_pow+0x1e8>
 800dcba:	e0f7      	b.n	800deac <__ieee754_pow+0x3d8>
 800dcbc:	4b15      	ldr	r3, [pc, #84]	; (800dd14 <__ieee754_pow+0x240>)
 800dcbe:	429d      	cmp	r5, r3
 800dcc0:	dd0b      	ble.n	800dcda <__ieee754_pow+0x206>
 800dcc2:	4b0f      	ldr	r3, [pc, #60]	; (800dd00 <__ieee754_pow+0x22c>)
 800dcc4:	429c      	cmp	r4, r3
 800dcc6:	dc0e      	bgt.n	800dce6 <__ieee754_pow+0x212>
 800dcc8:	9b04      	ldr	r3, [sp, #16]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	db00      	blt.n	800dcd0 <__ieee754_pow+0x1fc>
 800dcce:	e761      	b.n	800db94 <__ieee754_pow+0xc0>
 800dcd0:	4a11      	ldr	r2, [pc, #68]	; (800dd18 <__ieee754_pow+0x244>)
 800dcd2:	4b12      	ldr	r3, [pc, #72]	; (800dd1c <__ieee754_pow+0x248>)
 800dcd4:	0010      	movs	r0, r2
 800dcd6:	0019      	movs	r1, r3
 800dcd8:	e79b      	b.n	800dc12 <__ieee754_pow+0x13e>
 800dcda:	4b11      	ldr	r3, [pc, #68]	; (800dd20 <__ieee754_pow+0x24c>)
 800dcdc:	429c      	cmp	r4, r3
 800dcde:	ddf3      	ble.n	800dcc8 <__ieee754_pow+0x1f4>
 800dce0:	4b09      	ldr	r3, [pc, #36]	; (800dd08 <__ieee754_pow+0x234>)
 800dce2:	429c      	cmp	r4, r3
 800dce4:	dd1e      	ble.n	800dd24 <__ieee754_pow+0x250>
 800dce6:	9b04      	ldr	r3, [sp, #16]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	dcf1      	bgt.n	800dcd0 <__ieee754_pow+0x1fc>
 800dcec:	e752      	b.n	800db94 <__ieee754_pow+0xc0>
 800dcee:	46c0      	nop			; (mov r8, r8)
 800dcf0:	7ff00000 	.word	0x7ff00000
 800dcf4:	c0100000 	.word	0xc0100000
 800dcf8:	0800f2c5 	.word	0x0800f2c5
 800dcfc:	433fffff 	.word	0x433fffff
 800dd00:	3fefffff 	.word	0x3fefffff
 800dd04:	fffffc01 	.word	0xfffffc01
 800dd08:	3ff00000 	.word	0x3ff00000
 800dd0c:	3fe00000 	.word	0x3fe00000
 800dd10:	41e00000 	.word	0x41e00000
 800dd14:	43f00000 	.word	0x43f00000
 800dd18:	8800759c 	.word	0x8800759c
 800dd1c:	7e37e43c 	.word	0x7e37e43c
 800dd20:	3feffffe 	.word	0x3feffffe
 800dd24:	2200      	movs	r2, #0
 800dd26:	9800      	ldr	r0, [sp, #0]
 800dd28:	9901      	ldr	r1, [sp, #4]
 800dd2a:	4b52      	ldr	r3, [pc, #328]	; (800de74 <__ieee754_pow+0x3a0>)
 800dd2c:	f7f4 fd9a 	bl	8002864 <__aeabi_dsub>
 800dd30:	22c0      	movs	r2, #192	; 0xc0
 800dd32:	4b51      	ldr	r3, [pc, #324]	; (800de78 <__ieee754_pow+0x3a4>)
 800dd34:	05d2      	lsls	r2, r2, #23
 800dd36:	0006      	movs	r6, r0
 800dd38:	000f      	movs	r7, r1
 800dd3a:	f7f4 fb21 	bl	8002380 <__aeabi_dmul>
 800dd3e:	4a4f      	ldr	r2, [pc, #316]	; (800de7c <__ieee754_pow+0x3a8>)
 800dd40:	9000      	str	r0, [sp, #0]
 800dd42:	9101      	str	r1, [sp, #4]
 800dd44:	4b4e      	ldr	r3, [pc, #312]	; (800de80 <__ieee754_pow+0x3ac>)
 800dd46:	0030      	movs	r0, r6
 800dd48:	0039      	movs	r1, r7
 800dd4a:	f7f4 fb19 	bl	8002380 <__aeabi_dmul>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	9004      	str	r0, [sp, #16]
 800dd52:	9105      	str	r1, [sp, #20]
 800dd54:	4b4b      	ldr	r3, [pc, #300]	; (800de84 <__ieee754_pow+0x3b0>)
 800dd56:	0030      	movs	r0, r6
 800dd58:	0039      	movs	r1, r7
 800dd5a:	f7f4 fb11 	bl	8002380 <__aeabi_dmul>
 800dd5e:	0002      	movs	r2, r0
 800dd60:	000b      	movs	r3, r1
 800dd62:	4849      	ldr	r0, [pc, #292]	; (800de88 <__ieee754_pow+0x3b4>)
 800dd64:	4949      	ldr	r1, [pc, #292]	; (800de8c <__ieee754_pow+0x3b8>)
 800dd66:	f7f4 fd7d 	bl	8002864 <__aeabi_dsub>
 800dd6a:	0032      	movs	r2, r6
 800dd6c:	003b      	movs	r3, r7
 800dd6e:	f7f4 fb07 	bl	8002380 <__aeabi_dmul>
 800dd72:	0002      	movs	r2, r0
 800dd74:	000b      	movs	r3, r1
 800dd76:	2000      	movs	r0, #0
 800dd78:	4945      	ldr	r1, [pc, #276]	; (800de90 <__ieee754_pow+0x3bc>)
 800dd7a:	f7f4 fd73 	bl	8002864 <__aeabi_dsub>
 800dd7e:	0032      	movs	r2, r6
 800dd80:	0004      	movs	r4, r0
 800dd82:	000d      	movs	r5, r1
 800dd84:	003b      	movs	r3, r7
 800dd86:	0030      	movs	r0, r6
 800dd88:	0039      	movs	r1, r7
 800dd8a:	f7f4 faf9 	bl	8002380 <__aeabi_dmul>
 800dd8e:	0002      	movs	r2, r0
 800dd90:	000b      	movs	r3, r1
 800dd92:	0020      	movs	r0, r4
 800dd94:	0029      	movs	r1, r5
 800dd96:	f7f4 faf3 	bl	8002380 <__aeabi_dmul>
 800dd9a:	4a3e      	ldr	r2, [pc, #248]	; (800de94 <__ieee754_pow+0x3c0>)
 800dd9c:	4b36      	ldr	r3, [pc, #216]	; (800de78 <__ieee754_pow+0x3a4>)
 800dd9e:	f7f4 faef 	bl	8002380 <__aeabi_dmul>
 800dda2:	0002      	movs	r2, r0
 800dda4:	000b      	movs	r3, r1
 800dda6:	9804      	ldr	r0, [sp, #16]
 800dda8:	9905      	ldr	r1, [sp, #20]
 800ddaa:	f7f4 fd5b 	bl	8002864 <__aeabi_dsub>
 800ddae:	0002      	movs	r2, r0
 800ddb0:	000b      	movs	r3, r1
 800ddb2:	0004      	movs	r4, r0
 800ddb4:	000d      	movs	r5, r1
 800ddb6:	9800      	ldr	r0, [sp, #0]
 800ddb8:	9901      	ldr	r1, [sp, #4]
 800ddba:	f7f3 fbbb 	bl	8001534 <__aeabi_dadd>
 800ddbe:	9a00      	ldr	r2, [sp, #0]
 800ddc0:	9b01      	ldr	r3, [sp, #4]
 800ddc2:	2000      	movs	r0, #0
 800ddc4:	9004      	str	r0, [sp, #16]
 800ddc6:	9105      	str	r1, [sp, #20]
 800ddc8:	f7f4 fd4c 	bl	8002864 <__aeabi_dsub>
 800ddcc:	0002      	movs	r2, r0
 800ddce:	000b      	movs	r3, r1
 800ddd0:	0020      	movs	r0, r4
 800ddd2:	0029      	movs	r1, r5
 800ddd4:	f7f4 fd46 	bl	8002864 <__aeabi_dsub>
 800ddd8:	9b06      	ldr	r3, [sp, #24]
 800ddda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dddc:	3b01      	subs	r3, #1
 800ddde:	0006      	movs	r6, r0
 800dde0:	000f      	movs	r7, r1
 800dde2:	4313      	orrs	r3, r2
 800dde4:	d000      	beq.n	800dde8 <__ieee754_pow+0x314>
 800dde6:	e1de      	b.n	800e1a6 <__ieee754_pow+0x6d2>
 800dde8:	2300      	movs	r3, #0
 800ddea:	4c2b      	ldr	r4, [pc, #172]	; (800de98 <__ieee754_pow+0x3c4>)
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	9401      	str	r4, [sp, #4]
 800ddf0:	9c02      	ldr	r4, [sp, #8]
 800ddf2:	9d03      	ldr	r5, [sp, #12]
 800ddf4:	9802      	ldr	r0, [sp, #8]
 800ddf6:	9903      	ldr	r1, [sp, #12]
 800ddf8:	2400      	movs	r4, #0
 800ddfa:	002b      	movs	r3, r5
 800ddfc:	0022      	movs	r2, r4
 800ddfe:	f7f4 fd31 	bl	8002864 <__aeabi_dsub>
 800de02:	9a04      	ldr	r2, [sp, #16]
 800de04:	9b05      	ldr	r3, [sp, #20]
 800de06:	f7f4 fabb 	bl	8002380 <__aeabi_dmul>
 800de0a:	9a02      	ldr	r2, [sp, #8]
 800de0c:	9b03      	ldr	r3, [sp, #12]
 800de0e:	9006      	str	r0, [sp, #24]
 800de10:	9107      	str	r1, [sp, #28]
 800de12:	0030      	movs	r0, r6
 800de14:	0039      	movs	r1, r7
 800de16:	f7f4 fab3 	bl	8002380 <__aeabi_dmul>
 800de1a:	0002      	movs	r2, r0
 800de1c:	000b      	movs	r3, r1
 800de1e:	9806      	ldr	r0, [sp, #24]
 800de20:	9907      	ldr	r1, [sp, #28]
 800de22:	f7f3 fb87 	bl	8001534 <__aeabi_dadd>
 800de26:	0022      	movs	r2, r4
 800de28:	002b      	movs	r3, r5
 800de2a:	9006      	str	r0, [sp, #24]
 800de2c:	9107      	str	r1, [sp, #28]
 800de2e:	9804      	ldr	r0, [sp, #16]
 800de30:	9905      	ldr	r1, [sp, #20]
 800de32:	f7f4 faa5 	bl	8002380 <__aeabi_dmul>
 800de36:	0006      	movs	r6, r0
 800de38:	000f      	movs	r7, r1
 800de3a:	000b      	movs	r3, r1
 800de3c:	0002      	movs	r2, r0
 800de3e:	9806      	ldr	r0, [sp, #24]
 800de40:	9907      	ldr	r1, [sp, #28]
 800de42:	9604      	str	r6, [sp, #16]
 800de44:	9705      	str	r7, [sp, #20]
 800de46:	f7f3 fb75 	bl	8001534 <__aeabi_dadd>
 800de4a:	4b14      	ldr	r3, [pc, #80]	; (800de9c <__ieee754_pow+0x3c8>)
 800de4c:	0005      	movs	r5, r0
 800de4e:	000c      	movs	r4, r1
 800de50:	9108      	str	r1, [sp, #32]
 800de52:	4299      	cmp	r1, r3
 800de54:	dc00      	bgt.n	800de58 <__ieee754_pow+0x384>
 800de56:	e2d8      	b.n	800e40a <__ieee754_pow+0x936>
 800de58:	4b11      	ldr	r3, [pc, #68]	; (800dea0 <__ieee754_pow+0x3cc>)
 800de5a:	18cb      	adds	r3, r1, r3
 800de5c:	4303      	orrs	r3, r0
 800de5e:	d100      	bne.n	800de62 <__ieee754_pow+0x38e>
 800de60:	e1da      	b.n	800e218 <__ieee754_pow+0x744>
 800de62:	9800      	ldr	r0, [sp, #0]
 800de64:	9901      	ldr	r1, [sp, #4]
 800de66:	4a0f      	ldr	r2, [pc, #60]	; (800dea4 <__ieee754_pow+0x3d0>)
 800de68:	4b0f      	ldr	r3, [pc, #60]	; (800dea8 <__ieee754_pow+0x3d4>)
 800de6a:	f7f4 fa89 	bl	8002380 <__aeabi_dmul>
 800de6e:	4a0d      	ldr	r2, [pc, #52]	; (800dea4 <__ieee754_pow+0x3d0>)
 800de70:	4b0d      	ldr	r3, [pc, #52]	; (800dea8 <__ieee754_pow+0x3d4>)
 800de72:	e6ce      	b.n	800dc12 <__ieee754_pow+0x13e>
 800de74:	3ff00000 	.word	0x3ff00000
 800de78:	3ff71547 	.word	0x3ff71547
 800de7c:	f85ddf44 	.word	0xf85ddf44
 800de80:	3e54ae0b 	.word	0x3e54ae0b
 800de84:	3fd00000 	.word	0x3fd00000
 800de88:	55555555 	.word	0x55555555
 800de8c:	3fd55555 	.word	0x3fd55555
 800de90:	3fe00000 	.word	0x3fe00000
 800de94:	652b82fe 	.word	0x652b82fe
 800de98:	bff00000 	.word	0xbff00000
 800de9c:	408fffff 	.word	0x408fffff
 800dea0:	bf700000 	.word	0xbf700000
 800dea4:	8800759c 	.word	0x8800759c
 800dea8:	7e37e43c 	.word	0x7e37e43c
 800deac:	4bbf      	ldr	r3, [pc, #764]	; (800e1ac <__ieee754_pow+0x6d8>)
 800deae:	2200      	movs	r2, #0
 800deb0:	429c      	cmp	r4, r3
 800deb2:	dc0a      	bgt.n	800deca <__ieee754_pow+0x3f6>
 800deb4:	9800      	ldr	r0, [sp, #0]
 800deb6:	9901      	ldr	r1, [sp, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	4bbd      	ldr	r3, [pc, #756]	; (800e1b0 <__ieee754_pow+0x6dc>)
 800debc:	f7f4 fa60 	bl	8002380 <__aeabi_dmul>
 800dec0:	2235      	movs	r2, #53	; 0x35
 800dec2:	9000      	str	r0, [sp, #0]
 800dec4:	9101      	str	r1, [sp, #4]
 800dec6:	9c01      	ldr	r4, [sp, #4]
 800dec8:	4252      	negs	r2, r2
 800deca:	49ba      	ldr	r1, [pc, #744]	; (800e1b4 <__ieee754_pow+0x6e0>)
 800decc:	1523      	asrs	r3, r4, #20
 800dece:	185b      	adds	r3, r3, r1
 800ded0:	189b      	adds	r3, r3, r2
 800ded2:	0324      	lsls	r4, r4, #12
 800ded4:	4db8      	ldr	r5, [pc, #736]	; (800e1b8 <__ieee754_pow+0x6e4>)
 800ded6:	4ab9      	ldr	r2, [pc, #740]	; (800e1bc <__ieee754_pow+0x6e8>)
 800ded8:	930d      	str	r3, [sp, #52]	; 0x34
 800deda:	0b23      	lsrs	r3, r4, #12
 800dedc:	431d      	orrs	r5, r3
 800dede:	2400      	movs	r4, #0
 800dee0:	4293      	cmp	r3, r2
 800dee2:	dd09      	ble.n	800def8 <__ieee754_pow+0x424>
 800dee4:	4ab6      	ldr	r2, [pc, #728]	; (800e1c0 <__ieee754_pow+0x6ec>)
 800dee6:	3401      	adds	r4, #1
 800dee8:	4293      	cmp	r3, r2
 800deea:	dd05      	ble.n	800def8 <__ieee754_pow+0x424>
 800deec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800deee:	191b      	adds	r3, r3, r4
 800def0:	2400      	movs	r4, #0
 800def2:	930d      	str	r3, [sp, #52]	; 0x34
 800def4:	4bb3      	ldr	r3, [pc, #716]	; (800e1c4 <__ieee754_pow+0x6f0>)
 800def6:	18ed      	adds	r5, r5, r3
 800def8:	9800      	ldr	r0, [sp, #0]
 800defa:	9901      	ldr	r1, [sp, #4]
 800defc:	0029      	movs	r1, r5
 800defe:	00e3      	lsls	r3, r4, #3
 800df00:	9311      	str	r3, [sp, #68]	; 0x44
 800df02:	4bb1      	ldr	r3, [pc, #708]	; (800e1c8 <__ieee754_pow+0x6f4>)
 800df04:	00e2      	lsls	r2, r4, #3
 800df06:	189b      	adds	r3, r3, r2
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	900e      	str	r0, [sp, #56]	; 0x38
 800df0e:	910f      	str	r1, [sp, #60]	; 0x3c
 800df10:	920a      	str	r2, [sp, #40]	; 0x28
 800df12:	930b      	str	r3, [sp, #44]	; 0x2c
 800df14:	f7f4 fca6 	bl	8002864 <__aeabi_dsub>
 800df18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df1c:	0006      	movs	r6, r0
 800df1e:	000f      	movs	r7, r1
 800df20:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df24:	f7f3 fb06 	bl	8001534 <__aeabi_dadd>
 800df28:	0002      	movs	r2, r0
 800df2a:	000b      	movs	r3, r1
 800df2c:	2000      	movs	r0, #0
 800df2e:	49a2      	ldr	r1, [pc, #648]	; (800e1b8 <__ieee754_pow+0x6e4>)
 800df30:	f7f3 fe1c 	bl	8001b6c <__aeabi_ddiv>
 800df34:	9012      	str	r0, [sp, #72]	; 0x48
 800df36:	9113      	str	r1, [sp, #76]	; 0x4c
 800df38:	0002      	movs	r2, r0
 800df3a:	000b      	movs	r3, r1
 800df3c:	0030      	movs	r0, r6
 800df3e:	0039      	movs	r1, r7
 800df40:	f7f4 fa1e 	bl	8002380 <__aeabi_dmul>
 800df44:	9008      	str	r0, [sp, #32]
 800df46:	9109      	str	r1, [sp, #36]	; 0x24
 800df48:	9a08      	ldr	r2, [sp, #32]
 800df4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df4c:	2180      	movs	r1, #128	; 0x80
 800df4e:	9204      	str	r2, [sp, #16]
 800df50:	9305      	str	r3, [sp, #20]
 800df52:	2300      	movs	r3, #0
 800df54:	0589      	lsls	r1, r1, #22
 800df56:	106d      	asrs	r5, r5, #1
 800df58:	430d      	orrs	r5, r1
 800df5a:	2180      	movs	r1, #128	; 0x80
 800df5c:	9304      	str	r3, [sp, #16]
 800df5e:	9a04      	ldr	r2, [sp, #16]
 800df60:	9b05      	ldr	r3, [sp, #20]
 800df62:	9200      	str	r2, [sp, #0]
 800df64:	9301      	str	r3, [sp, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	0309      	lsls	r1, r1, #12
 800df6a:	186d      	adds	r5, r5, r1
 800df6c:	04a4      	lsls	r4, r4, #18
 800df6e:	192b      	adds	r3, r5, r4
 800df70:	9800      	ldr	r0, [sp, #0]
 800df72:	9901      	ldr	r1, [sp, #4]
 800df74:	0014      	movs	r4, r2
 800df76:	001d      	movs	r5, r3
 800df78:	f7f4 fa02 	bl	8002380 <__aeabi_dmul>
 800df7c:	0002      	movs	r2, r0
 800df7e:	000b      	movs	r3, r1
 800df80:	0030      	movs	r0, r6
 800df82:	0039      	movs	r1, r7
 800df84:	f7f4 fc6e 	bl	8002864 <__aeabi_dsub>
 800df88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df8c:	0006      	movs	r6, r0
 800df8e:	000f      	movs	r7, r1
 800df90:	0020      	movs	r0, r4
 800df92:	0029      	movs	r1, r5
 800df94:	f7f4 fc66 	bl	8002864 <__aeabi_dsub>
 800df98:	0002      	movs	r2, r0
 800df9a:	000b      	movs	r3, r1
 800df9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800df9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dfa0:	f7f4 fc60 	bl	8002864 <__aeabi_dsub>
 800dfa4:	9a00      	ldr	r2, [sp, #0]
 800dfa6:	9b01      	ldr	r3, [sp, #4]
 800dfa8:	f7f4 f9ea 	bl	8002380 <__aeabi_dmul>
 800dfac:	0002      	movs	r2, r0
 800dfae:	000b      	movs	r3, r1
 800dfb0:	0030      	movs	r0, r6
 800dfb2:	0039      	movs	r1, r7
 800dfb4:	f7f4 fc56 	bl	8002864 <__aeabi_dsub>
 800dfb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dfba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dfbc:	f7f4 f9e0 	bl	8002380 <__aeabi_dmul>
 800dfc0:	9a08      	ldr	r2, [sp, #32]
 800dfc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc4:	900a      	str	r0, [sp, #40]	; 0x28
 800dfc6:	910b      	str	r1, [sp, #44]	; 0x2c
 800dfc8:	0010      	movs	r0, r2
 800dfca:	0019      	movs	r1, r3
 800dfcc:	f7f4 f9d8 	bl	8002380 <__aeabi_dmul>
 800dfd0:	0006      	movs	r6, r0
 800dfd2:	000f      	movs	r7, r1
 800dfd4:	4a7d      	ldr	r2, [pc, #500]	; (800e1cc <__ieee754_pow+0x6f8>)
 800dfd6:	4b7e      	ldr	r3, [pc, #504]	; (800e1d0 <__ieee754_pow+0x6fc>)
 800dfd8:	f7f4 f9d2 	bl	8002380 <__aeabi_dmul>
 800dfdc:	4a7d      	ldr	r2, [pc, #500]	; (800e1d4 <__ieee754_pow+0x700>)
 800dfde:	4b7e      	ldr	r3, [pc, #504]	; (800e1d8 <__ieee754_pow+0x704>)
 800dfe0:	f7f3 faa8 	bl	8001534 <__aeabi_dadd>
 800dfe4:	0032      	movs	r2, r6
 800dfe6:	003b      	movs	r3, r7
 800dfe8:	f7f4 f9ca 	bl	8002380 <__aeabi_dmul>
 800dfec:	4a7b      	ldr	r2, [pc, #492]	; (800e1dc <__ieee754_pow+0x708>)
 800dfee:	4b7c      	ldr	r3, [pc, #496]	; (800e1e0 <__ieee754_pow+0x70c>)
 800dff0:	f7f3 faa0 	bl	8001534 <__aeabi_dadd>
 800dff4:	0032      	movs	r2, r6
 800dff6:	003b      	movs	r3, r7
 800dff8:	f7f4 f9c2 	bl	8002380 <__aeabi_dmul>
 800dffc:	4a79      	ldr	r2, [pc, #484]	; (800e1e4 <__ieee754_pow+0x710>)
 800dffe:	4b7a      	ldr	r3, [pc, #488]	; (800e1e8 <__ieee754_pow+0x714>)
 800e000:	f7f3 fa98 	bl	8001534 <__aeabi_dadd>
 800e004:	0032      	movs	r2, r6
 800e006:	003b      	movs	r3, r7
 800e008:	f7f4 f9ba 	bl	8002380 <__aeabi_dmul>
 800e00c:	4a77      	ldr	r2, [pc, #476]	; (800e1ec <__ieee754_pow+0x718>)
 800e00e:	4b78      	ldr	r3, [pc, #480]	; (800e1f0 <__ieee754_pow+0x71c>)
 800e010:	f7f3 fa90 	bl	8001534 <__aeabi_dadd>
 800e014:	0032      	movs	r2, r6
 800e016:	003b      	movs	r3, r7
 800e018:	f7f4 f9b2 	bl	8002380 <__aeabi_dmul>
 800e01c:	4a75      	ldr	r2, [pc, #468]	; (800e1f4 <__ieee754_pow+0x720>)
 800e01e:	4b76      	ldr	r3, [pc, #472]	; (800e1f8 <__ieee754_pow+0x724>)
 800e020:	f7f3 fa88 	bl	8001534 <__aeabi_dadd>
 800e024:	0032      	movs	r2, r6
 800e026:	0004      	movs	r4, r0
 800e028:	000d      	movs	r5, r1
 800e02a:	003b      	movs	r3, r7
 800e02c:	0030      	movs	r0, r6
 800e02e:	0039      	movs	r1, r7
 800e030:	f7f4 f9a6 	bl	8002380 <__aeabi_dmul>
 800e034:	0002      	movs	r2, r0
 800e036:	000b      	movs	r3, r1
 800e038:	0020      	movs	r0, r4
 800e03a:	0029      	movs	r1, r5
 800e03c:	f7f4 f9a0 	bl	8002380 <__aeabi_dmul>
 800e040:	9a00      	ldr	r2, [sp, #0]
 800e042:	9b01      	ldr	r3, [sp, #4]
 800e044:	0004      	movs	r4, r0
 800e046:	000d      	movs	r5, r1
 800e048:	9808      	ldr	r0, [sp, #32]
 800e04a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e04c:	f7f3 fa72 	bl	8001534 <__aeabi_dadd>
 800e050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e054:	f7f4 f994 	bl	8002380 <__aeabi_dmul>
 800e058:	0022      	movs	r2, r4
 800e05a:	002b      	movs	r3, r5
 800e05c:	f7f3 fa6a 	bl	8001534 <__aeabi_dadd>
 800e060:	9a00      	ldr	r2, [sp, #0]
 800e062:	9b01      	ldr	r3, [sp, #4]
 800e064:	900e      	str	r0, [sp, #56]	; 0x38
 800e066:	910f      	str	r1, [sp, #60]	; 0x3c
 800e068:	0010      	movs	r0, r2
 800e06a:	0019      	movs	r1, r3
 800e06c:	f7f4 f988 	bl	8002380 <__aeabi_dmul>
 800e070:	2200      	movs	r2, #0
 800e072:	4b62      	ldr	r3, [pc, #392]	; (800e1fc <__ieee754_pow+0x728>)
 800e074:	0004      	movs	r4, r0
 800e076:	000d      	movs	r5, r1
 800e078:	f7f3 fa5c 	bl	8001534 <__aeabi_dadd>
 800e07c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e07e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e080:	f7f3 fa58 	bl	8001534 <__aeabi_dadd>
 800e084:	9e04      	ldr	r6, [sp, #16]
 800e086:	000f      	movs	r7, r1
 800e088:	0032      	movs	r2, r6
 800e08a:	000b      	movs	r3, r1
 800e08c:	9800      	ldr	r0, [sp, #0]
 800e08e:	9901      	ldr	r1, [sp, #4]
 800e090:	f7f4 f976 	bl	8002380 <__aeabi_dmul>
 800e094:	2200      	movs	r2, #0
 800e096:	9000      	str	r0, [sp, #0]
 800e098:	9101      	str	r1, [sp, #4]
 800e09a:	4b58      	ldr	r3, [pc, #352]	; (800e1fc <__ieee754_pow+0x728>)
 800e09c:	0030      	movs	r0, r6
 800e09e:	0039      	movs	r1, r7
 800e0a0:	f7f4 fbe0 	bl	8002864 <__aeabi_dsub>
 800e0a4:	0022      	movs	r2, r4
 800e0a6:	002b      	movs	r3, r5
 800e0a8:	f7f4 fbdc 	bl	8002864 <__aeabi_dsub>
 800e0ac:	0002      	movs	r2, r0
 800e0ae:	000b      	movs	r3, r1
 800e0b0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e0b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e0b4:	f7f4 fbd6 	bl	8002864 <__aeabi_dsub>
 800e0b8:	9a08      	ldr	r2, [sp, #32]
 800e0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0bc:	f7f4 f960 	bl	8002380 <__aeabi_dmul>
 800e0c0:	0032      	movs	r2, r6
 800e0c2:	0004      	movs	r4, r0
 800e0c4:	000d      	movs	r5, r1
 800e0c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0ca:	003b      	movs	r3, r7
 800e0cc:	f7f4 f958 	bl	8002380 <__aeabi_dmul>
 800e0d0:	0002      	movs	r2, r0
 800e0d2:	000b      	movs	r3, r1
 800e0d4:	0020      	movs	r0, r4
 800e0d6:	0029      	movs	r1, r5
 800e0d8:	f7f3 fa2c 	bl	8001534 <__aeabi_dadd>
 800e0dc:	0004      	movs	r4, r0
 800e0de:	000d      	movs	r5, r1
 800e0e0:	0002      	movs	r2, r0
 800e0e2:	000b      	movs	r3, r1
 800e0e4:	9800      	ldr	r0, [sp, #0]
 800e0e6:	9901      	ldr	r1, [sp, #4]
 800e0e8:	f7f3 fa24 	bl	8001534 <__aeabi_dadd>
 800e0ec:	22e0      	movs	r2, #224	; 0xe0
 800e0ee:	9e04      	ldr	r6, [sp, #16]
 800e0f0:	0612      	lsls	r2, r2, #24
 800e0f2:	4b43      	ldr	r3, [pc, #268]	; (800e200 <__ieee754_pow+0x72c>)
 800e0f4:	0030      	movs	r0, r6
 800e0f6:	000f      	movs	r7, r1
 800e0f8:	f7f4 f942 	bl	8002380 <__aeabi_dmul>
 800e0fc:	9008      	str	r0, [sp, #32]
 800e0fe:	9109      	str	r1, [sp, #36]	; 0x24
 800e100:	9a00      	ldr	r2, [sp, #0]
 800e102:	9b01      	ldr	r3, [sp, #4]
 800e104:	0030      	movs	r0, r6
 800e106:	0039      	movs	r1, r7
 800e108:	f7f4 fbac 	bl	8002864 <__aeabi_dsub>
 800e10c:	0002      	movs	r2, r0
 800e10e:	000b      	movs	r3, r1
 800e110:	0020      	movs	r0, r4
 800e112:	0029      	movs	r1, r5
 800e114:	f7f4 fba6 	bl	8002864 <__aeabi_dsub>
 800e118:	4a3a      	ldr	r2, [pc, #232]	; (800e204 <__ieee754_pow+0x730>)
 800e11a:	4b39      	ldr	r3, [pc, #228]	; (800e200 <__ieee754_pow+0x72c>)
 800e11c:	f7f4 f930 	bl	8002380 <__aeabi_dmul>
 800e120:	4a39      	ldr	r2, [pc, #228]	; (800e208 <__ieee754_pow+0x734>)
 800e122:	0004      	movs	r4, r0
 800e124:	000d      	movs	r5, r1
 800e126:	4b39      	ldr	r3, [pc, #228]	; (800e20c <__ieee754_pow+0x738>)
 800e128:	0030      	movs	r0, r6
 800e12a:	0039      	movs	r1, r7
 800e12c:	f7f4 f928 	bl	8002380 <__aeabi_dmul>
 800e130:	0002      	movs	r2, r0
 800e132:	000b      	movs	r3, r1
 800e134:	0020      	movs	r0, r4
 800e136:	0029      	movs	r1, r5
 800e138:	f7f3 f9fc 	bl	8001534 <__aeabi_dadd>
 800e13c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e13e:	4b34      	ldr	r3, [pc, #208]	; (800e210 <__ieee754_pow+0x73c>)
 800e140:	189b      	adds	r3, r3, r2
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	f7f3 f9f5 	bl	8001534 <__aeabi_dadd>
 800e14a:	9000      	str	r0, [sp, #0]
 800e14c:	9101      	str	r1, [sp, #4]
 800e14e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e150:	f7f4 ff22 	bl	8002f98 <__aeabi_i2d>
 800e154:	0004      	movs	r4, r0
 800e156:	000d      	movs	r5, r1
 800e158:	9808      	ldr	r0, [sp, #32]
 800e15a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e15c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e15e:	4b2d      	ldr	r3, [pc, #180]	; (800e214 <__ieee754_pow+0x740>)
 800e160:	189b      	adds	r3, r3, r2
 800e162:	681e      	ldr	r6, [r3, #0]
 800e164:	685f      	ldr	r7, [r3, #4]
 800e166:	9a00      	ldr	r2, [sp, #0]
 800e168:	9b01      	ldr	r3, [sp, #4]
 800e16a:	f7f3 f9e3 	bl	8001534 <__aeabi_dadd>
 800e16e:	0032      	movs	r2, r6
 800e170:	003b      	movs	r3, r7
 800e172:	f7f3 f9df 	bl	8001534 <__aeabi_dadd>
 800e176:	0022      	movs	r2, r4
 800e178:	002b      	movs	r3, r5
 800e17a:	f7f3 f9db 	bl	8001534 <__aeabi_dadd>
 800e17e:	9804      	ldr	r0, [sp, #16]
 800e180:	0022      	movs	r2, r4
 800e182:	002b      	movs	r3, r5
 800e184:	9004      	str	r0, [sp, #16]
 800e186:	9105      	str	r1, [sp, #20]
 800e188:	f7f4 fb6c 	bl	8002864 <__aeabi_dsub>
 800e18c:	0032      	movs	r2, r6
 800e18e:	003b      	movs	r3, r7
 800e190:	f7f4 fb68 	bl	8002864 <__aeabi_dsub>
 800e194:	9a08      	ldr	r2, [sp, #32]
 800e196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e198:	f7f4 fb64 	bl	8002864 <__aeabi_dsub>
 800e19c:	0002      	movs	r2, r0
 800e19e:	000b      	movs	r3, r1
 800e1a0:	9800      	ldr	r0, [sp, #0]
 800e1a2:	9901      	ldr	r1, [sp, #4]
 800e1a4:	e616      	b.n	800ddd4 <__ieee754_pow+0x300>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	4c03      	ldr	r4, [pc, #12]	; (800e1b8 <__ieee754_pow+0x6e4>)
 800e1aa:	e61f      	b.n	800ddec <__ieee754_pow+0x318>
 800e1ac:	000fffff 	.word	0x000fffff
 800e1b0:	43400000 	.word	0x43400000
 800e1b4:	fffffc01 	.word	0xfffffc01
 800e1b8:	3ff00000 	.word	0x3ff00000
 800e1bc:	0003988e 	.word	0x0003988e
 800e1c0:	000bb679 	.word	0x000bb679
 800e1c4:	fff00000 	.word	0xfff00000
 800e1c8:	0800f2f8 	.word	0x0800f2f8
 800e1cc:	4a454eef 	.word	0x4a454eef
 800e1d0:	3fca7e28 	.word	0x3fca7e28
 800e1d4:	93c9db65 	.word	0x93c9db65
 800e1d8:	3fcd864a 	.word	0x3fcd864a
 800e1dc:	a91d4101 	.word	0xa91d4101
 800e1e0:	3fd17460 	.word	0x3fd17460
 800e1e4:	518f264d 	.word	0x518f264d
 800e1e8:	3fd55555 	.word	0x3fd55555
 800e1ec:	db6fabff 	.word	0xdb6fabff
 800e1f0:	3fdb6db6 	.word	0x3fdb6db6
 800e1f4:	33333303 	.word	0x33333303
 800e1f8:	3fe33333 	.word	0x3fe33333
 800e1fc:	40080000 	.word	0x40080000
 800e200:	3feec709 	.word	0x3feec709
 800e204:	dc3a03fd 	.word	0xdc3a03fd
 800e208:	145b01f5 	.word	0x145b01f5
 800e20c:	be3e2fe0 	.word	0xbe3e2fe0
 800e210:	0800f318 	.word	0x0800f318
 800e214:	0800f308 	.word	0x0800f308
 800e218:	4a8f      	ldr	r2, [pc, #572]	; (800e458 <__ieee754_pow+0x984>)
 800e21a:	4b90      	ldr	r3, [pc, #576]	; (800e45c <__ieee754_pow+0x988>)
 800e21c:	9806      	ldr	r0, [sp, #24]
 800e21e:	9907      	ldr	r1, [sp, #28]
 800e220:	f7f3 f988 	bl	8001534 <__aeabi_dadd>
 800e224:	0032      	movs	r2, r6
 800e226:	9002      	str	r0, [sp, #8]
 800e228:	9103      	str	r1, [sp, #12]
 800e22a:	003b      	movs	r3, r7
 800e22c:	0028      	movs	r0, r5
 800e22e:	0021      	movs	r1, r4
 800e230:	f7f4 fb18 	bl	8002864 <__aeabi_dsub>
 800e234:	0002      	movs	r2, r0
 800e236:	000b      	movs	r3, r1
 800e238:	9802      	ldr	r0, [sp, #8]
 800e23a:	9903      	ldr	r1, [sp, #12]
 800e23c:	f7f2 f902 	bl	8000444 <__aeabi_dcmpgt>
 800e240:	2800      	cmp	r0, #0
 800e242:	d000      	beq.n	800e246 <__ieee754_pow+0x772>
 800e244:	e60d      	b.n	800de62 <__ieee754_pow+0x38e>
 800e246:	2100      	movs	r1, #0
 800e248:	4a85      	ldr	r2, [pc, #532]	; (800e460 <__ieee754_pow+0x98c>)
 800e24a:	0063      	lsls	r3, r4, #1
 800e24c:	085b      	lsrs	r3, r3, #1
 800e24e:	9102      	str	r1, [sp, #8]
 800e250:	4293      	cmp	r3, r2
 800e252:	dd25      	ble.n	800e2a0 <__ieee754_pow+0x7cc>
 800e254:	4a83      	ldr	r2, [pc, #524]	; (800e464 <__ieee754_pow+0x990>)
 800e256:	151b      	asrs	r3, r3, #20
 800e258:	189b      	adds	r3, r3, r2
 800e25a:	2280      	movs	r2, #128	; 0x80
 800e25c:	0352      	lsls	r2, r2, #13
 800e25e:	4694      	mov	ip, r2
 800e260:	411a      	asrs	r2, r3
 800e262:	1914      	adds	r4, r2, r4
 800e264:	0060      	lsls	r0, r4, #1
 800e266:	4b80      	ldr	r3, [pc, #512]	; (800e468 <__ieee754_pow+0x994>)
 800e268:	0d40      	lsrs	r0, r0, #21
 800e26a:	4d80      	ldr	r5, [pc, #512]	; (800e46c <__ieee754_pow+0x998>)
 800e26c:	18c0      	adds	r0, r0, r3
 800e26e:	4105      	asrs	r5, r0
 800e270:	0021      	movs	r1, r4
 800e272:	43a9      	bics	r1, r5
 800e274:	000b      	movs	r3, r1
 800e276:	4661      	mov	r1, ip
 800e278:	0324      	lsls	r4, r4, #12
 800e27a:	0b24      	lsrs	r4, r4, #12
 800e27c:	4321      	orrs	r1, r4
 800e27e:	2414      	movs	r4, #20
 800e280:	1a20      	subs	r0, r4, r0
 800e282:	4101      	asrs	r1, r0
 800e284:	9102      	str	r1, [sp, #8]
 800e286:	9908      	ldr	r1, [sp, #32]
 800e288:	2200      	movs	r2, #0
 800e28a:	2900      	cmp	r1, #0
 800e28c:	da02      	bge.n	800e294 <__ieee754_pow+0x7c0>
 800e28e:	9902      	ldr	r1, [sp, #8]
 800e290:	4249      	negs	r1, r1
 800e292:	9102      	str	r1, [sp, #8]
 800e294:	0030      	movs	r0, r6
 800e296:	0039      	movs	r1, r7
 800e298:	f7f4 fae4 	bl	8002864 <__aeabi_dsub>
 800e29c:	9004      	str	r0, [sp, #16]
 800e29e:	9105      	str	r1, [sp, #20]
 800e2a0:	9a06      	ldr	r2, [sp, #24]
 800e2a2:	9b07      	ldr	r3, [sp, #28]
 800e2a4:	9804      	ldr	r0, [sp, #16]
 800e2a6:	9905      	ldr	r1, [sp, #20]
 800e2a8:	2600      	movs	r6, #0
 800e2aa:	f7f3 f943 	bl	8001534 <__aeabi_dadd>
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	4b6f      	ldr	r3, [pc, #444]	; (800e470 <__ieee754_pow+0x99c>)
 800e2b2:	0030      	movs	r0, r6
 800e2b4:	000f      	movs	r7, r1
 800e2b6:	f7f4 f863 	bl	8002380 <__aeabi_dmul>
 800e2ba:	9a04      	ldr	r2, [sp, #16]
 800e2bc:	9b05      	ldr	r3, [sp, #20]
 800e2be:	9008      	str	r0, [sp, #32]
 800e2c0:	9109      	str	r1, [sp, #36]	; 0x24
 800e2c2:	0030      	movs	r0, r6
 800e2c4:	0039      	movs	r1, r7
 800e2c6:	f7f4 facd 	bl	8002864 <__aeabi_dsub>
 800e2ca:	0002      	movs	r2, r0
 800e2cc:	000b      	movs	r3, r1
 800e2ce:	9806      	ldr	r0, [sp, #24]
 800e2d0:	9907      	ldr	r1, [sp, #28]
 800e2d2:	f7f4 fac7 	bl	8002864 <__aeabi_dsub>
 800e2d6:	4a67      	ldr	r2, [pc, #412]	; (800e474 <__ieee754_pow+0x9a0>)
 800e2d8:	4b67      	ldr	r3, [pc, #412]	; (800e478 <__ieee754_pow+0x9a4>)
 800e2da:	f7f4 f851 	bl	8002380 <__aeabi_dmul>
 800e2de:	4a67      	ldr	r2, [pc, #412]	; (800e47c <__ieee754_pow+0x9a8>)
 800e2e0:	0004      	movs	r4, r0
 800e2e2:	000d      	movs	r5, r1
 800e2e4:	4b66      	ldr	r3, [pc, #408]	; (800e480 <__ieee754_pow+0x9ac>)
 800e2e6:	0030      	movs	r0, r6
 800e2e8:	0039      	movs	r1, r7
 800e2ea:	f7f4 f849 	bl	8002380 <__aeabi_dmul>
 800e2ee:	0002      	movs	r2, r0
 800e2f0:	000b      	movs	r3, r1
 800e2f2:	0020      	movs	r0, r4
 800e2f4:	0029      	movs	r1, r5
 800e2f6:	f7f3 f91d 	bl	8001534 <__aeabi_dadd>
 800e2fa:	0004      	movs	r4, r0
 800e2fc:	000d      	movs	r5, r1
 800e2fe:	0002      	movs	r2, r0
 800e300:	000b      	movs	r3, r1
 800e302:	9808      	ldr	r0, [sp, #32]
 800e304:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e306:	f7f3 f915 	bl	8001534 <__aeabi_dadd>
 800e30a:	9a08      	ldr	r2, [sp, #32]
 800e30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e30e:	0006      	movs	r6, r0
 800e310:	000f      	movs	r7, r1
 800e312:	f7f4 faa7 	bl	8002864 <__aeabi_dsub>
 800e316:	0002      	movs	r2, r0
 800e318:	000b      	movs	r3, r1
 800e31a:	0020      	movs	r0, r4
 800e31c:	0029      	movs	r1, r5
 800e31e:	f7f4 faa1 	bl	8002864 <__aeabi_dsub>
 800e322:	0032      	movs	r2, r6
 800e324:	9004      	str	r0, [sp, #16]
 800e326:	9105      	str	r1, [sp, #20]
 800e328:	003b      	movs	r3, r7
 800e32a:	0030      	movs	r0, r6
 800e32c:	0039      	movs	r1, r7
 800e32e:	f7f4 f827 	bl	8002380 <__aeabi_dmul>
 800e332:	0004      	movs	r4, r0
 800e334:	000d      	movs	r5, r1
 800e336:	4a53      	ldr	r2, [pc, #332]	; (800e484 <__ieee754_pow+0x9b0>)
 800e338:	4b53      	ldr	r3, [pc, #332]	; (800e488 <__ieee754_pow+0x9b4>)
 800e33a:	f7f4 f821 	bl	8002380 <__aeabi_dmul>
 800e33e:	4a53      	ldr	r2, [pc, #332]	; (800e48c <__ieee754_pow+0x9b8>)
 800e340:	4b53      	ldr	r3, [pc, #332]	; (800e490 <__ieee754_pow+0x9bc>)
 800e342:	f7f4 fa8f 	bl	8002864 <__aeabi_dsub>
 800e346:	0022      	movs	r2, r4
 800e348:	002b      	movs	r3, r5
 800e34a:	f7f4 f819 	bl	8002380 <__aeabi_dmul>
 800e34e:	4a51      	ldr	r2, [pc, #324]	; (800e494 <__ieee754_pow+0x9c0>)
 800e350:	4b51      	ldr	r3, [pc, #324]	; (800e498 <__ieee754_pow+0x9c4>)
 800e352:	f7f3 f8ef 	bl	8001534 <__aeabi_dadd>
 800e356:	0022      	movs	r2, r4
 800e358:	002b      	movs	r3, r5
 800e35a:	f7f4 f811 	bl	8002380 <__aeabi_dmul>
 800e35e:	4a4f      	ldr	r2, [pc, #316]	; (800e49c <__ieee754_pow+0x9c8>)
 800e360:	4b4f      	ldr	r3, [pc, #316]	; (800e4a0 <__ieee754_pow+0x9cc>)
 800e362:	f7f4 fa7f 	bl	8002864 <__aeabi_dsub>
 800e366:	0022      	movs	r2, r4
 800e368:	002b      	movs	r3, r5
 800e36a:	f7f4 f809 	bl	8002380 <__aeabi_dmul>
 800e36e:	4a4d      	ldr	r2, [pc, #308]	; (800e4a4 <__ieee754_pow+0x9d0>)
 800e370:	4b4d      	ldr	r3, [pc, #308]	; (800e4a8 <__ieee754_pow+0x9d4>)
 800e372:	f7f3 f8df 	bl	8001534 <__aeabi_dadd>
 800e376:	0022      	movs	r2, r4
 800e378:	002b      	movs	r3, r5
 800e37a:	f7f4 f801 	bl	8002380 <__aeabi_dmul>
 800e37e:	0002      	movs	r2, r0
 800e380:	000b      	movs	r3, r1
 800e382:	0030      	movs	r0, r6
 800e384:	0039      	movs	r1, r7
 800e386:	f7f4 fa6d 	bl	8002864 <__aeabi_dsub>
 800e38a:	0004      	movs	r4, r0
 800e38c:	000d      	movs	r5, r1
 800e38e:	0002      	movs	r2, r0
 800e390:	000b      	movs	r3, r1
 800e392:	0030      	movs	r0, r6
 800e394:	0039      	movs	r1, r7
 800e396:	f7f3 fff3 	bl	8002380 <__aeabi_dmul>
 800e39a:	2380      	movs	r3, #128	; 0x80
 800e39c:	9006      	str	r0, [sp, #24]
 800e39e:	9107      	str	r1, [sp, #28]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	05db      	lsls	r3, r3, #23
 800e3a4:	0020      	movs	r0, r4
 800e3a6:	0029      	movs	r1, r5
 800e3a8:	f7f4 fa5c 	bl	8002864 <__aeabi_dsub>
 800e3ac:	0002      	movs	r2, r0
 800e3ae:	000b      	movs	r3, r1
 800e3b0:	9806      	ldr	r0, [sp, #24]
 800e3b2:	9907      	ldr	r1, [sp, #28]
 800e3b4:	f7f3 fbda 	bl	8001b6c <__aeabi_ddiv>
 800e3b8:	9a04      	ldr	r2, [sp, #16]
 800e3ba:	9b05      	ldr	r3, [sp, #20]
 800e3bc:	0004      	movs	r4, r0
 800e3be:	000d      	movs	r5, r1
 800e3c0:	0030      	movs	r0, r6
 800e3c2:	0039      	movs	r1, r7
 800e3c4:	f7f3 ffdc 	bl	8002380 <__aeabi_dmul>
 800e3c8:	9a04      	ldr	r2, [sp, #16]
 800e3ca:	9b05      	ldr	r3, [sp, #20]
 800e3cc:	f7f3 f8b2 	bl	8001534 <__aeabi_dadd>
 800e3d0:	0002      	movs	r2, r0
 800e3d2:	000b      	movs	r3, r1
 800e3d4:	0020      	movs	r0, r4
 800e3d6:	0029      	movs	r1, r5
 800e3d8:	f7f4 fa44 	bl	8002864 <__aeabi_dsub>
 800e3dc:	0032      	movs	r2, r6
 800e3de:	003b      	movs	r3, r7
 800e3e0:	f7f4 fa40 	bl	8002864 <__aeabi_dsub>
 800e3e4:	0002      	movs	r2, r0
 800e3e6:	000b      	movs	r3, r1
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	4930      	ldr	r1, [pc, #192]	; (800e4ac <__ieee754_pow+0x9d8>)
 800e3ec:	f7f4 fa3a 	bl	8002864 <__aeabi_dsub>
 800e3f0:	9b02      	ldr	r3, [sp, #8]
 800e3f2:	051b      	lsls	r3, r3, #20
 800e3f4:	185b      	adds	r3, r3, r1
 800e3f6:	151a      	asrs	r2, r3, #20
 800e3f8:	2a00      	cmp	r2, #0
 800e3fa:	dc26      	bgt.n	800e44a <__ieee754_pow+0x976>
 800e3fc:	9a02      	ldr	r2, [sp, #8]
 800e3fe:	f000 f9ad 	bl	800e75c <scalbn>
 800e402:	9a00      	ldr	r2, [sp, #0]
 800e404:	9b01      	ldr	r3, [sp, #4]
 800e406:	f7ff fc04 	bl	800dc12 <__ieee754_pow+0x13e>
 800e40a:	4a29      	ldr	r2, [pc, #164]	; (800e4b0 <__ieee754_pow+0x9dc>)
 800e40c:	004b      	lsls	r3, r1, #1
 800e40e:	085b      	lsrs	r3, r3, #1
 800e410:	4293      	cmp	r3, r2
 800e412:	dc00      	bgt.n	800e416 <__ieee754_pow+0x942>
 800e414:	e717      	b.n	800e246 <__ieee754_pow+0x772>
 800e416:	4b27      	ldr	r3, [pc, #156]	; (800e4b4 <__ieee754_pow+0x9e0>)
 800e418:	18cb      	adds	r3, r1, r3
 800e41a:	4303      	orrs	r3, r0
 800e41c:	d009      	beq.n	800e432 <__ieee754_pow+0x95e>
 800e41e:	9800      	ldr	r0, [sp, #0]
 800e420:	9901      	ldr	r1, [sp, #4]
 800e422:	4a25      	ldr	r2, [pc, #148]	; (800e4b8 <__ieee754_pow+0x9e4>)
 800e424:	4b25      	ldr	r3, [pc, #148]	; (800e4bc <__ieee754_pow+0x9e8>)
 800e426:	f7f3 ffab 	bl	8002380 <__aeabi_dmul>
 800e42a:	4a23      	ldr	r2, [pc, #140]	; (800e4b8 <__ieee754_pow+0x9e4>)
 800e42c:	4b23      	ldr	r3, [pc, #140]	; (800e4bc <__ieee754_pow+0x9e8>)
 800e42e:	f7ff fbf0 	bl	800dc12 <__ieee754_pow+0x13e>
 800e432:	0032      	movs	r2, r6
 800e434:	003b      	movs	r3, r7
 800e436:	f7f4 fa15 	bl	8002864 <__aeabi_dsub>
 800e43a:	9a06      	ldr	r2, [sp, #24]
 800e43c:	9b07      	ldr	r3, [sp, #28]
 800e43e:	f7f2 f80b 	bl	8000458 <__aeabi_dcmpge>
 800e442:	2800      	cmp	r0, #0
 800e444:	d100      	bne.n	800e448 <__ieee754_pow+0x974>
 800e446:	e6fe      	b.n	800e246 <__ieee754_pow+0x772>
 800e448:	e7e9      	b.n	800e41e <__ieee754_pow+0x94a>
 800e44a:	0019      	movs	r1, r3
 800e44c:	e7d9      	b.n	800e402 <__ieee754_pow+0x92e>
 800e44e:	2300      	movs	r3, #0
 800e450:	4c16      	ldr	r4, [pc, #88]	; (800e4ac <__ieee754_pow+0x9d8>)
 800e452:	f7ff fba1 	bl	800db98 <__ieee754_pow+0xc4>
 800e456:	46c0      	nop			; (mov r8, r8)
 800e458:	652b82fe 	.word	0x652b82fe
 800e45c:	3c971547 	.word	0x3c971547
 800e460:	3fe00000 	.word	0x3fe00000
 800e464:	fffffc02 	.word	0xfffffc02
 800e468:	fffffc01 	.word	0xfffffc01
 800e46c:	000fffff 	.word	0x000fffff
 800e470:	3fe62e43 	.word	0x3fe62e43
 800e474:	fefa39ef 	.word	0xfefa39ef
 800e478:	3fe62e42 	.word	0x3fe62e42
 800e47c:	0ca86c39 	.word	0x0ca86c39
 800e480:	be205c61 	.word	0xbe205c61
 800e484:	72bea4d0 	.word	0x72bea4d0
 800e488:	3e663769 	.word	0x3e663769
 800e48c:	c5d26bf1 	.word	0xc5d26bf1
 800e490:	3ebbbd41 	.word	0x3ebbbd41
 800e494:	af25de2c 	.word	0xaf25de2c
 800e498:	3f11566a 	.word	0x3f11566a
 800e49c:	16bebd93 	.word	0x16bebd93
 800e4a0:	3f66c16c 	.word	0x3f66c16c
 800e4a4:	5555553e 	.word	0x5555553e
 800e4a8:	3fc55555 	.word	0x3fc55555
 800e4ac:	3ff00000 	.word	0x3ff00000
 800e4b0:	4090cbff 	.word	0x4090cbff
 800e4b4:	3f6f3400 	.word	0x3f6f3400
 800e4b8:	c2f8f359 	.word	0xc2f8f359
 800e4bc:	01a56e1f 	.word	0x01a56e1f

0800e4c0 <__ieee754_sqrt>:
 800e4c0:	4b55      	ldr	r3, [pc, #340]	; (800e618 <__ieee754_sqrt+0x158>)
 800e4c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4c4:	001a      	movs	r2, r3
 800e4c6:	0005      	movs	r5, r0
 800e4c8:	000c      	movs	r4, r1
 800e4ca:	400a      	ands	r2, r1
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d10f      	bne.n	800e4f0 <__ieee754_sqrt+0x30>
 800e4d0:	0002      	movs	r2, r0
 800e4d2:	000b      	movs	r3, r1
 800e4d4:	f7f3 ff54 	bl	8002380 <__aeabi_dmul>
 800e4d8:	0002      	movs	r2, r0
 800e4da:	000b      	movs	r3, r1
 800e4dc:	0028      	movs	r0, r5
 800e4de:	0021      	movs	r1, r4
 800e4e0:	f7f3 f828 	bl	8001534 <__aeabi_dadd>
 800e4e4:	0005      	movs	r5, r0
 800e4e6:	000c      	movs	r4, r1
 800e4e8:	0028      	movs	r0, r5
 800e4ea:	0021      	movs	r1, r4
 800e4ec:	b003      	add	sp, #12
 800e4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4f0:	0002      	movs	r2, r0
 800e4f2:	2900      	cmp	r1, #0
 800e4f4:	dc10      	bgt.n	800e518 <__ieee754_sqrt+0x58>
 800e4f6:	004b      	lsls	r3, r1, #1
 800e4f8:	085b      	lsrs	r3, r3, #1
 800e4fa:	4303      	orrs	r3, r0
 800e4fc:	d0f4      	beq.n	800e4e8 <__ieee754_sqrt+0x28>
 800e4fe:	2000      	movs	r0, #0
 800e500:	4281      	cmp	r1, r0
 800e502:	d100      	bne.n	800e506 <__ieee754_sqrt+0x46>
 800e504:	e07f      	b.n	800e606 <__ieee754_sqrt+0x146>
 800e506:	000b      	movs	r3, r1
 800e508:	0028      	movs	r0, r5
 800e50a:	f7f4 f9ab 	bl	8002864 <__aeabi_dsub>
 800e50e:	0002      	movs	r2, r0
 800e510:	000b      	movs	r3, r1
 800e512:	f7f3 fb2b 	bl	8001b6c <__aeabi_ddiv>
 800e516:	e7e5      	b.n	800e4e4 <__ieee754_sqrt+0x24>
 800e518:	1508      	asrs	r0, r1, #20
 800e51a:	d074      	beq.n	800e606 <__ieee754_sqrt+0x146>
 800e51c:	4b3f      	ldr	r3, [pc, #252]	; (800e61c <__ieee754_sqrt+0x15c>)
 800e51e:	0309      	lsls	r1, r1, #12
 800e520:	18c0      	adds	r0, r0, r3
 800e522:	2380      	movs	r3, #128	; 0x80
 800e524:	0b09      	lsrs	r1, r1, #12
 800e526:	035b      	lsls	r3, r3, #13
 800e528:	4319      	orrs	r1, r3
 800e52a:	07c3      	lsls	r3, r0, #31
 800e52c:	d503      	bpl.n	800e536 <__ieee754_sqrt+0x76>
 800e52e:	0fd3      	lsrs	r3, r2, #31
 800e530:	0049      	lsls	r1, r1, #1
 800e532:	18c9      	adds	r1, r1, r3
 800e534:	0052      	lsls	r2, r2, #1
 800e536:	2400      	movs	r4, #0
 800e538:	1043      	asrs	r3, r0, #1
 800e53a:	0049      	lsls	r1, r1, #1
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	2580      	movs	r5, #128	; 0x80
 800e540:	0fd3      	lsrs	r3, r2, #31
 800e542:	18cb      	adds	r3, r1, r3
 800e544:	0020      	movs	r0, r4
 800e546:	2116      	movs	r1, #22
 800e548:	0052      	lsls	r2, r2, #1
 800e54a:	03ad      	lsls	r5, r5, #14
 800e54c:	1946      	adds	r6, r0, r5
 800e54e:	429e      	cmp	r6, r3
 800e550:	dc02      	bgt.n	800e558 <__ieee754_sqrt+0x98>
 800e552:	1970      	adds	r0, r6, r5
 800e554:	1b9b      	subs	r3, r3, r6
 800e556:	1964      	adds	r4, r4, r5
 800e558:	0fd6      	lsrs	r6, r2, #31
 800e55a:	005b      	lsls	r3, r3, #1
 800e55c:	3901      	subs	r1, #1
 800e55e:	199b      	adds	r3, r3, r6
 800e560:	0052      	lsls	r2, r2, #1
 800e562:	086d      	lsrs	r5, r5, #1
 800e564:	2900      	cmp	r1, #0
 800e566:	d1f1      	bne.n	800e54c <__ieee754_sqrt+0x8c>
 800e568:	2520      	movs	r5, #32
 800e56a:	2680      	movs	r6, #128	; 0x80
 800e56c:	46ac      	mov	ip, r5
 800e56e:	9100      	str	r1, [sp, #0]
 800e570:	0636      	lsls	r6, r6, #24
 800e572:	9d00      	ldr	r5, [sp, #0]
 800e574:	1977      	adds	r7, r6, r5
 800e576:	4283      	cmp	r3, r0
 800e578:	dc02      	bgt.n	800e580 <__ieee754_sqrt+0xc0>
 800e57a:	d112      	bne.n	800e5a2 <__ieee754_sqrt+0xe2>
 800e57c:	4297      	cmp	r7, r2
 800e57e:	d810      	bhi.n	800e5a2 <__ieee754_sqrt+0xe2>
 800e580:	19bd      	adds	r5, r7, r6
 800e582:	9500      	str	r5, [sp, #0]
 800e584:	0005      	movs	r5, r0
 800e586:	2f00      	cmp	r7, #0
 800e588:	da03      	bge.n	800e592 <__ieee754_sqrt+0xd2>
 800e58a:	9d00      	ldr	r5, [sp, #0]
 800e58c:	43ed      	mvns	r5, r5
 800e58e:	0fed      	lsrs	r5, r5, #31
 800e590:	1945      	adds	r5, r0, r5
 800e592:	1a1b      	subs	r3, r3, r0
 800e594:	42ba      	cmp	r2, r7
 800e596:	4180      	sbcs	r0, r0
 800e598:	4240      	negs	r0, r0
 800e59a:	1a1b      	subs	r3, r3, r0
 800e59c:	0028      	movs	r0, r5
 800e59e:	1bd2      	subs	r2, r2, r7
 800e5a0:	1989      	adds	r1, r1, r6
 800e5a2:	0fd5      	lsrs	r5, r2, #31
 800e5a4:	005b      	lsls	r3, r3, #1
 800e5a6:	18eb      	adds	r3, r5, r3
 800e5a8:	2501      	movs	r5, #1
 800e5aa:	426d      	negs	r5, r5
 800e5ac:	44ac      	add	ip, r5
 800e5ae:	4665      	mov	r5, ip
 800e5b0:	0052      	lsls	r2, r2, #1
 800e5b2:	0876      	lsrs	r6, r6, #1
 800e5b4:	2d00      	cmp	r5, #0
 800e5b6:	d1dc      	bne.n	800e572 <__ieee754_sqrt+0xb2>
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	d003      	beq.n	800e5c4 <__ieee754_sqrt+0x104>
 800e5bc:	1c4b      	adds	r3, r1, #1
 800e5be:	d127      	bne.n	800e610 <__ieee754_sqrt+0x150>
 800e5c0:	4661      	mov	r1, ip
 800e5c2:	3401      	adds	r4, #1
 800e5c4:	4b16      	ldr	r3, [pc, #88]	; (800e620 <__ieee754_sqrt+0x160>)
 800e5c6:	1060      	asrs	r0, r4, #1
 800e5c8:	18c0      	adds	r0, r0, r3
 800e5ca:	0849      	lsrs	r1, r1, #1
 800e5cc:	07e3      	lsls	r3, r4, #31
 800e5ce:	d502      	bpl.n	800e5d6 <__ieee754_sqrt+0x116>
 800e5d0:	2380      	movs	r3, #128	; 0x80
 800e5d2:	061b      	lsls	r3, r3, #24
 800e5d4:	4319      	orrs	r1, r3
 800e5d6:	9b01      	ldr	r3, [sp, #4]
 800e5d8:	000d      	movs	r5, r1
 800e5da:	051c      	lsls	r4, r3, #20
 800e5dc:	1823      	adds	r3, r4, r0
 800e5de:	001c      	movs	r4, r3
 800e5e0:	e782      	b.n	800e4e8 <__ieee754_sqrt+0x28>
 800e5e2:	0ad1      	lsrs	r1, r2, #11
 800e5e4:	3b15      	subs	r3, #21
 800e5e6:	0552      	lsls	r2, r2, #21
 800e5e8:	2900      	cmp	r1, #0
 800e5ea:	d0fa      	beq.n	800e5e2 <__ieee754_sqrt+0x122>
 800e5ec:	2480      	movs	r4, #128	; 0x80
 800e5ee:	0364      	lsls	r4, r4, #13
 800e5f0:	4221      	tst	r1, r4
 800e5f2:	d00a      	beq.n	800e60a <__ieee754_sqrt+0x14a>
 800e5f4:	2420      	movs	r4, #32
 800e5f6:	0016      	movs	r6, r2
 800e5f8:	1a24      	subs	r4, r4, r0
 800e5fa:	40e6      	lsrs	r6, r4
 800e5fc:	1e45      	subs	r5, r0, #1
 800e5fe:	4082      	lsls	r2, r0
 800e600:	4331      	orrs	r1, r6
 800e602:	1b58      	subs	r0, r3, r5
 800e604:	e78a      	b.n	800e51c <__ieee754_sqrt+0x5c>
 800e606:	2300      	movs	r3, #0
 800e608:	e7ee      	b.n	800e5e8 <__ieee754_sqrt+0x128>
 800e60a:	0049      	lsls	r1, r1, #1
 800e60c:	3001      	adds	r0, #1
 800e60e:	e7ef      	b.n	800e5f0 <__ieee754_sqrt+0x130>
 800e610:	2301      	movs	r3, #1
 800e612:	3101      	adds	r1, #1
 800e614:	4399      	bics	r1, r3
 800e616:	e7d5      	b.n	800e5c4 <__ieee754_sqrt+0x104>
 800e618:	7ff00000 	.word	0x7ff00000
 800e61c:	fffffc01 	.word	0xfffffc01
 800e620:	3fe00000 	.word	0x3fe00000

0800e624 <fabs>:
 800e624:	0049      	lsls	r1, r1, #1
 800e626:	084b      	lsrs	r3, r1, #1
 800e628:	0019      	movs	r1, r3
 800e62a:	4770      	bx	lr

0800e62c <finite>:
 800e62c:	0048      	lsls	r0, r1, #1
 800e62e:	4b02      	ldr	r3, [pc, #8]	; (800e638 <finite+0xc>)
 800e630:	0840      	lsrs	r0, r0, #1
 800e632:	18c0      	adds	r0, r0, r3
 800e634:	0fc0      	lsrs	r0, r0, #31
 800e636:	4770      	bx	lr
 800e638:	80100000 	.word	0x80100000

0800e63c <matherr>:
 800e63c:	2000      	movs	r0, #0
 800e63e:	4770      	bx	lr

0800e640 <nan>:
 800e640:	2000      	movs	r0, #0
 800e642:	4901      	ldr	r1, [pc, #4]	; (800e648 <nan+0x8>)
 800e644:	4770      	bx	lr
 800e646:	46c0      	nop			; (mov r8, r8)
 800e648:	7ff80000 	.word	0x7ff80000

0800e64c <rint>:
 800e64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e64e:	004a      	lsls	r2, r1, #1
 800e650:	4e3e      	ldr	r6, [pc, #248]	; (800e74c <rint+0x100>)
 800e652:	0d52      	lsrs	r2, r2, #21
 800e654:	b085      	sub	sp, #20
 800e656:	1996      	adds	r6, r2, r6
 800e658:	000d      	movs	r5, r1
 800e65a:	9101      	str	r1, [sp, #4]
 800e65c:	0003      	movs	r3, r0
 800e65e:	0fcc      	lsrs	r4, r1, #31
 800e660:	2e13      	cmp	r6, #19
 800e662:	dc57      	bgt.n	800e714 <rint+0xc8>
 800e664:	2e00      	cmp	r6, #0
 800e666:	da2a      	bge.n	800e6be <rint+0x72>
 800e668:	004a      	lsls	r2, r1, #1
 800e66a:	0852      	lsrs	r2, r2, #1
 800e66c:	4302      	orrs	r2, r0
 800e66e:	d024      	beq.n	800e6ba <rint+0x6e>
 800e670:	030a      	lsls	r2, r1, #12
 800e672:	0b12      	lsrs	r2, r2, #12
 800e674:	4302      	orrs	r2, r0
 800e676:	4253      	negs	r3, r2
 800e678:	4313      	orrs	r3, r2
 800e67a:	2280      	movs	r2, #128	; 0x80
 800e67c:	0c4d      	lsrs	r5, r1, #17
 800e67e:	0312      	lsls	r2, r2, #12
 800e680:	0b1b      	lsrs	r3, r3, #12
 800e682:	4013      	ands	r3, r2
 800e684:	046d      	lsls	r5, r5, #17
 800e686:	432b      	orrs	r3, r5
 800e688:	0019      	movs	r1, r3
 800e68a:	4b31      	ldr	r3, [pc, #196]	; (800e750 <rint+0x104>)
 800e68c:	00e2      	lsls	r2, r4, #3
 800e68e:	189b      	adds	r3, r3, r2
 800e690:	681e      	ldr	r6, [r3, #0]
 800e692:	685f      	ldr	r7, [r3, #4]
 800e694:	0002      	movs	r2, r0
 800e696:	000b      	movs	r3, r1
 800e698:	0030      	movs	r0, r6
 800e69a:	0039      	movs	r1, r7
 800e69c:	f7f2 ff4a 	bl	8001534 <__aeabi_dadd>
 800e6a0:	9002      	str	r0, [sp, #8]
 800e6a2:	9103      	str	r1, [sp, #12]
 800e6a4:	9802      	ldr	r0, [sp, #8]
 800e6a6:	9903      	ldr	r1, [sp, #12]
 800e6a8:	003b      	movs	r3, r7
 800e6aa:	0032      	movs	r2, r6
 800e6ac:	f7f4 f8da 	bl	8002864 <__aeabi_dsub>
 800e6b0:	004b      	lsls	r3, r1, #1
 800e6b2:	085b      	lsrs	r3, r3, #1
 800e6b4:	07e4      	lsls	r4, r4, #31
 800e6b6:	4323      	orrs	r3, r4
 800e6b8:	0019      	movs	r1, r3
 800e6ba:	b005      	add	sp, #20
 800e6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6be:	4a25      	ldr	r2, [pc, #148]	; (800e754 <rint+0x108>)
 800e6c0:	4132      	asrs	r2, r6
 800e6c2:	0017      	movs	r7, r2
 800e6c4:	400f      	ands	r7, r1
 800e6c6:	4307      	orrs	r7, r0
 800e6c8:	d0f7      	beq.n	800e6ba <rint+0x6e>
 800e6ca:	0852      	lsrs	r2, r2, #1
 800e6cc:	0011      	movs	r1, r2
 800e6ce:	4029      	ands	r1, r5
 800e6d0:	430b      	orrs	r3, r1
 800e6d2:	d00a      	beq.n	800e6ea <rint+0x9e>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	2e13      	cmp	r6, #19
 800e6d8:	d101      	bne.n	800e6de <rint+0x92>
 800e6da:	2380      	movs	r3, #128	; 0x80
 800e6dc:	061b      	lsls	r3, r3, #24
 800e6de:	2780      	movs	r7, #128	; 0x80
 800e6e0:	02ff      	lsls	r7, r7, #11
 800e6e2:	4137      	asrs	r7, r6
 800e6e4:	4395      	bics	r5, r2
 800e6e6:	432f      	orrs	r7, r5
 800e6e8:	9701      	str	r7, [sp, #4]
 800e6ea:	9901      	ldr	r1, [sp, #4]
 800e6ec:	001a      	movs	r2, r3
 800e6ee:	000b      	movs	r3, r1
 800e6f0:	4917      	ldr	r1, [pc, #92]	; (800e750 <rint+0x104>)
 800e6f2:	00e4      	lsls	r4, r4, #3
 800e6f4:	190c      	adds	r4, r1, r4
 800e6f6:	6865      	ldr	r5, [r4, #4]
 800e6f8:	6824      	ldr	r4, [r4, #0]
 800e6fa:	0020      	movs	r0, r4
 800e6fc:	0029      	movs	r1, r5
 800e6fe:	f7f2 ff19 	bl	8001534 <__aeabi_dadd>
 800e702:	9002      	str	r0, [sp, #8]
 800e704:	9103      	str	r1, [sp, #12]
 800e706:	9802      	ldr	r0, [sp, #8]
 800e708:	9903      	ldr	r1, [sp, #12]
 800e70a:	0022      	movs	r2, r4
 800e70c:	002b      	movs	r3, r5
 800e70e:	f7f4 f8a9 	bl	8002864 <__aeabi_dsub>
 800e712:	e7d2      	b.n	800e6ba <rint+0x6e>
 800e714:	2e33      	cmp	r6, #51	; 0x33
 800e716:	dd08      	ble.n	800e72a <rint+0xde>
 800e718:	2380      	movs	r3, #128	; 0x80
 800e71a:	00db      	lsls	r3, r3, #3
 800e71c:	429e      	cmp	r6, r3
 800e71e:	d1cc      	bne.n	800e6ba <rint+0x6e>
 800e720:	0002      	movs	r2, r0
 800e722:	000b      	movs	r3, r1
 800e724:	f7f2 ff06 	bl	8001534 <__aeabi_dadd>
 800e728:	e7c7      	b.n	800e6ba <rint+0x6e>
 800e72a:	2601      	movs	r6, #1
 800e72c:	4d0a      	ldr	r5, [pc, #40]	; (800e758 <rint+0x10c>)
 800e72e:	4276      	negs	r6, r6
 800e730:	1952      	adds	r2, r2, r5
 800e732:	40d6      	lsrs	r6, r2
 800e734:	4206      	tst	r6, r0
 800e736:	d0c0      	beq.n	800e6ba <rint+0x6e>
 800e738:	0876      	lsrs	r6, r6, #1
 800e73a:	4206      	tst	r6, r0
 800e73c:	d0d5      	beq.n	800e6ea <rint+0x9e>
 800e73e:	2180      	movs	r1, #128	; 0x80
 800e740:	05c9      	lsls	r1, r1, #23
 800e742:	4111      	asrs	r1, r2
 800e744:	43b3      	bics	r3, r6
 800e746:	430b      	orrs	r3, r1
 800e748:	e7cf      	b.n	800e6ea <rint+0x9e>
 800e74a:	46c0      	nop			; (mov r8, r8)
 800e74c:	fffffc01 	.word	0xfffffc01
 800e750:	0800f328 	.word	0x0800f328
 800e754:	000fffff 	.word	0x000fffff
 800e758:	fffffbed 	.word	0xfffffbed

0800e75c <scalbn>:
 800e75c:	004b      	lsls	r3, r1, #1
 800e75e:	b570      	push	{r4, r5, r6, lr}
 800e760:	0d5b      	lsrs	r3, r3, #21
 800e762:	0014      	movs	r4, r2
 800e764:	000a      	movs	r2, r1
 800e766:	2b00      	cmp	r3, #0
 800e768:	d10d      	bne.n	800e786 <scalbn+0x2a>
 800e76a:	004b      	lsls	r3, r1, #1
 800e76c:	085b      	lsrs	r3, r3, #1
 800e76e:	4303      	orrs	r3, r0
 800e770:	d010      	beq.n	800e794 <scalbn+0x38>
 800e772:	4b21      	ldr	r3, [pc, #132]	; (800e7f8 <scalbn+0x9c>)
 800e774:	2200      	movs	r2, #0
 800e776:	f7f3 fe03 	bl	8002380 <__aeabi_dmul>
 800e77a:	4b20      	ldr	r3, [pc, #128]	; (800e7fc <scalbn+0xa0>)
 800e77c:	429c      	cmp	r4, r3
 800e77e:	da0a      	bge.n	800e796 <scalbn+0x3a>
 800e780:	4a1f      	ldr	r2, [pc, #124]	; (800e800 <scalbn+0xa4>)
 800e782:	4b20      	ldr	r3, [pc, #128]	; (800e804 <scalbn+0xa8>)
 800e784:	e017      	b.n	800e7b6 <scalbn+0x5a>
 800e786:	4d20      	ldr	r5, [pc, #128]	; (800e808 <scalbn+0xac>)
 800e788:	42ab      	cmp	r3, r5
 800e78a:	d108      	bne.n	800e79e <scalbn+0x42>
 800e78c:	0002      	movs	r2, r0
 800e78e:	000b      	movs	r3, r1
 800e790:	f7f2 fed0 	bl	8001534 <__aeabi_dadd>
 800e794:	bd70      	pop	{r4, r5, r6, pc}
 800e796:	000a      	movs	r2, r1
 800e798:	004b      	lsls	r3, r1, #1
 800e79a:	0d5b      	lsrs	r3, r3, #21
 800e79c:	3b36      	subs	r3, #54	; 0x36
 800e79e:	4d1b      	ldr	r5, [pc, #108]	; (800e80c <scalbn+0xb0>)
 800e7a0:	18e3      	adds	r3, r4, r3
 800e7a2:	42ab      	cmp	r3, r5
 800e7a4:	dd0a      	ble.n	800e7bc <scalbn+0x60>
 800e7a6:	0002      	movs	r2, r0
 800e7a8:	000b      	movs	r3, r1
 800e7aa:	4819      	ldr	r0, [pc, #100]	; (800e810 <scalbn+0xb4>)
 800e7ac:	4919      	ldr	r1, [pc, #100]	; (800e814 <scalbn+0xb8>)
 800e7ae:	f000 f839 	bl	800e824 <copysign>
 800e7b2:	4a17      	ldr	r2, [pc, #92]	; (800e810 <scalbn+0xb4>)
 800e7b4:	4b17      	ldr	r3, [pc, #92]	; (800e814 <scalbn+0xb8>)
 800e7b6:	f7f3 fde3 	bl	8002380 <__aeabi_dmul>
 800e7ba:	e7eb      	b.n	800e794 <scalbn+0x38>
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	dd05      	ble.n	800e7cc <scalbn+0x70>
 800e7c0:	4c15      	ldr	r4, [pc, #84]	; (800e818 <scalbn+0xbc>)
 800e7c2:	051b      	lsls	r3, r3, #20
 800e7c4:	4022      	ands	r2, r4
 800e7c6:	431a      	orrs	r2, r3
 800e7c8:	0011      	movs	r1, r2
 800e7ca:	e7e3      	b.n	800e794 <scalbn+0x38>
 800e7cc:	001d      	movs	r5, r3
 800e7ce:	3535      	adds	r5, #53	; 0x35
 800e7d0:	da09      	bge.n	800e7e6 <scalbn+0x8a>
 800e7d2:	4b12      	ldr	r3, [pc, #72]	; (800e81c <scalbn+0xc0>)
 800e7d4:	0002      	movs	r2, r0
 800e7d6:	429c      	cmp	r4, r3
 800e7d8:	dce6      	bgt.n	800e7a8 <scalbn+0x4c>
 800e7da:	000b      	movs	r3, r1
 800e7dc:	4808      	ldr	r0, [pc, #32]	; (800e800 <scalbn+0xa4>)
 800e7de:	4909      	ldr	r1, [pc, #36]	; (800e804 <scalbn+0xa8>)
 800e7e0:	f000 f820 	bl	800e824 <copysign>
 800e7e4:	e7cc      	b.n	800e780 <scalbn+0x24>
 800e7e6:	4c0c      	ldr	r4, [pc, #48]	; (800e818 <scalbn+0xbc>)
 800e7e8:	3336      	adds	r3, #54	; 0x36
 800e7ea:	4022      	ands	r2, r4
 800e7ec:	051b      	lsls	r3, r3, #20
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	0019      	movs	r1, r3
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	4b0a      	ldr	r3, [pc, #40]	; (800e820 <scalbn+0xc4>)
 800e7f6:	e7de      	b.n	800e7b6 <scalbn+0x5a>
 800e7f8:	43500000 	.word	0x43500000
 800e7fc:	ffff3cb0 	.word	0xffff3cb0
 800e800:	c2f8f359 	.word	0xc2f8f359
 800e804:	01a56e1f 	.word	0x01a56e1f
 800e808:	000007ff 	.word	0x000007ff
 800e80c:	000007fe 	.word	0x000007fe
 800e810:	8800759c 	.word	0x8800759c
 800e814:	7e37e43c 	.word	0x7e37e43c
 800e818:	800fffff 	.word	0x800fffff
 800e81c:	0000c350 	.word	0x0000c350
 800e820:	3c900000 	.word	0x3c900000

0800e824 <copysign>:
 800e824:	b530      	push	{r4, r5, lr}
 800e826:	004a      	lsls	r2, r1, #1
 800e828:	0fdb      	lsrs	r3, r3, #31
 800e82a:	07db      	lsls	r3, r3, #31
 800e82c:	0852      	lsrs	r2, r2, #1
 800e82e:	431a      	orrs	r2, r3
 800e830:	0011      	movs	r1, r2
 800e832:	bd30      	pop	{r4, r5, pc}

0800e834 <_init>:
 800e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e836:	46c0      	nop			; (mov r8, r8)
 800e838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e83a:	bc08      	pop	{r3}
 800e83c:	469e      	mov	lr, r3
 800e83e:	4770      	bx	lr

0800e840 <_fini>:
 800e840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e842:	46c0      	nop			; (mov r8, r8)
 800e844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e846:	bc08      	pop	{r3}
 800e848:	469e      	mov	lr, r3
 800e84a:	4770      	bx	lr


Hydra 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b48  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cfc  08005cfc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d04  08005d04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000070  08005d7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08005d7c  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e2c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029a7  00000000  00000000  00032ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001130  00000000  00000000  00035870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd8  00000000  00000000  000369a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017914  00000000  00000000  00037978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f61e  00000000  00000000  0004f28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a42f  00000000  00000000  0005e8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8cd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000437c  00000000  00000000  000f8d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005bec 	.word	0x08005bec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08005bec 	.word	0x08005bec

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8cf 	bl	80005f0 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ca 	bl	80005f0 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzsi2>:
 80005b4:	211c      	movs	r1, #28
 80005b6:	2301      	movs	r3, #1
 80005b8:	041b      	lsls	r3, r3, #16
 80005ba:	4298      	cmp	r0, r3
 80005bc:	d301      	bcc.n	80005c2 <__clzsi2+0xe>
 80005be:	0c00      	lsrs	r0, r0, #16
 80005c0:	3910      	subs	r1, #16
 80005c2:	0a1b      	lsrs	r3, r3, #8
 80005c4:	4298      	cmp	r0, r3
 80005c6:	d301      	bcc.n	80005cc <__clzsi2+0x18>
 80005c8:	0a00      	lsrs	r0, r0, #8
 80005ca:	3908      	subs	r1, #8
 80005cc:	091b      	lsrs	r3, r3, #4
 80005ce:	4298      	cmp	r0, r3
 80005d0:	d301      	bcc.n	80005d6 <__clzsi2+0x22>
 80005d2:	0900      	lsrs	r0, r0, #4
 80005d4:	3904      	subs	r1, #4
 80005d6:	a202      	add	r2, pc, #8	; (adr r2, 80005e0 <__clzsi2+0x2c>)
 80005d8:	5c10      	ldrb	r0, [r2, r0]
 80005da:	1840      	adds	r0, r0, r1
 80005dc:	4770      	bx	lr
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	02020304 	.word	0x02020304
 80005e4:	01010101 	.word	0x01010101
	...

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f7ff ffdd 	bl	80005b4 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	1c08      	adds	r0, r1, #0
 8000600:	f7ff ffd8 	bl	80005b4 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fe9c 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f81c 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fad0 	bl	8000bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 fab0 	bl	8000b7c <MX_DMA_Init>
  MX_I2C2_Init();
 800061c:	f000 f904 	bl	8000828 <MX_I2C2_Init>
  MX_RTC_Init();
 8000620:	f000 f942 	bl	80008a8 <MX_RTC_Init>
  MX_SPI1_Init();
 8000624:	f000 f9ac 	bl	8000980 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000628:	f000 f9e8 	bl	80009fc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800062c:	f000 fa24 	bl	8000a78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000630:	f000 fa70 	bl	8000b14 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000634:	f000 f88c 	bl	8000750 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf( "Hydra Management Processor Running\r\n" );
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <main+0x40>)
 800063a:	0018      	movs	r0, r3
 800063c:	f004 fe8e 	bl	800535c <puts>
	  /*
	   * Operate each module as a state machine so that they can perform different small tasks each time
	   */
	  // process_wifi_module();
	  // process_i2c();
	  process_led_display();
 8000640:	f000 fe52 	bl	80012e8 <process_led_display>
 8000644:	e7fc      	b.n	8000640 <main+0x38>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	08005c04 	.word	0x08005c04

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b09d      	sub	sp, #116	; 0x74
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	2438      	movs	r4, #56	; 0x38
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	2338      	movs	r3, #56	; 0x38
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f004 fe15 	bl	800528c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000662:	2328      	movs	r3, #40	; 0x28
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	0018      	movs	r0, r3
 8000668:	2310      	movs	r3, #16
 800066a:	001a      	movs	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f004 fe0d 	bl	800528c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000672:	003b      	movs	r3, r7
 8000674:	0018      	movs	r0, r3
 8000676:	2328      	movs	r3, #40	; 0x28
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f004 fe06 	bl	800528c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	0018      	movs	r0, r3
 8000686:	f002 f88f 	bl	80027a8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	220a      	movs	r2, #10
 800068e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	0052      	lsls	r2, r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000698:	0021      	movs	r1, r4
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2240      	movs	r2, #64	; 0x40
 80006a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2201      	movs	r2, #1
 80006aa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2202      	movs	r2, #2
 80006b0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2210      	movs	r2, #16
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0292      	lsls	r2, r2, #10
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0492      	lsls	r2, r2, #18
 80006d2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	0612      	lsls	r2, r2, #24
 80006da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 f8ae 	bl	8002840 <HAL_RCC_OscConfig>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006e8:	f000 fb22 	bl	8000d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	2128      	movs	r1, #40	; 0x28
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2207      	movs	r2, #7
 80006f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2202      	movs	r2, #2
 80006f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2102      	movs	r1, #2
 800070a:	0018      	movs	r0, r3
 800070c:	f002 fbb8 	bl	8002e80 <HAL_RCC_ClockConfig>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000714:	f000 fb0c 	bl	8000d30 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000718:	003b      	movs	r3, r7
 800071a:	4a0c      	ldr	r2, [pc, #48]	; (800074c <SystemClock_Config+0x100>)
 800071c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800071e:	003b      	movs	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000724:	003b      	movs	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800072a:	003b      	movs	r3, r7
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0092      	lsls	r2, r2, #2
 8000730:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000732:	003b      	movs	r3, r7
 8000734:	0018      	movs	r0, r3
 8000736:	f002 fd4d 	bl	80031d4 <HAL_RCCEx_PeriphCLKConfig>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800073e:	f000 faf7 	bl	8000d30 <Error_Handler>
  }
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b01d      	add	sp, #116	; 0x74
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	00024001 	.word	0x00024001

08000750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	0018      	movs	r0, r3
 800075a:	230c      	movs	r3, #12
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f004 fd94 	bl	800528c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000764:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_ADC1_Init+0xcc>)
 8000766:	4a2e      	ldr	r2, [pc, #184]	; (8000820 <MX_ADC1_Init+0xd0>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <MX_ADC1_Init+0xcc>)
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	05d2      	lsls	r2, r2, #23
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_ADC1_Init+0xcc>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_ADC1_Init+0xcc>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_ADC1_Init+0xcc>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_ADC1_Init+0xcc>)
 8000786:	2204      	movs	r2, #4
 8000788:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <MX_ADC1_Init+0xcc>)
 800078c:	2200      	movs	r2, #0
 800078e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0xcc>)
 8000792:	2200      	movs	r2, #0
 8000794:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_ADC1_Init+0xcc>)
 8000798:	2200      	movs	r2, #0
 800079a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_ADC1_Init+0xcc>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_ADC1_Init+0xcc>)
 80007a4:	2220      	movs	r2, #32
 80007a6:	2100      	movs	r1, #0
 80007a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_ADC1_Init+0xcc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_ADC1_Init+0xcc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_ADC1_Init+0xcc>)
 80007b8:	222c      	movs	r2, #44	; 0x2c
 80007ba:	2100      	movs	r1, #0
 80007bc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_ADC1_Init+0xcc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_ADC1_Init+0xcc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_ADC1_Init+0xcc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_ADC1_Init+0xcc>)
 80007d2:	223c      	movs	r2, #60	; 0x3c
 80007d4:	2100      	movs	r1, #0
 80007d6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_ADC1_Init+0xcc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_ADC1_Init+0xcc>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 ff1d 	bl	8001620 <HAL_ADC_Init>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80007ea:	f000 faa1 	bl	8000d30 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <MX_ADC1_Init+0xd4>)
 80007f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	1d3a      	adds	r2, r7, #4
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_ADC1_Init+0xcc>)
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f001 f8e0 	bl	80019cc <HAL_ADC_ConfigChannel>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000810:	f000 fa8e 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b004      	add	sp, #16
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000148 	.word	0x20000148
 8000820:	40012400 	.word	0x40012400
 8000824:	20000100 	.word	0x20000100

08000828 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_I2C2_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_I2C2_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0F7FE;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_I2C2_Init+0x74>)
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <MX_I2C2_Init+0x7c>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_I2C2_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_I2C2_Init+0x74>)
 8000840:	2201      	movs	r2, #1
 8000842:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_I2C2_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C2_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_I2C2_Init+0x74>)
 8000864:	0018      	movs	r0, r3
 8000866:	f001 fe71 	bl	800254c <HAL_I2C_Init>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800086e:	f000 fa5f 	bl	8000d30 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_I2C2_Init+0x74>)
 8000874:	2100      	movs	r1, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f001 fefe 	bl	8002678 <HAL_I2CEx_ConfigAnalogFilter>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 fa56 	bl	8000d30 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <MX_I2C2_Init+0x74>)
 8000886:	2100      	movs	r1, #0
 8000888:	0018      	movs	r0, r3
 800088a:	f001 ff41 	bl	8002710 <HAL_I2CEx_ConfigDigitalFilter>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fa4d 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000fc 	.word	0x200000fc
 80008a0:	40005800 	.word	0x40005800
 80008a4:	00c0f7fe 	.word	0x00c0f7fe

080008a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f004 fce8 	bl	800528c <memset>
  RTC_DateTypeDef sDate = {0};
 80008bc:	003b      	movs	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <MX_RTC_Init+0xd0>)
 80008c4:	4a2d      	ldr	r2, [pc, #180]	; (800097c <MX_RTC_Init+0xd4>)
 80008c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_RTC_Init+0xd0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_RTC_Init+0xd0>)
 80008d0:	227f      	movs	r2, #127	; 0x7f
 80008d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_RTC_Init+0xd0>)
 80008d6:	22ff      	movs	r2, #255	; 0xff
 80008d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_RTC_Init+0xd0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_RTC_Init+0xd0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_RTC_Init+0xd0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_RTC_Init+0xd0>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	05d2      	lsls	r2, r2, #23
 80008f2:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_RTC_Init+0xd0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_RTC_Init+0xd0>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f002 fde3 	bl	80034c8 <HAL_RTC_Init>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000906:	f000 fa13 	bl	8000d30 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800092e:	1d39      	adds	r1, r7, #4
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_RTC_Init+0xd0>)
 8000932:	2201      	movs	r2, #1
 8000934:	0018      	movs	r0, r3
 8000936:	f002 fe5d 	bl	80035f4 <HAL_RTC_SetTime>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800093e:	f000 f9f7 	bl	8000d30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000942:	003b      	movs	r3, r7
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000948:	003b      	movs	r3, r7
 800094a:	2201      	movs	r2, #1
 800094c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800094e:	003b      	movs	r3, r7
 8000950:	2201      	movs	r2, #1
 8000952:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000954:	003b      	movs	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800095a:	0039      	movs	r1, r7
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_RTC_Init+0xd0>)
 800095e:	2201      	movs	r2, #1
 8000960:	0018      	movs	r0, r3
 8000962:	f002 feef 	bl	8003744 <HAL_RTC_SetDate>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800096a:	f000 f9e1 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b006      	add	sp, #24
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000238 	.word	0x20000238
 800097c:	40002800 	.word	0x40002800

08000980 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_SPI1_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <MX_SPI1_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_SPI1_Init+0x74>)
 800098c:	2282      	movs	r2, #130	; 0x82
 800098e:	0052      	lsls	r2, r2, #1
 8000990:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_SPI1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_SPI1_Init+0x74>)
 800099a:	22e0      	movs	r2, #224	; 0xe0
 800099c:	00d2      	lsls	r2, r2, #3
 800099e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	0092      	lsls	r2, r2, #2
 80009b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009ce:	2207      	movs	r2, #7
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009da:	2208      	movs	r2, #8
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <MX_SPI1_Init+0x74>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f003 f81b 	bl	8003a1c <HAL_SPI_Init>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 f9a1 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000264 	.word	0x20000264
 80009f8:	40013000 	.word	0x40013000

080009fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_SPI2_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a08:	2282      	movs	r2, #130	; 0x82
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a16:	22e0      	movs	r2, #224	; 0xe0
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a32:	2228      	movs	r2, #40	; 0x28
 8000a34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a4a:	2207      	movs	r2, #7
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a56:	2208      	movs	r2, #8
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <MX_SPI2_Init+0x74>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f002 ffdd 	bl	8003a1c <HAL_SPI_Init>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 f963 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000098 	.word	0x20000098
 8000a74:	40003800 	.word	0x40003800

08000a78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000a7e:	4a24      	ldr	r2, [pc, #144]	; (8000b10 <MX_USART1_UART_Init+0x98>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000a84:	22e1      	movs	r2, #225	; 0xe1
 8000a86:	0252      	lsls	r2, r2, #9
 8000a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f003 f844 	bl	8003b50 <HAL_UART_Init>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000acc:	f000 f930 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f004 fac3 	bl	8005060 <HAL_UARTEx_SetTxFifoThreshold>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ade:	f000 f927 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f004 fafa 	bl	80050e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000af0:	f000 f91e 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <MX_USART1_UART_Init+0x94>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f004 fa78 	bl	8004fec <HAL_UARTEx_DisableFifoMode>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b00:	f000 f916 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	200001ac 	.word	0x200001ac
 8000b10:	40013800 	.word	0x40013800

08000b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b1a:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <MX_USART2_UART_Init+0x64>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b20:	22e1      	movs	r2, #225	; 0xe1
 8000b22:	0252      	lsls	r2, r2, #9
 8000b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <MX_USART2_UART_Init+0x60>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f002 fff6 	bl	8003b50 <HAL_UART_Init>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 f8e2 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	200002c8 	.word	0x200002c8
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_DMA_Init+0x38>)
 8000b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_DMA_Init+0x38>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_DMA_Init+0x38>)
 8000b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b92:	2201      	movs	r2, #1
 8000b94:	4013      	ands	r3, r2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2009      	movs	r0, #9
 8000ba0:	f001 f994 	bl	8001ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ba4:	2009      	movs	r0, #9
 8000ba6:	f001 f9a6 	bl	8001ef6 <HAL_NVIC_EnableIRQ>

}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	240c      	movs	r4, #12
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	2314      	movs	r3, #20
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f004 fb5f 	bl	800528c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b54      	ldr	r3, [pc, #336]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bd2:	4b53      	ldr	r3, [pc, #332]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bda:	4b51      	ldr	r3, [pc, #324]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bde:	2202      	movs	r2, #2
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b4e      	ldr	r3, [pc, #312]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bea:	4b4d      	ldr	r3, [pc, #308]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000bec:	2101      	movs	r1, #1
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf2:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b48      	ldr	r3, [pc, #288]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c02:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000c04:	2104      	movs	r1, #4
 8000c06:	430a      	orrs	r2, r1
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
 8000c0a:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4013      	ands	r3, r2
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable_Comm_Processor_3V3_Pin|LED_Array_Enable___Pin|LED_Power_Enable_Pin, GPIO_PIN_RESET);
 8000c16:	238c      	movs	r3, #140	; 0x8c
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4842      	ldr	r0, [pc, #264]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	0019      	movs	r1, r3
 8000c20:	f001 fc76 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Enable_Comm_Processor_3V3_Pin LED_Array_Enable___Pin LED_Power_Enable_Pin */
  GPIO_InitStruct.Pin = Enable_Comm_Processor_3V3_Pin|LED_Array_Enable___Pin|LED_Power_Enable_Pin;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	228c      	movs	r2, #140	; 0x8c
 8000c28:	0092      	lsls	r2, r2, #2
 8000c2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2201      	movs	r2, #1
 8000c30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	4a38      	ldr	r2, [pc, #224]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000c42:	0019      	movs	r1, r3
 8000c44:	0010      	movs	r0, r2
 8000c46:	f001 faff 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Status_Pin */
  GPIO_InitStruct.Pin = Charge_Status_Pin;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2203      	movs	r2, #3
 8000c54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charge_Status_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	193a      	adds	r2, r7, r4
 8000c5e:	23a0      	movs	r3, #160	; 0xa0
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f001 faef 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SFLASH_CS_Pin */
  GPIO_InitStruct.Pin = SPI_SFLASH_CS_Pin;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2210      	movs	r2, #16
 8000c6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	4a2d      	ldr	r2, [pc, #180]	; (8000d28 <MX_GPIO_Init+0x170>)
 8000c74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI_SFLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	193a      	adds	r2, r7, r4
 8000c7e:	23a0      	movs	r3, #160	; 0xa0
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f001 fadf 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMID___4_Pin VSYS___2_Pin */
  GPIO_InitStruct.Pin = PMID___4_Pin|VSYS___2_Pin;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	220c      	movs	r2, #12
 8000c8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	2203      	movs	r2, #3
 8000c94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f001 fad0 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charge_INT___Pin Power_Down___Pin UFP_Fault___Pin */
  GPIO_InitStruct.Pin = Charge_INT___Pin|Power_Down___Pin|UFP_Fault___Pin;
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2283      	movs	r2, #131	; 0x83
 8000cac:	0212      	lsls	r2, r2, #8
 8000cae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	193a      	adds	r2, r7, r4
 8000cbe:	23a0      	movs	r3, #160	; 0xa0
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 fabf 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dead_Battery___Pin */
  GPIO_InitStruct.Pin = Dead_Battery___Pin;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2240      	movs	r2, #64	; 0x40
 8000cce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Dead_Battery___GPIO_Port, &GPIO_InitStruct);
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <MX_GPIO_Init+0x174>)
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	0010      	movs	r0, r2
 8000ce4:	f001 fab0 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : Beeper_Pin */
  GPIO_InitStruct.Pin = Beeper_Pin;
 8000ce8:	0021      	movs	r1, r4
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	0052      	lsls	r2, r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2202      	movs	r2, #2
 8000d08:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(Beeper_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000d0e:	0019      	movs	r1, r3
 8000d10:	0010      	movs	r0, r2
 8000d12:	f001 fa99 	bl	8002248 <HAL_GPIO_Init>

}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b009      	add	sp, #36	; 0x24
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000
 8000d24:	50000400 	.word	0x50000400
 8000d28:	10110000 	.word	0x10110000
 8000d2c:	50000800 	.word	0x50000800

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_MspInit+0x44>)
 8000d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_MspInit+0x44>)
 8000d48:	2101      	movs	r1, #1
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_MspInit+0x44>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	2201      	movs	r2, #1
 8000d54:	4013      	ands	r3, r2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x44>)
 8000d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_MspInit+0x44>)
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	0549      	lsls	r1, r1, #21
 8000d64:	430a      	orrs	r2, r1
 8000d66:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_MspInit+0x44>)
 8000d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	055b      	lsls	r3, r3, #21
 8000d70:	4013      	ands	r3, r2
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	2314      	movs	r3, #20
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	0018      	movs	r0, r3
 8000d92:	2314      	movs	r3, #20
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f004 fa78 	bl	800528c <memset>
  if(hadc->Instance==ADC1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <HAL_ADC_MspInit+0x80>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d129      	bne.n	8000dfa <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_ADC_MspInit+0x84>)
 8000da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_ADC_MspInit+0x84>)
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	0349      	lsls	r1, r1, #13
 8000db0:	430a      	orrs	r2, r1
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_ADC_MspInit+0x84>)
 8000db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	035b      	lsls	r3, r3, #13
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_ADC_MspInit+0x84>)
 8000dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_ADC_MspInit+0x84>)
 8000dc8:	2102      	movs	r1, #2
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_ADC_MspInit+0x84>)
 8000dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = USB_C_in_1_Pin|USB_C_in_2_Pin;
 8000dda:	2114      	movs	r1, #20
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2203      	movs	r2, #3
 8000de0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2203      	movs	r2, #3
 8000de6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_ADC_MspInit+0x88>)
 8000df2:	0019      	movs	r1, r3
 8000df4:	0010      	movs	r0, r2
 8000df6:	f001 fa27 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b00a      	add	sp, #40	; 0x28
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	40012400 	.word	0x40012400
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	50000400 	.word	0x50000400

08000e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	2314      	movs	r3, #20
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	2314      	movs	r3, #20
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f004 fa32 	bl	800528c <memset>
  if(hi2c->Instance==I2C2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <HAL_I2C_MspInit+0x90>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d131      	bne.n	8000e96 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_I2C_MspInit+0x94>)
 8000e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <HAL_I2C_MspInit+0x94>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_I2C_MspInit+0x94>)
 8000e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e42:	2201      	movs	r2, #1
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e4a:	2114      	movs	r1, #20
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	22c0      	movs	r2, #192	; 0xc0
 8000e50:	0152      	lsls	r2, r2, #5
 8000e52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2212      	movs	r2, #18
 8000e58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2206      	movs	r2, #6
 8000e6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	187a      	adds	r2, r7, r1
 8000e6e:	23a0      	movs	r3, #160	; 0xa0
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 f9e7 	bl	8002248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_I2C_MspInit+0x94>)
 8000e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_I2C_MspInit+0x94>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	03c9      	lsls	r1, r1, #15
 8000e84:	430a      	orrs	r2, r1
 8000e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_I2C_MspInit+0x94>)
 8000e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	03db      	lsls	r3, r3, #15
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b00a      	add	sp, #40	; 0x28
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	40005800 	.word	0x40005800
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_RTC_MspInit+0x44>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d114      	bne.n	8000ee4 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_RTC_MspInit+0x48>)
 8000ebc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <HAL_RTC_MspInit+0x48>)
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	0209      	lsls	r1, r1, #8
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_RTC_MspInit+0x48>)
 8000eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_RTC_MspInit+0x48>)
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	00c9      	lsls	r1, r1, #3
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_RTC_MspInit+0x48>)
 8000ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b004      	add	sp, #16
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40002800 	.word	0x40002800
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	231c      	movs	r3, #28
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	0018      	movs	r0, r3
 8000f02:	2314      	movs	r3, #20
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f004 f9c0 	bl	800528c <memset>
  if(hspi->Instance==SPI1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <HAL_SPI_MspInit+0x14c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d131      	bne.n	8000f7a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1a:	4b4a      	ldr	r3, [pc, #296]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0149      	lsls	r1, r1, #5
 8000f20:	430a      	orrs	r2, r1
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
 8000f24:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	015b      	lsls	r3, r3, #5
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b44      	ldr	r3, [pc, #272]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f36:	4b43      	ldr	r3, [pc, #268]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f42:	2201      	movs	r2, #1
 8000f44:	4013      	ands	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI_SFLASH_CLK_Pin|SPI_SFLASH_MISO_Pin|SPI_SFLASH_MOSI_Pin;
 8000f4a:	211c      	movs	r1, #28
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	22e0      	movs	r2, #224	; 0xe0
 8000f50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2202      	movs	r2, #2
 8000f56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	187a      	adds	r2, r7, r1
 8000f6c:	23a0      	movs	r3, #160	; 0xa0
 8000f6e:	05db      	lsls	r3, r3, #23
 8000f70:	0011      	movs	r1, r2
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 f968 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f78:	e05e      	b.n	8001038 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a32      	ldr	r2, [pc, #200]	; (8001048 <HAL_SPI_MspInit+0x154>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d159      	bne.n	8001038 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f84:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f88:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	01c9      	lsls	r1, r1, #7
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	01db      	lsls	r3, r3, #7
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34
 8000fac:	4b25      	ldr	r3, [pc, #148]	; (8001044 <HAL_SPI_MspInit+0x150>)
 8000fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_CLK___Not_Used_Pin|SPI2_OUT_LED_Display_Pin;
 8000fb8:	211c      	movs	r1, #28
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	4a23      	ldr	r2, [pc, #140]	; (800104c <HAL_SPI_MspInit+0x158>)
 8000fbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	187a      	adds	r2, r7, r1
 8000fda:	23a0      	movs	r3, #160	; 0xa0
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	0011      	movs	r1, r2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f001 f931 	bl	8002248 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 8000fe8:	4a1a      	ldr	r2, [pc, #104]	; (8001054 <HAL_SPI_MspInit+0x160>)
 8000fea:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 8000fee:	2213      	movs	r2, #19
 8000ff0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 800101e:	0018      	movs	r0, r3
 8001020:	f000 ff86 	bl	8001f30 <HAL_DMA_Init>
 8001024:	1e03      	subs	r3, r0, #0
 8001026:	d001      	beq.n	800102c <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8001028:	f7ff fe82 	bl	8000d30 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 8001030:	655a      	str	r2, [r3, #84]	; 0x54
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_SPI_MspInit+0x15c>)
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b00c      	add	sp, #48	; 0x30
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40013000 	.word	0x40013000
 8001044:	40021000 	.word	0x40021000
 8001048:	40003800 	.word	0x40003800
 800104c:	00000401 	.word	0x00000401
 8001050:	20000354 	.word	0x20000354
 8001054:	40020008 	.word	0x40020008

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	; 0x30
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	231c      	movs	r3, #28
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	0018      	movs	r0, r3
 8001066:	2314      	movs	r3, #20
 8001068:	001a      	movs	r2, r3
 800106a:	2100      	movs	r1, #0
 800106c:	f004 f90e 	bl	800528c <memset>
  if(huart->Instance==USART1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a36      	ldr	r2, [pc, #216]	; (8001150 <HAL_UART_MspInit+0xf8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d130      	bne.n	80010dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <HAL_UART_MspInit+0xfc>)
 800107c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107e:	4b35      	ldr	r3, [pc, #212]	; (8001154 <HAL_UART_MspInit+0xfc>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	01c9      	lsls	r1, r1, #7
 8001084:	430a      	orrs	r2, r1
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <HAL_UART_MspInit+0xfc>)
 800108a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	01db      	lsls	r3, r3, #7
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_UART_MspInit+0xfc>)
 8001098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_UART_MspInit+0xfc>)
 800109c:	2102      	movs	r1, #2
 800109e:	430a      	orrs	r2, r1
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34
 80010a2:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <HAL_UART_MspInit+0xfc>)
 80010a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a6:	2202      	movs	r2, #2
 80010a8:	4013      	ands	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_to_Comm_Processor_Pin|RX_from_Comm_Processor_Pin;
 80010ae:	211c      	movs	r1, #28
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	22c0      	movs	r2, #192	; 0xc0
 80010b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2202      	movs	r2, #2
 80010ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <HAL_UART_MspInit+0x100>)
 80010d2:	0019      	movs	r1, r3
 80010d4:	0010      	movs	r0, r2
 80010d6:	f001 f8b7 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010da:	e035      	b.n	8001148 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1e      	ldr	r2, [pc, #120]	; (800115c <HAL_UART_MspInit+0x104>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d130      	bne.n	8001148 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_UART_MspInit+0xfc>)
 80010e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_UART_MspInit+0xfc>)
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	0289      	lsls	r1, r1, #10
 80010f0:	430a      	orrs	r2, r1
 80010f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_UART_MspInit+0xfc>)
 80010f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	029b      	lsls	r3, r3, #10
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_UART_MspInit+0xfc>)
 8001104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_UART_MspInit+0xfc>)
 8001108:	2101      	movs	r1, #1
 800110a:	430a      	orrs	r2, r1
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_UART_MspInit+0xfc>)
 8001110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001112:	2201      	movs	r2, #1
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
 800111a:	211c      	movs	r1, #28
 800111c:	187b      	adds	r3, r7, r1
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2202      	movs	r2, #2
 8001126:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2201      	movs	r2, #1
 8001138:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	187a      	adds	r2, r7, r1
 800113c:	23a0      	movs	r3, #160	; 0xa0
 800113e:	05db      	lsls	r3, r3, #23
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f001 f880 	bl	8002248 <HAL_GPIO_Init>
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b00c      	add	sp, #48	; 0x30
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013800 	.word	0x40013800
 8001154:	40021000 	.word	0x40021000
 8001158:	50000400 	.word	0x50000400
 800115c:	40004400 	.word	0x40004400

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 f948 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <DMA1_Channel1_IRQHandler+0x14>)
 800119a:	0018      	movs	r0, r3
 800119c:	f000 ff52 	bl	8002044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	20000354 	.word	0x20000354

080011ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	e00a      	b.n	80011d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011be:	e000      	b.n	80011c2 <_read+0x16>
 80011c0:	bf00      	nop
 80011c2:	0001      	movs	r1, r0
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	60ba      	str	r2, [r7, #8]
 80011ca:	b2ca      	uxtb	r2, r1
 80011cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbf0      	blt.n	80011be <_read+0x12>
	}

return len;
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b006      	add	sp, #24
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e009      	b.n	800120c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	60ba      	str	r2, [r7, #8]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	0018      	movs	r0, r3
 8001202:	e000      	b.n	8001206 <_write+0x20>
 8001204:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	dbf1      	blt.n	80011f8 <_write+0x12>
	}
	return len;
 8001214:	687b      	ldr	r3, [r7, #4]
}
 8001216:	0018      	movs	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	b006      	add	sp, #24
 800121c:	bd80      	pop	{r7, pc}

0800121e <_close>:

int _close(int file)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
	return -1;
 8001226:	2301      	movs	r3, #1
 8001228:	425b      	negs	r3, r3
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}

08001232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	0192      	lsls	r2, r2, #6
 8001242:	605a      	str	r2, [r3, #4]
	return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}

0800124e <_isatty>:

int _isatty(int file)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
	return 1;
 8001256:	2301      	movs	r3, #1
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bd80      	pop	{r7, pc}

08001260 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
	return 0;
 800126c:	2300      	movs	r3, #0
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <_sbrk+0x50>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x16>
		heap_end = &end;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <_sbrk+0x50>)
 800128a:	4a10      	ldr	r2, [pc, #64]	; (80012cc <_sbrk+0x54>)
 800128c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <_sbrk+0x50>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <_sbrk+0x50>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	18d3      	adds	r3, r2, r3
 800129c:	466a      	mov	r2, sp
 800129e:	4293      	cmp	r3, r2
 80012a0:	d907      	bls.n	80012b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012a2:	f003 ffc9 	bl	8005238 <__errno>
 80012a6:	0003      	movs	r3, r0
 80012a8:	220c      	movs	r2, #12
 80012aa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	425b      	negs	r3, r3
 80012b0:	e006      	b.n	80012c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <_sbrk+0x50>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	18d2      	adds	r2, r2, r3
 80012ba:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <_sbrk+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b004      	add	sp, #16
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000008c 	.word	0x2000008c
 80012cc:	200003b8 	.word	0x200003b8

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <SystemInit+0x14>)
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	0512      	lsls	r2, r2, #20
 80012da:	609a      	str	r2, [r3, #8]
#endif
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <process_led_display>:
  * @brief	Process the LED Display
  * @param  None
  * @retval : None
  */
void process_led_display(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012fa:	e003      	b.n	8001304 <LoopCopyDataInit>

080012fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80012fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001300:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001302:	3104      	adds	r1, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <LoopForever+0xa>)
  ldr r3, =_edata
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <LoopForever+0xe>)
  adds r2, r0, r1
 8001308:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800130a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800130c:	d3f6      	bcc.n	80012fc <CopyDataInit>
  ldr r2, =_sbss
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <LoopForever+0x12>)
  b LoopFillZerobss
 8001310:	e002      	b.n	8001318 <LoopFillZerobss>

08001312 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  str  r3, [r2]
 8001314:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001316:	3204      	adds	r2, #4

08001318 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <LoopForever+0x16>)
  cmp r2, r3
 800131a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800131c:	d3f9      	bcc.n	8001312 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800131e:	f7ff ffd7 	bl	80012d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001322:	f003 ff8f 	bl	8005244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001326:	f7ff f96f 	bl	8000608 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   r0, =_estack
 800132c:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8001330:	08005d0c 	.word	0x08005d0c
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001338:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800133c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001340:	200003b8 	.word	0x200003b8

08001344 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_IRQHandler>
	...

08001348 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_Init+0x3c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_Init+0x3c>)
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	0049      	lsls	r1, r1, #1
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f810 	bl	8001388 <HAL_InitTick>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d003      	beq.n	8001374 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800136c:	1dfb      	adds	r3, r7, #7
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e001      	b.n	8001378 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff fce2 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	781b      	ldrb	r3, [r3, #0]
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b002      	add	sp, #8
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001390:	230f      	movs	r3, #15
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_InitTick+0x88>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d02b      	beq.n	80013f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_InitTick+0x8c>)
 80013a2:	681c      	ldr	r4, [r3, #0]
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_InitTick+0x88>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0019      	movs	r1, r3
 80013aa:	23fa      	movs	r3, #250	; 0xfa
 80013ac:	0098      	lsls	r0, r3, #2
 80013ae:	f7fe fea9 	bl	8000104 <__udivsi3>
 80013b2:	0003      	movs	r3, r0
 80013b4:	0019      	movs	r1, r3
 80013b6:	0020      	movs	r0, r4
 80013b8:	f7fe fea4 	bl	8000104 <__udivsi3>
 80013bc:	0003      	movs	r3, r0
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 fda9 	bl	8001f16 <HAL_SYSTICK_Config>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d112      	bne.n	80013ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d80a      	bhi.n	80013e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	2301      	movs	r3, #1
 80013d2:	425b      	negs	r3, r3
 80013d4:	2200      	movs	r2, #0
 80013d6:	0018      	movs	r0, r3
 80013d8:	f000 fd78 	bl	8001ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_InitTick+0x90>)
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e00d      	b.n	8001400 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80013e4:	230f      	movs	r3, #15
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	e008      	b.n	8001400 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ee:	230f      	movs	r3, #15
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e003      	b.n	8001400 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013f8:	230f      	movs	r3, #15
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001400:	230f      	movs	r3, #15
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	781b      	ldrb	r3, [r3, #0]
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b005      	add	sp, #20
 800140c:	bd90      	pop	{r4, r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	20000008 	.word	0x20000008
 8001414:	20000000 	.word	0x20000000
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_IncTick+0x18>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_IncTick+0x1c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	18d2      	adds	r2, r2, r3
 800142a:	4b02      	ldr	r3, [pc, #8]	; (8001434 <HAL_IncTick+0x18>)
 800142c:	601a      	str	r2, [r3, #0]
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200003b0 	.word	0x200003b0
 8001438:	20000008 	.word	0x20000008

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b02      	ldr	r3, [pc, #8]	; (800144c <HAL_GetTick+0x10>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	200003b0 	.word	0x200003b0

08001450 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001460:	401a      	ands	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	601a      	str	r2, [r3, #0]
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	fe3fffff 	.word	0xfe3fffff

08001478 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	23e0      	movs	r3, #224	; 0xe0
 8001486:	045b      	lsls	r3, r3, #17
 8001488:	4013      	ands	r3, r2
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}

08001492 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	2104      	movs	r1, #4
 80014a6:	400a      	ands	r2, r1
 80014a8:	2107      	movs	r1, #7
 80014aa:	4091      	lsls	r1, r2
 80014ac:	000a      	movs	r2, r1
 80014ae:	43d2      	mvns	r2, r2
 80014b0:	401a      	ands	r2, r3
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2104      	movs	r1, #4
 80014b6:	400b      	ands	r3, r1
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4099      	lsls	r1, r3
 80014bc:	000b      	movs	r3, r1
 80014be:	431a      	orrs	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b004      	add	sp, #16
 80014ca:	bd80      	pop	{r7, pc}

080014cc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	211f      	movs	r1, #31
 80014e0:	400a      	ands	r2, r1
 80014e2:	210f      	movs	r1, #15
 80014e4:	4091      	lsls	r1, r2
 80014e6:	000a      	movs	r2, r1
 80014e8:	43d2      	mvns	r2, r2
 80014ea:	401a      	ands	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	0e9b      	lsrs	r3, r3, #26
 80014f0:	210f      	movs	r1, #15
 80014f2:	4019      	ands	r1, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	201f      	movs	r0, #31
 80014f8:	4003      	ands	r3, r0
 80014fa:	4099      	lsls	r1, r3
 80014fc:	000b      	movs	r3, r1
 80014fe:	431a      	orrs	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b004      	add	sp, #16
 800150a:	bd80      	pop	{r7, pc}

0800150c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	035b      	lsls	r3, r3, #13
 800151e:	0b5b      	lsrs	r3, r3, #13
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}

0800152e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	0352      	lsls	r2, r2, #13
 8001540:	0b52      	lsrs	r2, r2, #13
 8001542:	43d2      	mvns	r2, r2
 8001544:	401a      	ands	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	0212      	lsls	r2, r2, #8
 8001568:	43d2      	mvns	r2, r2
 800156a:	401a      	ands	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	400b      	ands	r3, r1
 8001574:	4904      	ldr	r1, [pc, #16]	; (8001588 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001576:	400b      	ands	r3, r1
 8001578:	431a      	orrs	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b004      	add	sp, #16
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	07ffff00 	.word	0x07ffff00

0800158c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800159a:	4013      	ands	r3, r2
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	0552      	lsls	r2, r2, #21
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b002      	add	sp, #8
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	6fffffe8 	.word	0x6fffffe8

080015b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	055b      	lsls	r3, r3, #21
 80015c4:	401a      	ands	r2, r3
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	055b      	lsls	r3, r3, #21
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d101      	bne.n	80015d2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}

080015dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2201      	movs	r2, #1
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <LL_ADC_IsEnabled+0x18>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <LL_ADC_IsEnabled+0x1a>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}

080015fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2204      	movs	r2, #4
 800160c:	4013      	ands	r3, r2
 800160e:	2b04      	cmp	r3, #4
 8001610:	d101      	bne.n	8001616 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001616:	2300      	movs	r3, #0
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001628:	231f      	movs	r3, #31
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e1aa      	b.n	800199c <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10a      	bne.n	8001664 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff fb97 	bl	8000d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2254      	movs	r2, #84	; 0x54
 8001660:	2100      	movs	r1, #0
 8001662:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff ffa3 	bl	80015b4 <LL_ADC_IsInternalRegulatorEnabled>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d114      	bne.n	800169c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff ff88 	bl	800158c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800167c:	4bc9      	ldr	r3, [pc, #804]	; (80019a4 <HAL_ADC_Init+0x384>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	49c9      	ldr	r1, [pc, #804]	; (80019a8 <HAL_ADC_Init+0x388>)
 8001682:	0018      	movs	r0, r3
 8001684:	f7fe fd3e 	bl	8000104 <__udivsi3>
 8001688:	0003      	movs	r3, r0
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800168e:	e002      	b.n	8001696 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3b01      	subs	r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f9      	bne.n	8001690 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff ff87 	bl	80015b4 <LL_ADC_IsInternalRegulatorEnabled>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d10f      	bne.n	80016ca <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	2210      	movs	r2, #16
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	2201      	movs	r2, #1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 80016c2:	231f      	movs	r3, #31
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0018      	movs	r0, r3
 80016d0:	f7ff ff95 	bl	80015fe <LL_ADC_REG_IsConversionOngoing>
 80016d4:	0003      	movs	r3, r0
 80016d6:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	2210      	movs	r2, #16
 80016de:	4013      	ands	r3, r2
 80016e0:	d000      	beq.n	80016e4 <HAL_ADC_Init+0xc4>
 80016e2:	e14e      	b.n	8001982 <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d000      	beq.n	80016ec <HAL_ADC_Init+0xcc>
 80016ea:	e14a      	b.n	8001982 <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	4aae      	ldr	r2, [pc, #696]	; (80019ac <HAL_ADC_Init+0x38c>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	2202      	movs	r2, #2
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff ff6b 	bl	80015dc <LL_ADC_IsEnabled>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d137      	bne.n	800177a <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2218      	movs	r2, #24
 8001712:	4393      	bics	r3, r2
 8001714:	0019      	movs	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	0899      	lsrs	r1, r3, #2
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	0f9b      	lsrs	r3, r3, #30
 8001732:	079a      	lsls	r2, r3, #30
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	23c0      	movs	r3, #192	; 0xc0
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	429a      	cmp	r2, r3
 8001746:	d018      	beq.n	800177a <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	05db      	lsls	r3, r3, #23
 8001750:	429a      	cmp	r2, r3
 8001752:	d012      	beq.n	800177a <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	061b      	lsls	r3, r3, #24
 800175c:	429a      	cmp	r2, r3
 800175e:	d00c      	beq.n	800177a <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8001760:	4b93      	ldr	r3, [pc, #588]	; (80019b0 <HAL_ADC_Init+0x390>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a93      	ldr	r2, [pc, #588]	; (80019b4 <HAL_ADC_Init+0x394>)
 8001766:	4013      	ands	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	23f0      	movs	r3, #240	; 0xf0
 8001770:	039b      	lsls	r3, r3, #14
 8001772:	401a      	ands	r2, r3
 8001774:	4b8e      	ldr	r3, [pc, #568]	; (80019b0 <HAL_ADC_Init+0x390>)
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7e1b      	ldrb	r3, [r3, #24]
 800177e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7e5b      	ldrb	r3, [r3, #25]
 8001784:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001786:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7e9b      	ldrb	r3, [r3, #26]
 800178c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800178e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <HAL_ADC_Init+0x17e>
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	015b      	lsls	r3, r3, #5
 800179c:	e000      	b.n	80017a0 <HAL_ADC_Init+0x180>
 800179e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017a0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80017a6:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da04      	bge.n	80017ba <HAL_ADC_Init+0x19a>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	e001      	b.n	80017be <HAL_ADC_Init+0x19e>
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 80017be:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	5c5b      	ldrb	r3, [r3, r1]
 80017c6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80017c8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2220      	movs	r2, #32
 80017d4:	5c9b      	ldrb	r3, [r3, r2]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d115      	bne.n	8001806 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7e9b      	ldrb	r3, [r3, #26]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	0252      	lsls	r2, r2, #9
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	e00b      	b.n	8001806 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	2220      	movs	r2, #32
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fe:	2201      	movs	r2, #1
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00a      	beq.n	8001824 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001812:	23e0      	movs	r3, #224	; 0xe0
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800181c:	4313      	orrs	r3, r2
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800182c:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8001832:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8001838:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	223c      	movs	r2, #60	; 0x3c
 8001844:	5c9b      	ldrb	r3, [r3, r2]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d103      	bne.n	8001852 <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2201      	movs	r2, #1
 800184e:	4313      	orrs	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4a57      	ldr	r2, [pc, #348]	; (80019b8 <HAL_ADC_Init+0x398>)
 800185a:	4013      	ands	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	430a      	orrs	r2, r1
 8001866:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	4a53      	ldr	r2, [pc, #332]	; (80019bc <HAL_ADC_Init+0x39c>)
 8001870:	4013      	ands	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	430a      	orrs	r2, r1
 800187c:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001886:	001a      	movs	r2, r3
 8001888:	2100      	movs	r1, #0
 800188a:	f7ff fe02 	bl	8001492 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	494a      	ldr	r1, [pc, #296]	; (80019c0 <HAL_ADC_Init+0x3a0>)
 8001898:	001a      	movs	r2, r3
 800189a:	f7ff fdfa 	bl	8001492 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2110      	movs	r1, #16
 80018b2:	4249      	negs	r1, r1
 80018b4:	430a      	orrs	r2, r1
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
 80018b8:	e03c      	b.n	8001934 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691a      	ldr	r2, [r3, #16]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	039b      	lsls	r3, r3, #14
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d136      	bne.n	8001934 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	e00c      	b.n	80018e6 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	40da      	lsrs	r2, r3
 80018d6:	0013      	movs	r3, r2
 80018d8:	220f      	movs	r2, #15
 80018da:	4013      	ands	r3, r2
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d006      	beq.n	80018ee <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	3301      	adds	r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2b07      	cmp	r3, #7
 80018ea:	d9ef      	bls.n	80018cc <HAL_ADC_Init+0x2ac>
 80018ec:	e000      	b.n	80018f0 <HAL_ADC_Init+0x2d0>
        {
          break;
 80018ee:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d109      	bne.n	800190a <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2110      	movs	r1, #16
 8001902:	4249      	negs	r1, r1
 8001904:	430a      	orrs	r2, r1
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
 8001908:	e014      	b.n	8001934 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	4a2b      	ldr	r2, [pc, #172]	; (80019c4 <HAL_ADC_Init+0x3a4>)
 8001916:	4694      	mov	ip, r2
 8001918:	4463      	add	r3, ip
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	221c      	movs	r2, #28
 800191e:	4013      	ands	r3, r2
 8001920:	2210      	movs	r2, #16
 8001922:	4252      	negs	r2, r2
 8001924:	409a      	lsls	r2, r3
 8001926:	0011      	movs	r1, r2
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <HAL_ADC_Init+0x3a8>)
 800193c:	4013      	ands	r3, r2
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	429a      	cmp	r2, r3
 8001942:	d10b      	bne.n	800195c <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	2203      	movs	r2, #3
 8001950:	4393      	bics	r3, r2
 8001952:	2201      	movs	r2, #1
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800195a:	e01c      	b.n	8001996 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	2212      	movs	r2, #18
 8001962:	4393      	bics	r3, r2
 8001964:	2210      	movs	r2, #16
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	2201      	movs	r2, #1
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8001978:	231f      	movs	r3, #31
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001980:	e009      	b.n	8001996 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	2210      	movs	r2, #16
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 800198e:	231f      	movs	r3, #31
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001996:	231f      	movs	r3, #31
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	781b      	ldrb	r3, [r3, #0]
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b008      	add	sp, #32
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000000 	.word	0x20000000
 80019a8:	00030d40 	.word	0x00030d40
 80019ac:	fffffefd 	.word	0xfffffefd
 80019b0:	40012708 	.word	0x40012708
 80019b4:	ffc3ffff 	.word	0xffc3ffff
 80019b8:	fffe0219 	.word	0xfffe0219
 80019bc:	dffffc02 	.word	0xdffffc02
 80019c0:	07ffff04 	.word	0x07ffff04
 80019c4:	3fffffff 	.word	0x3fffffff
 80019c8:	833fffe7 	.word	0x833fffe7

080019cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d6:	2317      	movs	r3, #23
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2254      	movs	r2, #84	; 0x54
 80019e6:	5c9b      	ldrb	r3, [r3, r2]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x24>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e1bc      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x39e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2254      	movs	r2, #84	; 0x54
 80019f4:	2101      	movs	r1, #1
 80019f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff fdfe 	bl	80015fe <LL_ADC_REG_IsConversionOngoing>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d000      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0x3c>
 8001a06:	e19f      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d100      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x46>
 8001a10:	e13e      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d004      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001a22:	4abf      	ldr	r2, [pc, #764]	; (8001d20 <HAL_ADC_ConfigChannel+0x354>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d108      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0019      	movs	r1, r3
 8001a32:	0010      	movs	r0, r2
 8001a34:	f7ff fd6a 	bl	800150c <LL_ADC_REG_SetSequencerChAdd>
 8001a38:	e0c9      	b.n	8001bce <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	211f      	movs	r1, #31
 8001a44:	400b      	ands	r3, r1
 8001a46:	210f      	movs	r1, #15
 8001a48:	4099      	lsls	r1, r3
 8001a4a:	000b      	movs	r3, r1
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4013      	ands	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	035b      	lsls	r3, r3, #13
 8001a58:	0b5b      	lsrs	r3, r3, #13
 8001a5a:	d105      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x9c>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0e9b      	lsrs	r3, r3, #26
 8001a62:	221f      	movs	r2, #31
 8001a64:	4013      	ands	r3, r2
 8001a66:	e098      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d000      	beq.n	8001a74 <HAL_ADC_ConfigChannel+0xa8>
 8001a72:	e091      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x1cc>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d000      	beq.n	8001a80 <HAL_ADC_ConfigChannel+0xb4>
 8001a7e:	e089      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x1c8>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2204      	movs	r2, #4
 8001a86:	4013      	ands	r3, r2
 8001a88:	d000      	beq.n	8001a8c <HAL_ADC_ConfigChannel+0xc0>
 8001a8a:	e081      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x1c4>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2208      	movs	r2, #8
 8001a92:	4013      	ands	r3, r2
 8001a94:	d000      	beq.n	8001a98 <HAL_ADC_ConfigChannel+0xcc>
 8001a96:	e079      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x1c0>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d000      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0xd8>
 8001aa2:	e071      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x1bc>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d000      	beq.n	8001ab0 <HAL_ADC_ConfigChannel+0xe4>
 8001aae:	e069      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x1b8>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2240      	movs	r2, #64	; 0x40
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d000      	beq.n	8001abc <HAL_ADC_ConfigChannel+0xf0>
 8001aba:	e061      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x1b4>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d000      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0xfc>
 8001ac6:	e059      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x1b0>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d151      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x1ac>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d149      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1a8>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d141      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1a4>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4013      	ands	r3, r2
 8001af6:	d139      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1a0>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	015b      	lsls	r3, r3, #5
 8001b00:	4013      	ands	r3, r2
 8001b02:	d131      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x19c>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	019b      	lsls	r3, r3, #6
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d129      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x198>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	01db      	lsls	r3, r3, #7
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d121      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x194>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	4013      	ands	r3, r2
 8001b26:	d119      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x190>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	025b      	lsls	r3, r3, #9
 8001b30:	4013      	ands	r3, r2
 8001b32:	d111      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x18c>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	029b      	lsls	r3, r3, #10
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x188>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	02db      	lsls	r3, r3, #11
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d001      	beq.n	8001b50 <HAL_ADC_ConfigChannel+0x184>
 8001b4c:	2312      	movs	r3, #18
 8001b4e:	e024      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b50:	2300      	movs	r3, #0
 8001b52:	e022      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b54:	2311      	movs	r3, #17
 8001b56:	e020      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b58:	2310      	movs	r3, #16
 8001b5a:	e01e      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	e01c      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b60:	230e      	movs	r3, #14
 8001b62:	e01a      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b64:	230d      	movs	r3, #13
 8001b66:	e018      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b68:	230c      	movs	r3, #12
 8001b6a:	e016      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b6c:	230b      	movs	r3, #11
 8001b6e:	e014      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b70:	230a      	movs	r3, #10
 8001b72:	e012      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b74:	2309      	movs	r3, #9
 8001b76:	e010      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b78:	2308      	movs	r3, #8
 8001b7a:	e00e      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	e00c      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b80:	2306      	movs	r3, #6
 8001b82:	e00a      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b84:	2305      	movs	r3, #5
 8001b86:	e008      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b88:	2304      	movs	r3, #4
 8001b8a:	e006      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e004      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e002      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1ce>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	6852      	ldr	r2, [r2, #4]
 8001b9e:	201f      	movs	r0, #31
 8001ba0:	4002      	ands	r2, r0
 8001ba2:	4093      	lsls	r3, r2
 8001ba4:	000a      	movs	r2, r1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d808      	bhi.n	8001bce <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	001a      	movs	r2, r3
 8001bca:	f7ff fc7f 	bl	80014cc <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	001a      	movs	r2, r3
 8001bdc:	f7ff fcba 	bl	8001554 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db00      	blt.n	8001bea <HAL_ADC_ConfigChannel+0x21e>
 8001be8:	e0b8      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bea:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <HAL_ADC_ConfigChannel+0x358>)
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff fc43 	bl	8001478 <LL_ADC_GetCommonPathInternalCh>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a4b      	ldr	r2, [pc, #300]	; (8001d28 <HAL_ADC_ConfigChannel+0x35c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d11d      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x270>
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	4013      	ands	r3, r2
 8001c08:	d118      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	0412      	lsls	r2, r2, #16
 8001c10:	4313      	orrs	r3, r2
 8001c12:	4a44      	ldr	r2, [pc, #272]	; (8001d24 <HAL_ADC_ConfigChannel+0x358>)
 8001c14:	0019      	movs	r1, r3
 8001c16:	0010      	movs	r0, r2
 8001c18:	f7ff fc1a 	bl	8001450 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c1c:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_ADC_ConfigChannel+0x360>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4943      	ldr	r1, [pc, #268]	; (8001d30 <HAL_ADC_ConfigChannel+0x364>)
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7fe fa6e 	bl	8000104 <__udivsi3>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001c2c:	e002      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f9      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c3a:	e08f      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a3c      	ldr	r2, [pc, #240]	; (8001d34 <HAL_ADC_ConfigChannel+0x368>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10e      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x298>
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	045b      	lsls	r3, r3, #17
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d109      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	0452      	lsls	r2, r2, #17
 8001c56:	4313      	orrs	r3, r2
 8001c58:	4a32      	ldr	r2, [pc, #200]	; (8001d24 <HAL_ADC_ConfigChannel+0x358>)
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	0010      	movs	r0, r2
 8001c5e:	f7ff fbf7 	bl	8001450 <LL_ADC_SetCommonPathInternalCh>
 8001c62:	e07b      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a33      	ldr	r2, [pc, #204]	; (8001d38 <HAL_ADC_ConfigChannel+0x36c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d000      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x2a4>
 8001c6e:	e075      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	03db      	lsls	r3, r3, #15
 8001c76:	4013      	ands	r3, r2
 8001c78:	d000      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0x2b0>
 8001c7a:	e06f      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	03d2      	lsls	r2, r2, #15
 8001c82:	4313      	orrs	r3, r2
 8001c84:	4a27      	ldr	r2, [pc, #156]	; (8001d24 <HAL_ADC_ConfigChannel+0x358>)
 8001c86:	0019      	movs	r1, r3
 8001c88:	0010      	movs	r0, r2
 8001c8a:	f7ff fbe1 	bl	8001450 <LL_ADC_SetCommonPathInternalCh>
 8001c8e:	e065      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	061b      	lsls	r3, r3, #24
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d004      	beq.n	8001ca6 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001ca0:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_ADC_ConfigChannel+0x354>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d107      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0019      	movs	r1, r3
 8001cb0:	0010      	movs	r0, r2
 8001cb2:	f7ff fc3c 	bl	800152e <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da4e      	bge.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_ADC_ConfigChannel+0x358>)
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff fbd9 	bl	8001478 <LL_ADC_GetCommonPathInternalCh>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <HAL_ADC_ConfigChannel+0x35c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d108      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_ADC_ConfigChannel+0x370>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <HAL_ADC_ConfigChannel+0x358>)
 8001cdc:	0019      	movs	r1, r3
 8001cde:	0010      	movs	r0, r2
 8001ce0:	f7ff fbb6 	bl	8001450 <LL_ADC_SetCommonPathInternalCh>
 8001ce4:	e03a      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <HAL_ADC_ConfigChannel+0x368>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d108      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_ADC_ConfigChannel+0x374>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_ADC_ConfigChannel+0x358>)
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	0010      	movs	r0, r2
 8001cfc:	f7ff fba8 	bl	8001450 <LL_ADC_SetCommonPathInternalCh>
 8001d00:	e02c      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <HAL_ADC_ConfigChannel+0x36c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d127      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_ADC_ConfigChannel+0x378>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_ADC_ConfigChannel+0x358>)
 8001d14:	0019      	movs	r1, r3
 8001d16:	0010      	movs	r0, r2
 8001d18:	f7ff fb9a 	bl	8001450 <LL_ADC_SetCommonPathInternalCh>
 8001d1c:	e01e      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x390>
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	80000004 	.word	0x80000004
 8001d24:	40012708 	.word	0x40012708
 8001d28:	b0001000 	.word	0xb0001000
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	00030d40 	.word	0x00030d40
 8001d34:	b8004000 	.word	0xb8004000
 8001d38:	b4002000 	.word	0xb4002000
 8001d3c:	ff7fffff 	.word	0xff7fffff
 8001d40:	feffffff 	.word	0xfeffffff
 8001d44:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001d54:	2317      	movs	r3, #23
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2254      	movs	r2, #84	; 0x54
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001d64:	2317      	movs	r3, #23
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	781b      	ldrb	r3, [r3, #0]
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b006      	add	sp, #24
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	1dfb      	adds	r3, r7, #7
 8001d7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	1dfb      	adds	r3, r7, #7
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b7f      	cmp	r3, #127	; 0x7f
 8001d86:	d809      	bhi.n	8001d9c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	231f      	movs	r3, #31
 8001d90:	401a      	ands	r2, r3
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <__NVIC_EnableIRQ+0x30>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	4091      	lsls	r1, r2
 8001d98:	000a      	movs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
  }
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b002      	add	sp, #8
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	0002      	movs	r2, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	1dfb      	adds	r3, r7, #7
 8001db4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b7f      	cmp	r3, #127	; 0x7f
 8001dbc:	d828      	bhi.n	8001e10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dbe:	4a2f      	ldr	r2, [pc, #188]	; (8001e7c <__NVIC_SetPriority+0xd4>)
 8001dc0:	1dfb      	adds	r3, r7, #7
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	33c0      	adds	r3, #192	; 0xc0
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	589b      	ldr	r3, [r3, r2]
 8001dce:	1dfa      	adds	r2, r7, #7
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	0011      	movs	r1, r2
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	00d2      	lsls	r2, r2, #3
 8001dda:	21ff      	movs	r1, #255	; 0xff
 8001ddc:	4091      	lsls	r1, r2
 8001dde:	000a      	movs	r2, r1
 8001de0:	43d2      	mvns	r2, r2
 8001de2:	401a      	ands	r2, r3
 8001de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	22ff      	movs	r2, #255	; 0xff
 8001dec:	401a      	ands	r2, r3
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	0018      	movs	r0, r3
 8001df4:	2303      	movs	r3, #3
 8001df6:	4003      	ands	r3, r0
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dfc:	481f      	ldr	r0, [pc, #124]	; (8001e7c <__NVIC_SetPriority+0xd4>)
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	430a      	orrs	r2, r1
 8001e08:	33c0      	adds	r3, #192	; 0xc0
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e0e:	e031      	b.n	8001e74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e10:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <__NVIC_SetPriority+0xd8>)
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	0019      	movs	r1, r3
 8001e18:	230f      	movs	r3, #15
 8001e1a:	400b      	ands	r3, r1
 8001e1c:	3b08      	subs	r3, #8
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3306      	adds	r3, #6
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	18d3      	adds	r3, r2, r3
 8001e26:	3304      	adds	r3, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	1dfa      	adds	r2, r7, #7
 8001e2c:	7812      	ldrb	r2, [r2, #0]
 8001e2e:	0011      	movs	r1, r2
 8001e30:	2203      	movs	r2, #3
 8001e32:	400a      	ands	r2, r1
 8001e34:	00d2      	lsls	r2, r2, #3
 8001e36:	21ff      	movs	r1, #255	; 0xff
 8001e38:	4091      	lsls	r1, r2
 8001e3a:	000a      	movs	r2, r1
 8001e3c:	43d2      	mvns	r2, r2
 8001e3e:	401a      	ands	r2, r3
 8001e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	22ff      	movs	r2, #255	; 0xff
 8001e48:	401a      	ands	r2, r3
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	2303      	movs	r3, #3
 8001e52:	4003      	ands	r3, r0
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e58:	4809      	ldr	r0, [pc, #36]	; (8001e80 <__NVIC_SetPriority+0xd8>)
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	001c      	movs	r4, r3
 8001e60:	230f      	movs	r3, #15
 8001e62:	4023      	ands	r3, r4
 8001e64:	3b08      	subs	r3, #8
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	3306      	adds	r3, #6
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	18c3      	adds	r3, r0, r3
 8001e70:	3304      	adds	r3, #4
 8001e72:	601a      	str	r2, [r3, #0]
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b003      	add	sp, #12
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <SysTick_Config+0x40>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e010      	b.n	8001ebc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <SysTick_Config+0x44>)
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	3a01      	subs	r2, #1
 8001ea0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff ff7d 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <SysTick_Config+0x44>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x44>)
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	00ffffff 	.word	0x00ffffff
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	1c02      	adds	r2, r0, #0
 8001edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	0011      	movs	r1, r2
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff ff5d 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b004      	add	sp, #16
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	0002      	movs	r2, r0
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b25b      	sxtb	r3, r3
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff ff33 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b002      	add	sp, #8
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff ffaf 	bl	8001e84 <SysTick_Config>
 8001f26:	0003      	movs	r3, r0
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e077      	b.n	8002032 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a3d      	ldr	r2, [pc, #244]	; (800203c <HAL_DMA_Init+0x10c>)
 8001f48:	4694      	mov	ip, r2
 8001f4a:	4463      	add	r3, ip
 8001f4c:	2114      	movs	r1, #20
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7fe f8d8 	bl	8000104 <__udivsi3>
 8001f54:	0003      	movs	r3, r0
 8001f56:	009a      	lsls	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2225      	movs	r2, #37	; 0x25
 8001f60:	2102      	movs	r1, #2
 8001f62:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4934      	ldr	r1, [pc, #208]	; (8002040 <HAL_DMA_Init+0x110>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6819      	ldr	r1, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 f8fb 	bl	80021a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	01db      	lsls	r3, r3, #7
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d102      	bne.n	8001fc4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	21ff      	movs	r1, #255	; 0xff
 8001fce:	400a      	ands	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fda:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d011      	beq.n	8002008 <HAL_DMA_Init+0xd8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d80d      	bhi.n	8002008 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f906 	bl	8002200 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	e008      	b.n	800201a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2225      	movs	r2, #37	; 0x25
 8002024:	2101      	movs	r1, #1
 8002026:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	; 0x24
 800202c:	2100      	movs	r1, #0
 800202e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b002      	add	sp, #8
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	bffdfff8 	.word	0xbffdfff8
 8002040:	ffff800f 	.word	0xffff800f

08002044 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 800204c:	4b55      	ldr	r3, [pc, #340]	; (80021a4 <HAL_DMA_IRQHandler+0x160>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	221c      	movs	r2, #28
 8002060:	4013      	ands	r3, r2
 8002062:	2204      	movs	r2, #4
 8002064:	409a      	lsls	r2, r3
 8002066:	0013      	movs	r3, r2
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4013      	ands	r3, r2
 800206c:	d027      	beq.n	80020be <HAL_DMA_IRQHandler+0x7a>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2204      	movs	r2, #4
 8002072:	4013      	ands	r3, r2
 8002074:	d023      	beq.n	80020be <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2220      	movs	r2, #32
 800207e:	4013      	ands	r3, r2
 8002080:	d107      	bne.n	8002092 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2104      	movs	r1, #4
 800208e:	438a      	bics	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002092:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <HAL_DMA_IRQHandler+0x160>)
 8002094:	6859      	ldr	r1, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	221c      	movs	r2, #28
 800209c:	4013      	ands	r3, r2
 800209e:	2204      	movs	r2, #4
 80020a0:	409a      	lsls	r2, r3
 80020a2:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_DMA_IRQHandler+0x160>)
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d100      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x6e>
 80020b0:	e073      	b.n	800219a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	0010      	movs	r0, r2
 80020ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020bc:	e06d      	b.n	800219a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	221c      	movs	r2, #28
 80020c4:	4013      	ands	r3, r2
 80020c6:	2202      	movs	r2, #2
 80020c8:	409a      	lsls	r2, r3
 80020ca:	0013      	movs	r3, r2
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	d02e      	beq.n	8002130 <HAL_DMA_IRQHandler+0xec>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2202      	movs	r2, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	d02a      	beq.n	8002130 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2220      	movs	r2, #32
 80020e2:	4013      	ands	r3, r2
 80020e4:	d10b      	bne.n	80020fe <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	210a      	movs	r1, #10
 80020f2:	438a      	bics	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2225      	movs	r2, #37	; 0x25
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_DMA_IRQHandler+0x160>)
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	221c      	movs	r2, #28
 8002108:	4013      	ands	r3, r2
 800210a:	2202      	movs	r2, #2
 800210c:	409a      	lsls	r2, r3
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_DMA_IRQHandler+0x160>)
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	2100      	movs	r1, #0
 800211a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d03a      	beq.n	800219a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	0010      	movs	r0, r2
 800212c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800212e:	e034      	b.n	800219a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	221c      	movs	r2, #28
 8002136:	4013      	ands	r3, r2
 8002138:	2208      	movs	r2, #8
 800213a:	409a      	lsls	r2, r3
 800213c:	0013      	movs	r3, r2
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	d02b      	beq.n	800219c <HAL_DMA_IRQHandler+0x158>
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2208      	movs	r2, #8
 8002148:	4013      	ands	r3, r2
 800214a:	d027      	beq.n	800219c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	210e      	movs	r1, #14
 8002158:	438a      	bics	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_DMA_IRQHandler+0x160>)
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	221c      	movs	r2, #28
 8002166:	4013      	ands	r3, r2
 8002168:	2201      	movs	r2, #1
 800216a:	409a      	lsls	r2, r3
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_DMA_IRQHandler+0x160>)
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2225      	movs	r2, #37	; 0x25
 800217c:	2101      	movs	r1, #1
 800217e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	0010      	movs	r0, r2
 8002198:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46c0      	nop			; (mov r8, r8)
}
 800219e:	46bd      	mov	sp, r7
 80021a0:	b004      	add	sp, #16
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40020000 	.word	0x40020000

080021a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	001a      	movs	r2, r3
 80021b6:	23ff      	movs	r3, #255	; 0xff
 80021b8:	4013      	ands	r3, r2
 80021ba:	3b08      	subs	r3, #8
 80021bc:	2114      	movs	r1, #20
 80021be:	0018      	movs	r0, r3
 80021c0:	f7fd ffa0 	bl	8000104 <__udivsi3>
 80021c4:	0003      	movs	r3, r0
 80021c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80021d0:	4694      	mov	ip, r2
 80021d2:	4463      	add	r3, ip
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	001a      	movs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80021e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	221c      	movs	r2, #28
 80021e6:	4013      	ands	r3, r2
 80021e8:	2201      	movs	r2, #1
 80021ea:	409a      	lsls	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b004      	add	sp, #16
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	10008200 	.word	0x10008200
 80021fc:	40020880 	.word	0x40020880

08002200 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	22ff      	movs	r2, #255	; 0xff
 800220e:	4013      	ands	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002216:	4694      	mov	ip, r2
 8002218:	4463      	add	r3, ip
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	001a      	movs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002226:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3b01      	subs	r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	4013      	ands	r3, r2
 8002230:	2201      	movs	r2, #1
 8002232:	409a      	lsls	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b004      	add	sp, #16
 800223e:	bd80      	pop	{r7, pc}
 8002240:	1000823f 	.word	0x1000823f
 8002244:	40020940 	.word	0x40020940

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	e147      	b.n	80024e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4091      	lsls	r1, r2
 8002262:	000a      	movs	r2, r1
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d100      	bne.n	8002270 <HAL_GPIO_Init+0x28>
 800226e:	e138      	b.n	80024e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x38>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b12      	cmp	r3, #18
 800227e:	d123      	bne.n	80022c8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	08da      	lsrs	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	0092      	lsls	r2, r2, #2
 800228a:	58d3      	ldr	r3, [r2, r3]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2207      	movs	r2, #7
 8002292:	4013      	ands	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	409a      	lsls	r2, r3
 800229a:	0013      	movs	r3, r2
 800229c:	43da      	mvns	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2107      	movs	r1, #7
 80022ac:	400b      	ands	r3, r1
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	409a      	lsls	r2, r3
 80022b2:	0013      	movs	r3, r2
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	08da      	lsrs	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3208      	adds	r2, #8
 80022c2:	0092      	lsls	r2, r2, #2
 80022c4:	6939      	ldr	r1, [r7, #16]
 80022c6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	409a      	lsls	r2, r3
 80022d6:	0013      	movs	r3, r2
 80022d8:	43da      	mvns	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2203      	movs	r2, #3
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	409a      	lsls	r2, r3
 80022ee:	0013      	movs	r3, r2
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d00b      	beq.n	800231c <HAL_GPIO_Init+0xd4>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d007      	beq.n	800231c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002310:	2b11      	cmp	r3, #17
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b12      	cmp	r3, #18
 800231a:	d130      	bne.n	800237e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	409a      	lsls	r2, r3
 800232a:	0013      	movs	r3, r2
 800232c:	43da      	mvns	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	409a      	lsls	r2, r3
 800233e:	0013      	movs	r3, r2
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002352:	2201      	movs	r2, #1
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	43da      	mvns	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	2201      	movs	r2, #1
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
 8002370:	0013      	movs	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	409a      	lsls	r2, r3
 800238c:	0013      	movs	r3, r2
 800238e:	43da      	mvns	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	055b      	lsls	r3, r3, #21
 80023b6:	4013      	ands	r3, r2
 80023b8:	d100      	bne.n	80023bc <HAL_GPIO_Init+0x174>
 80023ba:	e092      	b.n	80024e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023bc:	4a50      	ldr	r2, [pc, #320]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3318      	adds	r3, #24
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	589b      	ldr	r3, [r3, r2]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2203      	movs	r2, #3
 80023ce:	4013      	ands	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	220f      	movs	r2, #15
 80023d4:	409a      	lsls	r2, r3
 80023d6:	0013      	movs	r3, r2
 80023d8:	43da      	mvns	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	23a0      	movs	r3, #160	; 0xa0
 80023e4:	05db      	lsls	r3, r3, #23
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d013      	beq.n	8002412 <HAL_GPIO_Init+0x1ca>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a45      	ldr	r2, [pc, #276]	; (8002504 <HAL_GPIO_Init+0x2bc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_GPIO_Init+0x1c6>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a44      	ldr	r2, [pc, #272]	; (8002508 <HAL_GPIO_Init+0x2c0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_Init+0x1c2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a43      	ldr	r2, [pc, #268]	; (800250c <HAL_GPIO_Init+0x2c4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_GPIO_Init+0x1be>
 8002402:	2303      	movs	r3, #3
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x1cc>
 8002406:	2305      	movs	r3, #5
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x1cc>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x1cc>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x1cc>
 8002412:	2300      	movs	r3, #0
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	2103      	movs	r1, #3
 8002418:	400a      	ands	r2, r1
 800241a:	00d2      	lsls	r2, r2, #3
 800241c:	4093      	lsls	r3, r2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002424:	4936      	ldr	r1, [pc, #216]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3318      	adds	r3, #24
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002432:	4a33      	ldr	r2, [pc, #204]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	58d3      	ldr	r3, [r2, r3]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43da      	mvns	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	025b      	lsls	r3, r3, #9
 800244c:	4013      	ands	r3, r2
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002458:	4929      	ldr	r1, [pc, #164]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002460:	4a27      	ldr	r2, [pc, #156]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 8002462:	2384      	movs	r3, #132	; 0x84
 8002464:	58d3      	ldr	r3, [r2, r3]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43da      	mvns	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	029b      	lsls	r3, r3, #10
 800247a:	4013      	ands	r3, r2
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002486:	491e      	ldr	r1, [pc, #120]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 8002488:	2284      	movs	r2, #132	; 0x84
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800248e:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43da      	mvns	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	035b      	lsls	r3, r3, #13
 80024a6:	4013      	ands	r3, r2
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	039b      	lsls	r3, r3, #14
 80024d0:	4013      	ands	r3, r2
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_GPIO_Init+0x2b8>)
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	40da      	lsrs	r2, r3
 80024f0:	1e13      	subs	r3, r2, #0
 80024f2:	d000      	beq.n	80024f6 <HAL_GPIO_Init+0x2ae>
 80024f4:	e6b0      	b.n	8002258 <HAL_GPIO_Init+0x10>
  }
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b006      	add	sp, #24
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	40021800 	.word	0x40021800
 8002504:	50000400 	.word	0x50000400
 8002508:	50000800 	.word	0x50000800
 800250c:	50000c00 	.word	0x50000c00

08002510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	0008      	movs	r0, r1
 800251a:	0011      	movs	r1, r2
 800251c:	1cbb      	adds	r3, r7, #2
 800251e:	1c02      	adds	r2, r0, #0
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	1c7b      	adds	r3, r7, #1
 8002524:	1c0a      	adds	r2, r1, #0
 8002526:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002528:	1c7b      	adds	r3, r7, #1
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002530:	1cbb      	adds	r3, r7, #2
 8002532:	881a      	ldrh	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002538:	e003      	b.n	8002542 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800253a:	1cbb      	adds	r3, r7, #2
 800253c:	881a      	ldrh	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e082      	b.n	8002664 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2241      	movs	r2, #65	; 0x41
 8002562:	5c9b      	ldrb	r3, [r3, r2]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d107      	bne.n	800257a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2240      	movs	r2, #64	; 0x40
 800256e:	2100      	movs	r1, #0
 8002570:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	0018      	movs	r0, r3
 8002576:	f7fe fc4b 	bl	8000e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2241      	movs	r2, #65	; 0x41
 800257e:	2124      	movs	r1, #36	; 0x24
 8002580:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	438a      	bics	r2, r1
 8002590:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4934      	ldr	r1, [pc, #208]	; (800266c <HAL_I2C_Init+0x120>)
 800259c:	400a      	ands	r2, r1
 800259e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4931      	ldr	r1, [pc, #196]	; (8002670 <HAL_I2C_Init+0x124>)
 80025ac:	400a      	ands	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d108      	bne.n	80025ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	0209      	lsls	r1, r1, #8
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	e007      	b.n	80025da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2184      	movs	r1, #132	; 0x84
 80025d4:	0209      	lsls	r1, r1, #8
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d104      	bne.n	80025ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	491f      	ldr	r1, [pc, #124]	; (8002674 <HAL_I2C_Init+0x128>)
 80025f8:	430a      	orrs	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	491a      	ldr	r1, [pc, #104]	; (8002670 <HAL_I2C_Init+0x124>)
 8002608:	400a      	ands	r2, r1
 800260a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	431a      	orrs	r2, r3
 8002616:	0011      	movs	r1, r2
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	021a      	lsls	r2, r3, #8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69d9      	ldr	r1, [r3, #28]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1a      	ldr	r2, [r3, #32]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2101      	movs	r1, #1
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2241      	movs	r2, #65	; 0x41
 8002650:	2120      	movs	r1, #32
 8002652:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2242      	movs	r2, #66	; 0x42
 800265e:	2100      	movs	r1, #0
 8002660:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b002      	add	sp, #8
 800266a:	bd80      	pop	{r7, pc}
 800266c:	f0ffffff 	.word	0xf0ffffff
 8002670:	ffff7fff 	.word	0xffff7fff
 8002674:	02008000 	.word	0x02008000

08002678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2241      	movs	r2, #65	; 0x41
 8002686:	5c9b      	ldrb	r3, [r3, r2]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b20      	cmp	r3, #32
 800268c:	d138      	bne.n	8002700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2240      	movs	r2, #64	; 0x40
 8002692:	5c9b      	ldrb	r3, [r3, r2]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002698:	2302      	movs	r3, #2
 800269a:	e032      	b.n	8002702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2240      	movs	r2, #64	; 0x40
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2241      	movs	r2, #65	; 0x41
 80026a8:	2124      	movs	r1, #36	; 0x24
 80026aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2101      	movs	r1, #1
 80026b8:	438a      	bics	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4911      	ldr	r1, [pc, #68]	; (800270c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2101      	movs	r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2241      	movs	r2, #65	; 0x41
 80026f0:	2120      	movs	r1, #32
 80026f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2240      	movs	r2, #64	; 0x40
 80026f8:	2100      	movs	r1, #0
 80026fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e000      	b.n	8002702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
  }
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b002      	add	sp, #8
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	ffffefff 	.word	0xffffefff

08002710 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2241      	movs	r2, #65	; 0x41
 800271e:	5c9b      	ldrb	r3, [r3, r2]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b20      	cmp	r3, #32
 8002724:	d139      	bne.n	800279a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2240      	movs	r2, #64	; 0x40
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002730:	2302      	movs	r3, #2
 8002732:	e033      	b.n	800279c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2240      	movs	r2, #64	; 0x40
 8002738:	2101      	movs	r1, #1
 800273a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2241      	movs	r2, #65	; 0x41
 8002740:	2124      	movs	r1, #36	; 0x24
 8002742:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2101      	movs	r1, #1
 8002750:	438a      	bics	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a11      	ldr	r2, [pc, #68]	; (80027a4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2241      	movs	r2, #65	; 0x41
 800278a:	2120      	movs	r1, #32
 800278c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2240      	movs	r2, #64	; 0x40
 8002792:	2100      	movs	r1, #0
 8002794:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b004      	add	sp, #16
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	fffff0ff 	.word	0xfffff0ff

080027a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d11f      	bne.n	800280c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	0013      	movs	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	189b      	adds	r3, r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4912      	ldr	r1, [pc, #72]	; (8002824 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80027da:	0018      	movs	r0, r3
 80027dc:	f7fd fc92 	bl	8000104 <__udivsi3>
 80027e0:	0003      	movs	r3, r0
 80027e2:	3301      	adds	r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027e6:	e008      	b.n	80027fa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e001      	b.n	80027fa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e009      	b.n	800280e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	401a      	ands	r2, r3
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	429a      	cmp	r2, r3
 800280a:	d0ed      	beq.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b004      	add	sp, #16
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	40007000 	.word	0x40007000
 800281c:	fffff9ff 	.word	0xfffff9ff
 8002820:	20000000 	.word	0x20000000
 8002824:	000f4240 	.word	0x000f4240

08002828 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <LL_RCC_GetAPB1Prescaler+0x14>)
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	23e0      	movs	r3, #224	; 0xe0
 8002832:	01db      	lsls	r3, r3, #7
 8002834:	4013      	ands	r3, r2
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e304      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2201      	movs	r2, #1
 8002858:	4013      	ands	r3, r2
 800285a:	d100      	bne.n	800285e <HAL_RCC_OscConfig+0x1e>
 800285c:	e07c      	b.n	8002958 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285e:	4bc3      	ldr	r3, [pc, #780]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2238      	movs	r2, #56	; 0x38
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002868:	4bc0      	ldr	r3, [pc, #768]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2203      	movs	r2, #3
 800286e:	4013      	ands	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b10      	cmp	r3, #16
 8002876:	d102      	bne.n	800287e <HAL_RCC_OscConfig+0x3e>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d002      	beq.n	8002884 <HAL_RCC_OscConfig+0x44>
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d10b      	bne.n	800289c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	4bb9      	ldr	r3, [pc, #740]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	029b      	lsls	r3, r3, #10
 800288c:	4013      	ands	r3, r2
 800288e:	d062      	beq.n	8002956 <HAL_RCC_OscConfig+0x116>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d15e      	bne.n	8002956 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e2df      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	025b      	lsls	r3, r3, #9
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x78>
 80028a8:	4bb0      	ldr	r3, [pc, #704]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4baf      	ldr	r3, [pc, #700]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	0249      	lsls	r1, r1, #9
 80028b2:	430a      	orrs	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e020      	b.n	80028fa <HAL_RCC_OscConfig+0xba>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	23a0      	movs	r3, #160	; 0xa0
 80028be:	02db      	lsls	r3, r3, #11
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d10e      	bne.n	80028e2 <HAL_RCC_OscConfig+0xa2>
 80028c4:	4ba9      	ldr	r3, [pc, #676]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4ba8      	ldr	r3, [pc, #672]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	02c9      	lsls	r1, r1, #11
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	4ba6      	ldr	r3, [pc, #664]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4ba5      	ldr	r3, [pc, #660]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	0249      	lsls	r1, r1, #9
 80028dc:	430a      	orrs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e00b      	b.n	80028fa <HAL_RCC_OscConfig+0xba>
 80028e2:	4ba2      	ldr	r3, [pc, #648]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4ba1      	ldr	r3, [pc, #644]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80028e8:	49a1      	ldr	r1, [pc, #644]	; (8002b70 <HAL_RCC_OscConfig+0x330>)
 80028ea:	400a      	ands	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	4b9f      	ldr	r3, [pc, #636]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b9e      	ldr	r3, [pc, #632]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80028f4:	499f      	ldr	r1, [pc, #636]	; (8002b74 <HAL_RCC_OscConfig+0x334>)
 80028f6:	400a      	ands	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d014      	beq.n	800292c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fd9b 	bl	800143c <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe fd96 	bl	800143c <HAL_GetTick>
 8002910:	0002      	movs	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e29e      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291e:	4b93      	ldr	r3, [pc, #588]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	029b      	lsls	r3, r3, #10
 8002926:	4013      	ands	r3, r2
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xcc>
 800292a:	e015      	b.n	8002958 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fd86 	bl	800143c <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002936:	f7fe fd81 	bl	800143c <HAL_GetTick>
 800293a:	0002      	movs	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b64      	cmp	r3, #100	; 0x64
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e289      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002948:	4b88      	ldr	r3, [pc, #544]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	029b      	lsls	r3, r3, #10
 8002950:	4013      	ands	r3, r2
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0xf6>
 8002954:	e000      	b.n	8002958 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002956:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d100      	bne.n	8002964 <HAL_RCC_OscConfig+0x124>
 8002962:	e099      	b.n	8002a98 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002964:	4b81      	ldr	r3, [pc, #516]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2238      	movs	r2, #56	; 0x38
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800296e:	4b7f      	ldr	r3, [pc, #508]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2203      	movs	r2, #3
 8002974:	4013      	ands	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b10      	cmp	r3, #16
 800297c:	d102      	bne.n	8002984 <HAL_RCC_OscConfig+0x144>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d002      	beq.n	800298a <HAL_RCC_OscConfig+0x14a>
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d135      	bne.n	80029f6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298a:	4b78      	ldr	r3, [pc, #480]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4013      	ands	r3, r2
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x162>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e25c      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a2:	4b72      	ldr	r3, [pc, #456]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4a74      	ldr	r2, [pc, #464]	; (8002b78 <HAL_RCC_OscConfig+0x338>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	021a      	lsls	r2, r3, #8
 80029b2:	4b6e      	ldr	r3, [pc, #440]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80029b4:	430a      	orrs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d112      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029be:	4b6b      	ldr	r3, [pc, #428]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6e      	ldr	r2, [pc, #440]	; (8002b7c <HAL_RCC_OscConfig+0x33c>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80029d2:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0adb      	lsrs	r3, r3, #11
 80029d8:	2207      	movs	r2, #7
 80029da:	4013      	ands	r3, r2
 80029dc:	4a68      	ldr	r2, [pc, #416]	; (8002b80 <HAL_RCC_OscConfig+0x340>)
 80029de:	40da      	lsrs	r2, r3
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_RCC_OscConfig+0x344>)
 80029e2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029e4:	4b68      	ldr	r3, [pc, #416]	; (8002b88 <HAL_RCC_OscConfig+0x348>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7fe fccd 	bl	8001388 <HAL_InitTick>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d051      	beq.n	8002a96 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e232      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d030      	beq.n	8002a60 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029fe:	4b5b      	ldr	r3, [pc, #364]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a5e      	ldr	r2, [pc, #376]	; (8002b7c <HAL_RCC_OscConfig+0x33c>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	0019      	movs	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	4b57      	ldr	r3, [pc, #348]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002a12:	4b56      	ldr	r3, [pc, #344]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b55      	ldr	r3, [pc, #340]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	0049      	lsls	r1, r1, #1
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fd0c 	bl	800143c <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe fd07 	bl	800143c <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e20f      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4013      	ands	r3, r2
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b48      	ldr	r3, [pc, #288]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a4a      	ldr	r2, [pc, #296]	; (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	021a      	lsls	r2, r3, #8
 8002a58:	4b44      	ldr	r3, [pc, #272]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	e01b      	b.n	8002a98 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002a60:	4b42      	ldr	r3, [pc, #264]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002a66:	4949      	ldr	r1, [pc, #292]	; (8002b8c <HAL_RCC_OscConfig+0x34c>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fce6 	bl	800143c <HAL_GetTick>
 8002a70:	0003      	movs	r3, r0
 8002a72:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a76:	f7fe fce1 	bl	800143c <HAL_GetTick>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1e9      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a88:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4013      	ands	r3, r2
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x236>
 8002a94:	e000      	b.n	8002a98 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d047      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002aa2:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2238      	movs	r2, #56	; 0x38
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b18      	cmp	r3, #24
 8002aac:	d10a      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002aae:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d03c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2f2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d138      	bne.n	8002b32 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e1cb      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d019      	beq.n	8002b00 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002ace:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ad0:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fcb0 	bl	800143c <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae2:	f7fe fcab 	bl	800143c <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e1b3      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af8:	2202      	movs	r2, #2
 8002afa:	4013      	ands	r3, r2
 8002afc:	d0f1      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2a2>
 8002afe:	e018      	b.n	8002b32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002b02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002b06:	2101      	movs	r1, #1
 8002b08:	438a      	bics	r2, r1
 8002b0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fc96 	bl	800143c <HAL_GetTick>
 8002b10:	0003      	movs	r3, r0
 8002b12:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b16:	f7fe fc91 	bl	800143c <HAL_GetTick>
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e199      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d1f1      	bne.n	8002b16 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2204      	movs	r2, #4
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d100      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2fe>
 8002b3c:	e0c6      	b.n	8002ccc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	231f      	movs	r3, #31
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2238      	movs	r2, #56	; 0x38
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d11e      	bne.n	8002b90 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_RCC_OscConfig+0x32c>)
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d100      	bne.n	8002b5e <HAL_RCC_OscConfig+0x31e>
 8002b5c:	e0b6      	b.n	8002ccc <HAL_RCC_OscConfig+0x48c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d000      	beq.n	8002b68 <HAL_RCC_OscConfig+0x328>
 8002b66:	e0b1      	b.n	8002ccc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e177      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	fffeffff 	.word	0xfffeffff
 8002b74:	fffbffff 	.word	0xfffbffff
 8002b78:	ffff80ff 	.word	0xffff80ff
 8002b7c:	ffffc7ff 	.word	0xffffc7ff
 8002b80:	00f42400 	.word	0x00f42400
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b90:	4bb4      	ldr	r3, [pc, #720]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	055b      	lsls	r3, r3, #21
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x360>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x362>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d011      	beq.n	8002bca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	4baf      	ldr	r3, [pc, #700]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002baa:	4bae      	ldr	r3, [pc, #696]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	0549      	lsls	r1, r1, #21
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bb4:	4bab      	ldr	r3, [pc, #684]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	055b      	lsls	r3, r3, #21
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002bc2:	231f      	movs	r3, #31
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bca:	4ba7      	ldr	r3, [pc, #668]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d11a      	bne.n	8002c0c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd6:	4ba4      	ldr	r3, [pc, #656]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4ba3      	ldr	r3, [pc, #652]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	0049      	lsls	r1, r1, #1
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fc2a 	bl	800143c <HAL_GetTick>
 8002be8:	0003      	movs	r3, r0
 8002bea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7fe fc25 	bl	800143c <HAL_GetTick>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e12d      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c00:	4b99      	ldr	r3, [pc, #612]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3e2>
 8002c14:	4b93      	ldr	r3, [pc, #588]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c18:	4b92      	ldr	r3, [pc, #584]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c20:	e01c      	b.n	8002c5c <HAL_RCC_OscConfig+0x41c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x404>
 8002c2a:	4b8e      	ldr	r3, [pc, #568]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c2e:	4b8d      	ldr	r3, [pc, #564]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c30:	2104      	movs	r1, #4
 8002c32:	430a      	orrs	r2, r1
 8002c34:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c36:	4b8b      	ldr	r3, [pc, #556]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c3a:	4b8a      	ldr	r3, [pc, #552]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0x41c>
 8002c44:	4b87      	ldr	r3, [pc, #540]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c48:	4b86      	ldr	r3, [pc, #536]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c50:	4b84      	ldr	r3, [pc, #528]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c54:	4b83      	ldr	r3, [pc, #524]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c56:	2104      	movs	r1, #4
 8002c58:	438a      	bics	r2, r1
 8002c5a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d014      	beq.n	8002c8e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fbea 	bl	800143c <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6c:	e009      	b.n	8002c82 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fbe5 	bl	800143c <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	4a7c      	ldr	r2, [pc, #496]	; (8002e6c <HAL_RCC_OscConfig+0x62c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0ec      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c82:	4b78      	ldr	r3, [pc, #480]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	2202      	movs	r2, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x42e>
 8002c8c:	e013      	b.n	8002cb6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fbd5 	bl	800143c <HAL_GetTick>
 8002c92:	0003      	movs	r3, r0
 8002c94:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c96:	e009      	b.n	8002cac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe fbd0 	bl	800143c <HAL_GetTick>
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	4a72      	ldr	r2, [pc, #456]	; (8002e6c <HAL_RCC_OscConfig+0x62c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0d7      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cac:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002cb6:	231f      	movs	r3, #31
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002cc0:	4b68      	ldr	r3, [pc, #416]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc4:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002cc6:	496a      	ldr	r1, [pc, #424]	; (8002e70 <HAL_RCC_OscConfig+0x630>)
 8002cc8:	400a      	ands	r2, r1
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d100      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x496>
 8002cd4:	e0c1      	b.n	8002e5a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2238      	movs	r2, #56	; 0x38
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d100      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4a4>
 8002ce2:	e081      	b.n	8002de8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d156      	bne.n	8002d9a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	4b5d      	ldr	r3, [pc, #372]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b5c      	ldr	r3, [pc, #368]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002cf2:	4960      	ldr	r1, [pc, #384]	; (8002e74 <HAL_RCC_OscConfig+0x634>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fba0 	bl	800143c <HAL_GetTick>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fe fb9b 	bl	800143c <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e0a3      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	049b      	lsls	r3, r3, #18
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d20:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a54      	ldr	r2, [pc, #336]	; (8002e78 <HAL_RCC_OscConfig+0x638>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1a      	ldr	r2, [r3, #32]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	4b45      	ldr	r3, [pc, #276]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002d50:	430a      	orrs	r2, r1
 8002d52:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d54:	4b43      	ldr	r3, [pc, #268]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002d5a:	2180      	movs	r1, #128	; 0x80
 8002d5c:	0449      	lsls	r1, r1, #17
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d62:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002d68:	2180      	movs	r1, #128	; 0x80
 8002d6a:	0549      	lsls	r1, r1, #21
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe fb64 	bl	800143c <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7fe fb5f 	bl	800143c <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e067      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8c:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	049b      	lsls	r3, r3, #18
 8002d94:	4013      	ands	r3, r2
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x53a>
 8002d98:	e05f      	b.n	8002e5a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b31      	ldr	r3, [pc, #196]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002da0:	4934      	ldr	r1, [pc, #208]	; (8002e74 <HAL_RCC_OscConfig+0x634>)
 8002da2:	400a      	ands	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002da6:	4b2f      	ldr	r3, [pc, #188]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002dac:	2103      	movs	r1, #3
 8002dae:	438a      	bics	r2, r1
 8002db0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002db2:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002db8:	4930      	ldr	r1, [pc, #192]	; (8002e7c <HAL_RCC_OscConfig+0x63c>)
 8002dba:	400a      	ands	r2, r1
 8002dbc:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fe fb3d 	bl	800143c <HAL_GetTick>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fb38 	bl	800143c <HAL_GetTick>
 8002dcc:	0002      	movs	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e040      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	049b      	lsls	r3, r3, #18
 8002de2:	4013      	ands	r3, r2
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x588>
 8002de6:	e038      	b.n	8002e5a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e033      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x624>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	401a      	ands	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d126      	bne.n	8002e56 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2270      	movs	r2, #112	; 0x70
 8002e0c:	401a      	ands	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d11f      	bne.n	8002e56 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	23fe      	movs	r3, #254	; 0xfe
 8002e1a:	01db      	lsls	r3, r3, #7
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d116      	bne.n	8002e56 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	23f8      	movs	r3, #248	; 0xf8
 8002e2c:	039b      	lsls	r3, r3, #14
 8002e2e:	401a      	ands	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d10e      	bne.n	8002e56 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	23e0      	movs	r3, #224	; 0xe0
 8002e3c:	051b      	lsls	r3, r3, #20
 8002e3e:	401a      	ands	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	0f5b      	lsrs	r3, r3, #29
 8002e4c:	075a      	lsls	r2, r3, #29
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b008      	add	sp, #32
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	00001388 	.word	0x00001388
 8002e70:	efffffff 	.word	0xefffffff
 8002e74:	feffffff 	.word	0xfeffffff
 8002e78:	11c1808c 	.word	0x11c1808c
 8002e7c:	eefeffff 	.word	0xeefeffff

08002e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0e9      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e94:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCC_ClockConfig+0x1f0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2207      	movs	r2, #7
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d91e      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b73      	ldr	r3, [pc, #460]	; (8003070 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	4b70      	ldr	r3, [pc, #448]	; (8003070 <HAL_RCC_ClockConfig+0x1f0>)
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fac2 	bl	800143c <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ebc:	e009      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebe:	f7fe fabd 	bl	800143c <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	4a6a      	ldr	r2, [pc, #424]	; (8003074 <HAL_RCC_ClockConfig+0x1f4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0ca      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ed2:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	4013      	ands	r3, r2
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d1ee      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d015      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d006      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ef4:	4b60      	ldr	r3, [pc, #384]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002efa:	21e0      	movs	r1, #224	; 0xe0
 8002efc:	01c9      	lsls	r1, r1, #7
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f02:	4b5d      	ldr	r3, [pc, #372]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4a5d      	ldr	r2, [pc, #372]	; (800307c <HAL_RCC_ClockConfig+0x1fc>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d057      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f28:	4b53      	ldr	r3, [pc, #332]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	029b      	lsls	r3, r3, #10
 8002f30:	4013      	ands	r3, r2
 8002f32:	d12b      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e097      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f40:	4b4d      	ldr	r3, [pc, #308]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	049b      	lsls	r3, r3, #18
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d11f      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e08b      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d107      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f58:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4013      	ands	r3, r2
 8002f62:	d113      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e07f      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f70:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f74:	2202      	movs	r2, #2
 8002f76:	4013      	ands	r3, r2
 8002f78:	d108      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e074      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7e:	4b3e      	ldr	r3, [pc, #248]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	2202      	movs	r2, #2
 8002f84:	4013      	ands	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e06d      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f8c:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2207      	movs	r2, #7
 8002f92:	4393      	bics	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fa4c 	bl	800143c <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa8:	e009      	b.n	8002fbe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002faa:	f7fe fa47 	bl	800143c <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	4a2f      	ldr	r2, [pc, #188]	; (8003074 <HAL_RCC_ClockConfig+0x1f4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e054      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2238      	movs	r2, #56	; 0x38
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1ec      	bne.n	8002faa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d21e      	bcs.n	800301c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	4393      	bics	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <HAL_RCC_ClockConfig+0x1f0>)
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ff0:	f7fe fa24 	bl	800143c <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ff8:	e009      	b.n	800300e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffa:	f7fe fa1f 	bl	800143c <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	4a1b      	ldr	r2, [pc, #108]	; (8003074 <HAL_RCC_ClockConfig+0x1f4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e02c      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_RCC_ClockConfig+0x1f0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2207      	movs	r2, #7
 8003014:	4013      	ands	r3, r2
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d1ee      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2204      	movs	r2, #4
 8003022:	4013      	ands	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	4a15      	ldr	r2, [pc, #84]	; (8003080 <HAL_RCC_ClockConfig+0x200>)
 800302c:	4013      	ands	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800303a:	f000 f829 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 800303e:	0001      	movs	r1, r0
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_RCC_ClockConfig+0x1f8>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	220f      	movs	r2, #15
 8003048:	401a      	ands	r2, r3
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_RCC_ClockConfig+0x204>)
 800304c:	0092      	lsls	r2, r2, #2
 800304e:	58d3      	ldr	r3, [r2, r3]
 8003050:	221f      	movs	r2, #31
 8003052:	4013      	ands	r3, r2
 8003054:	000a      	movs	r2, r1
 8003056:	40da      	lsrs	r2, r3
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_ClockConfig+0x208>)
 800305a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_ClockConfig+0x20c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	0018      	movs	r0, r3
 8003062:	f7fe f991 	bl	8001388 <HAL_InitTick>
 8003066:	0003      	movs	r3, r0
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b004      	add	sp, #16
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40022000 	.word	0x40022000
 8003074:	00001388 	.word	0x00001388
 8003078:	40021000 	.word	0x40021000
 800307c:	fffff0ff 	.word	0xfffff0ff
 8003080:	ffff8fff 	.word	0xffff8fff
 8003084:	08005c38 	.word	0x08005c38
 8003088:	20000000 	.word	0x20000000
 800308c:	20000004 	.word	0x20000004

08003090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003096:	4b3c      	ldr	r3, [pc, #240]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2238      	movs	r2, #56	; 0x38
 800309c:	4013      	ands	r3, r2
 800309e:	d10f      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80030a0:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0adb      	lsrs	r3, r3, #11
 80030a6:	2207      	movs	r2, #7
 80030a8:	4013      	ands	r3, r2
 80030aa:	2201      	movs	r2, #1
 80030ac:	409a      	lsls	r2, r3
 80030ae:	0013      	movs	r3, r2
 80030b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80030b2:	6839      	ldr	r1, [r7, #0]
 80030b4:	4835      	ldr	r0, [pc, #212]	; (800318c <HAL_RCC_GetSysClockFreq+0xfc>)
 80030b6:	f7fd f825 	bl	8000104 <__udivsi3>
 80030ba:	0003      	movs	r3, r0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	e05d      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030c0:	4b31      	ldr	r3, [pc, #196]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2238      	movs	r2, #56	; 0x38
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d102      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030cc:	4b30      	ldr	r3, [pc, #192]	; (8003190 <HAL_RCC_GetSysClockFreq+0x100>)
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	e054      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030d2:	4b2d      	ldr	r3, [pc, #180]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2238      	movs	r2, #56	; 0x38
 80030d8:	4013      	ands	r3, r2
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d138      	bne.n	8003150 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2203      	movs	r2, #3
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030e8:	4b27      	ldr	r3, [pc, #156]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	2207      	movs	r2, #7
 80030f0:	4013      	ands	r3, r2
 80030f2:	3301      	adds	r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d10d      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	4824      	ldr	r0, [pc, #144]	; (8003190 <HAL_RCC_GetSysClockFreq+0x100>)
 8003100:	f7fd f800 	bl	8000104 <__udivsi3>
 8003104:	0003      	movs	r3, r0
 8003106:	0019      	movs	r1, r3
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	227f      	movs	r2, #127	; 0x7f
 8003110:	4013      	ands	r3, r2
 8003112:	434b      	muls	r3, r1
 8003114:	617b      	str	r3, [r7, #20]
        break;
 8003116:	e00d      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	481c      	ldr	r0, [pc, #112]	; (800318c <HAL_RCC_GetSysClockFreq+0xfc>)
 800311c:	f7fc fff2 	bl	8000104 <__udivsi3>
 8003120:	0003      	movs	r3, r0
 8003122:	0019      	movs	r1, r3
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	227f      	movs	r2, #127	; 0x7f
 800312c:	4013      	ands	r3, r2
 800312e:	434b      	muls	r3, r1
 8003130:	617b      	str	r3, [r7, #20]
        break;
 8003132:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0f5b      	lsrs	r3, r3, #29
 800313a:	2207      	movs	r2, #7
 800313c:	4013      	ands	r3, r2
 800313e:	3301      	adds	r3, #1
 8003140:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	6978      	ldr	r0, [r7, #20]
 8003146:	f7fc ffdd 	bl	8000104 <__udivsi3>
 800314a:	0003      	movs	r3, r0
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	e015      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2238      	movs	r2, #56	; 0x38
 8003156:	4013      	ands	r3, r2
 8003158:	2b20      	cmp	r3, #32
 800315a:	d103      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	e00b      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003164:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2238      	movs	r2, #56	; 0x38
 800316a:	4013      	ands	r3, r2
 800316c:	2b18      	cmp	r3, #24
 800316e:	d103      	bne.n	8003178 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003170:	23fa      	movs	r3, #250	; 0xfa
 8003172:	01db      	lsls	r3, r3, #7
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	e001      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800317c:	693b      	ldr	r3, [r7, #16]
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b006      	add	sp, #24
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	40021000 	.word	0x40021000
 800318c:	00f42400 	.word	0x00f42400
 8003190:	007a1200 	.word	0x007a1200

08003194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b02      	ldr	r3, [pc, #8]	; (80031a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	20000000 	.word	0x20000000

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b5b0      	push	{r4, r5, r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031ac:	f7ff fff2 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b0:	0004      	movs	r4, r0
 80031b2:	f7ff fb39 	bl	8002828 <LL_RCC_GetAPB1Prescaler>
 80031b6:	0003      	movs	r3, r0
 80031b8:	0b1a      	lsrs	r2, r3, #12
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	58d3      	ldr	r3, [r2, r3]
 80031c0:	221f      	movs	r2, #31
 80031c2:	4013      	ands	r3, r2
 80031c4:	40dc      	lsrs	r4, r3
 80031c6:	0023      	movs	r3, r4
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bdb0      	pop	{r4, r5, r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	08005c78 	.word	0x08005c78

080031d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80031dc:	2313      	movs	r3, #19
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e4:	2312      	movs	r3, #18
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	029b      	lsls	r3, r3, #10
 80031f4:	4013      	ands	r3, r2
 80031f6:	d100      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80031f8:	e0a4      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2311      	movs	r3, #17
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003202:	4ba5      	ldr	r3, [pc, #660]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	055b      	lsls	r3, r3, #21
 800320a:	4013      	ands	r3, r2
 800320c:	d111      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	4ba2      	ldr	r3, [pc, #648]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003212:	4ba1      	ldr	r3, [pc, #644]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	0549      	lsls	r1, r1, #21
 8003218:	430a      	orrs	r2, r1
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c
 800321c:	4b9e      	ldr	r3, [pc, #632]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800321e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	055b      	lsls	r3, r3, #21
 8003224:	4013      	ands	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2311      	movs	r3, #17
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003232:	4b9a      	ldr	r3, [pc, #616]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b99      	ldr	r3, [pc, #612]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	0049      	lsls	r1, r1, #1
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003240:	f7fe f8fc 	bl	800143c <HAL_GetTick>
 8003244:	0003      	movs	r3, r0
 8003246:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003248:	e00b      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324a:	f7fe f8f7 	bl	800143c <HAL_GetTick>
 800324e:	0002      	movs	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d904      	bls.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8003258:	2313      	movs	r3, #19
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2203      	movs	r2, #3
 800325e:	701a      	strb	r2, [r3, #0]
        break;
 8003260:	e005      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003262:	4b8e      	ldr	r3, [pc, #568]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4013      	ands	r3, r2
 800326c:	d0ed      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800326e:	2313      	movs	r3, #19
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d154      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003278:	4b87      	ldr	r3, [pc, #540]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800327a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800327c:	23c0      	movs	r3, #192	; 0xc0
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4013      	ands	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d019      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xea>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	d014      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003294:	4b80      	ldr	r3, [pc, #512]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	4a81      	ldr	r2, [pc, #516]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800329a:	4013      	ands	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800329e:	4b7e      	ldr	r3, [pc, #504]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032a2:	4b7d      	ldr	r3, [pc, #500]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	0249      	lsls	r1, r1, #9
 80032a8:	430a      	orrs	r2, r1
 80032aa:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ac:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032b0:	4b79      	ldr	r3, [pc, #484]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032b2:	497c      	ldr	r1, [pc, #496]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032b8:	4b77      	ldr	r3, [pc, #476]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2201      	movs	r2, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	d016      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe f8b9 	bl	800143c <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ce:	e00c      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fe f8b4 	bl	800143c <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	4a73      	ldr	r2, [pc, #460]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d904      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80032e0:	2313      	movs	r3, #19
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2203      	movs	r2, #3
 80032e6:	701a      	strb	r2, [r3, #0]
            break;
 80032e8:	e004      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ea:	4b6b      	ldr	r3, [pc, #428]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	2202      	movs	r2, #2
 80032f0:	4013      	ands	r3, r2
 80032f2:	d0ed      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80032f4:	2313      	movs	r3, #19
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032fe:	4b66      	ldr	r3, [pc, #408]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	4a67      	ldr	r2, [pc, #412]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003304:	4013      	ands	r3, r2
 8003306:	0019      	movs	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330c:	4b62      	ldr	r3, [pc, #392]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800330e:	430a      	orrs	r2, r1
 8003310:	65da      	str	r2, [r3, #92]	; 0x5c
 8003312:	e00c      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003314:	2312      	movs	r3, #18
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2213      	movs	r2, #19
 800331a:	18ba      	adds	r2, r7, r2
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e005      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003322:	2312      	movs	r3, #18
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	2213      	movs	r2, #19
 8003328:	18ba      	adds	r2, r7, r2
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800332e:	2311      	movs	r3, #17
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003338:	4b57      	ldr	r3, [pc, #348]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800333a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800333c:	4b56      	ldr	r3, [pc, #344]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800333e:	495b      	ldr	r1, [pc, #364]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003340:	400a      	ands	r2, r1
 8003342:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2201      	movs	r2, #1
 800334a:	4013      	ands	r3, r2
 800334c:	d009      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800334e:	4b52      	ldr	r3, [pc, #328]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	2203      	movs	r2, #3
 8003354:	4393      	bics	r3, r2
 8003356:	0019      	movs	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4b4e      	ldr	r3, [pc, #312]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800335e:	430a      	orrs	r2, r1
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2220      	movs	r2, #32
 8003368:	4013      	ands	r3, r2
 800336a:	d009      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800336c:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	4a4f      	ldr	r2, [pc, #316]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003372:	4013      	ands	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800337c:	430a      	orrs	r2, r1
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4013      	ands	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800338c:	4b42      	ldr	r3, [pc, #264]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	4a48      	ldr	r2, [pc, #288]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003392:	4013      	ands	r3, r2
 8003394:	0019      	movs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	4b3f      	ldr	r3, [pc, #252]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800339c:	430a      	orrs	r2, r1
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4013      	ands	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	4a41      	ldr	r2, [pc, #260]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	4b37      	ldr	r3, [pc, #220]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033bc:	430a      	orrs	r2, r1
 80033be:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2240      	movs	r2, #64	; 0x40
 80033c6:	4013      	ands	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ca:	4b33      	ldr	r3, [pc, #204]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	4a3b      	ldr	r2, [pc, #236]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033da:	430a      	orrs	r2, r1
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	01db      	lsls	r3, r3, #7
 80033e6:	4013      	ands	r3, r2
 80033e8:	d015      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033ea:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	0899      	lsrs	r1, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033f8:	430a      	orrs	r2, r1
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	05db      	lsls	r3, r3, #23
 8003404:	429a      	cmp	r2, r3
 8003406:	d106      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003408:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800340e:	2180      	movs	r1, #128	; 0x80
 8003410:	0249      	lsls	r1, r1, #9
 8003412:	430a      	orrs	r2, r1
 8003414:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	039b      	lsls	r3, r3, #14
 800341e:	4013      	ands	r3, r2
 8003420:	d016      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003422:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003428:	4013      	ands	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003432:	430a      	orrs	r2, r1
 8003434:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1a      	ldr	r2, [r3, #32]
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	03db      	lsls	r3, r3, #15
 800343e:	429a      	cmp	r2, r3
 8003440:	d106      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	0449      	lsls	r1, r1, #17
 800344c:	430a      	orrs	r2, r1
 800344e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	4013      	ands	r3, r2
 800345a:	d016      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003462:	4013      	ands	r3, r2
 8003464:	0019      	movs	r1, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800346c:	430a      	orrs	r2, r1
 800346e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	01db      	lsls	r3, r3, #7
 8003478:	429a      	cmp	r2, r3
 800347a:	d106      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003482:	2180      	movs	r1, #128	; 0x80
 8003484:	0249      	lsls	r1, r1, #9
 8003486:	430a      	orrs	r2, r1
 8003488:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 800348a:	2312      	movs	r3, #18
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	781b      	ldrb	r3, [r3, #0]
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b006      	add	sp, #24
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	40007000 	.word	0x40007000
 80034a0:	fffffcff 	.word	0xfffffcff
 80034a4:	fffeffff 	.word	0xfffeffff
 80034a8:	00001388 	.word	0x00001388
 80034ac:	efffffff 	.word	0xefffffff
 80034b0:	fffff3ff 	.word	0xfffff3ff
 80034b4:	fff3ffff 	.word	0xfff3ffff
 80034b8:	ffcfffff 	.word	0xffcfffff
 80034bc:	ffffcfff 	.word	0xffffcfff
 80034c0:	ffbfffff 	.word	0xffbfffff
 80034c4:	ffff3fff 	.word	0xffff3fff

080034c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034d0:	230f      	movs	r3, #15
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d100      	bne.n	80034e0 <HAL_RTC_Init+0x18>
 80034de:	e07f      	b.n	80035e0 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2229      	movs	r2, #41	; 0x29
 80034e4:	5c9b      	ldrb	r3, [r3, r2]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2228      	movs	r2, #40	; 0x28
 80034f0:	2100      	movs	r1, #0
 80034f2:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2288      	movs	r2, #136	; 0x88
 80034f8:	0212      	lsls	r2, r2, #8
 80034fa:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f7fd fcd2 	bl	8000ea8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2229      	movs	r2, #41	; 0x29
 8003508:	2102      	movs	r1, #2
 800350a:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	22ca      	movs	r2, #202	; 0xca
 8003512:	625a      	str	r2, [r3, #36]	; 0x24
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2253      	movs	r2, #83	; 0x53
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800351c:	250f      	movs	r5, #15
 800351e:	197c      	adds	r4, r7, r5
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f9c7 	bl	80038b6 <RTC_EnterInitMode>
 8003528:	0003      	movs	r3, r0
 800352a:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800352c:	197b      	adds	r3, r7, r5
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d148      	bne.n	80035c6 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	492c      	ldr	r1, [pc, #176]	; (80035f0 <HAL_RTC_Init+0x128>)
 8003540:	400a      	ands	r2, r1
 8003542:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6999      	ldr	r1, [r3, #24]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6912      	ldr	r2, [r2, #16]
 800356a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6919      	ldr	r1, [r3, #16]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	041a      	lsls	r2, r3, #16
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003580:	250f      	movs	r5, #15
 8003582:	197c      	adds	r4, r7, r5
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	0018      	movs	r0, r3
 8003588:	f000 f9d8 	bl	800393c <RTC_ExitInitMode>
 800358c:	0003      	movs	r3, r0
 800358e:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8003590:	197b      	adds	r3, r7, r5
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d116      	bne.n	80035c6 <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	00d2      	lsls	r2, r2, #3
 80035a4:	08d2      	lsrs	r2, r2, #3
 80035a6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6999      	ldr	r1, [r3, #24]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	22ff      	movs	r2, #255	; 0xff
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80035ce:	230f      	movs	r3, #15
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d103      	bne.n	80035e0 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2229      	movs	r2, #41	; 0x29
 80035dc:	2101      	movs	r1, #1
 80035de:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80035e0:	230f      	movs	r3, #15
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	781b      	ldrb	r3, [r3, #0]
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b004      	add	sp, #16
 80035ec:	bdb0      	pop	{r4, r5, r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	fb8fffbf 	.word	0xfb8fffbf

080035f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035f4:	b5b0      	push	{r4, r5, r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2228      	movs	r2, #40	; 0x28
 8003604:	5c9b      	ldrb	r3, [r3, r2]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_RTC_SetTime+0x1a>
 800360a:	2302      	movs	r3, #2
 800360c:	e092      	b.n	8003734 <HAL_RTC_SetTime+0x140>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2228      	movs	r2, #40	; 0x28
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2229      	movs	r2, #41	; 0x29
 800361a:	2102      	movs	r1, #2
 800361c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	22ca      	movs	r2, #202	; 0xca
 8003624:	625a      	str	r2, [r3, #36]	; 0x24
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2253      	movs	r2, #83	; 0x53
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800362e:	2513      	movs	r5, #19
 8003630:	197c      	adds	r4, r7, r5
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	0018      	movs	r0, r3
 8003636:	f000 f93e 	bl	80038b6 <RTC_EnterInitMode>
 800363a:	0003      	movs	r3, r0
 800363c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800363e:	197b      	adds	r3, r7, r5
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d162      	bne.n	800370c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d125      	bne.n	8003698 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2240      	movs	r2, #64	; 0x40
 8003654:	4013      	ands	r3, r2
 8003656:	d102      	bne.n	800365e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2200      	movs	r2, #0
 800365c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	0018      	movs	r0, r3
 8003664:	f000 f9b0 	bl	80039c8 <RTC_ByteToBcd2>
 8003668:	0003      	movs	r3, r0
 800366a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	0018      	movs	r0, r3
 8003672:	f000 f9a9 	bl	80039c8 <RTC_ByteToBcd2>
 8003676:	0003      	movs	r3, r0
 8003678:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800367a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	789b      	ldrb	r3, [r3, #2]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 f9a1 	bl	80039c8 <RTC_ByteToBcd2>
 8003686:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003688:	0022      	movs	r2, r4
 800368a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	78db      	ldrb	r3, [r3, #3]
 8003690:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e017      	b.n	80036c8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2240      	movs	r2, #64	; 0x40
 80036a0:	4013      	ands	r3, r2
 80036a2:	d102      	bne.n	80036aa <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2200      	movs	r2, #0
 80036a8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	785b      	ldrb	r3, [r3, #1]
 80036b4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80036b6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80036bc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	78db      	ldrb	r3, [r3, #3]
 80036c2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	491b      	ldr	r1, [pc, #108]	; (800373c <HAL_RTC_SetTime+0x148>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4918      	ldr	r1, [pc, #96]	; (8003740 <HAL_RTC_SetTime+0x14c>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6999      	ldr	r1, [r3, #24]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036fc:	2313      	movs	r3, #19
 80036fe:	18fc      	adds	r4, r7, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	0018      	movs	r0, r3
 8003704:	f000 f91a 	bl	800393c <RTC_ExitInitMode>
 8003708:	0003      	movs	r3, r0
 800370a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	22ff      	movs	r2, #255	; 0xff
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003714:	2313      	movs	r3, #19
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2229      	movs	r2, #41	; 0x29
 8003722:	2101      	movs	r1, #1
 8003724:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2228      	movs	r2, #40	; 0x28
 800372a:	2100      	movs	r1, #0
 800372c:	5499      	strb	r1, [r3, r2]

  return status;
 800372e:	2313      	movs	r3, #19
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	781b      	ldrb	r3, [r3, #0]
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b006      	add	sp, #24
 800373a:	bdb0      	pop	{r4, r5, r7, pc}
 800373c:	007f7f7f 	.word	0x007f7f7f
 8003740:	fffbffff 	.word	0xfffbffff

08003744 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003744:	b5b0      	push	{r4, r5, r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2228      	movs	r2, #40	; 0x28
 8003754:	5c9b      	ldrb	r3, [r3, r2]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_RTC_SetDate+0x1a>
 800375a:	2302      	movs	r3, #2
 800375c:	e07e      	b.n	800385c <HAL_RTC_SetDate+0x118>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2228      	movs	r2, #40	; 0x28
 8003762:	2101      	movs	r1, #1
 8003764:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2229      	movs	r2, #41	; 0x29
 800376a:	2102      	movs	r1, #2
 800376c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10e      	bne.n	8003792 <HAL_RTC_SetDate+0x4e>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	001a      	movs	r2, r3
 800377a:	2310      	movs	r3, #16
 800377c:	4013      	ands	r3, r2
 800377e:	d008      	beq.n	8003792 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	2210      	movs	r2, #16
 8003786:	4393      	bics	r3, r2
 8003788:	b2db      	uxtb	r3, r3
 800378a:	330a      	adds	r3, #10
 800378c:	b2da      	uxtb	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11c      	bne.n	80037d2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	78db      	ldrb	r3, [r3, #3]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 f913 	bl	80039c8 <RTC_ByteToBcd2>
 80037a2:	0003      	movs	r3, r0
 80037a4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	785b      	ldrb	r3, [r3, #1]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 f90c 	bl	80039c8 <RTC_ByteToBcd2>
 80037b0:	0003      	movs	r3, r0
 80037b2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037b4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	789b      	ldrb	r3, [r3, #2]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f000 f904 	bl	80039c8 <RTC_ByteToBcd2>
 80037c0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80037c2:	0022      	movs	r2, r4
 80037c4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e00e      	b.n	80037f0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	78db      	ldrb	r3, [r3, #3]
 80037d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	785b      	ldrb	r3, [r3, #1]
 80037dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80037de:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80037e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	22ca      	movs	r2, #202	; 0xca
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2253      	movs	r2, #83	; 0x53
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003800:	2513      	movs	r5, #19
 8003802:	197c      	adds	r4, r7, r5
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 f855 	bl	80038b6 <RTC_EnterInitMode>
 800380c:	0003      	movs	r3, r0
 800380e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003810:	197b      	adds	r3, r7, r5
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4911      	ldr	r1, [pc, #68]	; (8003864 <HAL_RTC_SetDate+0x120>)
 8003820:	400a      	ands	r2, r1
 8003822:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003824:	2313      	movs	r3, #19
 8003826:	18fc      	adds	r4, r7, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	0018      	movs	r0, r3
 800382c:	f000 f886 	bl	800393c <RTC_ExitInitMode>
 8003830:	0003      	movs	r3, r0
 8003832:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	22ff      	movs	r2, #255	; 0xff
 800383a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800383c:	2313      	movs	r3, #19
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2229      	movs	r2, #41	; 0x29
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2228      	movs	r2, #40	; 0x28
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]

  return status;
 8003856:	2313      	movs	r3, #19
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	781b      	ldrb	r3, [r3, #0]
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b006      	add	sp, #24
 8003862:	bdb0      	pop	{r4, r5, r7, pc}
 8003864:	00ffff3f 	.word	0x00ffff3f

08003868 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	21a0      	movs	r1, #160	; 0xa0
 800387c:	438a      	bics	r2, r1
 800387e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003880:	f7fd fddc 	bl	800143c <HAL_GetTick>
 8003884:	0003      	movs	r3, r0
 8003886:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003888:	e00a      	b.n	80038a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800388a:	f7fd fdd7 	bl	800143c <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad2      	subs	r2, r2, r3
 8003894:	23fa      	movs	r3, #250	; 0xfa
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d901      	bls.n	80038a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e006      	b.n	80038ae <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	4013      	ands	r3, r2
 80038aa:	d0ee      	beq.n	800388a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80038be:	230f      	movs	r3, #15
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	4013      	ands	r3, r2
 80038d0:	d12d      	bne.n	800392e <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	430a      	orrs	r2, r1
 80038e0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80038e2:	f7fd fdab 	bl	800143c <HAL_GetTick>
 80038e6:	0003      	movs	r3, r0
 80038e8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80038ea:	e015      	b.n	8003918 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80038ec:	f7fd fda6 	bl	800143c <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad2      	subs	r2, r2, r3
 80038f6:	210f      	movs	r1, #15
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	1879      	adds	r1, r7, r1
 80038fc:	7809      	ldrb	r1, [r1, #0]
 80038fe:	7019      	strb	r1, [r3, #0]
 8003900:	23fa      	movs	r3, #250	; 0xfa
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d907      	bls.n	8003918 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8003908:	230f      	movs	r3, #15
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	2203      	movs	r2, #3
 800390e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2229      	movs	r2, #41	; 0x29
 8003914:	2103      	movs	r1, #3
 8003916:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2240      	movs	r2, #64	; 0x40
 8003920:	4013      	ands	r3, r2
 8003922:	d104      	bne.n	800392e <RTC_EnterInitMode+0x78>
 8003924:	230f      	movs	r3, #15
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d1de      	bne.n	80038ec <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800392e:	230f      	movs	r3, #15
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	781b      	ldrb	r3, [r3, #0]
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b004      	add	sp, #16
 800393a:	bd80      	pop	{r7, pc}

0800393c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	230f      	movs	r3, #15
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <RTC_ExitInitMode+0x88>)
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <RTC_ExitInitMode+0x88>)
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	438a      	bics	r2, r1
 8003956:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <RTC_ExitInitMode+0x88>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2220      	movs	r2, #32
 800395e:	4013      	ands	r3, r2
 8003960:	d10e      	bne.n	8003980 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	0018      	movs	r0, r3
 8003966:	f7ff ff7f 	bl	8003868 <HAL_RTC_WaitForSynchro>
 800396a:	1e03      	subs	r3, r0, #0
 800396c:	d022      	beq.n	80039b4 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2229      	movs	r2, #41	; 0x29
 8003972:	2103      	movs	r1, #3
 8003974:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003976:	230f      	movs	r3, #15
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	2203      	movs	r2, #3
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	e019      	b.n	80039b4 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <RTC_ExitInitMode+0x88>)
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <RTC_ExitInitMode+0x88>)
 8003986:	2120      	movs	r1, #32
 8003988:	438a      	bics	r2, r1
 800398a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	0018      	movs	r0, r3
 8003990:	f7ff ff6a 	bl	8003868 <HAL_RTC_WaitForSynchro>
 8003994:	1e03      	subs	r3, r0, #0
 8003996:	d007      	beq.n	80039a8 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2229      	movs	r2, #41	; 0x29
 800399c:	2103      	movs	r1, #3
 800399e:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80039a0:	230f      	movs	r3, #15
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2203      	movs	r2, #3
 80039a6:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <RTC_ExitInitMode+0x88>)
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <RTC_ExitInitMode+0x88>)
 80039ae:	2120      	movs	r1, #32
 80039b0:	430a      	orrs	r2, r1
 80039b2:	619a      	str	r2, [r3, #24]
  }

  return status;
 80039b4:	230f      	movs	r3, #15
 80039b6:	18fb      	adds	r3, r7, r3
 80039b8:	781b      	ldrb	r3, [r3, #0]
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	40002800 	.word	0x40002800

080039c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	0002      	movs	r2, r0
 80039d0:	1dfb      	adds	r3, r7, #7
 80039d2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80039d8:	230b      	movs	r3, #11
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	1dfa      	adds	r2, r7, #7
 80039de:	7812      	ldrb	r2, [r2, #0]
 80039e0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80039e2:	e008      	b.n	80039f6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3301      	adds	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80039ea:	220b      	movs	r2, #11
 80039ec:	18bb      	adds	r3, r7, r2
 80039ee:	18ba      	adds	r2, r7, r2
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	3a0a      	subs	r2, #10
 80039f4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80039f6:	230b      	movs	r3, #11
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b09      	cmp	r3, #9
 80039fe:	d8f1      	bhi.n	80039e4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	230b      	movs	r3, #11
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b2db      	uxtb	r3, r3
}
 8003a12:	0018      	movs	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b004      	add	sp, #16
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e08a      	b.n	8003b44 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	225d      	movs	r2, #93	; 0x5d
 8003a38:	5c9b      	ldrb	r3, [r3, r2]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d107      	bne.n	8003a50 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	225c      	movs	r2, #92	; 0x5c
 8003a44:	2100      	movs	r1, #0
 8003a46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7fd fa52 	bl	8000ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	225d      	movs	r2, #93	; 0x5d
 8003a54:	2102      	movs	r1, #2
 8003a56:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2140      	movs	r1, #64	; 0x40
 8003a64:	438a      	bics	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	23e0      	movs	r3, #224	; 0xe0
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d902      	bls.n	8003a7a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	e002      	b.n	8003a80 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	015b      	lsls	r3, r3, #5
 8003a7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	23f0      	movs	r3, #240	; 0xf0
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d008      	beq.n	8003a9e <HAL_SPI_Init+0x82>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	23e0      	movs	r3, #224	; 0xe0
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d002      	beq.n	8003a9e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	23e0      	movs	r3, #224	; 0xe0
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d903      	bls.n	8003aba <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ab8:	e002      	b.n	8003ac0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6999      	ldr	r1, [r3, #24]
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	400b      	ands	r3, r1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	0011      	movs	r1, r2
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	2204      	movs	r2, #4
 8003b04:	401a      	ands	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	0011      	movs	r1, r2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4907      	ldr	r1, [pc, #28]	; (8003b4c <HAL_SPI_Init+0x130>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	225d      	movs	r2, #93	; 0x5d
 8003b3e:	2101      	movs	r1, #1
 8003b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b004      	add	sp, #16
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	fffff7ff 	.word	0xfffff7ff

08003b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e046      	b.n	8003bf0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	589b      	ldr	r3, [r3, r2]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d107      	bne.n	8003b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	227c      	movs	r2, #124	; 0x7c
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7fd fa6e 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	2124      	movs	r1, #36	; 0x24
 8003b82:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2101      	movs	r1, #1
 8003b90:	438a      	bics	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 f830 	bl	8003bfc <UART_SetConfig>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e024      	b.n	8003bf0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f001 f8d1 	bl	8004d58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	490d      	ldr	r1, [pc, #52]	; (8003bf8 <HAL_UART_Init+0xa8>)
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	212a      	movs	r1, #42	; 0x2a
 8003bd2:	438a      	bics	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2101      	movs	r1, #1
 8003be2:	430a      	orrs	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	0018      	movs	r0, r3
 8003bea:	f001 f969 	bl	8004ec0 <UART_CheckIdleState>
 8003bee:	0003      	movs	r3, r0
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	ffffb7ff 	.word	0xffffb7ff

08003bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfe:	b0a1      	sub	sp, #132	; 0x84
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c08:	231b      	movs	r3, #27
 8003c0a:	2258      	movs	r2, #88	; 0x58
 8003c0c:	18ba      	adds	r2, r7, r2
 8003c0e:	18d2      	adds	r2, r2, r3
 8003c10:	2300      	movs	r3, #0
 8003c12:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c36:	4313      	orrs	r3, r2
 8003c38:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4bbe      	ldr	r3, [pc, #760]	; (8003f3c <UART_SetConfig+0x340>)
 8003c42:	401a      	ands	r2, r3
 8003c44:	0011      	movs	r1, r2
 8003c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	4bba      	ldr	r3, [pc, #744]	; (8003f40 <UART_SetConfig+0x344>)
 8003c58:	401a      	ands	r2, r3
 8003c5a:	0010      	movs	r0, r2
 8003c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c5e:	68d9      	ldr	r1, [r3, #12]
 8003c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	0003      	movs	r3, r0
 8003c66:	430b      	orrs	r3, r1
 8003c68:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4bb3      	ldr	r3, [pc, #716]	; (8003f44 <UART_SetConfig+0x348>)
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d004      	beq.n	8003c84 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c80:	4313      	orrs	r3, r2
 8003c82:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	4baf      	ldr	r3, [pc, #700]	; (8003f48 <UART_SetConfig+0x34c>)
 8003c8c:	401a      	ands	r2, r3
 8003c8e:	0011      	movs	r1, r2
 8003c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	230f      	movs	r3, #15
 8003ca2:	439a      	bics	r2, r3
 8003ca4:	0010      	movs	r0, r2
 8003ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	0003      	movs	r3, r0
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4ba4      	ldr	r3, [pc, #656]	; (8003f4c <UART_SetConfig+0x350>)
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d12f      	bne.n	8003d1e <UART_SetConfig+0x122>
 8003cbe:	4ba4      	ldr	r3, [pc, #656]	; (8003f50 <UART_SetConfig+0x354>)
 8003cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d013      	beq.n	8003cf2 <UART_SetConfig+0xf6>
 8003cca:	d304      	bcc.n	8003cd6 <UART_SetConfig+0xda>
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d009      	beq.n	8003ce4 <UART_SetConfig+0xe8>
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d015      	beq.n	8003d00 <UART_SetConfig+0x104>
 8003cd4:	e01b      	b.n	8003d0e <UART_SetConfig+0x112>
 8003cd6:	2323      	movs	r3, #35	; 0x23
 8003cd8:	2258      	movs	r2, #88	; 0x58
 8003cda:	18ba      	adds	r2, r7, r2
 8003cdc:	18d2      	adds	r2, r2, r3
 8003cde:	2300      	movs	r3, #0
 8003ce0:	7013      	strb	r3, [r2, #0]
 8003ce2:	e070      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003ce4:	2323      	movs	r3, #35	; 0x23
 8003ce6:	2258      	movs	r2, #88	; 0x58
 8003ce8:	18ba      	adds	r2, r7, r2
 8003cea:	18d2      	adds	r2, r2, r3
 8003cec:	2302      	movs	r3, #2
 8003cee:	7013      	strb	r3, [r2, #0]
 8003cf0:	e069      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003cf2:	2323      	movs	r3, #35	; 0x23
 8003cf4:	2258      	movs	r2, #88	; 0x58
 8003cf6:	18ba      	adds	r2, r7, r2
 8003cf8:	18d2      	adds	r2, r2, r3
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	7013      	strb	r3, [r2, #0]
 8003cfe:	e062      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003d00:	2323      	movs	r3, #35	; 0x23
 8003d02:	2258      	movs	r2, #88	; 0x58
 8003d04:	18ba      	adds	r2, r7, r2
 8003d06:	18d2      	adds	r2, r2, r3
 8003d08:	2308      	movs	r3, #8
 8003d0a:	7013      	strb	r3, [r2, #0]
 8003d0c:	e05b      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003d0e:	2323      	movs	r3, #35	; 0x23
 8003d10:	2258      	movs	r2, #88	; 0x58
 8003d12:	18ba      	adds	r2, r7, r2
 8003d14:	18d2      	adds	r2, r2, r3
 8003d16:	2310      	movs	r3, #16
 8003d18:	7013      	strb	r3, [r2, #0]
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	e053      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b8c      	ldr	r3, [pc, #560]	; (8003f54 <UART_SetConfig+0x358>)
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d106      	bne.n	8003d36 <UART_SetConfig+0x13a>
 8003d28:	2323      	movs	r3, #35	; 0x23
 8003d2a:	2258      	movs	r2, #88	; 0x58
 8003d2c:	18ba      	adds	r2, r7, r2
 8003d2e:	18d2      	adds	r2, r2, r3
 8003d30:	2300      	movs	r3, #0
 8003d32:	7013      	strb	r3, [r2, #0]
 8003d34:	e047      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b82      	ldr	r3, [pc, #520]	; (8003f44 <UART_SetConfig+0x348>)
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d13c      	bne.n	8003dba <UART_SetConfig+0x1be>
 8003d40:	4b83      	ldr	r3, [pc, #524]	; (8003f50 <UART_SetConfig+0x354>)
 8003d42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d44:	23c0      	movs	r3, #192	; 0xc0
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	401a      	ands	r2, r3
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d01d      	beq.n	8003d8e <UART_SetConfig+0x192>
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d802      	bhi.n	8003d60 <UART_SetConfig+0x164>
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	d009      	beq.n	8003d72 <UART_SetConfig+0x176>
 8003d5e:	e024      	b.n	8003daa <UART_SetConfig+0x1ae>
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d00b      	beq.n	8003d80 <UART_SetConfig+0x184>
 8003d68:	23c0      	movs	r3, #192	; 0xc0
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d015      	beq.n	8003d9c <UART_SetConfig+0x1a0>
 8003d70:	e01b      	b.n	8003daa <UART_SetConfig+0x1ae>
 8003d72:	2323      	movs	r3, #35	; 0x23
 8003d74:	2258      	movs	r2, #88	; 0x58
 8003d76:	18ba      	adds	r2, r7, r2
 8003d78:	18d2      	adds	r2, r2, r3
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	7013      	strb	r3, [r2, #0]
 8003d7e:	e022      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003d80:	2323      	movs	r3, #35	; 0x23
 8003d82:	2258      	movs	r2, #88	; 0x58
 8003d84:	18ba      	adds	r2, r7, r2
 8003d86:	18d2      	adds	r2, r2, r3
 8003d88:	2302      	movs	r3, #2
 8003d8a:	7013      	strb	r3, [r2, #0]
 8003d8c:	e01b      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003d8e:	2323      	movs	r3, #35	; 0x23
 8003d90:	2258      	movs	r2, #88	; 0x58
 8003d92:	18ba      	adds	r2, r7, r2
 8003d94:	18d2      	adds	r2, r2, r3
 8003d96:	2304      	movs	r3, #4
 8003d98:	7013      	strb	r3, [r2, #0]
 8003d9a:	e014      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003d9c:	2323      	movs	r3, #35	; 0x23
 8003d9e:	2258      	movs	r2, #88	; 0x58
 8003da0:	18ba      	adds	r2, r7, r2
 8003da2:	18d2      	adds	r2, r2, r3
 8003da4:	2308      	movs	r3, #8
 8003da6:	7013      	strb	r3, [r2, #0]
 8003da8:	e00d      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003daa:	2323      	movs	r3, #35	; 0x23
 8003dac:	2258      	movs	r2, #88	; 0x58
 8003dae:	18ba      	adds	r2, r7, r2
 8003db0:	18d2      	adds	r2, r2, r3
 8003db2:	2310      	movs	r3, #16
 8003db4:	7013      	strb	r3, [r2, #0]
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	e005      	b.n	8003dc6 <UART_SetConfig+0x1ca>
 8003dba:	2323      	movs	r3, #35	; 0x23
 8003dbc:	2258      	movs	r2, #88	; 0x58
 8003dbe:	18ba      	adds	r2, r7, r2
 8003dc0:	18d2      	adds	r2, r2, r3
 8003dc2:	2310      	movs	r3, #16
 8003dc4:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b5e      	ldr	r3, [pc, #376]	; (8003f44 <UART_SetConfig+0x348>)
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <UART_SetConfig+0x1d8>
 8003dd0:	f000 fbe8 	bl	80045a4 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dd4:	2323      	movs	r3, #35	; 0x23
 8003dd6:	2258      	movs	r2, #88	; 0x58
 8003dd8:	4694      	mov	ip, r2
 8003dda:	44bc      	add	ip, r7
 8003ddc:	4463      	add	r3, ip
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d100      	bne.n	8003de6 <UART_SetConfig+0x1ea>
 8003de4:	e05e      	b.n	8003ea4 <UART_SetConfig+0x2a8>
 8003de6:	dc02      	bgt.n	8003dee <UART_SetConfig+0x1f2>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <UART_SetConfig+0x200>
 8003dec:	e174      	b.n	80040d8 <UART_SetConfig+0x4dc>
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d100      	bne.n	8003df4 <UART_SetConfig+0x1f8>
 8003df2:	e0c9      	b.n	8003f88 <UART_SetConfig+0x38c>
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d100      	bne.n	8003dfa <UART_SetConfig+0x1fe>
 8003df8:	e11a      	b.n	8004030 <UART_SetConfig+0x434>
 8003dfa:	e16d      	b.n	80040d8 <UART_SetConfig+0x4dc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003dfc:	f7ff f9d4 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8003e00:	0002      	movs	r2, r0
 8003e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d044      	beq.n	8003e94 <UART_SetConfig+0x298>
 8003e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d03e      	beq.n	8003e90 <UART_SetConfig+0x294>
 8003e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d038      	beq.n	8003e8c <UART_SetConfig+0x290>
 8003e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d032      	beq.n	8003e88 <UART_SetConfig+0x28c>
 8003e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d02c      	beq.n	8003e84 <UART_SetConfig+0x288>
 8003e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	d026      	beq.n	8003e80 <UART_SetConfig+0x284>
 8003e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d020      	beq.n	8003e7c <UART_SetConfig+0x280>
 8003e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	2b07      	cmp	r3, #7
 8003e40:	d01a      	beq.n	8003e78 <UART_SetConfig+0x27c>
 8003e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d014      	beq.n	8003e74 <UART_SetConfig+0x278>
 8003e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b09      	cmp	r3, #9
 8003e50:	d00e      	beq.n	8003e70 <UART_SetConfig+0x274>
 8003e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b0a      	cmp	r3, #10
 8003e58:	d008      	beq.n	8003e6c <UART_SetConfig+0x270>
 8003e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b0b      	cmp	r3, #11
 8003e60:	d102      	bne.n	8003e68 <UART_SetConfig+0x26c>
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	e016      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e014      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	e012      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e70:	2340      	movs	r3, #64	; 0x40
 8003e72:	e010      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e74:	2320      	movs	r3, #32
 8003e76:	e00e      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	e00c      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e7c:	230c      	movs	r3, #12
 8003e7e:	e00a      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e80:	230a      	movs	r3, #10
 8003e82:	e008      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e84:	2308      	movs	r3, #8
 8003e86:	e006      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e88:	2306      	movs	r3, #6
 8003e8a:	e004      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	e002      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e000      	b.n	8003e96 <UART_SetConfig+0x29a>
 8003e94:	2301      	movs	r3, #1
 8003e96:	0019      	movs	r1, r3
 8003e98:	0010      	movs	r0, r2
 8003e9a:	f7fc f933 	bl	8000104 <__udivsi3>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003ea2:	e120      	b.n	80040e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d043      	beq.n	8003f34 <UART_SetConfig+0x338>
 8003eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d03d      	beq.n	8003f30 <UART_SetConfig+0x334>
 8003eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d037      	beq.n	8003f2c <UART_SetConfig+0x330>
 8003ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d031      	beq.n	8003f28 <UART_SetConfig+0x32c>
 8003ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d02b      	beq.n	8003f24 <UART_SetConfig+0x328>
 8003ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d025      	beq.n	8003f20 <UART_SetConfig+0x324>
 8003ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d01f      	beq.n	8003f1c <UART_SetConfig+0x320>
 8003edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2b07      	cmp	r3, #7
 8003ee2:	d019      	beq.n	8003f18 <UART_SetConfig+0x31c>
 8003ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d013      	beq.n	8003f14 <UART_SetConfig+0x318>
 8003eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2b09      	cmp	r3, #9
 8003ef2:	d00d      	beq.n	8003f10 <UART_SetConfig+0x314>
 8003ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2b0a      	cmp	r3, #10
 8003efa:	d007      	beq.n	8003f0c <UART_SetConfig+0x310>
 8003efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2b0b      	cmp	r3, #11
 8003f02:	d101      	bne.n	8003f08 <UART_SetConfig+0x30c>
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <UART_SetConfig+0x35c>)
 8003f06:	e016      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f08:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <UART_SetConfig+0x360>)
 8003f0a:	e014      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f0c:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <UART_SetConfig+0x364>)
 8003f0e:	e012      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f10:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <UART_SetConfig+0x368>)
 8003f12:	e010      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <UART_SetConfig+0x36c>)
 8003f16:	e00e      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <UART_SetConfig+0x370>)
 8003f1a:	e00c      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <UART_SetConfig+0x374>)
 8003f1e:	e00a      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f20:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <UART_SetConfig+0x378>)
 8003f22:	e008      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f24:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <UART_SetConfig+0x37c>)
 8003f26:	e006      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f28:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <UART_SetConfig+0x380>)
 8003f2a:	e004      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <UART_SetConfig+0x384>)
 8003f2e:	e002      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f30:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <UART_SetConfig+0x388>)
 8003f32:	e000      	b.n	8003f36 <UART_SetConfig+0x33a>
 8003f34:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <UART_SetConfig+0x360>)
 8003f36:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003f38:	e0d5      	b.n	80040e6 <UART_SetConfig+0x4ea>
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	cfff69f3 	.word	0xcfff69f3
 8003f40:	ffffcfff 	.word	0xffffcfff
 8003f44:	40008000 	.word	0x40008000
 8003f48:	11fff4ff 	.word	0x11fff4ff
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40004400 	.word	0x40004400
 8003f58:	0000f424 	.word	0x0000f424
 8003f5c:	00f42400 	.word	0x00f42400
 8003f60:	0001e848 	.word	0x0001e848
 8003f64:	0003d090 	.word	0x0003d090
 8003f68:	0007a120 	.word	0x0007a120
 8003f6c:	000f4240 	.word	0x000f4240
 8003f70:	00145855 	.word	0x00145855
 8003f74:	00186a00 	.word	0x00186a00
 8003f78:	001e8480 	.word	0x001e8480
 8003f7c:	0028b0aa 	.word	0x0028b0aa
 8003f80:	003d0900 	.word	0x003d0900
 8003f84:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003f88:	f7ff f882 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d044      	beq.n	8004020 <UART_SetConfig+0x424>
 8003f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d03e      	beq.n	800401c <UART_SetConfig+0x420>
 8003f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d038      	beq.n	8004018 <UART_SetConfig+0x41c>
 8003fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d032      	beq.n	8004014 <UART_SetConfig+0x418>
 8003fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d02c      	beq.n	8004010 <UART_SetConfig+0x414>
 8003fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b05      	cmp	r3, #5
 8003fbc:	d026      	beq.n	800400c <UART_SetConfig+0x410>
 8003fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b06      	cmp	r3, #6
 8003fc4:	d020      	beq.n	8004008 <UART_SetConfig+0x40c>
 8003fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b07      	cmp	r3, #7
 8003fcc:	d01a      	beq.n	8004004 <UART_SetConfig+0x408>
 8003fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d014      	beq.n	8004000 <UART_SetConfig+0x404>
 8003fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b09      	cmp	r3, #9
 8003fdc:	d00e      	beq.n	8003ffc <UART_SetConfig+0x400>
 8003fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b0a      	cmp	r3, #10
 8003fe4:	d008      	beq.n	8003ff8 <UART_SetConfig+0x3fc>
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b0b      	cmp	r3, #11
 8003fec:	d102      	bne.n	8003ff4 <UART_SetConfig+0x3f8>
 8003fee:	2380      	movs	r3, #128	; 0x80
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	e016      	b.n	8004022 <UART_SetConfig+0x426>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e014      	b.n	8004022 <UART_SetConfig+0x426>
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	e012      	b.n	8004022 <UART_SetConfig+0x426>
 8003ffc:	2340      	movs	r3, #64	; 0x40
 8003ffe:	e010      	b.n	8004022 <UART_SetConfig+0x426>
 8004000:	2320      	movs	r3, #32
 8004002:	e00e      	b.n	8004022 <UART_SetConfig+0x426>
 8004004:	2310      	movs	r3, #16
 8004006:	e00c      	b.n	8004022 <UART_SetConfig+0x426>
 8004008:	230c      	movs	r3, #12
 800400a:	e00a      	b.n	8004022 <UART_SetConfig+0x426>
 800400c:	230a      	movs	r3, #10
 800400e:	e008      	b.n	8004022 <UART_SetConfig+0x426>
 8004010:	2308      	movs	r3, #8
 8004012:	e006      	b.n	8004022 <UART_SetConfig+0x426>
 8004014:	2306      	movs	r3, #6
 8004016:	e004      	b.n	8004022 <UART_SetConfig+0x426>
 8004018:	2304      	movs	r3, #4
 800401a:	e002      	b.n	8004022 <UART_SetConfig+0x426>
 800401c:	2302      	movs	r3, #2
 800401e:	e000      	b.n	8004022 <UART_SetConfig+0x426>
 8004020:	2301      	movs	r3, #1
 8004022:	0019      	movs	r1, r3
 8004024:	0010      	movs	r0, r2
 8004026:	f7fc f86d 	bl	8000104 <__udivsi3>
 800402a:	0003      	movs	r3, r0
 800402c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800402e:	e05a      	b.n	80040e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d04b      	beq.n	80040d0 <UART_SetConfig+0x4d4>
 8004038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	2b01      	cmp	r3, #1
 800403e:	d044      	beq.n	80040ca <UART_SetConfig+0x4ce>
 8004040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b02      	cmp	r3, #2
 8004046:	d03d      	beq.n	80040c4 <UART_SetConfig+0x4c8>
 8004048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	2b03      	cmp	r3, #3
 800404e:	d037      	beq.n	80040c0 <UART_SetConfig+0x4c4>
 8004050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	2b04      	cmp	r3, #4
 8004056:	d030      	beq.n	80040ba <UART_SetConfig+0x4be>
 8004058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	2b05      	cmp	r3, #5
 800405e:	d02a      	beq.n	80040b6 <UART_SetConfig+0x4ba>
 8004060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	2b06      	cmp	r3, #6
 8004066:	d024      	beq.n	80040b2 <UART_SetConfig+0x4b6>
 8004068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	2b07      	cmp	r3, #7
 800406e:	d01d      	beq.n	80040ac <UART_SetConfig+0x4b0>
 8004070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2b08      	cmp	r3, #8
 8004076:	d016      	beq.n	80040a6 <UART_SetConfig+0x4aa>
 8004078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	2b09      	cmp	r3, #9
 800407e:	d00f      	beq.n	80040a0 <UART_SetConfig+0x4a4>
 8004080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	2b0a      	cmp	r3, #10
 8004086:	d008      	beq.n	800409a <UART_SetConfig+0x49e>
 8004088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2b0b      	cmp	r3, #11
 800408e:	d101      	bne.n	8004094 <UART_SetConfig+0x498>
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	e01f      	b.n	80040d4 <UART_SetConfig+0x4d8>
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	e01c      	b.n	80040d4 <UART_SetConfig+0x4d8>
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	e019      	b.n	80040d4 <UART_SetConfig+0x4d8>
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	e016      	b.n	80040d4 <UART_SetConfig+0x4d8>
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	e013      	b.n	80040d4 <UART_SetConfig+0x4d8>
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	e010      	b.n	80040d4 <UART_SetConfig+0x4d8>
 80040b2:	4bbf      	ldr	r3, [pc, #764]	; (80043b0 <UART_SetConfig+0x7b4>)
 80040b4:	e00e      	b.n	80040d4 <UART_SetConfig+0x4d8>
 80040b6:	4bbf      	ldr	r3, [pc, #764]	; (80043b4 <UART_SetConfig+0x7b8>)
 80040b8:	e00c      	b.n	80040d4 <UART_SetConfig+0x4d8>
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	015b      	lsls	r3, r3, #5
 80040be:	e009      	b.n	80040d4 <UART_SetConfig+0x4d8>
 80040c0:	4bbd      	ldr	r3, [pc, #756]	; (80043b8 <UART_SetConfig+0x7bc>)
 80040c2:	e007      	b.n	80040d4 <UART_SetConfig+0x4d8>
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	019b      	lsls	r3, r3, #6
 80040c8:	e004      	b.n	80040d4 <UART_SetConfig+0x4d8>
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	01db      	lsls	r3, r3, #7
 80040ce:	e001      	b.n	80040d4 <UART_SetConfig+0x4d8>
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80040d6:	e006      	b.n	80040e6 <UART_SetConfig+0x4ea>
      default:
        ret = HAL_ERROR;
 80040d8:	231b      	movs	r3, #27
 80040da:	2258      	movs	r2, #88	; 0x58
 80040dc:	18ba      	adds	r2, r7, r2
 80040de:	18d2      	adds	r2, r2, r3
 80040e0:	2301      	movs	r3, #1
 80040e2:	7013      	strb	r3, [r2, #0]
        break;
 80040e4:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <UART_SetConfig+0x4f4>
 80040ec:	f000 fe14 	bl	8004d18 <UART_SetConfig+0x111c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	0013      	movs	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	189a      	adds	r2, r3, r2
 80040fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d305      	bcc.n	800410c <UART_SetConfig+0x510>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004108:	4293      	cmp	r3, r2
 800410a:	d908      	bls.n	800411e <UART_SetConfig+0x522>
      {
        ret = HAL_ERROR;
 800410c:	231b      	movs	r3, #27
 800410e:	2258      	movs	r2, #88	; 0x58
 8004110:	4694      	mov	ip, r2
 8004112:	44bc      	add	ip, r7
 8004114:	4463      	add	r3, ip
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	f000 fdfd 	bl	8004d18 <UART_SetConfig+0x111c>
      }
      else
      {
        switch (clocksource)
 800411e:	2323      	movs	r3, #35	; 0x23
 8004120:	2258      	movs	r2, #88	; 0x58
 8004122:	4694      	mov	ip, r2
 8004124:	44bc      	add	ip, r7
 8004126:	4463      	add	r3, ip
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d100      	bne.n	8004130 <UART_SetConfig+0x534>
 800412e:	e08c      	b.n	800424a <UART_SetConfig+0x64e>
 8004130:	dc02      	bgt.n	8004138 <UART_SetConfig+0x53c>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <UART_SetConfig+0x54a>
 8004136:	e216      	b.n	8004566 <UART_SetConfig+0x96a>
 8004138:	2b04      	cmp	r3, #4
 800413a:	d100      	bne.n	800413e <UART_SetConfig+0x542>
 800413c:	e0f2      	b.n	8004324 <UART_SetConfig+0x728>
 800413e:	2b08      	cmp	r3, #8
 8004140:	d100      	bne.n	8004144 <UART_SetConfig+0x548>
 8004142:	e199      	b.n	8004478 <UART_SetConfig+0x87c>
 8004144:	e20f      	b.n	8004566 <UART_SetConfig+0x96a>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004146:	f7ff f82f 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 800414a:	0003      	movs	r3, r0
 800414c:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800414e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004150:	64bb      	str	r3, [r7, #72]	; 0x48
 8004152:	2300      	movs	r3, #0
 8004154:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d050      	beq.n	8004200 <UART_SetConfig+0x604>
 800415e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	2b01      	cmp	r3, #1
 8004164:	d049      	beq.n	80041fa <UART_SetConfig+0x5fe>
 8004166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	2b02      	cmp	r3, #2
 800416c:	d042      	beq.n	80041f4 <UART_SetConfig+0x5f8>
 800416e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	2b03      	cmp	r3, #3
 8004174:	d03b      	beq.n	80041ee <UART_SetConfig+0x5f2>
 8004176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	2b04      	cmp	r3, #4
 800417c:	d034      	beq.n	80041e8 <UART_SetConfig+0x5ec>
 800417e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b05      	cmp	r3, #5
 8004184:	d02d      	beq.n	80041e2 <UART_SetConfig+0x5e6>
 8004186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b06      	cmp	r3, #6
 800418c:	d026      	beq.n	80041dc <UART_SetConfig+0x5e0>
 800418e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	2b07      	cmp	r3, #7
 8004194:	d01f      	beq.n	80041d6 <UART_SetConfig+0x5da>
 8004196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b08      	cmp	r3, #8
 800419c:	d018      	beq.n	80041d0 <UART_SetConfig+0x5d4>
 800419e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b09      	cmp	r3, #9
 80041a4:	d011      	beq.n	80041ca <UART_SetConfig+0x5ce>
 80041a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b0a      	cmp	r3, #10
 80041ac:	d00a      	beq.n	80041c4 <UART_SetConfig+0x5c8>
 80041ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	2b0b      	cmp	r3, #11
 80041b4:	d103      	bne.n	80041be <UART_SetConfig+0x5c2>
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	2400      	movs	r4, #0
 80041bc:	e022      	b.n	8004204 <UART_SetConfig+0x608>
 80041be:	2301      	movs	r3, #1
 80041c0:	2400      	movs	r4, #0
 80041c2:	e01f      	b.n	8004204 <UART_SetConfig+0x608>
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	2400      	movs	r4, #0
 80041c8:	e01c      	b.n	8004204 <UART_SetConfig+0x608>
 80041ca:	2340      	movs	r3, #64	; 0x40
 80041cc:	2400      	movs	r4, #0
 80041ce:	e019      	b.n	8004204 <UART_SetConfig+0x608>
 80041d0:	2320      	movs	r3, #32
 80041d2:	2400      	movs	r4, #0
 80041d4:	e016      	b.n	8004204 <UART_SetConfig+0x608>
 80041d6:	2310      	movs	r3, #16
 80041d8:	2400      	movs	r4, #0
 80041da:	e013      	b.n	8004204 <UART_SetConfig+0x608>
 80041dc:	230c      	movs	r3, #12
 80041de:	2400      	movs	r4, #0
 80041e0:	e010      	b.n	8004204 <UART_SetConfig+0x608>
 80041e2:	230a      	movs	r3, #10
 80041e4:	2400      	movs	r4, #0
 80041e6:	e00d      	b.n	8004204 <UART_SetConfig+0x608>
 80041e8:	2308      	movs	r3, #8
 80041ea:	2400      	movs	r4, #0
 80041ec:	e00a      	b.n	8004204 <UART_SetConfig+0x608>
 80041ee:	2306      	movs	r3, #6
 80041f0:	2400      	movs	r4, #0
 80041f2:	e007      	b.n	8004204 <UART_SetConfig+0x608>
 80041f4:	2304      	movs	r3, #4
 80041f6:	2400      	movs	r4, #0
 80041f8:	e004      	b.n	8004204 <UART_SetConfig+0x608>
 80041fa:	2302      	movs	r3, #2
 80041fc:	2400      	movs	r4, #0
 80041fe:	e001      	b.n	8004204 <UART_SetConfig+0x608>
 8004200:	2301      	movs	r3, #1
 8004202:	2400      	movs	r4, #0
 8004204:	001a      	movs	r2, r3
 8004206:	0023      	movs	r3, r4
 8004208:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800420a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800420c:	f7fc f8f0 	bl	80003f0 <__aeabi_uldivmod>
 8004210:	0003      	movs	r3, r0
 8004212:	000c      	movs	r4, r1
 8004214:	0e1a      	lsrs	r2, r3, #24
 8004216:	0226      	lsls	r6, r4, #8
 8004218:	4316      	orrs	r6, r2
 800421a:	021d      	lsls	r5, r3, #8
 800421c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	643b      	str	r3, [r7, #64]	; 0x40
 8004224:	2300      	movs	r3, #0
 8004226:	647b      	str	r3, [r7, #68]	; 0x44
 8004228:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800422a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800422c:	1940      	adds	r0, r0, r5
 800422e:	4171      	adcs	r1, r6
 8004230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38
 8004236:	2300      	movs	r3, #0
 8004238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800423c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423e:	f7fc f8d7 	bl	80003f0 <__aeabi_uldivmod>
 8004242:	0003      	movs	r3, r0
 8004244:	000c      	movs	r4, r1
 8004246:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004248:	e195      	b.n	8004576 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800424a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	2b00      	cmp	r3, #0
 8004250:	d04f      	beq.n	80042f2 <UART_SetConfig+0x6f6>
 8004252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b01      	cmp	r3, #1
 8004258:	d048      	beq.n	80042ec <UART_SetConfig+0x6f0>
 800425a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b02      	cmp	r3, #2
 8004260:	d041      	beq.n	80042e6 <UART_SetConfig+0x6ea>
 8004262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	2b03      	cmp	r3, #3
 8004268:	d03a      	beq.n	80042e0 <UART_SetConfig+0x6e4>
 800426a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	2b04      	cmp	r3, #4
 8004270:	d033      	beq.n	80042da <UART_SetConfig+0x6de>
 8004272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	2b05      	cmp	r3, #5
 8004278:	d02c      	beq.n	80042d4 <UART_SetConfig+0x6d8>
 800427a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	2b06      	cmp	r3, #6
 8004280:	d025      	beq.n	80042ce <UART_SetConfig+0x6d2>
 8004282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	2b07      	cmp	r3, #7
 8004288:	d01e      	beq.n	80042c8 <UART_SetConfig+0x6cc>
 800428a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	2b08      	cmp	r3, #8
 8004290:	d017      	beq.n	80042c2 <UART_SetConfig+0x6c6>
 8004292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	2b09      	cmp	r3, #9
 8004298:	d010      	beq.n	80042bc <UART_SetConfig+0x6c0>
 800429a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	2b0a      	cmp	r3, #10
 80042a0:	d009      	beq.n	80042b6 <UART_SetConfig+0x6ba>
 80042a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	2b0b      	cmp	r3, #11
 80042a8:	d102      	bne.n	80042b0 <UART_SetConfig+0x6b4>
 80042aa:	4b44      	ldr	r3, [pc, #272]	; (80043bc <UART_SetConfig+0x7c0>)
 80042ac:	2400      	movs	r4, #0
 80042ae:	e022      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042b0:	4b43      	ldr	r3, [pc, #268]	; (80043c0 <UART_SetConfig+0x7c4>)
 80042b2:	2400      	movs	r4, #0
 80042b4:	e01f      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042b6:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <UART_SetConfig+0x7c8>)
 80042b8:	2400      	movs	r4, #0
 80042ba:	e01c      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042bc:	4b42      	ldr	r3, [pc, #264]	; (80043c8 <UART_SetConfig+0x7cc>)
 80042be:	2400      	movs	r4, #0
 80042c0:	e019      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042c2:	4b42      	ldr	r3, [pc, #264]	; (80043cc <UART_SetConfig+0x7d0>)
 80042c4:	2400      	movs	r4, #0
 80042c6:	e016      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042c8:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <UART_SetConfig+0x7d4>)
 80042ca:	2400      	movs	r4, #0
 80042cc:	e013      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042ce:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <UART_SetConfig+0x7d8>)
 80042d0:	2400      	movs	r4, #0
 80042d2:	e010      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042d4:	4b40      	ldr	r3, [pc, #256]	; (80043d8 <UART_SetConfig+0x7dc>)
 80042d6:	2400      	movs	r4, #0
 80042d8:	e00d      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042da:	4b40      	ldr	r3, [pc, #256]	; (80043dc <UART_SetConfig+0x7e0>)
 80042dc:	2400      	movs	r4, #0
 80042de:	e00a      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042e0:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <UART_SetConfig+0x7e4>)
 80042e2:	2400      	movs	r4, #0
 80042e4:	e007      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042e6:	4b3f      	ldr	r3, [pc, #252]	; (80043e4 <UART_SetConfig+0x7e8>)
 80042e8:	2400      	movs	r4, #0
 80042ea:	e004      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042ec:	4b3e      	ldr	r3, [pc, #248]	; (80043e8 <UART_SetConfig+0x7ec>)
 80042ee:	2400      	movs	r4, #0
 80042f0:	e001      	b.n	80042f6 <UART_SetConfig+0x6fa>
 80042f2:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <UART_SetConfig+0x7c4>)
 80042f4:	2400      	movs	r4, #0
 80042f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042f8:	6852      	ldr	r2, [r2, #4]
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	633a      	str	r2, [r7, #48]	; 0x30
 80042fe:	2200      	movs	r2, #0
 8004300:	637a      	str	r2, [r7, #52]	; 0x34
 8004302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004304:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004306:	18c0      	adds	r0, r0, r3
 8004308:	4161      	adcs	r1, r4
 800430a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004310:	2300      	movs	r3, #0
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	f7fc f86a 	bl	80003f0 <__aeabi_uldivmod>
 800431c:	0003      	movs	r3, r0
 800431e:	000c      	movs	r4, r1
 8004320:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004322:	e128      	b.n	8004576 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004324:	f7fe feb4 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8004328:	0003      	movs	r3, r0
 800432a:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800432c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
 8004334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	2b00      	cmp	r3, #0
 800433a:	d100      	bne.n	800433e <UART_SetConfig+0x742>
 800433c:	e071      	b.n	8004422 <UART_SetConfig+0x826>
 800433e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	2b01      	cmp	r3, #1
 8004344:	d100      	bne.n	8004348 <UART_SetConfig+0x74c>
 8004346:	e069      	b.n	800441c <UART_SetConfig+0x820>
 8004348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	2b02      	cmp	r3, #2
 800434e:	d100      	bne.n	8004352 <UART_SetConfig+0x756>
 8004350:	e061      	b.n	8004416 <UART_SetConfig+0x81a>
 8004352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2b03      	cmp	r3, #3
 8004358:	d05a      	beq.n	8004410 <UART_SetConfig+0x814>
 800435a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	2b04      	cmp	r3, #4
 8004360:	d053      	beq.n	800440a <UART_SetConfig+0x80e>
 8004362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	2b05      	cmp	r3, #5
 8004368:	d04c      	beq.n	8004404 <UART_SetConfig+0x808>
 800436a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	2b06      	cmp	r3, #6
 8004370:	d045      	beq.n	80043fe <UART_SetConfig+0x802>
 8004372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	2b07      	cmp	r3, #7
 8004378:	d03e      	beq.n	80043f8 <UART_SetConfig+0x7fc>
 800437a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b08      	cmp	r3, #8
 8004380:	d037      	beq.n	80043f2 <UART_SetConfig+0x7f6>
 8004382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b09      	cmp	r3, #9
 8004388:	d030      	beq.n	80043ec <UART_SetConfig+0x7f0>
 800438a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b0a      	cmp	r3, #10
 8004390:	d00a      	beq.n	80043a8 <UART_SetConfig+0x7ac>
 8004392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b0b      	cmp	r3, #11
 8004398:	d103      	bne.n	80043a2 <UART_SetConfig+0x7a6>
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	2400      	movs	r4, #0
 80043a0:	e041      	b.n	8004426 <UART_SetConfig+0x82a>
 80043a2:	2301      	movs	r3, #1
 80043a4:	2400      	movs	r4, #0
 80043a6:	e03e      	b.n	8004426 <UART_SetConfig+0x82a>
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	2400      	movs	r4, #0
 80043ac:	e03b      	b.n	8004426 <UART_SetConfig+0x82a>
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	00000aaa 	.word	0x00000aaa
 80043b4:	00000ccc 	.word	0x00000ccc
 80043b8:	00001555 	.word	0x00001555
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	f4240000 	.word	0xf4240000
 80043c4:	01e84800 	.word	0x01e84800
 80043c8:	03d09000 	.word	0x03d09000
 80043cc:	07a12000 	.word	0x07a12000
 80043d0:	0f424000 	.word	0x0f424000
 80043d4:	14585500 	.word	0x14585500
 80043d8:	186a0000 	.word	0x186a0000
 80043dc:	1e848000 	.word	0x1e848000
 80043e0:	28b0aa00 	.word	0x28b0aa00
 80043e4:	3d090000 	.word	0x3d090000
 80043e8:	7a120000 	.word	0x7a120000
 80043ec:	2340      	movs	r3, #64	; 0x40
 80043ee:	2400      	movs	r4, #0
 80043f0:	e019      	b.n	8004426 <UART_SetConfig+0x82a>
 80043f2:	2320      	movs	r3, #32
 80043f4:	2400      	movs	r4, #0
 80043f6:	e016      	b.n	8004426 <UART_SetConfig+0x82a>
 80043f8:	2310      	movs	r3, #16
 80043fa:	2400      	movs	r4, #0
 80043fc:	e013      	b.n	8004426 <UART_SetConfig+0x82a>
 80043fe:	230c      	movs	r3, #12
 8004400:	2400      	movs	r4, #0
 8004402:	e010      	b.n	8004426 <UART_SetConfig+0x82a>
 8004404:	230a      	movs	r3, #10
 8004406:	2400      	movs	r4, #0
 8004408:	e00d      	b.n	8004426 <UART_SetConfig+0x82a>
 800440a:	2308      	movs	r3, #8
 800440c:	2400      	movs	r4, #0
 800440e:	e00a      	b.n	8004426 <UART_SetConfig+0x82a>
 8004410:	2306      	movs	r3, #6
 8004412:	2400      	movs	r4, #0
 8004414:	e007      	b.n	8004426 <UART_SetConfig+0x82a>
 8004416:	2304      	movs	r3, #4
 8004418:	2400      	movs	r4, #0
 800441a:	e004      	b.n	8004426 <UART_SetConfig+0x82a>
 800441c:	2302      	movs	r3, #2
 800441e:	2400      	movs	r4, #0
 8004420:	e001      	b.n	8004426 <UART_SetConfig+0x82a>
 8004422:	2301      	movs	r3, #1
 8004424:	2400      	movs	r4, #0
 8004426:	001a      	movs	r2, r3
 8004428:	0023      	movs	r3, r4
 800442a:	6a38      	ldr	r0, [r7, #32]
 800442c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800442e:	f7fb ffdf 	bl	80003f0 <__aeabi_uldivmod>
 8004432:	0003      	movs	r3, r0
 8004434:	000c      	movs	r4, r1
 8004436:	0e1a      	lsrs	r2, r3, #24
 8004438:	0221      	lsls	r1, r4, #8
 800443a:	6579      	str	r1, [r7, #84]	; 0x54
 800443c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800443e:	4311      	orrs	r1, r2
 8004440:	6579      	str	r1, [r7, #84]	; 0x54
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	653b      	str	r3, [r7, #80]	; 0x50
 8004446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	69fc      	ldr	r4, [r7, #28]
 800445a:	18c0      	adds	r0, r0, r3
 800445c:	4161      	adcs	r1, r4
 800445e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f7fb ffc0 	bl	80003f0 <__aeabi_uldivmod>
 8004470:	0003      	movs	r3, r0
 8004472:	000c      	movs	r4, r1
 8004474:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004476:	e07e      	b.n	8004576 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	d058      	beq.n	8004532 <UART_SetConfig+0x936>
 8004480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	2b01      	cmp	r3, #1
 8004486:	d050      	beq.n	800452a <UART_SetConfig+0x92e>
 8004488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	2b02      	cmp	r3, #2
 800448e:	d048      	beq.n	8004522 <UART_SetConfig+0x926>
 8004490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	2b03      	cmp	r3, #3
 8004496:	d041      	beq.n	800451c <UART_SetConfig+0x920>
 8004498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	2b04      	cmp	r3, #4
 800449e:	d039      	beq.n	8004514 <UART_SetConfig+0x918>
 80044a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d032      	beq.n	800450e <UART_SetConfig+0x912>
 80044a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d02b      	beq.n	8004508 <UART_SetConfig+0x90c>
 80044b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	2b07      	cmp	r3, #7
 80044b6:	d023      	beq.n	8004500 <UART_SetConfig+0x904>
 80044b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d01b      	beq.n	80044f8 <UART_SetConfig+0x8fc>
 80044c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2b09      	cmp	r3, #9
 80044c6:	d013      	beq.n	80044f0 <UART_SetConfig+0x8f4>
 80044c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	2b0a      	cmp	r3, #10
 80044ce:	d00b      	beq.n	80044e8 <UART_SetConfig+0x8ec>
 80044d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	2b0b      	cmp	r3, #11
 80044d6:	d103      	bne.n	80044e0 <UART_SetConfig+0x8e4>
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	2400      	movs	r4, #0
 80044de:	e02b      	b.n	8004538 <UART_SetConfig+0x93c>
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	2400      	movs	r4, #0
 80044e6:	e027      	b.n	8004538 <UART_SetConfig+0x93c>
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	025b      	lsls	r3, r3, #9
 80044ec:	2400      	movs	r4, #0
 80044ee:	e023      	b.n	8004538 <UART_SetConfig+0x93c>
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	2400      	movs	r4, #0
 80044f6:	e01f      	b.n	8004538 <UART_SetConfig+0x93c>
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	02db      	lsls	r3, r3, #11
 80044fc:	2400      	movs	r4, #0
 80044fe:	e01b      	b.n	8004538 <UART_SetConfig+0x93c>
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	031b      	lsls	r3, r3, #12
 8004504:	2400      	movs	r4, #0
 8004506:	e017      	b.n	8004538 <UART_SetConfig+0x93c>
 8004508:	4bb7      	ldr	r3, [pc, #732]	; (80047e8 <UART_SetConfig+0xbec>)
 800450a:	2400      	movs	r4, #0
 800450c:	e014      	b.n	8004538 <UART_SetConfig+0x93c>
 800450e:	4bb7      	ldr	r3, [pc, #732]	; (80047ec <UART_SetConfig+0xbf0>)
 8004510:	2400      	movs	r4, #0
 8004512:	e011      	b.n	8004538 <UART_SetConfig+0x93c>
 8004514:	2380      	movs	r3, #128	; 0x80
 8004516:	035b      	lsls	r3, r3, #13
 8004518:	2400      	movs	r4, #0
 800451a:	e00d      	b.n	8004538 <UART_SetConfig+0x93c>
 800451c:	4bb4      	ldr	r3, [pc, #720]	; (80047f0 <UART_SetConfig+0xbf4>)
 800451e:	2400      	movs	r4, #0
 8004520:	e00a      	b.n	8004538 <UART_SetConfig+0x93c>
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	039b      	lsls	r3, r3, #14
 8004526:	2400      	movs	r4, #0
 8004528:	e006      	b.n	8004538 <UART_SetConfig+0x93c>
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	03db      	lsls	r3, r3, #15
 800452e:	2400      	movs	r4, #0
 8004530:	e002      	b.n	8004538 <UART_SetConfig+0x93c>
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	2400      	movs	r4, #0
 8004538:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800453a:	6852      	ldr	r2, [r2, #4]
 800453c:	0852      	lsrs	r2, r2, #1
 800453e:	60ba      	str	r2, [r7, #8]
 8004540:	2200      	movs	r2, #0
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	68b8      	ldr	r0, [r7, #8]
 8004546:	68f9      	ldr	r1, [r7, #12]
 8004548:	18c0      	adds	r0, r0, r3
 800454a:	4161      	adcs	r1, r4
 800454c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f7fb ff49 	bl	80003f0 <__aeabi_uldivmod>
 800455e:	0003      	movs	r3, r0
 8004560:	000c      	movs	r4, r1
 8004562:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004564:	e007      	b.n	8004576 <UART_SetConfig+0x97a>
          default:
            ret = HAL_ERROR;
 8004566:	231b      	movs	r3, #27
 8004568:	2258      	movs	r2, #88	; 0x58
 800456a:	4694      	mov	ip, r2
 800456c:	44bc      	add	ip, r7
 800456e:	4463      	add	r3, ip
 8004570:	2201      	movs	r2, #1
 8004572:	701a      	strb	r2, [r3, #0]
            break;
 8004574:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004578:	4a9e      	ldr	r2, [pc, #632]	; (80047f4 <UART_SetConfig+0xbf8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d909      	bls.n	8004592 <UART_SetConfig+0x996>
 800457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004580:	4a9d      	ldr	r2, [pc, #628]	; (80047f8 <UART_SetConfig+0xbfc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d805      	bhi.n	8004592 <UART_SetConfig+0x996>
        {
          huart->Instance->BRR = usartdiv;
 8004586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	f000 fbc3 	bl	8004d18 <UART_SetConfig+0x111c>
        }
        else
        {
          ret = HAL_ERROR;
 8004592:	231b      	movs	r3, #27
 8004594:	2258      	movs	r2, #88	; 0x58
 8004596:	4694      	mov	ip, r2
 8004598:	44bc      	add	ip, r7
 800459a:	4463      	add	r3, ip
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
 80045a0:	f000 fbba 	bl	8004d18 <UART_SetConfig+0x111c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d000      	beq.n	80045b2 <UART_SetConfig+0x9b6>
 80045b0:	e1e6      	b.n	8004980 <UART_SetConfig+0xd84>
  {
    switch (clocksource)
 80045b2:	2323      	movs	r3, #35	; 0x23
 80045b4:	2258      	movs	r2, #88	; 0x58
 80045b6:	4694      	mov	ip, r2
 80045b8:	44bc      	add	ip, r7
 80045ba:	4463      	add	r3, ip
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d100      	bne.n	80045c4 <UART_SetConfig+0x9c8>
 80045c2:	e06c      	b.n	800469e <UART_SetConfig+0xaa2>
 80045c4:	dc02      	bgt.n	80045cc <UART_SetConfig+0x9d0>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <UART_SetConfig+0x9de>
 80045ca:	e1a5      	b.n	8004918 <UART_SetConfig+0xd1c>
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d100      	bne.n	80045d2 <UART_SetConfig+0x9d6>
 80045d0:	e0bc      	b.n	800474c <UART_SetConfig+0xb50>
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d100      	bne.n	80045d8 <UART_SetConfig+0x9dc>
 80045d6:	e13e      	b.n	8004856 <UART_SetConfig+0xc5a>
 80045d8:	e19e      	b.n	8004918 <UART_SetConfig+0xd1c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045da:	f7fe fde5 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80045de:	0003      	movs	r3, r0
 80045e0:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d044      	beq.n	8004674 <UART_SetConfig+0xa78>
 80045ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d03e      	beq.n	8004670 <UART_SetConfig+0xa74>
 80045f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d038      	beq.n	800466c <UART_SetConfig+0xa70>
 80045fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d032      	beq.n	8004668 <UART_SetConfig+0xa6c>
 8004602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b04      	cmp	r3, #4
 8004608:	d02c      	beq.n	8004664 <UART_SetConfig+0xa68>
 800460a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	2b05      	cmp	r3, #5
 8004610:	d026      	beq.n	8004660 <UART_SetConfig+0xa64>
 8004612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2b06      	cmp	r3, #6
 8004618:	d020      	beq.n	800465c <UART_SetConfig+0xa60>
 800461a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b07      	cmp	r3, #7
 8004620:	d01a      	beq.n	8004658 <UART_SetConfig+0xa5c>
 8004622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	2b08      	cmp	r3, #8
 8004628:	d014      	beq.n	8004654 <UART_SetConfig+0xa58>
 800462a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b09      	cmp	r3, #9
 8004630:	d00e      	beq.n	8004650 <UART_SetConfig+0xa54>
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	2b0a      	cmp	r3, #10
 8004638:	d008      	beq.n	800464c <UART_SetConfig+0xa50>
 800463a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b0b      	cmp	r3, #11
 8004640:	d102      	bne.n	8004648 <UART_SetConfig+0xa4c>
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	e016      	b.n	8004676 <UART_SetConfig+0xa7a>
 8004648:	2301      	movs	r3, #1
 800464a:	e014      	b.n	8004676 <UART_SetConfig+0xa7a>
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	e012      	b.n	8004676 <UART_SetConfig+0xa7a>
 8004650:	2340      	movs	r3, #64	; 0x40
 8004652:	e010      	b.n	8004676 <UART_SetConfig+0xa7a>
 8004654:	2320      	movs	r3, #32
 8004656:	e00e      	b.n	8004676 <UART_SetConfig+0xa7a>
 8004658:	2310      	movs	r3, #16
 800465a:	e00c      	b.n	8004676 <UART_SetConfig+0xa7a>
 800465c:	230c      	movs	r3, #12
 800465e:	e00a      	b.n	8004676 <UART_SetConfig+0xa7a>
 8004660:	230a      	movs	r3, #10
 8004662:	e008      	b.n	8004676 <UART_SetConfig+0xa7a>
 8004664:	2308      	movs	r3, #8
 8004666:	e006      	b.n	8004676 <UART_SetConfig+0xa7a>
 8004668:	2306      	movs	r3, #6
 800466a:	e004      	b.n	8004676 <UART_SetConfig+0xa7a>
 800466c:	2304      	movs	r3, #4
 800466e:	e002      	b.n	8004676 <UART_SetConfig+0xa7a>
 8004670:	2302      	movs	r3, #2
 8004672:	e000      	b.n	8004676 <UART_SetConfig+0xa7a>
 8004674:	2301      	movs	r3, #1
 8004676:	0019      	movs	r1, r3
 8004678:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800467a:	f7fb fd43 	bl	8000104 <__udivsi3>
 800467e:	0003      	movs	r3, r0
 8004680:	005a      	lsls	r2, r3, #1
 8004682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	18d2      	adds	r2, r2, r3
 800468a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	0019      	movs	r1, r3
 8004690:	0010      	movs	r0, r2
 8004692:	f7fb fd37 	bl	8000104 <__udivsi3>
 8004696:	0003      	movs	r3, r0
 8004698:	b29b      	uxth	r3, r3
 800469a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800469c:	e144      	b.n	8004928 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800469e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d043      	beq.n	800472e <UART_SetConfig+0xb32>
 80046a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d03d      	beq.n	800472a <UART_SetConfig+0xb2e>
 80046ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d037      	beq.n	8004726 <UART_SetConfig+0xb2a>
 80046b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d031      	beq.n	8004722 <UART_SetConfig+0xb26>
 80046be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d02b      	beq.n	800471e <UART_SetConfig+0xb22>
 80046c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d025      	beq.n	800471a <UART_SetConfig+0xb1e>
 80046ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	2b06      	cmp	r3, #6
 80046d4:	d01f      	beq.n	8004716 <UART_SetConfig+0xb1a>
 80046d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2b07      	cmp	r3, #7
 80046dc:	d019      	beq.n	8004712 <UART_SetConfig+0xb16>
 80046de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d013      	beq.n	800470e <UART_SetConfig+0xb12>
 80046e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	2b09      	cmp	r3, #9
 80046ec:	d00d      	beq.n	800470a <UART_SetConfig+0xb0e>
 80046ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	2b0a      	cmp	r3, #10
 80046f4:	d007      	beq.n	8004706 <UART_SetConfig+0xb0a>
 80046f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	2b0b      	cmp	r3, #11
 80046fc:	d101      	bne.n	8004702 <UART_SetConfig+0xb06>
 80046fe:	4b3f      	ldr	r3, [pc, #252]	; (80047fc <UART_SetConfig+0xc00>)
 8004700:	e016      	b.n	8004730 <UART_SetConfig+0xb34>
 8004702:	4b3f      	ldr	r3, [pc, #252]	; (8004800 <UART_SetConfig+0xc04>)
 8004704:	e014      	b.n	8004730 <UART_SetConfig+0xb34>
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <UART_SetConfig+0xc08>)
 8004708:	e012      	b.n	8004730 <UART_SetConfig+0xb34>
 800470a:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <UART_SetConfig+0xc0c>)
 800470c:	e010      	b.n	8004730 <UART_SetConfig+0xb34>
 800470e:	4b3f      	ldr	r3, [pc, #252]	; (800480c <UART_SetConfig+0xc10>)
 8004710:	e00e      	b.n	8004730 <UART_SetConfig+0xb34>
 8004712:	4b3f      	ldr	r3, [pc, #252]	; (8004810 <UART_SetConfig+0xc14>)
 8004714:	e00c      	b.n	8004730 <UART_SetConfig+0xb34>
 8004716:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <UART_SetConfig+0xc18>)
 8004718:	e00a      	b.n	8004730 <UART_SetConfig+0xb34>
 800471a:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <UART_SetConfig+0xc1c>)
 800471c:	e008      	b.n	8004730 <UART_SetConfig+0xb34>
 800471e:	4b3f      	ldr	r3, [pc, #252]	; (800481c <UART_SetConfig+0xc20>)
 8004720:	e006      	b.n	8004730 <UART_SetConfig+0xb34>
 8004722:	4b3f      	ldr	r3, [pc, #252]	; (8004820 <UART_SetConfig+0xc24>)
 8004724:	e004      	b.n	8004730 <UART_SetConfig+0xb34>
 8004726:	4b3f      	ldr	r3, [pc, #252]	; (8004824 <UART_SetConfig+0xc28>)
 8004728:	e002      	b.n	8004730 <UART_SetConfig+0xb34>
 800472a:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <UART_SetConfig+0xc2c>)
 800472c:	e000      	b.n	8004730 <UART_SetConfig+0xb34>
 800472e:	4b34      	ldr	r3, [pc, #208]	; (8004800 <UART_SetConfig+0xc04>)
 8004730:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004732:	6852      	ldr	r2, [r2, #4]
 8004734:	0852      	lsrs	r2, r2, #1
 8004736:	189a      	adds	r2, r3, r2
 8004738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	0019      	movs	r1, r3
 800473e:	0010      	movs	r0, r2
 8004740:	f7fb fce0 	bl	8000104 <__udivsi3>
 8004744:	0003      	movs	r3, r0
 8004746:	b29b      	uxth	r3, r3
 8004748:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800474a:	e0ed      	b.n	8004928 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474c:	f7fe fca0 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8004750:	0003      	movs	r3, r0
 8004752:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	2b00      	cmp	r3, #0
 800475a:	d100      	bne.n	800475e <UART_SetConfig+0xb62>
 800475c:	e066      	b.n	800482c <UART_SetConfig+0xc30>
 800475e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2b01      	cmp	r3, #1
 8004764:	d03e      	beq.n	80047e4 <UART_SetConfig+0xbe8>
 8004766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	2b02      	cmp	r3, #2
 800476c:	d038      	beq.n	80047e0 <UART_SetConfig+0xbe4>
 800476e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b03      	cmp	r3, #3
 8004774:	d032      	beq.n	80047dc <UART_SetConfig+0xbe0>
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b04      	cmp	r3, #4
 800477c:	d02c      	beq.n	80047d8 <UART_SetConfig+0xbdc>
 800477e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2b05      	cmp	r3, #5
 8004784:	d026      	beq.n	80047d4 <UART_SetConfig+0xbd8>
 8004786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2b06      	cmp	r3, #6
 800478c:	d020      	beq.n	80047d0 <UART_SetConfig+0xbd4>
 800478e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	2b07      	cmp	r3, #7
 8004794:	d01a      	beq.n	80047cc <UART_SetConfig+0xbd0>
 8004796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2b08      	cmp	r3, #8
 800479c:	d014      	beq.n	80047c8 <UART_SetConfig+0xbcc>
 800479e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	2b09      	cmp	r3, #9
 80047a4:	d00e      	beq.n	80047c4 <UART_SetConfig+0xbc8>
 80047a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	2b0a      	cmp	r3, #10
 80047ac:	d008      	beq.n	80047c0 <UART_SetConfig+0xbc4>
 80047ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b0b      	cmp	r3, #11
 80047b4:	d102      	bne.n	80047bc <UART_SetConfig+0xbc0>
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	e038      	b.n	800482e <UART_SetConfig+0xc32>
 80047bc:	2301      	movs	r3, #1
 80047be:	e036      	b.n	800482e <UART_SetConfig+0xc32>
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	e034      	b.n	800482e <UART_SetConfig+0xc32>
 80047c4:	2340      	movs	r3, #64	; 0x40
 80047c6:	e032      	b.n	800482e <UART_SetConfig+0xc32>
 80047c8:	2320      	movs	r3, #32
 80047ca:	e030      	b.n	800482e <UART_SetConfig+0xc32>
 80047cc:	2310      	movs	r3, #16
 80047ce:	e02e      	b.n	800482e <UART_SetConfig+0xc32>
 80047d0:	230c      	movs	r3, #12
 80047d2:	e02c      	b.n	800482e <UART_SetConfig+0xc32>
 80047d4:	230a      	movs	r3, #10
 80047d6:	e02a      	b.n	800482e <UART_SetConfig+0xc32>
 80047d8:	2308      	movs	r3, #8
 80047da:	e028      	b.n	800482e <UART_SetConfig+0xc32>
 80047dc:	2306      	movs	r3, #6
 80047de:	e026      	b.n	800482e <UART_SetConfig+0xc32>
 80047e0:	2304      	movs	r3, #4
 80047e2:	e024      	b.n	800482e <UART_SetConfig+0xc32>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e022      	b.n	800482e <UART_SetConfig+0xc32>
 80047e8:	000aaa00 	.word	0x000aaa00
 80047ec:	000ccc00 	.word	0x000ccc00
 80047f0:	00155500 	.word	0x00155500
 80047f4:	000002ff 	.word	0x000002ff
 80047f8:	000fffff 	.word	0x000fffff
 80047fc:	0001e848 	.word	0x0001e848
 8004800:	01e84800 	.word	0x01e84800
 8004804:	0003d090 	.word	0x0003d090
 8004808:	0007a120 	.word	0x0007a120
 800480c:	000f4240 	.word	0x000f4240
 8004810:	001e8480 	.word	0x001e8480
 8004814:	0028b0aa 	.word	0x0028b0aa
 8004818:	0030d400 	.word	0x0030d400
 800481c:	003d0900 	.word	0x003d0900
 8004820:	00516154 	.word	0x00516154
 8004824:	007a1200 	.word	0x007a1200
 8004828:	00f42400 	.word	0x00f42400
 800482c:	2301      	movs	r3, #1
 800482e:	0019      	movs	r1, r3
 8004830:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004832:	f7fb fc67 	bl	8000104 <__udivsi3>
 8004836:	0003      	movs	r3, r0
 8004838:	005a      	lsls	r2, r3, #1
 800483a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	18d2      	adds	r2, r2, r3
 8004842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	0019      	movs	r1, r3
 8004848:	0010      	movs	r0, r2
 800484a:	f7fb fc5b 	bl	8000104 <__udivsi3>
 800484e:	0003      	movs	r3, r0
 8004850:	b29b      	uxth	r3, r3
 8004852:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004854:	e068      	b.n	8004928 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b00      	cmp	r3, #0
 800485c:	d04c      	beq.n	80048f8 <UART_SetConfig+0xcfc>
 800485e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	2b01      	cmp	r3, #1
 8004864:	d045      	beq.n	80048f2 <UART_SetConfig+0xcf6>
 8004866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	2b02      	cmp	r3, #2
 800486c:	d03e      	beq.n	80048ec <UART_SetConfig+0xcf0>
 800486e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	2b03      	cmp	r3, #3
 8004874:	d038      	beq.n	80048e8 <UART_SetConfig+0xcec>
 8004876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	2b04      	cmp	r3, #4
 800487c:	d031      	beq.n	80048e2 <UART_SetConfig+0xce6>
 800487e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	2b05      	cmp	r3, #5
 8004884:	d02b      	beq.n	80048de <UART_SetConfig+0xce2>
 8004886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b06      	cmp	r3, #6
 800488c:	d025      	beq.n	80048da <UART_SetConfig+0xcde>
 800488e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	2b07      	cmp	r3, #7
 8004894:	d01e      	beq.n	80048d4 <UART_SetConfig+0xcd8>
 8004896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b08      	cmp	r3, #8
 800489c:	d017      	beq.n	80048ce <UART_SetConfig+0xcd2>
 800489e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	2b09      	cmp	r3, #9
 80048a4:	d010      	beq.n	80048c8 <UART_SetConfig+0xccc>
 80048a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	2b0a      	cmp	r3, #10
 80048ac:	d009      	beq.n	80048c2 <UART_SetConfig+0xcc6>
 80048ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b0b      	cmp	r3, #11
 80048b4:	d102      	bne.n	80048bc <UART_SetConfig+0xcc0>
 80048b6:	2380      	movs	r3, #128	; 0x80
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	e01f      	b.n	80048fc <UART_SetConfig+0xd00>
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	025b      	lsls	r3, r3, #9
 80048c0:	e01c      	b.n	80048fc <UART_SetConfig+0xd00>
 80048c2:	2380      	movs	r3, #128	; 0x80
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	e019      	b.n	80048fc <UART_SetConfig+0xd00>
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	e016      	b.n	80048fc <UART_SetConfig+0xd00>
 80048ce:	2380      	movs	r3, #128	; 0x80
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	e013      	b.n	80048fc <UART_SetConfig+0xd00>
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	015b      	lsls	r3, r3, #5
 80048d8:	e010      	b.n	80048fc <UART_SetConfig+0xd00>
 80048da:	4bb7      	ldr	r3, [pc, #732]	; (8004bb8 <UART_SetConfig+0xfbc>)
 80048dc:	e00e      	b.n	80048fc <UART_SetConfig+0xd00>
 80048de:	4bb7      	ldr	r3, [pc, #732]	; (8004bbc <UART_SetConfig+0xfc0>)
 80048e0:	e00c      	b.n	80048fc <UART_SetConfig+0xd00>
 80048e2:	2380      	movs	r3, #128	; 0x80
 80048e4:	019b      	lsls	r3, r3, #6
 80048e6:	e009      	b.n	80048fc <UART_SetConfig+0xd00>
 80048e8:	4bb5      	ldr	r3, [pc, #724]	; (8004bc0 <UART_SetConfig+0xfc4>)
 80048ea:	e007      	b.n	80048fc <UART_SetConfig+0xd00>
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	01db      	lsls	r3, r3, #7
 80048f0:	e004      	b.n	80048fc <UART_SetConfig+0xd00>
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	e001      	b.n	80048fc <UART_SetConfig+0xd00>
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	025b      	lsls	r3, r3, #9
 80048fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048fe:	6852      	ldr	r2, [r2, #4]
 8004900:	0852      	lsrs	r2, r2, #1
 8004902:	189a      	adds	r2, r3, r2
 8004904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	0019      	movs	r1, r3
 800490a:	0010      	movs	r0, r2
 800490c:	f7fb fbfa 	bl	8000104 <__udivsi3>
 8004910:	0003      	movs	r3, r0
 8004912:	b29b      	uxth	r3, r3
 8004914:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004916:	e007      	b.n	8004928 <UART_SetConfig+0xd2c>
      default:
        ret = HAL_ERROR;
 8004918:	231b      	movs	r3, #27
 800491a:	2258      	movs	r2, #88	; 0x58
 800491c:	4694      	mov	ip, r2
 800491e:	44bc      	add	ip, r7
 8004920:	4463      	add	r3, ip
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
        break;
 8004926:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492a:	2b0f      	cmp	r3, #15
 800492c:	d920      	bls.n	8004970 <UART_SetConfig+0xd74>
 800492e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004930:	4aa4      	ldr	r2, [pc, #656]	; (8004bc4 <UART_SetConfig+0xfc8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d81c      	bhi.n	8004970 <UART_SetConfig+0xd74>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004938:	b29a      	uxth	r2, r3
 800493a:	200e      	movs	r0, #14
 800493c:	2458      	movs	r4, #88	; 0x58
 800493e:	193b      	adds	r3, r7, r4
 8004940:	181b      	adds	r3, r3, r0
 8004942:	210f      	movs	r1, #15
 8004944:	438a      	bics	r2, r1
 8004946:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	b29b      	uxth	r3, r3
 800494e:	2207      	movs	r2, #7
 8004950:	4013      	ands	r3, r2
 8004952:	b299      	uxth	r1, r3
 8004954:	193b      	adds	r3, r7, r4
 8004956:	181b      	adds	r3, r3, r0
 8004958:	193a      	adds	r2, r7, r4
 800495a:	1812      	adds	r2, r2, r0
 800495c:	8812      	ldrh	r2, [r2, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	193a      	adds	r2, r7, r4
 8004968:	1812      	adds	r2, r2, r0
 800496a:	8812      	ldrh	r2, [r2, #0]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	e1d3      	b.n	8004d18 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8004970:	231b      	movs	r3, #27
 8004972:	2258      	movs	r2, #88	; 0x58
 8004974:	4694      	mov	ip, r2
 8004976:	44bc      	add	ip, r7
 8004978:	4463      	add	r3, ip
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e1cb      	b.n	8004d18 <UART_SetConfig+0x111c>
    }
  }
  else
  {
    switch (clocksource)
 8004980:	2323      	movs	r3, #35	; 0x23
 8004982:	2258      	movs	r2, #88	; 0x58
 8004984:	4694      	mov	ip, r2
 8004986:	44bc      	add	ip, r7
 8004988:	4463      	add	r3, ip
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d100      	bne.n	8004992 <UART_SetConfig+0xd96>
 8004990:	e06c      	b.n	8004a6c <UART_SetConfig+0xe70>
 8004992:	dc02      	bgt.n	800499a <UART_SetConfig+0xd9e>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <UART_SetConfig+0xdac>
 8004998:	e1a3      	b.n	8004ce2 <UART_SetConfig+0x10e6>
 800499a:	2b04      	cmp	r3, #4
 800499c:	d100      	bne.n	80049a0 <UART_SetConfig+0xda4>
 800499e:	e0bc      	b.n	8004b1a <UART_SetConfig+0xf1e>
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d100      	bne.n	80049a6 <UART_SetConfig+0xdaa>
 80049a4:	e13d      	b.n	8004c22 <UART_SetConfig+0x1026>
 80049a6:	e19c      	b.n	8004ce2 <UART_SetConfig+0x10e6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe fbfe 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80049ac:	0003      	movs	r3, r0
 80049ae:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d044      	beq.n	8004a42 <UART_SetConfig+0xe46>
 80049b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d03e      	beq.n	8004a3e <UART_SetConfig+0xe42>
 80049c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d038      	beq.n	8004a3a <UART_SetConfig+0xe3e>
 80049c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d032      	beq.n	8004a36 <UART_SetConfig+0xe3a>
 80049d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d02c      	beq.n	8004a32 <UART_SetConfig+0xe36>
 80049d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d026      	beq.n	8004a2e <UART_SetConfig+0xe32>
 80049e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	2b06      	cmp	r3, #6
 80049e6:	d020      	beq.n	8004a2a <UART_SetConfig+0xe2e>
 80049e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b07      	cmp	r3, #7
 80049ee:	d01a      	beq.n	8004a26 <UART_SetConfig+0xe2a>
 80049f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d014      	beq.n	8004a22 <UART_SetConfig+0xe26>
 80049f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2b09      	cmp	r3, #9
 80049fe:	d00e      	beq.n	8004a1e <UART_SetConfig+0xe22>
 8004a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	2b0a      	cmp	r3, #10
 8004a06:	d008      	beq.n	8004a1a <UART_SetConfig+0xe1e>
 8004a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	2b0b      	cmp	r3, #11
 8004a0e:	d102      	bne.n	8004a16 <UART_SetConfig+0xe1a>
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	e016      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e014      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	e012      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a1e:	2340      	movs	r3, #64	; 0x40
 8004a20:	e010      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a22:	2320      	movs	r3, #32
 8004a24:	e00e      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a26:	2310      	movs	r3, #16
 8004a28:	e00c      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	e00a      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a2e:	230a      	movs	r3, #10
 8004a30:	e008      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a32:	2308      	movs	r3, #8
 8004a34:	e006      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a36:	2306      	movs	r3, #6
 8004a38:	e004      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	e002      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e000      	b.n	8004a44 <UART_SetConfig+0xe48>
 8004a42:	2301      	movs	r3, #1
 8004a44:	0019      	movs	r1, r3
 8004a46:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004a48:	f7fb fb5c 	bl	8000104 <__udivsi3>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	001a      	movs	r2, r3
 8004a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	085b      	lsrs	r3, r3, #1
 8004a56:	18d2      	adds	r2, r2, r3
 8004a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	0019      	movs	r1, r3
 8004a5e:	0010      	movs	r0, r2
 8004a60:	f7fb fb50 	bl	8000104 <__udivsi3>
 8004a64:	0003      	movs	r3, r0
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004a6a:	e142      	b.n	8004cf2 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d043      	beq.n	8004afc <UART_SetConfig+0xf00>
 8004a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d03d      	beq.n	8004af8 <UART_SetConfig+0xefc>
 8004a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d037      	beq.n	8004af4 <UART_SetConfig+0xef8>
 8004a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d031      	beq.n	8004af0 <UART_SetConfig+0xef4>
 8004a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d02b      	beq.n	8004aec <UART_SetConfig+0xef0>
 8004a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b05      	cmp	r3, #5
 8004a9a:	d025      	beq.n	8004ae8 <UART_SetConfig+0xeec>
 8004a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2b06      	cmp	r3, #6
 8004aa2:	d01f      	beq.n	8004ae4 <UART_SetConfig+0xee8>
 8004aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b07      	cmp	r3, #7
 8004aaa:	d019      	beq.n	8004ae0 <UART_SetConfig+0xee4>
 8004aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d013      	beq.n	8004adc <UART_SetConfig+0xee0>
 8004ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d00d      	beq.n	8004ad8 <UART_SetConfig+0xedc>
 8004abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	2b0a      	cmp	r3, #10
 8004ac2:	d007      	beq.n	8004ad4 <UART_SetConfig+0xed8>
 8004ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2b0b      	cmp	r3, #11
 8004aca:	d101      	bne.n	8004ad0 <UART_SetConfig+0xed4>
 8004acc:	4b3e      	ldr	r3, [pc, #248]	; (8004bc8 <UART_SetConfig+0xfcc>)
 8004ace:	e016      	b.n	8004afe <UART_SetConfig+0xf02>
 8004ad0:	4b3e      	ldr	r3, [pc, #248]	; (8004bcc <UART_SetConfig+0xfd0>)
 8004ad2:	e014      	b.n	8004afe <UART_SetConfig+0xf02>
 8004ad4:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <UART_SetConfig+0xfd4>)
 8004ad6:	e012      	b.n	8004afe <UART_SetConfig+0xf02>
 8004ad8:	4b3e      	ldr	r3, [pc, #248]	; (8004bd4 <UART_SetConfig+0xfd8>)
 8004ada:	e010      	b.n	8004afe <UART_SetConfig+0xf02>
 8004adc:	4b3e      	ldr	r3, [pc, #248]	; (8004bd8 <UART_SetConfig+0xfdc>)
 8004ade:	e00e      	b.n	8004afe <UART_SetConfig+0xf02>
 8004ae0:	4b3e      	ldr	r3, [pc, #248]	; (8004bdc <UART_SetConfig+0xfe0>)
 8004ae2:	e00c      	b.n	8004afe <UART_SetConfig+0xf02>
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <UART_SetConfig+0xfe4>)
 8004ae6:	e00a      	b.n	8004afe <UART_SetConfig+0xf02>
 8004ae8:	4b3e      	ldr	r3, [pc, #248]	; (8004be4 <UART_SetConfig+0xfe8>)
 8004aea:	e008      	b.n	8004afe <UART_SetConfig+0xf02>
 8004aec:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <UART_SetConfig+0xfec>)
 8004aee:	e006      	b.n	8004afe <UART_SetConfig+0xf02>
 8004af0:	4b3e      	ldr	r3, [pc, #248]	; (8004bec <UART_SetConfig+0xff0>)
 8004af2:	e004      	b.n	8004afe <UART_SetConfig+0xf02>
 8004af4:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <UART_SetConfig+0xff4>)
 8004af6:	e002      	b.n	8004afe <UART_SetConfig+0xf02>
 8004af8:	4b3e      	ldr	r3, [pc, #248]	; (8004bf4 <UART_SetConfig+0xff8>)
 8004afa:	e000      	b.n	8004afe <UART_SetConfig+0xf02>
 8004afc:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <UART_SetConfig+0xfd0>)
 8004afe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b00:	6852      	ldr	r2, [r2, #4]
 8004b02:	0852      	lsrs	r2, r2, #1
 8004b04:	189a      	adds	r2, r3, r2
 8004b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	0019      	movs	r1, r3
 8004b0c:	0010      	movs	r0, r2
 8004b0e:	f7fb faf9 	bl	8000104 <__udivsi3>
 8004b12:	0003      	movs	r3, r0
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004b18:	e0eb      	b.n	8004cf2 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1a:	f7fe fab9 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d100      	bne.n	8004b2c <UART_SetConfig+0xf30>
 8004b2a:	e065      	b.n	8004bf8 <UART_SetConfig+0xffc>
 8004b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d03e      	beq.n	8004bb2 <UART_SetConfig+0xfb6>
 8004b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d038      	beq.n	8004bae <UART_SetConfig+0xfb2>
 8004b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d032      	beq.n	8004baa <UART_SetConfig+0xfae>
 8004b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d02c      	beq.n	8004ba6 <UART_SetConfig+0xfaa>
 8004b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2b05      	cmp	r3, #5
 8004b52:	d026      	beq.n	8004ba2 <UART_SetConfig+0xfa6>
 8004b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	d020      	beq.n	8004b9e <UART_SetConfig+0xfa2>
 8004b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	2b07      	cmp	r3, #7
 8004b62:	d01a      	beq.n	8004b9a <UART_SetConfig+0xf9e>
 8004b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d014      	beq.n	8004b96 <UART_SetConfig+0xf9a>
 8004b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	2b09      	cmp	r3, #9
 8004b72:	d00e      	beq.n	8004b92 <UART_SetConfig+0xf96>
 8004b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	2b0a      	cmp	r3, #10
 8004b7a:	d008      	beq.n	8004b8e <UART_SetConfig+0xf92>
 8004b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b0b      	cmp	r3, #11
 8004b82:	d102      	bne.n	8004b8a <UART_SetConfig+0xf8e>
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	e037      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e035      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	e033      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004b92:	2340      	movs	r3, #64	; 0x40
 8004b94:	e031      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004b96:	2320      	movs	r3, #32
 8004b98:	e02f      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004b9a:	2310      	movs	r3, #16
 8004b9c:	e02d      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	e02b      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004ba2:	230a      	movs	r3, #10
 8004ba4:	e029      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	e027      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004baa:	2306      	movs	r3, #6
 8004bac:	e025      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004bae:	2304      	movs	r3, #4
 8004bb0:	e023      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e021      	b.n	8004bfa <UART_SetConfig+0xffe>
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	00001554 	.word	0x00001554
 8004bbc:	00001998 	.word	0x00001998
 8004bc0:	00002aaa 	.word	0x00002aaa
 8004bc4:	0000ffff 	.word	0x0000ffff
 8004bc8:	0000f424 	.word	0x0000f424
 8004bcc:	00f42400 	.word	0x00f42400
 8004bd0:	0001e848 	.word	0x0001e848
 8004bd4:	0003d090 	.word	0x0003d090
 8004bd8:	0007a120 	.word	0x0007a120
 8004bdc:	000f4240 	.word	0x000f4240
 8004be0:	00145855 	.word	0x00145855
 8004be4:	00186a00 	.word	0x00186a00
 8004be8:	001e8480 	.word	0x001e8480
 8004bec:	0028b0aa 	.word	0x0028b0aa
 8004bf0:	003d0900 	.word	0x003d0900
 8004bf4:	007a1200 	.word	0x007a1200
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004bfe:	f7fb fa81 	bl	8000104 <__udivsi3>
 8004c02:	0003      	movs	r3, r0
 8004c04:	001a      	movs	r2, r3
 8004c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	18d2      	adds	r2, r2, r3
 8004c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	0019      	movs	r1, r3
 8004c14:	0010      	movs	r0, r2
 8004c16:	f7fb fa75 	bl	8000104 <__udivsi3>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004c20:	e067      	b.n	8004cf2 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d04b      	beq.n	8004cc2 <UART_SetConfig+0x10c6>
 8004c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d044      	beq.n	8004cbc <UART_SetConfig+0x10c0>
 8004c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d03d      	beq.n	8004cb6 <UART_SetConfig+0x10ba>
 8004c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d037      	beq.n	8004cb2 <UART_SetConfig+0x10b6>
 8004c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d030      	beq.n	8004cac <UART_SetConfig+0x10b0>
 8004c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d02a      	beq.n	8004ca8 <UART_SetConfig+0x10ac>
 8004c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d024      	beq.n	8004ca4 <UART_SetConfig+0x10a8>
 8004c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b07      	cmp	r3, #7
 8004c60:	d01d      	beq.n	8004c9e <UART_SetConfig+0x10a2>
 8004c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d016      	beq.n	8004c98 <UART_SetConfig+0x109c>
 8004c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b09      	cmp	r3, #9
 8004c70:	d00f      	beq.n	8004c92 <UART_SetConfig+0x1096>
 8004c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b0a      	cmp	r3, #10
 8004c78:	d008      	beq.n	8004c8c <UART_SetConfig+0x1090>
 8004c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b0b      	cmp	r3, #11
 8004c80:	d101      	bne.n	8004c86 <UART_SetConfig+0x108a>
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	e01f      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004c86:	2380      	movs	r3, #128	; 0x80
 8004c88:	021b      	lsls	r3, r3, #8
 8004c8a:	e01c      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	e019      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004c92:	2380      	movs	r3, #128	; 0x80
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	e016      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	e013      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	e010      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004ca4:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <UART_SetConfig+0x114c>)
 8004ca6:	e00e      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004ca8:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <UART_SetConfig+0x1150>)
 8004caa:	e00c      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	015b      	lsls	r3, r3, #5
 8004cb0:	e009      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004cb2:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <UART_SetConfig+0x1154>)
 8004cb4:	e007      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	019b      	lsls	r3, r3, #6
 8004cba:	e004      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	01db      	lsls	r3, r3, #7
 8004cc0:	e001      	b.n	8004cc6 <UART_SetConfig+0x10ca>
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cc8:	6852      	ldr	r2, [r2, #4]
 8004cca:	0852      	lsrs	r2, r2, #1
 8004ccc:	189a      	adds	r2, r3, r2
 8004cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	0010      	movs	r0, r2
 8004cd6:	f7fb fa15 	bl	8000104 <__udivsi3>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004ce0:	e007      	b.n	8004cf2 <UART_SetConfig+0x10f6>
      default:
        ret = HAL_ERROR;
 8004ce2:	231b      	movs	r3, #27
 8004ce4:	2258      	movs	r2, #88	; 0x58
 8004ce6:	4694      	mov	ip, r2
 8004ce8:	44bc      	add	ip, r7
 8004cea:	4463      	add	r3, ip
 8004cec:	2201      	movs	r2, #1
 8004cee:	701a      	strb	r2, [r3, #0]
        break;
 8004cf0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf4:	2b0f      	cmp	r3, #15
 8004cf6:	d908      	bls.n	8004d0a <UART_SetConfig+0x110e>
 8004cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cfa:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <UART_SetConfig+0x1158>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d804      	bhi.n	8004d0a <UART_SetConfig+0x110e>
    {
      huart->Instance->BRR = usartdiv;
 8004d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004d06:	60da      	str	r2, [r3, #12]
 8004d08:	e006      	b.n	8004d18 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8004d0a:	231b      	movs	r3, #27
 8004d0c:	2258      	movs	r2, #88	; 0x58
 8004d0e:	4694      	mov	ip, r2
 8004d10:	44bc      	add	ip, r7
 8004d12:	4463      	add	r3, ip
 8004d14:	2201      	movs	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1a:	226a      	movs	r2, #106	; 0x6a
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d22:	2268      	movs	r2, #104	; 0x68
 8004d24:	2101      	movs	r1, #1
 8004d26:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d30:	2200      	movs	r2, #0
 8004d32:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004d34:	231b      	movs	r3, #27
 8004d36:	2258      	movs	r2, #88	; 0x58
 8004d38:	4694      	mov	ip, r2
 8004d3a:	44bc      	add	ip, r7
 8004d3c:	4463      	add	r3, ip
 8004d3e:	781b      	ldrb	r3, [r3, #0]
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b021      	add	sp, #132	; 0x84
 8004d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d48:	00000aaa 	.word	0x00000aaa
 8004d4c:	00000ccc 	.word	0x00000ccc
 8004d50:	00001555 	.word	0x00001555
 8004d54:	0000ffff 	.word	0x0000ffff

08004d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	2201      	movs	r2, #1
 8004d66:	4013      	ands	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4a4a      	ldr	r2, [pc, #296]	; (8004e9c <UART_AdvFeatureConfig+0x144>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	0019      	movs	r1, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	2202      	movs	r2, #2
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d00b      	beq.n	8004da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4a43      	ldr	r2, [pc, #268]	; (8004ea0 <UART_AdvFeatureConfig+0x148>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	0019      	movs	r1, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	2204      	movs	r2, #4
 8004daa:	4013      	ands	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4a3b      	ldr	r2, [pc, #236]	; (8004ea4 <UART_AdvFeatureConfig+0x14c>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	2208      	movs	r2, #8
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4a34      	ldr	r2, [pc, #208]	; (8004ea8 <UART_AdvFeatureConfig+0x150>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	2210      	movs	r2, #16
 8004dee:	4013      	ands	r3, r2
 8004df0:	d00b      	beq.n	8004e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <UART_AdvFeatureConfig+0x154>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	0019      	movs	r1, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	2220      	movs	r2, #32
 8004e10:	4013      	ands	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4a25      	ldr	r2, [pc, #148]	; (8004eb0 <UART_AdvFeatureConfig+0x158>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	0019      	movs	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	2240      	movs	r2, #64	; 0x40
 8004e32:	4013      	ands	r3, r2
 8004e34:	d01d      	beq.n	8004e72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <UART_AdvFeatureConfig+0x15c>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	035b      	lsls	r3, r3, #13
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d10b      	bne.n	8004e72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <UART_AdvFeatureConfig+0x160>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	0019      	movs	r1, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	2280      	movs	r2, #128	; 0x80
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4a0e      	ldr	r2, [pc, #56]	; (8004ebc <UART_AdvFeatureConfig+0x164>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }
}
 8004e94:	46c0      	nop			; (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b002      	add	sp, #8
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	fffdffff 	.word	0xfffdffff
 8004ea0:	fffeffff 	.word	0xfffeffff
 8004ea4:	fffbffff 	.word	0xfffbffff
 8004ea8:	ffff7fff 	.word	0xffff7fff
 8004eac:	ffffefff 	.word	0xffffefff
 8004eb0:	ffffdfff 	.word	0xffffdfff
 8004eb4:	ffefffff 	.word	0xffefffff
 8004eb8:	ff9fffff 	.word	0xff9fffff
 8004ebc:	fff7ffff 	.word	0xfff7ffff

08004ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2288      	movs	r2, #136	; 0x88
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ed0:	f7fc fab4 	bl	800143c <HAL_GetTick>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2208      	movs	r2, #8
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d10d      	bne.n	8004f02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	0399      	lsls	r1, r3, #14
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <UART_CheckIdleState+0x90>)
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	0013      	movs	r3, r2
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f000 f82d 	bl	8004f54 <UART_WaitOnFlagUntilTimeout>
 8004efa:	1e03      	subs	r3, r0, #0
 8004efc:	d001      	beq.n	8004f02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e021      	b.n	8004f46 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2204      	movs	r2, #4
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d10d      	bne.n	8004f2c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	03d9      	lsls	r1, r3, #15
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <UART_CheckIdleState+0x90>)
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	0013      	movs	r3, r2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f000 f818 	bl	8004f54 <UART_WaitOnFlagUntilTimeout>
 8004f24:	1e03      	subs	r3, r0, #0
 8004f26:	d001      	beq.n	8004f2c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e00c      	b.n	8004f46 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2280      	movs	r2, #128	; 0x80
 8004f30:	2120      	movs	r1, #32
 8004f32:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2284      	movs	r2, #132	; 0x84
 8004f38:	2120      	movs	r1, #32
 8004f3a:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	227c      	movs	r2, #124	; 0x7c
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b004      	add	sp, #16
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	01ffffff 	.word	0x01ffffff

08004f54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	1dfb      	adds	r3, r7, #7
 8004f62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f64:	e02b      	b.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	d028      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6c:	f7fc fa66 	bl	800143c <HAL_GetTick>
 8004f70:	0002      	movs	r2, r0
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d302      	bcc.n	8004f82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d11d      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4916      	ldr	r1, [pc, #88]	; (8004fe8 <UART_WaitOnFlagUntilTimeout+0x94>)
 8004f8e:	400a      	ands	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	438a      	bics	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2280      	movs	r2, #128	; 0x80
 8004fa6:	2120      	movs	r1, #32
 8004fa8:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2284      	movs	r2, #132	; 0x84
 8004fae:	2120      	movs	r1, #32
 8004fb0:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	227c      	movs	r2, #124	; 0x7c
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e00f      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	425a      	negs	r2, r3
 8004fce:	4153      	adcs	r3, r2
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	001a      	movs	r2, r3
 8004fd4:	1dfb      	adds	r3, r7, #7
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d0c4      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	0018      	movs	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b004      	add	sp, #16
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	fffffe5f 	.word	0xfffffe5f

08004fec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	227c      	movs	r2, #124	; 0x7c
 8004ff8:	5c9b      	ldrb	r3, [r3, r2]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e027      	b.n	8005052 <HAL_UARTEx_DisableFifoMode+0x66>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	227c      	movs	r2, #124	; 0x7c
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2280      	movs	r2, #128	; 0x80
 800500e:	2124      	movs	r1, #36	; 0x24
 8005010:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2101      	movs	r1, #1
 8005026:	438a      	bics	r2, r1
 8005028:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a0b      	ldr	r2, [pc, #44]	; (800505c <HAL_UARTEx_DisableFifoMode+0x70>)
 800502e:	4013      	ands	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	2120      	movs	r1, #32
 8005046:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	227c      	movs	r2, #124	; 0x7c
 800504c:	2100      	movs	r1, #0
 800504e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b004      	add	sp, #16
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	dfffffff 	.word	0xdfffffff

08005060 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	227c      	movs	r2, #124	; 0x7c
 800506e:	5c9b      	ldrb	r3, [r3, r2]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005074:	2302      	movs	r3, #2
 8005076:	e02e      	b.n	80050d6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	227c      	movs	r2, #124	; 0x7c
 800507c:	2101      	movs	r1, #1
 800507e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2280      	movs	r2, #128	; 0x80
 8005084:	2124      	movs	r1, #36	; 0x24
 8005086:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2101      	movs	r1, #1
 800509c:	438a      	bics	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	08d9      	lsrs	r1, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	0018      	movs	r0, r3
 80050b8:	f000 f854 	bl	8005164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2280      	movs	r2, #128	; 0x80
 80050c8:	2120      	movs	r1, #32
 80050ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	227c      	movs	r2, #124	; 0x7c
 80050d0:	2100      	movs	r1, #0
 80050d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b004      	add	sp, #16
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	227c      	movs	r2, #124	; 0x7c
 80050ee:	5c9b      	ldrb	r3, [r3, r2]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e02f      	b.n	8005158 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	227c      	movs	r2, #124	; 0x7c
 80050fc:	2101      	movs	r1, #1
 80050fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2280      	movs	r2, #128	; 0x80
 8005104:	2124      	movs	r1, #36	; 0x24
 8005106:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2101      	movs	r1, #1
 800511c:	438a      	bics	r2, r1
 800511e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4a0e      	ldr	r2, [pc, #56]	; (8005160 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005128:	4013      	ands	r3, r2
 800512a:	0019      	movs	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	0018      	movs	r0, r3
 800513a:	f000 f813 	bl	8005164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2280      	movs	r2, #128	; 0x80
 800514a:	2120      	movs	r1, #32
 800514c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	227c      	movs	r2, #124	; 0x7c
 8005152:	2100      	movs	r1, #0
 8005154:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b004      	add	sp, #16
 800515e:	bd80      	pop	{r7, pc}
 8005160:	f1ffffff 	.word	0xf1ffffff

08005164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800516c:	2314      	movs	r3, #20
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	4a2f      	ldr	r2, [pc, #188]	; (8005230 <UARTEx_SetNbDataToProcess+0xcc>)
 8005172:	ca03      	ldmia	r2!, {r0, r1}
 8005174:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005176:	230c      	movs	r3, #12
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	4a2e      	ldr	r2, [pc, #184]	; (8005234 <UARTEx_SetNbDataToProcess+0xd0>)
 800517c:	ca03      	ldmia	r2!, {r0, r1}
 800517e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005184:	2b00      	cmp	r3, #0
 8005186:	d108      	bne.n	800519a <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	226a      	movs	r2, #106	; 0x6a
 800518c:	2101      	movs	r1, #1
 800518e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2268      	movs	r2, #104	; 0x68
 8005194:	2101      	movs	r1, #1
 8005196:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005198:	e046      	b.n	8005228 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800519a:	261f      	movs	r6, #31
 800519c:	19bb      	adds	r3, r7, r6
 800519e:	2208      	movs	r2, #8
 80051a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051a2:	201e      	movs	r0, #30
 80051a4:	183b      	adds	r3, r7, r0
 80051a6:	2208      	movs	r2, #8
 80051a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	0e5b      	lsrs	r3, r3, #25
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	241d      	movs	r4, #29
 80051b6:	193b      	adds	r3, r7, r4
 80051b8:	2107      	movs	r1, #7
 80051ba:	400a      	ands	r2, r1
 80051bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	0f5b      	lsrs	r3, r3, #29
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	251c      	movs	r5, #28
 80051ca:	197b      	adds	r3, r7, r5
 80051cc:	2107      	movs	r1, #7
 80051ce:	400a      	ands	r2, r1
 80051d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80051d2:	183b      	adds	r3, r7, r0
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	197a      	adds	r2, r7, r5
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	2114      	movs	r1, #20
 80051dc:	1879      	adds	r1, r7, r1
 80051de:	5c8a      	ldrb	r2, [r1, r2]
 80051e0:	435a      	muls	r2, r3
 80051e2:	0010      	movs	r0, r2
 80051e4:	197b      	adds	r3, r7, r5
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	250c      	movs	r5, #12
 80051ea:	197a      	adds	r2, r7, r5
 80051ec:	5cd3      	ldrb	r3, [r2, r3]
 80051ee:	0019      	movs	r1, r3
 80051f0:	f7fb f812 	bl	8000218 <__divsi3>
 80051f4:	0003      	movs	r3, r0
 80051f6:	b299      	uxth	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	226a      	movs	r2, #106	; 0x6a
 80051fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80051fe:	19bb      	adds	r3, r7, r6
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	193a      	adds	r2, r7, r4
 8005204:	7812      	ldrb	r2, [r2, #0]
 8005206:	2114      	movs	r1, #20
 8005208:	1879      	adds	r1, r7, r1
 800520a:	5c8a      	ldrb	r2, [r1, r2]
 800520c:	435a      	muls	r2, r3
 800520e:	0010      	movs	r0, r2
 8005210:	193b      	adds	r3, r7, r4
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	197a      	adds	r2, r7, r5
 8005216:	5cd3      	ldrb	r3, [r2, r3]
 8005218:	0019      	movs	r1, r3
 800521a:	f7fa fffd 	bl	8000218 <__divsi3>
 800521e:	0003      	movs	r3, r0
 8005220:	b299      	uxth	r1, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2268      	movs	r2, #104	; 0x68
 8005226:	5299      	strh	r1, [r3, r2]
}
 8005228:	46c0      	nop			; (mov r8, r8)
 800522a:	46bd      	mov	sp, r7
 800522c:	b009      	add	sp, #36	; 0x24
 800522e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005230:	08005c28 	.word	0x08005c28
 8005234:	08005c30 	.word	0x08005c30

08005238 <__errno>:
 8005238:	4b01      	ldr	r3, [pc, #4]	; (8005240 <__errno+0x8>)
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	4770      	bx	lr
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	2000000c 	.word	0x2000000c

08005244 <__libc_init_array>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	2600      	movs	r6, #0
 8005248:	4d0c      	ldr	r5, [pc, #48]	; (800527c <__libc_init_array+0x38>)
 800524a:	4c0d      	ldr	r4, [pc, #52]	; (8005280 <__libc_init_array+0x3c>)
 800524c:	1b64      	subs	r4, r4, r5
 800524e:	10a4      	asrs	r4, r4, #2
 8005250:	42a6      	cmp	r6, r4
 8005252:	d109      	bne.n	8005268 <__libc_init_array+0x24>
 8005254:	2600      	movs	r6, #0
 8005256:	f000 fcc9 	bl	8005bec <_init>
 800525a:	4d0a      	ldr	r5, [pc, #40]	; (8005284 <__libc_init_array+0x40>)
 800525c:	4c0a      	ldr	r4, [pc, #40]	; (8005288 <__libc_init_array+0x44>)
 800525e:	1b64      	subs	r4, r4, r5
 8005260:	10a4      	asrs	r4, r4, #2
 8005262:	42a6      	cmp	r6, r4
 8005264:	d105      	bne.n	8005272 <__libc_init_array+0x2e>
 8005266:	bd70      	pop	{r4, r5, r6, pc}
 8005268:	00b3      	lsls	r3, r6, #2
 800526a:	58eb      	ldr	r3, [r5, r3]
 800526c:	4798      	blx	r3
 800526e:	3601      	adds	r6, #1
 8005270:	e7ee      	b.n	8005250 <__libc_init_array+0xc>
 8005272:	00b3      	lsls	r3, r6, #2
 8005274:	58eb      	ldr	r3, [r5, r3]
 8005276:	4798      	blx	r3
 8005278:	3601      	adds	r6, #1
 800527a:	e7f2      	b.n	8005262 <__libc_init_array+0x1e>
 800527c:	08005d04 	.word	0x08005d04
 8005280:	08005d04 	.word	0x08005d04
 8005284:	08005d04 	.word	0x08005d04
 8005288:	08005d08 	.word	0x08005d08

0800528c <memset>:
 800528c:	0003      	movs	r3, r0
 800528e:	1812      	adds	r2, r2, r0
 8005290:	4293      	cmp	r3, r2
 8005292:	d100      	bne.n	8005296 <memset+0xa>
 8005294:	4770      	bx	lr
 8005296:	7019      	strb	r1, [r3, #0]
 8005298:	3301      	adds	r3, #1
 800529a:	e7f9      	b.n	8005290 <memset+0x4>

0800529c <_puts_r>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	0005      	movs	r5, r0
 80052a0:	000e      	movs	r6, r1
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d004      	beq.n	80052b0 <_puts_r+0x14>
 80052a6:	6983      	ldr	r3, [r0, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <_puts_r+0x14>
 80052ac:	f000 fa24 	bl	80056f8 <__sinit>
 80052b0:	69ab      	ldr	r3, [r5, #24]
 80052b2:	68ac      	ldr	r4, [r5, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <_puts_r+0x22>
 80052b8:	0028      	movs	r0, r5
 80052ba:	f000 fa1d 	bl	80056f8 <__sinit>
 80052be:	4b24      	ldr	r3, [pc, #144]	; (8005350 <_puts_r+0xb4>)
 80052c0:	429c      	cmp	r4, r3
 80052c2:	d10f      	bne.n	80052e4 <_puts_r+0x48>
 80052c4:	686c      	ldr	r4, [r5, #4]
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	d502      	bpl.n	80052d2 <_puts_r+0x36>
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d11f      	bne.n	8005312 <_puts_r+0x76>
 80052d2:	0021      	movs	r1, r4
 80052d4:	0028      	movs	r0, r5
 80052d6:	f000 f8a1 	bl	800541c <__swsetup_r>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d019      	beq.n	8005312 <_puts_r+0x76>
 80052de:	2001      	movs	r0, #1
 80052e0:	4240      	negs	r0, r0
 80052e2:	bd70      	pop	{r4, r5, r6, pc}
 80052e4:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <_puts_r+0xb8>)
 80052e6:	429c      	cmp	r4, r3
 80052e8:	d101      	bne.n	80052ee <_puts_r+0x52>
 80052ea:	68ac      	ldr	r4, [r5, #8]
 80052ec:	e7eb      	b.n	80052c6 <_puts_r+0x2a>
 80052ee:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <_puts_r+0xbc>)
 80052f0:	429c      	cmp	r4, r3
 80052f2:	d1e8      	bne.n	80052c6 <_puts_r+0x2a>
 80052f4:	68ec      	ldr	r4, [r5, #12]
 80052f6:	e7e6      	b.n	80052c6 <_puts_r+0x2a>
 80052f8:	3601      	adds	r6, #1
 80052fa:	60a3      	str	r3, [r4, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	da04      	bge.n	800530a <_puts_r+0x6e>
 8005300:	69a2      	ldr	r2, [r4, #24]
 8005302:	429a      	cmp	r2, r3
 8005304:	dc16      	bgt.n	8005334 <_puts_r+0x98>
 8005306:	290a      	cmp	r1, #10
 8005308:	d014      	beq.n	8005334 <_puts_r+0x98>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	6022      	str	r2, [r4, #0]
 8005310:	7019      	strb	r1, [r3, #0]
 8005312:	68a3      	ldr	r3, [r4, #8]
 8005314:	7831      	ldrb	r1, [r6, #0]
 8005316:	3b01      	subs	r3, #1
 8005318:	2900      	cmp	r1, #0
 800531a:	d1ed      	bne.n	80052f8 <_puts_r+0x5c>
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	da0f      	bge.n	8005342 <_puts_r+0xa6>
 8005322:	0022      	movs	r2, r4
 8005324:	310a      	adds	r1, #10
 8005326:	0028      	movs	r0, r5
 8005328:	f000 f822 	bl	8005370 <__swbuf_r>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d0d6      	beq.n	80052de <_puts_r+0x42>
 8005330:	200a      	movs	r0, #10
 8005332:	e7d6      	b.n	80052e2 <_puts_r+0x46>
 8005334:	0022      	movs	r2, r4
 8005336:	0028      	movs	r0, r5
 8005338:	f000 f81a 	bl	8005370 <__swbuf_r>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	d1e8      	bne.n	8005312 <_puts_r+0x76>
 8005340:	e7cd      	b.n	80052de <_puts_r+0x42>
 8005342:	200a      	movs	r0, #10
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	6022      	str	r2, [r4, #0]
 800534a:	7018      	strb	r0, [r3, #0]
 800534c:	e7c9      	b.n	80052e2 <_puts_r+0x46>
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	08005cbc 	.word	0x08005cbc
 8005354:	08005cdc 	.word	0x08005cdc
 8005358:	08005c9c 	.word	0x08005c9c

0800535c <puts>:
 800535c:	b510      	push	{r4, lr}
 800535e:	4b03      	ldr	r3, [pc, #12]	; (800536c <puts+0x10>)
 8005360:	0001      	movs	r1, r0
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	f7ff ff9a 	bl	800529c <_puts_r>
 8005368:	bd10      	pop	{r4, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	2000000c 	.word	0x2000000c

08005370 <__swbuf_r>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	0005      	movs	r5, r0
 8005374:	000e      	movs	r6, r1
 8005376:	0014      	movs	r4, r2
 8005378:	2800      	cmp	r0, #0
 800537a:	d004      	beq.n	8005386 <__swbuf_r+0x16>
 800537c:	6983      	ldr	r3, [r0, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <__swbuf_r+0x16>
 8005382:	f000 f9b9 	bl	80056f8 <__sinit>
 8005386:	4b22      	ldr	r3, [pc, #136]	; (8005410 <__swbuf_r+0xa0>)
 8005388:	429c      	cmp	r4, r3
 800538a:	d12d      	bne.n	80053e8 <__swbuf_r+0x78>
 800538c:	686c      	ldr	r4, [r5, #4]
 800538e:	69a3      	ldr	r3, [r4, #24]
 8005390:	60a3      	str	r3, [r4, #8]
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	071b      	lsls	r3, r3, #28
 8005396:	d531      	bpl.n	80053fc <__swbuf_r+0x8c>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02e      	beq.n	80053fc <__swbuf_r+0x8c>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	6922      	ldr	r2, [r4, #16]
 80053a2:	b2f7      	uxtb	r7, r6
 80053a4:	1a98      	subs	r0, r3, r2
 80053a6:	6963      	ldr	r3, [r4, #20]
 80053a8:	b2f6      	uxtb	r6, r6
 80053aa:	4283      	cmp	r3, r0
 80053ac:	dc05      	bgt.n	80053ba <__swbuf_r+0x4a>
 80053ae:	0021      	movs	r1, r4
 80053b0:	0028      	movs	r0, r5
 80053b2:	f000 f933 	bl	800561c <_fflush_r>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d126      	bne.n	8005408 <__swbuf_r+0x98>
 80053ba:	68a3      	ldr	r3, [r4, #8]
 80053bc:	3001      	adds	r0, #1
 80053be:	3b01      	subs	r3, #1
 80053c0:	60a3      	str	r3, [r4, #8]
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	6022      	str	r2, [r4, #0]
 80053c8:	701f      	strb	r7, [r3, #0]
 80053ca:	6963      	ldr	r3, [r4, #20]
 80053cc:	4283      	cmp	r3, r0
 80053ce:	d004      	beq.n	80053da <__swbuf_r+0x6a>
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	07db      	lsls	r3, r3, #31
 80053d4:	d51a      	bpl.n	800540c <__swbuf_r+0x9c>
 80053d6:	2e0a      	cmp	r6, #10
 80053d8:	d118      	bne.n	800540c <__swbuf_r+0x9c>
 80053da:	0021      	movs	r1, r4
 80053dc:	0028      	movs	r0, r5
 80053de:	f000 f91d 	bl	800561c <_fflush_r>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d012      	beq.n	800540c <__swbuf_r+0x9c>
 80053e6:	e00f      	b.n	8005408 <__swbuf_r+0x98>
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <__swbuf_r+0xa4>)
 80053ea:	429c      	cmp	r4, r3
 80053ec:	d101      	bne.n	80053f2 <__swbuf_r+0x82>
 80053ee:	68ac      	ldr	r4, [r5, #8]
 80053f0:	e7cd      	b.n	800538e <__swbuf_r+0x1e>
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <__swbuf_r+0xa8>)
 80053f4:	429c      	cmp	r4, r3
 80053f6:	d1ca      	bne.n	800538e <__swbuf_r+0x1e>
 80053f8:	68ec      	ldr	r4, [r5, #12]
 80053fa:	e7c8      	b.n	800538e <__swbuf_r+0x1e>
 80053fc:	0021      	movs	r1, r4
 80053fe:	0028      	movs	r0, r5
 8005400:	f000 f80c 	bl	800541c <__swsetup_r>
 8005404:	2800      	cmp	r0, #0
 8005406:	d0ca      	beq.n	800539e <__swbuf_r+0x2e>
 8005408:	2601      	movs	r6, #1
 800540a:	4276      	negs	r6, r6
 800540c:	0030      	movs	r0, r6
 800540e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005410:	08005cbc 	.word	0x08005cbc
 8005414:	08005cdc 	.word	0x08005cdc
 8005418:	08005c9c 	.word	0x08005c9c

0800541c <__swsetup_r>:
 800541c:	4b36      	ldr	r3, [pc, #216]	; (80054f8 <__swsetup_r+0xdc>)
 800541e:	b570      	push	{r4, r5, r6, lr}
 8005420:	681d      	ldr	r5, [r3, #0]
 8005422:	0006      	movs	r6, r0
 8005424:	000c      	movs	r4, r1
 8005426:	2d00      	cmp	r5, #0
 8005428:	d005      	beq.n	8005436 <__swsetup_r+0x1a>
 800542a:	69ab      	ldr	r3, [r5, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <__swsetup_r+0x1a>
 8005430:	0028      	movs	r0, r5
 8005432:	f000 f961 	bl	80056f8 <__sinit>
 8005436:	4b31      	ldr	r3, [pc, #196]	; (80054fc <__swsetup_r+0xe0>)
 8005438:	429c      	cmp	r4, r3
 800543a:	d10f      	bne.n	800545c <__swsetup_r+0x40>
 800543c:	686c      	ldr	r4, [r5, #4]
 800543e:	230c      	movs	r3, #12
 8005440:	5ee2      	ldrsh	r2, [r4, r3]
 8005442:	b293      	uxth	r3, r2
 8005444:	0719      	lsls	r1, r3, #28
 8005446:	d42d      	bmi.n	80054a4 <__swsetup_r+0x88>
 8005448:	06d9      	lsls	r1, r3, #27
 800544a:	d411      	bmi.n	8005470 <__swsetup_r+0x54>
 800544c:	2309      	movs	r3, #9
 800544e:	2001      	movs	r0, #1
 8005450:	6033      	str	r3, [r6, #0]
 8005452:	3337      	adds	r3, #55	; 0x37
 8005454:	4313      	orrs	r3, r2
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	4240      	negs	r0, r0
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	4b28      	ldr	r3, [pc, #160]	; (8005500 <__swsetup_r+0xe4>)
 800545e:	429c      	cmp	r4, r3
 8005460:	d101      	bne.n	8005466 <__swsetup_r+0x4a>
 8005462:	68ac      	ldr	r4, [r5, #8]
 8005464:	e7eb      	b.n	800543e <__swsetup_r+0x22>
 8005466:	4b27      	ldr	r3, [pc, #156]	; (8005504 <__swsetup_r+0xe8>)
 8005468:	429c      	cmp	r4, r3
 800546a:	d1e8      	bne.n	800543e <__swsetup_r+0x22>
 800546c:	68ec      	ldr	r4, [r5, #12]
 800546e:	e7e6      	b.n	800543e <__swsetup_r+0x22>
 8005470:	075b      	lsls	r3, r3, #29
 8005472:	d513      	bpl.n	800549c <__swsetup_r+0x80>
 8005474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005476:	2900      	cmp	r1, #0
 8005478:	d008      	beq.n	800548c <__swsetup_r+0x70>
 800547a:	0023      	movs	r3, r4
 800547c:	3344      	adds	r3, #68	; 0x44
 800547e:	4299      	cmp	r1, r3
 8005480:	d002      	beq.n	8005488 <__swsetup_r+0x6c>
 8005482:	0030      	movs	r0, r6
 8005484:	f000 fa38 	bl	80058f8 <_free_r>
 8005488:	2300      	movs	r3, #0
 800548a:	6363      	str	r3, [r4, #52]	; 0x34
 800548c:	2224      	movs	r2, #36	; 0x24
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	4393      	bics	r3, r2
 8005492:	81a3      	strh	r3, [r4, #12]
 8005494:	2300      	movs	r3, #0
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	6923      	ldr	r3, [r4, #16]
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	2308      	movs	r3, #8
 800549e:	89a2      	ldrh	r2, [r4, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	81a3      	strh	r3, [r4, #12]
 80054a4:	6923      	ldr	r3, [r4, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <__swsetup_r+0xa6>
 80054aa:	21a0      	movs	r1, #160	; 0xa0
 80054ac:	2280      	movs	r2, #128	; 0x80
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	0089      	lsls	r1, r1, #2
 80054b2:	0092      	lsls	r2, r2, #2
 80054b4:	400b      	ands	r3, r1
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d003      	beq.n	80054c2 <__swsetup_r+0xa6>
 80054ba:	0021      	movs	r1, r4
 80054bc:	0030      	movs	r0, r6
 80054be:	f000 f9d7 	bl	8005870 <__smakebuf_r>
 80054c2:	2301      	movs	r3, #1
 80054c4:	89a2      	ldrh	r2, [r4, #12]
 80054c6:	4013      	ands	r3, r2
 80054c8:	d011      	beq.n	80054ee <__swsetup_r+0xd2>
 80054ca:	2300      	movs	r3, #0
 80054cc:	60a3      	str	r3, [r4, #8]
 80054ce:	6963      	ldr	r3, [r4, #20]
 80054d0:	425b      	negs	r3, r3
 80054d2:	61a3      	str	r3, [r4, #24]
 80054d4:	2000      	movs	r0, #0
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	4283      	cmp	r3, r0
 80054da:	d1be      	bne.n	800545a <__swsetup_r+0x3e>
 80054dc:	230c      	movs	r3, #12
 80054de:	5ee2      	ldrsh	r2, [r4, r3]
 80054e0:	0613      	lsls	r3, r2, #24
 80054e2:	d5ba      	bpl.n	800545a <__swsetup_r+0x3e>
 80054e4:	2340      	movs	r3, #64	; 0x40
 80054e6:	4313      	orrs	r3, r2
 80054e8:	81a3      	strh	r3, [r4, #12]
 80054ea:	3801      	subs	r0, #1
 80054ec:	e7b5      	b.n	800545a <__swsetup_r+0x3e>
 80054ee:	0792      	lsls	r2, r2, #30
 80054f0:	d400      	bmi.n	80054f4 <__swsetup_r+0xd8>
 80054f2:	6963      	ldr	r3, [r4, #20]
 80054f4:	60a3      	str	r3, [r4, #8]
 80054f6:	e7ed      	b.n	80054d4 <__swsetup_r+0xb8>
 80054f8:	2000000c 	.word	0x2000000c
 80054fc:	08005cbc 	.word	0x08005cbc
 8005500:	08005cdc 	.word	0x08005cdc
 8005504:	08005c9c 	.word	0x08005c9c

08005508 <__sflush_r>:
 8005508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800550a:	898a      	ldrh	r2, [r1, #12]
 800550c:	0005      	movs	r5, r0
 800550e:	000c      	movs	r4, r1
 8005510:	0713      	lsls	r3, r2, #28
 8005512:	d460      	bmi.n	80055d6 <__sflush_r+0xce>
 8005514:	684b      	ldr	r3, [r1, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	dc04      	bgt.n	8005524 <__sflush_r+0x1c>
 800551a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	dc01      	bgt.n	8005524 <__sflush_r+0x1c>
 8005520:	2000      	movs	r0, #0
 8005522:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005524:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005526:	2f00      	cmp	r7, #0
 8005528:	d0fa      	beq.n	8005520 <__sflush_r+0x18>
 800552a:	2300      	movs	r3, #0
 800552c:	682e      	ldr	r6, [r5, #0]
 800552e:	602b      	str	r3, [r5, #0]
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	015b      	lsls	r3, r3, #5
 8005534:	6a21      	ldr	r1, [r4, #32]
 8005536:	401a      	ands	r2, r3
 8005538:	d034      	beq.n	80055a4 <__sflush_r+0x9c>
 800553a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	075b      	lsls	r3, r3, #29
 8005540:	d506      	bpl.n	8005550 <__sflush_r+0x48>
 8005542:	6863      	ldr	r3, [r4, #4]
 8005544:	1ac0      	subs	r0, r0, r3
 8005546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <__sflush_r+0x48>
 800554c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800554e:	1ac0      	subs	r0, r0, r3
 8005550:	0002      	movs	r2, r0
 8005552:	6a21      	ldr	r1, [r4, #32]
 8005554:	2300      	movs	r3, #0
 8005556:	0028      	movs	r0, r5
 8005558:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800555a:	47b8      	blx	r7
 800555c:	89a1      	ldrh	r1, [r4, #12]
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	d106      	bne.n	8005570 <__sflush_r+0x68>
 8005562:	682b      	ldr	r3, [r5, #0]
 8005564:	2b1d      	cmp	r3, #29
 8005566:	d830      	bhi.n	80055ca <__sflush_r+0xc2>
 8005568:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <__sflush_r+0x110>)
 800556a:	40da      	lsrs	r2, r3
 800556c:	07d3      	lsls	r3, r2, #31
 800556e:	d52c      	bpl.n	80055ca <__sflush_r+0xc2>
 8005570:	2300      	movs	r3, #0
 8005572:	6063      	str	r3, [r4, #4]
 8005574:	6923      	ldr	r3, [r4, #16]
 8005576:	6023      	str	r3, [r4, #0]
 8005578:	04cb      	lsls	r3, r1, #19
 800557a:	d505      	bpl.n	8005588 <__sflush_r+0x80>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <__sflush_r+0x7e>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d100      	bne.n	8005588 <__sflush_r+0x80>
 8005586:	6560      	str	r0, [r4, #84]	; 0x54
 8005588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800558a:	602e      	str	r6, [r5, #0]
 800558c:	2900      	cmp	r1, #0
 800558e:	d0c7      	beq.n	8005520 <__sflush_r+0x18>
 8005590:	0023      	movs	r3, r4
 8005592:	3344      	adds	r3, #68	; 0x44
 8005594:	4299      	cmp	r1, r3
 8005596:	d002      	beq.n	800559e <__sflush_r+0x96>
 8005598:	0028      	movs	r0, r5
 800559a:	f000 f9ad 	bl	80058f8 <_free_r>
 800559e:	2000      	movs	r0, #0
 80055a0:	6360      	str	r0, [r4, #52]	; 0x34
 80055a2:	e7be      	b.n	8005522 <__sflush_r+0x1a>
 80055a4:	2301      	movs	r3, #1
 80055a6:	0028      	movs	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	d1c6      	bne.n	800553c <__sflush_r+0x34>
 80055ae:	682b      	ldr	r3, [r5, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0c3      	beq.n	800553c <__sflush_r+0x34>
 80055b4:	2b1d      	cmp	r3, #29
 80055b6:	d001      	beq.n	80055bc <__sflush_r+0xb4>
 80055b8:	2b16      	cmp	r3, #22
 80055ba:	d101      	bne.n	80055c0 <__sflush_r+0xb8>
 80055bc:	602e      	str	r6, [r5, #0]
 80055be:	e7af      	b.n	8005520 <__sflush_r+0x18>
 80055c0:	2340      	movs	r3, #64	; 0x40
 80055c2:	89a2      	ldrh	r2, [r4, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	e7ab      	b.n	8005522 <__sflush_r+0x1a>
 80055ca:	2340      	movs	r3, #64	; 0x40
 80055cc:	430b      	orrs	r3, r1
 80055ce:	2001      	movs	r0, #1
 80055d0:	81a3      	strh	r3, [r4, #12]
 80055d2:	4240      	negs	r0, r0
 80055d4:	e7a5      	b.n	8005522 <__sflush_r+0x1a>
 80055d6:	690f      	ldr	r7, [r1, #16]
 80055d8:	2f00      	cmp	r7, #0
 80055da:	d0a1      	beq.n	8005520 <__sflush_r+0x18>
 80055dc:	680b      	ldr	r3, [r1, #0]
 80055de:	600f      	str	r7, [r1, #0]
 80055e0:	1bdb      	subs	r3, r3, r7
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	2300      	movs	r3, #0
 80055e6:	0792      	lsls	r2, r2, #30
 80055e8:	d100      	bne.n	80055ec <__sflush_r+0xe4>
 80055ea:	694b      	ldr	r3, [r1, #20]
 80055ec:	60a3      	str	r3, [r4, #8]
 80055ee:	9b01      	ldr	r3, [sp, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	dc00      	bgt.n	80055f6 <__sflush_r+0xee>
 80055f4:	e794      	b.n	8005520 <__sflush_r+0x18>
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	003a      	movs	r2, r7
 80055fa:	6a21      	ldr	r1, [r4, #32]
 80055fc:	0028      	movs	r0, r5
 80055fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005600:	47b0      	blx	r6
 8005602:	2800      	cmp	r0, #0
 8005604:	dc03      	bgt.n	800560e <__sflush_r+0x106>
 8005606:	2340      	movs	r3, #64	; 0x40
 8005608:	89a2      	ldrh	r2, [r4, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	e7df      	b.n	80055ce <__sflush_r+0xc6>
 800560e:	9b01      	ldr	r3, [sp, #4]
 8005610:	183f      	adds	r7, r7, r0
 8005612:	1a1b      	subs	r3, r3, r0
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	e7ea      	b.n	80055ee <__sflush_r+0xe6>
 8005618:	20400001 	.word	0x20400001

0800561c <_fflush_r>:
 800561c:	690b      	ldr	r3, [r1, #16]
 800561e:	b570      	push	{r4, r5, r6, lr}
 8005620:	0005      	movs	r5, r0
 8005622:	000c      	movs	r4, r1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <_fflush_r+0x10>
 8005628:	2000      	movs	r0, #0
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	2800      	cmp	r0, #0
 800562e:	d004      	beq.n	800563a <_fflush_r+0x1e>
 8005630:	6983      	ldr	r3, [r0, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <_fflush_r+0x1e>
 8005636:	f000 f85f 	bl	80056f8 <__sinit>
 800563a:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <_fflush_r+0x4c>)
 800563c:	429c      	cmp	r4, r3
 800563e:	d109      	bne.n	8005654 <_fflush_r+0x38>
 8005640:	686c      	ldr	r4, [r5, #4]
 8005642:	220c      	movs	r2, #12
 8005644:	5ea3      	ldrsh	r3, [r4, r2]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0ee      	beq.n	8005628 <_fflush_r+0xc>
 800564a:	0021      	movs	r1, r4
 800564c:	0028      	movs	r0, r5
 800564e:	f7ff ff5b 	bl	8005508 <__sflush_r>
 8005652:	e7ea      	b.n	800562a <_fflush_r+0xe>
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <_fflush_r+0x50>)
 8005656:	429c      	cmp	r4, r3
 8005658:	d101      	bne.n	800565e <_fflush_r+0x42>
 800565a:	68ac      	ldr	r4, [r5, #8]
 800565c:	e7f1      	b.n	8005642 <_fflush_r+0x26>
 800565e:	4b04      	ldr	r3, [pc, #16]	; (8005670 <_fflush_r+0x54>)
 8005660:	429c      	cmp	r4, r3
 8005662:	d1ee      	bne.n	8005642 <_fflush_r+0x26>
 8005664:	68ec      	ldr	r4, [r5, #12]
 8005666:	e7ec      	b.n	8005642 <_fflush_r+0x26>
 8005668:	08005cbc 	.word	0x08005cbc
 800566c:	08005cdc 	.word	0x08005cdc
 8005670:	08005c9c 	.word	0x08005c9c

08005674 <std>:
 8005674:	2300      	movs	r3, #0
 8005676:	b510      	push	{r4, lr}
 8005678:	0004      	movs	r4, r0
 800567a:	6003      	str	r3, [r0, #0]
 800567c:	6043      	str	r3, [r0, #4]
 800567e:	6083      	str	r3, [r0, #8]
 8005680:	8181      	strh	r1, [r0, #12]
 8005682:	6643      	str	r3, [r0, #100]	; 0x64
 8005684:	81c2      	strh	r2, [r0, #14]
 8005686:	6103      	str	r3, [r0, #16]
 8005688:	6143      	str	r3, [r0, #20]
 800568a:	6183      	str	r3, [r0, #24]
 800568c:	0019      	movs	r1, r3
 800568e:	2208      	movs	r2, #8
 8005690:	305c      	adds	r0, #92	; 0x5c
 8005692:	f7ff fdfb 	bl	800528c <memset>
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <std+0x38>)
 8005698:	6224      	str	r4, [r4, #32]
 800569a:	6263      	str	r3, [r4, #36]	; 0x24
 800569c:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <std+0x3c>)
 800569e:	62a3      	str	r3, [r4, #40]	; 0x28
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <std+0x40>)
 80056a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <std+0x44>)
 80056a6:	6323      	str	r3, [r4, #48]	; 0x30
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	08005a6d 	.word	0x08005a6d
 80056b0:	08005a95 	.word	0x08005a95
 80056b4:	08005acd 	.word	0x08005acd
 80056b8:	08005af9 	.word	0x08005af9

080056bc <_cleanup_r>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	4902      	ldr	r1, [pc, #8]	; (80056c8 <_cleanup_r+0xc>)
 80056c0:	f000 f88c 	bl	80057dc <_fwalk_reent>
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	0800561d 	.word	0x0800561d

080056cc <__sfmoreglue>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	2568      	movs	r5, #104	; 0x68
 80056d0:	1e4a      	subs	r2, r1, #1
 80056d2:	4355      	muls	r5, r2
 80056d4:	000e      	movs	r6, r1
 80056d6:	0029      	movs	r1, r5
 80056d8:	3174      	adds	r1, #116	; 0x74
 80056da:	f000 f957 	bl	800598c <_malloc_r>
 80056de:	1e04      	subs	r4, r0, #0
 80056e0:	d008      	beq.n	80056f4 <__sfmoreglue+0x28>
 80056e2:	2100      	movs	r1, #0
 80056e4:	002a      	movs	r2, r5
 80056e6:	6001      	str	r1, [r0, #0]
 80056e8:	6046      	str	r6, [r0, #4]
 80056ea:	300c      	adds	r0, #12
 80056ec:	60a0      	str	r0, [r4, #8]
 80056ee:	3268      	adds	r2, #104	; 0x68
 80056f0:	f7ff fdcc 	bl	800528c <memset>
 80056f4:	0020      	movs	r0, r4
 80056f6:	bd70      	pop	{r4, r5, r6, pc}

080056f8 <__sinit>:
 80056f8:	6983      	ldr	r3, [r0, #24]
 80056fa:	b513      	push	{r0, r1, r4, lr}
 80056fc:	0004      	movs	r4, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d128      	bne.n	8005754 <__sinit+0x5c>
 8005702:	6483      	str	r3, [r0, #72]	; 0x48
 8005704:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005706:	6503      	str	r3, [r0, #80]	; 0x50
 8005708:	4b13      	ldr	r3, [pc, #76]	; (8005758 <__sinit+0x60>)
 800570a:	4a14      	ldr	r2, [pc, #80]	; (800575c <__sinit+0x64>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6282      	str	r2, [r0, #40]	; 0x28
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	4298      	cmp	r0, r3
 8005714:	d101      	bne.n	800571a <__sinit+0x22>
 8005716:	2301      	movs	r3, #1
 8005718:	6183      	str	r3, [r0, #24]
 800571a:	0020      	movs	r0, r4
 800571c:	f000 f820 	bl	8005760 <__sfp>
 8005720:	6060      	str	r0, [r4, #4]
 8005722:	0020      	movs	r0, r4
 8005724:	f000 f81c 	bl	8005760 <__sfp>
 8005728:	60a0      	str	r0, [r4, #8]
 800572a:	0020      	movs	r0, r4
 800572c:	f000 f818 	bl	8005760 <__sfp>
 8005730:	2200      	movs	r2, #0
 8005732:	60e0      	str	r0, [r4, #12]
 8005734:	2104      	movs	r1, #4
 8005736:	6860      	ldr	r0, [r4, #4]
 8005738:	f7ff ff9c 	bl	8005674 <std>
 800573c:	2201      	movs	r2, #1
 800573e:	2109      	movs	r1, #9
 8005740:	68a0      	ldr	r0, [r4, #8]
 8005742:	f7ff ff97 	bl	8005674 <std>
 8005746:	2202      	movs	r2, #2
 8005748:	2112      	movs	r1, #18
 800574a:	68e0      	ldr	r0, [r4, #12]
 800574c:	f7ff ff92 	bl	8005674 <std>
 8005750:	2301      	movs	r3, #1
 8005752:	61a3      	str	r3, [r4, #24]
 8005754:	bd13      	pop	{r0, r1, r4, pc}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	08005c98 	.word	0x08005c98
 800575c:	080056bd 	.word	0x080056bd

08005760 <__sfp>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <__sfp+0x74>)
 8005764:	0007      	movs	r7, r0
 8005766:	681e      	ldr	r6, [r3, #0]
 8005768:	69b3      	ldr	r3, [r6, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <__sfp+0x14>
 800576e:	0030      	movs	r0, r6
 8005770:	f7ff ffc2 	bl	80056f8 <__sinit>
 8005774:	3648      	adds	r6, #72	; 0x48
 8005776:	68b4      	ldr	r4, [r6, #8]
 8005778:	6873      	ldr	r3, [r6, #4]
 800577a:	3b01      	subs	r3, #1
 800577c:	d504      	bpl.n	8005788 <__sfp+0x28>
 800577e:	6833      	ldr	r3, [r6, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <__sfp+0x34>
 8005784:	6836      	ldr	r6, [r6, #0]
 8005786:	e7f6      	b.n	8005776 <__sfp+0x16>
 8005788:	220c      	movs	r2, #12
 800578a:	5ea5      	ldrsh	r5, [r4, r2]
 800578c:	2d00      	cmp	r5, #0
 800578e:	d00d      	beq.n	80057ac <__sfp+0x4c>
 8005790:	3468      	adds	r4, #104	; 0x68
 8005792:	e7f2      	b.n	800577a <__sfp+0x1a>
 8005794:	2104      	movs	r1, #4
 8005796:	0038      	movs	r0, r7
 8005798:	f7ff ff98 	bl	80056cc <__sfmoreglue>
 800579c:	6030      	str	r0, [r6, #0]
 800579e:	2800      	cmp	r0, #0
 80057a0:	d1f0      	bne.n	8005784 <__sfp+0x24>
 80057a2:	230c      	movs	r3, #12
 80057a4:	0004      	movs	r4, r0
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	0020      	movs	r0, r4
 80057aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ac:	0020      	movs	r0, r4
 80057ae:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <__sfp+0x78>)
 80057b0:	6665      	str	r5, [r4, #100]	; 0x64
 80057b2:	6025      	str	r5, [r4, #0]
 80057b4:	6065      	str	r5, [r4, #4]
 80057b6:	60a5      	str	r5, [r4, #8]
 80057b8:	60e3      	str	r3, [r4, #12]
 80057ba:	6125      	str	r5, [r4, #16]
 80057bc:	6165      	str	r5, [r4, #20]
 80057be:	61a5      	str	r5, [r4, #24]
 80057c0:	2208      	movs	r2, #8
 80057c2:	0029      	movs	r1, r5
 80057c4:	305c      	adds	r0, #92	; 0x5c
 80057c6:	f7ff fd61 	bl	800528c <memset>
 80057ca:	6365      	str	r5, [r4, #52]	; 0x34
 80057cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80057ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80057d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80057d2:	e7e9      	b.n	80057a8 <__sfp+0x48>
 80057d4:	08005c98 	.word	0x08005c98
 80057d8:	ffff0001 	.word	0xffff0001

080057dc <_fwalk_reent>:
 80057dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057de:	0004      	movs	r4, r0
 80057e0:	0007      	movs	r7, r0
 80057e2:	2600      	movs	r6, #0
 80057e4:	9101      	str	r1, [sp, #4]
 80057e6:	3448      	adds	r4, #72	; 0x48
 80057e8:	2c00      	cmp	r4, #0
 80057ea:	d101      	bne.n	80057f0 <_fwalk_reent+0x14>
 80057ec:	0030      	movs	r0, r6
 80057ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057f0:	6863      	ldr	r3, [r4, #4]
 80057f2:	68a5      	ldr	r5, [r4, #8]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	9b00      	ldr	r3, [sp, #0]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	d501      	bpl.n	8005802 <_fwalk_reent+0x26>
 80057fe:	6824      	ldr	r4, [r4, #0]
 8005800:	e7f2      	b.n	80057e8 <_fwalk_reent+0xc>
 8005802:	89ab      	ldrh	r3, [r5, #12]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d908      	bls.n	800581a <_fwalk_reent+0x3e>
 8005808:	220e      	movs	r2, #14
 800580a:	5eab      	ldrsh	r3, [r5, r2]
 800580c:	3301      	adds	r3, #1
 800580e:	d004      	beq.n	800581a <_fwalk_reent+0x3e>
 8005810:	0029      	movs	r1, r5
 8005812:	0038      	movs	r0, r7
 8005814:	9b01      	ldr	r3, [sp, #4]
 8005816:	4798      	blx	r3
 8005818:	4306      	orrs	r6, r0
 800581a:	3568      	adds	r5, #104	; 0x68
 800581c:	e7eb      	b.n	80057f6 <_fwalk_reent+0x1a>
	...

08005820 <__swhatbuf_r>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	000e      	movs	r6, r1
 8005824:	001d      	movs	r5, r3
 8005826:	230e      	movs	r3, #14
 8005828:	5ec9      	ldrsh	r1, [r1, r3]
 800582a:	b096      	sub	sp, #88	; 0x58
 800582c:	0014      	movs	r4, r2
 800582e:	2900      	cmp	r1, #0
 8005830:	da07      	bge.n	8005842 <__swhatbuf_r+0x22>
 8005832:	2300      	movs	r3, #0
 8005834:	602b      	str	r3, [r5, #0]
 8005836:	89b3      	ldrh	r3, [r6, #12]
 8005838:	061b      	lsls	r3, r3, #24
 800583a:	d411      	bmi.n	8005860 <__swhatbuf_r+0x40>
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	e00f      	b.n	8005862 <__swhatbuf_r+0x42>
 8005842:	466a      	mov	r2, sp
 8005844:	f000 f984 	bl	8005b50 <_fstat_r>
 8005848:	2800      	cmp	r0, #0
 800584a:	dbf2      	blt.n	8005832 <__swhatbuf_r+0x12>
 800584c:	22f0      	movs	r2, #240	; 0xf0
 800584e:	9b01      	ldr	r3, [sp, #4]
 8005850:	0212      	lsls	r2, r2, #8
 8005852:	4013      	ands	r3, r2
 8005854:	4a05      	ldr	r2, [pc, #20]	; (800586c <__swhatbuf_r+0x4c>)
 8005856:	189b      	adds	r3, r3, r2
 8005858:	425a      	negs	r2, r3
 800585a:	4153      	adcs	r3, r2
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	e7ed      	b.n	800583c <__swhatbuf_r+0x1c>
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	2000      	movs	r0, #0
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	b016      	add	sp, #88	; 0x58
 8005868:	bd70      	pop	{r4, r5, r6, pc}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	ffffe000 	.word	0xffffe000

08005870 <__smakebuf_r>:
 8005870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005872:	2602      	movs	r6, #2
 8005874:	898b      	ldrh	r3, [r1, #12]
 8005876:	0005      	movs	r5, r0
 8005878:	000c      	movs	r4, r1
 800587a:	4233      	tst	r3, r6
 800587c:	d006      	beq.n	800588c <__smakebuf_r+0x1c>
 800587e:	0023      	movs	r3, r4
 8005880:	3347      	adds	r3, #71	; 0x47
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	6123      	str	r3, [r4, #16]
 8005886:	2301      	movs	r3, #1
 8005888:	6163      	str	r3, [r4, #20]
 800588a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800588c:	ab01      	add	r3, sp, #4
 800588e:	466a      	mov	r2, sp
 8005890:	f7ff ffc6 	bl	8005820 <__swhatbuf_r>
 8005894:	9900      	ldr	r1, [sp, #0]
 8005896:	0007      	movs	r7, r0
 8005898:	0028      	movs	r0, r5
 800589a:	f000 f877 	bl	800598c <_malloc_r>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d108      	bne.n	80058b4 <__smakebuf_r+0x44>
 80058a2:	220c      	movs	r2, #12
 80058a4:	5ea3      	ldrsh	r3, [r4, r2]
 80058a6:	059a      	lsls	r2, r3, #22
 80058a8:	d4ef      	bmi.n	800588a <__smakebuf_r+0x1a>
 80058aa:	2203      	movs	r2, #3
 80058ac:	4393      	bics	r3, r2
 80058ae:	431e      	orrs	r6, r3
 80058b0:	81a6      	strh	r6, [r4, #12]
 80058b2:	e7e4      	b.n	800587e <__smakebuf_r+0xe>
 80058b4:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <__smakebuf_r+0x84>)
 80058b6:	62ab      	str	r3, [r5, #40]	; 0x28
 80058b8:	2380      	movs	r3, #128	; 0x80
 80058ba:	89a2      	ldrh	r2, [r4, #12]
 80058bc:	6020      	str	r0, [r4, #0]
 80058be:	4313      	orrs	r3, r2
 80058c0:	81a3      	strh	r3, [r4, #12]
 80058c2:	9b00      	ldr	r3, [sp, #0]
 80058c4:	6120      	str	r0, [r4, #16]
 80058c6:	6163      	str	r3, [r4, #20]
 80058c8:	9b01      	ldr	r3, [sp, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00d      	beq.n	80058ea <__smakebuf_r+0x7a>
 80058ce:	230e      	movs	r3, #14
 80058d0:	5ee1      	ldrsh	r1, [r4, r3]
 80058d2:	0028      	movs	r0, r5
 80058d4:	f000 f94e 	bl	8005b74 <_isatty_r>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d006      	beq.n	80058ea <__smakebuf_r+0x7a>
 80058dc:	2203      	movs	r2, #3
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	4393      	bics	r3, r2
 80058e2:	001a      	movs	r2, r3
 80058e4:	2301      	movs	r3, #1
 80058e6:	4313      	orrs	r3, r2
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	89a0      	ldrh	r0, [r4, #12]
 80058ec:	4338      	orrs	r0, r7
 80058ee:	81a0      	strh	r0, [r4, #12]
 80058f0:	e7cb      	b.n	800588a <__smakebuf_r+0x1a>
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	080056bd 	.word	0x080056bd

080058f8 <_free_r>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	0005      	movs	r5, r0
 80058fc:	2900      	cmp	r1, #0
 80058fe:	d010      	beq.n	8005922 <_free_r+0x2a>
 8005900:	1f0c      	subs	r4, r1, #4
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	da00      	bge.n	800590a <_free_r+0x12>
 8005908:	18e4      	adds	r4, r4, r3
 800590a:	0028      	movs	r0, r5
 800590c:	f000 f958 	bl	8005bc0 <__malloc_lock>
 8005910:	4a1d      	ldr	r2, [pc, #116]	; (8005988 <_free_r+0x90>)
 8005912:	6813      	ldr	r3, [r2, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <_free_r+0x2c>
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	6014      	str	r4, [r2, #0]
 800591c:	0028      	movs	r0, r5
 800591e:	f000 f950 	bl	8005bc2 <__malloc_unlock>
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	42a3      	cmp	r3, r4
 8005926:	d909      	bls.n	800593c <_free_r+0x44>
 8005928:	6821      	ldr	r1, [r4, #0]
 800592a:	1860      	adds	r0, r4, r1
 800592c:	4283      	cmp	r3, r0
 800592e:	d1f3      	bne.n	8005918 <_free_r+0x20>
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	1841      	adds	r1, r0, r1
 8005936:	6021      	str	r1, [r4, #0]
 8005938:	e7ee      	b.n	8005918 <_free_r+0x20>
 800593a:	0013      	movs	r3, r2
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	2a00      	cmp	r2, #0
 8005940:	d001      	beq.n	8005946 <_free_r+0x4e>
 8005942:	42a2      	cmp	r2, r4
 8005944:	d9f9      	bls.n	800593a <_free_r+0x42>
 8005946:	6819      	ldr	r1, [r3, #0]
 8005948:	1858      	adds	r0, r3, r1
 800594a:	42a0      	cmp	r0, r4
 800594c:	d10b      	bne.n	8005966 <_free_r+0x6e>
 800594e:	6820      	ldr	r0, [r4, #0]
 8005950:	1809      	adds	r1, r1, r0
 8005952:	1858      	adds	r0, r3, r1
 8005954:	6019      	str	r1, [r3, #0]
 8005956:	4282      	cmp	r2, r0
 8005958:	d1e0      	bne.n	800591c <_free_r+0x24>
 800595a:	6810      	ldr	r0, [r2, #0]
 800595c:	6852      	ldr	r2, [r2, #4]
 800595e:	1841      	adds	r1, r0, r1
 8005960:	6019      	str	r1, [r3, #0]
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	e7da      	b.n	800591c <_free_r+0x24>
 8005966:	42a0      	cmp	r0, r4
 8005968:	d902      	bls.n	8005970 <_free_r+0x78>
 800596a:	230c      	movs	r3, #12
 800596c:	602b      	str	r3, [r5, #0]
 800596e:	e7d5      	b.n	800591c <_free_r+0x24>
 8005970:	6821      	ldr	r1, [r4, #0]
 8005972:	1860      	adds	r0, r4, r1
 8005974:	4282      	cmp	r2, r0
 8005976:	d103      	bne.n	8005980 <_free_r+0x88>
 8005978:	6810      	ldr	r0, [r2, #0]
 800597a:	6852      	ldr	r2, [r2, #4]
 800597c:	1841      	adds	r1, r0, r1
 800597e:	6021      	str	r1, [r4, #0]
 8005980:	6062      	str	r2, [r4, #4]
 8005982:	605c      	str	r4, [r3, #4]
 8005984:	e7ca      	b.n	800591c <_free_r+0x24>
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	20000090 	.word	0x20000090

0800598c <_malloc_r>:
 800598c:	2303      	movs	r3, #3
 800598e:	b570      	push	{r4, r5, r6, lr}
 8005990:	1ccd      	adds	r5, r1, #3
 8005992:	439d      	bics	r5, r3
 8005994:	3508      	adds	r5, #8
 8005996:	0006      	movs	r6, r0
 8005998:	2d0c      	cmp	r5, #12
 800599a:	d21e      	bcs.n	80059da <_malloc_r+0x4e>
 800599c:	250c      	movs	r5, #12
 800599e:	42a9      	cmp	r1, r5
 80059a0:	d81d      	bhi.n	80059de <_malloc_r+0x52>
 80059a2:	0030      	movs	r0, r6
 80059a4:	f000 f90c 	bl	8005bc0 <__malloc_lock>
 80059a8:	4a25      	ldr	r2, [pc, #148]	; (8005a40 <_malloc_r+0xb4>)
 80059aa:	6814      	ldr	r4, [r2, #0]
 80059ac:	0021      	movs	r1, r4
 80059ae:	2900      	cmp	r1, #0
 80059b0:	d119      	bne.n	80059e6 <_malloc_r+0x5a>
 80059b2:	4c24      	ldr	r4, [pc, #144]	; (8005a44 <_malloc_r+0xb8>)
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <_malloc_r+0x36>
 80059ba:	0030      	movs	r0, r6
 80059bc:	f000 f844 	bl	8005a48 <_sbrk_r>
 80059c0:	6020      	str	r0, [r4, #0]
 80059c2:	0029      	movs	r1, r5
 80059c4:	0030      	movs	r0, r6
 80059c6:	f000 f83f 	bl	8005a48 <_sbrk_r>
 80059ca:	1c43      	adds	r3, r0, #1
 80059cc:	d12b      	bne.n	8005a26 <_malloc_r+0x9a>
 80059ce:	230c      	movs	r3, #12
 80059d0:	0030      	movs	r0, r6
 80059d2:	6033      	str	r3, [r6, #0]
 80059d4:	f000 f8f5 	bl	8005bc2 <__malloc_unlock>
 80059d8:	e003      	b.n	80059e2 <_malloc_r+0x56>
 80059da:	2d00      	cmp	r5, #0
 80059dc:	dadf      	bge.n	800599e <_malloc_r+0x12>
 80059de:	230c      	movs	r3, #12
 80059e0:	6033      	str	r3, [r6, #0]
 80059e2:	2000      	movs	r0, #0
 80059e4:	bd70      	pop	{r4, r5, r6, pc}
 80059e6:	680b      	ldr	r3, [r1, #0]
 80059e8:	1b5b      	subs	r3, r3, r5
 80059ea:	d419      	bmi.n	8005a20 <_malloc_r+0x94>
 80059ec:	2b0b      	cmp	r3, #11
 80059ee:	d903      	bls.n	80059f8 <_malloc_r+0x6c>
 80059f0:	600b      	str	r3, [r1, #0]
 80059f2:	18cc      	adds	r4, r1, r3
 80059f4:	6025      	str	r5, [r4, #0]
 80059f6:	e003      	b.n	8005a00 <_malloc_r+0x74>
 80059f8:	684b      	ldr	r3, [r1, #4]
 80059fa:	428c      	cmp	r4, r1
 80059fc:	d10d      	bne.n	8005a1a <_malloc_r+0x8e>
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	0030      	movs	r0, r6
 8005a02:	f000 f8de 	bl	8005bc2 <__malloc_unlock>
 8005a06:	0020      	movs	r0, r4
 8005a08:	2207      	movs	r2, #7
 8005a0a:	300b      	adds	r0, #11
 8005a0c:	1d23      	adds	r3, r4, #4
 8005a0e:	4390      	bics	r0, r2
 8005a10:	1ac3      	subs	r3, r0, r3
 8005a12:	d0e7      	beq.n	80059e4 <_malloc_r+0x58>
 8005a14:	425a      	negs	r2, r3
 8005a16:	50e2      	str	r2, [r4, r3]
 8005a18:	e7e4      	b.n	80059e4 <_malloc_r+0x58>
 8005a1a:	6063      	str	r3, [r4, #4]
 8005a1c:	000c      	movs	r4, r1
 8005a1e:	e7ef      	b.n	8005a00 <_malloc_r+0x74>
 8005a20:	000c      	movs	r4, r1
 8005a22:	6849      	ldr	r1, [r1, #4]
 8005a24:	e7c3      	b.n	80059ae <_malloc_r+0x22>
 8005a26:	2303      	movs	r3, #3
 8005a28:	1cc4      	adds	r4, r0, #3
 8005a2a:	439c      	bics	r4, r3
 8005a2c:	42a0      	cmp	r0, r4
 8005a2e:	d0e1      	beq.n	80059f4 <_malloc_r+0x68>
 8005a30:	1a21      	subs	r1, r4, r0
 8005a32:	0030      	movs	r0, r6
 8005a34:	f000 f808 	bl	8005a48 <_sbrk_r>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d1db      	bne.n	80059f4 <_malloc_r+0x68>
 8005a3c:	e7c7      	b.n	80059ce <_malloc_r+0x42>
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	20000090 	.word	0x20000090
 8005a44:	20000094 	.word	0x20000094

08005a48 <_sbrk_r>:
 8005a48:	2300      	movs	r3, #0
 8005a4a:	b570      	push	{r4, r5, r6, lr}
 8005a4c:	4c06      	ldr	r4, [pc, #24]	; (8005a68 <_sbrk_r+0x20>)
 8005a4e:	0005      	movs	r5, r0
 8005a50:	0008      	movs	r0, r1
 8005a52:	6023      	str	r3, [r4, #0]
 8005a54:	f7fb fc10 	bl	8001278 <_sbrk>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d103      	bne.n	8005a64 <_sbrk_r+0x1c>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d000      	beq.n	8005a64 <_sbrk_r+0x1c>
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	bd70      	pop	{r4, r5, r6, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	200003b4 	.word	0x200003b4

08005a6c <__sread>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	000c      	movs	r4, r1
 8005a70:	250e      	movs	r5, #14
 8005a72:	5f49      	ldrsh	r1, [r1, r5]
 8005a74:	f000 f8a6 	bl	8005bc4 <_read_r>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	db03      	blt.n	8005a84 <__sread+0x18>
 8005a7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a7e:	181b      	adds	r3, r3, r0
 8005a80:	6563      	str	r3, [r4, #84]	; 0x54
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	4a02      	ldr	r2, [pc, #8]	; (8005a90 <__sread+0x24>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	81a3      	strh	r3, [r4, #12]
 8005a8c:	e7f9      	b.n	8005a82 <__sread+0x16>
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	ffffefff 	.word	0xffffefff

08005a94 <__swrite>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	001f      	movs	r7, r3
 8005a98:	898b      	ldrh	r3, [r1, #12]
 8005a9a:	0005      	movs	r5, r0
 8005a9c:	000c      	movs	r4, r1
 8005a9e:	0016      	movs	r6, r2
 8005aa0:	05db      	lsls	r3, r3, #23
 8005aa2:	d505      	bpl.n	8005ab0 <__swrite+0x1c>
 8005aa4:	230e      	movs	r3, #14
 8005aa6:	5ec9      	ldrsh	r1, [r1, r3]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2302      	movs	r3, #2
 8005aac:	f000 f874 	bl	8005b98 <_lseek_r>
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	4a05      	ldr	r2, [pc, #20]	; (8005ac8 <__swrite+0x34>)
 8005ab4:	0028      	movs	r0, r5
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	81a3      	strh	r3, [r4, #12]
 8005aba:	0032      	movs	r2, r6
 8005abc:	230e      	movs	r3, #14
 8005abe:	5ee1      	ldrsh	r1, [r4, r3]
 8005ac0:	003b      	movs	r3, r7
 8005ac2:	f000 f81f 	bl	8005b04 <_write_r>
 8005ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac8:	ffffefff 	.word	0xffffefff

08005acc <__sseek>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	000c      	movs	r4, r1
 8005ad0:	250e      	movs	r5, #14
 8005ad2:	5f49      	ldrsh	r1, [r1, r5]
 8005ad4:	f000 f860 	bl	8005b98 <_lseek_r>
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	1c42      	adds	r2, r0, #1
 8005adc:	d103      	bne.n	8005ae6 <__sseek+0x1a>
 8005ade:	4a05      	ldr	r2, [pc, #20]	; (8005af4 <__sseek+0x28>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	bd70      	pop	{r4, r5, r6, pc}
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	0152      	lsls	r2, r2, #5
 8005aea:	4313      	orrs	r3, r2
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	6560      	str	r0, [r4, #84]	; 0x54
 8005af0:	e7f8      	b.n	8005ae4 <__sseek+0x18>
 8005af2:	46c0      	nop			; (mov r8, r8)
 8005af4:	ffffefff 	.word	0xffffefff

08005af8 <__sclose>:
 8005af8:	b510      	push	{r4, lr}
 8005afa:	230e      	movs	r3, #14
 8005afc:	5ec9      	ldrsh	r1, [r1, r3]
 8005afe:	f000 f815 	bl	8005b2c <_close_r>
 8005b02:	bd10      	pop	{r4, pc}

08005b04 <_write_r>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	0005      	movs	r5, r0
 8005b08:	0008      	movs	r0, r1
 8005b0a:	0011      	movs	r1, r2
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4c06      	ldr	r4, [pc, #24]	; (8005b28 <_write_r+0x24>)
 8005b10:	6022      	str	r2, [r4, #0]
 8005b12:	001a      	movs	r2, r3
 8005b14:	f7fb fb67 	bl	80011e6 <_write>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d103      	bne.n	8005b24 <_write_r+0x20>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d000      	beq.n	8005b24 <_write_r+0x20>
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	200003b4 	.word	0x200003b4

08005b2c <_close_r>:
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	b570      	push	{r4, r5, r6, lr}
 8005b30:	4c06      	ldr	r4, [pc, #24]	; (8005b4c <_close_r+0x20>)
 8005b32:	0005      	movs	r5, r0
 8005b34:	0008      	movs	r0, r1
 8005b36:	6023      	str	r3, [r4, #0]
 8005b38:	f7fb fb71 	bl	800121e <_close>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d103      	bne.n	8005b48 <_close_r+0x1c>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d000      	beq.n	8005b48 <_close_r+0x1c>
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	bd70      	pop	{r4, r5, r6, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	200003b4 	.word	0x200003b4

08005b50 <_fstat_r>:
 8005b50:	2300      	movs	r3, #0
 8005b52:	b570      	push	{r4, r5, r6, lr}
 8005b54:	4c06      	ldr	r4, [pc, #24]	; (8005b70 <_fstat_r+0x20>)
 8005b56:	0005      	movs	r5, r0
 8005b58:	0008      	movs	r0, r1
 8005b5a:	0011      	movs	r1, r2
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	f7fb fb68 	bl	8001232 <_fstat>
 8005b62:	1c43      	adds	r3, r0, #1
 8005b64:	d103      	bne.n	8005b6e <_fstat_r+0x1e>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d000      	beq.n	8005b6e <_fstat_r+0x1e>
 8005b6c:	602b      	str	r3, [r5, #0]
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	200003b4 	.word	0x200003b4

08005b74 <_isatty_r>:
 8005b74:	2300      	movs	r3, #0
 8005b76:	b570      	push	{r4, r5, r6, lr}
 8005b78:	4c06      	ldr	r4, [pc, #24]	; (8005b94 <_isatty_r+0x20>)
 8005b7a:	0005      	movs	r5, r0
 8005b7c:	0008      	movs	r0, r1
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	f7fb fb65 	bl	800124e <_isatty>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d103      	bne.n	8005b90 <_isatty_r+0x1c>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d000      	beq.n	8005b90 <_isatty_r+0x1c>
 8005b8e:	602b      	str	r3, [r5, #0]
 8005b90:	bd70      	pop	{r4, r5, r6, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	200003b4 	.word	0x200003b4

08005b98 <_lseek_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	0005      	movs	r5, r0
 8005b9c:	0008      	movs	r0, r1
 8005b9e:	0011      	movs	r1, r2
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	4c06      	ldr	r4, [pc, #24]	; (8005bbc <_lseek_r+0x24>)
 8005ba4:	6022      	str	r2, [r4, #0]
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	f7fb fb5a 	bl	8001260 <_lseek>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d103      	bne.n	8005bb8 <_lseek_r+0x20>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d000      	beq.n	8005bb8 <_lseek_r+0x20>
 8005bb6:	602b      	str	r3, [r5, #0]
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	200003b4 	.word	0x200003b4

08005bc0 <__malloc_lock>:
 8005bc0:	4770      	bx	lr

08005bc2 <__malloc_unlock>:
 8005bc2:	4770      	bx	lr

08005bc4 <_read_r>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	0005      	movs	r5, r0
 8005bc8:	0008      	movs	r0, r1
 8005bca:	0011      	movs	r1, r2
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4c06      	ldr	r4, [pc, #24]	; (8005be8 <_read_r+0x24>)
 8005bd0:	6022      	str	r2, [r4, #0]
 8005bd2:	001a      	movs	r2, r3
 8005bd4:	f7fb faea 	bl	80011ac <_read>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d103      	bne.n	8005be4 <_read_r+0x20>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d000      	beq.n	8005be4 <_read_r+0x20>
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	bd70      	pop	{r4, r5, r6, pc}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	200003b4 	.word	0x200003b4

08005bec <_init>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf2:	bc08      	pop	{r3}
 8005bf4:	469e      	mov	lr, r3
 8005bf6:	4770      	bx	lr

08005bf8 <_fini>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

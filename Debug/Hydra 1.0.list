
Hydra 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008320  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008554  08008554  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800855c  0800855c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800855c  0800855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008560  08008560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000070  080085d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  080085d4  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001421d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b95  00000000  00000000  000342b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  00036e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff0  00000000  00000000  00037fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017da5  00000000  00000000  00038f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe36  00000000  00000000  00050d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a3d1  00000000  00000000  00060b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000faf44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  000fafc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080083c4 	.word	0x080083c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080083c4 	.word	0x080083c4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 f9c1 	bl	8000780 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 f943 	bl	8000694 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 f9b3 	bl	8000780 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f9a9 	bl	8000780 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f951 	bl	80006e4 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f947 	bl	80006e4 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	1c08      	adds	r0, r1, #0
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	; (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	; (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f83c 	bl	8000510 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_f2uiz>:
 80004a4:	219e      	movs	r1, #158	; 0x9e
 80004a6:	b510      	push	{r4, lr}
 80004a8:	05c9      	lsls	r1, r1, #23
 80004aa:	1c04      	adds	r4, r0, #0
 80004ac:	f7ff ffd0 	bl	8000450 <__aeabi_fcmpge>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d103      	bne.n	80004bc <__aeabi_f2uiz+0x18>
 80004b4:	1c20      	adds	r0, r4, #0
 80004b6:	f000 fca9 	bl	8000e0c <__aeabi_f2iz>
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	219e      	movs	r1, #158	; 0x9e
 80004be:	1c20      	adds	r0, r4, #0
 80004c0:	05c9      	lsls	r1, r1, #23
 80004c2:	f000 fadf 	bl	8000a84 <__aeabi_fsub>
 80004c6:	f000 fca1 	bl	8000e0c <__aeabi_f2iz>
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	469c      	mov	ip, r3
 80004d0:	4460      	add	r0, ip
 80004d2:	e7f2      	b.n	80004ba <__aeabi_f2uiz+0x16>

080004d4 <__aeabi_d2uiz>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2200      	movs	r2, #0
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <__aeabi_d2uiz+0x38>)
 80004da:	0004      	movs	r4, r0
 80004dc:	000d      	movs	r5, r1
 80004de:	f001 fb6b 	bl	8001bb8 <__aeabi_dcmpge>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d104      	bne.n	80004f0 <__aeabi_d2uiz+0x1c>
 80004e6:	0020      	movs	r0, r4
 80004e8:	0029      	movs	r1, r5
 80004ea:	f001 faa9 	bl	8001a40 <__aeabi_d2iz>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <__aeabi_d2uiz+0x38>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0020      	movs	r0, r4
 80004f6:	0029      	movs	r1, r5
 80004f8:	f000 ff5a 	bl	80013b0 <__aeabi_dsub>
 80004fc:	f001 faa0 	bl	8001a40 <__aeabi_d2iz>
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	469c      	mov	ip, r3
 8000506:	4460      	add	r0, ip
 8000508:	e7f1      	b.n	80004ee <__aeabi_d2uiz+0x1a>
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	41e00000 	.word	0x41e00000

08000510 <__udivmoddi4>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	464f      	mov	r7, r9
 8000514:	4646      	mov	r6, r8
 8000516:	46d6      	mov	lr, sl
 8000518:	b5c0      	push	{r6, r7, lr}
 800051a:	0004      	movs	r4, r0
 800051c:	b082      	sub	sp, #8
 800051e:	000d      	movs	r5, r1
 8000520:	4691      	mov	r9, r2
 8000522:	4698      	mov	r8, r3
 8000524:	428b      	cmp	r3, r1
 8000526:	d82f      	bhi.n	8000588 <__udivmoddi4+0x78>
 8000528:	d02c      	beq.n	8000584 <__udivmoddi4+0x74>
 800052a:	4641      	mov	r1, r8
 800052c:	4648      	mov	r0, r9
 800052e:	f001 fb6b 	bl	8001c08 <__clzdi2>
 8000532:	0029      	movs	r1, r5
 8000534:	0006      	movs	r6, r0
 8000536:	0020      	movs	r0, r4
 8000538:	f001 fb66 	bl	8001c08 <__clzdi2>
 800053c:	1a33      	subs	r3, r6, r0
 800053e:	469c      	mov	ip, r3
 8000540:	3b20      	subs	r3, #32
 8000542:	469a      	mov	sl, r3
 8000544:	d500      	bpl.n	8000548 <__udivmoddi4+0x38>
 8000546:	e076      	b.n	8000636 <__udivmoddi4+0x126>
 8000548:	464b      	mov	r3, r9
 800054a:	4652      	mov	r2, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001f      	movs	r7, r3
 8000550:	464b      	mov	r3, r9
 8000552:	4662      	mov	r2, ip
 8000554:	4093      	lsls	r3, r2
 8000556:	001e      	movs	r6, r3
 8000558:	42af      	cmp	r7, r5
 800055a:	d828      	bhi.n	80005ae <__udivmoddi4+0x9e>
 800055c:	d025      	beq.n	80005aa <__udivmoddi4+0x9a>
 800055e:	4653      	mov	r3, sl
 8000560:	1ba4      	subs	r4, r4, r6
 8000562:	41bd      	sbcs	r5, r7
 8000564:	2b00      	cmp	r3, #0
 8000566:	da00      	bge.n	800056a <__udivmoddi4+0x5a>
 8000568:	e07b      	b.n	8000662 <__udivmoddi4+0x152>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	4652      	mov	r2, sl
 8000576:	4093      	lsls	r3, r2
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	4662      	mov	r2, ip
 800057e:	4093      	lsls	r3, r2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	e018      	b.n	80005b6 <__udivmoddi4+0xa6>
 8000584:	4282      	cmp	r2, r0
 8000586:	d9d0      	bls.n	800052a <__udivmoddi4+0x1a>
 8000588:	2200      	movs	r2, #0
 800058a:	2300      	movs	r3, #0
 800058c:	9200      	str	r2, [sp, #0]
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <__udivmoddi4+0x8a>
 8000596:	601c      	str	r4, [r3, #0]
 8000598:	605d      	str	r5, [r3, #4]
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	b002      	add	sp, #8
 80005a0:	bc1c      	pop	{r2, r3, r4}
 80005a2:	4690      	mov	r8, r2
 80005a4:	4699      	mov	r9, r3
 80005a6:	46a2      	mov	sl, r4
 80005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d9d7      	bls.n	800055e <__udivmoddi4+0x4e>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	4663      	mov	r3, ip
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e9      	beq.n	8000590 <__udivmoddi4+0x80>
 80005bc:	07fb      	lsls	r3, r7, #31
 80005be:	4698      	mov	r8, r3
 80005c0:	4641      	mov	r1, r8
 80005c2:	0872      	lsrs	r2, r6, #1
 80005c4:	430a      	orrs	r2, r1
 80005c6:	087b      	lsrs	r3, r7, #1
 80005c8:	4666      	mov	r6, ip
 80005ca:	e00e      	b.n	80005ea <__udivmoddi4+0xda>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d101      	bne.n	80005d4 <__udivmoddi4+0xc4>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	d80c      	bhi.n	80005ee <__udivmoddi4+0xde>
 80005d4:	1aa4      	subs	r4, r4, r2
 80005d6:	419d      	sbcs	r5, r3
 80005d8:	2001      	movs	r0, #1
 80005da:	1924      	adds	r4, r4, r4
 80005dc:	416d      	adcs	r5, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1824      	adds	r4, r4, r0
 80005e4:	414d      	adcs	r5, r1
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d006      	beq.n	80005f8 <__udivmoddi4+0xe8>
 80005ea:	42ab      	cmp	r3, r5
 80005ec:	d9ee      	bls.n	80005cc <__udivmoddi4+0xbc>
 80005ee:	3e01      	subs	r6, #1
 80005f0:	1924      	adds	r4, r4, r4
 80005f2:	416d      	adcs	r5, r5
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d1f8      	bne.n	80005ea <__udivmoddi4+0xda>
 80005f8:	9800      	ldr	r0, [sp, #0]
 80005fa:	9901      	ldr	r1, [sp, #4]
 80005fc:	4653      	mov	r3, sl
 80005fe:	1900      	adds	r0, r0, r4
 8000600:	4169      	adcs	r1, r5
 8000602:	2b00      	cmp	r3, #0
 8000604:	db23      	blt.n	800064e <__udivmoddi4+0x13e>
 8000606:	002b      	movs	r3, r5
 8000608:	4652      	mov	r2, sl
 800060a:	40d3      	lsrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4664      	mov	r4, ip
 8000610:	40e2      	lsrs	r2, r4
 8000612:	001c      	movs	r4, r3
 8000614:	4653      	mov	r3, sl
 8000616:	0015      	movs	r5, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	db2d      	blt.n	8000678 <__udivmoddi4+0x168>
 800061c:	0026      	movs	r6, r4
 800061e:	4657      	mov	r7, sl
 8000620:	40be      	lsls	r6, r7
 8000622:	0033      	movs	r3, r6
 8000624:	0026      	movs	r6, r4
 8000626:	4667      	mov	r7, ip
 8000628:	40be      	lsls	r6, r7
 800062a:	0032      	movs	r2, r6
 800062c:	1a80      	subs	r0, r0, r2
 800062e:	4199      	sbcs	r1, r3
 8000630:	9000      	str	r0, [sp, #0]
 8000632:	9101      	str	r1, [sp, #4]
 8000634:	e7ac      	b.n	8000590 <__udivmoddi4+0x80>
 8000636:	4662      	mov	r2, ip
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	464a      	mov	r2, r9
 800063e:	40da      	lsrs	r2, r3
 8000640:	4661      	mov	r1, ip
 8000642:	0013      	movs	r3, r2
 8000644:	4642      	mov	r2, r8
 8000646:	408a      	lsls	r2, r1
 8000648:	0017      	movs	r7, r2
 800064a:	431f      	orrs	r7, r3
 800064c:	e780      	b.n	8000550 <__udivmoddi4+0x40>
 800064e:	4662      	mov	r2, ip
 8000650:	2320      	movs	r3, #32
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	002a      	movs	r2, r5
 8000656:	4666      	mov	r6, ip
 8000658:	409a      	lsls	r2, r3
 800065a:	0023      	movs	r3, r4
 800065c:	40f3      	lsrs	r3, r6
 800065e:	4313      	orrs	r3, r2
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0xfc>
 8000662:	4662      	mov	r2, ip
 8000664:	2320      	movs	r3, #32
 8000666:	2100      	movs	r1, #0
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	2200      	movs	r2, #0
 800066c:	9100      	str	r1, [sp, #0]
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	2201      	movs	r2, #1
 8000672:	40da      	lsrs	r2, r3
 8000674:	9201      	str	r2, [sp, #4]
 8000676:	e780      	b.n	800057a <__udivmoddi4+0x6a>
 8000678:	2320      	movs	r3, #32
 800067a:	4662      	mov	r2, ip
 800067c:	0026      	movs	r6, r4
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	40de      	lsrs	r6, r3
 8000682:	002f      	movs	r7, r5
 8000684:	46b0      	mov	r8, r6
 8000686:	4666      	mov	r6, ip
 8000688:	40b7      	lsls	r7, r6
 800068a:	4646      	mov	r6, r8
 800068c:	003b      	movs	r3, r7
 800068e:	4333      	orrs	r3, r6
 8000690:	e7c8      	b.n	8000624 <__udivmoddi4+0x114>
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <__eqsf2>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	0042      	lsls	r2, r0, #1
 8000698:	024e      	lsls	r6, r1, #9
 800069a:	004c      	lsls	r4, r1, #1
 800069c:	0245      	lsls	r5, r0, #9
 800069e:	0a6d      	lsrs	r5, r5, #9
 80006a0:	0e12      	lsrs	r2, r2, #24
 80006a2:	0fc3      	lsrs	r3, r0, #31
 80006a4:	0a76      	lsrs	r6, r6, #9
 80006a6:	0e24      	lsrs	r4, r4, #24
 80006a8:	0fc9      	lsrs	r1, r1, #31
 80006aa:	2aff      	cmp	r2, #255	; 0xff
 80006ac:	d00f      	beq.n	80006ce <__eqsf2+0x3a>
 80006ae:	2cff      	cmp	r4, #255	; 0xff
 80006b0:	d011      	beq.n	80006d6 <__eqsf2+0x42>
 80006b2:	2001      	movs	r0, #1
 80006b4:	42a2      	cmp	r2, r4
 80006b6:	d000      	beq.n	80006ba <__eqsf2+0x26>
 80006b8:	bd70      	pop	{r4, r5, r6, pc}
 80006ba:	42b5      	cmp	r5, r6
 80006bc:	d1fc      	bne.n	80006b8 <__eqsf2+0x24>
 80006be:	428b      	cmp	r3, r1
 80006c0:	d00d      	beq.n	80006de <__eqsf2+0x4a>
 80006c2:	2a00      	cmp	r2, #0
 80006c4:	d1f8      	bne.n	80006b8 <__eqsf2+0x24>
 80006c6:	0028      	movs	r0, r5
 80006c8:	1e45      	subs	r5, r0, #1
 80006ca:	41a8      	sbcs	r0, r5
 80006cc:	e7f4      	b.n	80006b8 <__eqsf2+0x24>
 80006ce:	2001      	movs	r0, #1
 80006d0:	2d00      	cmp	r5, #0
 80006d2:	d1f1      	bne.n	80006b8 <__eqsf2+0x24>
 80006d4:	e7eb      	b.n	80006ae <__eqsf2+0x1a>
 80006d6:	2001      	movs	r0, #1
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d1ed      	bne.n	80006b8 <__eqsf2+0x24>
 80006dc:	e7e9      	b.n	80006b2 <__eqsf2+0x1e>
 80006de:	2000      	movs	r0, #0
 80006e0:	e7ea      	b.n	80006b8 <__eqsf2+0x24>
 80006e2:	46c0      	nop			; (mov r8, r8)

080006e4 <__gesf2>:
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	004a      	lsls	r2, r1, #1
 80006e8:	024e      	lsls	r6, r1, #9
 80006ea:	0245      	lsls	r5, r0, #9
 80006ec:	0044      	lsls	r4, r0, #1
 80006ee:	0a6d      	lsrs	r5, r5, #9
 80006f0:	0e24      	lsrs	r4, r4, #24
 80006f2:	0fc3      	lsrs	r3, r0, #31
 80006f4:	0a76      	lsrs	r6, r6, #9
 80006f6:	0e12      	lsrs	r2, r2, #24
 80006f8:	0fc9      	lsrs	r1, r1, #31
 80006fa:	2cff      	cmp	r4, #255	; 0xff
 80006fc:	d015      	beq.n	800072a <__gesf2+0x46>
 80006fe:	2aff      	cmp	r2, #255	; 0xff
 8000700:	d00e      	beq.n	8000720 <__gesf2+0x3c>
 8000702:	2c00      	cmp	r4, #0
 8000704:	d115      	bne.n	8000732 <__gesf2+0x4e>
 8000706:	2a00      	cmp	r2, #0
 8000708:	d101      	bne.n	800070e <__gesf2+0x2a>
 800070a:	2e00      	cmp	r6, #0
 800070c:	d01c      	beq.n	8000748 <__gesf2+0x64>
 800070e:	2d00      	cmp	r5, #0
 8000710:	d014      	beq.n	800073c <__gesf2+0x58>
 8000712:	428b      	cmp	r3, r1
 8000714:	d027      	beq.n	8000766 <__gesf2+0x82>
 8000716:	2002      	movs	r0, #2
 8000718:	3b01      	subs	r3, #1
 800071a:	4018      	ands	r0, r3
 800071c:	3801      	subs	r0, #1
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	2e00      	cmp	r6, #0
 8000722:	d0ee      	beq.n	8000702 <__gesf2+0x1e>
 8000724:	2002      	movs	r0, #2
 8000726:	4240      	negs	r0, r0
 8000728:	e7f9      	b.n	800071e <__gesf2+0x3a>
 800072a:	2d00      	cmp	r5, #0
 800072c:	d1fa      	bne.n	8000724 <__gesf2+0x40>
 800072e:	2aff      	cmp	r2, #255	; 0xff
 8000730:	d00e      	beq.n	8000750 <__gesf2+0x6c>
 8000732:	2a00      	cmp	r2, #0
 8000734:	d10e      	bne.n	8000754 <__gesf2+0x70>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d0ed      	beq.n	8000716 <__gesf2+0x32>
 800073a:	e00b      	b.n	8000754 <__gesf2+0x70>
 800073c:	2301      	movs	r3, #1
 800073e:	3901      	subs	r1, #1
 8000740:	4399      	bics	r1, r3
 8000742:	0008      	movs	r0, r1
 8000744:	3001      	adds	r0, #1
 8000746:	e7ea      	b.n	800071e <__gesf2+0x3a>
 8000748:	2000      	movs	r0, #0
 800074a:	2d00      	cmp	r5, #0
 800074c:	d0e7      	beq.n	800071e <__gesf2+0x3a>
 800074e:	e7e2      	b.n	8000716 <__gesf2+0x32>
 8000750:	2e00      	cmp	r6, #0
 8000752:	d1e7      	bne.n	8000724 <__gesf2+0x40>
 8000754:	428b      	cmp	r3, r1
 8000756:	d1de      	bne.n	8000716 <__gesf2+0x32>
 8000758:	4294      	cmp	r4, r2
 800075a:	dd05      	ble.n	8000768 <__gesf2+0x84>
 800075c:	2102      	movs	r1, #2
 800075e:	1e58      	subs	r0, r3, #1
 8000760:	4008      	ands	r0, r1
 8000762:	3801      	subs	r0, #1
 8000764:	e7db      	b.n	800071e <__gesf2+0x3a>
 8000766:	2400      	movs	r4, #0
 8000768:	42a2      	cmp	r2, r4
 800076a:	dc04      	bgt.n	8000776 <__gesf2+0x92>
 800076c:	42b5      	cmp	r5, r6
 800076e:	d8d2      	bhi.n	8000716 <__gesf2+0x32>
 8000770:	2000      	movs	r0, #0
 8000772:	42b5      	cmp	r5, r6
 8000774:	d2d3      	bcs.n	800071e <__gesf2+0x3a>
 8000776:	1e58      	subs	r0, r3, #1
 8000778:	2301      	movs	r3, #1
 800077a:	4398      	bics	r0, r3
 800077c:	3001      	adds	r0, #1
 800077e:	e7ce      	b.n	800071e <__gesf2+0x3a>

08000780 <__lesf2>:
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	0042      	lsls	r2, r0, #1
 8000784:	0244      	lsls	r4, r0, #9
 8000786:	024d      	lsls	r5, r1, #9
 8000788:	0fc3      	lsrs	r3, r0, #31
 800078a:	0048      	lsls	r0, r1, #1
 800078c:	0a64      	lsrs	r4, r4, #9
 800078e:	0e12      	lsrs	r2, r2, #24
 8000790:	0a6d      	lsrs	r5, r5, #9
 8000792:	0e00      	lsrs	r0, r0, #24
 8000794:	0fc9      	lsrs	r1, r1, #31
 8000796:	2aff      	cmp	r2, #255	; 0xff
 8000798:	d012      	beq.n	80007c0 <__lesf2+0x40>
 800079a:	28ff      	cmp	r0, #255	; 0xff
 800079c:	d00c      	beq.n	80007b8 <__lesf2+0x38>
 800079e:	2a00      	cmp	r2, #0
 80007a0:	d112      	bne.n	80007c8 <__lesf2+0x48>
 80007a2:	2800      	cmp	r0, #0
 80007a4:	d119      	bne.n	80007da <__lesf2+0x5a>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d117      	bne.n	80007da <__lesf2+0x5a>
 80007aa:	2c00      	cmp	r4, #0
 80007ac:	d02b      	beq.n	8000806 <__lesf2+0x86>
 80007ae:	2002      	movs	r0, #2
 80007b0:	3b01      	subs	r3, #1
 80007b2:	4018      	ands	r0, r3
 80007b4:	3801      	subs	r0, #1
 80007b6:	e026      	b.n	8000806 <__lesf2+0x86>
 80007b8:	2d00      	cmp	r5, #0
 80007ba:	d0f0      	beq.n	800079e <__lesf2+0x1e>
 80007bc:	2002      	movs	r0, #2
 80007be:	e022      	b.n	8000806 <__lesf2+0x86>
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d1fb      	bne.n	80007bc <__lesf2+0x3c>
 80007c4:	28ff      	cmp	r0, #255	; 0xff
 80007c6:	d01f      	beq.n	8000808 <__lesf2+0x88>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d11f      	bne.n	800080c <__lesf2+0x8c>
 80007cc:	2d00      	cmp	r5, #0
 80007ce:	d11d      	bne.n	800080c <__lesf2+0x8c>
 80007d0:	2002      	movs	r0, #2
 80007d2:	3b01      	subs	r3, #1
 80007d4:	4018      	ands	r0, r3
 80007d6:	3801      	subs	r0, #1
 80007d8:	e015      	b.n	8000806 <__lesf2+0x86>
 80007da:	2c00      	cmp	r4, #0
 80007dc:	d00e      	beq.n	80007fc <__lesf2+0x7c>
 80007de:	428b      	cmp	r3, r1
 80007e0:	d1e5      	bne.n	80007ae <__lesf2+0x2e>
 80007e2:	2200      	movs	r2, #0
 80007e4:	4290      	cmp	r0, r2
 80007e6:	dc04      	bgt.n	80007f2 <__lesf2+0x72>
 80007e8:	42ac      	cmp	r4, r5
 80007ea:	d8e0      	bhi.n	80007ae <__lesf2+0x2e>
 80007ec:	2000      	movs	r0, #0
 80007ee:	42ac      	cmp	r4, r5
 80007f0:	d209      	bcs.n	8000806 <__lesf2+0x86>
 80007f2:	1e58      	subs	r0, r3, #1
 80007f4:	2301      	movs	r3, #1
 80007f6:	4398      	bics	r0, r3
 80007f8:	3001      	adds	r0, #1
 80007fa:	e004      	b.n	8000806 <__lesf2+0x86>
 80007fc:	2301      	movs	r3, #1
 80007fe:	3901      	subs	r1, #1
 8000800:	4399      	bics	r1, r3
 8000802:	0008      	movs	r0, r1
 8000804:	3001      	adds	r0, #1
 8000806:	bd30      	pop	{r4, r5, pc}
 8000808:	2d00      	cmp	r5, #0
 800080a:	d1d7      	bne.n	80007bc <__lesf2+0x3c>
 800080c:	428b      	cmp	r3, r1
 800080e:	d1ce      	bne.n	80007ae <__lesf2+0x2e>
 8000810:	4282      	cmp	r2, r0
 8000812:	dde7      	ble.n	80007e4 <__lesf2+0x64>
 8000814:	2102      	movs	r1, #2
 8000816:	1e58      	subs	r0, r3, #1
 8000818:	4008      	ands	r0, r1
 800081a:	3801      	subs	r0, #1
 800081c:	e7f3      	b.n	8000806 <__lesf2+0x86>
 800081e:	46c0      	nop			; (mov r8, r8)

08000820 <__aeabi_fmul>:
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	464e      	mov	r6, r9
 8000824:	4657      	mov	r7, sl
 8000826:	4645      	mov	r5, r8
 8000828:	46de      	mov	lr, fp
 800082a:	b5e0      	push	{r5, r6, r7, lr}
 800082c:	0243      	lsls	r3, r0, #9
 800082e:	0a5b      	lsrs	r3, r3, #9
 8000830:	0045      	lsls	r5, r0, #1
 8000832:	b083      	sub	sp, #12
 8000834:	1c0f      	adds	r7, r1, #0
 8000836:	4699      	mov	r9, r3
 8000838:	0e2d      	lsrs	r5, r5, #24
 800083a:	0fc6      	lsrs	r6, r0, #31
 800083c:	2d00      	cmp	r5, #0
 800083e:	d057      	beq.n	80008f0 <__aeabi_fmul+0xd0>
 8000840:	2dff      	cmp	r5, #255	; 0xff
 8000842:	d024      	beq.n	800088e <__aeabi_fmul+0x6e>
 8000844:	2080      	movs	r0, #128	; 0x80
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	04c0      	lsls	r0, r0, #19
 800084a:	4318      	orrs	r0, r3
 800084c:	2300      	movs	r3, #0
 800084e:	4681      	mov	r9, r0
 8000850:	469a      	mov	sl, r3
 8000852:	469b      	mov	fp, r3
 8000854:	3d7f      	subs	r5, #127	; 0x7f
 8000856:	027c      	lsls	r4, r7, #9
 8000858:	007a      	lsls	r2, r7, #1
 800085a:	0ffb      	lsrs	r3, r7, #31
 800085c:	0a64      	lsrs	r4, r4, #9
 800085e:	0e12      	lsrs	r2, r2, #24
 8000860:	4698      	mov	r8, r3
 8000862:	d023      	beq.n	80008ac <__aeabi_fmul+0x8c>
 8000864:	2aff      	cmp	r2, #255	; 0xff
 8000866:	d04b      	beq.n	8000900 <__aeabi_fmul+0xe0>
 8000868:	00e3      	lsls	r3, r4, #3
 800086a:	2480      	movs	r4, #128	; 0x80
 800086c:	2000      	movs	r0, #0
 800086e:	04e4      	lsls	r4, r4, #19
 8000870:	3a7f      	subs	r2, #127	; 0x7f
 8000872:	431c      	orrs	r4, r3
 8000874:	18ad      	adds	r5, r5, r2
 8000876:	1c6b      	adds	r3, r5, #1
 8000878:	4647      	mov	r7, r8
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	4653      	mov	r3, sl
 800087e:	4077      	eors	r7, r6
 8000880:	003a      	movs	r2, r7
 8000882:	2b0f      	cmp	r3, #15
 8000884:	d848      	bhi.n	8000918 <__aeabi_fmul+0xf8>
 8000886:	497d      	ldr	r1, [pc, #500]	; (8000a7c <__aeabi_fmul+0x25c>)
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	58cb      	ldr	r3, [r1, r3]
 800088c:	469f      	mov	pc, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_fmul+0x74>
 8000892:	e085      	b.n	80009a0 <__aeabi_fmul+0x180>
 8000894:	3308      	adds	r3, #8
 8000896:	469a      	mov	sl, r3
 8000898:	3b06      	subs	r3, #6
 800089a:	469b      	mov	fp, r3
 800089c:	027c      	lsls	r4, r7, #9
 800089e:	007a      	lsls	r2, r7, #1
 80008a0:	0ffb      	lsrs	r3, r7, #31
 80008a2:	25ff      	movs	r5, #255	; 0xff
 80008a4:	0a64      	lsrs	r4, r4, #9
 80008a6:	0e12      	lsrs	r2, r2, #24
 80008a8:	4698      	mov	r8, r3
 80008aa:	d1db      	bne.n	8000864 <__aeabi_fmul+0x44>
 80008ac:	2c00      	cmp	r4, #0
 80008ae:	d000      	beq.n	80008b2 <__aeabi_fmul+0x92>
 80008b0:	e090      	b.n	80009d4 <__aeabi_fmul+0x1b4>
 80008b2:	4652      	mov	r2, sl
 80008b4:	2301      	movs	r3, #1
 80008b6:	431a      	orrs	r2, r3
 80008b8:	4692      	mov	sl, r2
 80008ba:	2001      	movs	r0, #1
 80008bc:	e7db      	b.n	8000876 <__aeabi_fmul+0x56>
 80008be:	464c      	mov	r4, r9
 80008c0:	4658      	mov	r0, fp
 80008c2:	0017      	movs	r7, r2
 80008c4:	2802      	cmp	r0, #2
 80008c6:	d024      	beq.n	8000912 <__aeabi_fmul+0xf2>
 80008c8:	2803      	cmp	r0, #3
 80008ca:	d100      	bne.n	80008ce <__aeabi_fmul+0xae>
 80008cc:	e0cf      	b.n	8000a6e <__aeabi_fmul+0x24e>
 80008ce:	2200      	movs	r2, #0
 80008d0:	2300      	movs	r3, #0
 80008d2:	2801      	cmp	r0, #1
 80008d4:	d14d      	bne.n	8000972 <__aeabi_fmul+0x152>
 80008d6:	0258      	lsls	r0, r3, #9
 80008d8:	05d2      	lsls	r2, r2, #23
 80008da:	0a40      	lsrs	r0, r0, #9
 80008dc:	07ff      	lsls	r7, r7, #31
 80008de:	4310      	orrs	r0, r2
 80008e0:	4338      	orrs	r0, r7
 80008e2:	b003      	add	sp, #12
 80008e4:	bc3c      	pop	{r2, r3, r4, r5}
 80008e6:	4690      	mov	r8, r2
 80008e8:	4699      	mov	r9, r3
 80008ea:	46a2      	mov	sl, r4
 80008ec:	46ab      	mov	fp, r5
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d15b      	bne.n	80009ac <__aeabi_fmul+0x18c>
 80008f4:	2304      	movs	r3, #4
 80008f6:	469a      	mov	sl, r3
 80008f8:	3b03      	subs	r3, #3
 80008fa:	2500      	movs	r5, #0
 80008fc:	469b      	mov	fp, r3
 80008fe:	e7aa      	b.n	8000856 <__aeabi_fmul+0x36>
 8000900:	35ff      	adds	r5, #255	; 0xff
 8000902:	2c00      	cmp	r4, #0
 8000904:	d160      	bne.n	80009c8 <__aeabi_fmul+0x1a8>
 8000906:	4652      	mov	r2, sl
 8000908:	2302      	movs	r3, #2
 800090a:	431a      	orrs	r2, r3
 800090c:	4692      	mov	sl, r2
 800090e:	2002      	movs	r0, #2
 8000910:	e7b1      	b.n	8000876 <__aeabi_fmul+0x56>
 8000912:	22ff      	movs	r2, #255	; 0xff
 8000914:	2300      	movs	r3, #0
 8000916:	e7de      	b.n	80008d6 <__aeabi_fmul+0xb6>
 8000918:	464b      	mov	r3, r9
 800091a:	0c1b      	lsrs	r3, r3, #16
 800091c:	469c      	mov	ip, r3
 800091e:	464b      	mov	r3, r9
 8000920:	0426      	lsls	r6, r4, #16
 8000922:	0c36      	lsrs	r6, r6, #16
 8000924:	0418      	lsls	r0, r3, #16
 8000926:	4661      	mov	r1, ip
 8000928:	0033      	movs	r3, r6
 800092a:	0c22      	lsrs	r2, r4, #16
 800092c:	4664      	mov	r4, ip
 800092e:	0c00      	lsrs	r0, r0, #16
 8000930:	4343      	muls	r3, r0
 8000932:	434e      	muls	r6, r1
 8000934:	4350      	muls	r0, r2
 8000936:	4354      	muls	r4, r2
 8000938:	1980      	adds	r0, r0, r6
 800093a:	0c1a      	lsrs	r2, r3, #16
 800093c:	1812      	adds	r2, r2, r0
 800093e:	4296      	cmp	r6, r2
 8000940:	d903      	bls.n	800094a <__aeabi_fmul+0x12a>
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	0249      	lsls	r1, r1, #9
 8000946:	468c      	mov	ip, r1
 8000948:	4464      	add	r4, ip
 800094a:	041b      	lsls	r3, r3, #16
 800094c:	0c1b      	lsrs	r3, r3, #16
 800094e:	0410      	lsls	r0, r2, #16
 8000950:	18c0      	adds	r0, r0, r3
 8000952:	0183      	lsls	r3, r0, #6
 8000954:	1e5e      	subs	r6, r3, #1
 8000956:	41b3      	sbcs	r3, r6
 8000958:	0e80      	lsrs	r0, r0, #26
 800095a:	4318      	orrs	r0, r3
 800095c:	0c13      	lsrs	r3, r2, #16
 800095e:	191b      	adds	r3, r3, r4
 8000960:	019b      	lsls	r3, r3, #6
 8000962:	4303      	orrs	r3, r0
 8000964:	001c      	movs	r4, r3
 8000966:	0123      	lsls	r3, r4, #4
 8000968:	d579      	bpl.n	8000a5e <__aeabi_fmul+0x23e>
 800096a:	2301      	movs	r3, #1
 800096c:	0862      	lsrs	r2, r4, #1
 800096e:	401c      	ands	r4, r3
 8000970:	4314      	orrs	r4, r2
 8000972:	9a01      	ldr	r2, [sp, #4]
 8000974:	327f      	adds	r2, #127	; 0x7f
 8000976:	2a00      	cmp	r2, #0
 8000978:	dd4d      	ble.n	8000a16 <__aeabi_fmul+0x1f6>
 800097a:	0763      	lsls	r3, r4, #29
 800097c:	d004      	beq.n	8000988 <__aeabi_fmul+0x168>
 800097e:	230f      	movs	r3, #15
 8000980:	4023      	ands	r3, r4
 8000982:	2b04      	cmp	r3, #4
 8000984:	d000      	beq.n	8000988 <__aeabi_fmul+0x168>
 8000986:	3404      	adds	r4, #4
 8000988:	0123      	lsls	r3, r4, #4
 800098a:	d503      	bpl.n	8000994 <__aeabi_fmul+0x174>
 800098c:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <__aeabi_fmul+0x260>)
 800098e:	9a01      	ldr	r2, [sp, #4]
 8000990:	401c      	ands	r4, r3
 8000992:	3280      	adds	r2, #128	; 0x80
 8000994:	2afe      	cmp	r2, #254	; 0xfe
 8000996:	dcbc      	bgt.n	8000912 <__aeabi_fmul+0xf2>
 8000998:	01a3      	lsls	r3, r4, #6
 800099a:	0a5b      	lsrs	r3, r3, #9
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	e79a      	b.n	80008d6 <__aeabi_fmul+0xb6>
 80009a0:	230c      	movs	r3, #12
 80009a2:	469a      	mov	sl, r3
 80009a4:	3b09      	subs	r3, #9
 80009a6:	25ff      	movs	r5, #255	; 0xff
 80009a8:	469b      	mov	fp, r3
 80009aa:	e754      	b.n	8000856 <__aeabi_fmul+0x36>
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 f90d 	bl	8001bcc <__clzsi2>
 80009b2:	464a      	mov	r2, r9
 80009b4:	1f43      	subs	r3, r0, #5
 80009b6:	2576      	movs	r5, #118	; 0x76
 80009b8:	409a      	lsls	r2, r3
 80009ba:	2300      	movs	r3, #0
 80009bc:	426d      	negs	r5, r5
 80009be:	4691      	mov	r9, r2
 80009c0:	1a2d      	subs	r5, r5, r0
 80009c2:	469a      	mov	sl, r3
 80009c4:	469b      	mov	fp, r3
 80009c6:	e746      	b.n	8000856 <__aeabi_fmul+0x36>
 80009c8:	4652      	mov	r2, sl
 80009ca:	2303      	movs	r3, #3
 80009cc:	431a      	orrs	r2, r3
 80009ce:	4692      	mov	sl, r2
 80009d0:	2003      	movs	r0, #3
 80009d2:	e750      	b.n	8000876 <__aeabi_fmul+0x56>
 80009d4:	0020      	movs	r0, r4
 80009d6:	f001 f8f9 	bl	8001bcc <__clzsi2>
 80009da:	1f43      	subs	r3, r0, #5
 80009dc:	1a2d      	subs	r5, r5, r0
 80009de:	409c      	lsls	r4, r3
 80009e0:	3d76      	subs	r5, #118	; 0x76
 80009e2:	2000      	movs	r0, #0
 80009e4:	e747      	b.n	8000876 <__aeabi_fmul+0x56>
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	2700      	movs	r7, #0
 80009ea:	03db      	lsls	r3, r3, #15
 80009ec:	22ff      	movs	r2, #255	; 0xff
 80009ee:	e772      	b.n	80008d6 <__aeabi_fmul+0xb6>
 80009f0:	4642      	mov	r2, r8
 80009f2:	e766      	b.n	80008c2 <__aeabi_fmul+0xa2>
 80009f4:	464c      	mov	r4, r9
 80009f6:	0032      	movs	r2, r6
 80009f8:	4658      	mov	r0, fp
 80009fa:	e762      	b.n	80008c2 <__aeabi_fmul+0xa2>
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	464a      	mov	r2, r9
 8000a00:	03db      	lsls	r3, r3, #15
 8000a02:	421a      	tst	r2, r3
 8000a04:	d022      	beq.n	8000a4c <__aeabi_fmul+0x22c>
 8000a06:	421c      	tst	r4, r3
 8000a08:	d120      	bne.n	8000a4c <__aeabi_fmul+0x22c>
 8000a0a:	4323      	orrs	r3, r4
 8000a0c:	025b      	lsls	r3, r3, #9
 8000a0e:	0a5b      	lsrs	r3, r3, #9
 8000a10:	4647      	mov	r7, r8
 8000a12:	22ff      	movs	r2, #255	; 0xff
 8000a14:	e75f      	b.n	80008d6 <__aeabi_fmul+0xb6>
 8000a16:	2301      	movs	r3, #1
 8000a18:	1a9a      	subs	r2, r3, r2
 8000a1a:	2a1b      	cmp	r2, #27
 8000a1c:	dc21      	bgt.n	8000a62 <__aeabi_fmul+0x242>
 8000a1e:	0023      	movs	r3, r4
 8000a20:	9901      	ldr	r1, [sp, #4]
 8000a22:	40d3      	lsrs	r3, r2
 8000a24:	319e      	adds	r1, #158	; 0x9e
 8000a26:	408c      	lsls	r4, r1
 8000a28:	001a      	movs	r2, r3
 8000a2a:	0023      	movs	r3, r4
 8000a2c:	1e5c      	subs	r4, r3, #1
 8000a2e:	41a3      	sbcs	r3, r4
 8000a30:	4313      	orrs	r3, r2
 8000a32:	075a      	lsls	r2, r3, #29
 8000a34:	d004      	beq.n	8000a40 <__aeabi_fmul+0x220>
 8000a36:	220f      	movs	r2, #15
 8000a38:	401a      	ands	r2, r3
 8000a3a:	2a04      	cmp	r2, #4
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_fmul+0x220>
 8000a3e:	3304      	adds	r3, #4
 8000a40:	015a      	lsls	r2, r3, #5
 8000a42:	d411      	bmi.n	8000a68 <__aeabi_fmul+0x248>
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	0a5b      	lsrs	r3, r3, #9
 8000a48:	2200      	movs	r2, #0
 8000a4a:	e744      	b.n	80008d6 <__aeabi_fmul+0xb6>
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	464a      	mov	r2, r9
 8000a50:	03db      	lsls	r3, r3, #15
 8000a52:	4313      	orrs	r3, r2
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	0a5b      	lsrs	r3, r3, #9
 8000a58:	0037      	movs	r7, r6
 8000a5a:	22ff      	movs	r2, #255	; 0xff
 8000a5c:	e73b      	b.n	80008d6 <__aeabi_fmul+0xb6>
 8000a5e:	9501      	str	r5, [sp, #4]
 8000a60:	e787      	b.n	8000972 <__aeabi_fmul+0x152>
 8000a62:	2200      	movs	r2, #0
 8000a64:	2300      	movs	r3, #0
 8000a66:	e736      	b.n	80008d6 <__aeabi_fmul+0xb6>
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e733      	b.n	80008d6 <__aeabi_fmul+0xb6>
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	03db      	lsls	r3, r3, #15
 8000a72:	4323      	orrs	r3, r4
 8000a74:	025b      	lsls	r3, r3, #9
 8000a76:	0a5b      	lsrs	r3, r3, #9
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	e72c      	b.n	80008d6 <__aeabi_fmul+0xb6>
 8000a7c:	08008410 	.word	0x08008410
 8000a80:	f7ffffff 	.word	0xf7ffffff

08000a84 <__aeabi_fsub>:
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a86:	4647      	mov	r7, r8
 8000a88:	46ce      	mov	lr, r9
 8000a8a:	0044      	lsls	r4, r0, #1
 8000a8c:	0fc2      	lsrs	r2, r0, #31
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	0247      	lsls	r7, r0, #9
 8000a92:	0248      	lsls	r0, r1, #9
 8000a94:	0a40      	lsrs	r0, r0, #9
 8000a96:	4684      	mov	ip, r0
 8000a98:	4666      	mov	r6, ip
 8000a9a:	0048      	lsls	r0, r1, #1
 8000a9c:	0a7f      	lsrs	r7, r7, #9
 8000a9e:	0e24      	lsrs	r4, r4, #24
 8000aa0:	00f6      	lsls	r6, r6, #3
 8000aa2:	0025      	movs	r5, r4
 8000aa4:	4690      	mov	r8, r2
 8000aa6:	00fb      	lsls	r3, r7, #3
 8000aa8:	0e00      	lsrs	r0, r0, #24
 8000aaa:	0fc9      	lsrs	r1, r1, #31
 8000aac:	46b1      	mov	r9, r6
 8000aae:	28ff      	cmp	r0, #255	; 0xff
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_fsub+0x30>
 8000ab2:	e085      	b.n	8000bc0 <__aeabi_fsub+0x13c>
 8000ab4:	2601      	movs	r6, #1
 8000ab6:	4071      	eors	r1, r6
 8000ab8:	1a26      	subs	r6, r4, r0
 8000aba:	4291      	cmp	r1, r2
 8000abc:	d057      	beq.n	8000b6e <__aeabi_fsub+0xea>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	dd43      	ble.n	8000b4a <__aeabi_fsub+0xc6>
 8000ac2:	2800      	cmp	r0, #0
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fsub+0x44>
 8000ac6:	e07f      	b.n	8000bc8 <__aeabi_fsub+0x144>
 8000ac8:	4649      	mov	r1, r9
 8000aca:	2900      	cmp	r1, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fsub+0x4c>
 8000ace:	e0aa      	b.n	8000c26 <__aeabi_fsub+0x1a2>
 8000ad0:	3e01      	subs	r6, #1
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d000      	beq.n	8000ad8 <__aeabi_fsub+0x54>
 8000ad6:	e0f7      	b.n	8000cc8 <__aeabi_fsub+0x244>
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	015a      	lsls	r2, r3, #5
 8000adc:	d400      	bmi.n	8000ae0 <__aeabi_fsub+0x5c>
 8000ade:	e08b      	b.n	8000bf8 <__aeabi_fsub+0x174>
 8000ae0:	019b      	lsls	r3, r3, #6
 8000ae2:	099c      	lsrs	r4, r3, #6
 8000ae4:	0020      	movs	r0, r4
 8000ae6:	f001 f871 	bl	8001bcc <__clzsi2>
 8000aea:	3805      	subs	r0, #5
 8000aec:	4084      	lsls	r4, r0
 8000aee:	4285      	cmp	r5, r0
 8000af0:	dd00      	ble.n	8000af4 <__aeabi_fsub+0x70>
 8000af2:	e0d3      	b.n	8000c9c <__aeabi_fsub+0x218>
 8000af4:	1b45      	subs	r5, r0, r5
 8000af6:	0023      	movs	r3, r4
 8000af8:	2020      	movs	r0, #32
 8000afa:	3501      	adds	r5, #1
 8000afc:	40eb      	lsrs	r3, r5
 8000afe:	1b45      	subs	r5, r0, r5
 8000b00:	40ac      	lsls	r4, r5
 8000b02:	1e62      	subs	r2, r4, #1
 8000b04:	4194      	sbcs	r4, r2
 8000b06:	4323      	orrs	r3, r4
 8000b08:	2407      	movs	r4, #7
 8000b0a:	2500      	movs	r5, #0
 8000b0c:	401c      	ands	r4, r3
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4641      	mov	r1, r8
 8000b12:	400a      	ands	r2, r1
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d004      	beq.n	8000b22 <__aeabi_fsub+0x9e>
 8000b18:	210f      	movs	r1, #15
 8000b1a:	4019      	ands	r1, r3
 8000b1c:	2904      	cmp	r1, #4
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_fsub+0x9e>
 8000b20:	3304      	adds	r3, #4
 8000b22:	0159      	lsls	r1, r3, #5
 8000b24:	d400      	bmi.n	8000b28 <__aeabi_fsub+0xa4>
 8000b26:	e080      	b.n	8000c2a <__aeabi_fsub+0x1a6>
 8000b28:	3501      	adds	r5, #1
 8000b2a:	b2ec      	uxtb	r4, r5
 8000b2c:	2dff      	cmp	r5, #255	; 0xff
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_fsub+0xae>
 8000b30:	e0a3      	b.n	8000c7a <__aeabi_fsub+0x1f6>
 8000b32:	24ff      	movs	r4, #255	; 0xff
 8000b34:	2300      	movs	r3, #0
 8000b36:	025b      	lsls	r3, r3, #9
 8000b38:	05e4      	lsls	r4, r4, #23
 8000b3a:	0a58      	lsrs	r0, r3, #9
 8000b3c:	07d2      	lsls	r2, r2, #31
 8000b3e:	4320      	orrs	r0, r4
 8000b40:	4310      	orrs	r0, r2
 8000b42:	bc0c      	pop	{r2, r3}
 8000b44:	4690      	mov	r8, r2
 8000b46:	4699      	mov	r9, r3
 8000b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d174      	bne.n	8000c38 <__aeabi_fsub+0x1b4>
 8000b4e:	1c60      	adds	r0, r4, #1
 8000b50:	b2c0      	uxtb	r0, r0
 8000b52:	2801      	cmp	r0, #1
 8000b54:	dc00      	bgt.n	8000b58 <__aeabi_fsub+0xd4>
 8000b56:	e0a7      	b.n	8000ca8 <__aeabi_fsub+0x224>
 8000b58:	464a      	mov	r2, r9
 8000b5a:	1a9c      	subs	r4, r3, r2
 8000b5c:	0162      	lsls	r2, r4, #5
 8000b5e:	d500      	bpl.n	8000b62 <__aeabi_fsub+0xde>
 8000b60:	e0b6      	b.n	8000cd0 <__aeabi_fsub+0x24c>
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d1be      	bne.n	8000ae4 <__aeabi_fsub+0x60>
 8000b66:	2200      	movs	r2, #0
 8000b68:	2400      	movs	r4, #0
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e7e3      	b.n	8000b36 <__aeabi_fsub+0xb2>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	dc00      	bgt.n	8000b74 <__aeabi_fsub+0xf0>
 8000b72:	e085      	b.n	8000c80 <__aeabi_fsub+0x1fc>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d046      	beq.n	8000c06 <__aeabi_fsub+0x182>
 8000b78:	2cff      	cmp	r4, #255	; 0xff
 8000b7a:	d049      	beq.n	8000c10 <__aeabi_fsub+0x18c>
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	4648      	mov	r0, r9
 8000b80:	04d2      	lsls	r2, r2, #19
 8000b82:	4310      	orrs	r0, r2
 8000b84:	4681      	mov	r9, r0
 8000b86:	2201      	movs	r2, #1
 8000b88:	2e1b      	cmp	r6, #27
 8000b8a:	dc09      	bgt.n	8000ba0 <__aeabi_fsub+0x11c>
 8000b8c:	2020      	movs	r0, #32
 8000b8e:	464c      	mov	r4, r9
 8000b90:	1b80      	subs	r0, r0, r6
 8000b92:	4084      	lsls	r4, r0
 8000b94:	464a      	mov	r2, r9
 8000b96:	0020      	movs	r0, r4
 8000b98:	40f2      	lsrs	r2, r6
 8000b9a:	1e44      	subs	r4, r0, #1
 8000b9c:	41a0      	sbcs	r0, r4
 8000b9e:	4302      	orrs	r2, r0
 8000ba0:	189b      	adds	r3, r3, r2
 8000ba2:	015a      	lsls	r2, r3, #5
 8000ba4:	d528      	bpl.n	8000bf8 <__aeabi_fsub+0x174>
 8000ba6:	3501      	adds	r5, #1
 8000ba8:	2dff      	cmp	r5, #255	; 0xff
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x12a>
 8000bac:	e0a8      	b.n	8000d00 <__aeabi_fsub+0x27c>
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2407      	movs	r4, #7
 8000bb2:	4994      	ldr	r1, [pc, #592]	; (8000e04 <__aeabi_fsub+0x380>)
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	400b      	ands	r3, r1
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	401c      	ands	r4, r3
 8000bbe:	e7a6      	b.n	8000b0e <__aeabi_fsub+0x8a>
 8000bc0:	2e00      	cmp	r6, #0
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_fsub+0x142>
 8000bc4:	e778      	b.n	8000ab8 <__aeabi_fsub+0x34>
 8000bc6:	e775      	b.n	8000ab4 <__aeabi_fsub+0x30>
 8000bc8:	2cff      	cmp	r4, #255	; 0xff
 8000bca:	d054      	beq.n	8000c76 <__aeabi_fsub+0x1f2>
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	4649      	mov	r1, r9
 8000bd0:	04d2      	lsls	r2, r2, #19
 8000bd2:	4311      	orrs	r1, r2
 8000bd4:	4689      	mov	r9, r1
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2e1b      	cmp	r6, #27
 8000bda:	dc09      	bgt.n	8000bf0 <__aeabi_fsub+0x16c>
 8000bdc:	2120      	movs	r1, #32
 8000bde:	4648      	mov	r0, r9
 8000be0:	1b89      	subs	r1, r1, r6
 8000be2:	4088      	lsls	r0, r1
 8000be4:	464a      	mov	r2, r9
 8000be6:	0001      	movs	r1, r0
 8000be8:	40f2      	lsrs	r2, r6
 8000bea:	1e48      	subs	r0, r1, #1
 8000bec:	4181      	sbcs	r1, r0
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	015a      	lsls	r2, r3, #5
 8000bf4:	d500      	bpl.n	8000bf8 <__aeabi_fsub+0x174>
 8000bf6:	e773      	b.n	8000ae0 <__aeabi_fsub+0x5c>
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4641      	mov	r1, r8
 8000bfc:	400a      	ands	r2, r1
 8000bfe:	0759      	lsls	r1, r3, #29
 8000c00:	d000      	beq.n	8000c04 <__aeabi_fsub+0x180>
 8000c02:	e789      	b.n	8000b18 <__aeabi_fsub+0x94>
 8000c04:	e011      	b.n	8000c2a <__aeabi_fsub+0x1a6>
 8000c06:	4648      	mov	r0, r9
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d158      	bne.n	8000cbe <__aeabi_fsub+0x23a>
 8000c0c:	2cff      	cmp	r4, #255	; 0xff
 8000c0e:	d10c      	bne.n	8000c2a <__aeabi_fsub+0x1a6>
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_fsub+0x194>
 8000c16:	e78c      	b.n	8000b32 <__aeabi_fsub+0xae>
 8000c18:	2080      	movs	r0, #128	; 0x80
 8000c1a:	03c0      	lsls	r0, r0, #15
 8000c1c:	4303      	orrs	r3, r0
 8000c1e:	025b      	lsls	r3, r3, #9
 8000c20:	0a5b      	lsrs	r3, r3, #9
 8000c22:	24ff      	movs	r4, #255	; 0xff
 8000c24:	e787      	b.n	8000b36 <__aeabi_fsub+0xb2>
 8000c26:	2cff      	cmp	r4, #255	; 0xff
 8000c28:	d025      	beq.n	8000c76 <__aeabi_fsub+0x1f2>
 8000c2a:	08db      	lsrs	r3, r3, #3
 8000c2c:	2dff      	cmp	r5, #255	; 0xff
 8000c2e:	d0f0      	beq.n	8000c12 <__aeabi_fsub+0x18e>
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	0a5b      	lsrs	r3, r3, #9
 8000c34:	b2ec      	uxtb	r4, r5
 8000c36:	e77e      	b.n	8000b36 <__aeabi_fsub+0xb2>
 8000c38:	2c00      	cmp	r4, #0
 8000c3a:	d04d      	beq.n	8000cd8 <__aeabi_fsub+0x254>
 8000c3c:	28ff      	cmp	r0, #255	; 0xff
 8000c3e:	d018      	beq.n	8000c72 <__aeabi_fsub+0x1ee>
 8000c40:	2480      	movs	r4, #128	; 0x80
 8000c42:	04e4      	lsls	r4, r4, #19
 8000c44:	4272      	negs	r2, r6
 8000c46:	4323      	orrs	r3, r4
 8000c48:	2a1b      	cmp	r2, #27
 8000c4a:	dd00      	ble.n	8000c4e <__aeabi_fsub+0x1ca>
 8000c4c:	e0c4      	b.n	8000dd8 <__aeabi_fsub+0x354>
 8000c4e:	001c      	movs	r4, r3
 8000c50:	2520      	movs	r5, #32
 8000c52:	40d4      	lsrs	r4, r2
 8000c54:	1aaa      	subs	r2, r5, r2
 8000c56:	4093      	lsls	r3, r2
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	4193      	sbcs	r3, r2
 8000c5c:	4323      	orrs	r3, r4
 8000c5e:	464a      	mov	r2, r9
 8000c60:	0005      	movs	r5, r0
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	4688      	mov	r8, r1
 8000c66:	e738      	b.n	8000ada <__aeabi_fsub+0x56>
 8000c68:	1c72      	adds	r2, r6, #1
 8000c6a:	d0f8      	beq.n	8000c5e <__aeabi_fsub+0x1da>
 8000c6c:	43f2      	mvns	r2, r6
 8000c6e:	28ff      	cmp	r0, #255	; 0xff
 8000c70:	d1ea      	bne.n	8000c48 <__aeabi_fsub+0x1c4>
 8000c72:	000a      	movs	r2, r1
 8000c74:	464b      	mov	r3, r9
 8000c76:	25ff      	movs	r5, #255	; 0xff
 8000c78:	e7d7      	b.n	8000c2a <__aeabi_fsub+0x1a6>
 8000c7a:	019b      	lsls	r3, r3, #6
 8000c7c:	0a5b      	lsrs	r3, r3, #9
 8000c7e:	e75a      	b.n	8000b36 <__aeabi_fsub+0xb2>
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d141      	bne.n	8000d08 <__aeabi_fsub+0x284>
 8000c84:	1c65      	adds	r5, r4, #1
 8000c86:	b2e9      	uxtb	r1, r5
 8000c88:	2901      	cmp	r1, #1
 8000c8a:	dd45      	ble.n	8000d18 <__aeabi_fsub+0x294>
 8000c8c:	2dff      	cmp	r5, #255	; 0xff
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_fsub+0x20e>
 8000c90:	e74f      	b.n	8000b32 <__aeabi_fsub+0xae>
 8000c92:	2407      	movs	r4, #7
 8000c94:	444b      	add	r3, r9
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	401c      	ands	r4, r3
 8000c9a:	e738      	b.n	8000b0e <__aeabi_fsub+0x8a>
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	4b5a      	ldr	r3, [pc, #360]	; (8000e08 <__aeabi_fsub+0x384>)
 8000ca0:	1a2d      	subs	r5, r5, r0
 8000ca2:	4023      	ands	r3, r4
 8000ca4:	4014      	ands	r4, r2
 8000ca6:	e732      	b.n	8000b0e <__aeabi_fsub+0x8a>
 8000ca8:	2c00      	cmp	r4, #0
 8000caa:	d11d      	bne.n	8000ce8 <__aeabi_fsub+0x264>
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d17a      	bne.n	8000da6 <__aeabi_fsub+0x322>
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fsub+0x234>
 8000cb6:	e091      	b.n	8000ddc <__aeabi_fsub+0x358>
 8000cb8:	000a      	movs	r2, r1
 8000cba:	2500      	movs	r5, #0
 8000cbc:	e7b5      	b.n	8000c2a <__aeabi_fsub+0x1a6>
 8000cbe:	3e01      	subs	r6, #1
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d119      	bne.n	8000cf8 <__aeabi_fsub+0x274>
 8000cc4:	444b      	add	r3, r9
 8000cc6:	e76c      	b.n	8000ba2 <__aeabi_fsub+0x11e>
 8000cc8:	2cff      	cmp	r4, #255	; 0xff
 8000cca:	d184      	bne.n	8000bd6 <__aeabi_fsub+0x152>
 8000ccc:	25ff      	movs	r5, #255	; 0xff
 8000cce:	e7ac      	b.n	8000c2a <__aeabi_fsub+0x1a6>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	1ad4      	subs	r4, r2, r3
 8000cd6:	e705      	b.n	8000ae4 <__aeabi_fsub+0x60>
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1c5      	bne.n	8000c68 <__aeabi_fsub+0x1e4>
 8000cdc:	000a      	movs	r2, r1
 8000cde:	28ff      	cmp	r0, #255	; 0xff
 8000ce0:	d0c8      	beq.n	8000c74 <__aeabi_fsub+0x1f0>
 8000ce2:	0005      	movs	r5, r0
 8000ce4:	464b      	mov	r3, r9
 8000ce6:	e7a0      	b.n	8000c2a <__aeabi_fsub+0x1a6>
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d149      	bne.n	8000d80 <__aeabi_fsub+0x2fc>
 8000cec:	464b      	mov	r3, r9
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d077      	beq.n	8000de2 <__aeabi_fsub+0x35e>
 8000cf2:	000a      	movs	r2, r1
 8000cf4:	25ff      	movs	r5, #255	; 0xff
 8000cf6:	e798      	b.n	8000c2a <__aeabi_fsub+0x1a6>
 8000cf8:	2cff      	cmp	r4, #255	; 0xff
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_fsub+0x27a>
 8000cfc:	e743      	b.n	8000b86 <__aeabi_fsub+0x102>
 8000cfe:	e787      	b.n	8000c10 <__aeabi_fsub+0x18c>
 8000d00:	000a      	movs	r2, r1
 8000d02:	24ff      	movs	r4, #255	; 0xff
 8000d04:	2300      	movs	r3, #0
 8000d06:	e716      	b.n	8000b36 <__aeabi_fsub+0xb2>
 8000d08:	2c00      	cmp	r4, #0
 8000d0a:	d115      	bne.n	8000d38 <__aeabi_fsub+0x2b4>
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d157      	bne.n	8000dc0 <__aeabi_fsub+0x33c>
 8000d10:	28ff      	cmp	r0, #255	; 0xff
 8000d12:	d1e6      	bne.n	8000ce2 <__aeabi_fsub+0x25e>
 8000d14:	464b      	mov	r3, r9
 8000d16:	e77b      	b.n	8000c10 <__aeabi_fsub+0x18c>
 8000d18:	2c00      	cmp	r4, #0
 8000d1a:	d120      	bne.n	8000d5e <__aeabi_fsub+0x2da>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d057      	beq.n	8000dd0 <__aeabi_fsub+0x34c>
 8000d20:	4649      	mov	r1, r9
 8000d22:	2900      	cmp	r1, #0
 8000d24:	d053      	beq.n	8000dce <__aeabi_fsub+0x34a>
 8000d26:	444b      	add	r3, r9
 8000d28:	015a      	lsls	r2, r3, #5
 8000d2a:	d568      	bpl.n	8000dfe <__aeabi_fsub+0x37a>
 8000d2c:	2407      	movs	r4, #7
 8000d2e:	4a36      	ldr	r2, [pc, #216]	; (8000e08 <__aeabi_fsub+0x384>)
 8000d30:	401c      	ands	r4, r3
 8000d32:	2501      	movs	r5, #1
 8000d34:	4013      	ands	r3, r2
 8000d36:	e6ea      	b.n	8000b0e <__aeabi_fsub+0x8a>
 8000d38:	28ff      	cmp	r0, #255	; 0xff
 8000d3a:	d0eb      	beq.n	8000d14 <__aeabi_fsub+0x290>
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	04d2      	lsls	r2, r2, #19
 8000d40:	4276      	negs	r6, r6
 8000d42:	4313      	orrs	r3, r2
 8000d44:	2e1b      	cmp	r6, #27
 8000d46:	dc53      	bgt.n	8000df0 <__aeabi_fsub+0x36c>
 8000d48:	2520      	movs	r5, #32
 8000d4a:	1bad      	subs	r5, r5, r6
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	40ab      	lsls	r3, r5
 8000d50:	40f2      	lsrs	r2, r6
 8000d52:	1e5c      	subs	r4, r3, #1
 8000d54:	41a3      	sbcs	r3, r4
 8000d56:	4313      	orrs	r3, r2
 8000d58:	444b      	add	r3, r9
 8000d5a:	0005      	movs	r5, r0
 8000d5c:	e721      	b.n	8000ba2 <__aeabi_fsub+0x11e>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0d8      	beq.n	8000d14 <__aeabi_fsub+0x290>
 8000d62:	4649      	mov	r1, r9
 8000d64:	2900      	cmp	r1, #0
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fsub+0x2e6>
 8000d68:	e752      	b.n	8000c10 <__aeabi_fsub+0x18c>
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	03c9      	lsls	r1, r1, #15
 8000d6e:	420f      	tst	r7, r1
 8000d70:	d100      	bne.n	8000d74 <__aeabi_fsub+0x2f0>
 8000d72:	e74d      	b.n	8000c10 <__aeabi_fsub+0x18c>
 8000d74:	4660      	mov	r0, ip
 8000d76:	4208      	tst	r0, r1
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fsub+0x2f8>
 8000d7a:	e749      	b.n	8000c10 <__aeabi_fsub+0x18c>
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	e747      	b.n	8000c10 <__aeabi_fsub+0x18c>
 8000d80:	4648      	mov	r0, r9
 8000d82:	25ff      	movs	r5, #255	; 0xff
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d100      	bne.n	8000d8a <__aeabi_fsub+0x306>
 8000d88:	e74f      	b.n	8000c2a <__aeabi_fsub+0x1a6>
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	03d2      	lsls	r2, r2, #15
 8000d8e:	4217      	tst	r7, r2
 8000d90:	d004      	beq.n	8000d9c <__aeabi_fsub+0x318>
 8000d92:	4660      	mov	r0, ip
 8000d94:	4210      	tst	r0, r2
 8000d96:	d101      	bne.n	8000d9c <__aeabi_fsub+0x318>
 8000d98:	464b      	mov	r3, r9
 8000d9a:	4688      	mov	r8, r1
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4641      	mov	r1, r8
 8000da0:	25ff      	movs	r5, #255	; 0xff
 8000da2:	400a      	ands	r2, r1
 8000da4:	e741      	b.n	8000c2a <__aeabi_fsub+0x1a6>
 8000da6:	4648      	mov	r0, r9
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d01f      	beq.n	8000dec <__aeabi_fsub+0x368>
 8000dac:	1a1a      	subs	r2, r3, r0
 8000dae:	0150      	lsls	r0, r2, #5
 8000db0:	d520      	bpl.n	8000df4 <__aeabi_fsub+0x370>
 8000db2:	464a      	mov	r2, r9
 8000db4:	2407      	movs	r4, #7
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	401c      	ands	r4, r3
 8000dba:	4688      	mov	r8, r1
 8000dbc:	2500      	movs	r5, #0
 8000dbe:	e6a6      	b.n	8000b0e <__aeabi_fsub+0x8a>
 8000dc0:	1c74      	adds	r4, r6, #1
 8000dc2:	d0c9      	beq.n	8000d58 <__aeabi_fsub+0x2d4>
 8000dc4:	43f6      	mvns	r6, r6
 8000dc6:	28ff      	cmp	r0, #255	; 0xff
 8000dc8:	d1bc      	bne.n	8000d44 <__aeabi_fsub+0x2c0>
 8000dca:	464b      	mov	r3, r9
 8000dcc:	e720      	b.n	8000c10 <__aeabi_fsub+0x18c>
 8000dce:	4699      	mov	r9, r3
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	2500      	movs	r5, #0
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	e72b      	b.n	8000c30 <__aeabi_fsub+0x1ac>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e740      	b.n	8000c5e <__aeabi_fsub+0x1da>
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2300      	movs	r3, #0
 8000de0:	e6a9      	b.n	8000b36 <__aeabi_fsub+0xb2>
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	2200      	movs	r2, #0
 8000de6:	03db      	lsls	r3, r3, #15
 8000de8:	24ff      	movs	r4, #255	; 0xff
 8000dea:	e6a4      	b.n	8000b36 <__aeabi_fsub+0xb2>
 8000dec:	2500      	movs	r5, #0
 8000dee:	e71c      	b.n	8000c2a <__aeabi_fsub+0x1a6>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e7b1      	b.n	8000d58 <__aeabi_fsub+0x2d4>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	d0f1      	beq.n	8000ddc <__aeabi_fsub+0x358>
 8000df8:	0013      	movs	r3, r2
 8000dfa:	2500      	movs	r5, #0
 8000dfc:	e6fc      	b.n	8000bf8 <__aeabi_fsub+0x174>
 8000dfe:	2500      	movs	r5, #0
 8000e00:	e6fa      	b.n	8000bf8 <__aeabi_fsub+0x174>
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	7dffffff 	.word	0x7dffffff
 8000e08:	fbffffff 	.word	0xfbffffff

08000e0c <__aeabi_f2iz>:
 8000e0c:	0241      	lsls	r1, r0, #9
 8000e0e:	0042      	lsls	r2, r0, #1
 8000e10:	0fc3      	lsrs	r3, r0, #31
 8000e12:	0a49      	lsrs	r1, r1, #9
 8000e14:	0e12      	lsrs	r2, r2, #24
 8000e16:	2000      	movs	r0, #0
 8000e18:	2a7e      	cmp	r2, #126	; 0x7e
 8000e1a:	d90d      	bls.n	8000e38 <__aeabi_f2iz+0x2c>
 8000e1c:	2a9d      	cmp	r2, #157	; 0x9d
 8000e1e:	d80c      	bhi.n	8000e3a <__aeabi_f2iz+0x2e>
 8000e20:	2080      	movs	r0, #128	; 0x80
 8000e22:	0400      	lsls	r0, r0, #16
 8000e24:	4301      	orrs	r1, r0
 8000e26:	2a95      	cmp	r2, #149	; 0x95
 8000e28:	dc0a      	bgt.n	8000e40 <__aeabi_f2iz+0x34>
 8000e2a:	2096      	movs	r0, #150	; 0x96
 8000e2c:	1a82      	subs	r2, r0, r2
 8000e2e:	40d1      	lsrs	r1, r2
 8000e30:	4248      	negs	r0, r1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_f2iz+0x2c>
 8000e36:	0008      	movs	r0, r1
 8000e38:	4770      	bx	lr
 8000e3a:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <__aeabi_f2iz+0x3c>)
 8000e3c:	1898      	adds	r0, r3, r2
 8000e3e:	e7fb      	b.n	8000e38 <__aeabi_f2iz+0x2c>
 8000e40:	3a96      	subs	r2, #150	; 0x96
 8000e42:	4091      	lsls	r1, r2
 8000e44:	e7f4      	b.n	8000e30 <__aeabi_f2iz+0x24>
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	7fffffff 	.word	0x7fffffff

08000e4c <__aeabi_ui2f>:
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	1e04      	subs	r4, r0, #0
 8000e50:	d034      	beq.n	8000ebc <__aeabi_ui2f+0x70>
 8000e52:	f000 febb 	bl	8001bcc <__clzsi2>
 8000e56:	229e      	movs	r2, #158	; 0x9e
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	2a96      	cmp	r2, #150	; 0x96
 8000e5c:	dc07      	bgt.n	8000e6e <__aeabi_ui2f+0x22>
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	2808      	cmp	r0, #8
 8000e62:	dd2e      	ble.n	8000ec2 <__aeabi_ui2f+0x76>
 8000e64:	3808      	subs	r0, #8
 8000e66:	4084      	lsls	r4, r0
 8000e68:	0260      	lsls	r0, r4, #9
 8000e6a:	0a40      	lsrs	r0, r0, #9
 8000e6c:	e021      	b.n	8000eb2 <__aeabi_ui2f+0x66>
 8000e6e:	2a99      	cmp	r2, #153	; 0x99
 8000e70:	dd09      	ble.n	8000e86 <__aeabi_ui2f+0x3a>
 8000e72:	0003      	movs	r3, r0
 8000e74:	0021      	movs	r1, r4
 8000e76:	331b      	adds	r3, #27
 8000e78:	4099      	lsls	r1, r3
 8000e7a:	1e4b      	subs	r3, r1, #1
 8000e7c:	4199      	sbcs	r1, r3
 8000e7e:	2305      	movs	r3, #5
 8000e80:	1a1b      	subs	r3, r3, r0
 8000e82:	40dc      	lsrs	r4, r3
 8000e84:	430c      	orrs	r4, r1
 8000e86:	2805      	cmp	r0, #5
 8000e88:	dd01      	ble.n	8000e8e <__aeabi_ui2f+0x42>
 8000e8a:	1f43      	subs	r3, r0, #5
 8000e8c:	409c      	lsls	r4, r3
 8000e8e:	0023      	movs	r3, r4
 8000e90:	490d      	ldr	r1, [pc, #52]	; (8000ec8 <__aeabi_ui2f+0x7c>)
 8000e92:	400b      	ands	r3, r1
 8000e94:	0765      	lsls	r5, r4, #29
 8000e96:	d009      	beq.n	8000eac <__aeabi_ui2f+0x60>
 8000e98:	250f      	movs	r5, #15
 8000e9a:	402c      	ands	r4, r5
 8000e9c:	2c04      	cmp	r4, #4
 8000e9e:	d005      	beq.n	8000eac <__aeabi_ui2f+0x60>
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	015c      	lsls	r4, r3, #5
 8000ea4:	d502      	bpl.n	8000eac <__aeabi_ui2f+0x60>
 8000ea6:	229f      	movs	r2, #159	; 0x9f
 8000ea8:	400b      	ands	r3, r1
 8000eaa:	1a12      	subs	r2, r2, r0
 8000eac:	019b      	lsls	r3, r3, #6
 8000eae:	0a58      	lsrs	r0, r3, #9
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	0240      	lsls	r0, r0, #9
 8000eb4:	05d2      	lsls	r2, r2, #23
 8000eb6:	0a40      	lsrs	r0, r0, #9
 8000eb8:	4310      	orrs	r0, r2
 8000eba:	bd70      	pop	{r4, r5, r6, pc}
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	e7f7      	b.n	8000eb2 <__aeabi_ui2f+0x66>
 8000ec2:	0260      	lsls	r0, r4, #9
 8000ec4:	0a40      	lsrs	r0, r0, #9
 8000ec6:	e7f4      	b.n	8000eb2 <__aeabi_ui2f+0x66>
 8000ec8:	fbffffff 	.word	0xfbffffff

08000ecc <__aeabi_dmul>:
 8000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ece:	4657      	mov	r7, sl
 8000ed0:	46de      	mov	lr, fp
 8000ed2:	464e      	mov	r6, r9
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	b5e0      	push	{r5, r6, r7, lr}
 8000ed8:	4683      	mov	fp, r0
 8000eda:	0006      	movs	r6, r0
 8000edc:	030f      	lsls	r7, r1, #12
 8000ede:	0048      	lsls	r0, r1, #1
 8000ee0:	b087      	sub	sp, #28
 8000ee2:	4692      	mov	sl, r2
 8000ee4:	001d      	movs	r5, r3
 8000ee6:	0b3f      	lsrs	r7, r7, #12
 8000ee8:	0d40      	lsrs	r0, r0, #21
 8000eea:	0fcc      	lsrs	r4, r1, #31
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_dmul+0x26>
 8000ef0:	e06f      	b.n	8000fd2 <__aeabi_dmul+0x106>
 8000ef2:	4bde      	ldr	r3, [pc, #888]	; (800126c <__aeabi_dmul+0x3a0>)
 8000ef4:	4298      	cmp	r0, r3
 8000ef6:	d038      	beq.n	8000f6a <__aeabi_dmul+0x9e>
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	00ff      	lsls	r7, r7, #3
 8000efc:	041b      	lsls	r3, r3, #16
 8000efe:	431f      	orrs	r7, r3
 8000f00:	0f73      	lsrs	r3, r6, #29
 8000f02:	433b      	orrs	r3, r7
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	4bda      	ldr	r3, [pc, #872]	; (8001270 <__aeabi_dmul+0x3a4>)
 8000f08:	2700      	movs	r7, #0
 8000f0a:	4699      	mov	r9, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	469b      	mov	fp, r3
 8000f10:	00f6      	lsls	r6, r6, #3
 8000f12:	4481      	add	r9, r0
 8000f14:	032b      	lsls	r3, r5, #12
 8000f16:	0069      	lsls	r1, r5, #1
 8000f18:	0b1b      	lsrs	r3, r3, #12
 8000f1a:	4652      	mov	r2, sl
 8000f1c:	4698      	mov	r8, r3
 8000f1e:	0d49      	lsrs	r1, r1, #21
 8000f20:	0fed      	lsrs	r5, r5, #31
 8000f22:	2900      	cmp	r1, #0
 8000f24:	d100      	bne.n	8000f28 <__aeabi_dmul+0x5c>
 8000f26:	e085      	b.n	8001034 <__aeabi_dmul+0x168>
 8000f28:	4bd0      	ldr	r3, [pc, #832]	; (800126c <__aeabi_dmul+0x3a0>)
 8000f2a:	4299      	cmp	r1, r3
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dmul+0x64>
 8000f2e:	e073      	b.n	8001018 <__aeabi_dmul+0x14c>
 8000f30:	4643      	mov	r3, r8
 8000f32:	00da      	lsls	r2, r3, #3
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	48cc      	ldr	r0, [pc, #816]	; (8001270 <__aeabi_dmul+0x3a4>)
 8000f3e:	0f52      	lsrs	r2, r2, #29
 8000f40:	4684      	mov	ip, r0
 8000f42:	4313      	orrs	r3, r2
 8000f44:	4652      	mov	r2, sl
 8000f46:	2000      	movs	r0, #0
 8000f48:	4461      	add	r1, ip
 8000f4a:	00d2      	lsls	r2, r2, #3
 8000f4c:	4489      	add	r9, r1
 8000f4e:	0021      	movs	r1, r4
 8000f50:	4069      	eors	r1, r5
 8000f52:	9100      	str	r1, [sp, #0]
 8000f54:	468c      	mov	ip, r1
 8000f56:	2101      	movs	r1, #1
 8000f58:	4449      	add	r1, r9
 8000f5a:	468a      	mov	sl, r1
 8000f5c:	2f0f      	cmp	r7, #15
 8000f5e:	d900      	bls.n	8000f62 <__aeabi_dmul+0x96>
 8000f60:	e090      	b.n	8001084 <__aeabi_dmul+0x1b8>
 8000f62:	49c4      	ldr	r1, [pc, #784]	; (8001274 <__aeabi_dmul+0x3a8>)
 8000f64:	00bf      	lsls	r7, r7, #2
 8000f66:	59cf      	ldr	r7, [r1, r7]
 8000f68:	46bf      	mov	pc, r7
 8000f6a:	465b      	mov	r3, fp
 8000f6c:	433b      	orrs	r3, r7
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	d000      	beq.n	8000f74 <__aeabi_dmul+0xa8>
 8000f72:	e16a      	b.n	800124a <__aeabi_dmul+0x37e>
 8000f74:	2302      	movs	r3, #2
 8000f76:	2708      	movs	r7, #8
 8000f78:	2600      	movs	r6, #0
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	469b      	mov	fp, r3
 8000f7e:	e7c9      	b.n	8000f14 <__aeabi_dmul+0x48>
 8000f80:	0032      	movs	r2, r6
 8000f82:	4658      	mov	r0, fp
 8000f84:	9b01      	ldr	r3, [sp, #4]
 8000f86:	4661      	mov	r1, ip
 8000f88:	9100      	str	r1, [sp, #0]
 8000f8a:	2802      	cmp	r0, #2
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dmul+0xc4>
 8000f8e:	e075      	b.n	800107c <__aeabi_dmul+0x1b0>
 8000f90:	2803      	cmp	r0, #3
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dmul+0xca>
 8000f94:	e1fe      	b.n	8001394 <__aeabi_dmul+0x4c8>
 8000f96:	2801      	cmp	r0, #1
 8000f98:	d000      	beq.n	8000f9c <__aeabi_dmul+0xd0>
 8000f9a:	e12c      	b.n	80011f6 <__aeabi_dmul+0x32a>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	2700      	movs	r7, #0
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	033f      	lsls	r7, r7, #12
 8000fa6:	0d2a      	lsrs	r2, r5, #20
 8000fa8:	0b3f      	lsrs	r7, r7, #12
 8000faa:	48b3      	ldr	r0, [pc, #716]	; (8001278 <__aeabi_dmul+0x3ac>)
 8000fac:	0512      	lsls	r2, r2, #20
 8000fae:	433a      	orrs	r2, r7
 8000fb0:	4002      	ands	r2, r0
 8000fb2:	051b      	lsls	r3, r3, #20
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	9a00      	ldr	r2, [sp, #0]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	07d1      	lsls	r1, r2, #31
 8000fbc:	085b      	lsrs	r3, r3, #1
 8000fbe:	430b      	orrs	r3, r1
 8000fc0:	0030      	movs	r0, r6
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	b007      	add	sp, #28
 8000fc6:	bc3c      	pop	{r2, r3, r4, r5}
 8000fc8:	4690      	mov	r8, r2
 8000fca:	4699      	mov	r9, r3
 8000fcc:	46a2      	mov	sl, r4
 8000fce:	46ab      	mov	fp, r5
 8000fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd2:	465b      	mov	r3, fp
 8000fd4:	433b      	orrs	r3, r7
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dmul+0x110>
 8000fda:	e12f      	b.n	800123c <__aeabi_dmul+0x370>
 8000fdc:	2f00      	cmp	r7, #0
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_dmul+0x116>
 8000fe0:	e1a5      	b.n	800132e <__aeabi_dmul+0x462>
 8000fe2:	0038      	movs	r0, r7
 8000fe4:	f000 fdf2 	bl	8001bcc <__clzsi2>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	3b0b      	subs	r3, #11
 8000fec:	2b1c      	cmp	r3, #28
 8000fee:	dd00      	ble.n	8000ff2 <__aeabi_dmul+0x126>
 8000ff0:	e196      	b.n	8001320 <__aeabi_dmul+0x454>
 8000ff2:	221d      	movs	r2, #29
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	465a      	mov	r2, fp
 8000ff8:	0001      	movs	r1, r0
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	465e      	mov	r6, fp
 8000ffe:	3908      	subs	r1, #8
 8001000:	408f      	lsls	r7, r1
 8001002:	0013      	movs	r3, r2
 8001004:	408e      	lsls	r6, r1
 8001006:	433b      	orrs	r3, r7
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	4b9c      	ldr	r3, [pc, #624]	; (800127c <__aeabi_dmul+0x3b0>)
 800100c:	2700      	movs	r7, #0
 800100e:	1a1b      	subs	r3, r3, r0
 8001010:	4699      	mov	r9, r3
 8001012:	2300      	movs	r3, #0
 8001014:	469b      	mov	fp, r3
 8001016:	e77d      	b.n	8000f14 <__aeabi_dmul+0x48>
 8001018:	4641      	mov	r1, r8
 800101a:	4653      	mov	r3, sl
 800101c:	430b      	orrs	r3, r1
 800101e:	4993      	ldr	r1, [pc, #588]	; (800126c <__aeabi_dmul+0x3a0>)
 8001020:	468c      	mov	ip, r1
 8001022:	44e1      	add	r9, ip
 8001024:	2b00      	cmp	r3, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dmul+0x15e>
 8001028:	e11a      	b.n	8001260 <__aeabi_dmul+0x394>
 800102a:	2202      	movs	r2, #2
 800102c:	2002      	movs	r0, #2
 800102e:	4317      	orrs	r7, r2
 8001030:	2200      	movs	r2, #0
 8001032:	e78c      	b.n	8000f4e <__aeabi_dmul+0x82>
 8001034:	4313      	orrs	r3, r2
 8001036:	d100      	bne.n	800103a <__aeabi_dmul+0x16e>
 8001038:	e10d      	b.n	8001256 <__aeabi_dmul+0x38a>
 800103a:	4643      	mov	r3, r8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_dmul+0x176>
 8001040:	e181      	b.n	8001346 <__aeabi_dmul+0x47a>
 8001042:	4640      	mov	r0, r8
 8001044:	f000 fdc2 	bl	8001bcc <__clzsi2>
 8001048:	0002      	movs	r2, r0
 800104a:	3a0b      	subs	r2, #11
 800104c:	2a1c      	cmp	r2, #28
 800104e:	dd00      	ble.n	8001052 <__aeabi_dmul+0x186>
 8001050:	e172      	b.n	8001338 <__aeabi_dmul+0x46c>
 8001052:	0001      	movs	r1, r0
 8001054:	4643      	mov	r3, r8
 8001056:	3908      	subs	r1, #8
 8001058:	408b      	lsls	r3, r1
 800105a:	4698      	mov	r8, r3
 800105c:	231d      	movs	r3, #29
 800105e:	1a9a      	subs	r2, r3, r2
 8001060:	4653      	mov	r3, sl
 8001062:	40d3      	lsrs	r3, r2
 8001064:	001a      	movs	r2, r3
 8001066:	4643      	mov	r3, r8
 8001068:	4313      	orrs	r3, r2
 800106a:	4652      	mov	r2, sl
 800106c:	408a      	lsls	r2, r1
 800106e:	4649      	mov	r1, r9
 8001070:	1a08      	subs	r0, r1, r0
 8001072:	4982      	ldr	r1, [pc, #520]	; (800127c <__aeabi_dmul+0x3b0>)
 8001074:	4689      	mov	r9, r1
 8001076:	4481      	add	r9, r0
 8001078:	2000      	movs	r0, #0
 800107a:	e768      	b.n	8000f4e <__aeabi_dmul+0x82>
 800107c:	4b7b      	ldr	r3, [pc, #492]	; (800126c <__aeabi_dmul+0x3a0>)
 800107e:	2700      	movs	r7, #0
 8001080:	2600      	movs	r6, #0
 8001082:	e78e      	b.n	8000fa2 <__aeabi_dmul+0xd6>
 8001084:	0c14      	lsrs	r4, r2, #16
 8001086:	0412      	lsls	r2, r2, #16
 8001088:	0c12      	lsrs	r2, r2, #16
 800108a:	0011      	movs	r1, r2
 800108c:	0c37      	lsrs	r7, r6, #16
 800108e:	0436      	lsls	r6, r6, #16
 8001090:	0c35      	lsrs	r5, r6, #16
 8001092:	4379      	muls	r1, r7
 8001094:	0028      	movs	r0, r5
 8001096:	468c      	mov	ip, r1
 8001098:	002e      	movs	r6, r5
 800109a:	4360      	muls	r0, r4
 800109c:	4460      	add	r0, ip
 800109e:	4683      	mov	fp, r0
 80010a0:	4356      	muls	r6, r2
 80010a2:	0021      	movs	r1, r4
 80010a4:	0c30      	lsrs	r0, r6, #16
 80010a6:	4680      	mov	r8, r0
 80010a8:	4658      	mov	r0, fp
 80010aa:	4379      	muls	r1, r7
 80010ac:	4440      	add	r0, r8
 80010ae:	9102      	str	r1, [sp, #8]
 80010b0:	4584      	cmp	ip, r0
 80010b2:	d906      	bls.n	80010c2 <__aeabi_dmul+0x1f6>
 80010b4:	4688      	mov	r8, r1
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	0249      	lsls	r1, r1, #9
 80010ba:	468c      	mov	ip, r1
 80010bc:	44e0      	add	r8, ip
 80010be:	4641      	mov	r1, r8
 80010c0:	9102      	str	r1, [sp, #8]
 80010c2:	0436      	lsls	r6, r6, #16
 80010c4:	0c01      	lsrs	r1, r0, #16
 80010c6:	0c36      	lsrs	r6, r6, #16
 80010c8:	0400      	lsls	r0, r0, #16
 80010ca:	468b      	mov	fp, r1
 80010cc:	1981      	adds	r1, r0, r6
 80010ce:	0c1e      	lsrs	r6, r3, #16
 80010d0:	041b      	lsls	r3, r3, #16
 80010d2:	0c1b      	lsrs	r3, r3, #16
 80010d4:	9103      	str	r1, [sp, #12]
 80010d6:	0019      	movs	r1, r3
 80010d8:	4379      	muls	r1, r7
 80010da:	468c      	mov	ip, r1
 80010dc:	0028      	movs	r0, r5
 80010de:	4375      	muls	r5, r6
 80010e0:	4465      	add	r5, ip
 80010e2:	46a8      	mov	r8, r5
 80010e4:	4358      	muls	r0, r3
 80010e6:	0c05      	lsrs	r5, r0, #16
 80010e8:	4445      	add	r5, r8
 80010ea:	4377      	muls	r7, r6
 80010ec:	42a9      	cmp	r1, r5
 80010ee:	d903      	bls.n	80010f8 <__aeabi_dmul+0x22c>
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	0249      	lsls	r1, r1, #9
 80010f4:	468c      	mov	ip, r1
 80010f6:	4467      	add	r7, ip
 80010f8:	0c29      	lsrs	r1, r5, #16
 80010fa:	468c      	mov	ip, r1
 80010fc:	0039      	movs	r1, r7
 80010fe:	0400      	lsls	r0, r0, #16
 8001100:	0c00      	lsrs	r0, r0, #16
 8001102:	042d      	lsls	r5, r5, #16
 8001104:	182d      	adds	r5, r5, r0
 8001106:	4461      	add	r1, ip
 8001108:	44ab      	add	fp, r5
 800110a:	9105      	str	r1, [sp, #20]
 800110c:	4659      	mov	r1, fp
 800110e:	9104      	str	r1, [sp, #16]
 8001110:	9901      	ldr	r1, [sp, #4]
 8001112:	040f      	lsls	r7, r1, #16
 8001114:	0c3f      	lsrs	r7, r7, #16
 8001116:	0c08      	lsrs	r0, r1, #16
 8001118:	0039      	movs	r1, r7
 800111a:	4351      	muls	r1, r2
 800111c:	4342      	muls	r2, r0
 800111e:	4690      	mov	r8, r2
 8001120:	0002      	movs	r2, r0
 8001122:	468c      	mov	ip, r1
 8001124:	0c09      	lsrs	r1, r1, #16
 8001126:	468b      	mov	fp, r1
 8001128:	4362      	muls	r2, r4
 800112a:	437c      	muls	r4, r7
 800112c:	4444      	add	r4, r8
 800112e:	445c      	add	r4, fp
 8001130:	45a0      	cmp	r8, r4
 8001132:	d903      	bls.n	800113c <__aeabi_dmul+0x270>
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	0249      	lsls	r1, r1, #9
 8001138:	4688      	mov	r8, r1
 800113a:	4442      	add	r2, r8
 800113c:	0c21      	lsrs	r1, r4, #16
 800113e:	4688      	mov	r8, r1
 8001140:	4661      	mov	r1, ip
 8001142:	0409      	lsls	r1, r1, #16
 8001144:	0c09      	lsrs	r1, r1, #16
 8001146:	468c      	mov	ip, r1
 8001148:	0039      	movs	r1, r7
 800114a:	4359      	muls	r1, r3
 800114c:	4343      	muls	r3, r0
 800114e:	4370      	muls	r0, r6
 8001150:	437e      	muls	r6, r7
 8001152:	0c0f      	lsrs	r7, r1, #16
 8001154:	18f6      	adds	r6, r6, r3
 8001156:	0424      	lsls	r4, r4, #16
 8001158:	19be      	adds	r6, r7, r6
 800115a:	4464      	add	r4, ip
 800115c:	4442      	add	r2, r8
 800115e:	468c      	mov	ip, r1
 8001160:	42b3      	cmp	r3, r6
 8001162:	d903      	bls.n	800116c <__aeabi_dmul+0x2a0>
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	025b      	lsls	r3, r3, #9
 8001168:	4698      	mov	r8, r3
 800116a:	4440      	add	r0, r8
 800116c:	9b02      	ldr	r3, [sp, #8]
 800116e:	4661      	mov	r1, ip
 8001170:	4698      	mov	r8, r3
 8001172:	9b04      	ldr	r3, [sp, #16]
 8001174:	0437      	lsls	r7, r6, #16
 8001176:	4443      	add	r3, r8
 8001178:	469b      	mov	fp, r3
 800117a:	45ab      	cmp	fp, r5
 800117c:	41ad      	sbcs	r5, r5
 800117e:	426b      	negs	r3, r5
 8001180:	040d      	lsls	r5, r1, #16
 8001182:	9905      	ldr	r1, [sp, #20]
 8001184:	0c2d      	lsrs	r5, r5, #16
 8001186:	468c      	mov	ip, r1
 8001188:	197f      	adds	r7, r7, r5
 800118a:	4467      	add	r7, ip
 800118c:	18fd      	adds	r5, r7, r3
 800118e:	46a8      	mov	r8, r5
 8001190:	465d      	mov	r5, fp
 8001192:	192d      	adds	r5, r5, r4
 8001194:	42a5      	cmp	r5, r4
 8001196:	41a4      	sbcs	r4, r4
 8001198:	4693      	mov	fp, r2
 800119a:	4264      	negs	r4, r4
 800119c:	46a4      	mov	ip, r4
 800119e:	44c3      	add	fp, r8
 80011a0:	44dc      	add	ip, fp
 80011a2:	428f      	cmp	r7, r1
 80011a4:	41bf      	sbcs	r7, r7
 80011a6:	4598      	cmp	r8, r3
 80011a8:	419b      	sbcs	r3, r3
 80011aa:	4593      	cmp	fp, r2
 80011ac:	4192      	sbcs	r2, r2
 80011ae:	45a4      	cmp	ip, r4
 80011b0:	41a4      	sbcs	r4, r4
 80011b2:	425b      	negs	r3, r3
 80011b4:	427f      	negs	r7, r7
 80011b6:	431f      	orrs	r7, r3
 80011b8:	0c36      	lsrs	r6, r6, #16
 80011ba:	4252      	negs	r2, r2
 80011bc:	4264      	negs	r4, r4
 80011be:	19bf      	adds	r7, r7, r6
 80011c0:	4322      	orrs	r2, r4
 80011c2:	18bf      	adds	r7, r7, r2
 80011c4:	4662      	mov	r2, ip
 80011c6:	1838      	adds	r0, r7, r0
 80011c8:	0243      	lsls	r3, r0, #9
 80011ca:	0dd2      	lsrs	r2, r2, #23
 80011cc:	9903      	ldr	r1, [sp, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	026a      	lsls	r2, r5, #9
 80011d2:	430a      	orrs	r2, r1
 80011d4:	1e50      	subs	r0, r2, #1
 80011d6:	4182      	sbcs	r2, r0
 80011d8:	4661      	mov	r1, ip
 80011da:	0ded      	lsrs	r5, r5, #23
 80011dc:	432a      	orrs	r2, r5
 80011de:	024e      	lsls	r6, r1, #9
 80011e0:	4332      	orrs	r2, r6
 80011e2:	01d9      	lsls	r1, r3, #7
 80011e4:	d400      	bmi.n	80011e8 <__aeabi_dmul+0x31c>
 80011e6:	e0b3      	b.n	8001350 <__aeabi_dmul+0x484>
 80011e8:	2601      	movs	r6, #1
 80011ea:	0850      	lsrs	r0, r2, #1
 80011ec:	4032      	ands	r2, r6
 80011ee:	4302      	orrs	r2, r0
 80011f0:	07de      	lsls	r6, r3, #31
 80011f2:	4332      	orrs	r2, r6
 80011f4:	085b      	lsrs	r3, r3, #1
 80011f6:	4c22      	ldr	r4, [pc, #136]	; (8001280 <__aeabi_dmul+0x3b4>)
 80011f8:	4454      	add	r4, sl
 80011fa:	2c00      	cmp	r4, #0
 80011fc:	dd62      	ble.n	80012c4 <__aeabi_dmul+0x3f8>
 80011fe:	0751      	lsls	r1, r2, #29
 8001200:	d009      	beq.n	8001216 <__aeabi_dmul+0x34a>
 8001202:	200f      	movs	r0, #15
 8001204:	4010      	ands	r0, r2
 8001206:	2804      	cmp	r0, #4
 8001208:	d005      	beq.n	8001216 <__aeabi_dmul+0x34a>
 800120a:	1d10      	adds	r0, r2, #4
 800120c:	4290      	cmp	r0, r2
 800120e:	4192      	sbcs	r2, r2
 8001210:	4252      	negs	r2, r2
 8001212:	189b      	adds	r3, r3, r2
 8001214:	0002      	movs	r2, r0
 8001216:	01d9      	lsls	r1, r3, #7
 8001218:	d504      	bpl.n	8001224 <__aeabi_dmul+0x358>
 800121a:	2480      	movs	r4, #128	; 0x80
 800121c:	4819      	ldr	r0, [pc, #100]	; (8001284 <__aeabi_dmul+0x3b8>)
 800121e:	00e4      	lsls	r4, r4, #3
 8001220:	4003      	ands	r3, r0
 8001222:	4454      	add	r4, sl
 8001224:	4818      	ldr	r0, [pc, #96]	; (8001288 <__aeabi_dmul+0x3bc>)
 8001226:	4284      	cmp	r4, r0
 8001228:	dd00      	ble.n	800122c <__aeabi_dmul+0x360>
 800122a:	e727      	b.n	800107c <__aeabi_dmul+0x1b0>
 800122c:	075e      	lsls	r6, r3, #29
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	08d2      	lsrs	r2, r2, #3
 8001232:	0b1f      	lsrs	r7, r3, #12
 8001234:	0563      	lsls	r3, r4, #21
 8001236:	4316      	orrs	r6, r2
 8001238:	0d5b      	lsrs	r3, r3, #21
 800123a:	e6b2      	b.n	8000fa2 <__aeabi_dmul+0xd6>
 800123c:	2300      	movs	r3, #0
 800123e:	4699      	mov	r9, r3
 8001240:	3301      	adds	r3, #1
 8001242:	2704      	movs	r7, #4
 8001244:	2600      	movs	r6, #0
 8001246:	469b      	mov	fp, r3
 8001248:	e664      	b.n	8000f14 <__aeabi_dmul+0x48>
 800124a:	2303      	movs	r3, #3
 800124c:	9701      	str	r7, [sp, #4]
 800124e:	4681      	mov	r9, r0
 8001250:	270c      	movs	r7, #12
 8001252:	469b      	mov	fp, r3
 8001254:	e65e      	b.n	8000f14 <__aeabi_dmul+0x48>
 8001256:	2201      	movs	r2, #1
 8001258:	2001      	movs	r0, #1
 800125a:	4317      	orrs	r7, r2
 800125c:	2200      	movs	r2, #0
 800125e:	e676      	b.n	8000f4e <__aeabi_dmul+0x82>
 8001260:	2303      	movs	r3, #3
 8001262:	2003      	movs	r0, #3
 8001264:	431f      	orrs	r7, r3
 8001266:	4643      	mov	r3, r8
 8001268:	e671      	b.n	8000f4e <__aeabi_dmul+0x82>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff
 8001270:	fffffc01 	.word	0xfffffc01
 8001274:	08008450 	.word	0x08008450
 8001278:	800fffff 	.word	0x800fffff
 800127c:	fffffc0d 	.word	0xfffffc0d
 8001280:	000003ff 	.word	0x000003ff
 8001284:	feffffff 	.word	0xfeffffff
 8001288:	000007fe 	.word	0x000007fe
 800128c:	2300      	movs	r3, #0
 800128e:	2780      	movs	r7, #128	; 0x80
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	033f      	lsls	r7, r7, #12
 8001294:	2600      	movs	r6, #0
 8001296:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <__aeabi_dmul+0x4d8>)
 8001298:	e683      	b.n	8000fa2 <__aeabi_dmul+0xd6>
 800129a:	9b01      	ldr	r3, [sp, #4]
 800129c:	0032      	movs	r2, r6
 800129e:	46a4      	mov	ip, r4
 80012a0:	4658      	mov	r0, fp
 80012a2:	e670      	b.n	8000f86 <__aeabi_dmul+0xba>
 80012a4:	46ac      	mov	ip, r5
 80012a6:	e66e      	b.n	8000f86 <__aeabi_dmul+0xba>
 80012a8:	2780      	movs	r7, #128	; 0x80
 80012aa:	9901      	ldr	r1, [sp, #4]
 80012ac:	033f      	lsls	r7, r7, #12
 80012ae:	4239      	tst	r1, r7
 80012b0:	d02d      	beq.n	800130e <__aeabi_dmul+0x442>
 80012b2:	423b      	tst	r3, r7
 80012b4:	d12b      	bne.n	800130e <__aeabi_dmul+0x442>
 80012b6:	431f      	orrs	r7, r3
 80012b8:	033f      	lsls	r7, r7, #12
 80012ba:	0b3f      	lsrs	r7, r7, #12
 80012bc:	9500      	str	r5, [sp, #0]
 80012be:	0016      	movs	r6, r2
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <__aeabi_dmul+0x4d8>)
 80012c2:	e66e      	b.n	8000fa2 <__aeabi_dmul+0xd6>
 80012c4:	2501      	movs	r5, #1
 80012c6:	1b2d      	subs	r5, r5, r4
 80012c8:	2d38      	cmp	r5, #56	; 0x38
 80012ca:	dd00      	ble.n	80012ce <__aeabi_dmul+0x402>
 80012cc:	e666      	b.n	8000f9c <__aeabi_dmul+0xd0>
 80012ce:	2d1f      	cmp	r5, #31
 80012d0:	dc40      	bgt.n	8001354 <__aeabi_dmul+0x488>
 80012d2:	4835      	ldr	r0, [pc, #212]	; (80013a8 <__aeabi_dmul+0x4dc>)
 80012d4:	001c      	movs	r4, r3
 80012d6:	4450      	add	r0, sl
 80012d8:	0016      	movs	r6, r2
 80012da:	4082      	lsls	r2, r0
 80012dc:	4084      	lsls	r4, r0
 80012de:	40ee      	lsrs	r6, r5
 80012e0:	1e50      	subs	r0, r2, #1
 80012e2:	4182      	sbcs	r2, r0
 80012e4:	4334      	orrs	r4, r6
 80012e6:	4314      	orrs	r4, r2
 80012e8:	40eb      	lsrs	r3, r5
 80012ea:	0762      	lsls	r2, r4, #29
 80012ec:	d009      	beq.n	8001302 <__aeabi_dmul+0x436>
 80012ee:	220f      	movs	r2, #15
 80012f0:	4022      	ands	r2, r4
 80012f2:	2a04      	cmp	r2, #4
 80012f4:	d005      	beq.n	8001302 <__aeabi_dmul+0x436>
 80012f6:	0022      	movs	r2, r4
 80012f8:	1d14      	adds	r4, r2, #4
 80012fa:	4294      	cmp	r4, r2
 80012fc:	4180      	sbcs	r0, r0
 80012fe:	4240      	negs	r0, r0
 8001300:	181b      	adds	r3, r3, r0
 8001302:	021a      	lsls	r2, r3, #8
 8001304:	d53e      	bpl.n	8001384 <__aeabi_dmul+0x4b8>
 8001306:	2301      	movs	r3, #1
 8001308:	2700      	movs	r7, #0
 800130a:	2600      	movs	r6, #0
 800130c:	e649      	b.n	8000fa2 <__aeabi_dmul+0xd6>
 800130e:	2780      	movs	r7, #128	; 0x80
 8001310:	9b01      	ldr	r3, [sp, #4]
 8001312:	033f      	lsls	r7, r7, #12
 8001314:	431f      	orrs	r7, r3
 8001316:	033f      	lsls	r7, r7, #12
 8001318:	0b3f      	lsrs	r7, r7, #12
 800131a:	9400      	str	r4, [sp, #0]
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <__aeabi_dmul+0x4d8>)
 800131e:	e640      	b.n	8000fa2 <__aeabi_dmul+0xd6>
 8001320:	0003      	movs	r3, r0
 8001322:	465a      	mov	r2, fp
 8001324:	3b28      	subs	r3, #40	; 0x28
 8001326:	409a      	lsls	r2, r3
 8001328:	2600      	movs	r6, #0
 800132a:	9201      	str	r2, [sp, #4]
 800132c:	e66d      	b.n	800100a <__aeabi_dmul+0x13e>
 800132e:	4658      	mov	r0, fp
 8001330:	f000 fc4c 	bl	8001bcc <__clzsi2>
 8001334:	3020      	adds	r0, #32
 8001336:	e657      	b.n	8000fe8 <__aeabi_dmul+0x11c>
 8001338:	0003      	movs	r3, r0
 800133a:	4652      	mov	r2, sl
 800133c:	3b28      	subs	r3, #40	; 0x28
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	2200      	movs	r2, #0
 8001344:	e693      	b.n	800106e <__aeabi_dmul+0x1a2>
 8001346:	4650      	mov	r0, sl
 8001348:	f000 fc40 	bl	8001bcc <__clzsi2>
 800134c:	3020      	adds	r0, #32
 800134e:	e67b      	b.n	8001048 <__aeabi_dmul+0x17c>
 8001350:	46ca      	mov	sl, r9
 8001352:	e750      	b.n	80011f6 <__aeabi_dmul+0x32a>
 8001354:	201f      	movs	r0, #31
 8001356:	001e      	movs	r6, r3
 8001358:	4240      	negs	r0, r0
 800135a:	1b04      	subs	r4, r0, r4
 800135c:	40e6      	lsrs	r6, r4
 800135e:	2d20      	cmp	r5, #32
 8001360:	d003      	beq.n	800136a <__aeabi_dmul+0x49e>
 8001362:	4c12      	ldr	r4, [pc, #72]	; (80013ac <__aeabi_dmul+0x4e0>)
 8001364:	4454      	add	r4, sl
 8001366:	40a3      	lsls	r3, r4
 8001368:	431a      	orrs	r2, r3
 800136a:	1e50      	subs	r0, r2, #1
 800136c:	4182      	sbcs	r2, r0
 800136e:	4332      	orrs	r2, r6
 8001370:	2607      	movs	r6, #7
 8001372:	2700      	movs	r7, #0
 8001374:	4016      	ands	r6, r2
 8001376:	d009      	beq.n	800138c <__aeabi_dmul+0x4c0>
 8001378:	200f      	movs	r0, #15
 800137a:	2300      	movs	r3, #0
 800137c:	4010      	ands	r0, r2
 800137e:	0014      	movs	r4, r2
 8001380:	2804      	cmp	r0, #4
 8001382:	d1b9      	bne.n	80012f8 <__aeabi_dmul+0x42c>
 8001384:	0022      	movs	r2, r4
 8001386:	075e      	lsls	r6, r3, #29
 8001388:	025b      	lsls	r3, r3, #9
 800138a:	0b1f      	lsrs	r7, r3, #12
 800138c:	08d2      	lsrs	r2, r2, #3
 800138e:	4316      	orrs	r6, r2
 8001390:	2300      	movs	r3, #0
 8001392:	e606      	b.n	8000fa2 <__aeabi_dmul+0xd6>
 8001394:	2780      	movs	r7, #128	; 0x80
 8001396:	033f      	lsls	r7, r7, #12
 8001398:	431f      	orrs	r7, r3
 800139a:	033f      	lsls	r7, r7, #12
 800139c:	0b3f      	lsrs	r7, r7, #12
 800139e:	0016      	movs	r6, r2
 80013a0:	4b00      	ldr	r3, [pc, #0]	; (80013a4 <__aeabi_dmul+0x4d8>)
 80013a2:	e5fe      	b.n	8000fa2 <__aeabi_dmul+0xd6>
 80013a4:	000007ff 	.word	0x000007ff
 80013a8:	0000041e 	.word	0x0000041e
 80013ac:	0000043e 	.word	0x0000043e

080013b0 <__aeabi_dsub>:
 80013b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b2:	4657      	mov	r7, sl
 80013b4:	464e      	mov	r6, r9
 80013b6:	4645      	mov	r5, r8
 80013b8:	46de      	mov	lr, fp
 80013ba:	000c      	movs	r4, r1
 80013bc:	0309      	lsls	r1, r1, #12
 80013be:	b5e0      	push	{r5, r6, r7, lr}
 80013c0:	0a49      	lsrs	r1, r1, #9
 80013c2:	0f46      	lsrs	r6, r0, #29
 80013c4:	005f      	lsls	r7, r3, #1
 80013c6:	4331      	orrs	r1, r6
 80013c8:	031e      	lsls	r6, r3, #12
 80013ca:	0fdb      	lsrs	r3, r3, #31
 80013cc:	0a76      	lsrs	r6, r6, #9
 80013ce:	469b      	mov	fp, r3
 80013d0:	0f53      	lsrs	r3, r2, #29
 80013d2:	4333      	orrs	r3, r6
 80013d4:	4ec8      	ldr	r6, [pc, #800]	; (80016f8 <__aeabi_dsub+0x348>)
 80013d6:	0065      	lsls	r5, r4, #1
 80013d8:	00c0      	lsls	r0, r0, #3
 80013da:	0fe4      	lsrs	r4, r4, #31
 80013dc:	00d2      	lsls	r2, r2, #3
 80013de:	0d6d      	lsrs	r5, r5, #21
 80013e0:	46a2      	mov	sl, r4
 80013e2:	4681      	mov	r9, r0
 80013e4:	0d7f      	lsrs	r7, r7, #21
 80013e6:	469c      	mov	ip, r3
 80013e8:	4690      	mov	r8, r2
 80013ea:	42b7      	cmp	r7, r6
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dsub+0x40>
 80013ee:	e0b9      	b.n	8001564 <__aeabi_dsub+0x1b4>
 80013f0:	465b      	mov	r3, fp
 80013f2:	2601      	movs	r6, #1
 80013f4:	4073      	eors	r3, r6
 80013f6:	469b      	mov	fp, r3
 80013f8:	1bee      	subs	r6, r5, r7
 80013fa:	45a3      	cmp	fp, r4
 80013fc:	d100      	bne.n	8001400 <__aeabi_dsub+0x50>
 80013fe:	e083      	b.n	8001508 <__aeabi_dsub+0x158>
 8001400:	2e00      	cmp	r6, #0
 8001402:	dd63      	ble.n	80014cc <__aeabi_dsub+0x11c>
 8001404:	2f00      	cmp	r7, #0
 8001406:	d000      	beq.n	800140a <__aeabi_dsub+0x5a>
 8001408:	e0b1      	b.n	800156e <__aeabi_dsub+0x1be>
 800140a:	4663      	mov	r3, ip
 800140c:	4313      	orrs	r3, r2
 800140e:	d100      	bne.n	8001412 <__aeabi_dsub+0x62>
 8001410:	e123      	b.n	800165a <__aeabi_dsub+0x2aa>
 8001412:	1e73      	subs	r3, r6, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d000      	beq.n	800141a <__aeabi_dsub+0x6a>
 8001418:	e1ba      	b.n	8001790 <__aeabi_dsub+0x3e0>
 800141a:	1a86      	subs	r6, r0, r2
 800141c:	4663      	mov	r3, ip
 800141e:	42b0      	cmp	r0, r6
 8001420:	4180      	sbcs	r0, r0
 8001422:	2501      	movs	r5, #1
 8001424:	1ac9      	subs	r1, r1, r3
 8001426:	4240      	negs	r0, r0
 8001428:	1a09      	subs	r1, r1, r0
 800142a:	020b      	lsls	r3, r1, #8
 800142c:	d400      	bmi.n	8001430 <__aeabi_dsub+0x80>
 800142e:	e147      	b.n	80016c0 <__aeabi_dsub+0x310>
 8001430:	0249      	lsls	r1, r1, #9
 8001432:	0a4b      	lsrs	r3, r1, #9
 8001434:	4698      	mov	r8, r3
 8001436:	4643      	mov	r3, r8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d100      	bne.n	800143e <__aeabi_dsub+0x8e>
 800143c:	e189      	b.n	8001752 <__aeabi_dsub+0x3a2>
 800143e:	4640      	mov	r0, r8
 8001440:	f000 fbc4 	bl	8001bcc <__clzsi2>
 8001444:	0003      	movs	r3, r0
 8001446:	3b08      	subs	r3, #8
 8001448:	2b1f      	cmp	r3, #31
 800144a:	dd00      	ble.n	800144e <__aeabi_dsub+0x9e>
 800144c:	e17c      	b.n	8001748 <__aeabi_dsub+0x398>
 800144e:	2220      	movs	r2, #32
 8001450:	0030      	movs	r0, r6
 8001452:	1ad2      	subs	r2, r2, r3
 8001454:	4641      	mov	r1, r8
 8001456:	40d0      	lsrs	r0, r2
 8001458:	4099      	lsls	r1, r3
 800145a:	0002      	movs	r2, r0
 800145c:	409e      	lsls	r6, r3
 800145e:	430a      	orrs	r2, r1
 8001460:	429d      	cmp	r5, r3
 8001462:	dd00      	ble.n	8001466 <__aeabi_dsub+0xb6>
 8001464:	e16a      	b.n	800173c <__aeabi_dsub+0x38c>
 8001466:	1b5d      	subs	r5, r3, r5
 8001468:	1c6b      	adds	r3, r5, #1
 800146a:	2b1f      	cmp	r3, #31
 800146c:	dd00      	ble.n	8001470 <__aeabi_dsub+0xc0>
 800146e:	e194      	b.n	800179a <__aeabi_dsub+0x3ea>
 8001470:	2120      	movs	r1, #32
 8001472:	0010      	movs	r0, r2
 8001474:	0035      	movs	r5, r6
 8001476:	1ac9      	subs	r1, r1, r3
 8001478:	408e      	lsls	r6, r1
 800147a:	40da      	lsrs	r2, r3
 800147c:	4088      	lsls	r0, r1
 800147e:	40dd      	lsrs	r5, r3
 8001480:	1e71      	subs	r1, r6, #1
 8001482:	418e      	sbcs	r6, r1
 8001484:	0011      	movs	r1, r2
 8001486:	2207      	movs	r2, #7
 8001488:	4328      	orrs	r0, r5
 800148a:	2500      	movs	r5, #0
 800148c:	4306      	orrs	r6, r0
 800148e:	4032      	ands	r2, r6
 8001490:	2a00      	cmp	r2, #0
 8001492:	d009      	beq.n	80014a8 <__aeabi_dsub+0xf8>
 8001494:	230f      	movs	r3, #15
 8001496:	4033      	ands	r3, r6
 8001498:	2b04      	cmp	r3, #4
 800149a:	d005      	beq.n	80014a8 <__aeabi_dsub+0xf8>
 800149c:	1d33      	adds	r3, r6, #4
 800149e:	42b3      	cmp	r3, r6
 80014a0:	41b6      	sbcs	r6, r6
 80014a2:	4276      	negs	r6, r6
 80014a4:	1989      	adds	r1, r1, r6
 80014a6:	001e      	movs	r6, r3
 80014a8:	020b      	lsls	r3, r1, #8
 80014aa:	d400      	bmi.n	80014ae <__aeabi_dsub+0xfe>
 80014ac:	e23d      	b.n	800192a <__aeabi_dsub+0x57a>
 80014ae:	1c6a      	adds	r2, r5, #1
 80014b0:	4b91      	ldr	r3, [pc, #580]	; (80016f8 <__aeabi_dsub+0x348>)
 80014b2:	0555      	lsls	r5, r2, #21
 80014b4:	0d6d      	lsrs	r5, r5, #21
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d100      	bne.n	80014bc <__aeabi_dsub+0x10c>
 80014ba:	e119      	b.n	80016f0 <__aeabi_dsub+0x340>
 80014bc:	4a8f      	ldr	r2, [pc, #572]	; (80016fc <__aeabi_dsub+0x34c>)
 80014be:	08f6      	lsrs	r6, r6, #3
 80014c0:	400a      	ands	r2, r1
 80014c2:	0757      	lsls	r7, r2, #29
 80014c4:	0252      	lsls	r2, r2, #9
 80014c6:	4337      	orrs	r7, r6
 80014c8:	0b12      	lsrs	r2, r2, #12
 80014ca:	e09b      	b.n	8001604 <__aeabi_dsub+0x254>
 80014cc:	2e00      	cmp	r6, #0
 80014ce:	d000      	beq.n	80014d2 <__aeabi_dsub+0x122>
 80014d0:	e0c5      	b.n	800165e <__aeabi_dsub+0x2ae>
 80014d2:	1c6e      	adds	r6, r5, #1
 80014d4:	0576      	lsls	r6, r6, #21
 80014d6:	0d76      	lsrs	r6, r6, #21
 80014d8:	2e01      	cmp	r6, #1
 80014da:	dc00      	bgt.n	80014de <__aeabi_dsub+0x12e>
 80014dc:	e148      	b.n	8001770 <__aeabi_dsub+0x3c0>
 80014de:	4667      	mov	r7, ip
 80014e0:	1a86      	subs	r6, r0, r2
 80014e2:	1bcb      	subs	r3, r1, r7
 80014e4:	42b0      	cmp	r0, r6
 80014e6:	41bf      	sbcs	r7, r7
 80014e8:	427f      	negs	r7, r7
 80014ea:	46b8      	mov	r8, r7
 80014ec:	001f      	movs	r7, r3
 80014ee:	4643      	mov	r3, r8
 80014f0:	1aff      	subs	r7, r7, r3
 80014f2:	003b      	movs	r3, r7
 80014f4:	46b8      	mov	r8, r7
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	d500      	bpl.n	80014fc <__aeabi_dsub+0x14c>
 80014fa:	e15f      	b.n	80017bc <__aeabi_dsub+0x40c>
 80014fc:	4337      	orrs	r7, r6
 80014fe:	d19a      	bne.n	8001436 <__aeabi_dsub+0x86>
 8001500:	2200      	movs	r2, #0
 8001502:	2400      	movs	r4, #0
 8001504:	2500      	movs	r5, #0
 8001506:	e079      	b.n	80015fc <__aeabi_dsub+0x24c>
 8001508:	2e00      	cmp	r6, #0
 800150a:	dc00      	bgt.n	800150e <__aeabi_dsub+0x15e>
 800150c:	e0fa      	b.n	8001704 <__aeabi_dsub+0x354>
 800150e:	2f00      	cmp	r7, #0
 8001510:	d100      	bne.n	8001514 <__aeabi_dsub+0x164>
 8001512:	e08d      	b.n	8001630 <__aeabi_dsub+0x280>
 8001514:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <__aeabi_dsub+0x348>)
 8001516:	429d      	cmp	r5, r3
 8001518:	d067      	beq.n	80015ea <__aeabi_dsub+0x23a>
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	4667      	mov	r7, ip
 800151e:	041b      	lsls	r3, r3, #16
 8001520:	431f      	orrs	r7, r3
 8001522:	46bc      	mov	ip, r7
 8001524:	2e38      	cmp	r6, #56	; 0x38
 8001526:	dc00      	bgt.n	800152a <__aeabi_dsub+0x17a>
 8001528:	e152      	b.n	80017d0 <__aeabi_dsub+0x420>
 800152a:	4663      	mov	r3, ip
 800152c:	4313      	orrs	r3, r2
 800152e:	1e5a      	subs	r2, r3, #1
 8001530:	4193      	sbcs	r3, r2
 8001532:	181e      	adds	r6, r3, r0
 8001534:	4286      	cmp	r6, r0
 8001536:	4180      	sbcs	r0, r0
 8001538:	4240      	negs	r0, r0
 800153a:	1809      	adds	r1, r1, r0
 800153c:	020b      	lsls	r3, r1, #8
 800153e:	d400      	bmi.n	8001542 <__aeabi_dsub+0x192>
 8001540:	e0be      	b.n	80016c0 <__aeabi_dsub+0x310>
 8001542:	4b6d      	ldr	r3, [pc, #436]	; (80016f8 <__aeabi_dsub+0x348>)
 8001544:	3501      	adds	r5, #1
 8001546:	429d      	cmp	r5, r3
 8001548:	d100      	bne.n	800154c <__aeabi_dsub+0x19c>
 800154a:	e0d2      	b.n	80016f2 <__aeabi_dsub+0x342>
 800154c:	4a6b      	ldr	r2, [pc, #428]	; (80016fc <__aeabi_dsub+0x34c>)
 800154e:	0873      	lsrs	r3, r6, #1
 8001550:	400a      	ands	r2, r1
 8001552:	2101      	movs	r1, #1
 8001554:	400e      	ands	r6, r1
 8001556:	431e      	orrs	r6, r3
 8001558:	0851      	lsrs	r1, r2, #1
 800155a:	07d3      	lsls	r3, r2, #31
 800155c:	2207      	movs	r2, #7
 800155e:	431e      	orrs	r6, r3
 8001560:	4032      	ands	r2, r6
 8001562:	e795      	b.n	8001490 <__aeabi_dsub+0xe0>
 8001564:	001e      	movs	r6, r3
 8001566:	4316      	orrs	r6, r2
 8001568:	d000      	beq.n	800156c <__aeabi_dsub+0x1bc>
 800156a:	e745      	b.n	80013f8 <__aeabi_dsub+0x48>
 800156c:	e740      	b.n	80013f0 <__aeabi_dsub+0x40>
 800156e:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <__aeabi_dsub+0x348>)
 8001570:	429d      	cmp	r5, r3
 8001572:	d03a      	beq.n	80015ea <__aeabi_dsub+0x23a>
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	4667      	mov	r7, ip
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	431f      	orrs	r7, r3
 800157c:	46bc      	mov	ip, r7
 800157e:	2e38      	cmp	r6, #56	; 0x38
 8001580:	dd00      	ble.n	8001584 <__aeabi_dsub+0x1d4>
 8001582:	e0eb      	b.n	800175c <__aeabi_dsub+0x3ac>
 8001584:	2e1f      	cmp	r6, #31
 8001586:	dc00      	bgt.n	800158a <__aeabi_dsub+0x1da>
 8001588:	e13a      	b.n	8001800 <__aeabi_dsub+0x450>
 800158a:	0033      	movs	r3, r6
 800158c:	4667      	mov	r7, ip
 800158e:	3b20      	subs	r3, #32
 8001590:	40df      	lsrs	r7, r3
 8001592:	003b      	movs	r3, r7
 8001594:	2e20      	cmp	r6, #32
 8001596:	d005      	beq.n	80015a4 <__aeabi_dsub+0x1f4>
 8001598:	2740      	movs	r7, #64	; 0x40
 800159a:	1bbf      	subs	r7, r7, r6
 800159c:	4666      	mov	r6, ip
 800159e:	40be      	lsls	r6, r7
 80015a0:	4332      	orrs	r2, r6
 80015a2:	4690      	mov	r8, r2
 80015a4:	4646      	mov	r6, r8
 80015a6:	1e72      	subs	r2, r6, #1
 80015a8:	4196      	sbcs	r6, r2
 80015aa:	4333      	orrs	r3, r6
 80015ac:	e0da      	b.n	8001764 <__aeabi_dsub+0x3b4>
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d100      	bne.n	80015b4 <__aeabi_dsub+0x204>
 80015b2:	e214      	b.n	80019de <__aeabi_dsub+0x62e>
 80015b4:	4663      	mov	r3, ip
 80015b6:	4313      	orrs	r3, r2
 80015b8:	d100      	bne.n	80015bc <__aeabi_dsub+0x20c>
 80015ba:	e168      	b.n	800188e <__aeabi_dsub+0x4de>
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	074e      	lsls	r6, r1, #29
 80015c0:	08c0      	lsrs	r0, r0, #3
 80015c2:	08c9      	lsrs	r1, r1, #3
 80015c4:	031b      	lsls	r3, r3, #12
 80015c6:	4306      	orrs	r6, r0
 80015c8:	4219      	tst	r1, r3
 80015ca:	d008      	beq.n	80015de <__aeabi_dsub+0x22e>
 80015cc:	4660      	mov	r0, ip
 80015ce:	08c0      	lsrs	r0, r0, #3
 80015d0:	4218      	tst	r0, r3
 80015d2:	d104      	bne.n	80015de <__aeabi_dsub+0x22e>
 80015d4:	4663      	mov	r3, ip
 80015d6:	0001      	movs	r1, r0
 80015d8:	08d2      	lsrs	r2, r2, #3
 80015da:	075e      	lsls	r6, r3, #29
 80015dc:	4316      	orrs	r6, r2
 80015de:	00f3      	lsls	r3, r6, #3
 80015e0:	4699      	mov	r9, r3
 80015e2:	00c9      	lsls	r1, r1, #3
 80015e4:	0f72      	lsrs	r2, r6, #29
 80015e6:	4d44      	ldr	r5, [pc, #272]	; (80016f8 <__aeabi_dsub+0x348>)
 80015e8:	4311      	orrs	r1, r2
 80015ea:	464b      	mov	r3, r9
 80015ec:	08de      	lsrs	r6, r3, #3
 80015ee:	4b42      	ldr	r3, [pc, #264]	; (80016f8 <__aeabi_dsub+0x348>)
 80015f0:	074f      	lsls	r7, r1, #29
 80015f2:	4337      	orrs	r7, r6
 80015f4:	08ca      	lsrs	r2, r1, #3
 80015f6:	429d      	cmp	r5, r3
 80015f8:	d100      	bne.n	80015fc <__aeabi_dsub+0x24c>
 80015fa:	e06e      	b.n	80016da <__aeabi_dsub+0x32a>
 80015fc:	0312      	lsls	r2, r2, #12
 80015fe:	056d      	lsls	r5, r5, #21
 8001600:	0b12      	lsrs	r2, r2, #12
 8001602:	0d6d      	lsrs	r5, r5, #21
 8001604:	2100      	movs	r1, #0
 8001606:	0312      	lsls	r2, r2, #12
 8001608:	0b13      	lsrs	r3, r2, #12
 800160a:	0d0a      	lsrs	r2, r1, #20
 800160c:	0512      	lsls	r2, r2, #20
 800160e:	431a      	orrs	r2, r3
 8001610:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <__aeabi_dsub+0x350>)
 8001612:	052d      	lsls	r5, r5, #20
 8001614:	4013      	ands	r3, r2
 8001616:	432b      	orrs	r3, r5
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	07e4      	lsls	r4, r4, #31
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	4323      	orrs	r3, r4
 8001620:	0038      	movs	r0, r7
 8001622:	0019      	movs	r1, r3
 8001624:	bc3c      	pop	{r2, r3, r4, r5}
 8001626:	4690      	mov	r8, r2
 8001628:	4699      	mov	r9, r3
 800162a:	46a2      	mov	sl, r4
 800162c:	46ab      	mov	fp, r5
 800162e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001630:	4663      	mov	r3, ip
 8001632:	4313      	orrs	r3, r2
 8001634:	d011      	beq.n	800165a <__aeabi_dsub+0x2aa>
 8001636:	1e73      	subs	r3, r6, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d000      	beq.n	800163e <__aeabi_dsub+0x28e>
 800163c:	e107      	b.n	800184e <__aeabi_dsub+0x49e>
 800163e:	1886      	adds	r6, r0, r2
 8001640:	4286      	cmp	r6, r0
 8001642:	4180      	sbcs	r0, r0
 8001644:	4461      	add	r1, ip
 8001646:	4240      	negs	r0, r0
 8001648:	1809      	adds	r1, r1, r0
 800164a:	2501      	movs	r5, #1
 800164c:	020b      	lsls	r3, r1, #8
 800164e:	d537      	bpl.n	80016c0 <__aeabi_dsub+0x310>
 8001650:	2502      	movs	r5, #2
 8001652:	e77b      	b.n	800154c <__aeabi_dsub+0x19c>
 8001654:	003e      	movs	r6, r7
 8001656:	4661      	mov	r1, ip
 8001658:	4691      	mov	r9, r2
 800165a:	0035      	movs	r5, r6
 800165c:	e7c5      	b.n	80015ea <__aeabi_dsub+0x23a>
 800165e:	465c      	mov	r4, fp
 8001660:	2d00      	cmp	r5, #0
 8001662:	d000      	beq.n	8001666 <__aeabi_dsub+0x2b6>
 8001664:	e0e1      	b.n	800182a <__aeabi_dsub+0x47a>
 8001666:	000b      	movs	r3, r1
 8001668:	4303      	orrs	r3, r0
 800166a:	d0f3      	beq.n	8001654 <__aeabi_dsub+0x2a4>
 800166c:	1c73      	adds	r3, r6, #1
 800166e:	d100      	bne.n	8001672 <__aeabi_dsub+0x2c2>
 8001670:	e1ac      	b.n	80019cc <__aeabi_dsub+0x61c>
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <__aeabi_dsub+0x348>)
 8001674:	429f      	cmp	r7, r3
 8001676:	d100      	bne.n	800167a <__aeabi_dsub+0x2ca>
 8001678:	e13a      	b.n	80018f0 <__aeabi_dsub+0x540>
 800167a:	43f3      	mvns	r3, r6
 800167c:	2b38      	cmp	r3, #56	; 0x38
 800167e:	dd00      	ble.n	8001682 <__aeabi_dsub+0x2d2>
 8001680:	e16f      	b.n	8001962 <__aeabi_dsub+0x5b2>
 8001682:	2b1f      	cmp	r3, #31
 8001684:	dd00      	ble.n	8001688 <__aeabi_dsub+0x2d8>
 8001686:	e18c      	b.n	80019a2 <__aeabi_dsub+0x5f2>
 8001688:	2520      	movs	r5, #32
 800168a:	000e      	movs	r6, r1
 800168c:	1aed      	subs	r5, r5, r3
 800168e:	40ae      	lsls	r6, r5
 8001690:	46b0      	mov	r8, r6
 8001692:	0006      	movs	r6, r0
 8001694:	46aa      	mov	sl, r5
 8001696:	40de      	lsrs	r6, r3
 8001698:	4645      	mov	r5, r8
 800169a:	4335      	orrs	r5, r6
 800169c:	002e      	movs	r6, r5
 800169e:	4655      	mov	r5, sl
 80016a0:	40d9      	lsrs	r1, r3
 80016a2:	40a8      	lsls	r0, r5
 80016a4:	4663      	mov	r3, ip
 80016a6:	1e45      	subs	r5, r0, #1
 80016a8:	41a8      	sbcs	r0, r5
 80016aa:	1a5b      	subs	r3, r3, r1
 80016ac:	469c      	mov	ip, r3
 80016ae:	4330      	orrs	r0, r6
 80016b0:	1a16      	subs	r6, r2, r0
 80016b2:	42b2      	cmp	r2, r6
 80016b4:	4192      	sbcs	r2, r2
 80016b6:	4663      	mov	r3, ip
 80016b8:	4252      	negs	r2, r2
 80016ba:	1a99      	subs	r1, r3, r2
 80016bc:	003d      	movs	r5, r7
 80016be:	e6b4      	b.n	800142a <__aeabi_dsub+0x7a>
 80016c0:	2207      	movs	r2, #7
 80016c2:	4032      	ands	r2, r6
 80016c4:	2a00      	cmp	r2, #0
 80016c6:	d000      	beq.n	80016ca <__aeabi_dsub+0x31a>
 80016c8:	e6e4      	b.n	8001494 <__aeabi_dsub+0xe4>
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <__aeabi_dsub+0x348>)
 80016cc:	08f6      	lsrs	r6, r6, #3
 80016ce:	074f      	lsls	r7, r1, #29
 80016d0:	4337      	orrs	r7, r6
 80016d2:	08ca      	lsrs	r2, r1, #3
 80016d4:	429d      	cmp	r5, r3
 80016d6:	d000      	beq.n	80016da <__aeabi_dsub+0x32a>
 80016d8:	e790      	b.n	80015fc <__aeabi_dsub+0x24c>
 80016da:	003b      	movs	r3, r7
 80016dc:	4313      	orrs	r3, r2
 80016de:	d100      	bne.n	80016e2 <__aeabi_dsub+0x332>
 80016e0:	e1a6      	b.n	8001a30 <__aeabi_dsub+0x680>
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	031b      	lsls	r3, r3, #12
 80016e6:	431a      	orrs	r2, r3
 80016e8:	0312      	lsls	r2, r2, #12
 80016ea:	0b12      	lsrs	r2, r2, #12
 80016ec:	4d02      	ldr	r5, [pc, #8]	; (80016f8 <__aeabi_dsub+0x348>)
 80016ee:	e789      	b.n	8001604 <__aeabi_dsub+0x254>
 80016f0:	0015      	movs	r5, r2
 80016f2:	2200      	movs	r2, #0
 80016f4:	2700      	movs	r7, #0
 80016f6:	e785      	b.n	8001604 <__aeabi_dsub+0x254>
 80016f8:	000007ff 	.word	0x000007ff
 80016fc:	ff7fffff 	.word	0xff7fffff
 8001700:	800fffff 	.word	0x800fffff
 8001704:	2e00      	cmp	r6, #0
 8001706:	d000      	beq.n	800170a <__aeabi_dsub+0x35a>
 8001708:	e0c7      	b.n	800189a <__aeabi_dsub+0x4ea>
 800170a:	1c6b      	adds	r3, r5, #1
 800170c:	055e      	lsls	r6, r3, #21
 800170e:	0d76      	lsrs	r6, r6, #21
 8001710:	2e01      	cmp	r6, #1
 8001712:	dc00      	bgt.n	8001716 <__aeabi_dsub+0x366>
 8001714:	e0f0      	b.n	80018f8 <__aeabi_dsub+0x548>
 8001716:	4dc8      	ldr	r5, [pc, #800]	; (8001a38 <__aeabi_dsub+0x688>)
 8001718:	42ab      	cmp	r3, r5
 800171a:	d100      	bne.n	800171e <__aeabi_dsub+0x36e>
 800171c:	e0b9      	b.n	8001892 <__aeabi_dsub+0x4e2>
 800171e:	1885      	adds	r5, r0, r2
 8001720:	000a      	movs	r2, r1
 8001722:	4285      	cmp	r5, r0
 8001724:	4189      	sbcs	r1, r1
 8001726:	4462      	add	r2, ip
 8001728:	4249      	negs	r1, r1
 800172a:	1851      	adds	r1, r2, r1
 800172c:	2207      	movs	r2, #7
 800172e:	07ce      	lsls	r6, r1, #31
 8001730:	086d      	lsrs	r5, r5, #1
 8001732:	432e      	orrs	r6, r5
 8001734:	0849      	lsrs	r1, r1, #1
 8001736:	4032      	ands	r2, r6
 8001738:	001d      	movs	r5, r3
 800173a:	e6a9      	b.n	8001490 <__aeabi_dsub+0xe0>
 800173c:	49bf      	ldr	r1, [pc, #764]	; (8001a3c <__aeabi_dsub+0x68c>)
 800173e:	1aed      	subs	r5, r5, r3
 8001740:	4011      	ands	r1, r2
 8001742:	2207      	movs	r2, #7
 8001744:	4032      	ands	r2, r6
 8001746:	e6a3      	b.n	8001490 <__aeabi_dsub+0xe0>
 8001748:	0032      	movs	r2, r6
 800174a:	3828      	subs	r0, #40	; 0x28
 800174c:	4082      	lsls	r2, r0
 800174e:	2600      	movs	r6, #0
 8001750:	e686      	b.n	8001460 <__aeabi_dsub+0xb0>
 8001752:	0030      	movs	r0, r6
 8001754:	f000 fa3a 	bl	8001bcc <__clzsi2>
 8001758:	3020      	adds	r0, #32
 800175a:	e673      	b.n	8001444 <__aeabi_dsub+0x94>
 800175c:	4663      	mov	r3, ip
 800175e:	4313      	orrs	r3, r2
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	4193      	sbcs	r3, r2
 8001764:	1ac6      	subs	r6, r0, r3
 8001766:	42b0      	cmp	r0, r6
 8001768:	4180      	sbcs	r0, r0
 800176a:	4240      	negs	r0, r0
 800176c:	1a09      	subs	r1, r1, r0
 800176e:	e65c      	b.n	800142a <__aeabi_dsub+0x7a>
 8001770:	000e      	movs	r6, r1
 8001772:	4667      	mov	r7, ip
 8001774:	4306      	orrs	r6, r0
 8001776:	4317      	orrs	r7, r2
 8001778:	2d00      	cmp	r5, #0
 800177a:	d15e      	bne.n	800183a <__aeabi_dsub+0x48a>
 800177c:	2e00      	cmp	r6, #0
 800177e:	d000      	beq.n	8001782 <__aeabi_dsub+0x3d2>
 8001780:	e0f3      	b.n	800196a <__aeabi_dsub+0x5ba>
 8001782:	2f00      	cmp	r7, #0
 8001784:	d100      	bne.n	8001788 <__aeabi_dsub+0x3d8>
 8001786:	e11e      	b.n	80019c6 <__aeabi_dsub+0x616>
 8001788:	465c      	mov	r4, fp
 800178a:	4661      	mov	r1, ip
 800178c:	4691      	mov	r9, r2
 800178e:	e72c      	b.n	80015ea <__aeabi_dsub+0x23a>
 8001790:	4fa9      	ldr	r7, [pc, #676]	; (8001a38 <__aeabi_dsub+0x688>)
 8001792:	42be      	cmp	r6, r7
 8001794:	d07b      	beq.n	800188e <__aeabi_dsub+0x4de>
 8001796:	001e      	movs	r6, r3
 8001798:	e6f1      	b.n	800157e <__aeabi_dsub+0x1ce>
 800179a:	0010      	movs	r0, r2
 800179c:	3d1f      	subs	r5, #31
 800179e:	40e8      	lsrs	r0, r5
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d003      	beq.n	80017ac <__aeabi_dsub+0x3fc>
 80017a4:	2140      	movs	r1, #64	; 0x40
 80017a6:	1acb      	subs	r3, r1, r3
 80017a8:	409a      	lsls	r2, r3
 80017aa:	4316      	orrs	r6, r2
 80017ac:	1e73      	subs	r3, r6, #1
 80017ae:	419e      	sbcs	r6, r3
 80017b0:	2207      	movs	r2, #7
 80017b2:	4306      	orrs	r6, r0
 80017b4:	4032      	ands	r2, r6
 80017b6:	2100      	movs	r1, #0
 80017b8:	2500      	movs	r5, #0
 80017ba:	e783      	b.n	80016c4 <__aeabi_dsub+0x314>
 80017bc:	1a16      	subs	r6, r2, r0
 80017be:	4663      	mov	r3, ip
 80017c0:	42b2      	cmp	r2, r6
 80017c2:	4180      	sbcs	r0, r0
 80017c4:	1a59      	subs	r1, r3, r1
 80017c6:	4240      	negs	r0, r0
 80017c8:	1a0b      	subs	r3, r1, r0
 80017ca:	4698      	mov	r8, r3
 80017cc:	465c      	mov	r4, fp
 80017ce:	e632      	b.n	8001436 <__aeabi_dsub+0x86>
 80017d0:	2e1f      	cmp	r6, #31
 80017d2:	dd00      	ble.n	80017d6 <__aeabi_dsub+0x426>
 80017d4:	e0ab      	b.n	800192e <__aeabi_dsub+0x57e>
 80017d6:	2720      	movs	r7, #32
 80017d8:	1bbb      	subs	r3, r7, r6
 80017da:	469a      	mov	sl, r3
 80017dc:	4663      	mov	r3, ip
 80017de:	4657      	mov	r7, sl
 80017e0:	40bb      	lsls	r3, r7
 80017e2:	4699      	mov	r9, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	464f      	mov	r7, r9
 80017e8:	40f3      	lsrs	r3, r6
 80017ea:	431f      	orrs	r7, r3
 80017ec:	003b      	movs	r3, r7
 80017ee:	4657      	mov	r7, sl
 80017f0:	40ba      	lsls	r2, r7
 80017f2:	1e57      	subs	r7, r2, #1
 80017f4:	41ba      	sbcs	r2, r7
 80017f6:	4313      	orrs	r3, r2
 80017f8:	4662      	mov	r2, ip
 80017fa:	40f2      	lsrs	r2, r6
 80017fc:	1889      	adds	r1, r1, r2
 80017fe:	e698      	b.n	8001532 <__aeabi_dsub+0x182>
 8001800:	2720      	movs	r7, #32
 8001802:	1bbb      	subs	r3, r7, r6
 8001804:	469a      	mov	sl, r3
 8001806:	4663      	mov	r3, ip
 8001808:	4657      	mov	r7, sl
 800180a:	40bb      	lsls	r3, r7
 800180c:	4699      	mov	r9, r3
 800180e:	0013      	movs	r3, r2
 8001810:	464f      	mov	r7, r9
 8001812:	40f3      	lsrs	r3, r6
 8001814:	431f      	orrs	r7, r3
 8001816:	003b      	movs	r3, r7
 8001818:	4657      	mov	r7, sl
 800181a:	40ba      	lsls	r2, r7
 800181c:	1e57      	subs	r7, r2, #1
 800181e:	41ba      	sbcs	r2, r7
 8001820:	4313      	orrs	r3, r2
 8001822:	4662      	mov	r2, ip
 8001824:	40f2      	lsrs	r2, r6
 8001826:	1a89      	subs	r1, r1, r2
 8001828:	e79c      	b.n	8001764 <__aeabi_dsub+0x3b4>
 800182a:	4b83      	ldr	r3, [pc, #524]	; (8001a38 <__aeabi_dsub+0x688>)
 800182c:	429f      	cmp	r7, r3
 800182e:	d05f      	beq.n	80018f0 <__aeabi_dsub+0x540>
 8001830:	2580      	movs	r5, #128	; 0x80
 8001832:	042d      	lsls	r5, r5, #16
 8001834:	4273      	negs	r3, r6
 8001836:	4329      	orrs	r1, r5
 8001838:	e720      	b.n	800167c <__aeabi_dsub+0x2cc>
 800183a:	2e00      	cmp	r6, #0
 800183c:	d10c      	bne.n	8001858 <__aeabi_dsub+0x4a8>
 800183e:	2f00      	cmp	r7, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_dsub+0x494>
 8001842:	e0d0      	b.n	80019e6 <__aeabi_dsub+0x636>
 8001844:	465c      	mov	r4, fp
 8001846:	4661      	mov	r1, ip
 8001848:	4691      	mov	r9, r2
 800184a:	4d7b      	ldr	r5, [pc, #492]	; (8001a38 <__aeabi_dsub+0x688>)
 800184c:	e6cd      	b.n	80015ea <__aeabi_dsub+0x23a>
 800184e:	4f7a      	ldr	r7, [pc, #488]	; (8001a38 <__aeabi_dsub+0x688>)
 8001850:	42be      	cmp	r6, r7
 8001852:	d01c      	beq.n	800188e <__aeabi_dsub+0x4de>
 8001854:	001e      	movs	r6, r3
 8001856:	e665      	b.n	8001524 <__aeabi_dsub+0x174>
 8001858:	2f00      	cmp	r7, #0
 800185a:	d018      	beq.n	800188e <__aeabi_dsub+0x4de>
 800185c:	08c0      	lsrs	r0, r0, #3
 800185e:	074e      	lsls	r6, r1, #29
 8001860:	4306      	orrs	r6, r0
 8001862:	2080      	movs	r0, #128	; 0x80
 8001864:	08c9      	lsrs	r1, r1, #3
 8001866:	0300      	lsls	r0, r0, #12
 8001868:	4201      	tst	r1, r0
 800186a:	d008      	beq.n	800187e <__aeabi_dsub+0x4ce>
 800186c:	4663      	mov	r3, ip
 800186e:	08dc      	lsrs	r4, r3, #3
 8001870:	4204      	tst	r4, r0
 8001872:	d104      	bne.n	800187e <__aeabi_dsub+0x4ce>
 8001874:	0021      	movs	r1, r4
 8001876:	46da      	mov	sl, fp
 8001878:	08d2      	lsrs	r2, r2, #3
 800187a:	075e      	lsls	r6, r3, #29
 800187c:	4316      	orrs	r6, r2
 800187e:	00f3      	lsls	r3, r6, #3
 8001880:	4699      	mov	r9, r3
 8001882:	2401      	movs	r4, #1
 8001884:	4653      	mov	r3, sl
 8001886:	00c9      	lsls	r1, r1, #3
 8001888:	0f72      	lsrs	r2, r6, #29
 800188a:	4311      	orrs	r1, r2
 800188c:	401c      	ands	r4, r3
 800188e:	4d6a      	ldr	r5, [pc, #424]	; (8001a38 <__aeabi_dsub+0x688>)
 8001890:	e6ab      	b.n	80015ea <__aeabi_dsub+0x23a>
 8001892:	001d      	movs	r5, r3
 8001894:	2200      	movs	r2, #0
 8001896:	2700      	movs	r7, #0
 8001898:	e6b4      	b.n	8001604 <__aeabi_dsub+0x254>
 800189a:	2d00      	cmp	r5, #0
 800189c:	d159      	bne.n	8001952 <__aeabi_dsub+0x5a2>
 800189e:	000b      	movs	r3, r1
 80018a0:	4303      	orrs	r3, r0
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dsub+0x4f6>
 80018a4:	e6d6      	b.n	8001654 <__aeabi_dsub+0x2a4>
 80018a6:	1c73      	adds	r3, r6, #1
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x4fc>
 80018aa:	e0b2      	b.n	8001a12 <__aeabi_dsub+0x662>
 80018ac:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <__aeabi_dsub+0x688>)
 80018ae:	429f      	cmp	r7, r3
 80018b0:	d01e      	beq.n	80018f0 <__aeabi_dsub+0x540>
 80018b2:	43f3      	mvns	r3, r6
 80018b4:	2b38      	cmp	r3, #56	; 0x38
 80018b6:	dc6f      	bgt.n	8001998 <__aeabi_dsub+0x5e8>
 80018b8:	2b1f      	cmp	r3, #31
 80018ba:	dd00      	ble.n	80018be <__aeabi_dsub+0x50e>
 80018bc:	e097      	b.n	80019ee <__aeabi_dsub+0x63e>
 80018be:	2520      	movs	r5, #32
 80018c0:	000e      	movs	r6, r1
 80018c2:	1aed      	subs	r5, r5, r3
 80018c4:	40ae      	lsls	r6, r5
 80018c6:	46b0      	mov	r8, r6
 80018c8:	0006      	movs	r6, r0
 80018ca:	46aa      	mov	sl, r5
 80018cc:	40de      	lsrs	r6, r3
 80018ce:	4645      	mov	r5, r8
 80018d0:	4335      	orrs	r5, r6
 80018d2:	002e      	movs	r6, r5
 80018d4:	4655      	mov	r5, sl
 80018d6:	40a8      	lsls	r0, r5
 80018d8:	40d9      	lsrs	r1, r3
 80018da:	1e45      	subs	r5, r0, #1
 80018dc:	41a8      	sbcs	r0, r5
 80018de:	448c      	add	ip, r1
 80018e0:	4306      	orrs	r6, r0
 80018e2:	18b6      	adds	r6, r6, r2
 80018e4:	4296      	cmp	r6, r2
 80018e6:	4192      	sbcs	r2, r2
 80018e8:	4251      	negs	r1, r2
 80018ea:	4461      	add	r1, ip
 80018ec:	003d      	movs	r5, r7
 80018ee:	e625      	b.n	800153c <__aeabi_dsub+0x18c>
 80018f0:	003d      	movs	r5, r7
 80018f2:	4661      	mov	r1, ip
 80018f4:	4691      	mov	r9, r2
 80018f6:	e678      	b.n	80015ea <__aeabi_dsub+0x23a>
 80018f8:	000b      	movs	r3, r1
 80018fa:	4303      	orrs	r3, r0
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	d000      	beq.n	8001902 <__aeabi_dsub+0x552>
 8001900:	e655      	b.n	80015ae <__aeabi_dsub+0x1fe>
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f5      	beq.n	80018f2 <__aeabi_dsub+0x542>
 8001906:	4663      	mov	r3, ip
 8001908:	4313      	orrs	r3, r2
 800190a:	d100      	bne.n	800190e <__aeabi_dsub+0x55e>
 800190c:	e66d      	b.n	80015ea <__aeabi_dsub+0x23a>
 800190e:	1886      	adds	r6, r0, r2
 8001910:	4286      	cmp	r6, r0
 8001912:	4180      	sbcs	r0, r0
 8001914:	4461      	add	r1, ip
 8001916:	4240      	negs	r0, r0
 8001918:	1809      	adds	r1, r1, r0
 800191a:	2200      	movs	r2, #0
 800191c:	020b      	lsls	r3, r1, #8
 800191e:	d400      	bmi.n	8001922 <__aeabi_dsub+0x572>
 8001920:	e6d0      	b.n	80016c4 <__aeabi_dsub+0x314>
 8001922:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <__aeabi_dsub+0x68c>)
 8001924:	3501      	adds	r5, #1
 8001926:	4019      	ands	r1, r3
 8001928:	e5b2      	b.n	8001490 <__aeabi_dsub+0xe0>
 800192a:	46b1      	mov	r9, r6
 800192c:	e65d      	b.n	80015ea <__aeabi_dsub+0x23a>
 800192e:	0033      	movs	r3, r6
 8001930:	4667      	mov	r7, ip
 8001932:	3b20      	subs	r3, #32
 8001934:	40df      	lsrs	r7, r3
 8001936:	003b      	movs	r3, r7
 8001938:	2e20      	cmp	r6, #32
 800193a:	d005      	beq.n	8001948 <__aeabi_dsub+0x598>
 800193c:	2740      	movs	r7, #64	; 0x40
 800193e:	1bbf      	subs	r7, r7, r6
 8001940:	4666      	mov	r6, ip
 8001942:	40be      	lsls	r6, r7
 8001944:	4332      	orrs	r2, r6
 8001946:	4690      	mov	r8, r2
 8001948:	4646      	mov	r6, r8
 800194a:	1e72      	subs	r2, r6, #1
 800194c:	4196      	sbcs	r6, r2
 800194e:	4333      	orrs	r3, r6
 8001950:	e5ef      	b.n	8001532 <__aeabi_dsub+0x182>
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <__aeabi_dsub+0x688>)
 8001954:	429f      	cmp	r7, r3
 8001956:	d0cb      	beq.n	80018f0 <__aeabi_dsub+0x540>
 8001958:	2580      	movs	r5, #128	; 0x80
 800195a:	042d      	lsls	r5, r5, #16
 800195c:	4273      	negs	r3, r6
 800195e:	4329      	orrs	r1, r5
 8001960:	e7a8      	b.n	80018b4 <__aeabi_dsub+0x504>
 8001962:	4308      	orrs	r0, r1
 8001964:	1e41      	subs	r1, r0, #1
 8001966:	4188      	sbcs	r0, r1
 8001968:	e6a2      	b.n	80016b0 <__aeabi_dsub+0x300>
 800196a:	2f00      	cmp	r7, #0
 800196c:	d100      	bne.n	8001970 <__aeabi_dsub+0x5c0>
 800196e:	e63c      	b.n	80015ea <__aeabi_dsub+0x23a>
 8001970:	4663      	mov	r3, ip
 8001972:	1a86      	subs	r6, r0, r2
 8001974:	1acf      	subs	r7, r1, r3
 8001976:	42b0      	cmp	r0, r6
 8001978:	419b      	sbcs	r3, r3
 800197a:	425b      	negs	r3, r3
 800197c:	1afb      	subs	r3, r7, r3
 800197e:	4698      	mov	r8, r3
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	d54e      	bpl.n	8001a22 <__aeabi_dsub+0x672>
 8001984:	1a16      	subs	r6, r2, r0
 8001986:	4663      	mov	r3, ip
 8001988:	42b2      	cmp	r2, r6
 800198a:	4192      	sbcs	r2, r2
 800198c:	1a59      	subs	r1, r3, r1
 800198e:	4252      	negs	r2, r2
 8001990:	1a89      	subs	r1, r1, r2
 8001992:	465c      	mov	r4, fp
 8001994:	2200      	movs	r2, #0
 8001996:	e57b      	b.n	8001490 <__aeabi_dsub+0xe0>
 8001998:	4301      	orrs	r1, r0
 800199a:	000e      	movs	r6, r1
 800199c:	1e71      	subs	r1, r6, #1
 800199e:	418e      	sbcs	r6, r1
 80019a0:	e79f      	b.n	80018e2 <__aeabi_dsub+0x532>
 80019a2:	001d      	movs	r5, r3
 80019a4:	000e      	movs	r6, r1
 80019a6:	3d20      	subs	r5, #32
 80019a8:	40ee      	lsrs	r6, r5
 80019aa:	46b0      	mov	r8, r6
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d004      	beq.n	80019ba <__aeabi_dsub+0x60a>
 80019b0:	2540      	movs	r5, #64	; 0x40
 80019b2:	1aeb      	subs	r3, r5, r3
 80019b4:	4099      	lsls	r1, r3
 80019b6:	4308      	orrs	r0, r1
 80019b8:	4681      	mov	r9, r0
 80019ba:	4648      	mov	r0, r9
 80019bc:	4643      	mov	r3, r8
 80019be:	1e41      	subs	r1, r0, #1
 80019c0:	4188      	sbcs	r0, r1
 80019c2:	4318      	orrs	r0, r3
 80019c4:	e674      	b.n	80016b0 <__aeabi_dsub+0x300>
 80019c6:	2200      	movs	r2, #0
 80019c8:	2400      	movs	r4, #0
 80019ca:	e617      	b.n	80015fc <__aeabi_dsub+0x24c>
 80019cc:	1a16      	subs	r6, r2, r0
 80019ce:	4663      	mov	r3, ip
 80019d0:	42b2      	cmp	r2, r6
 80019d2:	4192      	sbcs	r2, r2
 80019d4:	1a59      	subs	r1, r3, r1
 80019d6:	4252      	negs	r2, r2
 80019d8:	1a89      	subs	r1, r1, r2
 80019da:	003d      	movs	r5, r7
 80019dc:	e525      	b.n	800142a <__aeabi_dsub+0x7a>
 80019de:	4661      	mov	r1, ip
 80019e0:	4691      	mov	r9, r2
 80019e2:	4d15      	ldr	r5, [pc, #84]	; (8001a38 <__aeabi_dsub+0x688>)
 80019e4:	e601      	b.n	80015ea <__aeabi_dsub+0x23a>
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	2400      	movs	r4, #0
 80019ea:	0312      	lsls	r2, r2, #12
 80019ec:	e679      	b.n	80016e2 <__aeabi_dsub+0x332>
 80019ee:	001d      	movs	r5, r3
 80019f0:	000e      	movs	r6, r1
 80019f2:	3d20      	subs	r5, #32
 80019f4:	40ee      	lsrs	r6, r5
 80019f6:	46b0      	mov	r8, r6
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d004      	beq.n	8001a06 <__aeabi_dsub+0x656>
 80019fc:	2540      	movs	r5, #64	; 0x40
 80019fe:	1aeb      	subs	r3, r5, r3
 8001a00:	4099      	lsls	r1, r3
 8001a02:	4308      	orrs	r0, r1
 8001a04:	4681      	mov	r9, r0
 8001a06:	464e      	mov	r6, r9
 8001a08:	4643      	mov	r3, r8
 8001a0a:	1e71      	subs	r1, r6, #1
 8001a0c:	418e      	sbcs	r6, r1
 8001a0e:	431e      	orrs	r6, r3
 8001a10:	e767      	b.n	80018e2 <__aeabi_dsub+0x532>
 8001a12:	1886      	adds	r6, r0, r2
 8001a14:	4296      	cmp	r6, r2
 8001a16:	419b      	sbcs	r3, r3
 8001a18:	4461      	add	r1, ip
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	18c9      	adds	r1, r1, r3
 8001a1e:	003d      	movs	r5, r7
 8001a20:	e58c      	b.n	800153c <__aeabi_dsub+0x18c>
 8001a22:	4647      	mov	r7, r8
 8001a24:	4337      	orrs	r7, r6
 8001a26:	d0ce      	beq.n	80019c6 <__aeabi_dsub+0x616>
 8001a28:	2207      	movs	r2, #7
 8001a2a:	4641      	mov	r1, r8
 8001a2c:	4032      	ands	r2, r6
 8001a2e:	e649      	b.n	80016c4 <__aeabi_dsub+0x314>
 8001a30:	2700      	movs	r7, #0
 8001a32:	003a      	movs	r2, r7
 8001a34:	e5e6      	b.n	8001604 <__aeabi_dsub+0x254>
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	000007ff 	.word	0x000007ff
 8001a3c:	ff7fffff 	.word	0xff7fffff

08001a40 <__aeabi_d2iz>:
 8001a40:	b530      	push	{r4, r5, lr}
 8001a42:	4d14      	ldr	r5, [pc, #80]	; (8001a94 <__aeabi_d2iz+0x54>)
 8001a44:	030a      	lsls	r2, r1, #12
 8001a46:	004b      	lsls	r3, r1, #1
 8001a48:	0b12      	lsrs	r2, r2, #12
 8001a4a:	0d5b      	lsrs	r3, r3, #21
 8001a4c:	0fc9      	lsrs	r1, r1, #31
 8001a4e:	2400      	movs	r4, #0
 8001a50:	42ab      	cmp	r3, r5
 8001a52:	dd11      	ble.n	8001a78 <__aeabi_d2iz+0x38>
 8001a54:	4c10      	ldr	r4, [pc, #64]	; (8001a98 <__aeabi_d2iz+0x58>)
 8001a56:	42a3      	cmp	r3, r4
 8001a58:	dc10      	bgt.n	8001a7c <__aeabi_d2iz+0x3c>
 8001a5a:	2480      	movs	r4, #128	; 0x80
 8001a5c:	0364      	lsls	r4, r4, #13
 8001a5e:	4322      	orrs	r2, r4
 8001a60:	4c0e      	ldr	r4, [pc, #56]	; (8001a9c <__aeabi_d2iz+0x5c>)
 8001a62:	1ae4      	subs	r4, r4, r3
 8001a64:	2c1f      	cmp	r4, #31
 8001a66:	dd0c      	ble.n	8001a82 <__aeabi_d2iz+0x42>
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <__aeabi_d2iz+0x60>)
 8001a6a:	1ac3      	subs	r3, r0, r3
 8001a6c:	40da      	lsrs	r2, r3
 8001a6e:	0013      	movs	r3, r2
 8001a70:	425c      	negs	r4, r3
 8001a72:	2900      	cmp	r1, #0
 8001a74:	d100      	bne.n	8001a78 <__aeabi_d2iz+0x38>
 8001a76:	001c      	movs	r4, r3
 8001a78:	0020      	movs	r0, r4
 8001a7a:	bd30      	pop	{r4, r5, pc}
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <__aeabi_d2iz+0x64>)
 8001a7e:	18cc      	adds	r4, r1, r3
 8001a80:	e7fa      	b.n	8001a78 <__aeabi_d2iz+0x38>
 8001a82:	4d09      	ldr	r5, [pc, #36]	; (8001aa8 <__aeabi_d2iz+0x68>)
 8001a84:	40e0      	lsrs	r0, r4
 8001a86:	46ac      	mov	ip, r5
 8001a88:	4463      	add	r3, ip
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	4303      	orrs	r3, r0
 8001a90:	e7ee      	b.n	8001a70 <__aeabi_d2iz+0x30>
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	000003fe 	.word	0x000003fe
 8001a98:	0000041d 	.word	0x0000041d
 8001a9c:	00000433 	.word	0x00000433
 8001aa0:	00000413 	.word	0x00000413
 8001aa4:	7fffffff 	.word	0x7fffffff
 8001aa8:	fffffbed 	.word	0xfffffbed

08001aac <__aeabi_f2d>:
 8001aac:	0041      	lsls	r1, r0, #1
 8001aae:	0e09      	lsrs	r1, r1, #24
 8001ab0:	1c4b      	adds	r3, r1, #1
 8001ab2:	b570      	push	{r4, r5, r6, lr}
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	0246      	lsls	r6, r0, #9
 8001ab8:	0a75      	lsrs	r5, r6, #9
 8001aba:	0fc4      	lsrs	r4, r0, #31
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	dd14      	ble.n	8001aea <__aeabi_f2d+0x3e>
 8001ac0:	23e0      	movs	r3, #224	; 0xe0
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	076d      	lsls	r5, r5, #29
 8001ac6:	0b36      	lsrs	r6, r6, #12
 8001ac8:	18cb      	adds	r3, r1, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	0d0a      	lsrs	r2, r1, #20
 8001ace:	0028      	movs	r0, r5
 8001ad0:	0512      	lsls	r2, r2, #20
 8001ad2:	4d1c      	ldr	r5, [pc, #112]	; (8001b44 <__aeabi_f2d+0x98>)
 8001ad4:	4332      	orrs	r2, r6
 8001ad6:	055b      	lsls	r3, r3, #21
 8001ad8:	402a      	ands	r2, r5
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	4313      	orrs	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	07e4      	lsls	r4, r4, #31
 8001ae2:	085b      	lsrs	r3, r3, #1
 8001ae4:	4323      	orrs	r3, r4
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	bd70      	pop	{r4, r5, r6, pc}
 8001aea:	2900      	cmp	r1, #0
 8001aec:	d114      	bne.n	8001b18 <__aeabi_f2d+0x6c>
 8001aee:	2d00      	cmp	r5, #0
 8001af0:	d01e      	beq.n	8001b30 <__aeabi_f2d+0x84>
 8001af2:	0028      	movs	r0, r5
 8001af4:	f000 f86a 	bl	8001bcc <__clzsi2>
 8001af8:	280a      	cmp	r0, #10
 8001afa:	dc1c      	bgt.n	8001b36 <__aeabi_f2d+0x8a>
 8001afc:	230b      	movs	r3, #11
 8001afe:	002a      	movs	r2, r5
 8001b00:	1a1b      	subs	r3, r3, r0
 8001b02:	40da      	lsrs	r2, r3
 8001b04:	0003      	movs	r3, r0
 8001b06:	3315      	adds	r3, #21
 8001b08:	409d      	lsls	r5, r3
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <__aeabi_f2d+0x9c>)
 8001b0c:	0312      	lsls	r2, r2, #12
 8001b0e:	1a1b      	subs	r3, r3, r0
 8001b10:	055b      	lsls	r3, r3, #21
 8001b12:	0b16      	lsrs	r6, r2, #12
 8001b14:	0d5b      	lsrs	r3, r3, #21
 8001b16:	e7d8      	b.n	8001aca <__aeabi_f2d+0x1e>
 8001b18:	2d00      	cmp	r5, #0
 8001b1a:	d006      	beq.n	8001b2a <__aeabi_f2d+0x7e>
 8001b1c:	0b32      	lsrs	r2, r6, #12
 8001b1e:	2680      	movs	r6, #128	; 0x80
 8001b20:	0336      	lsls	r6, r6, #12
 8001b22:	076d      	lsls	r5, r5, #29
 8001b24:	4316      	orrs	r6, r2
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <__aeabi_f2d+0xa0>)
 8001b28:	e7cf      	b.n	8001aca <__aeabi_f2d+0x1e>
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <__aeabi_f2d+0xa0>)
 8001b2c:	2600      	movs	r6, #0
 8001b2e:	e7cc      	b.n	8001aca <__aeabi_f2d+0x1e>
 8001b30:	2300      	movs	r3, #0
 8001b32:	2600      	movs	r6, #0
 8001b34:	e7c9      	b.n	8001aca <__aeabi_f2d+0x1e>
 8001b36:	0003      	movs	r3, r0
 8001b38:	002a      	movs	r2, r5
 8001b3a:	3b0b      	subs	r3, #11
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	2500      	movs	r5, #0
 8001b40:	e7e3      	b.n	8001b0a <__aeabi_f2d+0x5e>
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	800fffff 	.word	0x800fffff
 8001b48:	00000389 	.word	0x00000389
 8001b4c:	000007ff 	.word	0x000007ff

08001b50 <__aeabi_cdrcmple>:
 8001b50:	4684      	mov	ip, r0
 8001b52:	1c10      	adds	r0, r2, #0
 8001b54:	4662      	mov	r2, ip
 8001b56:	468c      	mov	ip, r1
 8001b58:	1c19      	adds	r1, r3, #0
 8001b5a:	4663      	mov	r3, ip
 8001b5c:	e000      	b.n	8001b60 <__aeabi_cdcmpeq>
 8001b5e:	46c0      	nop			; (mov r8, r8)

08001b60 <__aeabi_cdcmpeq>:
 8001b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001b62:	f000 f8fd 	bl	8001d60 <__ledf2>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d401      	bmi.n	8001b6e <__aeabi_cdcmpeq+0xe>
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	42c8      	cmn	r0, r1
 8001b6e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001b70 <__aeabi_dcmpeq>:
 8001b70:	b510      	push	{r4, lr}
 8001b72:	f000 f855 	bl	8001c20 <__eqdf2>
 8001b76:	4240      	negs	r0, r0
 8001b78:	3001      	adds	r0, #1
 8001b7a:	bd10      	pop	{r4, pc}

08001b7c <__aeabi_dcmplt>:
 8001b7c:	b510      	push	{r4, lr}
 8001b7e:	f000 f8ef 	bl	8001d60 <__ledf2>
 8001b82:	2800      	cmp	r0, #0
 8001b84:	db01      	blt.n	8001b8a <__aeabi_dcmplt+0xe>
 8001b86:	2000      	movs	r0, #0
 8001b88:	bd10      	pop	{r4, pc}
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)

08001b90 <__aeabi_dcmple>:
 8001b90:	b510      	push	{r4, lr}
 8001b92:	f000 f8e5 	bl	8001d60 <__ledf2>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	dd01      	ble.n	8001b9e <__aeabi_dcmple+0xe>
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	bd10      	pop	{r4, pc}
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	bd10      	pop	{r4, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)

08001ba4 <__aeabi_dcmpgt>:
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	f000 f877 	bl	8001c98 <__gedf2>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	dc01      	bgt.n	8001bb2 <__aeabi_dcmpgt+0xe>
 8001bae:	2000      	movs	r0, #0
 8001bb0:	bd10      	pop	{r4, pc}
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)

08001bb8 <__aeabi_dcmpge>:
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	f000 f86d 	bl	8001c98 <__gedf2>
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	da01      	bge.n	8001bc6 <__aeabi_dcmpge+0xe>
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	bd10      	pop	{r4, pc}
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	bd10      	pop	{r4, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)

08001bcc <__clzsi2>:
 8001bcc:	211c      	movs	r1, #28
 8001bce:	2301      	movs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	d301      	bcc.n	8001bda <__clzsi2+0xe>
 8001bd6:	0c00      	lsrs	r0, r0, #16
 8001bd8:	3910      	subs	r1, #16
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	4298      	cmp	r0, r3
 8001bde:	d301      	bcc.n	8001be4 <__clzsi2+0x18>
 8001be0:	0a00      	lsrs	r0, r0, #8
 8001be2:	3908      	subs	r1, #8
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	4298      	cmp	r0, r3
 8001be8:	d301      	bcc.n	8001bee <__clzsi2+0x22>
 8001bea:	0900      	lsrs	r0, r0, #4
 8001bec:	3904      	subs	r1, #4
 8001bee:	a202      	add	r2, pc, #8	; (adr r2, 8001bf8 <__clzsi2+0x2c>)
 8001bf0:	5c10      	ldrb	r0, [r2, r0]
 8001bf2:	1840      	adds	r0, r0, r1
 8001bf4:	4770      	bx	lr
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	02020304 	.word	0x02020304
 8001bfc:	01010101 	.word	0x01010101
	...

08001c08 <__clzdi2>:
 8001c08:	b510      	push	{r4, lr}
 8001c0a:	2900      	cmp	r1, #0
 8001c0c:	d103      	bne.n	8001c16 <__clzdi2+0xe>
 8001c0e:	f7ff ffdd 	bl	8001bcc <__clzsi2>
 8001c12:	3020      	adds	r0, #32
 8001c14:	e002      	b.n	8001c1c <__clzdi2+0x14>
 8001c16:	1c08      	adds	r0, r1, #0
 8001c18:	f7ff ffd8 	bl	8001bcc <__clzsi2>
 8001c1c:	bd10      	pop	{r4, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)

08001c20 <__eqdf2>:
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	464f      	mov	r7, r9
 8001c24:	4646      	mov	r6, r8
 8001c26:	46d6      	mov	lr, sl
 8001c28:	4684      	mov	ip, r0
 8001c2a:	b5c0      	push	{r6, r7, lr}
 8001c2c:	4680      	mov	r8, r0
 8001c2e:	4e19      	ldr	r6, [pc, #100]	; (8001c94 <__eqdf2+0x74>)
 8001c30:	0318      	lsls	r0, r3, #12
 8001c32:	030f      	lsls	r7, r1, #12
 8001c34:	004d      	lsls	r5, r1, #1
 8001c36:	0b00      	lsrs	r0, r0, #12
 8001c38:	005c      	lsls	r4, r3, #1
 8001c3a:	4682      	mov	sl, r0
 8001c3c:	0b3f      	lsrs	r7, r7, #12
 8001c3e:	0d6d      	lsrs	r5, r5, #21
 8001c40:	0fc9      	lsrs	r1, r1, #31
 8001c42:	4691      	mov	r9, r2
 8001c44:	0d64      	lsrs	r4, r4, #21
 8001c46:	0fdb      	lsrs	r3, r3, #31
 8001c48:	2001      	movs	r0, #1
 8001c4a:	42b5      	cmp	r5, r6
 8001c4c:	d00a      	beq.n	8001c64 <__eqdf2+0x44>
 8001c4e:	42b4      	cmp	r4, r6
 8001c50:	d003      	beq.n	8001c5a <__eqdf2+0x3a>
 8001c52:	42a5      	cmp	r5, r4
 8001c54:	d101      	bne.n	8001c5a <__eqdf2+0x3a>
 8001c56:	4557      	cmp	r7, sl
 8001c58:	d00c      	beq.n	8001c74 <__eqdf2+0x54>
 8001c5a:	bc1c      	pop	{r2, r3, r4}
 8001c5c:	4690      	mov	r8, r2
 8001c5e:	4699      	mov	r9, r3
 8001c60:	46a2      	mov	sl, r4
 8001c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c64:	4666      	mov	r6, ip
 8001c66:	433e      	orrs	r6, r7
 8001c68:	d1f7      	bne.n	8001c5a <__eqdf2+0x3a>
 8001c6a:	42ac      	cmp	r4, r5
 8001c6c:	d1f5      	bne.n	8001c5a <__eqdf2+0x3a>
 8001c6e:	4654      	mov	r4, sl
 8001c70:	4314      	orrs	r4, r2
 8001c72:	d1f2      	bne.n	8001c5a <__eqdf2+0x3a>
 8001c74:	2001      	movs	r0, #1
 8001c76:	45c8      	cmp	r8, r9
 8001c78:	d1ef      	bne.n	8001c5a <__eqdf2+0x3a>
 8001c7a:	4299      	cmp	r1, r3
 8001c7c:	d007      	beq.n	8001c8e <__eqdf2+0x6e>
 8001c7e:	2d00      	cmp	r5, #0
 8001c80:	d1eb      	bne.n	8001c5a <__eqdf2+0x3a>
 8001c82:	4663      	mov	r3, ip
 8001c84:	431f      	orrs	r7, r3
 8001c86:	0038      	movs	r0, r7
 8001c88:	1e47      	subs	r7, r0, #1
 8001c8a:	41b8      	sbcs	r0, r7
 8001c8c:	e7e5      	b.n	8001c5a <__eqdf2+0x3a>
 8001c8e:	2000      	movs	r0, #0
 8001c90:	e7e3      	b.n	8001c5a <__eqdf2+0x3a>
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	000007ff 	.word	0x000007ff

08001c98 <__gedf2>:
 8001c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9a:	464f      	mov	r7, r9
 8001c9c:	4646      	mov	r6, r8
 8001c9e:	46d6      	mov	lr, sl
 8001ca0:	004d      	lsls	r5, r1, #1
 8001ca2:	b5c0      	push	{r6, r7, lr}
 8001ca4:	030e      	lsls	r6, r1, #12
 8001ca6:	0fc9      	lsrs	r1, r1, #31
 8001ca8:	468a      	mov	sl, r1
 8001caa:	492c      	ldr	r1, [pc, #176]	; (8001d5c <__gedf2+0xc4>)
 8001cac:	031f      	lsls	r7, r3, #12
 8001cae:	005c      	lsls	r4, r3, #1
 8001cb0:	4680      	mov	r8, r0
 8001cb2:	0b36      	lsrs	r6, r6, #12
 8001cb4:	0d6d      	lsrs	r5, r5, #21
 8001cb6:	4691      	mov	r9, r2
 8001cb8:	0b3f      	lsrs	r7, r7, #12
 8001cba:	0d64      	lsrs	r4, r4, #21
 8001cbc:	0fdb      	lsrs	r3, r3, #31
 8001cbe:	428d      	cmp	r5, r1
 8001cc0:	d01e      	beq.n	8001d00 <__gedf2+0x68>
 8001cc2:	428c      	cmp	r4, r1
 8001cc4:	d016      	beq.n	8001cf4 <__gedf2+0x5c>
 8001cc6:	2d00      	cmp	r5, #0
 8001cc8:	d11e      	bne.n	8001d08 <__gedf2+0x70>
 8001cca:	4330      	orrs	r0, r6
 8001ccc:	4684      	mov	ip, r0
 8001cce:	2c00      	cmp	r4, #0
 8001cd0:	d101      	bne.n	8001cd6 <__gedf2+0x3e>
 8001cd2:	433a      	orrs	r2, r7
 8001cd4:	d023      	beq.n	8001d1e <__gedf2+0x86>
 8001cd6:	4662      	mov	r2, ip
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d01a      	beq.n	8001d12 <__gedf2+0x7a>
 8001cdc:	459a      	cmp	sl, r3
 8001cde:	d029      	beq.n	8001d34 <__gedf2+0x9c>
 8001ce0:	4651      	mov	r1, sl
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	3901      	subs	r1, #1
 8001ce6:	4008      	ands	r0, r1
 8001ce8:	3801      	subs	r0, #1
 8001cea:	bc1c      	pop	{r2, r3, r4}
 8001cec:	4690      	mov	r8, r2
 8001cee:	4699      	mov	r9, r3
 8001cf0:	46a2      	mov	sl, r4
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf4:	0039      	movs	r1, r7
 8001cf6:	4311      	orrs	r1, r2
 8001cf8:	d0e5      	beq.n	8001cc6 <__gedf2+0x2e>
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	4240      	negs	r0, r0
 8001cfe:	e7f4      	b.n	8001cea <__gedf2+0x52>
 8001d00:	4330      	orrs	r0, r6
 8001d02:	d1fa      	bne.n	8001cfa <__gedf2+0x62>
 8001d04:	42ac      	cmp	r4, r5
 8001d06:	d00f      	beq.n	8001d28 <__gedf2+0x90>
 8001d08:	2c00      	cmp	r4, #0
 8001d0a:	d10f      	bne.n	8001d2c <__gedf2+0x94>
 8001d0c:	433a      	orrs	r2, r7
 8001d0e:	d0e7      	beq.n	8001ce0 <__gedf2+0x48>
 8001d10:	e00c      	b.n	8001d2c <__gedf2+0x94>
 8001d12:	2201      	movs	r2, #1
 8001d14:	3b01      	subs	r3, #1
 8001d16:	4393      	bics	r3, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	3001      	adds	r0, #1
 8001d1c:	e7e5      	b.n	8001cea <__gedf2+0x52>
 8001d1e:	4663      	mov	r3, ip
 8001d20:	2000      	movs	r0, #0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0e1      	beq.n	8001cea <__gedf2+0x52>
 8001d26:	e7db      	b.n	8001ce0 <__gedf2+0x48>
 8001d28:	433a      	orrs	r2, r7
 8001d2a:	d1e6      	bne.n	8001cfa <__gedf2+0x62>
 8001d2c:	459a      	cmp	sl, r3
 8001d2e:	d1d7      	bne.n	8001ce0 <__gedf2+0x48>
 8001d30:	42a5      	cmp	r5, r4
 8001d32:	dcd5      	bgt.n	8001ce0 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	db05      	blt.n	8001d44 <__gedf2+0xac>
 8001d38:	42be      	cmp	r6, r7
 8001d3a:	d8d1      	bhi.n	8001ce0 <__gedf2+0x48>
 8001d3c:	d008      	beq.n	8001d50 <__gedf2+0xb8>
 8001d3e:	2000      	movs	r0, #0
 8001d40:	42be      	cmp	r6, r7
 8001d42:	d2d2      	bcs.n	8001cea <__gedf2+0x52>
 8001d44:	4650      	mov	r0, sl
 8001d46:	2301      	movs	r3, #1
 8001d48:	3801      	subs	r0, #1
 8001d4a:	4398      	bics	r0, r3
 8001d4c:	3001      	adds	r0, #1
 8001d4e:	e7cc      	b.n	8001cea <__gedf2+0x52>
 8001d50:	45c8      	cmp	r8, r9
 8001d52:	d8c5      	bhi.n	8001ce0 <__gedf2+0x48>
 8001d54:	2000      	movs	r0, #0
 8001d56:	45c8      	cmp	r8, r9
 8001d58:	d3f4      	bcc.n	8001d44 <__gedf2+0xac>
 8001d5a:	e7c6      	b.n	8001cea <__gedf2+0x52>
 8001d5c:	000007ff 	.word	0x000007ff

08001d60 <__ledf2>:
 8001d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d62:	464f      	mov	r7, r9
 8001d64:	4646      	mov	r6, r8
 8001d66:	46d6      	mov	lr, sl
 8001d68:	004d      	lsls	r5, r1, #1
 8001d6a:	b5c0      	push	{r6, r7, lr}
 8001d6c:	030e      	lsls	r6, r1, #12
 8001d6e:	0fc9      	lsrs	r1, r1, #31
 8001d70:	468a      	mov	sl, r1
 8001d72:	492e      	ldr	r1, [pc, #184]	; (8001e2c <__ledf2+0xcc>)
 8001d74:	031f      	lsls	r7, r3, #12
 8001d76:	005c      	lsls	r4, r3, #1
 8001d78:	4680      	mov	r8, r0
 8001d7a:	0b36      	lsrs	r6, r6, #12
 8001d7c:	0d6d      	lsrs	r5, r5, #21
 8001d7e:	4691      	mov	r9, r2
 8001d80:	0b3f      	lsrs	r7, r7, #12
 8001d82:	0d64      	lsrs	r4, r4, #21
 8001d84:	0fdb      	lsrs	r3, r3, #31
 8001d86:	428d      	cmp	r5, r1
 8001d88:	d018      	beq.n	8001dbc <__ledf2+0x5c>
 8001d8a:	428c      	cmp	r4, r1
 8001d8c:	d011      	beq.n	8001db2 <__ledf2+0x52>
 8001d8e:	2d00      	cmp	r5, #0
 8001d90:	d118      	bne.n	8001dc4 <__ledf2+0x64>
 8001d92:	4330      	orrs	r0, r6
 8001d94:	4684      	mov	ip, r0
 8001d96:	2c00      	cmp	r4, #0
 8001d98:	d11e      	bne.n	8001dd8 <__ledf2+0x78>
 8001d9a:	433a      	orrs	r2, r7
 8001d9c:	d11c      	bne.n	8001dd8 <__ledf2+0x78>
 8001d9e:	4663      	mov	r3, ip
 8001da0:	2000      	movs	r0, #0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d030      	beq.n	8001e08 <__ledf2+0xa8>
 8001da6:	4651      	mov	r1, sl
 8001da8:	2002      	movs	r0, #2
 8001daa:	3901      	subs	r1, #1
 8001dac:	4008      	ands	r0, r1
 8001dae:	3801      	subs	r0, #1
 8001db0:	e02a      	b.n	8001e08 <__ledf2+0xa8>
 8001db2:	0039      	movs	r1, r7
 8001db4:	4311      	orrs	r1, r2
 8001db6:	d0ea      	beq.n	8001d8e <__ledf2+0x2e>
 8001db8:	2002      	movs	r0, #2
 8001dba:	e025      	b.n	8001e08 <__ledf2+0xa8>
 8001dbc:	4330      	orrs	r0, r6
 8001dbe:	d1fb      	bne.n	8001db8 <__ledf2+0x58>
 8001dc0:	42ac      	cmp	r4, r5
 8001dc2:	d026      	beq.n	8001e12 <__ledf2+0xb2>
 8001dc4:	2c00      	cmp	r4, #0
 8001dc6:	d126      	bne.n	8001e16 <__ledf2+0xb6>
 8001dc8:	433a      	orrs	r2, r7
 8001dca:	d124      	bne.n	8001e16 <__ledf2+0xb6>
 8001dcc:	4651      	mov	r1, sl
 8001dce:	2002      	movs	r0, #2
 8001dd0:	3901      	subs	r1, #1
 8001dd2:	4008      	ands	r0, r1
 8001dd4:	3801      	subs	r0, #1
 8001dd6:	e017      	b.n	8001e08 <__ledf2+0xa8>
 8001dd8:	4662      	mov	r2, ip
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	d00f      	beq.n	8001dfe <__ledf2+0x9e>
 8001dde:	459a      	cmp	sl, r3
 8001de0:	d1e1      	bne.n	8001da6 <__ledf2+0x46>
 8001de2:	42a5      	cmp	r5, r4
 8001de4:	db05      	blt.n	8001df2 <__ledf2+0x92>
 8001de6:	42be      	cmp	r6, r7
 8001de8:	d8dd      	bhi.n	8001da6 <__ledf2+0x46>
 8001dea:	d019      	beq.n	8001e20 <__ledf2+0xc0>
 8001dec:	2000      	movs	r0, #0
 8001dee:	42be      	cmp	r6, r7
 8001df0:	d20a      	bcs.n	8001e08 <__ledf2+0xa8>
 8001df2:	4650      	mov	r0, sl
 8001df4:	2301      	movs	r3, #1
 8001df6:	3801      	subs	r0, #1
 8001df8:	4398      	bics	r0, r3
 8001dfa:	3001      	adds	r0, #1
 8001dfc:	e004      	b.n	8001e08 <__ledf2+0xa8>
 8001dfe:	2201      	movs	r2, #1
 8001e00:	3b01      	subs	r3, #1
 8001e02:	4393      	bics	r3, r2
 8001e04:	0018      	movs	r0, r3
 8001e06:	3001      	adds	r0, #1
 8001e08:	bc1c      	pop	{r2, r3, r4}
 8001e0a:	4690      	mov	r8, r2
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	46a2      	mov	sl, r4
 8001e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e12:	433a      	orrs	r2, r7
 8001e14:	d1d0      	bne.n	8001db8 <__ledf2+0x58>
 8001e16:	459a      	cmp	sl, r3
 8001e18:	d1c5      	bne.n	8001da6 <__ledf2+0x46>
 8001e1a:	42a5      	cmp	r5, r4
 8001e1c:	dcc3      	bgt.n	8001da6 <__ledf2+0x46>
 8001e1e:	e7e0      	b.n	8001de2 <__ledf2+0x82>
 8001e20:	45c8      	cmp	r8, r9
 8001e22:	d8c0      	bhi.n	8001da6 <__ledf2+0x46>
 8001e24:	2000      	movs	r0, #0
 8001e26:	45c8      	cmp	r8, r9
 8001e28:	d3e3      	bcc.n	8001df2 <__ledf2+0x92>
 8001e2a:	e7ed      	b.n	8001e08 <__ledf2+0xa8>
 8001e2c:	000007ff 	.word	0x000007ff

08001e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e36:	f001 fa17 	bl	8003268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e3a:	f000 f823 	bl	8001e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e3e:	f000 fad7 	bl	80023f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e42:	f000 fab7 	bl	80023b4 <MX_DMA_Init>
  MX_I2C2_Init();
 8001e46:	f000 f90b 	bl	8002060 <MX_I2C2_Init>
  MX_RTC_Init();
 8001e4a:	f000 f949 	bl	80020e0 <MX_RTC_Init>
  MX_SPI1_Init();
 8001e4e:	f000 f9b3 	bl	80021b8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001e52:	f000 f9ef 	bl	8002234 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001e56:	f000 fa2b 	bl	80022b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e5a:	f000 fa77 	bl	800234c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001e5e:	f000 f893 	bl	8001f88 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf( "Hydra Management Processor Running\r\n" );
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <main+0x50>)
 8001e64:	0018      	movs	r0, r3
 8001e66:	f005 fe65 	bl	8007b34 <puts>
  system_init();
 8001e6a:	f001 f9c9 	bl	8003200 <system_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		current_time = HAL_GetTick();
 8001e6e:	f001 fa75 	bl	800335c <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	607b      	str	r3, [r7, #4]
	  /*
	   * Operate each module as a state machine so that they can perform different small tasks each time
	   */
	  // process_wifi_module();
	  // process_i2c();
	  process_led_display( current_time );
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 fe8d 	bl	8002b98 <process_led_display>
		current_time = HAL_GetTick();
 8001e7e:	e7f6      	b.n	8001e6e <main+0x3e>
 8001e80:	080083dc 	.word	0x080083dc

08001e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b09d      	sub	sp, #116	; 0x74
 8001e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8a:	2438      	movs	r4, #56	; 0x38
 8001e8c:	193b      	adds	r3, r7, r4
 8001e8e:	0018      	movs	r0, r3
 8001e90:	2338      	movs	r3, #56	; 0x38
 8001e92:	001a      	movs	r2, r3
 8001e94:	2100      	movs	r1, #0
 8001e96:	f005 fde5 	bl	8007a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9a:	2328      	movs	r3, #40	; 0x28
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f005 fddd 	bl	8007a64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eaa:	003b      	movs	r3, r7
 8001eac:	0018      	movs	r0, r3
 8001eae:	2328      	movs	r3, #40	; 0x28
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	f005 fdd6 	bl	8007a64 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f002 fced 	bl	800489c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001ec2:	193b      	adds	r3, r7, r4
 8001ec4:	220a      	movs	r2, #10
 8001ec6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec8:	193b      	adds	r3, r7, r4
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	0052      	lsls	r2, r2, #1
 8001ece:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001ed0:	0021      	movs	r1, r4
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	2202      	movs	r2, #2
 8001eee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	2210      	movs	r2, #16
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	0292      	lsls	r2, r2, #10
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	0492      	lsls	r2, r2, #18
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	0612      	lsls	r2, r2, #24
 8001f12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	0018      	movs	r0, r3
 8001f18:	f002 fd0c 	bl	8004934 <HAL_RCC_OscConfig>
 8001f1c:	1e03      	subs	r3, r0, #0
 8001f1e:	d001      	beq.n	8001f24 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001f20:	f000 fb36 	bl	8002590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f24:	2128      	movs	r1, #40	; 0x28
 8001f26:	187b      	adds	r3, r7, r1
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	2202      	movs	r2, #2
 8001f30:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f32:	187b      	adds	r3, r7, r1
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f3e:	187b      	adds	r3, r7, r1
 8001f40:	2102      	movs	r1, #2
 8001f42:	0018      	movs	r0, r3
 8001f44:	f003 f816 	bl	8004f74 <HAL_RCC_ClockConfig>
 8001f48:	1e03      	subs	r3, r0, #0
 8001f4a:	d001      	beq.n	8001f50 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001f4c:	f000 fb20 	bl	8002590 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8001f50:	003b      	movs	r3, r7
 8001f52:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <SystemClock_Config+0x100>)
 8001f54:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001f56:	003b      	movs	r3, r7
 8001f58:	2200      	movs	r2, #0
 8001f5a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001f5c:	003b      	movs	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f62:	003b      	movs	r3, r7
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6a:	003b      	movs	r3, r7
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f003 f9ab 	bl	80052c8 <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	1e03      	subs	r3, r0, #0
 8001f74:	d001      	beq.n	8001f7a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001f76:	f000 fb0b 	bl	8002590 <Error_Handler>
  }
}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b01d      	add	sp, #116	; 0x74
 8001f80:	bd90      	pop	{r4, r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	00024001 	.word	0x00024001

08001f88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	0018      	movs	r0, r3
 8001f92:	230c      	movs	r3, #12
 8001f94:	001a      	movs	r2, r3
 8001f96:	2100      	movs	r1, #0
 8001f98:	f005 fd64 	bl	8007a64 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001f9e:	4a2e      	ldr	r2, [pc, #184]	; (8002058 <MX_ADC1_Init+0xd0>)
 8001fa0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	05d2      	lsls	r2, r2, #23
 8001fa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fb6:	4b27      	ldr	r3, [pc, #156]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fce:	4b21      	ldr	r3, [pc, #132]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fdc:	2220      	movs	r2, #32
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001ff0:	222c      	movs	r2, #44	; 0x2c
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MX_ADC1_Init+0xcc>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <MX_ADC1_Init+0xcc>)
 8002004:	2200      	movs	r2, #0
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <MX_ADC1_Init+0xcc>)
 800200a:	223c      	movs	r2, #60	; 0x3c
 800200c:	2100      	movs	r1, #0
 800200e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MX_ADC1_Init+0xcc>)
 8002012:	2200      	movs	r2, #0
 8002014:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MX_ADC1_Init+0xcc>)
 8002018:	0018      	movs	r0, r3
 800201a:	f001 fab3 	bl	8003584 <HAL_ADC_Init>
 800201e:	1e03      	subs	r3, r0, #0
 8002020:	d001      	beq.n	8002026 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002022:	f000 fab5 	bl	8002590 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	4a0c      	ldr	r2, [pc, #48]	; (800205c <MX_ADC1_Init+0xd4>)
 800202a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002038:	1d3a      	adds	r2, r7, #4
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_ADC1_Init+0xcc>)
 800203c:	0011      	movs	r1, r2
 800203e:	0018      	movs	r0, r3
 8002040:	f001 fc76 	bl	8003930 <HAL_ADC_ConfigChannel>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d001      	beq.n	800204c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002048:	f000 faa2 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000540 	.word	0x20000540
 8002058:	40012400 	.word	0x40012400
 800205c:	20000100 	.word	0x20000100

08002060 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <MX_I2C2_Init+0x74>)
 8002066:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <MX_I2C2_Init+0x78>)
 8002068:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0F7FE;
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <MX_I2C2_Init+0x74>)
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <MX_I2C2_Init+0x7c>)
 800206e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <MX_I2C2_Init+0x74>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <MX_I2C2_Init+0x74>)
 8002078:	2201      	movs	r2, #1
 800207a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <MX_I2C2_Init+0x74>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <MX_I2C2_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <MX_I2C2_Init+0x74>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <MX_I2C2_Init+0x74>)
 8002090:	2200      	movs	r2, #0
 8002092:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <MX_I2C2_Init+0x74>)
 8002096:	2200      	movs	r2, #0
 8002098:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <MX_I2C2_Init+0x74>)
 800209c:	0018      	movs	r0, r3
 800209e:	f002 facf 	bl	8004640 <HAL_I2C_Init>
 80020a2:	1e03      	subs	r3, r0, #0
 80020a4:	d001      	beq.n	80020aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80020a6:	f000 fa73 	bl	8002590 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <MX_I2C2_Init+0x74>)
 80020ac:	2100      	movs	r1, #0
 80020ae:	0018      	movs	r0, r3
 80020b0:	f002 fb5c 	bl	800476c <HAL_I2CEx_ConfigAnalogFilter>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d001      	beq.n	80020bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80020b8:	f000 fa6a 	bl	8002590 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <MX_I2C2_Init+0x74>)
 80020be:	2100      	movs	r1, #0
 80020c0:	0018      	movs	r0, r3
 80020c2:	f002 fb9f 	bl	8004804 <HAL_I2CEx_ConfigDigitalFilter>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d001      	beq.n	80020ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80020ca:	f000 fa61 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200004f4 	.word	0x200004f4
 80020d8:	40005800 	.word	0x40005800
 80020dc:	00c0f7fe 	.word	0x00c0f7fe

080020e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	0018      	movs	r0, r3
 80020ea:	2314      	movs	r3, #20
 80020ec:	001a      	movs	r2, r3
 80020ee:	2100      	movs	r1, #0
 80020f0:	f005 fcb8 	bl	8007a64 <memset>
  RTC_DateTypeDef sDate = {0};
 80020f4:	003b      	movs	r3, r7
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <MX_RTC_Init+0xd0>)
 80020fc:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <MX_RTC_Init+0xd4>)
 80020fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <MX_RTC_Init+0xd0>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <MX_RTC_Init+0xd0>)
 8002108:	227f      	movs	r2, #127	; 0x7f
 800210a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <MX_RTC_Init+0xd0>)
 800210e:	22ff      	movs	r2, #255	; 0xff
 8002110:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002112:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <MX_RTC_Init+0xd0>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <MX_RTC_Init+0xd0>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <MX_RTC_Init+0xd0>)
 8002120:	2200      	movs	r2, #0
 8002122:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <MX_RTC_Init+0xd0>)
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	05d2      	lsls	r2, r2, #23
 800212a:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <MX_RTC_Init+0xd0>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002132:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <MX_RTC_Init+0xd0>)
 8002134:	0018      	movs	r0, r3
 8002136:	f003 fa41 	bl	80055bc <HAL_RTC_Init>
 800213a:	1e03      	subs	r3, r0, #0
 800213c:	d001      	beq.n	8002142 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800213e:	f000 fa27 	bl	8002590 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2200      	movs	r2, #0
 800214c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2200      	movs	r2, #0
 8002152:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2200      	movs	r2, #0
 800215e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002166:	1d39      	adds	r1, r7, #4
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <MX_RTC_Init+0xd0>)
 800216a:	2201      	movs	r2, #1
 800216c:	0018      	movs	r0, r3
 800216e:	f003 fabb 	bl	80056e8 <HAL_RTC_SetTime>
 8002172:	1e03      	subs	r3, r0, #0
 8002174:	d001      	beq.n	800217a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8002176:	f000 fa0b 	bl	8002590 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800217a:	003b      	movs	r3, r7
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002180:	003b      	movs	r3, r7
 8002182:	2201      	movs	r2, #1
 8002184:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002186:	003b      	movs	r3, r7
 8002188:	2201      	movs	r2, #1
 800218a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800218c:	003b      	movs	r3, r7
 800218e:	2200      	movs	r2, #0
 8002190:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002192:	0039      	movs	r1, r7
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <MX_RTC_Init+0xd0>)
 8002196:	2201      	movs	r2, #1
 8002198:	0018      	movs	r0, r3
 800219a:	f003 fb4d 	bl	8005838 <HAL_RTC_SetDate>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d001      	beq.n	80021a6 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80021a2:	f000 f9f5 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b006      	add	sp, #24
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	20000630 	.word	0x20000630
 80021b4:	40002800 	.word	0x40002800

080021b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <MX_SPI1_Init+0x74>)
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <MX_SPI1_Init+0x78>)
 80021c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <MX_SPI1_Init+0x74>)
 80021c4:	2282      	movs	r2, #130	; 0x82
 80021c6:	0052      	lsls	r2, r2, #1
 80021c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <MX_SPI1_Init+0x74>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <MX_SPI1_Init+0x74>)
 80021d2:	22e0      	movs	r2, #224	; 0xe0
 80021d4:	00d2      	lsls	r2, r2, #3
 80021d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d8:	4b14      	ldr	r3, [pc, #80]	; (800222c <MX_SPI1_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <MX_SPI1_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <MX_SPI1_Init+0x74>)
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	0092      	lsls	r2, r2, #2
 80021ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <MX_SPI1_Init+0x74>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <MX_SPI1_Init+0x74>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <MX_SPI1_Init+0x74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <MX_SPI1_Init+0x74>)
 8002200:	2200      	movs	r2, #0
 8002202:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <MX_SPI1_Init+0x74>)
 8002206:	2207      	movs	r2, #7
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <MX_SPI1_Init+0x74>)
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <MX_SPI1_Init+0x74>)
 8002212:	2208      	movs	r2, #8
 8002214:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <MX_SPI1_Init+0x74>)
 8002218:	0018      	movs	r0, r3
 800221a:	f003 fc79 	bl	8005b10 <HAL_SPI_Init>
 800221e:	1e03      	subs	r3, r0, #0
 8002220:	d001      	beq.n	8002226 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002222:	f000 f9b5 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	2000065c 	.word	0x2000065c
 8002230:	40013000 	.word	0x40013000

08002234 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <MX_SPI2_Init+0x74>)
 800223a:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <MX_SPI2_Init+0x78>)
 800223c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <MX_SPI2_Init+0x74>)
 8002240:	2282      	movs	r2, #130	; 0x82
 8002242:	0052      	lsls	r2, r2, #1
 8002244:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <MX_SPI2_Init+0x74>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <MX_SPI2_Init+0x74>)
 800224e:	22e0      	movs	r2, #224	; 0xe0
 8002250:	00d2      	lsls	r2, r2, #3
 8002252:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <MX_SPI2_Init+0x74>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <MX_SPI2_Init+0x74>)
 800225c:	2200      	movs	r2, #0
 800225e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_SPI2_Init+0x74>)
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <MX_SPI2_Init+0x74>)
 800226a:	2218      	movs	r2, #24
 800226c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_SPI2_Init+0x74>)
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_SPI2_Init+0x74>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <MX_SPI2_Init+0x74>)
 800227c:	2200      	movs	r2, #0
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_SPI2_Init+0x74>)
 8002282:	2207      	movs	r2, #7
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <MX_SPI2_Init+0x74>)
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_SPI2_Init+0x74>)
 800228e:	2208      	movs	r2, #8
 8002290:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <MX_SPI2_Init+0x74>)
 8002294:	0018      	movs	r0, r3
 8002296:	f003 fc3b 	bl	8005b10 <HAL_SPI_Init>
 800229a:	1e03      	subs	r3, r0, #0
 800229c:	d001      	beq.n	80022a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800229e:	f000 f977 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000314 	.word	0x20000314
 80022ac:	40003800 	.word	0x40003800

080022b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022b6:	4a24      	ldr	r2, [pc, #144]	; (8002348 <MX_USART1_UART_Init+0x98>)
 80022b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022bc:	22e1      	movs	r2, #225	; 0xe1
 80022be:	0252      	lsls	r2, r2, #9
 80022c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022fa:	0018      	movs	r0, r3
 80022fc:	f003 ff68 	bl	80061d0 <HAL_UART_Init>
 8002300:	1e03      	subs	r3, r0, #0
 8002302:	d001      	beq.n	8002308 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002304:	f000 f944 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_USART1_UART_Init+0x94>)
 800230a:	2100      	movs	r1, #0
 800230c:	0018      	movs	r0, r3
 800230e:	f005 fa93 	bl	8007838 <HAL_UARTEx_SetTxFifoThreshold>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d001      	beq.n	800231a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002316:	f000 f93b 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <MX_USART1_UART_Init+0x94>)
 800231c:	2100      	movs	r1, #0
 800231e:	0018      	movs	r0, r3
 8002320:	f005 faca 	bl	80078b8 <HAL_UARTEx_SetRxFifoThreshold>
 8002324:	1e03      	subs	r3, r0, #0
 8002326:	d001      	beq.n	800232c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002328:	f000 f932 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <MX_USART1_UART_Init+0x94>)
 800232e:	0018      	movs	r0, r3
 8002330:	f005 fa48 	bl	80077c4 <HAL_UARTEx_DisableFifoMode>
 8002334:	1e03      	subs	r3, r0, #0
 8002336:	d001      	beq.n	800233c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002338:	f000 f92a 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	200005a4 	.word	0x200005a4
 8002348:	40013800 	.word	0x40013800

0800234c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <MX_USART2_UART_Init+0x60>)
 8002352:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <MX_USART2_UART_Init+0x64>)
 8002354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <MX_USART2_UART_Init+0x60>)
 8002358:	22e1      	movs	r2, #225	; 0xe1
 800235a:	0252      	lsls	r2, r2, #9
 800235c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <MX_USART2_UART_Init+0x60>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <MX_USART2_UART_Init+0x60>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <MX_USART2_UART_Init+0x60>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_USART2_UART_Init+0x60>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <MX_USART2_UART_Init+0x60>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <MX_USART2_UART_Init+0x60>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <MX_USART2_UART_Init+0x60>)
 8002384:	2200      	movs	r2, #0
 8002386:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <MX_USART2_UART_Init+0x60>)
 800238a:	2200      	movs	r2, #0
 800238c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <MX_USART2_UART_Init+0x60>)
 8002390:	2200      	movs	r2, #0
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <MX_USART2_UART_Init+0x60>)
 8002396:	0018      	movs	r0, r3
 8002398:	f003 ff1a 	bl	80061d0 <HAL_UART_Init>
 800239c:	1e03      	subs	r3, r0, #0
 800239e:	d001      	beq.n	80023a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80023a0:	f000 f8f6 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	200006c0 	.word	0x200006c0
 80023b0:	40004400 	.word	0x40004400

080023b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_DMA_Init+0x38>)
 80023bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <MX_DMA_Init+0x38>)
 80023c0:	2101      	movs	r1, #1
 80023c2:	430a      	orrs	r2, r1
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_DMA_Init+0x38>)
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	2201      	movs	r2, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	2009      	movs	r0, #9
 80023d8:	f001 fd2a 	bl	8003e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023dc:	2009      	movs	r0, #9
 80023de:	f001 fd3c 	bl	8003e5a <HAL_NVIC_EnableIRQ>

}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	40021000 	.word	0x40021000

080023f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f6:	240c      	movs	r4, #12
 80023f8:	193b      	adds	r3, r7, r4
 80023fa:	0018      	movs	r0, r3
 80023fc:	2314      	movs	r3, #20
 80023fe:	001a      	movs	r2, r3
 8002400:	2100      	movs	r1, #0
 8002402:	f005 fb2f 	bl	8007a64 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	4b54      	ldr	r3, [pc, #336]	; (8002558 <MX_GPIO_Init+0x168>)
 8002408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240a:	4b53      	ldr	r3, [pc, #332]	; (8002558 <MX_GPIO_Init+0x168>)
 800240c:	2102      	movs	r1, #2
 800240e:	430a      	orrs	r2, r1
 8002410:	635a      	str	r2, [r3, #52]	; 0x34
 8002412:	4b51      	ldr	r3, [pc, #324]	; (8002558 <MX_GPIO_Init+0x168>)
 8002414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002416:	2202      	movs	r2, #2
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	4b4e      	ldr	r3, [pc, #312]	; (8002558 <MX_GPIO_Init+0x168>)
 8002420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <MX_GPIO_Init+0x168>)
 8002424:	2101      	movs	r1, #1
 8002426:	430a      	orrs	r2, r1
 8002428:	635a      	str	r2, [r3, #52]	; 0x34
 800242a:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <MX_GPIO_Init+0x168>)
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	2201      	movs	r2, #1
 8002430:	4013      	ands	r3, r2
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	4b48      	ldr	r3, [pc, #288]	; (8002558 <MX_GPIO_Init+0x168>)
 8002438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <MX_GPIO_Init+0x168>)
 800243c:	2104      	movs	r1, #4
 800243e:	430a      	orrs	r2, r1
 8002440:	635a      	str	r2, [r3, #52]	; 0x34
 8002442:	4b45      	ldr	r3, [pc, #276]	; (8002558 <MX_GPIO_Init+0x168>)
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	2204      	movs	r2, #4
 8002448:	4013      	ands	r3, r2
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable_Comm_Processor_3V3_Pin|LED_Array_Enable___Pin|LED_Power_Enable_Pin, GPIO_PIN_RESET);
 800244e:	238c      	movs	r3, #140	; 0x8c
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4842      	ldr	r0, [pc, #264]	; (800255c <MX_GPIO_Init+0x16c>)
 8002454:	2200      	movs	r2, #0
 8002456:	0019      	movs	r1, r3
 8002458:	f002 f8d4 	bl	8004604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Enable_Comm_Processor_3V3_Pin LED_Array_Enable___Pin LED_Power_Enable_Pin */
  GPIO_InitStruct.Pin = Enable_Comm_Processor_3V3_Pin|LED_Array_Enable___Pin|LED_Power_Enable_Pin;
 800245c:	193b      	adds	r3, r7, r4
 800245e:	228c      	movs	r2, #140	; 0x8c
 8002460:	0092      	lsls	r2, r2, #2
 8002462:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002464:	193b      	adds	r3, r7, r4
 8002466:	2201      	movs	r2, #1
 8002468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	193b      	adds	r3, r7, r4
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	193b      	adds	r3, r7, r4
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	193b      	adds	r3, r7, r4
 8002478:	4a38      	ldr	r2, [pc, #224]	; (800255c <MX_GPIO_Init+0x16c>)
 800247a:	0019      	movs	r1, r3
 800247c:	0010      	movs	r0, r2
 800247e:	f001 ff5d 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Status_Pin */
  GPIO_InitStruct.Pin = Charge_Status_Pin;
 8002482:	193b      	adds	r3, r7, r4
 8002484:	2202      	movs	r2, #2
 8002486:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002488:	193b      	adds	r3, r7, r4
 800248a:	2203      	movs	r2, #3
 800248c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	193b      	adds	r3, r7, r4
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charge_Status_GPIO_Port, &GPIO_InitStruct);
 8002494:	193a      	adds	r2, r7, r4
 8002496:	23a0      	movs	r3, #160	; 0xa0
 8002498:	05db      	lsls	r3, r3, #23
 800249a:	0011      	movs	r1, r2
 800249c:	0018      	movs	r0, r3
 800249e:	f001 ff4d 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SFLASH_CS_Pin */
  GPIO_InitStruct.Pin = SPI_SFLASH_CS_Pin;
 80024a2:	193b      	adds	r3, r7, r4
 80024a4:	2210      	movs	r2, #16
 80024a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	4a2d      	ldr	r2, [pc, #180]	; (8002560 <MX_GPIO_Init+0x170>)
 80024ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI_SFLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80024b4:	193a      	adds	r2, r7, r4
 80024b6:	23a0      	movs	r3, #160	; 0xa0
 80024b8:	05db      	lsls	r3, r3, #23
 80024ba:	0011      	movs	r1, r2
 80024bc:	0018      	movs	r0, r3
 80024be:	f001 ff3d 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMID___4_Pin VSYS___2_Pin */
  GPIO_InitStruct.Pin = PMID___4_Pin|VSYS___2_Pin;
 80024c2:	193b      	adds	r3, r7, r4
 80024c4:	220c      	movs	r2, #12
 80024c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	2203      	movs	r2, #3
 80024cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d4:	193b      	adds	r3, r7, r4
 80024d6:	4a21      	ldr	r2, [pc, #132]	; (800255c <MX_GPIO_Init+0x16c>)
 80024d8:	0019      	movs	r1, r3
 80024da:	0010      	movs	r0, r2
 80024dc:	f001 ff2e 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pins : Charge_INT___Pin Power_Down___Pin UFP_Fault___Pin */
  GPIO_InitStruct.Pin = Charge_INT___Pin|Power_Down___Pin|UFP_Fault___Pin;
 80024e0:	193b      	adds	r3, r7, r4
 80024e2:	2283      	movs	r2, #131	; 0x83
 80024e4:	0212      	lsls	r2, r2, #8
 80024e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e8:	193b      	adds	r3, r7, r4
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	193b      	adds	r3, r7, r4
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	193a      	adds	r2, r7, r4
 80024f6:	23a0      	movs	r3, #160	; 0xa0
 80024f8:	05db      	lsls	r3, r3, #23
 80024fa:	0011      	movs	r1, r2
 80024fc:	0018      	movs	r0, r3
 80024fe:	f001 ff1d 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : Dead_Battery___Pin */
  GPIO_InitStruct.Pin = Dead_Battery___Pin;
 8002502:	193b      	adds	r3, r7, r4
 8002504:	2240      	movs	r2, #64	; 0x40
 8002506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002508:	193b      	adds	r3, r7, r4
 800250a:	2200      	movs	r2, #0
 800250c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	193b      	adds	r3, r7, r4
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Dead_Battery___GPIO_Port, &GPIO_InitStruct);
 8002514:	193b      	adds	r3, r7, r4
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <MX_GPIO_Init+0x174>)
 8002518:	0019      	movs	r1, r3
 800251a:	0010      	movs	r0, r2
 800251c:	f001 ff0e 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : Beeper_Pin */
  GPIO_InitStruct.Pin = Beeper_Pin;
 8002520:	0021      	movs	r1, r4
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	187b      	adds	r3, r7, r1
 800252c:	2202      	movs	r2, #2
 800252e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	187b      	adds	r3, r7, r1
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	187b      	adds	r3, r7, r1
 8002538:	2200      	movs	r2, #0
 800253a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800253c:	187b      	adds	r3, r7, r1
 800253e:	2202      	movs	r2, #2
 8002540:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(Beeper_GPIO_Port, &GPIO_InitStruct);
 8002542:	187b      	adds	r3, r7, r1
 8002544:	4a05      	ldr	r2, [pc, #20]	; (800255c <MX_GPIO_Init+0x16c>)
 8002546:	0019      	movs	r1, r3
 8002548:	0010      	movs	r0, r2
 800254a:	f001 fef7 	bl	800433c <HAL_GPIO_Init>

}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b009      	add	sp, #36	; 0x24
 8002554:	bd90      	pop	{r4, r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	40021000 	.word	0x40021000
 800255c:	50000400 	.word	0x50000400
 8002560:	10110000 	.word	0x10110000
 8002564:	50000800 	.word	0x50000800

08002568 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <__io_putchar+0x20>)
 8002572:	1d39      	adds	r1, r7, #4
 8002574:	4805      	ldr	r0, [pc, #20]	; (800258c <__io_putchar+0x24>)
 8002576:	2201      	movs	r2, #1
 8002578:	f003 fe80 	bl	800627c <HAL_UART_Transmit>

  return ch;
 800257c:	687b      	ldr	r3, [r7, #4]
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	0000ffff 	.word	0x0000ffff
 800258c:	200006c0 	.word	0x200006c0

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_MspInit+0x44>)
 80025a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_MspInit+0x44>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	430a      	orrs	r2, r1
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_MspInit+0x44>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2201      	movs	r2, #1
 80025b4:	4013      	ands	r3, r2
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_MspInit+0x44>)
 80025bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_MspInit+0x44>)
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	0549      	lsls	r1, r1, #21
 80025c4:	430a      	orrs	r2, r1
 80025c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_MspInit+0x44>)
 80025ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	055b      	lsls	r3, r3, #21
 80025d0:	4013      	ands	r3, r2
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b002      	add	sp, #8
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	2314      	movs	r3, #20
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	0018      	movs	r0, r3
 80025f2:	2314      	movs	r3, #20
 80025f4:	001a      	movs	r2, r3
 80025f6:	2100      	movs	r1, #0
 80025f8:	f005 fa34 	bl	8007a64 <memset>
  if(hadc->Instance==ADC1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_ADC_MspInit+0x80>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d129      	bne.n	800265a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_ADC_MspInit+0x84>)
 8002608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_ADC_MspInit+0x84>)
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	0349      	lsls	r1, r1, #13
 8002610:	430a      	orrs	r2, r1
 8002612:	641a      	str	r2, [r3, #64]	; 0x40
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_ADC_MspInit+0x84>)
 8002616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	035b      	lsls	r3, r3, #13
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_ADC_MspInit+0x84>)
 8002624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_ADC_MspInit+0x84>)
 8002628:	2102      	movs	r1, #2
 800262a:	430a      	orrs	r2, r1
 800262c:	635a      	str	r2, [r3, #52]	; 0x34
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_ADC_MspInit+0x84>)
 8002630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002632:	2202      	movs	r2, #2
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = USB_C_in_1_Pin|USB_C_in_2_Pin;
 800263a:	2114      	movs	r1, #20
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2203      	movs	r2, #3
 8002640:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	2203      	movs	r2, #3
 8002646:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264e:	187b      	adds	r3, r7, r1
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <HAL_ADC_MspInit+0x88>)
 8002652:	0019      	movs	r1, r3
 8002654:	0010      	movs	r0, r2
 8002656:	f001 fe71 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b00a      	add	sp, #40	; 0x28
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	40012400 	.word	0x40012400
 8002668:	40021000 	.word	0x40021000
 800266c:	50000400 	.word	0x50000400

08002670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	2314      	movs	r3, #20
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	0018      	movs	r0, r3
 800267e:	2314      	movs	r3, #20
 8002680:	001a      	movs	r2, r3
 8002682:	2100      	movs	r1, #0
 8002684:	f005 f9ee 	bl	8007a64 <memset>
  if(hi2c->Instance==I2C2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_I2C_MspInit+0x90>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d131      	bne.n	80026f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_I2C_MspInit+0x94>)
 8002694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_I2C_MspInit+0x94>)
 8002698:	2101      	movs	r1, #1
 800269a:	430a      	orrs	r2, r1
 800269c:	635a      	str	r2, [r3, #52]	; 0x34
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_I2C_MspInit+0x94>)
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	2201      	movs	r2, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026aa:	2114      	movs	r1, #20
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	22c0      	movs	r2, #192	; 0xc0
 80026b0:	0152      	lsls	r2, r2, #5
 80026b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	2212      	movs	r2, #18
 80026b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ba:	187b      	adds	r3, r7, r1
 80026bc:	2201      	movs	r2, #1
 80026be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	187b      	adds	r3, r7, r1
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80026c6:	187b      	adds	r3, r7, r1
 80026c8:	2206      	movs	r2, #6
 80026ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	187a      	adds	r2, r7, r1
 80026ce:	23a0      	movs	r3, #160	; 0xa0
 80026d0:	05db      	lsls	r3, r3, #23
 80026d2:	0011      	movs	r1, r2
 80026d4:	0018      	movs	r0, r3
 80026d6:	f001 fe31 	bl	800433c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_I2C_MspInit+0x94>)
 80026dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_I2C_MspInit+0x94>)
 80026e0:	2180      	movs	r1, #128	; 0x80
 80026e2:	03c9      	lsls	r1, r1, #15
 80026e4:	430a      	orrs	r2, r1
 80026e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_I2C_MspInit+0x94>)
 80026ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	03db      	lsls	r3, r3, #15
 80026f0:	4013      	ands	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b00a      	add	sp, #40	; 0x28
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	40005800 	.word	0x40005800
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_RTC_MspInit+0x44>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d114      	bne.n	8002744 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_RTC_MspInit+0x48>)
 800271c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_RTC_MspInit+0x48>)
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	0209      	lsls	r1, r1, #8
 8002724:	430a      	orrs	r2, r1
 8002726:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RTC_MspInit+0x48>)
 800272a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_RTC_MspInit+0x48>)
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	00c9      	lsls	r1, r1, #3
 8002732:	430a      	orrs	r2, r1
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RTC_MspInit+0x48>)
 8002738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4013      	ands	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b004      	add	sp, #16
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40002800 	.word	0x40002800
 8002750:	40021000 	.word	0x40021000

08002754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	; 0x30
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	231c      	movs	r3, #28
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	0018      	movs	r0, r3
 8002762:	2314      	movs	r3, #20
 8002764:	001a      	movs	r2, r3
 8002766:	2100      	movs	r1, #0
 8002768:	f005 f97c 	bl	8007a64 <memset>
  if(hspi->Instance==SPI1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a4b      	ldr	r2, [pc, #300]	; (80028a0 <HAL_SPI_MspInit+0x14c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d131      	bne.n	80027da <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002776:	4b4b      	ldr	r3, [pc, #300]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 8002778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0149      	lsls	r1, r1, #5
 8002780:	430a      	orrs	r2, r1
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
 8002784:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 8002786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	015b      	lsls	r3, r3, #5
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 8002794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002796:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 8002798:	2101      	movs	r1, #1
 800279a:	430a      	orrs	r2, r1
 800279c:	635a      	str	r2, [r3, #52]	; 0x34
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a2:	2201      	movs	r2, #1
 80027a4:	4013      	ands	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI_SFLASH_CLK_Pin|SPI_SFLASH_MISO_Pin|SPI_SFLASH_MOSI_Pin;
 80027aa:	211c      	movs	r1, #28
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	22e0      	movs	r2, #224	; 0xe0
 80027b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2202      	movs	r2, #2
 80027b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	2200      	movs	r2, #0
 80027c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	187a      	adds	r2, r7, r1
 80027cc:	23a0      	movs	r3, #160	; 0xa0
 80027ce:	05db      	lsls	r3, r3, #23
 80027d0:	0011      	movs	r1, r2
 80027d2:	0018      	movs	r0, r3
 80027d4:	f001 fdb2 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027d8:	e05e      	b.n	8002898 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a32      	ldr	r2, [pc, #200]	; (80028a8 <HAL_SPI_MspInit+0x154>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d159      	bne.n	8002898 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027e4:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 80027e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e8:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	01c9      	lsls	r1, r1, #7
 80027ee:	430a      	orrs	r2, r1
 80027f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80027f2:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 80027f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	01db      	lsls	r3, r3, #7
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002800:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 8002802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 8002806:	2101      	movs	r1, #1
 8002808:	430a      	orrs	r2, r1
 800280a:	635a      	str	r2, [r3, #52]	; 0x34
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <HAL_SPI_MspInit+0x150>)
 800280e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002810:	2201      	movs	r2, #1
 8002812:	4013      	ands	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_CLK___Not_Used_Pin|SPI2_OUT_LED_Display_Pin;
 8002818:	211c      	movs	r1, #28
 800281a:	187b      	adds	r3, r7, r1
 800281c:	4a23      	ldr	r2, [pc, #140]	; (80028ac <HAL_SPI_MspInit+0x158>)
 800281e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	187b      	adds	r3, r7, r1
 8002822:	2202      	movs	r2, #2
 8002824:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	187b      	adds	r3, r7, r1
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	187b      	adds	r3, r7, r1
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002832:	187b      	adds	r3, r7, r1
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	187a      	adds	r2, r7, r1
 800283a:	23a0      	movs	r3, #160	; 0xa0
 800283c:	05db      	lsls	r3, r3, #23
 800283e:	0011      	movs	r1, r2
 8002840:	0018      	movs	r0, r3
 8002842:	f001 fd7b 	bl	800433c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 8002848:	4a1a      	ldr	r2, [pc, #104]	; (80028b4 <HAL_SPI_MspInit+0x160>)
 800284a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 800284e:	2213      	movs	r2, #19
 8002850:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 8002854:	2210      	movs	r2, #16
 8002856:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 8002866:	2200      	movs	r2, #0
 8002868:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 8002878:	2200      	movs	r2, #0
 800287a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 800287e:	0018      	movs	r0, r3
 8002880:	f001 fb08 	bl	8003e94 <HAL_DMA_Init>
 8002884:	1e03      	subs	r3, r0, #0
 8002886:	d001      	beq.n	800288c <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8002888:	f7ff fe82 	bl	8002590 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_SPI_MspInit+0x15c>)
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b00c      	add	sp, #48	; 0x30
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40013000 	.word	0x40013000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40003800 	.word	0x40003800
 80028ac:	00000401 	.word	0x00000401
 80028b0:	2000074c 	.word	0x2000074c
 80028b4:	40020008 	.word	0x40020008

080028b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	231c      	movs	r3, #28
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	0018      	movs	r0, r3
 80028c6:	2314      	movs	r3, #20
 80028c8:	001a      	movs	r2, r3
 80028ca:	2100      	movs	r1, #0
 80028cc:	f005 f8ca 	bl	8007a64 <memset>
  if(huart->Instance==USART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a36      	ldr	r2, [pc, #216]	; (80029b0 <HAL_UART_MspInit+0xf8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d130      	bne.n	800293c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028da:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 80028dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028de:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	01c9      	lsls	r1, r1, #7
 80028e4:	430a      	orrs	r2, r1
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
 80028e8:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 80028ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	01db      	lsls	r3, r3, #7
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 80028f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 80028fc:	2102      	movs	r1, #2
 80028fe:	430a      	orrs	r2, r1
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
 8002902:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	2202      	movs	r2, #2
 8002908:	4013      	ands	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_to_Comm_Processor_Pin|RX_from_Comm_Processor_Pin;
 800290e:	211c      	movs	r1, #28
 8002910:	187b      	adds	r3, r7, r1
 8002912:	22c0      	movs	r2, #192	; 0xc0
 8002914:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2202      	movs	r2, #2
 800291a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	187b      	adds	r3, r7, r1
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	187b      	adds	r3, r7, r1
 8002930:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <HAL_UART_MspInit+0x100>)
 8002932:	0019      	movs	r1, r3
 8002934:	0010      	movs	r0, r2
 8002936:	f001 fd01 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800293a:	e035      	b.n	80029a8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1e      	ldr	r2, [pc, #120]	; (80029bc <HAL_UART_MspInit+0x104>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d130      	bne.n	80029a8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 8002948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0289      	lsls	r1, r1, #10
 8002950:	430a      	orrs	r2, r1
 8002952:	63da      	str	r2, [r3, #60]	; 0x3c
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 8002956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	029b      	lsls	r3, r3, #10
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 8002964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 8002968:	2101      	movs	r1, #1
 800296a:	430a      	orrs	r2, r1
 800296c:	635a      	str	r2, [r3, #52]	; 0x34
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	2201      	movs	r2, #1
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
 800297a:	211c      	movs	r1, #28
 800297c:	187b      	adds	r3, r7, r1
 800297e:	220c      	movs	r2, #12
 8002980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	187b      	adds	r3, r7, r1
 8002984:	2202      	movs	r2, #2
 8002986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	187b      	adds	r3, r7, r1
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002994:	187b      	adds	r3, r7, r1
 8002996:	2201      	movs	r2, #1
 8002998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	187a      	adds	r2, r7, r1
 800299c:	23a0      	movs	r3, #160	; 0xa0
 800299e:	05db      	lsls	r3, r3, #23
 80029a0:	0011      	movs	r1, r2
 80029a2:	0018      	movs	r0, r3
 80029a4:	f001 fcca 	bl	800433c <HAL_GPIO_Init>
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b00c      	add	sp, #48	; 0x30
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40013800 	.word	0x40013800
 80029b4:	40021000 	.word	0x40021000
 80029b8:	50000400 	.word	0x50000400
 80029bc:	40004400 	.word	0x40004400

080029c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <HardFault_Handler+0x4>

080029d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e8:	f000 fca8 	bl	800333c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <DMA1_Channel1_IRQHandler+0x18>)
 80029fa:	0018      	movs	r0, r3
 80029fc:	f001 fb5c 	bl	80040b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  LED_display_update_completed = true;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <DMA1_Channel1_IRQHandler+0x1c>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	2000074c 	.word	0x2000074c
 8002a10:	200007a8 	.word	0x200007a8

08002a14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	e00a      	b.n	8002a3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a26:	e000      	b.n	8002a2a <_read+0x16>
 8002a28:	bf00      	nop
 8002a2a:	0001      	movs	r1, r0
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	60ba      	str	r2, [r7, #8]
 8002a32:	b2ca      	uxtb	r2, r1
 8002a34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	dbf0      	blt.n	8002a26 <_read+0x12>
	}

return len;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b006      	add	sp, #24
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e009      	b.n	8002a74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	60ba      	str	r2, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff fd7d 	bl	8002568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	dbf1      	blt.n	8002a60 <_write+0x12>
	}
	return len;
 8002a7c:	687b      	ldr	r3, [r7, #4]
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b006      	add	sp, #24
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_close>:

int _close(int file)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	425b      	negs	r3, r3
}
 8002a92:	0018      	movs	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b002      	add	sp, #8
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	0192      	lsls	r2, r2, #6
 8002aaa:	605a      	str	r2, [r3, #4]
	return 0;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_isatty>:

int _isatty(int file)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
	return 1;
 8002abe:	2301      	movs	r3, #1
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b004      	add	sp, #16
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <_sbrk+0x50>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <_sbrk+0x16>
		heap_end = &end;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <_sbrk+0x50>)
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <_sbrk+0x54>)
 8002af4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <_sbrk+0x50>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <_sbrk+0x50>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	18d3      	adds	r3, r2, r3
 8002b04:	466a      	mov	r2, sp
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d907      	bls.n	8002b1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002b0a:	f004 ff81 	bl	8007a10 <__errno>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	220c      	movs	r2, #12
 8002b12:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002b14:	2301      	movs	r3, #1
 8002b16:	425b      	negs	r3, r3
 8002b18:	e006      	b.n	8002b28 <_sbrk+0x48>
	}

	heap_end += incr;
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <_sbrk+0x50>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	18d2      	adds	r2, r2, r3
 8002b22:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <_sbrk+0x50>)
 8002b24:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b004      	add	sp, #16
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	2000008c 	.word	0x2000008c
 8002b34:	20000848 	.word	0x20000848

08002b38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <SystemInit+0x14>)
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	0512      	lsls	r2, r2, #20
 8002b42:	609a      	str	r2, [r3, #8]
#endif
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <led_init>:
  * @brief	Initialize the LED Display
  * @param  None
  * @retval : None
  */
void led_init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	/*
	 * Set flag to indicate that the SPI is available to load new data
	 */
	LED_display_update_completed = true;
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <led_init+0x40>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
	hs.led_bar_state = LED_BAR_INIT;
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <led_init+0x44>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	721a      	strb	r2, [r3, #8]
    hs.ev_display_scan_mode = true;
 8002b60:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <led_init+0x44>)
 8002b62:	23bc      	movs	r3, #188	; 0xbc
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	5cd1      	ldrb	r1, [r2, r3]
 8002b68:	2002      	movs	r0, #2
 8002b6a:	4301      	orrs	r1, r0
 8002b6c:	54d1      	strb	r1, [r2, r3]
    hs.led_bar_display_status = true;
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <led_init+0x44>)
 8002b70:	23bc      	movs	r3, #188	; 0xbc
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	5cd1      	ldrb	r1, [r2, r3]
 8002b76:	2001      	movs	r0, #1
 8002b78:	4301      	orrs	r1, r0
 8002b7a:	54d1      	strb	r1, [r2, r3]
    led_bar_setup( blue_scan[ 0 ], blue_scan[ 1 ], blue_scan[ 2 ], 1000 );
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	22ff      	movs	r2, #255	; 0xff
 8002b82:	23fa      	movs	r3, #250	; 0xfa
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	f000 f859 	bl	8002c3c <led_bar_setup>
}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	200007a8 	.word	0x200007a8
 8002b94:	20000378 	.word	0x20000378

08002b98 <process_led_display>:
  * @brief	Process the LED Display
  * @param  None
  * @retval : None
  */
void process_led_display( uint32_t current_time )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	led_bar_test();
 8002ba0:	f000 faf4 	bl	800318c <led_bar_test>
//	led_bar_scan_mode( current_time );
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}

08002bac <set_led_bar_raw>:
  * @brief set_led_bar_raw
  * @param  LED, Color Values R G B
  * @retval : None
  */
void set_led_bar_raw( uint8_t led, uint16_t raw_red_level, uint16_t raw_green_level, uint16_t raw_blue_level )
{
 8002bac:	b5b0      	push	{r4, r5, r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	0005      	movs	r5, r0
 8002bb4:	000c      	movs	r4, r1
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	1dfb      	adds	r3, r7, #7
 8002bbc:	1c2a      	adds	r2, r5, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	1c22      	adds	r2, r4, #0
 8002bc4:	801a      	strh	r2, [r3, #0]
 8002bc6:	1cbb      	adds	r3, r7, #2
 8002bc8:	1c02      	adds	r2, r0, #0
 8002bca:	801a      	strh	r2, [r3, #0]
 8002bcc:	003b      	movs	r3, r7
 8002bce:	1c0a      	adds	r2, r1, #0
 8002bd0:	801a      	strh	r2, [r3, #0]
     *
     * Adjust based on https://www.ledsmagazine.com/smart-lighting-iot/color-tuning/article/16695054/understand-rgb-led-mixing-ratios-to-realize-optimal-color-in-signs-and-displays-magazine
     *
     * Color values and scale
     */
    if( led < LED_BAR_NO_LEDS ) {
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b0b      	cmp	r3, #11
 8002bd8:	d821      	bhi.n	8002c1e <set_led_bar_raw+0x72>
        led_display[ led ][ EV_LED_RED ] =  raw_red_level;		// (uint8_t) (float) ( raw_red_level * ( 4.0 * ( 255 / 1020 ) ) );
 8002bda:	1dfb      	adds	r3, r7, #7
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	4912      	ldr	r1, [pc, #72]	; (8002c28 <set_led_bar_raw+0x7c>)
 8002be0:	0013      	movs	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	189b      	adds	r3, r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	18cb      	adds	r3, r1, r3
 8002bea:	3302      	adds	r3, #2
 8002bec:	1d3a      	adds	r2, r7, #4
 8002bee:	8812      	ldrh	r2, [r2, #0]
 8002bf0:	801a      	strh	r2, [r3, #0]
        led_display[ led ][ EV_LED_GREEN ] =  raw_green_level;	// (uint8_t) (float) ( raw_green_level * ( 3.0 * ( 255 / 1020 ) ) );
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	490c      	ldr	r1, [pc, #48]	; (8002c28 <set_led_bar_raw+0x7c>)
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	189b      	adds	r3, r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	1cba      	adds	r2, r7, #2
 8002c02:	8812      	ldrh	r2, [r2, #0]
 8002c04:	525a      	strh	r2, [r3, r1]
        led_display[ led ][ EV_LED_BLUE ] =  raw_blue_level;	// (uint8_t) (float) ( raw_blue_level * ( 1.0 * ( 255 / 1020 ) ) );
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	4907      	ldr	r1, [pc, #28]	; (8002c28 <set_led_bar_raw+0x7c>)
 8002c0c:	0013      	movs	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	189b      	adds	r3, r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	18cb      	adds	r3, r1, r3
 8002c16:	3304      	adds	r3, #4
 8002c18:	003a      	movs	r2, r7
 8002c1a:	8812      	ldrh	r2, [r2, #0]
 8002c1c:	801a      	strh	r2, [r3, #0]
    }
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b002      	add	sp, #8
 8002c24:	bdb0      	pop	{r4, r5, r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	200007ac 	.word	0x200007ac

08002c2c <init_led_bar>:
  * @brief init_led_bar
  * @param  None
  * @retval : None
  */
void init_led_bar(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
    led_bar_off();
 8002c30:	f000 f9d4 	bl	8002fdc <led_bar_off>
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <led_bar_setup>:
#define EVD_MAX     1.00
#define EVD_HIGH    0.70
#define EVD_MED     0.40
#define EVD_LOW     0.10
void led_bar_setup( uint16_t red, uint16_t green, uint16_t blue, uint16_t transision_period )
{
 8002c3c:	b5b0      	push	{r4, r5, r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	0005      	movs	r5, r0
 8002c44:	000c      	movs	r4, r1
 8002c46:	0010      	movs	r0, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	1dbb      	adds	r3, r7, #6
 8002c4c:	1c2a      	adds	r2, r5, #0
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	1c22      	adds	r2, r4, #0
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	1cbb      	adds	r3, r7, #2
 8002c58:	1c02      	adds	r2, r0, #0
 8002c5a:	801a      	strh	r2, [r3, #0]
 8002c5c:	003b      	movs	r3, r7
 8002c5e:	1c0a      	adds	r2, r1, #0
 8002c60:	801a      	strh	r2, [r3, #0]

    uint16_t i;
    /*
     * Set all to low first
     */
    for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 8002c62:	230e      	movs	r3, #14
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2200      	movs	r2, #0
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	e068      	b.n	8002d3e <led_bar_setup+0x102>
    	display_state_levels[ i ][ EV_LED_RED ] = (uint16_t) ( (float) red * EVD_LOW );
 8002c6c:	1dbb      	adds	r3, r7, #6
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7fe f8eb 	bl	8000e4c <__aeabi_ui2f>
 8002c76:	1c03      	adds	r3, r0, #0
 8002c78:	1c18      	adds	r0, r3, #0
 8002c7a:	f7fe ff17 	bl	8001aac <__aeabi_f2d>
 8002c7e:	4ad0      	ldr	r2, [pc, #832]	; (8002fc0 <led_bar_setup+0x384>)
 8002c80:	4bd0      	ldr	r3, [pc, #832]	; (8002fc4 <led_bar_setup+0x388>)
 8002c82:	f7fe f923 	bl	8000ecc <__aeabi_dmul>
 8002c86:	0003      	movs	r3, r0
 8002c88:	000c      	movs	r4, r1
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	0022      	movs	r2, r4
 8002c8e:	250e      	movs	r5, #14
 8002c90:	197b      	adds	r3, r7, r5
 8002c92:	881c      	ldrh	r4, [r3, #0]
 8002c94:	0008      	movs	r0, r1
 8002c96:	0011      	movs	r1, r2
 8002c98:	f7fd fc1c 	bl	80004d4 <__aeabi_d2uiz>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	b299      	uxth	r1, r3
 8002ca0:	4ac9      	ldr	r2, [pc, #804]	; (8002fc8 <led_bar_setup+0x38c>)
 8002ca2:	0023      	movs	r3, r4
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	191b      	adds	r3, r3, r4
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	18d3      	adds	r3, r2, r3
 8002cac:	3302      	adds	r3, #2
 8002cae:	1c0a      	adds	r2, r1, #0
 8002cb0:	801a      	strh	r2, [r3, #0]
    	display_state_levels[ i ][ EV_LED_GREEN ] = (uint16_t) ( (float) green * EVD_LOW );
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f7fe f8c8 	bl	8000e4c <__aeabi_ui2f>
 8002cbc:	1c03      	adds	r3, r0, #0
 8002cbe:	1c18      	adds	r0, r3, #0
 8002cc0:	f7fe fef4 	bl	8001aac <__aeabi_f2d>
 8002cc4:	4abe      	ldr	r2, [pc, #760]	; (8002fc0 <led_bar_setup+0x384>)
 8002cc6:	4bbf      	ldr	r3, [pc, #764]	; (8002fc4 <led_bar_setup+0x388>)
 8002cc8:	f7fe f900 	bl	8000ecc <__aeabi_dmul>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	000c      	movs	r4, r1
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	0022      	movs	r2, r4
 8002cd4:	197b      	adds	r3, r7, r5
 8002cd6:	881c      	ldrh	r4, [r3, #0]
 8002cd8:	0008      	movs	r0, r1
 8002cda:	0011      	movs	r1, r2
 8002cdc:	f7fd fbfa 	bl	80004d4 <__aeabi_d2uiz>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	b299      	uxth	r1, r3
 8002ce4:	4ab8      	ldr	r2, [pc, #736]	; (8002fc8 <led_bar_setup+0x38c>)
 8002ce6:	0023      	movs	r3, r4
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	191b      	adds	r3, r3, r4
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	5299      	strh	r1, [r3, r2]
    	display_state_levels[ i ][ EV_LED_BLUE ] = (uint16_t) ( (float) blue * EVD_LOW );
 8002cf0:	1cbb      	adds	r3, r7, #2
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7fe f8a9 	bl	8000e4c <__aeabi_ui2f>
 8002cfa:	1c03      	adds	r3, r0, #0
 8002cfc:	1c18      	adds	r0, r3, #0
 8002cfe:	f7fe fed5 	bl	8001aac <__aeabi_f2d>
 8002d02:	4aaf      	ldr	r2, [pc, #700]	; (8002fc0 <led_bar_setup+0x384>)
 8002d04:	4baf      	ldr	r3, [pc, #700]	; (8002fc4 <led_bar_setup+0x388>)
 8002d06:	f7fe f8e1 	bl	8000ecc <__aeabi_dmul>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	000c      	movs	r4, r1
 8002d0e:	0019      	movs	r1, r3
 8002d10:	0022      	movs	r2, r4
 8002d12:	197b      	adds	r3, r7, r5
 8002d14:	881c      	ldrh	r4, [r3, #0]
 8002d16:	0008      	movs	r0, r1
 8002d18:	0011      	movs	r1, r2
 8002d1a:	f7fd fbdb 	bl	80004d4 <__aeabi_d2uiz>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	b299      	uxth	r1, r3
 8002d22:	4aa9      	ldr	r2, [pc, #676]	; (8002fc8 <led_bar_setup+0x38c>)
 8002d24:	0023      	movs	r3, r4
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	191b      	adds	r3, r3, r4
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	18d3      	adds	r3, r2, r3
 8002d2e:	3304      	adds	r3, #4
 8002d30:	1c0a      	adds	r2, r1, #0
 8002d32:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < LED_BAR_NO_LEDS; i++ ) {
 8002d34:	197b      	adds	r3, r7, r5
 8002d36:	881a      	ldrh	r2, [r3, #0]
 8002d38:	197b      	adds	r3, r7, r5
 8002d3a:	3201      	adds	r2, #1
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	230e      	movs	r3, #14
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	2b0b      	cmp	r3, #11
 8002d46:	d991      	bls.n	8002c6c <led_bar_setup+0x30>
     */
    /*
     *  0  ...  3   4     5    6    7     8   9       11
     * LOW ... LOW MED, HIGH, MAX, HIGH, MED LOW .... LOW
     */
    display_state_levels[ 4 ][ EV_LED_RED ] = (uint16_t) ( (float) red * EVD_MED );
 8002d48:	1dbb      	adds	r3, r7, #6
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7fe f87d 	bl	8000e4c <__aeabi_ui2f>
 8002d52:	1c03      	adds	r3, r0, #0
 8002d54:	1c18      	adds	r0, r3, #0
 8002d56:	f7fe fea9 	bl	8001aac <__aeabi_f2d>
 8002d5a:	4a99      	ldr	r2, [pc, #612]	; (8002fc0 <led_bar_setup+0x384>)
 8002d5c:	4b9b      	ldr	r3, [pc, #620]	; (8002fcc <led_bar_setup+0x390>)
 8002d5e:	f7fe f8b5 	bl	8000ecc <__aeabi_dmul>
 8002d62:	0003      	movs	r3, r0
 8002d64:	000c      	movs	r4, r1
 8002d66:	0018      	movs	r0, r3
 8002d68:	0021      	movs	r1, r4
 8002d6a:	f7fd fbb3 	bl	80004d4 <__aeabi_d2uiz>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	4b95      	ldr	r3, [pc, #596]	; (8002fc8 <led_bar_setup+0x38c>)
 8002d74:	835a      	strh	r2, [r3, #26]
    display_state_levels[ 4 ][ EV_LED_GREEN ] = (uint16_t) ( (float) green * EVD_MED );
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7fe f866 	bl	8000e4c <__aeabi_ui2f>
 8002d80:	1c03      	adds	r3, r0, #0
 8002d82:	1c18      	adds	r0, r3, #0
 8002d84:	f7fe fe92 	bl	8001aac <__aeabi_f2d>
 8002d88:	4a8d      	ldr	r2, [pc, #564]	; (8002fc0 <led_bar_setup+0x384>)
 8002d8a:	4b90      	ldr	r3, [pc, #576]	; (8002fcc <led_bar_setup+0x390>)
 8002d8c:	f7fe f89e 	bl	8000ecc <__aeabi_dmul>
 8002d90:	0003      	movs	r3, r0
 8002d92:	000c      	movs	r4, r1
 8002d94:	0018      	movs	r0, r3
 8002d96:	0021      	movs	r1, r4
 8002d98:	f7fd fb9c 	bl	80004d4 <__aeabi_d2uiz>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	4b89      	ldr	r3, [pc, #548]	; (8002fc8 <led_bar_setup+0x38c>)
 8002da2:	831a      	strh	r2, [r3, #24]
    display_state_levels[ 4 ][ EV_LED_BLUE ] = (uint16_t) ( (float) blue * EVD_MED );
 8002da4:	1cbb      	adds	r3, r7, #2
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7fe f84f 	bl	8000e4c <__aeabi_ui2f>
 8002dae:	1c03      	adds	r3, r0, #0
 8002db0:	1c18      	adds	r0, r3, #0
 8002db2:	f7fe fe7b 	bl	8001aac <__aeabi_f2d>
 8002db6:	4a82      	ldr	r2, [pc, #520]	; (8002fc0 <led_bar_setup+0x384>)
 8002db8:	4b84      	ldr	r3, [pc, #528]	; (8002fcc <led_bar_setup+0x390>)
 8002dba:	f7fe f887 	bl	8000ecc <__aeabi_dmul>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	000c      	movs	r4, r1
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	0021      	movs	r1, r4
 8002dc6:	f7fd fb85 	bl	80004d4 <__aeabi_d2uiz>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	4b7e      	ldr	r3, [pc, #504]	; (8002fc8 <led_bar_setup+0x38c>)
 8002dd0:	839a      	strh	r2, [r3, #28]

    display_state_levels[ 5 ][ EV_LED_RED ] = (uint16_t) ( (float) red * EVD_HIGH );
 8002dd2:	1dbb      	adds	r3, r7, #6
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7fe f838 	bl	8000e4c <__aeabi_ui2f>
 8002ddc:	1c03      	adds	r3, r0, #0
 8002dde:	1c18      	adds	r0, r3, #0
 8002de0:	f7fe fe64 	bl	8001aac <__aeabi_f2d>
 8002de4:	4a7a      	ldr	r2, [pc, #488]	; (8002fd0 <led_bar_setup+0x394>)
 8002de6:	4b7b      	ldr	r3, [pc, #492]	; (8002fd4 <led_bar_setup+0x398>)
 8002de8:	f7fe f870 	bl	8000ecc <__aeabi_dmul>
 8002dec:	0003      	movs	r3, r0
 8002dee:	000c      	movs	r4, r1
 8002df0:	0018      	movs	r0, r3
 8002df2:	0021      	movs	r1, r4
 8002df4:	f7fd fb6e 	bl	80004d4 <__aeabi_d2uiz>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	4b72      	ldr	r3, [pc, #456]	; (8002fc8 <led_bar_setup+0x38c>)
 8002dfe:	841a      	strh	r2, [r3, #32]
    display_state_levels[ 5 ][ EV_LED_GREEN ] = (uint16_t) ( (float) green * EVD_HIGH );
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7fe f821 	bl	8000e4c <__aeabi_ui2f>
 8002e0a:	1c03      	adds	r3, r0, #0
 8002e0c:	1c18      	adds	r0, r3, #0
 8002e0e:	f7fe fe4d 	bl	8001aac <__aeabi_f2d>
 8002e12:	4a6f      	ldr	r2, [pc, #444]	; (8002fd0 <led_bar_setup+0x394>)
 8002e14:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <led_bar_setup+0x398>)
 8002e16:	f7fe f859 	bl	8000ecc <__aeabi_dmul>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	000c      	movs	r4, r1
 8002e1e:	0018      	movs	r0, r3
 8002e20:	0021      	movs	r1, r4
 8002e22:	f7fd fb57 	bl	80004d4 <__aeabi_d2uiz>
 8002e26:	0003      	movs	r3, r0
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	4b67      	ldr	r3, [pc, #412]	; (8002fc8 <led_bar_setup+0x38c>)
 8002e2c:	83da      	strh	r2, [r3, #30]
    display_state_levels[ 5 ][ EV_LED_BLUE ] = (uint16_t) ( (float) blue * EVD_HIGH );
 8002e2e:	1cbb      	adds	r3, r7, #2
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7fe f80a 	bl	8000e4c <__aeabi_ui2f>
 8002e38:	1c03      	adds	r3, r0, #0
 8002e3a:	1c18      	adds	r0, r3, #0
 8002e3c:	f7fe fe36 	bl	8001aac <__aeabi_f2d>
 8002e40:	4a63      	ldr	r2, [pc, #396]	; (8002fd0 <led_bar_setup+0x394>)
 8002e42:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <led_bar_setup+0x398>)
 8002e44:	f7fe f842 	bl	8000ecc <__aeabi_dmul>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	000c      	movs	r4, r1
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	0021      	movs	r1, r4
 8002e50:	f7fd fb40 	bl	80004d4 <__aeabi_d2uiz>
 8002e54:	0003      	movs	r3, r0
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <led_bar_setup+0x38c>)
 8002e5a:	845a      	strh	r2, [r3, #34]	; 0x22

    display_state_levels[ 6 ][ EV_LED_RED ] = red;
 8002e5c:	4b5a      	ldr	r3, [pc, #360]	; (8002fc8 <led_bar_setup+0x38c>)
 8002e5e:	1dba      	adds	r2, r7, #6
 8002e60:	8812      	ldrh	r2, [r2, #0]
 8002e62:	84da      	strh	r2, [r3, #38]	; 0x26
    display_state_levels[ 6 ][ EV_LED_GREEN ] = green;
 8002e64:	4b58      	ldr	r3, [pc, #352]	; (8002fc8 <led_bar_setup+0x38c>)
 8002e66:	1d3a      	adds	r2, r7, #4
 8002e68:	8812      	ldrh	r2, [r2, #0]
 8002e6a:	849a      	strh	r2, [r3, #36]	; 0x24
    display_state_levels[ 6 ][ EV_LED_BLUE] = blue;
 8002e6c:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <led_bar_setup+0x38c>)
 8002e6e:	1cba      	adds	r2, r7, #2
 8002e70:	8812      	ldrh	r2, [r2, #0]
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28

    display_state_levels[ 7 ][ EV_LED_RED ] = (uint16_t) ( (float) red * EVD_HIGH );
 8002e74:	1dbb      	adds	r3, r7, #6
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7fd ffe7 	bl	8000e4c <__aeabi_ui2f>
 8002e7e:	1c03      	adds	r3, r0, #0
 8002e80:	1c18      	adds	r0, r3, #0
 8002e82:	f7fe fe13 	bl	8001aac <__aeabi_f2d>
 8002e86:	4a52      	ldr	r2, [pc, #328]	; (8002fd0 <led_bar_setup+0x394>)
 8002e88:	4b52      	ldr	r3, [pc, #328]	; (8002fd4 <led_bar_setup+0x398>)
 8002e8a:	f7fe f81f 	bl	8000ecc <__aeabi_dmul>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	000c      	movs	r4, r1
 8002e92:	0018      	movs	r0, r3
 8002e94:	0021      	movs	r1, r4
 8002e96:	f7fd fb1d 	bl	80004d4 <__aeabi_d2uiz>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <led_bar_setup+0x38c>)
 8002ea0:	859a      	strh	r2, [r3, #44]	; 0x2c
    display_state_levels[ 7 ][ EV_LED_GREEN ] = (uint16_t) ( (float) green * EVD_HIGH );
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7fd ffd0 	bl	8000e4c <__aeabi_ui2f>
 8002eac:	1c03      	adds	r3, r0, #0
 8002eae:	1c18      	adds	r0, r3, #0
 8002eb0:	f7fe fdfc 	bl	8001aac <__aeabi_f2d>
 8002eb4:	4a46      	ldr	r2, [pc, #280]	; (8002fd0 <led_bar_setup+0x394>)
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <led_bar_setup+0x398>)
 8002eb8:	f7fe f808 	bl	8000ecc <__aeabi_dmul>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	000c      	movs	r4, r1
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	0021      	movs	r1, r4
 8002ec4:	f7fd fb06 	bl	80004d4 <__aeabi_d2uiz>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <led_bar_setup+0x38c>)
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    display_state_levels[ 7 ][ EV_LED_BLUE ] = (uint16_t) ( (float) blue * EVD_HIGH );
 8002ed0:	1cbb      	adds	r3, r7, #2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7fd ffb9 	bl	8000e4c <__aeabi_ui2f>
 8002eda:	1c03      	adds	r3, r0, #0
 8002edc:	1c18      	adds	r0, r3, #0
 8002ede:	f7fe fde5 	bl	8001aac <__aeabi_f2d>
 8002ee2:	4a3b      	ldr	r2, [pc, #236]	; (8002fd0 <led_bar_setup+0x394>)
 8002ee4:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <led_bar_setup+0x398>)
 8002ee6:	f7fd fff1 	bl	8000ecc <__aeabi_dmul>
 8002eea:	0003      	movs	r3, r0
 8002eec:	000c      	movs	r4, r1
 8002eee:	0018      	movs	r0, r3
 8002ef0:	0021      	movs	r1, r4
 8002ef2:	f7fd faef 	bl	80004d4 <__aeabi_d2uiz>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <led_bar_setup+0x38c>)
 8002efc:	85da      	strh	r2, [r3, #46]	; 0x2e

    display_state_levels[ 8 ][ EV_LED_RED ] = (uint16_t) ( (float) red * EVD_MED );
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7fd ffa2 	bl	8000e4c <__aeabi_ui2f>
 8002f08:	1c03      	adds	r3, r0, #0
 8002f0a:	1c18      	adds	r0, r3, #0
 8002f0c:	f7fe fdce 	bl	8001aac <__aeabi_f2d>
 8002f10:	4a2b      	ldr	r2, [pc, #172]	; (8002fc0 <led_bar_setup+0x384>)
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <led_bar_setup+0x390>)
 8002f14:	f7fd ffda 	bl	8000ecc <__aeabi_dmul>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	000c      	movs	r4, r1
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	0021      	movs	r1, r4
 8002f20:	f7fd fad8 	bl	80004d4 <__aeabi_d2uiz>
 8002f24:	0003      	movs	r3, r0
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <led_bar_setup+0x38c>)
 8002f2a:	865a      	strh	r2, [r3, #50]	; 0x32
    display_state_levels[ 8 ][ EV_LED_GREEN ] = (uint16_t) ( (float) green * EVD_MED );
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fd ff8b 	bl	8000e4c <__aeabi_ui2f>
 8002f36:	1c03      	adds	r3, r0, #0
 8002f38:	1c18      	adds	r0, r3, #0
 8002f3a:	f7fe fdb7 	bl	8001aac <__aeabi_f2d>
 8002f3e:	4a20      	ldr	r2, [pc, #128]	; (8002fc0 <led_bar_setup+0x384>)
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <led_bar_setup+0x390>)
 8002f42:	f7fd ffc3 	bl	8000ecc <__aeabi_dmul>
 8002f46:	0003      	movs	r3, r0
 8002f48:	000c      	movs	r4, r1
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	0021      	movs	r1, r4
 8002f4e:	f7fd fac1 	bl	80004d4 <__aeabi_d2uiz>
 8002f52:	0003      	movs	r3, r0
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <led_bar_setup+0x38c>)
 8002f58:	861a      	strh	r2, [r3, #48]	; 0x30
    display_state_levels[ 8 ][ EV_LED_BLUE ] = (uint16_t) ( (float) blue * EVD_MED );
 8002f5a:	1cbb      	adds	r3, r7, #2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7fd ff74 	bl	8000e4c <__aeabi_ui2f>
 8002f64:	1c03      	adds	r3, r0, #0
 8002f66:	1c18      	adds	r0, r3, #0
 8002f68:	f7fe fda0 	bl	8001aac <__aeabi_f2d>
 8002f6c:	4a14      	ldr	r2, [pc, #80]	; (8002fc0 <led_bar_setup+0x384>)
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <led_bar_setup+0x390>)
 8002f70:	f7fd ffac 	bl	8000ecc <__aeabi_dmul>
 8002f74:	0003      	movs	r3, r0
 8002f76:	000c      	movs	r4, r1
 8002f78:	0018      	movs	r0, r3
 8002f7a:	0021      	movs	r1, r4
 8002f7c:	f7fd faaa 	bl	80004d4 <__aeabi_d2uiz>
 8002f80:	0003      	movs	r3, r0
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <led_bar_setup+0x38c>)
 8002f86:	869a      	strh	r2, [r3, #52]	; 0x34

    hs.tansistion_time = transision_period;
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <led_bar_setup+0x39c>)
 8002f8a:	003a      	movs	r2, r7
 8002f8c:	8812      	ldrh	r2, [r2, #0]
 8002f8e:	841a      	strh	r2, [r3, #32]
    hs.led_bar_state = LED_BAR_INIT;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <led_bar_setup+0x39c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	721a      	strb	r2, [r3, #8]
    hs.ev_display_scan_mode = true;
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <led_bar_setup+0x39c>)
 8002f98:	23bc      	movs	r3, #188	; 0xbc
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	5cd1      	ldrb	r1, [r2, r3]
 8002f9e:	2002      	movs	r0, #2
 8002fa0:	4301      	orrs	r1, r0
 8002fa2:	54d1      	strb	r1, [r2, r3]
    hs.led_bar_display_status = true;
 8002fa4:	4a0c      	ldr	r2, [pc, #48]	; (8002fd8 <led_bar_setup+0x39c>)
 8002fa6:	23bc      	movs	r3, #188	; 0xbc
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	5cd1      	ldrb	r1, [r2, r3]
 8002fac:	2001      	movs	r0, #1
 8002fae:	4301      	orrs	r1, r0
 8002fb0:	54d1      	strb	r1, [r2, r3]
    led_bar_off();
 8002fb2:	f000 f813 	bl	8002fdc <led_bar_off>
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b004      	add	sp, #16
 8002fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	9999999a 	.word	0x9999999a
 8002fc4:	3fb99999 	.word	0x3fb99999
 8002fc8:	200007f4 	.word	0x200007f4
 8002fcc:	3fd99999 	.word	0x3fd99999
 8002fd0:	66666666 	.word	0x66666666
 8002fd4:	3fe66666 	.word	0x3fe66666
 8002fd8:	20000378 	.word	0x20000378

08002fdc <led_bar_off>:
  * @brief led_bar_off
  * @param  None
  * @retval : None
  */
void led_bar_off(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
    memset( &led_display, 0x00, sizeof( led_display ) );
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <led_bar_off+0x1c>)
 8002fe2:	2248      	movs	r2, #72	; 0x48
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f004 fd3c 	bl	8007a64 <memset>
    update_led_bar();
 8002fec:	f000 f8ae 	bl	800314c <update_led_bar>
}/*
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	200007ac 	.word	0x200007ac

08002ffc <generate_led_pwm>:
  * @brief Generate the PWM levels based on lux level
  * @param  None
  * @retval : None
  */
void generate_led_pwm(void)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
    uint8_t led_level, mask;
    int16_t i, j, index;
    uint32_t output_value;
    float lux_scale;

    if( hs.valid_lux_level == true ) {
 8003002:	4a4e      	ldr	r2, [pc, #312]	; (800313c <generate_led_pwm+0x140>)
 8003004:	23bc      	movs	r3, #188	; 0xbc
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	5cd3      	ldrb	r3, [r2, r3]
 800300a:	227f      	movs	r2, #127	; 0x7f
 800300c:	4393      	bics	r3, r2
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <generate_led_pwm+0x20>
        lux_scale = 1.0;        // determine correct levels later - use a calculation
 8003014:	23fe      	movs	r3, #254	; 0xfe
 8003016:	059b      	lsls	r3, r3, #22
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	e002      	b.n	8003022 <generate_led_pwm+0x26>
    } else
        lux_scale = 1.0;
 800301c:	23fe      	movs	r3, #254	; 0xfe
 800301e:	059b      	lsls	r3, r3, #22
 8003020:	60bb      	str	r3, [r7, #8]
    /*
     * Output PWM Bits are sent for the last LED first and each of the 24 bits are sent in order of G R B bit order 7-0
     *
     * The Array contains additional byte to generate reload of data
     */
    memset( (void *) &ld.pwm_output, 0x00, sizeof( ld.pwm_output ) );
 8003022:	239c      	movs	r3, #156	; 0x9c
 8003024:	009a      	lsls	r2, r3, #2
 8003026:	4b46      	ldr	r3, [pc, #280]	; (8003140 <generate_led_pwm+0x144>)
 8003028:	2100      	movs	r1, #0
 800302a:	0018      	movs	r0, r3
 800302c:	f004 fd1a 	bl	8007a64 <memset>
    index = WS2812B_RESET_TIME;   // Start after some preamble
 8003030:	2310      	movs	r3, #16
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	223c      	movs	r2, #60	; 0x3c
 8003036:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < LED_BAR_NO_LEDS;  i++ ) {
 8003038:	2314      	movs	r3, #20
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	2200      	movs	r2, #0
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	e071      	b.n	8003126 <generate_led_pwm+0x12a>
        for( j = 0; j < LEDS_NO_LEDS; j++ ) {
 8003042:	2312      	movs	r3, #18
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	2200      	movs	r2, #0
 8003048:	801a      	strh	r2, [r3, #0]
 800304a:	e05d      	b.n	8003108 <generate_led_pwm+0x10c>
            led_level = (uint8_t) ( lux_scale * (float) led_display[ i ][ j ] );
 800304c:	2314      	movs	r3, #20
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	2200      	movs	r2, #0
 8003052:	5e9a      	ldrsh	r2, [r3, r2]
 8003054:	2312      	movs	r3, #18
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2000      	movs	r0, #0
 800305a:	5e18      	ldrsh	r0, [r3, r0]
 800305c:	4939      	ldr	r1, [pc, #228]	; (8003144 <generate_led_pwm+0x148>)
 800305e:	0013      	movs	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	189b      	adds	r3, r3, r2
 8003064:	181b      	adds	r3, r3, r0
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	5a5b      	ldrh	r3, [r3, r1]
 800306a:	0018      	movs	r0, r3
 800306c:	f7fd feee 	bl	8000e4c <__aeabi_ui2f>
 8003070:	1c03      	adds	r3, r0, #0
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	1c18      	adds	r0, r3, #0
 8003076:	f7fd fbd3 	bl	8000820 <__aeabi_fmul>
 800307a:	1c03      	adds	r3, r0, #0
 800307c:	1dfc      	adds	r4, r7, #7
 800307e:	1c18      	adds	r0, r3, #0
 8003080:	f7fd fa10 	bl	80004a4 <__aeabi_f2uiz>
 8003084:	0003      	movs	r3, r0
 8003086:	7023      	strb	r3, [r4, #0]
//            printf( "LED Display[ %u ][ %u ] = 0x%02x\r\n", i, j, (uint16_t) pwm_output[ i ] );
            output_value = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
            for( mask = 0x80; mask != 0 ; mask >>= 1 ) {
 800308c:	2317      	movs	r3, #23
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e01a      	b.n	80030cc <generate_led_pwm+0xd0>
            	output_value <<= 4;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	60fb      	str	r3, [r7, #12]
                if( ( led_level & mask ) == 0x00 ) {
 800309c:	1dfb      	adds	r3, r7, #7
 800309e:	2217      	movs	r2, #23
 80030a0:	18ba      	adds	r2, r7, r2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	4013      	ands	r3, r2
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d104      	bne.n	80030b8 <generate_led_pwm+0xbc>
                	output_value |= (uint32_t) ( NZR_0 );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2208      	movs	r2, #8
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e003      	b.n	80030c0 <generate_led_pwm+0xc4>
                } else {
                	output_value |= (uint32_t) ( NZR_1 );
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	220e      	movs	r2, #14
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
            for( mask = 0x80; mask != 0 ; mask >>= 1 ) {
 80030c0:	2217      	movs	r2, #23
 80030c2:	18bb      	adds	r3, r7, r2
 80030c4:	18ba      	adds	r2, r7, r2
 80030c6:	7812      	ldrb	r2, [r2, #0]
 80030c8:	0852      	lsrs	r2, r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	2317      	movs	r3, #23
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1df      	bne.n	8003096 <generate_led_pwm+0x9a>
                }
            }
//            printf( "Index: %u\r\n", index );
            ld.pwm_output[ index++ ] = output_value;
 80030d6:	2010      	movs	r0, #16
 80030d8:	183b      	adds	r3, r7, r0
 80030da:	2200      	movs	r2, #0
 80030dc:	5e9a      	ldrsh	r2, [r3, r2]
 80030de:	b293      	uxth	r3, r2
 80030e0:	3301      	adds	r3, #1
 80030e2:	b299      	uxth	r1, r3
 80030e4:	183b      	adds	r3, r7, r0
 80030e6:	8019      	strh	r1, [r3, #0]
 80030e8:	0013      	movs	r3, r2
 80030ea:	4a17      	ldr	r2, [pc, #92]	; (8003148 <generate_led_pwm+0x14c>)
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	18d3      	adds	r3, r2, r3
 80030f0:	3304      	adds	r3, #4
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]
        for( j = 0; j < LEDS_NO_LEDS; j++ ) {
 80030f6:	2112      	movs	r1, #18
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2200      	movs	r2, #0
 80030fc:	5e9b      	ldrsh	r3, [r3, r2]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3301      	adds	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	187b      	adds	r3, r7, r1
 8003106:	801a      	strh	r2, [r3, #0]
 8003108:	2312      	movs	r3, #18
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2200      	movs	r2, #0
 800310e:	5e9b      	ldrsh	r3, [r3, r2]
 8003110:	2b02      	cmp	r3, #2
 8003112:	dd9b      	ble.n	800304c <generate_led_pwm+0x50>
    for( i = 0; i < LED_BAR_NO_LEDS;  i++ ) {
 8003114:	2114      	movs	r1, #20
 8003116:	187b      	adds	r3, r7, r1
 8003118:	2200      	movs	r2, #0
 800311a:	5e9b      	ldrsh	r3, [r3, r2]
 800311c:	b29b      	uxth	r3, r3
 800311e:	3301      	adds	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	187b      	adds	r3, r7, r1
 8003124:	801a      	strh	r2, [r3, #0]
 8003126:	2314      	movs	r3, #20
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2200      	movs	r2, #0
 800312c:	5e9b      	ldrsh	r3, [r3, r2]
 800312e:	2b0b      	cmp	r3, #11
 8003130:	dd87      	ble.n	8003042 <generate_led_pwm+0x46>
        }
    }
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b007      	add	sp, #28
 8003138:	bd90      	pop	{r4, r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	20000378 	.word	0x20000378
 8003140:	20000094 	.word	0x20000094
 8003144:	200007ac 	.word	0x200007ac
 8003148:	20000090 	.word	0x20000090

0800314c <update_led_bar>:
  * @brief update_led_bar
  * @param  None
  * @retval : None
  */
void update_led_bar(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	/*
	 * Generate PWM Waveform
	 */
	generate_led_pwm();
 8003150:	f7ff ff54 	bl	8002ffc <generate_led_pwm>
	/*
	 * Take the data that has been prepared using generate pwm and output over SPI 2
	 */
	LED_display_update_completed = false;
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <update_led_bar+0x34>)
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
	/*
	 * Initiate Transfer
	 */
	HAL_SPI_Transmit_DMA( &hspi2, (uint8_t *) ld.pwm_output, sizeof( ld.pwm_output ) );
 800315a:	239c      	movs	r3, #156	; 0x9c
 800315c:	009a      	lsls	r2, r3, #2
 800315e:	4909      	ldr	r1, [pc, #36]	; (8003184 <update_led_bar+0x38>)
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <update_led_bar+0x3c>)
 8003162:	0018      	movs	r0, r3
 8003164:	f002 fd6e 	bl	8005c44 <HAL_SPI_Transmit_DMA>
	/*
	 * Wait for it to complete - Later make this checked in main loop for LED management to speed operations up
	 */
	while( LED_display_update_completed == false )
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <update_led_bar+0x34>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2201      	movs	r2, #1
 8003172:	4053      	eors	r3, r2
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f7      	bne.n	800316a <update_led_bar+0x1e>
		;
}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	200007a8 	.word	0x200007a8
 8003184:	20000094 	.word	0x20000094
 8003188:	20000314 	.word	0x20000314

0800318c <led_bar_test>:
  * @brief led bar test
  * @param  None
  * @retval : None
  */
void led_bar_test(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
    uint16_t j, i, color;

    color = 0;
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	2200      	movs	r2, #0
 8003196:	801a      	strh	r2, [r3, #0]

    led_bar_off();
 8003198:	f7ff ff20 	bl	8002fdc <led_bar_off>
    HAL_Delay( 2000 );
 800319c:	23fa      	movs	r3, #250	; 0xfa
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	0018      	movs	r0, r3
 80031a2:	f000 f8e5 	bl	8003370 <HAL_Delay>
//    for( color = 0; color < 3; i++ ) {
        led_bar_off();
 80031a6:	f7ff ff19 	bl	8002fdc <led_bar_off>
        for( j = 1; j < 256; j ++ ) {
 80031aa:	1dbb      	adds	r3, r7, #6
 80031ac:	2201      	movs	r2, #1
 80031ae:	801a      	strh	r2, [r3, #0]
 80031b0:	e01e      	b.n	80031f0 <led_bar_test+0x64>
            set_led_bar_raw( 0, j, 0, 0 );
 80031b2:	1dbb      	adds	r3, r7, #6
 80031b4:	8819      	ldrh	r1, [r3, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	2200      	movs	r2, #0
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7ff fcf6 	bl	8002bac <set_led_bar_raw>
            set_led_bar_raw( 6, j, 0, 0 );
 80031c0:	1dbb      	adds	r3, r7, #6
 80031c2:	8819      	ldrh	r1, [r3, #0]
 80031c4:	2300      	movs	r3, #0
 80031c6:	2200      	movs	r2, #0
 80031c8:	2006      	movs	r0, #6
 80031ca:	f7ff fcef 	bl	8002bac <set_led_bar_raw>
            set_led_bar_raw( 11, j, 0, 0 );
 80031ce:	1dbb      	adds	r3, r7, #6
 80031d0:	8819      	ldrh	r1, [r3, #0]
 80031d2:	2300      	movs	r3, #0
 80031d4:	2200      	movs	r2, #0
 80031d6:	200b      	movs	r0, #11
 80031d8:	f7ff fce8 	bl	8002bac <set_led_bar_raw>
            update_led_bar();
 80031dc:	f7ff ffb6 	bl	800314c <update_led_bar>
            HAL_Delay( 10 );
 80031e0:	200a      	movs	r0, #10
 80031e2:	f000 f8c5 	bl	8003370 <HAL_Delay>
        for( j = 1; j < 256; j ++ ) {
 80031e6:	1dbb      	adds	r3, r7, #6
 80031e8:	881a      	ldrh	r2, [r3, #0]
 80031ea:	1dbb      	adds	r3, r7, #6
 80031ec:	3201      	adds	r2, #1
 80031ee:	801a      	strh	r2, [r3, #0]
 80031f0:	1dbb      	adds	r3, r7, #6
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	2bff      	cmp	r3, #255	; 0xff
 80031f6:	d9dc      	bls.n	80031b2 <led_bar_test+0x26>
        }
//    }
	return;
 80031f8:	46c0      	nop			; (mov r8, r8)
        color += 1;
        if( color >= LEDS_NO_LEDS )
            color = 0;
        led_bar_off();
    }
}
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <system_init>:
  * @brief	Initialize all elements of the system
  * @param  None
  * @retval : None
  */
void system_init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	/*
	 * Initialize each of the sub systems
	 */
	led_init();
 8003204:	f7ff fca4 	bl	8002b50 <led_init>
	init_led_bar();
 8003208:	f7ff fd10 	bl	8002c2c <init_led_bar>
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003214:	480d      	ldr	r0, [pc, #52]	; (800324c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003216:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003218:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800321a:	e003      	b.n	8003224 <LoopCopyDataInit>

0800321c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800321e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003220:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003222:	3104      	adds	r1, #4

08003224 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003224:	480b      	ldr	r0, [pc, #44]	; (8003254 <LoopForever+0xa>)
  ldr r3, =_edata
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <LoopForever+0xe>)
  adds r2, r0, r1
 8003228:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800322a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800322c:	d3f6      	bcc.n	800321c <CopyDataInit>
  ldr r2, =_sbss
 800322e:	4a0b      	ldr	r2, [pc, #44]	; (800325c <LoopForever+0x12>)
  b LoopFillZerobss
 8003230:	e002      	b.n	8003238 <LoopFillZerobss>

08003232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  str  r3, [r2]
 8003234:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003236:	3204      	adds	r2, #4

08003238 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <LoopForever+0x16>)
  cmp r2, r3
 800323a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800323c:	d3f9      	bcc.n	8003232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800323e:	f7ff fc7b 	bl	8002b38 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003242:	f004 fbeb 	bl	8007a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003246:	f7fe fdf3 	bl	8001e30 <main>

0800324a <LoopForever>:

LoopForever:
    b LoopForever
 800324a:	e7fe      	b.n	800324a <LoopForever>
  ldr   r0, =_estack
 800324c:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8003250:	08008564 	.word	0x08008564
  ldr r0, =_sdata
 8003254:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003258:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800325c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003260:	20000844 	.word	0x20000844

08003264 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003264:	e7fe      	b.n	8003264 <ADC1_IRQHandler>
	...

08003268 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800326e:	1dfb      	adds	r3, r7, #7
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_Init+0x3c>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <HAL_Init+0x3c>)
 800327a:	2180      	movs	r1, #128	; 0x80
 800327c:	0049      	lsls	r1, r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003282:	2000      	movs	r0, #0
 8003284:	f000 f810 	bl	80032a8 <HAL_InitTick>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d003      	beq.n	8003294 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e001      	b.n	8003298 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003294:	f7ff f982 	bl	800259c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	781b      	ldrb	r3, [r3, #0]
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40022000 	.word	0x40022000

080032a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032b0:	230f      	movs	r3, #15
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_InitTick+0x88>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02b      	beq.n	8003318 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_InitTick+0x8c>)
 80032c2:	681c      	ldr	r4, [r3, #0]
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_InitTick+0x88>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0019      	movs	r1, r3
 80032ca:	23fa      	movs	r3, #250	; 0xfa
 80032cc:	0098      	lsls	r0, r3, #2
 80032ce:	f7fc ff19 	bl	8000104 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	0019      	movs	r1, r3
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7fc ff14 	bl	8000104 <__udivsi3>
 80032dc:	0003      	movs	r3, r0
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 fdcb 	bl	8003e7a <HAL_SYSTICK_Config>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d112      	bne.n	800330e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d80a      	bhi.n	8003304 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	2301      	movs	r3, #1
 80032f2:	425b      	negs	r3, r3
 80032f4:	2200      	movs	r2, #0
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 fd9a 	bl	8003e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_InitTick+0x90>)
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e00d      	b.n	8003320 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003304:	230f      	movs	r3, #15
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e008      	b.n	8003320 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800330e:	230f      	movs	r3, #15
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e003      	b.n	8003320 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003318:	230f      	movs	r3, #15
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003320:	230f      	movs	r3, #15
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b005      	add	sp, #20
 800332c:	bd90      	pop	{r4, r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	20000008 	.word	0x20000008
 8003334:	20000000 	.word	0x20000000
 8003338:	20000004 	.word	0x20000004

0800333c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <HAL_IncTick+0x18>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_IncTick+0x1c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	18d2      	adds	r2, r2, r3
 800334a:	4b02      	ldr	r3, [pc, #8]	; (8003354 <HAL_IncTick+0x18>)
 800334c:	601a      	str	r2, [r3, #0]
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	2000083c 	.word	0x2000083c
 8003358:	20000008 	.word	0x20000008

0800335c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  return uwTick;
 8003360:	4b02      	ldr	r3, [pc, #8]	; (800336c <HAL_GetTick+0x10>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	2000083c 	.word	0x2000083c

08003370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003378:	f7ff fff0 	bl	800335c <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3301      	adds	r3, #1
 8003388:	d004      	beq.n	8003394 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_Delay+0x40>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	18d3      	adds	r3, r2, r3
 8003392:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	f7ff ffe1 	bl	800335c <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d8f7      	bhi.n	8003396 <HAL_Delay+0x26>
  {
  }
}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	20000008 	.word	0x20000008

080033b4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80033c4:	401a      	ands	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	601a      	str	r2, [r3, #0]
}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b002      	add	sp, #8
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	fe3fffff 	.word	0xfe3fffff

080033dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	23e0      	movs	r3, #224	; 0xe0
 80033ea:	045b      	lsls	r3, r3, #17
 80033ec:	4013      	ands	r3, r2
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b002      	add	sp, #8
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	2104      	movs	r1, #4
 800340a:	400a      	ands	r2, r1
 800340c:	2107      	movs	r1, #7
 800340e:	4091      	lsls	r1, r2
 8003410:	000a      	movs	r2, r1
 8003412:	43d2      	mvns	r2, r2
 8003414:	401a      	ands	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2104      	movs	r1, #4
 800341a:	400b      	ands	r3, r1
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4099      	lsls	r1, r3
 8003420:	000b      	movs	r3, r1
 8003422:	431a      	orrs	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b004      	add	sp, #16
 800342e:	bd80      	pop	{r7, pc}

08003430 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	211f      	movs	r1, #31
 8003444:	400a      	ands	r2, r1
 8003446:	210f      	movs	r1, #15
 8003448:	4091      	lsls	r1, r2
 800344a:	000a      	movs	r2, r1
 800344c:	43d2      	mvns	r2, r2
 800344e:	401a      	ands	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0e9b      	lsrs	r3, r3, #26
 8003454:	210f      	movs	r1, #15
 8003456:	4019      	ands	r1, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	201f      	movs	r0, #31
 800345c:	4003      	ands	r3, r0
 800345e:	4099      	lsls	r1, r3
 8003460:	000b      	movs	r3, r1
 8003462:	431a      	orrs	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b004      	add	sp, #16
 800346e:	bd80      	pop	{r7, pc}

08003470 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	035b      	lsls	r3, r3, #13
 8003482:	0b5b      	lsrs	r3, r3, #13
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	629a      	str	r2, [r3, #40]	; 0x28
}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b002      	add	sp, #8
 8003490:	bd80      	pop	{r7, pc}

08003492 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	0352      	lsls	r2, r2, #13
 80034a4:	0b52      	lsrs	r2, r2, #13
 80034a6:	43d2      	mvns	r2, r2
 80034a8:	401a      	ands	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	0212      	lsls	r2, r2, #8
 80034cc:	43d2      	mvns	r2, r2
 80034ce:	401a      	ands	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	400b      	ands	r3, r1
 80034d8:	4904      	ldr	r1, [pc, #16]	; (80034ec <LL_ADC_SetChannelSamplingTime+0x34>)
 80034da:	400b      	ands	r3, r1
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b004      	add	sp, #16
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	07ffff00 	.word	0x07ffff00

080034f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a05      	ldr	r2, [pc, #20]	; (8003514 <LL_ADC_EnableInternalRegulator+0x24>)
 80034fe:	4013      	ands	r3, r2
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	0552      	lsls	r2, r2, #21
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	46bd      	mov	sp, r7
 800350e:	b002      	add	sp, #8
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	6fffffe8 	.word	0x6fffffe8

08003518 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	055b      	lsls	r3, r3, #21
 8003528:	401a      	ands	r2, r3
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	055b      	lsls	r3, r3, #21
 800352e:	429a      	cmp	r2, r3
 8003530:	d101      	bne.n	8003536 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003536:	2300      	movs	r3, #0
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b002      	add	sp, #8
 800353e:	bd80      	pop	{r7, pc}

08003540 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2201      	movs	r2, #1
 800354e:	4013      	ands	r3, r2
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <LL_ADC_IsEnabled+0x18>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <LL_ADC_IsEnabled+0x1a>
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}

08003562 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2204      	movs	r2, #4
 8003570:	4013      	ands	r3, r2
 8003572:	2b04      	cmp	r3, #4
 8003574:	d101      	bne.n	800357a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800357a:	2300      	movs	r3, #0
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800358c:	231f      	movs	r3, #31
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003594:	2300      	movs	r3, #0
 8003596:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e1aa      	b.n	8003900 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7ff f815 	bl	80025e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2254      	movs	r2, #84	; 0x54
 80035c4:	2100      	movs	r1, #0
 80035c6:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7ff ffa3 	bl	8003518 <LL_ADC_IsInternalRegulatorEnabled>
 80035d2:	1e03      	subs	r3, r0, #0
 80035d4:	d114      	bne.n	8003600 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	0018      	movs	r0, r3
 80035dc:	f7ff ff88 	bl	80034f0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80035e0:	4bc9      	ldr	r3, [pc, #804]	; (8003908 <HAL_ADC_Init+0x384>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	49c9      	ldr	r1, [pc, #804]	; (800390c <HAL_ADC_Init+0x388>)
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7fc fd8c 	bl	8000104 <__udivsi3>
 80035ec:	0003      	movs	r3, r0
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80035f2:	e002      	b.n	80035fa <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f9      	bne.n	80035f4 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0018      	movs	r0, r3
 8003606:	f7ff ff87 	bl	8003518 <LL_ADC_IsInternalRegulatorEnabled>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d10f      	bne.n	800362e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	2210      	movs	r2, #16
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	2201      	movs	r2, #1
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8003626:	231f      	movs	r3, #31
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	0018      	movs	r0, r3
 8003634:	f7ff ff95 	bl	8003562 <LL_ADC_REG_IsConversionOngoing>
 8003638:	0003      	movs	r3, r0
 800363a:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	2210      	movs	r2, #16
 8003642:	4013      	ands	r3, r2
 8003644:	d000      	beq.n	8003648 <HAL_ADC_Init+0xc4>
 8003646:	e14e      	b.n	80038e6 <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d000      	beq.n	8003650 <HAL_ADC_Init+0xcc>
 800364e:	e14a      	b.n	80038e6 <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	4aae      	ldr	r2, [pc, #696]	; (8003910 <HAL_ADC_Init+0x38c>)
 8003656:	4013      	ands	r3, r2
 8003658:	2202      	movs	r2, #2
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	0018      	movs	r0, r3
 8003666:	f7ff ff6b 	bl	8003540 <LL_ADC_IsEnabled>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d137      	bne.n	80036de <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2218      	movs	r2, #24
 8003676:	4393      	bics	r3, r2
 8003678:	0019      	movs	r1, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	0899      	lsrs	r1, r3, #2
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0f9b      	lsrs	r3, r3, #30
 8003696:	079a      	lsls	r2, r3, #30
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	23c0      	movs	r3, #192	; 0xc0
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d018      	beq.n	80036de <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	05db      	lsls	r3, r3, #23
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d012      	beq.n	80036de <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	061b      	lsls	r3, r3, #24
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d00c      	beq.n	80036de <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80036c4:	4b93      	ldr	r3, [pc, #588]	; (8003914 <HAL_ADC_Init+0x390>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a93      	ldr	r2, [pc, #588]	; (8003918 <HAL_ADC_Init+0x394>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	23f0      	movs	r3, #240	; 0xf0
 80036d4:	039b      	lsls	r3, r3, #14
 80036d6:	401a      	ands	r2, r3
 80036d8:	4b8e      	ldr	r3, [pc, #568]	; (8003914 <HAL_ADC_Init+0x390>)
 80036da:	430a      	orrs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	7e1b      	ldrb	r3, [r3, #24]
 80036e2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	7e5b      	ldrb	r3, [r3, #25]
 80036e8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7e9b      	ldrb	r3, [r3, #26]
 80036f0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80036f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_ADC_Init+0x17e>
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	015b      	lsls	r3, r3, #5
 8003700:	e000      	b.n	8003704 <HAL_ADC_Init+0x180>
 8003702:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003704:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800370a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	da04      	bge.n	800371e <HAL_ADC_Init+0x19a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	e001      	b.n	8003722 <HAL_ADC_Init+0x19e>
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8003722:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	5c5b      	ldrb	r3, [r3, r1]
 800372a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800372c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	5c9b      	ldrb	r3, [r3, r2]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d115      	bne.n	800376a <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7e9b      	ldrb	r3, [r3, #26]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2280      	movs	r2, #128	; 0x80
 800374a:	0252      	lsls	r2, r2, #9
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	e00b      	b.n	800376a <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	2220      	movs	r2, #32
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	2201      	movs	r2, #1
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003776:	23e0      	movs	r3, #224	; 0xe0
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003780:	4313      	orrs	r3, r2
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8003790:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8003796:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 800379c:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	223c      	movs	r2, #60	; 0x3c
 80037a8:	5c9b      	ldrb	r3, [r3, r2]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d103      	bne.n	80037b6 <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2201      	movs	r2, #1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a57      	ldr	r2, [pc, #348]	; (800391c <HAL_ADC_Init+0x398>)
 80037be:	4013      	ands	r3, r2
 80037c0:	0019      	movs	r1, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	4a53      	ldr	r2, [pc, #332]	; (8003920 <HAL_ADC_Init+0x39c>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	0019      	movs	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	430a      	orrs	r2, r1
 80037e0:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ea:	001a      	movs	r2, r3
 80037ec:	2100      	movs	r1, #0
 80037ee:	f7ff fe02 	bl	80033f6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	494a      	ldr	r1, [pc, #296]	; (8003924 <HAL_ADC_Init+0x3a0>)
 80037fc:	001a      	movs	r2, r3
 80037fe:	f7ff fdfa 	bl	80033f6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2110      	movs	r1, #16
 8003816:	4249      	negs	r1, r1
 8003818:	430a      	orrs	r2, r1
 800381a:	629a      	str	r2, [r3, #40]	; 0x28
 800381c:	e03c      	b.n	8003898 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	039b      	lsls	r3, r3, #14
 8003826:	429a      	cmp	r2, r3
 8003828:	d136      	bne.n	8003898 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	e00c      	b.n	800384a <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	40da      	lsrs	r2, r3
 800383a:	0013      	movs	r3, r2
 800383c:	220f      	movs	r2, #15
 800383e:	4013      	ands	r3, r2
 8003840:	2b0f      	cmp	r3, #15
 8003842:	d006      	beq.n	8003852 <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	3301      	adds	r3, #1
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b07      	cmp	r3, #7
 800384e:	d9ef      	bls.n	8003830 <HAL_ADC_Init+0x2ac>
 8003850:	e000      	b.n	8003854 <HAL_ADC_Init+0x2d0>
        {
          break;
 8003852:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d109      	bne.n	800386e <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2110      	movs	r1, #16
 8003866:	4249      	negs	r1, r1
 8003868:	430a      	orrs	r2, r1
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
 800386c:	e014      	b.n	8003898 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	4a2b      	ldr	r2, [pc, #172]	; (8003928 <HAL_ADC_Init+0x3a4>)
 800387a:	4694      	mov	ip, r2
 800387c:	4463      	add	r3, ip
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	221c      	movs	r2, #28
 8003882:	4013      	ands	r3, r2
 8003884:	2210      	movs	r2, #16
 8003886:	4252      	negs	r2, r2
 8003888:	409a      	lsls	r2, r3
 800388a:	0011      	movs	r1, r2
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	4a23      	ldr	r2, [pc, #140]	; (800392c <HAL_ADC_Init+0x3a8>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d10b      	bne.n	80038c0 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	2203      	movs	r2, #3
 80038b4:	4393      	bics	r3, r2
 80038b6:	2201      	movs	r2, #1
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80038be:	e01c      	b.n	80038fa <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	2212      	movs	r2, #18
 80038c6:	4393      	bics	r3, r2
 80038c8:	2210      	movs	r2, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	2201      	movs	r2, #1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 80038dc:	231f      	movs	r3, #31
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80038e4:	e009      	b.n	80038fa <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	2210      	movs	r2, #16
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80038f2:	231f      	movs	r3, #31
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038fa:	231f      	movs	r3, #31
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	781b      	ldrb	r3, [r3, #0]
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b008      	add	sp, #32
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000000 	.word	0x20000000
 800390c:	00030d40 	.word	0x00030d40
 8003910:	fffffefd 	.word	0xfffffefd
 8003914:	40012708 	.word	0x40012708
 8003918:	ffc3ffff 	.word	0xffc3ffff
 800391c:	fffe0219 	.word	0xfffe0219
 8003920:	dffffc02 	.word	0xdffffc02
 8003924:	07ffff04 	.word	0x07ffff04
 8003928:	3fffffff 	.word	0x3fffffff
 800392c:	833fffe7 	.word	0x833fffe7

08003930 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800393a:	2317      	movs	r3, #23
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2254      	movs	r2, #84	; 0x54
 800394a:	5c9b      	ldrb	r3, [r3, r2]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x24>
 8003950:	2302      	movs	r3, #2
 8003952:	e1bc      	b.n	8003cce <HAL_ADC_ConfigChannel+0x39e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2254      	movs	r2, #84	; 0x54
 8003958:	2101      	movs	r1, #1
 800395a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0018      	movs	r0, r3
 8003962:	f7ff fdfe 	bl	8003562 <LL_ADC_REG_IsConversionOngoing>
 8003966:	1e03      	subs	r3, r0, #0
 8003968:	d000      	beq.n	800396c <HAL_ADC_ConfigChannel+0x3c>
 800396a:	e19f      	b.n	8003cac <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d100      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x46>
 8003974:	e13e      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	429a      	cmp	r2, r3
 8003980:	d004      	beq.n	800398c <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003986:	4abf      	ldr	r2, [pc, #764]	; (8003c84 <HAL_ADC_ConfigChannel+0x354>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0019      	movs	r1, r3
 8003996:	0010      	movs	r0, r2
 8003998:	f7ff fd6a 	bl	8003470 <LL_ADC_REG_SetSequencerChAdd>
 800399c:	e0c9      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	211f      	movs	r1, #31
 80039a8:	400b      	ands	r3, r1
 80039aa:	210f      	movs	r1, #15
 80039ac:	4099      	lsls	r1, r3
 80039ae:	000b      	movs	r3, r1
 80039b0:	43db      	mvns	r3, r3
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	035b      	lsls	r3, r3, #13
 80039bc:	0b5b      	lsrs	r3, r3, #13
 80039be:	d105      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x9c>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0e9b      	lsrs	r3, r3, #26
 80039c6:	221f      	movs	r2, #31
 80039c8:	4013      	ands	r3, r2
 80039ca:	e098      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2201      	movs	r2, #1
 80039d2:	4013      	ands	r3, r2
 80039d4:	d000      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0xa8>
 80039d6:	e091      	b.n	8003afc <HAL_ADC_ConfigChannel+0x1cc>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2202      	movs	r2, #2
 80039de:	4013      	ands	r3, r2
 80039e0:	d000      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0xb4>
 80039e2:	e089      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x1c8>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2204      	movs	r2, #4
 80039ea:	4013      	ands	r3, r2
 80039ec:	d000      	beq.n	80039f0 <HAL_ADC_ConfigChannel+0xc0>
 80039ee:	e081      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x1c4>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2208      	movs	r2, #8
 80039f6:	4013      	ands	r3, r2
 80039f8:	d000      	beq.n	80039fc <HAL_ADC_ConfigChannel+0xcc>
 80039fa:	e079      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x1c0>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2210      	movs	r2, #16
 8003a02:	4013      	ands	r3, r2
 8003a04:	d000      	beq.n	8003a08 <HAL_ADC_ConfigChannel+0xd8>
 8003a06:	e071      	b.n	8003aec <HAL_ADC_ConfigChannel+0x1bc>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d000      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0xe4>
 8003a12:	e069      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x1b8>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2240      	movs	r2, #64	; 0x40
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d000      	beq.n	8003a20 <HAL_ADC_ConfigChannel+0xf0>
 8003a1e:	e061      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x1b4>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	4013      	ands	r3, r2
 8003a28:	d000      	beq.n	8003a2c <HAL_ADC_ConfigChannel+0xfc>
 8003a2a:	e059      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x1b0>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4013      	ands	r3, r2
 8003a36:	d151      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x1ac>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4013      	ands	r3, r2
 8003a42:	d149      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x1a8>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d141      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x1a4>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d139      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x1a0>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	015b      	lsls	r3, r3, #5
 8003a64:	4013      	ands	r3, r2
 8003a66:	d131      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x19c>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	019b      	lsls	r3, r3, #6
 8003a70:	4013      	ands	r3, r2
 8003a72:	d129      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x198>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d121      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x194>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d119      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x190>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	025b      	lsls	r3, r3, #9
 8003a94:	4013      	ands	r3, r2
 8003a96:	d111      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x18c>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	029b      	lsls	r3, r3, #10
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d109      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x188>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	02db      	lsls	r3, r3, #11
 8003aac:	4013      	ands	r3, r2
 8003aae:	d001      	beq.n	8003ab4 <HAL_ADC_ConfigChannel+0x184>
 8003ab0:	2312      	movs	r3, #18
 8003ab2:	e024      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e022      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ab8:	2311      	movs	r3, #17
 8003aba:	e020      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003abc:	2310      	movs	r3, #16
 8003abe:	e01e      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ac0:	230f      	movs	r3, #15
 8003ac2:	e01c      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ac4:	230e      	movs	r3, #14
 8003ac6:	e01a      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ac8:	230d      	movs	r3, #13
 8003aca:	e018      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003acc:	230c      	movs	r3, #12
 8003ace:	e016      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ad0:	230b      	movs	r3, #11
 8003ad2:	e014      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ad4:	230a      	movs	r3, #10
 8003ad6:	e012      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ad8:	2309      	movs	r3, #9
 8003ada:	e010      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003adc:	2308      	movs	r3, #8
 8003ade:	e00e      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ae0:	2307      	movs	r3, #7
 8003ae2:	e00c      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ae4:	2306      	movs	r3, #6
 8003ae6:	e00a      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ae8:	2305      	movs	r3, #5
 8003aea:	e008      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003aec:	2304      	movs	r3, #4
 8003aee:	e006      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003af0:	2303      	movs	r3, #3
 8003af2:	e004      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e002      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003afc:	2300      	movs	r3, #0
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	6852      	ldr	r2, [r2, #4]
 8003b02:	201f      	movs	r0, #31
 8003b04:	4002      	ands	r2, r0
 8003b06:	4093      	lsls	r3, r2
 8003b08:	000a      	movs	r2, r1
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d808      	bhi.n	8003b32 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	f7ff fc7f 	bl	8003430 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	001a      	movs	r2, r3
 8003b40:	f7ff fcba 	bl	80034b8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	db00      	blt.n	8003b4e <HAL_ADC_ConfigChannel+0x21e>
 8003b4c:	e0b8      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b4e:	4b4e      	ldr	r3, [pc, #312]	; (8003c88 <HAL_ADC_ConfigChannel+0x358>)
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff fc43 	bl	80033dc <LL_ADC_GetCommonPathInternalCh>
 8003b56:	0003      	movs	r3, r0
 8003b58:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a4b      	ldr	r2, [pc, #300]	; (8003c8c <HAL_ADC_ConfigChannel+0x35c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d11d      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x270>
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d118      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2280      	movs	r2, #128	; 0x80
 8003b72:	0412      	lsls	r2, r2, #16
 8003b74:	4313      	orrs	r3, r2
 8003b76:	4a44      	ldr	r2, [pc, #272]	; (8003c88 <HAL_ADC_ConfigChannel+0x358>)
 8003b78:	0019      	movs	r1, r3
 8003b7a:	0010      	movs	r0, r2
 8003b7c:	f7ff fc1a 	bl	80033b4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003b80:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <HAL_ADC_ConfigChannel+0x360>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4943      	ldr	r1, [pc, #268]	; (8003c94 <HAL_ADC_ConfigChannel+0x364>)
 8003b86:	0018      	movs	r0, r3
 8003b88:	f7fc fabc 	bl	8000104 <__udivsi3>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8003b90:	e002      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f9      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b9e:	e08f      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a3c      	ldr	r2, [pc, #240]	; (8003c98 <HAL_ADC_ConfigChannel+0x368>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x298>
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	045b      	lsls	r3, r3, #17
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d109      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2280      	movs	r2, #128	; 0x80
 8003bb8:	0452      	lsls	r2, r2, #17
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	4a32      	ldr	r2, [pc, #200]	; (8003c88 <HAL_ADC_ConfigChannel+0x358>)
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	0010      	movs	r0, r2
 8003bc2:	f7ff fbf7 	bl	80033b4 <LL_ADC_SetCommonPathInternalCh>
 8003bc6:	e07b      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a33      	ldr	r2, [pc, #204]	; (8003c9c <HAL_ADC_ConfigChannel+0x36c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d000      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x2a4>
 8003bd2:	e075      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	03db      	lsls	r3, r3, #15
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d000      	beq.n	8003be0 <HAL_ADC_ConfigChannel+0x2b0>
 8003bde:	e06f      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	03d2      	lsls	r2, r2, #15
 8003be6:	4313      	orrs	r3, r2
 8003be8:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <HAL_ADC_ConfigChannel+0x358>)
 8003bea:	0019      	movs	r1, r3
 8003bec:	0010      	movs	r0, r2
 8003bee:	f7ff fbe1 	bl	80033b4 <LL_ADC_SetCommonPathInternalCh>
 8003bf2:	e065      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	061b      	lsls	r3, r3, #24
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d004      	beq.n	8003c0a <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003c04:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_ADC_ConfigChannel+0x354>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d107      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	0019      	movs	r1, r3
 8003c14:	0010      	movs	r0, r2
 8003c16:	f7ff fc3c 	bl	8003492 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da4e      	bge.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c22:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_ADC_ConfigChannel+0x358>)
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7ff fbd9 	bl	80033dc <LL_ADC_GetCommonPathInternalCh>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <HAL_ADC_ConfigChannel+0x35c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d108      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <HAL_ADC_ConfigChannel+0x370>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <HAL_ADC_ConfigChannel+0x358>)
 8003c40:	0019      	movs	r1, r3
 8003c42:	0010      	movs	r0, r2
 8003c44:	f7ff fbb6 	bl	80033b4 <LL_ADC_SetCommonPathInternalCh>
 8003c48:	e03a      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <HAL_ADC_ConfigChannel+0x368>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d108      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4a13      	ldr	r2, [pc, #76]	; (8003ca4 <HAL_ADC_ConfigChannel+0x374>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <HAL_ADC_ConfigChannel+0x358>)
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	0010      	movs	r0, r2
 8003c60:	f7ff fba8 	bl	80033b4 <LL_ADC_SetCommonPathInternalCh>
 8003c64:	e02c      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <HAL_ADC_ConfigChannel+0x36c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d127      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4a0d      	ldr	r2, [pc, #52]	; (8003ca8 <HAL_ADC_ConfigChannel+0x378>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	4a04      	ldr	r2, [pc, #16]	; (8003c88 <HAL_ADC_ConfigChannel+0x358>)
 8003c78:	0019      	movs	r1, r3
 8003c7a:	0010      	movs	r0, r2
 8003c7c:	f7ff fb9a 	bl	80033b4 <LL_ADC_SetCommonPathInternalCh>
 8003c80:	e01e      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x390>
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	80000004 	.word	0x80000004
 8003c88:	40012708 	.word	0x40012708
 8003c8c:	b0001000 	.word	0xb0001000
 8003c90:	20000000 	.word	0x20000000
 8003c94:	00030d40 	.word	0x00030d40
 8003c98:	b8004000 	.word	0xb8004000
 8003c9c:	b4002000 	.word	0xb4002000
 8003ca0:	ff7fffff 	.word	0xff7fffff
 8003ca4:	feffffff 	.word	0xfeffffff
 8003ca8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8003cb8:	2317      	movs	r3, #23
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2254      	movs	r2, #84	; 0x54
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003cc8:	2317      	movs	r3, #23
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	781b      	ldrb	r3, [r3, #0]
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b006      	add	sp, #24
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)

08003cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	0002      	movs	r2, r0
 8003ce0:	1dfb      	adds	r3, r7, #7
 8003ce2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ce4:	1dfb      	adds	r3, r7, #7
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8003cea:	d809      	bhi.n	8003d00 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cec:	1dfb      	adds	r3, r7, #7
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	231f      	movs	r3, #31
 8003cf4:	401a      	ands	r2, r3
 8003cf6:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <__NVIC_EnableIRQ+0x30>)
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4091      	lsls	r1, r2
 8003cfc:	000a      	movs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]
  }
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	e000e100 	.word	0xe000e100

08003d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	0002      	movs	r2, r0
 8003d14:	6039      	str	r1, [r7, #0]
 8003d16:	1dfb      	adds	r3, r7, #7
 8003d18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d1a:	1dfb      	adds	r3, r7, #7
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d20:	d828      	bhi.n	8003d74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d22:	4a2f      	ldr	r2, [pc, #188]	; (8003de0 <__NVIC_SetPriority+0xd4>)
 8003d24:	1dfb      	adds	r3, r7, #7
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b25b      	sxtb	r3, r3
 8003d2a:	089b      	lsrs	r3, r3, #2
 8003d2c:	33c0      	adds	r3, #192	; 0xc0
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	589b      	ldr	r3, [r3, r2]
 8003d32:	1dfa      	adds	r2, r7, #7
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	0011      	movs	r1, r2
 8003d38:	2203      	movs	r2, #3
 8003d3a:	400a      	ands	r2, r1
 8003d3c:	00d2      	lsls	r2, r2, #3
 8003d3e:	21ff      	movs	r1, #255	; 0xff
 8003d40:	4091      	lsls	r1, r2
 8003d42:	000a      	movs	r2, r1
 8003d44:	43d2      	mvns	r2, r2
 8003d46:	401a      	ands	r2, r3
 8003d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	22ff      	movs	r2, #255	; 0xff
 8003d50:	401a      	ands	r2, r3
 8003d52:	1dfb      	adds	r3, r7, #7
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	0018      	movs	r0, r3
 8003d58:	2303      	movs	r3, #3
 8003d5a:	4003      	ands	r3, r0
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d60:	481f      	ldr	r0, [pc, #124]	; (8003de0 <__NVIC_SetPriority+0xd4>)
 8003d62:	1dfb      	adds	r3, r7, #7
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	b25b      	sxtb	r3, r3
 8003d68:	089b      	lsrs	r3, r3, #2
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	33c0      	adds	r3, #192	; 0xc0
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003d72:	e031      	b.n	8003dd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d74:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <__NVIC_SetPriority+0xd8>)
 8003d76:	1dfb      	adds	r3, r7, #7
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	230f      	movs	r3, #15
 8003d7e:	400b      	ands	r3, r1
 8003d80:	3b08      	subs	r3, #8
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	3306      	adds	r3, #6
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1dfa      	adds	r2, r7, #7
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	0011      	movs	r1, r2
 8003d94:	2203      	movs	r2, #3
 8003d96:	400a      	ands	r2, r1
 8003d98:	00d2      	lsls	r2, r2, #3
 8003d9a:	21ff      	movs	r1, #255	; 0xff
 8003d9c:	4091      	lsls	r1, r2
 8003d9e:	000a      	movs	r2, r1
 8003da0:	43d2      	mvns	r2, r2
 8003da2:	401a      	ands	r2, r3
 8003da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	019b      	lsls	r3, r3, #6
 8003daa:	22ff      	movs	r2, #255	; 0xff
 8003dac:	401a      	ands	r2, r3
 8003dae:	1dfb      	adds	r3, r7, #7
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	0018      	movs	r0, r3
 8003db4:	2303      	movs	r3, #3
 8003db6:	4003      	ands	r3, r0
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dbc:	4809      	ldr	r0, [pc, #36]	; (8003de4 <__NVIC_SetPriority+0xd8>)
 8003dbe:	1dfb      	adds	r3, r7, #7
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	001c      	movs	r4, r3
 8003dc4:	230f      	movs	r3, #15
 8003dc6:	4023      	ands	r3, r4
 8003dc8:	3b08      	subs	r3, #8
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	3306      	adds	r3, #6
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	18c3      	adds	r3, r0, r3
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	601a      	str	r2, [r3, #0]
}
 8003dd8:	46c0      	nop			; (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b003      	add	sp, #12
 8003dde:	bd90      	pop	{r4, r7, pc}
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <SysTick_Config+0x40>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e010      	b.n	8003e20 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <SysTick_Config+0x44>)
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	3a01      	subs	r2, #1
 8003e04:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e06:	2301      	movs	r3, #1
 8003e08:	425b      	negs	r3, r3
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7ff ff7d 	bl	8003d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <SysTick_Config+0x44>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <SysTick_Config+0x44>)
 8003e1a:	2207      	movs	r2, #7
 8003e1c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b002      	add	sp, #8
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	00ffffff 	.word	0x00ffffff
 8003e2c:	e000e010 	.word	0xe000e010

08003e30 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	210f      	movs	r1, #15
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	1c02      	adds	r2, r0, #0
 8003e40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	187b      	adds	r3, r7, r1
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	b25b      	sxtb	r3, r3
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7ff ff5d 	bl	8003d0c <__NVIC_SetPriority>
}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b004      	add	sp, #16
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	0002      	movs	r2, r0
 8003e62:	1dfb      	adds	r3, r7, #7
 8003e64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e66:	1dfb      	adds	r3, r7, #7
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	b25b      	sxtb	r3, r3
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7ff ff33 	bl	8003cd8 <__NVIC_EnableIRQ>
}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b002      	add	sp, #8
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7ff ffaf 	bl	8003de8 <SysTick_Config>
 8003e8a:	0003      	movs	r3, r0
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b002      	add	sp, #8
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e077      	b.n	8003f96 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a3d      	ldr	r2, [pc, #244]	; (8003fa0 <HAL_DMA_Init+0x10c>)
 8003eac:	4694      	mov	ip, r2
 8003eae:	4463      	add	r3, ip
 8003eb0:	2114      	movs	r1, #20
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7fc f926 	bl	8000104 <__udivsi3>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	009a      	lsls	r2, r3, #2
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2225      	movs	r2, #37	; 0x25
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4934      	ldr	r1, [pc, #208]	; (8003fa4 <HAL_DMA_Init+0x110>)
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	0018      	movs	r0, r3
 8003f12:	f000 f9c3 	bl	800429c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	01db      	lsls	r3, r3, #7
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d102      	bne.n	8003f28 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	21ff      	movs	r1, #255	; 0xff
 8003f32:	400a      	ands	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d011      	beq.n	8003f6c <HAL_DMA_Init+0xd8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d80d      	bhi.n	8003f6c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	0018      	movs	r0, r3
 8003f54:	f000 f9ce 	bl	80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	e008      	b.n	8003f7e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2225      	movs	r2, #37	; 0x25
 8003f88:	2101      	movs	r1, #1
 8003f8a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	2100      	movs	r1, #0
 8003f92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	0018      	movs	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b002      	add	sp, #8
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	bffdfff8 	.word	0xbffdfff8
 8003fa4:	ffff800f 	.word	0xffff800f

08003fa8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb6:	2317      	movs	r3, #23
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2224      	movs	r2, #36	; 0x24
 8003fc2:	5c9b      	ldrb	r3, [r3, r2]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_DMA_Start_IT+0x24>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e070      	b.n	80040ae <HAL_DMA_Start_IT+0x106>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2224      	movs	r2, #36	; 0x24
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2225      	movs	r2, #37	; 0x25
 8003fd8:	5c9b      	ldrb	r3, [r3, r2]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d157      	bne.n	8004090 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2225      	movs	r2, #37	; 0x25
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	438a      	bics	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f909 	bl	800421c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	210e      	movs	r1, #14
 800401e:	430a      	orrs	r2, r1
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e00f      	b.n	8004044 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2104      	movs	r1, #4
 8004030:	438a      	bics	r2, r1
 8004032:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	210a      	movs	r1, #10
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	025b      	lsls	r3, r3, #9
 800404e:	4013      	ands	r3, r2
 8004050:	d008      	beq.n	8004064 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	0049      	lsls	r1, r1, #1
 8004060:	430a      	orrs	r2, r1
 8004062:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	2180      	movs	r1, #128	; 0x80
 8004078:	0049      	lsls	r1, r1, #1
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2101      	movs	r1, #1
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	e007      	b.n	80040a0 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2224      	movs	r2, #36	; 0x24
 8004094:	2100      	movs	r1, #0
 8004096:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004098:	2317      	movs	r3, #23
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	2202      	movs	r2, #2
 800409e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2224      	movs	r2, #36	; 0x24
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]

  return status;
 80040a8:	2317      	movs	r3, #23
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b006      	add	sp, #24
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80040c0:	4b55      	ldr	r3, [pc, #340]	; (8004218 <HAL_DMA_IRQHandler+0x160>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	221c      	movs	r2, #28
 80040d4:	4013      	ands	r3, r2
 80040d6:	2204      	movs	r2, #4
 80040d8:	409a      	lsls	r2, r3
 80040da:	0013      	movs	r3, r2
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4013      	ands	r3, r2
 80040e0:	d027      	beq.n	8004132 <HAL_DMA_IRQHandler+0x7a>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2204      	movs	r2, #4
 80040e6:	4013      	ands	r3, r2
 80040e8:	d023      	beq.n	8004132 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2220      	movs	r2, #32
 80040f2:	4013      	ands	r3, r2
 80040f4:	d107      	bne.n	8004106 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2104      	movs	r1, #4
 8004102:	438a      	bics	r2, r1
 8004104:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8004106:	4b44      	ldr	r3, [pc, #272]	; (8004218 <HAL_DMA_IRQHandler+0x160>)
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	221c      	movs	r2, #28
 8004110:	4013      	ands	r3, r2
 8004112:	2204      	movs	r2, #4
 8004114:	409a      	lsls	r2, r3
 8004116:	4b40      	ldr	r3, [pc, #256]	; (8004218 <HAL_DMA_IRQHandler+0x160>)
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	2b00      	cmp	r3, #0
 8004122:	d100      	bne.n	8004126 <HAL_DMA_IRQHandler+0x6e>
 8004124:	e073      	b.n	800420e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	0010      	movs	r0, r2
 800412e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004130:	e06d      	b.n	800420e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	221c      	movs	r2, #28
 8004138:	4013      	ands	r3, r2
 800413a:	2202      	movs	r2, #2
 800413c:	409a      	lsls	r2, r3
 800413e:	0013      	movs	r3, r2
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4013      	ands	r3, r2
 8004144:	d02e      	beq.n	80041a4 <HAL_DMA_IRQHandler+0xec>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2202      	movs	r2, #2
 800414a:	4013      	ands	r3, r2
 800414c:	d02a      	beq.n	80041a4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2220      	movs	r2, #32
 8004156:	4013      	ands	r3, r2
 8004158:	d10b      	bne.n	8004172 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	210a      	movs	r1, #10
 8004166:	438a      	bics	r2, r1
 8004168:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2225      	movs	r2, #37	; 0x25
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8004172:	4b29      	ldr	r3, [pc, #164]	; (8004218 <HAL_DMA_IRQHandler+0x160>)
 8004174:	6859      	ldr	r1, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	221c      	movs	r2, #28
 800417c:	4013      	ands	r3, r2
 800417e:	2202      	movs	r2, #2
 8004180:	409a      	lsls	r2, r3
 8004182:	4b25      	ldr	r3, [pc, #148]	; (8004218 <HAL_DMA_IRQHandler+0x160>)
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2224      	movs	r2, #36	; 0x24
 800418c:	2100      	movs	r1, #0
 800418e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d03a      	beq.n	800420e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	0010      	movs	r0, r2
 80041a0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041a2:	e034      	b.n	800420e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	221c      	movs	r2, #28
 80041aa:	4013      	ands	r3, r2
 80041ac:	2208      	movs	r2, #8
 80041ae:	409a      	lsls	r2, r3
 80041b0:	0013      	movs	r3, r2
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4013      	ands	r3, r2
 80041b6:	d02b      	beq.n	8004210 <HAL_DMA_IRQHandler+0x158>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2208      	movs	r2, #8
 80041bc:	4013      	ands	r3, r2
 80041be:	d027      	beq.n	8004210 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	210e      	movs	r1, #14
 80041cc:	438a      	bics	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 80041d0:	4b11      	ldr	r3, [pc, #68]	; (8004218 <HAL_DMA_IRQHandler+0x160>)
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	221c      	movs	r2, #28
 80041da:	4013      	ands	r3, r2
 80041dc:	2201      	movs	r2, #1
 80041de:	409a      	lsls	r2, r3
 80041e0:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <HAL_DMA_IRQHandler+0x160>)
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2225      	movs	r2, #37	; 0x25
 80041f0:	2101      	movs	r1, #1
 80041f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2224      	movs	r2, #36	; 0x24
 80041f8:	2100      	movs	r1, #0
 80041fa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	0010      	movs	r0, r2
 800420c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	46c0      	nop			; (mov r8, r8)
}
 8004212:	46bd      	mov	sp, r7
 8004214:	b004      	add	sp, #16
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40020000 	.word	0x40020000

0800421c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004232:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004238:	2b00      	cmp	r3, #0
 800423a:	d004      	beq.n	8004246 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004244:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <DMA_SetConfig+0x7c>)
 8004248:	6859      	ldr	r1, [r3, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	221c      	movs	r2, #28
 8004250:	4013      	ands	r3, r2
 8004252:	2201      	movs	r2, #1
 8004254:	409a      	lsls	r2, r3
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <DMA_SetConfig+0x7c>)
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b10      	cmp	r3, #16
 800426a:	d108      	bne.n	800427e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800427c:	e007      	b.n	800428e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]
}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	b004      	add	sp, #16
 8004294:	bd80      	pop	{r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	40020000 	.word	0x40020000

0800429c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	001a      	movs	r2, r3
 80042aa:	23ff      	movs	r3, #255	; 0xff
 80042ac:	4013      	ands	r3, r2
 80042ae:	3b08      	subs	r3, #8
 80042b0:	2114      	movs	r1, #20
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7fb ff26 	bl	8000104 <__udivsi3>
 80042b8:	0003      	movs	r3, r0
 80042ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	089b      	lsrs	r3, r3, #2
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80042c4:	4694      	mov	ip, r2
 80042c6:	4463      	add	r3, ip
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	001a      	movs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80042d4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	221c      	movs	r2, #28
 80042da:	4013      	ands	r3, r2
 80042dc:	2201      	movs	r2, #1
 80042de:	409a      	lsls	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	10008200 	.word	0x10008200
 80042f0:	40020880 	.word	0x40020880

080042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	22ff      	movs	r2, #255	; 0xff
 8004302:	4013      	ands	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800430a:	4694      	mov	ip, r2
 800430c:	4463      	add	r3, ip
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	001a      	movs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a07      	ldr	r2, [pc, #28]	; (8004338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800431a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3b01      	subs	r3, #1
 8004320:	2203      	movs	r2, #3
 8004322:	4013      	ands	r3, r2
 8004324:	2201      	movs	r2, #1
 8004326:	409a      	lsls	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b004      	add	sp, #16
 8004332:	bd80      	pop	{r7, pc}
 8004334:	1000823f 	.word	0x1000823f
 8004338:	40020940 	.word	0x40020940

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800434a:	e147      	b.n	80045dc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4091      	lsls	r1, r2
 8004356:	000a      	movs	r2, r1
 8004358:	4013      	ands	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d100      	bne.n	8004364 <HAL_GPIO_Init+0x28>
 8004362:	e138      	b.n	80045d6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x38>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b12      	cmp	r3, #18
 8004372:	d123      	bne.n	80043bc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	08da      	lsrs	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3208      	adds	r2, #8
 800437c:	0092      	lsls	r2, r2, #2
 800437e:	58d3      	ldr	r3, [r2, r3]
 8004380:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2207      	movs	r2, #7
 8004386:	4013      	ands	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	220f      	movs	r2, #15
 800438c:	409a      	lsls	r2, r3
 800438e:	0013      	movs	r3, r2
 8004390:	43da      	mvns	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2107      	movs	r1, #7
 80043a0:	400b      	ands	r3, r1
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	409a      	lsls	r2, r3
 80043a6:	0013      	movs	r3, r2
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	08da      	lsrs	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3208      	adds	r2, #8
 80043b6:	0092      	lsls	r2, r2, #2
 80043b8:	6939      	ldr	r1, [r7, #16]
 80043ba:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	2203      	movs	r2, #3
 80043c8:	409a      	lsls	r2, r3
 80043ca:	0013      	movs	r3, r2
 80043cc:	43da      	mvns	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2203      	movs	r2, #3
 80043da:	401a      	ands	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	409a      	lsls	r2, r3
 80043e2:	0013      	movs	r3, r2
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d00b      	beq.n	8004410 <HAL_GPIO_Init+0xd4>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d007      	beq.n	8004410 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004404:	2b11      	cmp	r3, #17
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b12      	cmp	r3, #18
 800440e:	d130      	bne.n	8004472 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	409a      	lsls	r2, r3
 800441e:	0013      	movs	r3, r2
 8004420:	43da      	mvns	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	409a      	lsls	r2, r3
 8004432:	0013      	movs	r3, r2
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004446:	2201      	movs	r2, #1
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	409a      	lsls	r2, r3
 800444c:	0013      	movs	r3, r2
 800444e:	43da      	mvns	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	2201      	movs	r2, #1
 800445e:	401a      	ands	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	409a      	lsls	r2, r3
 8004464:	0013      	movs	r3, r2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	2203      	movs	r2, #3
 800447e:	409a      	lsls	r2, r3
 8004480:	0013      	movs	r3, r2
 8004482:	43da      	mvns	r2, r3
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	409a      	lsls	r2, r3
 8004494:	0013      	movs	r3, r2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	055b      	lsls	r3, r3, #21
 80044aa:	4013      	ands	r3, r2
 80044ac:	d100      	bne.n	80044b0 <HAL_GPIO_Init+0x174>
 80044ae:	e092      	b.n	80045d6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80044b0:	4a50      	ldr	r2, [pc, #320]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	089b      	lsrs	r3, r3, #2
 80044b6:	3318      	adds	r3, #24
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	589b      	ldr	r3, [r3, r2]
 80044bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2203      	movs	r2, #3
 80044c2:	4013      	ands	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	220f      	movs	r2, #15
 80044c8:	409a      	lsls	r2, r3
 80044ca:	0013      	movs	r3, r2
 80044cc:	43da      	mvns	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	23a0      	movs	r3, #160	; 0xa0
 80044d8:	05db      	lsls	r3, r3, #23
 80044da:	429a      	cmp	r2, r3
 80044dc:	d013      	beq.n	8004506 <HAL_GPIO_Init+0x1ca>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a45      	ldr	r2, [pc, #276]	; (80045f8 <HAL_GPIO_Init+0x2bc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00d      	beq.n	8004502 <HAL_GPIO_Init+0x1c6>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a44      	ldr	r2, [pc, #272]	; (80045fc <HAL_GPIO_Init+0x2c0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <HAL_GPIO_Init+0x1c2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a43      	ldr	r2, [pc, #268]	; (8004600 <HAL_GPIO_Init+0x2c4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_GPIO_Init+0x1be>
 80044f6:	2303      	movs	r3, #3
 80044f8:	e006      	b.n	8004508 <HAL_GPIO_Init+0x1cc>
 80044fa:	2305      	movs	r3, #5
 80044fc:	e004      	b.n	8004508 <HAL_GPIO_Init+0x1cc>
 80044fe:	2302      	movs	r3, #2
 8004500:	e002      	b.n	8004508 <HAL_GPIO_Init+0x1cc>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_GPIO_Init+0x1cc>
 8004506:	2300      	movs	r3, #0
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	2103      	movs	r1, #3
 800450c:	400a      	ands	r2, r1
 800450e:	00d2      	lsls	r2, r2, #3
 8004510:	4093      	lsls	r3, r2
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004518:	4936      	ldr	r1, [pc, #216]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	3318      	adds	r3, #24
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004526:	4a33      	ldr	r2, [pc, #204]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	58d3      	ldr	r3, [r2, r3]
 800452c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	43da      	mvns	r2, r3
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	025b      	lsls	r3, r3, #9
 8004540:	4013      	ands	r3, r2
 8004542:	d003      	beq.n	800454c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800454c:	4929      	ldr	r1, [pc, #164]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 800454e:	2280      	movs	r2, #128	; 0x80
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004554:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 8004556:	2384      	movs	r3, #132	; 0x84
 8004558:	58d3      	ldr	r3, [r2, r3]
 800455a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	43da      	mvns	r2, r3
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	029b      	lsls	r3, r3, #10
 800456e:	4013      	ands	r3, r2
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800457a:	491e      	ldr	r1, [pc, #120]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 800457c:	2284      	movs	r2, #132	; 0x84
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004582:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	43da      	mvns	r2, r3
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	035b      	lsls	r3, r3, #13
 800459a:	4013      	ands	r3, r2
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045a6:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	43da      	mvns	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	2380      	movs	r3, #128	; 0x80
 80045c2:	039b      	lsls	r3, r3, #14
 80045c4:	4013      	ands	r3, r2
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	40da      	lsrs	r2, r3
 80045e4:	1e13      	subs	r3, r2, #0
 80045e6:	d000      	beq.n	80045ea <HAL_GPIO_Init+0x2ae>
 80045e8:	e6b0      	b.n	800434c <HAL_GPIO_Init+0x10>
  }
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b006      	add	sp, #24
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	40021800 	.word	0x40021800
 80045f8:	50000400 	.word	0x50000400
 80045fc:	50000800 	.word	0x50000800
 8004600:	50000c00 	.word	0x50000c00

08004604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	0008      	movs	r0, r1
 800460e:	0011      	movs	r1, r2
 8004610:	1cbb      	adds	r3, r7, #2
 8004612:	1c02      	adds	r2, r0, #0
 8004614:	801a      	strh	r2, [r3, #0]
 8004616:	1c7b      	adds	r3, r7, #1
 8004618:	1c0a      	adds	r2, r1, #0
 800461a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800461c:	1c7b      	adds	r3, r7, #1
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004624:	1cbb      	adds	r3, r7, #2
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800462c:	e003      	b.n	8004636 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800462e:	1cbb      	adds	r3, r7, #2
 8004630:	881a      	ldrh	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b002      	add	sp, #8
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e082      	b.n	8004758 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2241      	movs	r2, #65	; 0x41
 8004656:	5c9b      	ldrb	r3, [r3, r2]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d107      	bne.n	800466e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2240      	movs	r2, #64	; 0x40
 8004662:	2100      	movs	r1, #0
 8004664:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	0018      	movs	r0, r3
 800466a:	f7fe f801 	bl	8002670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2241      	movs	r2, #65	; 0x41
 8004672:	2124      	movs	r1, #36	; 0x24
 8004674:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2101      	movs	r1, #1
 8004682:	438a      	bics	r2, r1
 8004684:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4934      	ldr	r1, [pc, #208]	; (8004760 <HAL_I2C_Init+0x120>)
 8004690:	400a      	ands	r2, r1
 8004692:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4931      	ldr	r1, [pc, #196]	; (8004764 <HAL_I2C_Init+0x124>)
 80046a0:	400a      	ands	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d108      	bne.n	80046be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2180      	movs	r1, #128	; 0x80
 80046b6:	0209      	lsls	r1, r1, #8
 80046b8:	430a      	orrs	r2, r1
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	e007      	b.n	80046ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2184      	movs	r1, #132	; 0x84
 80046c8:	0209      	lsls	r1, r1, #8
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d104      	bne.n	80046e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2280      	movs	r2, #128	; 0x80
 80046dc:	0112      	lsls	r2, r2, #4
 80046de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	491f      	ldr	r1, [pc, #124]	; (8004768 <HAL_I2C_Init+0x128>)
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	491a      	ldr	r1, [pc, #104]	; (8004764 <HAL_I2C_Init+0x124>)
 80046fc:	400a      	ands	r2, r1
 80046fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	431a      	orrs	r2, r3
 800470a:	0011      	movs	r1, r2
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	021a      	lsls	r2, r3, #8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69d9      	ldr	r1, [r3, #28]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1a      	ldr	r2, [r3, #32]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2241      	movs	r2, #65	; 0x41
 8004744:	2120      	movs	r1, #32
 8004746:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2242      	movs	r2, #66	; 0x42
 8004752:	2100      	movs	r1, #0
 8004754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	b002      	add	sp, #8
 800475e:	bd80      	pop	{r7, pc}
 8004760:	f0ffffff 	.word	0xf0ffffff
 8004764:	ffff7fff 	.word	0xffff7fff
 8004768:	02008000 	.word	0x02008000

0800476c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2241      	movs	r2, #65	; 0x41
 800477a:	5c9b      	ldrb	r3, [r3, r2]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b20      	cmp	r3, #32
 8004780:	d138      	bne.n	80047f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2240      	movs	r2, #64	; 0x40
 8004786:	5c9b      	ldrb	r3, [r3, r2]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800478c:	2302      	movs	r3, #2
 800478e:	e032      	b.n	80047f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2240      	movs	r2, #64	; 0x40
 8004794:	2101      	movs	r1, #1
 8004796:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2241      	movs	r2, #65	; 0x41
 800479c:	2124      	movs	r1, #36	; 0x24
 800479e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2101      	movs	r1, #1
 80047ac:	438a      	bics	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4911      	ldr	r1, [pc, #68]	; (8004800 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80047bc:	400a      	ands	r2, r1
 80047be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6819      	ldr	r1, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2101      	movs	r1, #1
 80047dc:	430a      	orrs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2241      	movs	r2, #65	; 0x41
 80047e4:	2120      	movs	r1, #32
 80047e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2240      	movs	r2, #64	; 0x40
 80047ec:	2100      	movs	r1, #0
 80047ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e000      	b.n	80047f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
  }
}
 80047f6:	0018      	movs	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b002      	add	sp, #8
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	ffffefff 	.word	0xffffefff

08004804 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2241      	movs	r2, #65	; 0x41
 8004812:	5c9b      	ldrb	r3, [r3, r2]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b20      	cmp	r3, #32
 8004818:	d139      	bne.n	800488e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2240      	movs	r2, #64	; 0x40
 800481e:	5c9b      	ldrb	r3, [r3, r2]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004824:	2302      	movs	r3, #2
 8004826:	e033      	b.n	8004890 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2240      	movs	r2, #64	; 0x40
 800482c:	2101      	movs	r1, #1
 800482e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2241      	movs	r2, #65	; 0x41
 8004834:	2124      	movs	r1, #36	; 0x24
 8004836:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2101      	movs	r1, #1
 8004844:	438a      	bics	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a11      	ldr	r2, [pc, #68]	; (8004898 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004854:	4013      	ands	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	021b      	lsls	r3, r3, #8
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	430a      	orrs	r2, r1
 8004878:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2241      	movs	r2, #65	; 0x41
 800487e:	2120      	movs	r1, #32
 8004880:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2240      	movs	r2, #64	; 0x40
 8004886:	2100      	movs	r1, #0
 8004888:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e000      	b.n	8004890 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
  }
}
 8004890:	0018      	movs	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	b004      	add	sp, #16
 8004896:	bd80      	pop	{r7, pc}
 8004898:	fffff0ff 	.word	0xfffff0ff

0800489c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a19      	ldr	r2, [pc, #100]	; (8004910 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	0019      	movs	r1, r3
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	429a      	cmp	r2, r3
 80048be:	d11f      	bne.n	8004900 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80048c0:	4b14      	ldr	r3, [pc, #80]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	0013      	movs	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	189b      	adds	r3, r3, r2
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	4912      	ldr	r1, [pc, #72]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80048ce:	0018      	movs	r0, r3
 80048d0:	f7fb fc18 	bl	8000104 <__udivsi3>
 80048d4:	0003      	movs	r3, r0
 80048d6:	3301      	adds	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048da:	e008      	b.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e001      	b.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e009      	b.n	8004902 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	401a      	ands	r2, r3
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d0ed      	beq.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	0018      	movs	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	b004      	add	sp, #16
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	40007000 	.word	0x40007000
 8004910:	fffff9ff 	.word	0xfffff9ff
 8004914:	20000000 	.word	0x20000000
 8004918:	000f4240 	.word	0x000f4240

0800491c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	23e0      	movs	r3, #224	; 0xe0
 8004926:	01db      	lsls	r3, r3, #7
 8004928:	4013      	ands	r3, r2
}
 800492a:	0018      	movs	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000

08004934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e304      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2201      	movs	r2, #1
 800494c:	4013      	ands	r3, r2
 800494e:	d100      	bne.n	8004952 <HAL_RCC_OscConfig+0x1e>
 8004950:	e07c      	b.n	8004a4c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004952:	4bc3      	ldr	r3, [pc, #780]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2238      	movs	r2, #56	; 0x38
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800495c:	4bc0      	ldr	r3, [pc, #768]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2203      	movs	r2, #3
 8004962:	4013      	ands	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b10      	cmp	r3, #16
 800496a:	d102      	bne.n	8004972 <HAL_RCC_OscConfig+0x3e>
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b03      	cmp	r3, #3
 8004970:	d002      	beq.n	8004978 <HAL_RCC_OscConfig+0x44>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b08      	cmp	r3, #8
 8004976:	d10b      	bne.n	8004990 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004978:	4bb9      	ldr	r3, [pc, #740]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	029b      	lsls	r3, r3, #10
 8004980:	4013      	ands	r3, r2
 8004982:	d062      	beq.n	8004a4a <HAL_RCC_OscConfig+0x116>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d15e      	bne.n	8004a4a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e2df      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	2380      	movs	r3, #128	; 0x80
 8004996:	025b      	lsls	r3, r3, #9
 8004998:	429a      	cmp	r2, r3
 800499a:	d107      	bne.n	80049ac <HAL_RCC_OscConfig+0x78>
 800499c:	4bb0      	ldr	r3, [pc, #704]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4baf      	ldr	r3, [pc, #700]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 80049a2:	2180      	movs	r1, #128	; 0x80
 80049a4:	0249      	lsls	r1, r1, #9
 80049a6:	430a      	orrs	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e020      	b.n	80049ee <HAL_RCC_OscConfig+0xba>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	23a0      	movs	r3, #160	; 0xa0
 80049b2:	02db      	lsls	r3, r3, #11
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d10e      	bne.n	80049d6 <HAL_RCC_OscConfig+0xa2>
 80049b8:	4ba9      	ldr	r3, [pc, #676]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4ba8      	ldr	r3, [pc, #672]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 80049be:	2180      	movs	r1, #128	; 0x80
 80049c0:	02c9      	lsls	r1, r1, #11
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	4ba6      	ldr	r3, [pc, #664]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4ba5      	ldr	r3, [pc, #660]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	0249      	lsls	r1, r1, #9
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e00b      	b.n	80049ee <HAL_RCC_OscConfig+0xba>
 80049d6:	4ba2      	ldr	r3, [pc, #648]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4ba1      	ldr	r3, [pc, #644]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 80049dc:	49a1      	ldr	r1, [pc, #644]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 80049de:	400a      	ands	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	4b9f      	ldr	r3, [pc, #636]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	4b9e      	ldr	r3, [pc, #632]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 80049e8:	499f      	ldr	r1, [pc, #636]	; (8004c68 <HAL_RCC_OscConfig+0x334>)
 80049ea:	400a      	ands	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d014      	beq.n	8004a20 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fe fcb1 	bl	800335c <HAL_GetTick>
 80049fa:	0003      	movs	r3, r0
 80049fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fe fcac 	bl	800335c <HAL_GetTick>
 8004a04:	0002      	movs	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e29e      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a12:	4b93      	ldr	r3, [pc, #588]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	2380      	movs	r3, #128	; 0x80
 8004a18:	029b      	lsls	r3, r3, #10
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0xcc>
 8004a1e:	e015      	b.n	8004a4c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fe fc9c 	bl	800335c <HAL_GetTick>
 8004a24:	0003      	movs	r3, r0
 8004a26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2a:	f7fe fc97 	bl	800335c <HAL_GetTick>
 8004a2e:	0002      	movs	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b64      	cmp	r3, #100	; 0x64
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e289      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a3c:	4b88      	ldr	r3, [pc, #544]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	029b      	lsls	r3, r3, #10
 8004a44:	4013      	ands	r3, r2
 8004a46:	d1f0      	bne.n	8004a2a <HAL_RCC_OscConfig+0xf6>
 8004a48:	e000      	b.n	8004a4c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2202      	movs	r2, #2
 8004a52:	4013      	ands	r3, r2
 8004a54:	d100      	bne.n	8004a58 <HAL_RCC_OscConfig+0x124>
 8004a56:	e099      	b.n	8004b8c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a58:	4b81      	ldr	r3, [pc, #516]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2238      	movs	r2, #56	; 0x38
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a62:	4b7f      	ldr	r3, [pc, #508]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2203      	movs	r2, #3
 8004a68:	4013      	ands	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d102      	bne.n	8004a78 <HAL_RCC_OscConfig+0x144>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d002      	beq.n	8004a7e <HAL_RCC_OscConfig+0x14a>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d135      	bne.n	8004aea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a7e:	4b78      	ldr	r3, [pc, #480]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	2380      	movs	r3, #128	; 0x80
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4013      	ands	r3, r2
 8004a88:	d005      	beq.n	8004a96 <HAL_RCC_OscConfig+0x162>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e25c      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a96:	4b72      	ldr	r3, [pc, #456]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4a74      	ldr	r2, [pc, #464]	; (8004c6c <HAL_RCC_OscConfig+0x338>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	021a      	lsls	r2, r3, #8
 8004aa6:	4b6e      	ldr	r3, [pc, #440]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d112      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ab2:	4b6b      	ldr	r3, [pc, #428]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a6e      	ldr	r2, [pc, #440]	; (8004c70 <HAL_RCC_OscConfig+0x33c>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	0019      	movs	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	4b67      	ldr	r3, [pc, #412]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004ac6:	4b66      	ldr	r3, [pc, #408]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	0adb      	lsrs	r3, r3, #11
 8004acc:	2207      	movs	r2, #7
 8004ace:	4013      	ands	r3, r2
 8004ad0:	4a68      	ldr	r2, [pc, #416]	; (8004c74 <HAL_RCC_OscConfig+0x340>)
 8004ad2:	40da      	lsrs	r2, r3
 8004ad4:	4b68      	ldr	r3, [pc, #416]	; (8004c78 <HAL_RCC_OscConfig+0x344>)
 8004ad6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ad8:	4b68      	ldr	r3, [pc, #416]	; (8004c7c <HAL_RCC_OscConfig+0x348>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7fe fbe3 	bl	80032a8 <HAL_InitTick>
 8004ae2:	1e03      	subs	r3, r0, #0
 8004ae4:	d051      	beq.n	8004b8a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e232      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d030      	beq.n	8004b54 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004af2:	4b5b      	ldr	r3, [pc, #364]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a5e      	ldr	r2, [pc, #376]	; (8004c70 <HAL_RCC_OscConfig+0x33c>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	0019      	movs	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	4b57      	ldr	r3, [pc, #348]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004b02:	430a      	orrs	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004b06:	4b56      	ldr	r3, [pc, #344]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b55      	ldr	r3, [pc, #340]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004b0c:	2180      	movs	r1, #128	; 0x80
 8004b0e:	0049      	lsls	r1, r1, #1
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fe fc22 	bl	800335c <HAL_GetTick>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fe fc1d 	bl	800335c <HAL_GetTick>
 8004b22:	0002      	movs	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e20f      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b30:	4b4b      	ldr	r3, [pc, #300]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3c:	4b48      	ldr	r3, [pc, #288]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a4a      	ldr	r2, [pc, #296]	; (8004c6c <HAL_RCC_OscConfig+0x338>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	0019      	movs	r1, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	4b44      	ldr	r3, [pc, #272]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	e01b      	b.n	8004b8c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004b54:	4b42      	ldr	r3, [pc, #264]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b41      	ldr	r3, [pc, #260]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004b5a:	4949      	ldr	r1, [pc, #292]	; (8004c80 <HAL_RCC_OscConfig+0x34c>)
 8004b5c:	400a      	ands	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fe fbfc 	bl	800335c <HAL_GetTick>
 8004b64:	0003      	movs	r3, r0
 8004b66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fe fbf7 	bl	800335c <HAL_GetTick>
 8004b6e:	0002      	movs	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e1e9      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b7c:	4b38      	ldr	r3, [pc, #224]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4013      	ands	r3, r2
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0x236>
 8004b88:	e000      	b.n	8004b8c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2208      	movs	r2, #8
 8004b92:	4013      	ands	r3, r2
 8004b94:	d047      	beq.n	8004c26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004b96:	4b32      	ldr	r3, [pc, #200]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2238      	movs	r2, #56	; 0x38
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b18      	cmp	r3, #24
 8004ba0:	d10a      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004ba2:	4b2f      	ldr	r3, [pc, #188]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d03c      	beq.n	8004c26 <HAL_RCC_OscConfig+0x2f2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d138      	bne.n	8004c26 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e1cb      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d019      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004bc0:	4b27      	ldr	r3, [pc, #156]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004bc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bc4:	4b26      	ldr	r3, [pc, #152]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fe fbc6 	bl	800335c <HAL_GetTick>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd6:	f7fe fbc1 	bl	800335c <HAL_GetTick>
 8004bda:	0002      	movs	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e1b3      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004be8:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bec:	2202      	movs	r2, #2
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d0f1      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x2a2>
 8004bf2:	e018      	b.n	8004c26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004bf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	438a      	bics	r2, r1
 8004bfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fe fbac 	bl	800335c <HAL_GetTick>
 8004c04:	0003      	movs	r3, r0
 8004c06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0a:	f7fe fba7 	bl	800335c <HAL_GetTick>
 8004c0e:	0002      	movs	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e199      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c1c:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c20:	2202      	movs	r2, #2
 8004c22:	4013      	ands	r3, r2
 8004c24:	d1f1      	bne.n	8004c0a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d100      	bne.n	8004c32 <HAL_RCC_OscConfig+0x2fe>
 8004c30:	e0c6      	b.n	8004dc0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c32:	231f      	movs	r3, #31
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2238      	movs	r2, #56	; 0x38
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d11e      	bne.n	8004c84 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004c46:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_RCC_OscConfig+0x32c>)
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <HAL_RCC_OscConfig+0x31e>
 8004c50:	e0b6      	b.n	8004dc0 <HAL_RCC_OscConfig+0x48c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d000      	beq.n	8004c5c <HAL_RCC_OscConfig+0x328>
 8004c5a:	e0b1      	b.n	8004dc0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e177      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
 8004c60:	40021000 	.word	0x40021000
 8004c64:	fffeffff 	.word	0xfffeffff
 8004c68:	fffbffff 	.word	0xfffbffff
 8004c6c:	ffff80ff 	.word	0xffff80ff
 8004c70:	ffffc7ff 	.word	0xffffc7ff
 8004c74:	00f42400 	.word	0x00f42400
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	20000004 	.word	0x20000004
 8004c80:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c84:	4bb4      	ldr	r3, [pc, #720]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	055b      	lsls	r3, r3, #21
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_OscConfig+0x360>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x362>
 8004c94:	2300      	movs	r3, #0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d011      	beq.n	8004cbe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c9a:	4baf      	ldr	r3, [pc, #700]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c9e:	4bae      	ldr	r3, [pc, #696]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004ca0:	2180      	movs	r1, #128	; 0x80
 8004ca2:	0549      	lsls	r1, r1, #21
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ca8:	4bab      	ldr	r3, [pc, #684]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	055b      	lsls	r3, r3, #21
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004cb6:	231f      	movs	r3, #31
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbe:	4ba7      	ldr	r3, [pc, #668]	; (8004f5c <HAL_RCC_OscConfig+0x628>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d11a      	bne.n	8004d00 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cca:	4ba4      	ldr	r3, [pc, #656]	; (8004f5c <HAL_RCC_OscConfig+0x628>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4ba3      	ldr	r3, [pc, #652]	; (8004f5c <HAL_RCC_OscConfig+0x628>)
 8004cd0:	2180      	movs	r1, #128	; 0x80
 8004cd2:	0049      	lsls	r1, r1, #1
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004cd8:	f7fe fb40 	bl	800335c <HAL_GetTick>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce2:	f7fe fb3b 	bl	800335c <HAL_GetTick>
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e12d      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf4:	4b99      	ldr	r3, [pc, #612]	; (8004f5c <HAL_RCC_OscConfig+0x628>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d106      	bne.n	8004d16 <HAL_RCC_OscConfig+0x3e2>
 8004d08:	4b93      	ldr	r3, [pc, #588]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d0c:	4b92      	ldr	r3, [pc, #584]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d0e:	2101      	movs	r1, #1
 8004d10:	430a      	orrs	r2, r1
 8004d12:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d14:	e01c      	b.n	8004d50 <HAL_RCC_OscConfig+0x41c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCC_OscConfig+0x404>
 8004d1e:	4b8e      	ldr	r3, [pc, #568]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d22:	4b8d      	ldr	r3, [pc, #564]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d24:	2104      	movs	r1, #4
 8004d26:	430a      	orrs	r2, r1
 8004d28:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d2a:	4b8b      	ldr	r3, [pc, #556]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d2e:	4b8a      	ldr	r3, [pc, #552]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d30:	2101      	movs	r1, #1
 8004d32:	430a      	orrs	r2, r1
 8004d34:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d36:	e00b      	b.n	8004d50 <HAL_RCC_OscConfig+0x41c>
 8004d38:	4b87      	ldr	r3, [pc, #540]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d3c:	4b86      	ldr	r3, [pc, #536]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d3e:	2101      	movs	r1, #1
 8004d40:	438a      	bics	r2, r1
 8004d42:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d44:	4b84      	ldr	r3, [pc, #528]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d48:	4b83      	ldr	r3, [pc, #524]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d4a:	2104      	movs	r1, #4
 8004d4c:	438a      	bics	r2, r1
 8004d4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d014      	beq.n	8004d82 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fe fb00 	bl	800335c <HAL_GetTick>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d60:	e009      	b.n	8004d76 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d62:	f7fe fafb 	bl	800335c <HAL_GetTick>
 8004d66:	0002      	movs	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	4a7c      	ldr	r2, [pc, #496]	; (8004f60 <HAL_RCC_OscConfig+0x62c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e0ec      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d76:	4b78      	ldr	r3, [pc, #480]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x42e>
 8004d80:	e013      	b.n	8004daa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fe faeb 	bl	800335c <HAL_GetTick>
 8004d86:	0003      	movs	r3, r0
 8004d88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d8a:	e009      	b.n	8004da0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8c:	f7fe fae6 	bl	800335c <HAL_GetTick>
 8004d90:	0002      	movs	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	4a72      	ldr	r2, [pc, #456]	; (8004f60 <HAL_RCC_OscConfig+0x62c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e0d7      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da0:	4b6d      	ldr	r3, [pc, #436]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da4:	2202      	movs	r2, #2
 8004da6:	4013      	ands	r3, r2
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004daa:	231f      	movs	r3, #31
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004db4:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db8:	4b67      	ldr	r3, [pc, #412]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004dba:	496a      	ldr	r1, [pc, #424]	; (8004f64 <HAL_RCC_OscConfig+0x630>)
 8004dbc:	400a      	ands	r2, r1
 8004dbe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d100      	bne.n	8004dca <HAL_RCC_OscConfig+0x496>
 8004dc8:	e0c1      	b.n	8004f4e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dca:	4b63      	ldr	r3, [pc, #396]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2238      	movs	r2, #56	; 0x38
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d100      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4a4>
 8004dd6:	e081      	b.n	8004edc <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d156      	bne.n	8004e8e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de0:	4b5d      	ldr	r3, [pc, #372]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4b5c      	ldr	r3, [pc, #368]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004de6:	4960      	ldr	r1, [pc, #384]	; (8004f68 <HAL_RCC_OscConfig+0x634>)
 8004de8:	400a      	ands	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fe fab6 	bl	800335c <HAL_GetTick>
 8004df0:	0003      	movs	r3, r0
 8004df2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df6:	f7fe fab1 	bl	800335c <HAL_GetTick>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e0a3      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e08:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	049b      	lsls	r3, r3, #18
 8004e10:	4013      	ands	r3, r2
 8004e12:	d1f0      	bne.n	8004df6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e14:	4b50      	ldr	r3, [pc, #320]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a54      	ldr	r2, [pc, #336]	; (8004f6c <HAL_RCC_OscConfig+0x638>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	0019      	movs	r1, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1a      	ldr	r2, [r3, #32]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e40:	431a      	orrs	r2, r3
 8004e42:	4b45      	ldr	r3, [pc, #276]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e44:	430a      	orrs	r2, r1
 8004e46:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e48:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e4e:	2180      	movs	r1, #128	; 0x80
 8004e50:	0449      	lsls	r1, r1, #17
 8004e52:	430a      	orrs	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004e56:	4b40      	ldr	r3, [pc, #256]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e5c:	2180      	movs	r1, #128	; 0x80
 8004e5e:	0549      	lsls	r1, r1, #21
 8004e60:	430a      	orrs	r2, r1
 8004e62:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fe fa7a 	bl	800335c <HAL_GetTick>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6e:	f7fe fa75 	bl	800335c <HAL_GetTick>
 8004e72:	0002      	movs	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e067      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e80:	4b35      	ldr	r3, [pc, #212]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	049b      	lsls	r3, r3, #18
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x53a>
 8004e8c:	e05f      	b.n	8004f4e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8e:	4b32      	ldr	r3, [pc, #200]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e94:	4934      	ldr	r1, [pc, #208]	; (8004f68 <HAL_RCC_OscConfig+0x634>)
 8004e96:	400a      	ands	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	4b2e      	ldr	r3, [pc, #184]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004ea0:	2103      	movs	r1, #3
 8004ea2:	438a      	bics	r2, r1
 8004ea4:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004ea6:	4b2c      	ldr	r3, [pc, #176]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004eac:	4930      	ldr	r1, [pc, #192]	; (8004f70 <HAL_RCC_OscConfig+0x63c>)
 8004eae:	400a      	ands	r2, r1
 8004eb0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fe fa53 	bl	800335c <HAL_GetTick>
 8004eb6:	0003      	movs	r3, r0
 8004eb8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fe fa4e 	bl	800335c <HAL_GetTick>
 8004ec0:	0002      	movs	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e040      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ece:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	049b      	lsls	r3, r3, #18
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0x588>
 8004eda:	e038      	b.n	8004f4e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e033      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <HAL_RCC_OscConfig+0x624>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d126      	bne.n	8004f4a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2270      	movs	r2, #112	; 0x70
 8004f00:	401a      	ands	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d11f      	bne.n	8004f4a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	23fe      	movs	r3, #254	; 0xfe
 8004f0e:	01db      	lsls	r3, r3, #7
 8004f10:	401a      	ands	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d116      	bne.n	8004f4a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	23f8      	movs	r3, #248	; 0xf8
 8004f20:	039b      	lsls	r3, r3, #14
 8004f22:	401a      	ands	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d10e      	bne.n	8004f4a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	23e0      	movs	r3, #224	; 0xe0
 8004f30:	051b      	lsls	r3, r3, #20
 8004f32:	401a      	ands	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	0f5b      	lsrs	r3, r3, #29
 8004f40:	075a      	lsls	r2, r3, #29
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	0018      	movs	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b008      	add	sp, #32
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	00001388 	.word	0x00001388
 8004f64:	efffffff 	.word	0xefffffff
 8004f68:	feffffff 	.word	0xfeffffff
 8004f6c:	11c1808c 	.word	0x11c1808c
 8004f70:	eefeffff 	.word	0xeefeffff

08004f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0e9      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f88:	4b76      	ldr	r3, [pc, #472]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2207      	movs	r2, #7
 8004f8e:	4013      	ands	r3, r2
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d91e      	bls.n	8004fd4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f96:	4b73      	ldr	r3, [pc, #460]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2207      	movs	r2, #7
 8004f9c:	4393      	bics	r3, r2
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	4b70      	ldr	r3, [pc, #448]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fa8:	f7fe f9d8 	bl	800335c <HAL_GetTick>
 8004fac:	0003      	movs	r3, r0
 8004fae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fb0:	e009      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb2:	f7fe f9d3 	bl	800335c <HAL_GetTick>
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	4a6a      	ldr	r2, [pc, #424]	; (8005168 <HAL_RCC_ClockConfig+0x1f4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0ca      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fc6:	4b67      	ldr	r3, [pc, #412]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2207      	movs	r2, #7
 8004fcc:	4013      	ands	r3, r2
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d1ee      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d015      	beq.n	800500a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d006      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004fe8:	4b60      	ldr	r3, [pc, #384]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	4b5f      	ldr	r3, [pc, #380]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8004fee:	21e0      	movs	r1, #224	; 0xe0
 8004ff0:	01c9      	lsls	r1, r1, #7
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff6:	4b5d      	ldr	r3, [pc, #372]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	4a5d      	ldr	r2, [pc, #372]	; (8005170 <HAL_RCC_ClockConfig+0x1fc>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	0019      	movs	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	4b59      	ldr	r3, [pc, #356]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2201      	movs	r2, #1
 8005010:	4013      	ands	r3, r2
 8005012:	d057      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d107      	bne.n	800502c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800501c:	4b53      	ldr	r3, [pc, #332]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	029b      	lsls	r3, r3, #10
 8005024:	4013      	ands	r3, r2
 8005026:	d12b      	bne.n	8005080 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e097      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d107      	bne.n	8005044 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005034:	4b4d      	ldr	r3, [pc, #308]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	049b      	lsls	r3, r3, #18
 800503c:	4013      	ands	r3, r2
 800503e:	d11f      	bne.n	8005080 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e08b      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d107      	bne.n	800505c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800504c:	4b47      	ldr	r3, [pc, #284]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4013      	ands	r3, r2
 8005056:	d113      	bne.n	8005080 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e07f      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d106      	bne.n	8005072 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005064:	4b41      	ldr	r3, [pc, #260]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005068:	2202      	movs	r2, #2
 800506a:	4013      	ands	r3, r2
 800506c:	d108      	bne.n	8005080 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e074      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005072:	4b3e      	ldr	r3, [pc, #248]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005076:	2202      	movs	r2, #2
 8005078:	4013      	ands	r3, r2
 800507a:	d101      	bne.n	8005080 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e06d      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005080:	4b3a      	ldr	r3, [pc, #232]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2207      	movs	r2, #7
 8005086:	4393      	bics	r3, r2
 8005088:	0019      	movs	r1, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	4b37      	ldr	r3, [pc, #220]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005094:	f7fe f962 	bl	800335c <HAL_GetTick>
 8005098:	0003      	movs	r3, r0
 800509a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509c:	e009      	b.n	80050b2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509e:	f7fe f95d 	bl	800335c <HAL_GetTick>
 80050a2:	0002      	movs	r2, r0
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	4a2f      	ldr	r2, [pc, #188]	; (8005168 <HAL_RCC_ClockConfig+0x1f4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e054      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	4b2e      	ldr	r3, [pc, #184]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2238      	movs	r2, #56	; 0x38
 80050b8:	401a      	ands	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d1ec      	bne.n	800509e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2207      	movs	r2, #7
 80050ca:	4013      	ands	r3, r2
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d21e      	bcs.n	8005110 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b24      	ldr	r3, [pc, #144]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2207      	movs	r2, #7
 80050d8:	4393      	bics	r3, r2
 80050da:	0019      	movs	r1, r3
 80050dc:	4b21      	ldr	r3, [pc, #132]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050e4:	f7fe f93a 	bl	800335c <HAL_GetTick>
 80050e8:	0003      	movs	r3, r0
 80050ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050ec:	e009      	b.n	8005102 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ee:	f7fe f935 	bl	800335c <HAL_GetTick>
 80050f2:	0002      	movs	r2, r0
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <HAL_RCC_ClockConfig+0x1f4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e02c      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005102:	4b18      	ldr	r3, [pc, #96]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2207      	movs	r2, #7
 8005108:	4013      	ands	r3, r2
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d1ee      	bne.n	80050ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2204      	movs	r2, #4
 8005116:	4013      	ands	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800511a:	4b14      	ldr	r3, [pc, #80]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <HAL_RCC_ClockConfig+0x200>)
 8005120:	4013      	ands	r3, r2
 8005122:	0019      	movs	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	4b10      	ldr	r3, [pc, #64]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 800512a:	430a      	orrs	r2, r1
 800512c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800512e:	f000 f829 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8005132:	0001      	movs	r1, r0
 8005134:	4b0d      	ldr	r3, [pc, #52]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	220f      	movs	r2, #15
 800513c:	401a      	ands	r2, r3
 800513e:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <HAL_RCC_ClockConfig+0x204>)
 8005140:	0092      	lsls	r2, r2, #2
 8005142:	58d3      	ldr	r3, [r2, r3]
 8005144:	221f      	movs	r2, #31
 8005146:	4013      	ands	r3, r2
 8005148:	000a      	movs	r2, r1
 800514a:	40da      	lsrs	r2, r3
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_RCC_ClockConfig+0x208>)
 800514e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_ClockConfig+0x20c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	0018      	movs	r0, r3
 8005156:	f7fe f8a7 	bl	80032a8 <HAL_InitTick>
 800515a:	0003      	movs	r3, r0
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b004      	add	sp, #16
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40022000 	.word	0x40022000
 8005168:	00001388 	.word	0x00001388
 800516c:	40021000 	.word	0x40021000
 8005170:	fffff0ff 	.word	0xfffff0ff
 8005174:	ffff8fff 	.word	0xffff8fff
 8005178:	08008490 	.word	0x08008490
 800517c:	20000000 	.word	0x20000000
 8005180:	20000004 	.word	0x20000004

08005184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800518a:	4b3c      	ldr	r3, [pc, #240]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2238      	movs	r2, #56	; 0x38
 8005190:	4013      	ands	r3, r2
 8005192:	d10f      	bne.n	80051b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005194:	4b39      	ldr	r3, [pc, #228]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	0adb      	lsrs	r3, r3, #11
 800519a:	2207      	movs	r2, #7
 800519c:	4013      	ands	r3, r2
 800519e:	2201      	movs	r2, #1
 80051a0:	409a      	lsls	r2, r3
 80051a2:	0013      	movs	r3, r2
 80051a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	4835      	ldr	r0, [pc, #212]	; (8005280 <HAL_RCC_GetSysClockFreq+0xfc>)
 80051aa:	f7fa ffab 	bl	8000104 <__udivsi3>
 80051ae:	0003      	movs	r3, r0
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	e05d      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051b4:	4b31      	ldr	r3, [pc, #196]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2238      	movs	r2, #56	; 0x38
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d102      	bne.n	80051c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051c0:	4b30      	ldr	r3, [pc, #192]	; (8005284 <HAL_RCC_GetSysClockFreq+0x100>)
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	e054      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051c6:	4b2d      	ldr	r3, [pc, #180]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2238      	movs	r2, #56	; 0x38
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d138      	bne.n	8005244 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2203      	movs	r2, #3
 80051d8:	4013      	ands	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051dc:	4b27      	ldr	r3, [pc, #156]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	2207      	movs	r2, #7
 80051e4:	4013      	ands	r3, r2
 80051e6:	3301      	adds	r3, #1
 80051e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d10d      	bne.n	800520c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4824      	ldr	r0, [pc, #144]	; (8005284 <HAL_RCC_GetSysClockFreq+0x100>)
 80051f4:	f7fa ff86 	bl	8000104 <__udivsi3>
 80051f8:	0003      	movs	r3, r0
 80051fa:	0019      	movs	r1, r3
 80051fc:	4b1f      	ldr	r3, [pc, #124]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	0a1b      	lsrs	r3, r3, #8
 8005202:	227f      	movs	r2, #127	; 0x7f
 8005204:	4013      	ands	r3, r2
 8005206:	434b      	muls	r3, r1
 8005208:	617b      	str	r3, [r7, #20]
        break;
 800520a:	e00d      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	481c      	ldr	r0, [pc, #112]	; (8005280 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005210:	f7fa ff78 	bl	8000104 <__udivsi3>
 8005214:	0003      	movs	r3, r0
 8005216:	0019      	movs	r1, r3
 8005218:	4b18      	ldr	r3, [pc, #96]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	227f      	movs	r2, #127	; 0x7f
 8005220:	4013      	ands	r3, r2
 8005222:	434b      	muls	r3, r1
 8005224:	617b      	str	r3, [r7, #20]
        break;
 8005226:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	0f5b      	lsrs	r3, r3, #29
 800522e:	2207      	movs	r2, #7
 8005230:	4013      	ands	r3, r2
 8005232:	3301      	adds	r3, #1
 8005234:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f7fa ff63 	bl	8000104 <__udivsi3>
 800523e:	0003      	movs	r3, r0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e015      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2238      	movs	r2, #56	; 0x38
 800524a:	4013      	ands	r3, r2
 800524c:	2b20      	cmp	r3, #32
 800524e:	d103      	bne.n	8005258 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	e00b      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2238      	movs	r2, #56	; 0x38
 800525e:	4013      	ands	r3, r2
 8005260:	2b18      	cmp	r3, #24
 8005262:	d103      	bne.n	800526c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005264:	23fa      	movs	r3, #250	; 0xfa
 8005266:	01db      	lsls	r3, r3, #7
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	e001      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005270:	693b      	ldr	r3, [r7, #16]
}
 8005272:	0018      	movs	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	b006      	add	sp, #24
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	40021000 	.word	0x40021000
 8005280:	00f42400 	.word	0x00f42400
 8005284:	007a1200 	.word	0x007a1200

08005288 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800528c:	4b02      	ldr	r3, [pc, #8]	; (8005298 <HAL_RCC_GetHCLKFreq+0x10>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	20000000 	.word	0x20000000

0800529c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800529c:	b5b0      	push	{r4, r5, r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80052a0:	f7ff fff2 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052a4:	0004      	movs	r4, r0
 80052a6:	f7ff fb39 	bl	800491c <LL_RCC_GetAPB1Prescaler>
 80052aa:	0003      	movs	r3, r0
 80052ac:	0b1a      	lsrs	r2, r3, #12
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052b0:	0092      	lsls	r2, r2, #2
 80052b2:	58d3      	ldr	r3, [r2, r3]
 80052b4:	221f      	movs	r2, #31
 80052b6:	4013      	ands	r3, r2
 80052b8:	40dc      	lsrs	r4, r3
 80052ba:	0023      	movs	r3, r4
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	bdb0      	pop	{r4, r5, r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	080084d0 	.word	0x080084d0

080052c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80052d0:	2313      	movs	r3, #19
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052d8:	2312      	movs	r3, #18
 80052da:	18fb      	adds	r3, r7, r3
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	029b      	lsls	r3, r3, #10
 80052e8:	4013      	ands	r3, r2
 80052ea:	d100      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x26>
 80052ec:	e0a4      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ee:	2311      	movs	r3, #17
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f6:	4ba5      	ldr	r3, [pc, #660]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	055b      	lsls	r3, r3, #21
 80052fe:	4013      	ands	r3, r2
 8005300:	d111      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005302:	4ba2      	ldr	r3, [pc, #648]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005306:	4ba1      	ldr	r3, [pc, #644]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005308:	2180      	movs	r1, #128	; 0x80
 800530a:	0549      	lsls	r1, r1, #21
 800530c:	430a      	orrs	r2, r1
 800530e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005310:	4b9e      	ldr	r3, [pc, #632]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	055b      	lsls	r3, r3, #21
 8005318:	4013      	ands	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531e:	2311      	movs	r3, #17
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	2201      	movs	r2, #1
 8005324:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005326:	4b9a      	ldr	r3, [pc, #616]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b99      	ldr	r3, [pc, #612]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800532c:	2180      	movs	r1, #128	; 0x80
 800532e:	0049      	lsls	r1, r1, #1
 8005330:	430a      	orrs	r2, r1
 8005332:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005334:	f7fe f812 	bl	800335c <HAL_GetTick>
 8005338:	0003      	movs	r3, r0
 800533a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800533c:	e00b      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533e:	f7fe f80d 	bl	800335c <HAL_GetTick>
 8005342:	0002      	movs	r2, r0
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d904      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 800534c:	2313      	movs	r3, #19
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	2203      	movs	r2, #3
 8005352:	701a      	strb	r2, [r3, #0]
        break;
 8005354:	e005      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005356:	4b8e      	ldr	r3, [pc, #568]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	4013      	ands	r3, r2
 8005360:	d0ed      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8005362:	2313      	movs	r3, #19
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d154      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800536c:	4b87      	ldr	r3, [pc, #540]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800536e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005370:	23c0      	movs	r3, #192	; 0xc0
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4013      	ands	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d019      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	429a      	cmp	r2, r3
 8005386:	d014      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005388:	4b80      	ldr	r3, [pc, #512]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800538a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538c:	4a81      	ldr	r2, [pc, #516]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800538e:	4013      	ands	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005392:	4b7e      	ldr	r3, [pc, #504]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005394:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005396:	4b7d      	ldr	r3, [pc, #500]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005398:	2180      	movs	r1, #128	; 0x80
 800539a:	0249      	lsls	r1, r1, #9
 800539c:	430a      	orrs	r2, r1
 800539e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053a0:	4b7a      	ldr	r3, [pc, #488]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053a4:	4b79      	ldr	r3, [pc, #484]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053a6:	497c      	ldr	r1, [pc, #496]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80053a8:	400a      	ands	r2, r1
 80053aa:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053ac:	4b77      	ldr	r3, [pc, #476]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2201      	movs	r2, #1
 80053b6:	4013      	ands	r3, r2
 80053b8:	d016      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ba:	f7fd ffcf 	bl	800335c <HAL_GetTick>
 80053be:	0003      	movs	r3, r0
 80053c0:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c2:	e00c      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c4:	f7fd ffca 	bl	800335c <HAL_GetTick>
 80053c8:	0002      	movs	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	4a73      	ldr	r2, [pc, #460]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d904      	bls.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80053d4:	2313      	movs	r3, #19
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2203      	movs	r2, #3
 80053da:	701a      	strb	r2, [r3, #0]
            break;
 80053dc:	e004      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053de:	4b6b      	ldr	r3, [pc, #428]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e2:	2202      	movs	r2, #2
 80053e4:	4013      	ands	r3, r2
 80053e6:	d0ed      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80053e8:	2313      	movs	r3, #19
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f2:	4b66      	ldr	r3, [pc, #408]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f6:	4a67      	ldr	r2, [pc, #412]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	0019      	movs	r1, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005400:	4b62      	ldr	r3, [pc, #392]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005402:	430a      	orrs	r2, r1
 8005404:	65da      	str	r2, [r3, #92]	; 0x5c
 8005406:	e00c      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005408:	2312      	movs	r3, #18
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	2213      	movs	r2, #19
 800540e:	18ba      	adds	r2, r7, r2
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e005      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005416:	2312      	movs	r3, #18
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	2213      	movs	r2, #19
 800541c:	18ba      	adds	r2, r7, r2
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005422:	2311      	movs	r3, #17
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d105      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800542c:	4b57      	ldr	r3, [pc, #348]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800542e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005430:	4b56      	ldr	r3, [pc, #344]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005432:	495b      	ldr	r1, [pc, #364]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005434:	400a      	ands	r2, r1
 8005436:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	4013      	ands	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005442:	4b52      	ldr	r3, [pc, #328]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	2203      	movs	r2, #3
 8005448:	4393      	bics	r3, r2
 800544a:	0019      	movs	r1, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	4b4e      	ldr	r3, [pc, #312]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005452:	430a      	orrs	r2, r1
 8005454:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2220      	movs	r2, #32
 800545c:	4013      	ands	r3, r2
 800545e:	d009      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005460:	4b4a      	ldr	r3, [pc, #296]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005464:	4a4f      	ldr	r2, [pc, #316]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005466:	4013      	ands	r3, r2
 8005468:	0019      	movs	r1, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	4b47      	ldr	r3, [pc, #284]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005470:	430a      	orrs	r2, r1
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4013      	ands	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005480:	4b42      	ldr	r3, [pc, #264]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005484:	4a48      	ldr	r2, [pc, #288]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005486:	4013      	ands	r3, r2
 8005488:	0019      	movs	r1, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	4b3f      	ldr	r3, [pc, #252]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005490:	430a      	orrs	r2, r1
 8005492:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4013      	ands	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054a0:	4b3a      	ldr	r3, [pc, #232]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	4a41      	ldr	r2, [pc, #260]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	0019      	movs	r1, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	4b37      	ldr	r3, [pc, #220]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054b0:	430a      	orrs	r2, r1
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2240      	movs	r2, #64	; 0x40
 80054ba:	4013      	ands	r3, r2
 80054bc:	d009      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054be:	4b33      	ldr	r3, [pc, #204]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	4a3b      	ldr	r2, [pc, #236]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	0019      	movs	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	4b2f      	ldr	r3, [pc, #188]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054ce:	430a      	orrs	r2, r1
 80054d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	2380      	movs	r3, #128	; 0x80
 80054d8:	01db      	lsls	r3, r3, #7
 80054da:	4013      	ands	r3, r2
 80054dc:	d015      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054de:	4b2b      	ldr	r3, [pc, #172]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	0899      	lsrs	r1, r3, #2
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69da      	ldr	r2, [r3, #28]
 80054ea:	4b28      	ldr	r3, [pc, #160]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054ec:	430a      	orrs	r2, r1
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	05db      	lsls	r3, r3, #23
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d106      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80054fc:	4b23      	ldr	r3, [pc, #140]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	4b22      	ldr	r3, [pc, #136]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005502:	2180      	movs	r1, #128	; 0x80
 8005504:	0249      	lsls	r1, r1, #9
 8005506:	430a      	orrs	r2, r1
 8005508:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	039b      	lsls	r3, r3, #14
 8005512:	4013      	ands	r3, r2
 8005514:	d016      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005516:	4b1d      	ldr	r3, [pc, #116]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	4a26      	ldr	r2, [pc, #152]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800551c:	4013      	ands	r3, r2
 800551e:	0019      	movs	r1, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	4b19      	ldr	r3, [pc, #100]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005526:	430a      	orrs	r2, r1
 8005528:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	2380      	movs	r3, #128	; 0x80
 8005530:	03db      	lsls	r3, r3, #15
 8005532:	429a      	cmp	r2, r3
 8005534:	d106      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005536:	4b15      	ldr	r3, [pc, #84]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800553c:	2180      	movs	r1, #128	; 0x80
 800553e:	0449      	lsls	r1, r1, #17
 8005540:	430a      	orrs	r2, r1
 8005542:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	4013      	ands	r3, r2
 800554e:	d016      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005550:	4b0e      	ldr	r3, [pc, #56]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005556:	4013      	ands	r3, r2
 8005558:	0019      	movs	r1, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005560:	430a      	orrs	r2, r1
 8005562:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	01db      	lsls	r3, r3, #7
 800556c:	429a      	cmp	r2, r3
 800556e:	d106      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005576:	2180      	movs	r1, #128	; 0x80
 8005578:	0249      	lsls	r1, r1, #9
 800557a:	430a      	orrs	r2, r1
 800557c:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 800557e:	2312      	movs	r3, #18
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	781b      	ldrb	r3, [r3, #0]
}
 8005584:	0018      	movs	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	b006      	add	sp, #24
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40021000 	.word	0x40021000
 8005590:	40007000 	.word	0x40007000
 8005594:	fffffcff 	.word	0xfffffcff
 8005598:	fffeffff 	.word	0xfffeffff
 800559c:	00001388 	.word	0x00001388
 80055a0:	efffffff 	.word	0xefffffff
 80055a4:	fffff3ff 	.word	0xfffff3ff
 80055a8:	fff3ffff 	.word	0xfff3ffff
 80055ac:	ffcfffff 	.word	0xffcfffff
 80055b0:	ffffcfff 	.word	0xffffcfff
 80055b4:	ffbfffff 	.word	0xffbfffff
 80055b8:	ffff3fff 	.word	0xffff3fff

080055bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055bc:	b5b0      	push	{r4, r5, r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055c4:	230f      	movs	r3, #15
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d100      	bne.n	80055d4 <HAL_RTC_Init+0x18>
 80055d2:	e07f      	b.n	80056d4 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2229      	movs	r2, #41	; 0x29
 80055d8:	5c9b      	ldrb	r3, [r3, r2]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10b      	bne.n	80055f8 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2228      	movs	r2, #40	; 0x28
 80055e4:	2100      	movs	r1, #0
 80055e6:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2288      	movs	r2, #136	; 0x88
 80055ec:	0212      	lsls	r2, r2, #8
 80055ee:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	0018      	movs	r0, r3
 80055f4:	f7fd f888 	bl	8002708 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2229      	movs	r2, #41	; 0x29
 80055fc:	2102      	movs	r1, #2
 80055fe:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	22ca      	movs	r2, #202	; 0xca
 8005606:	625a      	str	r2, [r3, #36]	; 0x24
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2253      	movs	r2, #83	; 0x53
 800560e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005610:	250f      	movs	r5, #15
 8005612:	197c      	adds	r4, r7, r5
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	0018      	movs	r0, r3
 8005618:	f000 f9c7 	bl	80059aa <RTC_EnterInitMode>
 800561c:	0003      	movs	r3, r0
 800561e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8005620:	197b      	adds	r3, r7, r5
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d148      	bne.n	80056ba <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	492c      	ldr	r1, [pc, #176]	; (80056e4 <HAL_RTC_Init+0x128>)
 8005634:	400a      	ands	r2, r1
 8005636:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6999      	ldr	r1, [r3, #24]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6912      	ldr	r2, [r2, #16]
 800565e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6919      	ldr	r1, [r3, #16]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	041a      	lsls	r2, r3, #16
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005674:	250f      	movs	r5, #15
 8005676:	197c      	adds	r4, r7, r5
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	0018      	movs	r0, r3
 800567c:	f000 f9d8 	bl	8005a30 <RTC_ExitInitMode>
 8005680:	0003      	movs	r3, r0
 8005682:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8005684:	197b      	adds	r3, r7, r5
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d116      	bne.n	80056ba <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	00d2      	lsls	r2, r2, #3
 8005698:	08d2      	lsrs	r2, r2, #3
 800569a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6999      	ldr	r1, [r3, #24]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	22ff      	movs	r2, #255	; 0xff
 80056c0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80056c2:	230f      	movs	r3, #15
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2229      	movs	r2, #41	; 0x29
 80056d0:	2101      	movs	r1, #1
 80056d2:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80056d4:	230f      	movs	r3, #15
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	781b      	ldrb	r3, [r3, #0]
}
 80056da:	0018      	movs	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	b004      	add	sp, #16
 80056e0:	bdb0      	pop	{r4, r5, r7, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	fb8fffbf 	.word	0xfb8fffbf

080056e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056e8:	b5b0      	push	{r4, r5, r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2228      	movs	r2, #40	; 0x28
 80056f8:	5c9b      	ldrb	r3, [r3, r2]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_RTC_SetTime+0x1a>
 80056fe:	2302      	movs	r3, #2
 8005700:	e092      	b.n	8005828 <HAL_RTC_SetTime+0x140>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2228      	movs	r2, #40	; 0x28
 8005706:	2101      	movs	r1, #1
 8005708:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2229      	movs	r2, #41	; 0x29
 800570e:	2102      	movs	r1, #2
 8005710:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	22ca      	movs	r2, #202	; 0xca
 8005718:	625a      	str	r2, [r3, #36]	; 0x24
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2253      	movs	r2, #83	; 0x53
 8005720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005722:	2513      	movs	r5, #19
 8005724:	197c      	adds	r4, r7, r5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	0018      	movs	r0, r3
 800572a:	f000 f93e 	bl	80059aa <RTC_EnterInitMode>
 800572e:	0003      	movs	r3, r0
 8005730:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005732:	197b      	adds	r3, r7, r5
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d162      	bne.n	8005800 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d125      	bne.n	800578c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2240      	movs	r2, #64	; 0x40
 8005748:	4013      	ands	r3, r2
 800574a:	d102      	bne.n	8005752 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2200      	movs	r2, #0
 8005750:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	0018      	movs	r0, r3
 8005758:	f000 f9b0 	bl	8005abc <RTC_ByteToBcd2>
 800575c:	0003      	movs	r3, r0
 800575e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	0018      	movs	r0, r3
 8005766:	f000 f9a9 	bl	8005abc <RTC_ByteToBcd2>
 800576a:	0003      	movs	r3, r0
 800576c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800576e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	789b      	ldrb	r3, [r3, #2]
 8005774:	0018      	movs	r0, r3
 8005776:	f000 f9a1 	bl	8005abc <RTC_ByteToBcd2>
 800577a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800577c:	0022      	movs	r2, r4
 800577e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	78db      	ldrb	r3, [r3, #3]
 8005784:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	e017      	b.n	80057bc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2240      	movs	r2, #64	; 0x40
 8005794:	4013      	ands	r3, r2
 8005796:	d102      	bne.n	800579e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2200      	movs	r2, #0
 800579c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057aa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057b0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	78db      	ldrb	r3, [r3, #3]
 80057b6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	491b      	ldr	r1, [pc, #108]	; (8005830 <HAL_RTC_SetTime+0x148>)
 80057c4:	400a      	ands	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4918      	ldr	r1, [pc, #96]	; (8005834 <HAL_RTC_SetTime+0x14c>)
 80057d4:	400a      	ands	r2, r1
 80057d6:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6999      	ldr	r1, [r3, #24]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057f0:	2313      	movs	r3, #19
 80057f2:	18fc      	adds	r4, r7, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	0018      	movs	r0, r3
 80057f8:	f000 f91a 	bl	8005a30 <RTC_ExitInitMode>
 80057fc:	0003      	movs	r3, r0
 80057fe:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	22ff      	movs	r2, #255	; 0xff
 8005806:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005808:	2313      	movs	r3, #19
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2229      	movs	r2, #41	; 0x29
 8005816:	2101      	movs	r1, #1
 8005818:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2228      	movs	r2, #40	; 0x28
 800581e:	2100      	movs	r1, #0
 8005820:	5499      	strb	r1, [r3, r2]

  return status;
 8005822:	2313      	movs	r3, #19
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	781b      	ldrb	r3, [r3, #0]
}
 8005828:	0018      	movs	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	b006      	add	sp, #24
 800582e:	bdb0      	pop	{r4, r5, r7, pc}
 8005830:	007f7f7f 	.word	0x007f7f7f
 8005834:	fffbffff 	.word	0xfffbffff

08005838 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005838:	b5b0      	push	{r4, r5, r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2228      	movs	r2, #40	; 0x28
 8005848:	5c9b      	ldrb	r3, [r3, r2]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_RTC_SetDate+0x1a>
 800584e:	2302      	movs	r3, #2
 8005850:	e07e      	b.n	8005950 <HAL_RTC_SetDate+0x118>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2228      	movs	r2, #40	; 0x28
 8005856:	2101      	movs	r1, #1
 8005858:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2229      	movs	r2, #41	; 0x29
 800585e:	2102      	movs	r1, #2
 8005860:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10e      	bne.n	8005886 <HAL_RTC_SetDate+0x4e>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	001a      	movs	r2, r3
 800586e:	2310      	movs	r3, #16
 8005870:	4013      	ands	r3, r2
 8005872:	d008      	beq.n	8005886 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	2210      	movs	r2, #16
 800587a:	4393      	bics	r3, r2
 800587c:	b2db      	uxtb	r3, r3
 800587e:	330a      	adds	r3, #10
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d11c      	bne.n	80058c6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	78db      	ldrb	r3, [r3, #3]
 8005890:	0018      	movs	r0, r3
 8005892:	f000 f913 	bl	8005abc <RTC_ByteToBcd2>
 8005896:	0003      	movs	r3, r0
 8005898:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	0018      	movs	r0, r3
 80058a0:	f000 f90c 	bl	8005abc <RTC_ByteToBcd2>
 80058a4:	0003      	movs	r3, r0
 80058a6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058a8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	789b      	ldrb	r3, [r3, #2]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f000 f904 	bl	8005abc <RTC_ByteToBcd2>
 80058b4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058b6:	0022      	movs	r2, r4
 80058b8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e00e      	b.n	80058e4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	78db      	ldrb	r3, [r3, #3]
 80058ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	785b      	ldrb	r3, [r3, #1]
 80058d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80058d2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80058d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	22ca      	movs	r2, #202	; 0xca
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2253      	movs	r2, #83	; 0x53
 80058f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058f4:	2513      	movs	r5, #19
 80058f6:	197c      	adds	r4, r7, r5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f000 f855 	bl	80059aa <RTC_EnterInitMode>
 8005900:	0003      	movs	r3, r0
 8005902:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005904:	197b      	adds	r3, r7, r5
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10d      	bne.n	8005928 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4911      	ldr	r1, [pc, #68]	; (8005958 <HAL_RTC_SetDate+0x120>)
 8005914:	400a      	ands	r2, r1
 8005916:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005918:	2313      	movs	r3, #19
 800591a:	18fc      	adds	r4, r7, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	0018      	movs	r0, r3
 8005920:	f000 f886 	bl	8005a30 <RTC_ExitInitMode>
 8005924:	0003      	movs	r3, r0
 8005926:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	22ff      	movs	r2, #255	; 0xff
 800592e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005930:	2313      	movs	r3, #19
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d103      	bne.n	8005942 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2229      	movs	r2, #41	; 0x29
 800593e:	2101      	movs	r1, #1
 8005940:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2228      	movs	r2, #40	; 0x28
 8005946:	2100      	movs	r1, #0
 8005948:	5499      	strb	r1, [r3, r2]

  return status;
 800594a:	2313      	movs	r3, #19
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	781b      	ldrb	r3, [r3, #0]
}
 8005950:	0018      	movs	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	b006      	add	sp, #24
 8005956:	bdb0      	pop	{r4, r5, r7, pc}
 8005958:	00ffff3f 	.word	0x00ffff3f

0800595c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	21a0      	movs	r1, #160	; 0xa0
 8005970:	438a      	bics	r2, r1
 8005972:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005974:	f7fd fcf2 	bl	800335c <HAL_GetTick>
 8005978:	0003      	movs	r3, r0
 800597a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800597c:	e00a      	b.n	8005994 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800597e:	f7fd fced 	bl	800335c <HAL_GetTick>
 8005982:	0002      	movs	r2, r0
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1ad2      	subs	r2, r2, r3
 8005988:	23fa      	movs	r3, #250	; 0xfa
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	429a      	cmp	r2, r3
 800598e:	d901      	bls.n	8005994 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e006      	b.n	80059a2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	4013      	ands	r3, r2
 800599e:	d0ee      	beq.n	800597e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	0018      	movs	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b004      	add	sp, #16
 80059a8:	bd80      	pop	{r7, pc}

080059aa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80059b2:	230f      	movs	r3, #15
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2240      	movs	r2, #64	; 0x40
 80059c2:	4013      	ands	r3, r2
 80059c4:	d12d      	bne.n	8005a22 <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2180      	movs	r1, #128	; 0x80
 80059d2:	430a      	orrs	r2, r1
 80059d4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80059d6:	f7fd fcc1 	bl	800335c <HAL_GetTick>
 80059da:	0003      	movs	r3, r0
 80059dc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80059de:	e015      	b.n	8005a0c <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80059e0:	f7fd fcbc 	bl	800335c <HAL_GetTick>
 80059e4:	0002      	movs	r2, r0
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	1ad2      	subs	r2, r2, r3
 80059ea:	210f      	movs	r1, #15
 80059ec:	187b      	adds	r3, r7, r1
 80059ee:	1879      	adds	r1, r7, r1
 80059f0:	7809      	ldrb	r1, [r1, #0]
 80059f2:	7019      	strb	r1, [r3, #0]
 80059f4:	23fa      	movs	r3, #250	; 0xfa
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d907      	bls.n	8005a0c <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 80059fc:	230f      	movs	r3, #15
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	2203      	movs	r2, #3
 8005a02:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2229      	movs	r2, #41	; 0x29
 8005a08:	2103      	movs	r1, #3
 8005a0a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	2240      	movs	r2, #64	; 0x40
 8005a14:	4013      	ands	r3, r2
 8005a16:	d104      	bne.n	8005a22 <RTC_EnterInitMode+0x78>
 8005a18:	230f      	movs	r3, #15
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d1de      	bne.n	80059e0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005a22:	230f      	movs	r3, #15
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	781b      	ldrb	r3, [r3, #0]
}
 8005a28:	0018      	movs	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b004      	add	sp, #16
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a38:	230f      	movs	r3, #15
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005a40:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <RTC_ExitInitMode+0x88>)
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <RTC_ExitInitMode+0x88>)
 8005a46:	2180      	movs	r1, #128	; 0x80
 8005a48:	438a      	bics	r2, r1
 8005a4a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <RTC_ExitInitMode+0x88>)
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2220      	movs	r2, #32
 8005a52:	4013      	ands	r3, r2
 8005a54:	d10e      	bne.n	8005a74 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f7ff ff7f 	bl	800595c <HAL_RTC_WaitForSynchro>
 8005a5e:	1e03      	subs	r3, r0, #0
 8005a60:	d022      	beq.n	8005aa8 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2229      	movs	r2, #41	; 0x29
 8005a66:	2103      	movs	r1, #3
 8005a68:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005a6a:	230f      	movs	r3, #15
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	2203      	movs	r2, #3
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e019      	b.n	8005aa8 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a74:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <RTC_ExitInitMode+0x88>)
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <RTC_ExitInitMode+0x88>)
 8005a7a:	2120      	movs	r1, #32
 8005a7c:	438a      	bics	r2, r1
 8005a7e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f7ff ff6a 	bl	800595c <HAL_RTC_WaitForSynchro>
 8005a88:	1e03      	subs	r3, r0, #0
 8005a8a:	d007      	beq.n	8005a9c <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2229      	movs	r2, #41	; 0x29
 8005a90:	2103      	movs	r1, #3
 8005a92:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005a94:	230f      	movs	r3, #15
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	2203      	movs	r2, #3
 8005a9a:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <RTC_ExitInitMode+0x88>)
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <RTC_ExitInitMode+0x88>)
 8005aa2:	2120      	movs	r1, #32
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005aa8:	230f      	movs	r3, #15
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	781b      	ldrb	r3, [r3, #0]
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b004      	add	sp, #16
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	40002800 	.word	0x40002800

08005abc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	0002      	movs	r2, r0
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005acc:	230b      	movs	r3, #11
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	1dfa      	adds	r2, r7, #7
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005ad6:	e008      	b.n	8005aea <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005ade:	220b      	movs	r2, #11
 8005ae0:	18bb      	adds	r3, r7, r2
 8005ae2:	18ba      	adds	r2, r7, r2
 8005ae4:	7812      	ldrb	r2, [r2, #0]
 8005ae6:	3a0a      	subs	r2, #10
 8005ae8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005aea:	230b      	movs	r3, #11
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b09      	cmp	r3, #9
 8005af2:	d8f1      	bhi.n	8005ad8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	230b      	movs	r3, #11
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	b2db      	uxtb	r3, r3
}
 8005b06:	0018      	movs	r0, r3
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b004      	add	sp, #16
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e08a      	b.n	8005c38 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	225d      	movs	r2, #93	; 0x5d
 8005b2c:	5c9b      	ldrb	r3, [r3, r2]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d107      	bne.n	8005b44 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	225c      	movs	r2, #92	; 0x5c
 8005b38:	2100      	movs	r1, #0
 8005b3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f7fc fe08 	bl	8002754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	225d      	movs	r2, #93	; 0x5d
 8005b48:	2102      	movs	r1, #2
 8005b4a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2140      	movs	r1, #64	; 0x40
 8005b58:	438a      	bics	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	23e0      	movs	r3, #224	; 0xe0
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d902      	bls.n	8005b6e <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	e002      	b.n	8005b74 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	015b      	lsls	r3, r3, #5
 8005b72:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	23f0      	movs	r3, #240	; 0xf0
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d008      	beq.n	8005b92 <HAL_SPI_Init+0x82>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	23e0      	movs	r3, #224	; 0xe0
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d002      	beq.n	8005b92 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10c      	bne.n	8005bb4 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	23e0      	movs	r3, #224	; 0xe0
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d903      	bls.n	8005bae <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	631a      	str	r2, [r3, #48]	; 0x30
 8005bac:	e002      	b.n	8005bb4 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	400b      	ands	r3, r1
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	431a      	orrs	r2, r3
 8005be2:	0011      	movs	r1, r2
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	0c1b      	lsrs	r3, r3, #16
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	401a      	ands	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	0011      	movs	r1, r2
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4907      	ldr	r1, [pc, #28]	; (8005c40 <HAL_SPI_Init+0x130>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	225d      	movs	r2, #93	; 0x5d
 8005c32:	2101      	movs	r1, #1
 8005c34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	0018      	movs	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b004      	add	sp, #16
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	fffff7ff 	.word	0xfffff7ff

08005c44 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	1dbb      	adds	r3, r7, #6
 8005c50:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c52:	2317      	movs	r3, #23
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	225c      	movs	r2, #92	; 0x5c
 8005c5e:	5c9b      	ldrb	r3, [r3, r2]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_SPI_Transmit_DMA+0x24>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e0df      	b.n	8005e28 <HAL_SPI_Transmit_DMA+0x1e4>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	225c      	movs	r2, #92	; 0x5c
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	225d      	movs	r2, #93	; 0x5d
 8005c74:	5c9b      	ldrb	r3, [r3, r2]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d004      	beq.n	8005c86 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8005c7c:	2317      	movs	r3, #23
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	2202      	movs	r2, #2
 8005c82:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c84:	e0c9      	b.n	8005e1a <HAL_SPI_Transmit_DMA+0x1d6>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_SPI_Transmit_DMA+0x50>
 8005c8c:	1dbb      	adds	r3, r7, #6
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8005c94:	2317      	movs	r3, #23
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	2201      	movs	r2, #1
 8005c9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c9c:	e0bd      	b.n	8005e1a <HAL_SPI_Transmit_DMA+0x1d6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	225d      	movs	r2, #93	; 0x5d
 8005ca2:	2103      	movs	r1, #3
 8005ca4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	1dba      	adds	r2, r7, #6
 8005cb6:	8812      	ldrh	r2, [r2, #0]
 8005cb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1dba      	adds	r2, r7, #6
 8005cbe:	8812      	ldrh	r2, [r2, #0]
 8005cc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2244      	movs	r2, #68	; 0x44
 8005cd8:	2100      	movs	r1, #0
 8005cda:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2246      	movs	r2, #70	; 0x46
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d108      	bne.n	8005d02 <HAL_SPI_Transmit_DMA+0xbe>
  {
    SPI_1LINE_TX(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2180      	movs	r1, #128	; 0x80
 8005cfc:	01c9      	lsls	r1, r1, #7
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	4a4a      	ldr	r2, [pc, #296]	; (8005e30 <HAL_SPI_Transmit_DMA+0x1ec>)
 8005d08:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0e:	4a49      	ldr	r2, [pc, #292]	; (8005e34 <HAL_SPI_Transmit_DMA+0x1f0>)
 8005d10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d16:	4a48      	ldr	r2, [pc, #288]	; (8005e38 <HAL_SPI_Transmit_DMA+0x1f4>)
 8005d18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	2200      	movs	r2, #0
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4943      	ldr	r1, [pc, #268]	; (8005e3c <HAL_SPI_Transmit_DMA+0x1f8>)
 8005d2e:	400a      	ands	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	23e0      	movs	r3, #224	; 0xe0
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d82f      	bhi.n	8005d9e <HAL_SPI_Transmit_DMA+0x15a>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	2380      	movs	r3, #128	; 0x80
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d128      	bne.n	8005d9e <HAL_SPI_Transmit_DMA+0x15a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	001a      	movs	r2, r3
 8005d54:	2301      	movs	r3, #1
 8005d56:	4013      	ands	r3, r2
 8005d58:	d10f      	bne.n	8005d7a <HAL_SPI_Transmit_DMA+0x136>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4935      	ldr	r1, [pc, #212]	; (8005e3c <HAL_SPI_Transmit_DMA+0x1f8>)
 8005d66:	400a      	ands	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d78:	e011      	b.n	8005d9e <HAL_SPI_Transmit_DMA+0x15a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2180      	movs	r1, #128	; 0x80
 8005d86:	01c9      	lsls	r1, r1, #7
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3301      	adds	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	0019      	movs	r1, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	001a      	movs	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f7fe f8f7 	bl	8003fa8 <HAL_DMA_Start_IT>
 8005dba:	1e03      	subs	r3, r0, #0
 8005dbc:	d00e      	beq.n	8005ddc <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc2:	2210      	movs	r2, #16
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005dca:	2317      	movs	r3, #23
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	225d      	movs	r2, #93	; 0x5d
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	5499      	strb	r1, [r3, r2]
    goto error;
 8005dda:	e01e      	b.n	8005e1a <HAL_SPI_Transmit_DMA+0x1d6>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2240      	movs	r2, #64	; 0x40
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d007      	beq.n	8005dfa <HAL_SPI_Transmit_DMA+0x1b6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2140      	movs	r1, #64	; 0x40
 8005df6:	430a      	orrs	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2120      	movs	r1, #32
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2102      	movs	r1, #2
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	225c      	movs	r2, #92	; 0x5c
 8005e1e:	2100      	movs	r1, #0
 8005e20:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005e22:	2317      	movs	r3, #23
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	781b      	ldrb	r3, [r3, #0]
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b006      	add	sp, #24
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	08005f1d 	.word	0x08005f1d
 8005e34:	08005e71 	.word	0x08005e71
 8005e38:	08005f3b 	.word	0x08005f3b
 8005e3c:	ffffbfff 	.word	0xffffbfff

08005e40 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005e48:	46c0      	nop			; (mov r8, r8)
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	b002      	add	sp, #8
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b002      	add	sp, #8
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b002      	add	sp, #8
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7e:	f7fd fa6d 	bl	800335c <HAL_GetTick>
 8005e82:	0003      	movs	r3, r0
 8005e84:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	d03c      	beq.n	8005f0e <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2120      	movs	r1, #32
 8005ea0:	438a      	bics	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2102      	movs	r1, #2
 8005eb0:	438a      	bics	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2164      	movs	r1, #100	; 0x64
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 f942 	bl	8006144 <SPI_EndRxTxTransaction>
 8005ec0:	1e03      	subs	r3, r0, #0
 8005ec2:	d005      	beq.n	8005ed0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec8:	2220      	movs	r2, #32
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	225d      	movs	r2, #93	; 0x5d
 8005ef8:	2101      	movs	r1, #1
 8005efa:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d004      	beq.n	8005f0e <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	0018      	movs	r0, r3
 8005f08:	f7ff ffaa 	bl	8005e60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f0c:	e003      	b.n	8005f16 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	0018      	movs	r0, r3
 8005f12:	f7ff ff95 	bl	8005e40 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b006      	add	sp, #24
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f7ff ff8f 	bl	8005e50 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b004      	add	sp, #16
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2103      	movs	r1, #3
 8005f54:	438a      	bics	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	225d      	movs	r2, #93	; 0x5d
 8005f68:	2101      	movs	r1, #1
 8005f6a:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7ff ff76 	bl	8005e60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f74:	46c0      	nop			; (mov r8, r8)
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b004      	add	sp, #16
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	1dfb      	adds	r3, r7, #7
 8005f8a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f8c:	e050      	b.n	8006030 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	d04d      	beq.n	8006030 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005f94:	f7fd f9e2 	bl	800335c <HAL_GetTick>
 8005f98:	0002      	movs	r2, r0
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d902      	bls.n	8005faa <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d142      	bne.n	8006030 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	21e0      	movs	r1, #224	; 0xe0
 8005fb6:	438a      	bics	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	2382      	movs	r3, #130	; 0x82
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d113      	bne.n	8005fee <SPI_WaitFlagStateUntilTimeout+0x72>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	021b      	lsls	r3, r3, #8
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d005      	beq.n	8005fde <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d107      	bne.n	8005fee <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2140      	movs	r1, #64	; 0x40
 8005fea:	438a      	bics	r2, r1
 8005fec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff2:	2380      	movs	r3, #128	; 0x80
 8005ff4:	019b      	lsls	r3, r3, #6
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d110      	bne.n	800601c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4914      	ldr	r1, [pc, #80]	; (8006058 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8006006:	400a      	ands	r2, r1
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2180      	movs	r1, #128	; 0x80
 8006016:	0189      	lsls	r1, r1, #6
 8006018:	430a      	orrs	r2, r1
 800601a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	225d      	movs	r2, #93	; 0x5d
 8006020:	2101      	movs	r1, #1
 8006022:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	225c      	movs	r2, #92	; 0x5c
 8006028:	2100      	movs	r1, #0
 800602a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e00f      	b.n	8006050 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	4013      	ands	r3, r2
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	425a      	negs	r2, r3
 8006040:	4153      	adcs	r3, r2
 8006042:	b2db      	uxtb	r3, r3
 8006044:	001a      	movs	r2, r3
 8006046:	1dfb      	adds	r3, r7, #7
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d19f      	bne.n	8005f8e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b004      	add	sp, #16
 8006056:	bd80      	pop	{r7, pc}
 8006058:	ffffdfff 	.word	0xffffdfff

0800605c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800606a:	e05c      	b.n	8006126 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	23c0      	movs	r3, #192	; 0xc0
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	429a      	cmp	r2, r3
 8006074:	d106      	bne.n	8006084 <SPI_WaitFifoStateUntilTimeout+0x28>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	3301      	adds	r3, #1
 8006088:	d04d      	beq.n	8006126 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800608a:	f7fd f967 	bl	800335c <HAL_GetTick>
 800608e:	0002      	movs	r2, r0
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d902      	bls.n	80060a0 <SPI_WaitFifoStateUntilTimeout+0x44>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d142      	bne.n	8006126 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	21e0      	movs	r1, #224	; 0xe0
 80060ac:	438a      	bics	r2, r1
 80060ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	2382      	movs	r3, #130	; 0x82
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d113      	bne.n	80060e4 <SPI_WaitFifoStateUntilTimeout+0x88>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d005      	beq.n	80060d4 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d107      	bne.n	80060e4 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2140      	movs	r1, #64	; 0x40
 80060e0:	438a      	bics	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060e8:	2380      	movs	r3, #128	; 0x80
 80060ea:	019b      	lsls	r3, r3, #6
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d110      	bne.n	8006112 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4911      	ldr	r1, [pc, #68]	; (8006140 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80060fc:	400a      	ands	r2, r1
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	0189      	lsls	r1, r1, #6
 800610e:	430a      	orrs	r2, r1
 8006110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	225d      	movs	r2, #93	; 0x5d
 8006116:	2101      	movs	r1, #1
 8006118:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	225c      	movs	r2, #92	; 0x5c
 800611e:	2100      	movs	r1, #0
 8006120:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e008      	b.n	8006138 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	4013      	ands	r3, r2
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d19a      	bne.n	800606c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	0018      	movs	r0, r3
 800613a:	46bd      	mov	sp, r7
 800613c:	b004      	add	sp, #16
 800613e:	bd80      	pop	{r7, pc}
 8006140:	ffffdfff 	.word	0xffffdfff

08006144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	23c0      	movs	r3, #192	; 0xc0
 8006154:	0159      	lsls	r1, r3, #5
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	0013      	movs	r3, r2
 800615e:	2200      	movs	r2, #0
 8006160:	f7ff ff7c 	bl	800605c <SPI_WaitFifoStateUntilTimeout>
 8006164:	1e03      	subs	r3, r0, #0
 8006166:	d007      	beq.n	8006178 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616c:	2220      	movs	r2, #32
 800616e:	431a      	orrs	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e027      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	0013      	movs	r3, r2
 8006182:	2200      	movs	r2, #0
 8006184:	2180      	movs	r1, #128	; 0x80
 8006186:	f7ff fef9 	bl	8005f7c <SPI_WaitFlagStateUntilTimeout>
 800618a:	1e03      	subs	r3, r0, #0
 800618c:	d007      	beq.n	800619e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006192:	2220      	movs	r2, #32
 8006194:	431a      	orrs	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e014      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	23c0      	movs	r3, #192	; 0xc0
 80061a2:	00d9      	lsls	r1, r3, #3
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	0013      	movs	r3, r2
 80061ac:	2200      	movs	r2, #0
 80061ae:	f7ff ff55 	bl	800605c <SPI_WaitFifoStateUntilTimeout>
 80061b2:	1e03      	subs	r3, r0, #0
 80061b4:	d007      	beq.n	80061c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ba:	2220      	movs	r2, #32
 80061bc:	431a      	orrs	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e000      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	0018      	movs	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	b004      	add	sp, #16
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e046      	b.n	8006270 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2280      	movs	r2, #128	; 0x80
 80061e6:	589b      	ldr	r3, [r3, r2]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d107      	bne.n	80061fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	227c      	movs	r2, #124	; 0x7c
 80061f0:	2100      	movs	r1, #0
 80061f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	0018      	movs	r0, r3
 80061f8:	f7fc fb5e 	bl	80028b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2280      	movs	r2, #128	; 0x80
 8006200:	2124      	movs	r1, #36	; 0x24
 8006202:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2101      	movs	r1, #1
 8006210:	438a      	bics	r2, r1
 8006212:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	0018      	movs	r0, r3
 8006218:	f000 f8dc 	bl	80063d4 <UART_SetConfig>
 800621c:	0003      	movs	r3, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e024      	b.n	8006270 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	0018      	movs	r0, r3
 8006232:	f001 f97d 	bl	8007530 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	490d      	ldr	r1, [pc, #52]	; (8006278 <HAL_UART_Init+0xa8>)
 8006242:	400a      	ands	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	212a      	movs	r1, #42	; 0x2a
 8006252:	438a      	bics	r2, r1
 8006254:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2101      	movs	r1, #1
 8006262:	430a      	orrs	r2, r1
 8006264:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	0018      	movs	r0, r3
 800626a:	f001 fa15 	bl	8007698 <UART_CheckIdleState>
 800626e:	0003      	movs	r3, r0
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	b002      	add	sp, #8
 8006276:	bd80      	pop	{r7, pc}
 8006278:	ffffb7ff 	.word	0xffffb7ff

0800627c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	; 0x28
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	1dbb      	adds	r3, r7, #6
 800628a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2280      	movs	r2, #128	; 0x80
 8006290:	589b      	ldr	r3, [r3, r2]
 8006292:	2b20      	cmp	r3, #32
 8006294:	d000      	beq.n	8006298 <HAL_UART_Transmit+0x1c>
 8006296:	e097      	b.n	80063c8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_UART_Transmit+0x2a>
 800629e:	1dbb      	adds	r3, r7, #6
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e08f      	b.n	80063ca <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	015b      	lsls	r3, r3, #5
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d109      	bne.n	80062ca <HAL_UART_Transmit+0x4e>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2201      	movs	r2, #1
 80062c2:	4013      	ands	r3, r2
 80062c4:	d001      	beq.n	80062ca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e07f      	b.n	80063ca <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	227c      	movs	r2, #124	; 0x7c
 80062ce:	5c9b      	ldrb	r3, [r3, r2]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_UART_Transmit+0x5c>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e078      	b.n	80063ca <HAL_UART_Transmit+0x14e>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	227c      	movs	r2, #124	; 0x7c
 80062dc:	2101      	movs	r1, #1
 80062de:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2288      	movs	r2, #136	; 0x88
 80062e4:	2100      	movs	r1, #0
 80062e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2280      	movs	r2, #128	; 0x80
 80062ec:	2121      	movs	r1, #33	; 0x21
 80062ee:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80062f0:	f7fd f834 	bl	800335c <HAL_GetTick>
 80062f4:	0003      	movs	r3, r0
 80062f6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	1dba      	adds	r2, r7, #6
 80062fc:	2154      	movs	r1, #84	; 0x54
 80062fe:	8812      	ldrh	r2, [r2, #0]
 8006300:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1dba      	adds	r2, r7, #6
 8006306:	2156      	movs	r1, #86	; 0x56
 8006308:	8812      	ldrh	r2, [r2, #0]
 800630a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	2380      	movs	r3, #128	; 0x80
 8006312:	015b      	lsls	r3, r3, #5
 8006314:	429a      	cmp	r2, r3
 8006316:	d108      	bne.n	800632a <HAL_UART_Transmit+0xae>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	61bb      	str	r3, [r7, #24]
 8006328:	e003      	b.n	8006332 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006332:	e02c      	b.n	800638e <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	0013      	movs	r3, r2
 800633e:	2200      	movs	r2, #0
 8006340:	2180      	movs	r1, #128	; 0x80
 8006342:	f001 f9f3 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 8006346:	1e03      	subs	r3, r0, #0
 8006348:	d001      	beq.n	800634e <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e03d      	b.n	80063ca <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10b      	bne.n	800636c <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	001a      	movs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	05d2      	lsls	r2, r2, #23
 8006360:	0dd2      	lsrs	r2, r2, #23
 8006362:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	3302      	adds	r3, #2
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	e007      	b.n	800637c <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	781a      	ldrb	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3301      	adds	r3, #1
 800637a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2256      	movs	r2, #86	; 0x56
 8006380:	5a9b      	ldrh	r3, [r3, r2]
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b299      	uxth	r1, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2256      	movs	r2, #86	; 0x56
 800638c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2256      	movs	r2, #86	; 0x56
 8006392:	5a9b      	ldrh	r3, [r3, r2]
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1cc      	bne.n	8006334 <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	0013      	movs	r3, r2
 80063a4:	2200      	movs	r2, #0
 80063a6:	2140      	movs	r1, #64	; 0x40
 80063a8:	f001 f9c0 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 80063ac:	1e03      	subs	r3, r0, #0
 80063ae:	d001      	beq.n	80063b4 <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e00a      	b.n	80063ca <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2280      	movs	r2, #128	; 0x80
 80063b8:	2120      	movs	r1, #32
 80063ba:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	227c      	movs	r2, #124	; 0x7c
 80063c0:	2100      	movs	r1, #0
 80063c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	0018      	movs	r0, r3
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b008      	add	sp, #32
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063d6:	b0a1      	sub	sp, #132	; 0x84
 80063d8:	af00      	add	r7, sp, #0
 80063da:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80063dc:	2300      	movs	r3, #0
 80063de:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80063e0:	231b      	movs	r3, #27
 80063e2:	2258      	movs	r2, #88	; 0x58
 80063e4:	18ba      	adds	r2, r7, r2
 80063e6:	18d2      	adds	r2, r2, r3
 80063e8:	2300      	movs	r3, #0
 80063ea:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	431a      	orrs	r2, r3
 8006400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	4313      	orrs	r3, r2
 8006406:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800640a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800640c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800640e:	4313      	orrs	r3, r2
 8006410:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4bbe      	ldr	r3, [pc, #760]	; (8006714 <UART_SetConfig+0x340>)
 800641a:	401a      	ands	r2, r3
 800641c:	0011      	movs	r1, r2
 800641e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006424:	430b      	orrs	r3, r1
 8006426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	4bba      	ldr	r3, [pc, #744]	; (8006718 <UART_SetConfig+0x344>)
 8006430:	401a      	ands	r2, r3
 8006432:	0010      	movs	r0, r2
 8006434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006436:	68d9      	ldr	r1, [r3, #12]
 8006438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	0003      	movs	r3, r0
 800643e:	430b      	orrs	r3, r1
 8006440:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	4bb3      	ldr	r3, [pc, #716]	; (800671c <UART_SetConfig+0x348>)
 800644e:	429a      	cmp	r2, r3
 8006450:	d004      	beq.n	800645c <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006454:	6a1a      	ldr	r2, [r3, #32]
 8006456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006458:	4313      	orrs	r3, r2
 800645a:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800645c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	4baf      	ldr	r3, [pc, #700]	; (8006720 <UART_SetConfig+0x34c>)
 8006464:	401a      	ands	r2, r3
 8006466:	0011      	movs	r1, r2
 8006468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800646e:	430b      	orrs	r3, r1
 8006470:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	230f      	movs	r3, #15
 800647a:	439a      	bics	r2, r3
 800647c:	0010      	movs	r0, r2
 800647e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006480:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	0003      	movs	r3, r0
 8006488:	430b      	orrs	r3, r1
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800648c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4ba4      	ldr	r3, [pc, #656]	; (8006724 <UART_SetConfig+0x350>)
 8006492:	429a      	cmp	r2, r3
 8006494:	d12f      	bne.n	80064f6 <UART_SetConfig+0x122>
 8006496:	4ba4      	ldr	r3, [pc, #656]	; (8006728 <UART_SetConfig+0x354>)
 8006498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800649a:	2303      	movs	r3, #3
 800649c:	4013      	ands	r3, r2
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d013      	beq.n	80064ca <UART_SetConfig+0xf6>
 80064a2:	d304      	bcc.n	80064ae <UART_SetConfig+0xda>
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d009      	beq.n	80064bc <UART_SetConfig+0xe8>
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d015      	beq.n	80064d8 <UART_SetConfig+0x104>
 80064ac:	e01b      	b.n	80064e6 <UART_SetConfig+0x112>
 80064ae:	2323      	movs	r3, #35	; 0x23
 80064b0:	2258      	movs	r2, #88	; 0x58
 80064b2:	18ba      	adds	r2, r7, r2
 80064b4:	18d2      	adds	r2, r2, r3
 80064b6:	2300      	movs	r3, #0
 80064b8:	7013      	strb	r3, [r2, #0]
 80064ba:	e070      	b.n	800659e <UART_SetConfig+0x1ca>
 80064bc:	2323      	movs	r3, #35	; 0x23
 80064be:	2258      	movs	r2, #88	; 0x58
 80064c0:	18ba      	adds	r2, r7, r2
 80064c2:	18d2      	adds	r2, r2, r3
 80064c4:	2302      	movs	r3, #2
 80064c6:	7013      	strb	r3, [r2, #0]
 80064c8:	e069      	b.n	800659e <UART_SetConfig+0x1ca>
 80064ca:	2323      	movs	r3, #35	; 0x23
 80064cc:	2258      	movs	r2, #88	; 0x58
 80064ce:	18ba      	adds	r2, r7, r2
 80064d0:	18d2      	adds	r2, r2, r3
 80064d2:	2304      	movs	r3, #4
 80064d4:	7013      	strb	r3, [r2, #0]
 80064d6:	e062      	b.n	800659e <UART_SetConfig+0x1ca>
 80064d8:	2323      	movs	r3, #35	; 0x23
 80064da:	2258      	movs	r2, #88	; 0x58
 80064dc:	18ba      	adds	r2, r7, r2
 80064de:	18d2      	adds	r2, r2, r3
 80064e0:	2308      	movs	r3, #8
 80064e2:	7013      	strb	r3, [r2, #0]
 80064e4:	e05b      	b.n	800659e <UART_SetConfig+0x1ca>
 80064e6:	2323      	movs	r3, #35	; 0x23
 80064e8:	2258      	movs	r2, #88	; 0x58
 80064ea:	18ba      	adds	r2, r7, r2
 80064ec:	18d2      	adds	r2, r2, r3
 80064ee:	2310      	movs	r3, #16
 80064f0:	7013      	strb	r3, [r2, #0]
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	e053      	b.n	800659e <UART_SetConfig+0x1ca>
 80064f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b8c      	ldr	r3, [pc, #560]	; (800672c <UART_SetConfig+0x358>)
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d106      	bne.n	800650e <UART_SetConfig+0x13a>
 8006500:	2323      	movs	r3, #35	; 0x23
 8006502:	2258      	movs	r2, #88	; 0x58
 8006504:	18ba      	adds	r2, r7, r2
 8006506:	18d2      	adds	r2, r2, r3
 8006508:	2300      	movs	r3, #0
 800650a:	7013      	strb	r3, [r2, #0]
 800650c:	e047      	b.n	800659e <UART_SetConfig+0x1ca>
 800650e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b82      	ldr	r3, [pc, #520]	; (800671c <UART_SetConfig+0x348>)
 8006514:	429a      	cmp	r2, r3
 8006516:	d13c      	bne.n	8006592 <UART_SetConfig+0x1be>
 8006518:	4b83      	ldr	r3, [pc, #524]	; (8006728 <UART_SetConfig+0x354>)
 800651a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800651c:	23c0      	movs	r3, #192	; 0xc0
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	401a      	ands	r2, r3
 8006522:	2380      	movs	r3, #128	; 0x80
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	429a      	cmp	r2, r3
 8006528:	d01d      	beq.n	8006566 <UART_SetConfig+0x192>
 800652a:	2380      	movs	r3, #128	; 0x80
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	429a      	cmp	r2, r3
 8006530:	d802      	bhi.n	8006538 <UART_SetConfig+0x164>
 8006532:	2a00      	cmp	r2, #0
 8006534:	d009      	beq.n	800654a <UART_SetConfig+0x176>
 8006536:	e024      	b.n	8006582 <UART_SetConfig+0x1ae>
 8006538:	2380      	movs	r3, #128	; 0x80
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	429a      	cmp	r2, r3
 800653e:	d00b      	beq.n	8006558 <UART_SetConfig+0x184>
 8006540:	23c0      	movs	r3, #192	; 0xc0
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	429a      	cmp	r2, r3
 8006546:	d015      	beq.n	8006574 <UART_SetConfig+0x1a0>
 8006548:	e01b      	b.n	8006582 <UART_SetConfig+0x1ae>
 800654a:	2323      	movs	r3, #35	; 0x23
 800654c:	2258      	movs	r2, #88	; 0x58
 800654e:	18ba      	adds	r2, r7, r2
 8006550:	18d2      	adds	r2, r2, r3
 8006552:	2300      	movs	r3, #0
 8006554:	7013      	strb	r3, [r2, #0]
 8006556:	e022      	b.n	800659e <UART_SetConfig+0x1ca>
 8006558:	2323      	movs	r3, #35	; 0x23
 800655a:	2258      	movs	r2, #88	; 0x58
 800655c:	18ba      	adds	r2, r7, r2
 800655e:	18d2      	adds	r2, r2, r3
 8006560:	2302      	movs	r3, #2
 8006562:	7013      	strb	r3, [r2, #0]
 8006564:	e01b      	b.n	800659e <UART_SetConfig+0x1ca>
 8006566:	2323      	movs	r3, #35	; 0x23
 8006568:	2258      	movs	r2, #88	; 0x58
 800656a:	18ba      	adds	r2, r7, r2
 800656c:	18d2      	adds	r2, r2, r3
 800656e:	2304      	movs	r3, #4
 8006570:	7013      	strb	r3, [r2, #0]
 8006572:	e014      	b.n	800659e <UART_SetConfig+0x1ca>
 8006574:	2323      	movs	r3, #35	; 0x23
 8006576:	2258      	movs	r2, #88	; 0x58
 8006578:	18ba      	adds	r2, r7, r2
 800657a:	18d2      	adds	r2, r2, r3
 800657c:	2308      	movs	r3, #8
 800657e:	7013      	strb	r3, [r2, #0]
 8006580:	e00d      	b.n	800659e <UART_SetConfig+0x1ca>
 8006582:	2323      	movs	r3, #35	; 0x23
 8006584:	2258      	movs	r2, #88	; 0x58
 8006586:	18ba      	adds	r2, r7, r2
 8006588:	18d2      	adds	r2, r2, r3
 800658a:	2310      	movs	r3, #16
 800658c:	7013      	strb	r3, [r2, #0]
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	e005      	b.n	800659e <UART_SetConfig+0x1ca>
 8006592:	2323      	movs	r3, #35	; 0x23
 8006594:	2258      	movs	r2, #88	; 0x58
 8006596:	18ba      	adds	r2, r7, r2
 8006598:	18d2      	adds	r2, r2, r3
 800659a:	2310      	movs	r3, #16
 800659c:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800659e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4b5e      	ldr	r3, [pc, #376]	; (800671c <UART_SetConfig+0x348>)
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d001      	beq.n	80065ac <UART_SetConfig+0x1d8>
 80065a8:	f000 fbe8 	bl	8006d7c <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065ac:	2323      	movs	r3, #35	; 0x23
 80065ae:	2258      	movs	r2, #88	; 0x58
 80065b0:	4694      	mov	ip, r2
 80065b2:	44bc      	add	ip, r7
 80065b4:	4463      	add	r3, ip
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d100      	bne.n	80065be <UART_SetConfig+0x1ea>
 80065bc:	e05e      	b.n	800667c <UART_SetConfig+0x2a8>
 80065be:	dc02      	bgt.n	80065c6 <UART_SetConfig+0x1f2>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <UART_SetConfig+0x200>
 80065c4:	e174      	b.n	80068b0 <UART_SetConfig+0x4dc>
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d100      	bne.n	80065cc <UART_SetConfig+0x1f8>
 80065ca:	e0c9      	b.n	8006760 <UART_SetConfig+0x38c>
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d100      	bne.n	80065d2 <UART_SetConfig+0x1fe>
 80065d0:	e11a      	b.n	8006808 <UART_SetConfig+0x434>
 80065d2:	e16d      	b.n	80068b0 <UART_SetConfig+0x4dc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80065d4:	f7fe fe62 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 80065d8:	0002      	movs	r2, r0
 80065da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d044      	beq.n	800666c <UART_SetConfig+0x298>
 80065e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d03e      	beq.n	8006668 <UART_SetConfig+0x294>
 80065ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d038      	beq.n	8006664 <UART_SetConfig+0x290>
 80065f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d032      	beq.n	8006660 <UART_SetConfig+0x28c>
 80065fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d02c      	beq.n	800665c <UART_SetConfig+0x288>
 8006602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	2b05      	cmp	r3, #5
 8006608:	d026      	beq.n	8006658 <UART_SetConfig+0x284>
 800660a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	2b06      	cmp	r3, #6
 8006610:	d020      	beq.n	8006654 <UART_SetConfig+0x280>
 8006612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	2b07      	cmp	r3, #7
 8006618:	d01a      	beq.n	8006650 <UART_SetConfig+0x27c>
 800661a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	2b08      	cmp	r3, #8
 8006620:	d014      	beq.n	800664c <UART_SetConfig+0x278>
 8006622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	2b09      	cmp	r3, #9
 8006628:	d00e      	beq.n	8006648 <UART_SetConfig+0x274>
 800662a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	2b0a      	cmp	r3, #10
 8006630:	d008      	beq.n	8006644 <UART_SetConfig+0x270>
 8006632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	2b0b      	cmp	r3, #11
 8006638:	d102      	bne.n	8006640 <UART_SetConfig+0x26c>
 800663a:	2380      	movs	r3, #128	; 0x80
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	e016      	b.n	800666e <UART_SetConfig+0x29a>
 8006640:	2301      	movs	r3, #1
 8006642:	e014      	b.n	800666e <UART_SetConfig+0x29a>
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	e012      	b.n	800666e <UART_SetConfig+0x29a>
 8006648:	2340      	movs	r3, #64	; 0x40
 800664a:	e010      	b.n	800666e <UART_SetConfig+0x29a>
 800664c:	2320      	movs	r3, #32
 800664e:	e00e      	b.n	800666e <UART_SetConfig+0x29a>
 8006650:	2310      	movs	r3, #16
 8006652:	e00c      	b.n	800666e <UART_SetConfig+0x29a>
 8006654:	230c      	movs	r3, #12
 8006656:	e00a      	b.n	800666e <UART_SetConfig+0x29a>
 8006658:	230a      	movs	r3, #10
 800665a:	e008      	b.n	800666e <UART_SetConfig+0x29a>
 800665c:	2308      	movs	r3, #8
 800665e:	e006      	b.n	800666e <UART_SetConfig+0x29a>
 8006660:	2306      	movs	r3, #6
 8006662:	e004      	b.n	800666e <UART_SetConfig+0x29a>
 8006664:	2304      	movs	r3, #4
 8006666:	e002      	b.n	800666e <UART_SetConfig+0x29a>
 8006668:	2302      	movs	r3, #2
 800666a:	e000      	b.n	800666e <UART_SetConfig+0x29a>
 800666c:	2301      	movs	r3, #1
 800666e:	0019      	movs	r1, r3
 8006670:	0010      	movs	r0, r2
 8006672:	f7f9 fd47 	bl	8000104 <__udivsi3>
 8006676:	0003      	movs	r3, r0
 8006678:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800667a:	e120      	b.n	80068be <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800667c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	d043      	beq.n	800670c <UART_SetConfig+0x338>
 8006684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	2b01      	cmp	r3, #1
 800668a:	d03d      	beq.n	8006708 <UART_SetConfig+0x334>
 800668c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	2b02      	cmp	r3, #2
 8006692:	d037      	beq.n	8006704 <UART_SetConfig+0x330>
 8006694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	2b03      	cmp	r3, #3
 800669a:	d031      	beq.n	8006700 <UART_SetConfig+0x32c>
 800669c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d02b      	beq.n	80066fc <UART_SetConfig+0x328>
 80066a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	2b05      	cmp	r3, #5
 80066aa:	d025      	beq.n	80066f8 <UART_SetConfig+0x324>
 80066ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	2b06      	cmp	r3, #6
 80066b2:	d01f      	beq.n	80066f4 <UART_SetConfig+0x320>
 80066b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	2b07      	cmp	r3, #7
 80066ba:	d019      	beq.n	80066f0 <UART_SetConfig+0x31c>
 80066bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d013      	beq.n	80066ec <UART_SetConfig+0x318>
 80066c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	2b09      	cmp	r3, #9
 80066ca:	d00d      	beq.n	80066e8 <UART_SetConfig+0x314>
 80066cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	2b0a      	cmp	r3, #10
 80066d2:	d007      	beq.n	80066e4 <UART_SetConfig+0x310>
 80066d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	2b0b      	cmp	r3, #11
 80066da:	d101      	bne.n	80066e0 <UART_SetConfig+0x30c>
 80066dc:	4b14      	ldr	r3, [pc, #80]	; (8006730 <UART_SetConfig+0x35c>)
 80066de:	e016      	b.n	800670e <UART_SetConfig+0x33a>
 80066e0:	4b14      	ldr	r3, [pc, #80]	; (8006734 <UART_SetConfig+0x360>)
 80066e2:	e014      	b.n	800670e <UART_SetConfig+0x33a>
 80066e4:	4b14      	ldr	r3, [pc, #80]	; (8006738 <UART_SetConfig+0x364>)
 80066e6:	e012      	b.n	800670e <UART_SetConfig+0x33a>
 80066e8:	4b14      	ldr	r3, [pc, #80]	; (800673c <UART_SetConfig+0x368>)
 80066ea:	e010      	b.n	800670e <UART_SetConfig+0x33a>
 80066ec:	4b14      	ldr	r3, [pc, #80]	; (8006740 <UART_SetConfig+0x36c>)
 80066ee:	e00e      	b.n	800670e <UART_SetConfig+0x33a>
 80066f0:	4b14      	ldr	r3, [pc, #80]	; (8006744 <UART_SetConfig+0x370>)
 80066f2:	e00c      	b.n	800670e <UART_SetConfig+0x33a>
 80066f4:	4b14      	ldr	r3, [pc, #80]	; (8006748 <UART_SetConfig+0x374>)
 80066f6:	e00a      	b.n	800670e <UART_SetConfig+0x33a>
 80066f8:	4b14      	ldr	r3, [pc, #80]	; (800674c <UART_SetConfig+0x378>)
 80066fa:	e008      	b.n	800670e <UART_SetConfig+0x33a>
 80066fc:	4b14      	ldr	r3, [pc, #80]	; (8006750 <UART_SetConfig+0x37c>)
 80066fe:	e006      	b.n	800670e <UART_SetConfig+0x33a>
 8006700:	4b14      	ldr	r3, [pc, #80]	; (8006754 <UART_SetConfig+0x380>)
 8006702:	e004      	b.n	800670e <UART_SetConfig+0x33a>
 8006704:	4b14      	ldr	r3, [pc, #80]	; (8006758 <UART_SetConfig+0x384>)
 8006706:	e002      	b.n	800670e <UART_SetConfig+0x33a>
 8006708:	4b14      	ldr	r3, [pc, #80]	; (800675c <UART_SetConfig+0x388>)
 800670a:	e000      	b.n	800670e <UART_SetConfig+0x33a>
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <UART_SetConfig+0x360>)
 800670e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8006710:	e0d5      	b.n	80068be <UART_SetConfig+0x4ea>
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	cfff69f3 	.word	0xcfff69f3
 8006718:	ffffcfff 	.word	0xffffcfff
 800671c:	40008000 	.word	0x40008000
 8006720:	11fff4ff 	.word	0x11fff4ff
 8006724:	40013800 	.word	0x40013800
 8006728:	40021000 	.word	0x40021000
 800672c:	40004400 	.word	0x40004400
 8006730:	0000f424 	.word	0x0000f424
 8006734:	00f42400 	.word	0x00f42400
 8006738:	0001e848 	.word	0x0001e848
 800673c:	0003d090 	.word	0x0003d090
 8006740:	0007a120 	.word	0x0007a120
 8006744:	000f4240 	.word	0x000f4240
 8006748:	00145855 	.word	0x00145855
 800674c:	00186a00 	.word	0x00186a00
 8006750:	001e8480 	.word	0x001e8480
 8006754:	0028b0aa 	.word	0x0028b0aa
 8006758:	003d0900 	.word	0x003d0900
 800675c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006760:	f7fe fd10 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8006764:	0002      	movs	r2, r0
 8006766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d044      	beq.n	80067f8 <UART_SetConfig+0x424>
 800676e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	2b01      	cmp	r3, #1
 8006774:	d03e      	beq.n	80067f4 <UART_SetConfig+0x420>
 8006776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	2b02      	cmp	r3, #2
 800677c:	d038      	beq.n	80067f0 <UART_SetConfig+0x41c>
 800677e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	2b03      	cmp	r3, #3
 8006784:	d032      	beq.n	80067ec <UART_SetConfig+0x418>
 8006786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	2b04      	cmp	r3, #4
 800678c:	d02c      	beq.n	80067e8 <UART_SetConfig+0x414>
 800678e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	2b05      	cmp	r3, #5
 8006794:	d026      	beq.n	80067e4 <UART_SetConfig+0x410>
 8006796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	2b06      	cmp	r3, #6
 800679c:	d020      	beq.n	80067e0 <UART_SetConfig+0x40c>
 800679e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	2b07      	cmp	r3, #7
 80067a4:	d01a      	beq.n	80067dc <UART_SetConfig+0x408>
 80067a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d014      	beq.n	80067d8 <UART_SetConfig+0x404>
 80067ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2b09      	cmp	r3, #9
 80067b4:	d00e      	beq.n	80067d4 <UART_SetConfig+0x400>
 80067b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	2b0a      	cmp	r3, #10
 80067bc:	d008      	beq.n	80067d0 <UART_SetConfig+0x3fc>
 80067be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	2b0b      	cmp	r3, #11
 80067c4:	d102      	bne.n	80067cc <UART_SetConfig+0x3f8>
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	e016      	b.n	80067fa <UART_SetConfig+0x426>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e014      	b.n	80067fa <UART_SetConfig+0x426>
 80067d0:	2380      	movs	r3, #128	; 0x80
 80067d2:	e012      	b.n	80067fa <UART_SetConfig+0x426>
 80067d4:	2340      	movs	r3, #64	; 0x40
 80067d6:	e010      	b.n	80067fa <UART_SetConfig+0x426>
 80067d8:	2320      	movs	r3, #32
 80067da:	e00e      	b.n	80067fa <UART_SetConfig+0x426>
 80067dc:	2310      	movs	r3, #16
 80067de:	e00c      	b.n	80067fa <UART_SetConfig+0x426>
 80067e0:	230c      	movs	r3, #12
 80067e2:	e00a      	b.n	80067fa <UART_SetConfig+0x426>
 80067e4:	230a      	movs	r3, #10
 80067e6:	e008      	b.n	80067fa <UART_SetConfig+0x426>
 80067e8:	2308      	movs	r3, #8
 80067ea:	e006      	b.n	80067fa <UART_SetConfig+0x426>
 80067ec:	2306      	movs	r3, #6
 80067ee:	e004      	b.n	80067fa <UART_SetConfig+0x426>
 80067f0:	2304      	movs	r3, #4
 80067f2:	e002      	b.n	80067fa <UART_SetConfig+0x426>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e000      	b.n	80067fa <UART_SetConfig+0x426>
 80067f8:	2301      	movs	r3, #1
 80067fa:	0019      	movs	r1, r3
 80067fc:	0010      	movs	r0, r2
 80067fe:	f7f9 fc81 	bl	8000104 <__udivsi3>
 8006802:	0003      	movs	r3, r0
 8006804:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8006806:	e05a      	b.n	80068be <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d04b      	beq.n	80068a8 <UART_SetConfig+0x4d4>
 8006810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	2b01      	cmp	r3, #1
 8006816:	d044      	beq.n	80068a2 <UART_SetConfig+0x4ce>
 8006818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	2b02      	cmp	r3, #2
 800681e:	d03d      	beq.n	800689c <UART_SetConfig+0x4c8>
 8006820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	2b03      	cmp	r3, #3
 8006826:	d037      	beq.n	8006898 <UART_SetConfig+0x4c4>
 8006828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	2b04      	cmp	r3, #4
 800682e:	d030      	beq.n	8006892 <UART_SetConfig+0x4be>
 8006830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	2b05      	cmp	r3, #5
 8006836:	d02a      	beq.n	800688e <UART_SetConfig+0x4ba>
 8006838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	2b06      	cmp	r3, #6
 800683e:	d024      	beq.n	800688a <UART_SetConfig+0x4b6>
 8006840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	2b07      	cmp	r3, #7
 8006846:	d01d      	beq.n	8006884 <UART_SetConfig+0x4b0>
 8006848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	2b08      	cmp	r3, #8
 800684e:	d016      	beq.n	800687e <UART_SetConfig+0x4aa>
 8006850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	2b09      	cmp	r3, #9
 8006856:	d00f      	beq.n	8006878 <UART_SetConfig+0x4a4>
 8006858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	2b0a      	cmp	r3, #10
 800685e:	d008      	beq.n	8006872 <UART_SetConfig+0x49e>
 8006860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	2b0b      	cmp	r3, #11
 8006866:	d101      	bne.n	800686c <UART_SetConfig+0x498>
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	e01f      	b.n	80068ac <UART_SetConfig+0x4d8>
 800686c:	2380      	movs	r3, #128	; 0x80
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	e01c      	b.n	80068ac <UART_SetConfig+0x4d8>
 8006872:	2380      	movs	r3, #128	; 0x80
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	e019      	b.n	80068ac <UART_SetConfig+0x4d8>
 8006878:	2380      	movs	r3, #128	; 0x80
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	e016      	b.n	80068ac <UART_SetConfig+0x4d8>
 800687e:	2380      	movs	r3, #128	; 0x80
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	e013      	b.n	80068ac <UART_SetConfig+0x4d8>
 8006884:	2380      	movs	r3, #128	; 0x80
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	e010      	b.n	80068ac <UART_SetConfig+0x4d8>
 800688a:	4bbf      	ldr	r3, [pc, #764]	; (8006b88 <UART_SetConfig+0x7b4>)
 800688c:	e00e      	b.n	80068ac <UART_SetConfig+0x4d8>
 800688e:	4bbf      	ldr	r3, [pc, #764]	; (8006b8c <UART_SetConfig+0x7b8>)
 8006890:	e00c      	b.n	80068ac <UART_SetConfig+0x4d8>
 8006892:	2380      	movs	r3, #128	; 0x80
 8006894:	015b      	lsls	r3, r3, #5
 8006896:	e009      	b.n	80068ac <UART_SetConfig+0x4d8>
 8006898:	4bbd      	ldr	r3, [pc, #756]	; (8006b90 <UART_SetConfig+0x7bc>)
 800689a:	e007      	b.n	80068ac <UART_SetConfig+0x4d8>
 800689c:	2380      	movs	r3, #128	; 0x80
 800689e:	019b      	lsls	r3, r3, #6
 80068a0:	e004      	b.n	80068ac <UART_SetConfig+0x4d8>
 80068a2:	2380      	movs	r3, #128	; 0x80
 80068a4:	01db      	lsls	r3, r3, #7
 80068a6:	e001      	b.n	80068ac <UART_SetConfig+0x4d8>
 80068a8:	2380      	movs	r3, #128	; 0x80
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80068ae:	e006      	b.n	80068be <UART_SetConfig+0x4ea>
      default:
        ret = HAL_ERROR;
 80068b0:	231b      	movs	r3, #27
 80068b2:	2258      	movs	r2, #88	; 0x58
 80068b4:	18ba      	adds	r2, r7, r2
 80068b6:	18d2      	adds	r2, r2, r3
 80068b8:	2301      	movs	r3, #1
 80068ba:	7013      	strb	r3, [r2, #0]
        break;
 80068bc:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80068be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <UART_SetConfig+0x4f4>
 80068c4:	f000 fe14 	bl	80074f0 <UART_SetConfig+0x111c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	0013      	movs	r3, r2
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	189a      	adds	r2, r3, r2
 80068d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d305      	bcc.n	80068e4 <UART_SetConfig+0x510>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d908      	bls.n	80068f6 <UART_SetConfig+0x522>
      {
        ret = HAL_ERROR;
 80068e4:	231b      	movs	r3, #27
 80068e6:	2258      	movs	r2, #88	; 0x58
 80068e8:	4694      	mov	ip, r2
 80068ea:	44bc      	add	ip, r7
 80068ec:	4463      	add	r3, ip
 80068ee:	2201      	movs	r2, #1
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	f000 fdfd 	bl	80074f0 <UART_SetConfig+0x111c>
      }
      else
      {
        switch (clocksource)
 80068f6:	2323      	movs	r3, #35	; 0x23
 80068f8:	2258      	movs	r2, #88	; 0x58
 80068fa:	4694      	mov	ip, r2
 80068fc:	44bc      	add	ip, r7
 80068fe:	4463      	add	r3, ip
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d100      	bne.n	8006908 <UART_SetConfig+0x534>
 8006906:	e08c      	b.n	8006a22 <UART_SetConfig+0x64e>
 8006908:	dc02      	bgt.n	8006910 <UART_SetConfig+0x53c>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <UART_SetConfig+0x54a>
 800690e:	e216      	b.n	8006d3e <UART_SetConfig+0x96a>
 8006910:	2b04      	cmp	r3, #4
 8006912:	d100      	bne.n	8006916 <UART_SetConfig+0x542>
 8006914:	e0f2      	b.n	8006afc <UART_SetConfig+0x728>
 8006916:	2b08      	cmp	r3, #8
 8006918:	d100      	bne.n	800691c <UART_SetConfig+0x548>
 800691a:	e199      	b.n	8006c50 <UART_SetConfig+0x87c>
 800691c:	e20f      	b.n	8006d3e <UART_SetConfig+0x96a>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800691e:	f7fe fcbd 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8006922:	0003      	movs	r3, r0
 8006924:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006928:	64bb      	str	r3, [r7, #72]	; 0x48
 800692a:	2300      	movs	r3, #0
 800692c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800692e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	2b00      	cmp	r3, #0
 8006934:	d050      	beq.n	80069d8 <UART_SetConfig+0x604>
 8006936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	2b01      	cmp	r3, #1
 800693c:	d049      	beq.n	80069d2 <UART_SetConfig+0x5fe>
 800693e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	2b02      	cmp	r3, #2
 8006944:	d042      	beq.n	80069cc <UART_SetConfig+0x5f8>
 8006946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	2b03      	cmp	r3, #3
 800694c:	d03b      	beq.n	80069c6 <UART_SetConfig+0x5f2>
 800694e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	2b04      	cmp	r3, #4
 8006954:	d034      	beq.n	80069c0 <UART_SetConfig+0x5ec>
 8006956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	2b05      	cmp	r3, #5
 800695c:	d02d      	beq.n	80069ba <UART_SetConfig+0x5e6>
 800695e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	2b06      	cmp	r3, #6
 8006964:	d026      	beq.n	80069b4 <UART_SetConfig+0x5e0>
 8006966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	2b07      	cmp	r3, #7
 800696c:	d01f      	beq.n	80069ae <UART_SetConfig+0x5da>
 800696e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2b08      	cmp	r3, #8
 8006974:	d018      	beq.n	80069a8 <UART_SetConfig+0x5d4>
 8006976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	2b09      	cmp	r3, #9
 800697c:	d011      	beq.n	80069a2 <UART_SetConfig+0x5ce>
 800697e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	2b0a      	cmp	r3, #10
 8006984:	d00a      	beq.n	800699c <UART_SetConfig+0x5c8>
 8006986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	2b0b      	cmp	r3, #11
 800698c:	d103      	bne.n	8006996 <UART_SetConfig+0x5c2>
 800698e:	2380      	movs	r3, #128	; 0x80
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	2400      	movs	r4, #0
 8006994:	e022      	b.n	80069dc <UART_SetConfig+0x608>
 8006996:	2301      	movs	r3, #1
 8006998:	2400      	movs	r4, #0
 800699a:	e01f      	b.n	80069dc <UART_SetConfig+0x608>
 800699c:	2380      	movs	r3, #128	; 0x80
 800699e:	2400      	movs	r4, #0
 80069a0:	e01c      	b.n	80069dc <UART_SetConfig+0x608>
 80069a2:	2340      	movs	r3, #64	; 0x40
 80069a4:	2400      	movs	r4, #0
 80069a6:	e019      	b.n	80069dc <UART_SetConfig+0x608>
 80069a8:	2320      	movs	r3, #32
 80069aa:	2400      	movs	r4, #0
 80069ac:	e016      	b.n	80069dc <UART_SetConfig+0x608>
 80069ae:	2310      	movs	r3, #16
 80069b0:	2400      	movs	r4, #0
 80069b2:	e013      	b.n	80069dc <UART_SetConfig+0x608>
 80069b4:	230c      	movs	r3, #12
 80069b6:	2400      	movs	r4, #0
 80069b8:	e010      	b.n	80069dc <UART_SetConfig+0x608>
 80069ba:	230a      	movs	r3, #10
 80069bc:	2400      	movs	r4, #0
 80069be:	e00d      	b.n	80069dc <UART_SetConfig+0x608>
 80069c0:	2308      	movs	r3, #8
 80069c2:	2400      	movs	r4, #0
 80069c4:	e00a      	b.n	80069dc <UART_SetConfig+0x608>
 80069c6:	2306      	movs	r3, #6
 80069c8:	2400      	movs	r4, #0
 80069ca:	e007      	b.n	80069dc <UART_SetConfig+0x608>
 80069cc:	2304      	movs	r3, #4
 80069ce:	2400      	movs	r4, #0
 80069d0:	e004      	b.n	80069dc <UART_SetConfig+0x608>
 80069d2:	2302      	movs	r3, #2
 80069d4:	2400      	movs	r4, #0
 80069d6:	e001      	b.n	80069dc <UART_SetConfig+0x608>
 80069d8:	2301      	movs	r3, #1
 80069da:	2400      	movs	r4, #0
 80069dc:	001a      	movs	r2, r3
 80069de:	0023      	movs	r3, r4
 80069e0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80069e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80069e4:	f7f9 fd3e 	bl	8000464 <__aeabi_uldivmod>
 80069e8:	0003      	movs	r3, r0
 80069ea:	000c      	movs	r4, r1
 80069ec:	0e1a      	lsrs	r2, r3, #24
 80069ee:	0226      	lsls	r6, r4, #8
 80069f0:	4316      	orrs	r6, r2
 80069f2:	021d      	lsls	r5, r3, #8
 80069f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	643b      	str	r3, [r7, #64]	; 0x40
 80069fc:	2300      	movs	r3, #0
 80069fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006a00:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a04:	1940      	adds	r0, r0, r5
 8006a06:	4171      	adcs	r1, r6
 8006a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a0e:	2300      	movs	r3, #0
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a16:	f7f9 fd25 	bl	8000464 <__aeabi_uldivmod>
 8006a1a:	0003      	movs	r3, r0
 8006a1c:	000c      	movs	r4, r1
 8006a1e:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8006a20:	e195      	b.n	8006d4e <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d04f      	beq.n	8006aca <UART_SetConfig+0x6f6>
 8006a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d048      	beq.n	8006ac4 <UART_SetConfig+0x6f0>
 8006a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d041      	beq.n	8006abe <UART_SetConfig+0x6ea>
 8006a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d03a      	beq.n	8006ab8 <UART_SetConfig+0x6e4>
 8006a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d033      	beq.n	8006ab2 <UART_SetConfig+0x6de>
 8006a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	2b05      	cmp	r3, #5
 8006a50:	d02c      	beq.n	8006aac <UART_SetConfig+0x6d8>
 8006a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	2b06      	cmp	r3, #6
 8006a58:	d025      	beq.n	8006aa6 <UART_SetConfig+0x6d2>
 8006a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	2b07      	cmp	r3, #7
 8006a60:	d01e      	beq.n	8006aa0 <UART_SetConfig+0x6cc>
 8006a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d017      	beq.n	8006a9a <UART_SetConfig+0x6c6>
 8006a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	2b09      	cmp	r3, #9
 8006a70:	d010      	beq.n	8006a94 <UART_SetConfig+0x6c0>
 8006a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2b0a      	cmp	r3, #10
 8006a78:	d009      	beq.n	8006a8e <UART_SetConfig+0x6ba>
 8006a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	2b0b      	cmp	r3, #11
 8006a80:	d102      	bne.n	8006a88 <UART_SetConfig+0x6b4>
 8006a82:	4b44      	ldr	r3, [pc, #272]	; (8006b94 <UART_SetConfig+0x7c0>)
 8006a84:	2400      	movs	r4, #0
 8006a86:	e022      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006a88:	4b43      	ldr	r3, [pc, #268]	; (8006b98 <UART_SetConfig+0x7c4>)
 8006a8a:	2400      	movs	r4, #0
 8006a8c:	e01f      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006a8e:	4b43      	ldr	r3, [pc, #268]	; (8006b9c <UART_SetConfig+0x7c8>)
 8006a90:	2400      	movs	r4, #0
 8006a92:	e01c      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006a94:	4b42      	ldr	r3, [pc, #264]	; (8006ba0 <UART_SetConfig+0x7cc>)
 8006a96:	2400      	movs	r4, #0
 8006a98:	e019      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006a9a:	4b42      	ldr	r3, [pc, #264]	; (8006ba4 <UART_SetConfig+0x7d0>)
 8006a9c:	2400      	movs	r4, #0
 8006a9e:	e016      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006aa0:	4b41      	ldr	r3, [pc, #260]	; (8006ba8 <UART_SetConfig+0x7d4>)
 8006aa2:	2400      	movs	r4, #0
 8006aa4:	e013      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006aa6:	4b41      	ldr	r3, [pc, #260]	; (8006bac <UART_SetConfig+0x7d8>)
 8006aa8:	2400      	movs	r4, #0
 8006aaa:	e010      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006aac:	4b40      	ldr	r3, [pc, #256]	; (8006bb0 <UART_SetConfig+0x7dc>)
 8006aae:	2400      	movs	r4, #0
 8006ab0:	e00d      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006ab2:	4b40      	ldr	r3, [pc, #256]	; (8006bb4 <UART_SetConfig+0x7e0>)
 8006ab4:	2400      	movs	r4, #0
 8006ab6:	e00a      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006ab8:	4b3f      	ldr	r3, [pc, #252]	; (8006bb8 <UART_SetConfig+0x7e4>)
 8006aba:	2400      	movs	r4, #0
 8006abc:	e007      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006abe:	4b3f      	ldr	r3, [pc, #252]	; (8006bbc <UART_SetConfig+0x7e8>)
 8006ac0:	2400      	movs	r4, #0
 8006ac2:	e004      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006ac4:	4b3e      	ldr	r3, [pc, #248]	; (8006bc0 <UART_SetConfig+0x7ec>)
 8006ac6:	2400      	movs	r4, #0
 8006ac8:	e001      	b.n	8006ace <UART_SetConfig+0x6fa>
 8006aca:	4b33      	ldr	r3, [pc, #204]	; (8006b98 <UART_SetConfig+0x7c4>)
 8006acc:	2400      	movs	r4, #0
 8006ace:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ad0:	6852      	ldr	r2, [r2, #4]
 8006ad2:	0852      	lsrs	r2, r2, #1
 8006ad4:	633a      	str	r2, [r7, #48]	; 0x30
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	637a      	str	r2, [r7, #52]	; 0x34
 8006ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006adc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ade:	18c0      	adds	r0, r0, r3
 8006ae0:	4161      	adcs	r1, r4
 8006ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae8:	2300      	movs	r3, #0
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	f7f9 fcb8 	bl	8000464 <__aeabi_uldivmod>
 8006af4:	0003      	movs	r3, r0
 8006af6:	000c      	movs	r4, r1
 8006af8:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8006afa:	e128      	b.n	8006d4e <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006afc:	f7fe fb42 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8006b00:	0003      	movs	r3, r0
 8006b02:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d100      	bne.n	8006b16 <UART_SetConfig+0x742>
 8006b14:	e071      	b.n	8006bfa <UART_SetConfig+0x826>
 8006b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d100      	bne.n	8006b20 <UART_SetConfig+0x74c>
 8006b1e:	e069      	b.n	8006bf4 <UART_SetConfig+0x820>
 8006b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d100      	bne.n	8006b2a <UART_SetConfig+0x756>
 8006b28:	e061      	b.n	8006bee <UART_SetConfig+0x81a>
 8006b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d05a      	beq.n	8006be8 <UART_SetConfig+0x814>
 8006b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d053      	beq.n	8006be2 <UART_SetConfig+0x80e>
 8006b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d04c      	beq.n	8006bdc <UART_SetConfig+0x808>
 8006b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	2b06      	cmp	r3, #6
 8006b48:	d045      	beq.n	8006bd6 <UART_SetConfig+0x802>
 8006b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	2b07      	cmp	r3, #7
 8006b50:	d03e      	beq.n	8006bd0 <UART_SetConfig+0x7fc>
 8006b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d037      	beq.n	8006bca <UART_SetConfig+0x7f6>
 8006b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	2b09      	cmp	r3, #9
 8006b60:	d030      	beq.n	8006bc4 <UART_SetConfig+0x7f0>
 8006b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	2b0a      	cmp	r3, #10
 8006b68:	d00a      	beq.n	8006b80 <UART_SetConfig+0x7ac>
 8006b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	2b0b      	cmp	r3, #11
 8006b70:	d103      	bne.n	8006b7a <UART_SetConfig+0x7a6>
 8006b72:	2380      	movs	r3, #128	; 0x80
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	2400      	movs	r4, #0
 8006b78:	e041      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	2400      	movs	r4, #0
 8006b7e:	e03e      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006b80:	2380      	movs	r3, #128	; 0x80
 8006b82:	2400      	movs	r4, #0
 8006b84:	e03b      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	00000aaa 	.word	0x00000aaa
 8006b8c:	00000ccc 	.word	0x00000ccc
 8006b90:	00001555 	.word	0x00001555
 8006b94:	00f42400 	.word	0x00f42400
 8006b98:	f4240000 	.word	0xf4240000
 8006b9c:	01e84800 	.word	0x01e84800
 8006ba0:	03d09000 	.word	0x03d09000
 8006ba4:	07a12000 	.word	0x07a12000
 8006ba8:	0f424000 	.word	0x0f424000
 8006bac:	14585500 	.word	0x14585500
 8006bb0:	186a0000 	.word	0x186a0000
 8006bb4:	1e848000 	.word	0x1e848000
 8006bb8:	28b0aa00 	.word	0x28b0aa00
 8006bbc:	3d090000 	.word	0x3d090000
 8006bc0:	7a120000 	.word	0x7a120000
 8006bc4:	2340      	movs	r3, #64	; 0x40
 8006bc6:	2400      	movs	r4, #0
 8006bc8:	e019      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006bca:	2320      	movs	r3, #32
 8006bcc:	2400      	movs	r4, #0
 8006bce:	e016      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006bd0:	2310      	movs	r3, #16
 8006bd2:	2400      	movs	r4, #0
 8006bd4:	e013      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	2400      	movs	r4, #0
 8006bda:	e010      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006bdc:	230a      	movs	r3, #10
 8006bde:	2400      	movs	r4, #0
 8006be0:	e00d      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006be2:	2308      	movs	r3, #8
 8006be4:	2400      	movs	r4, #0
 8006be6:	e00a      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006be8:	2306      	movs	r3, #6
 8006bea:	2400      	movs	r4, #0
 8006bec:	e007      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006bee:	2304      	movs	r3, #4
 8006bf0:	2400      	movs	r4, #0
 8006bf2:	e004      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	2400      	movs	r4, #0
 8006bf8:	e001      	b.n	8006bfe <UART_SetConfig+0x82a>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	2400      	movs	r4, #0
 8006bfe:	001a      	movs	r2, r3
 8006c00:	0023      	movs	r3, r4
 8006c02:	6a38      	ldr	r0, [r7, #32]
 8006c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c06:	f7f9 fc2d 	bl	8000464 <__aeabi_uldivmod>
 8006c0a:	0003      	movs	r3, r0
 8006c0c:	000c      	movs	r4, r1
 8006c0e:	0e1a      	lsrs	r2, r3, #24
 8006c10:	0221      	lsls	r1, r4, #8
 8006c12:	6579      	str	r1, [r7, #84]	; 0x54
 8006c14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c16:	4311      	orrs	r1, r2
 8006c18:	6579      	str	r1, [r7, #84]	; 0x54
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	69fc      	ldr	r4, [r7, #28]
 8006c32:	18c0      	adds	r0, r0, r3
 8006c34:	4161      	adcs	r1, r4
 8006c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f7f9 fc0e 	bl	8000464 <__aeabi_uldivmod>
 8006c48:	0003      	movs	r3, r0
 8006c4a:	000c      	movs	r4, r1
 8006c4c:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8006c4e:	e07e      	b.n	8006d4e <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d058      	beq.n	8006d0a <UART_SetConfig+0x936>
 8006c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d050      	beq.n	8006d02 <UART_SetConfig+0x92e>
 8006c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d048      	beq.n	8006cfa <UART_SetConfig+0x926>
 8006c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d041      	beq.n	8006cf4 <UART_SetConfig+0x920>
 8006c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d039      	beq.n	8006cec <UART_SetConfig+0x918>
 8006c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	2b05      	cmp	r3, #5
 8006c7e:	d032      	beq.n	8006ce6 <UART_SetConfig+0x912>
 8006c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2b06      	cmp	r3, #6
 8006c86:	d02b      	beq.n	8006ce0 <UART_SetConfig+0x90c>
 8006c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2b07      	cmp	r3, #7
 8006c8e:	d023      	beq.n	8006cd8 <UART_SetConfig+0x904>
 8006c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d01b      	beq.n	8006cd0 <UART_SetConfig+0x8fc>
 8006c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	2b09      	cmp	r3, #9
 8006c9e:	d013      	beq.n	8006cc8 <UART_SetConfig+0x8f4>
 8006ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b0a      	cmp	r3, #10
 8006ca6:	d00b      	beq.n	8006cc0 <UART_SetConfig+0x8ec>
 8006ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	2b0b      	cmp	r3, #11
 8006cae:	d103      	bne.n	8006cb8 <UART_SetConfig+0x8e4>
 8006cb0:	2380      	movs	r3, #128	; 0x80
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	e02b      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	2400      	movs	r4, #0
 8006cbe:	e027      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006cc0:	2380      	movs	r3, #128	; 0x80
 8006cc2:	025b      	lsls	r3, r3, #9
 8006cc4:	2400      	movs	r4, #0
 8006cc6:	e023      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006cc8:	2380      	movs	r3, #128	; 0x80
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	2400      	movs	r4, #0
 8006cce:	e01f      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006cd0:	2380      	movs	r3, #128	; 0x80
 8006cd2:	02db      	lsls	r3, r3, #11
 8006cd4:	2400      	movs	r4, #0
 8006cd6:	e01b      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006cd8:	2380      	movs	r3, #128	; 0x80
 8006cda:	031b      	lsls	r3, r3, #12
 8006cdc:	2400      	movs	r4, #0
 8006cde:	e017      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006ce0:	4bb7      	ldr	r3, [pc, #732]	; (8006fc0 <UART_SetConfig+0xbec>)
 8006ce2:	2400      	movs	r4, #0
 8006ce4:	e014      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006ce6:	4bb7      	ldr	r3, [pc, #732]	; (8006fc4 <UART_SetConfig+0xbf0>)
 8006ce8:	2400      	movs	r4, #0
 8006cea:	e011      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006cec:	2380      	movs	r3, #128	; 0x80
 8006cee:	035b      	lsls	r3, r3, #13
 8006cf0:	2400      	movs	r4, #0
 8006cf2:	e00d      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006cf4:	4bb4      	ldr	r3, [pc, #720]	; (8006fc8 <UART_SetConfig+0xbf4>)
 8006cf6:	2400      	movs	r4, #0
 8006cf8:	e00a      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006cfa:	2380      	movs	r3, #128	; 0x80
 8006cfc:	039b      	lsls	r3, r3, #14
 8006cfe:	2400      	movs	r4, #0
 8006d00:	e006      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006d02:	2380      	movs	r3, #128	; 0x80
 8006d04:	03db      	lsls	r3, r3, #15
 8006d06:	2400      	movs	r4, #0
 8006d08:	e002      	b.n	8006d10 <UART_SetConfig+0x93c>
 8006d0a:	2380      	movs	r3, #128	; 0x80
 8006d0c:	041b      	lsls	r3, r3, #16
 8006d0e:	2400      	movs	r4, #0
 8006d10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d12:	6852      	ldr	r2, [r2, #4]
 8006d14:	0852      	lsrs	r2, r2, #1
 8006d16:	60ba      	str	r2, [r7, #8]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	60fa      	str	r2, [r7, #12]
 8006d1c:	68b8      	ldr	r0, [r7, #8]
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	18c0      	adds	r0, r0, r3
 8006d22:	4161      	adcs	r1, r4
 8006d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	603b      	str	r3, [r7, #0]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	607b      	str	r3, [r7, #4]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f7f9 fb97 	bl	8000464 <__aeabi_uldivmod>
 8006d36:	0003      	movs	r3, r0
 8006d38:	000c      	movs	r4, r1
 8006d3a:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8006d3c:	e007      	b.n	8006d4e <UART_SetConfig+0x97a>
          default:
            ret = HAL_ERROR;
 8006d3e:	231b      	movs	r3, #27
 8006d40:	2258      	movs	r2, #88	; 0x58
 8006d42:	4694      	mov	ip, r2
 8006d44:	44bc      	add	ip, r7
 8006d46:	4463      	add	r3, ip
 8006d48:	2201      	movs	r2, #1
 8006d4a:	701a      	strb	r2, [r3, #0]
            break;
 8006d4c:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d50:	4a9e      	ldr	r2, [pc, #632]	; (8006fcc <UART_SetConfig+0xbf8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d909      	bls.n	8006d6a <UART_SetConfig+0x996>
 8006d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d58:	4a9d      	ldr	r2, [pc, #628]	; (8006fd0 <UART_SetConfig+0xbfc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d805      	bhi.n	8006d6a <UART_SetConfig+0x996>
        {
          huart->Instance->BRR = usartdiv;
 8006d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	f000 fbc3 	bl	80074f0 <UART_SetConfig+0x111c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d6a:	231b      	movs	r3, #27
 8006d6c:	2258      	movs	r2, #88	; 0x58
 8006d6e:	4694      	mov	ip, r2
 8006d70:	44bc      	add	ip, r7
 8006d72:	4463      	add	r3, ip
 8006d74:	2201      	movs	r2, #1
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	f000 fbba 	bl	80074f0 <UART_SetConfig+0x111c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	2380      	movs	r3, #128	; 0x80
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d000      	beq.n	8006d8a <UART_SetConfig+0x9b6>
 8006d88:	e1e6      	b.n	8007158 <UART_SetConfig+0xd84>
  {
    switch (clocksource)
 8006d8a:	2323      	movs	r3, #35	; 0x23
 8006d8c:	2258      	movs	r2, #88	; 0x58
 8006d8e:	4694      	mov	ip, r2
 8006d90:	44bc      	add	ip, r7
 8006d92:	4463      	add	r3, ip
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d100      	bne.n	8006d9c <UART_SetConfig+0x9c8>
 8006d9a:	e06c      	b.n	8006e76 <UART_SetConfig+0xaa2>
 8006d9c:	dc02      	bgt.n	8006da4 <UART_SetConfig+0x9d0>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <UART_SetConfig+0x9de>
 8006da2:	e1a5      	b.n	80070f0 <UART_SetConfig+0xd1c>
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d100      	bne.n	8006daa <UART_SetConfig+0x9d6>
 8006da8:	e0bc      	b.n	8006f24 <UART_SetConfig+0xb50>
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d100      	bne.n	8006db0 <UART_SetConfig+0x9dc>
 8006dae:	e13e      	b.n	800702e <UART_SetConfig+0xc5a>
 8006db0:	e19e      	b.n	80070f0 <UART_SetConfig+0xd1c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db2:	f7fe fa73 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8006db6:	0003      	movs	r3, r0
 8006db8:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d044      	beq.n	8006e4c <UART_SetConfig+0xa78>
 8006dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d03e      	beq.n	8006e48 <UART_SetConfig+0xa74>
 8006dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d038      	beq.n	8006e44 <UART_SetConfig+0xa70>
 8006dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d032      	beq.n	8006e40 <UART_SetConfig+0xa6c>
 8006dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d02c      	beq.n	8006e3c <UART_SetConfig+0xa68>
 8006de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	2b05      	cmp	r3, #5
 8006de8:	d026      	beq.n	8006e38 <UART_SetConfig+0xa64>
 8006dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	2b06      	cmp	r3, #6
 8006df0:	d020      	beq.n	8006e34 <UART_SetConfig+0xa60>
 8006df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	2b07      	cmp	r3, #7
 8006df8:	d01a      	beq.n	8006e30 <UART_SetConfig+0xa5c>
 8006dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	2b08      	cmp	r3, #8
 8006e00:	d014      	beq.n	8006e2c <UART_SetConfig+0xa58>
 8006e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	2b09      	cmp	r3, #9
 8006e08:	d00e      	beq.n	8006e28 <UART_SetConfig+0xa54>
 8006e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	2b0a      	cmp	r3, #10
 8006e10:	d008      	beq.n	8006e24 <UART_SetConfig+0xa50>
 8006e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	2b0b      	cmp	r3, #11
 8006e18:	d102      	bne.n	8006e20 <UART_SetConfig+0xa4c>
 8006e1a:	2380      	movs	r3, #128	; 0x80
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	e016      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e014      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e24:	2380      	movs	r3, #128	; 0x80
 8006e26:	e012      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e28:	2340      	movs	r3, #64	; 0x40
 8006e2a:	e010      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e2c:	2320      	movs	r3, #32
 8006e2e:	e00e      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e30:	2310      	movs	r3, #16
 8006e32:	e00c      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e34:	230c      	movs	r3, #12
 8006e36:	e00a      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e38:	230a      	movs	r3, #10
 8006e3a:	e008      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	e006      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e40:	2306      	movs	r3, #6
 8006e42:	e004      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e44:	2304      	movs	r3, #4
 8006e46:	e002      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e000      	b.n	8006e4e <UART_SetConfig+0xa7a>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	0019      	movs	r1, r3
 8006e50:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006e52:	f7f9 f957 	bl	8000104 <__udivsi3>
 8006e56:	0003      	movs	r3, r0
 8006e58:	005a      	lsls	r2, r3, #1
 8006e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	18d2      	adds	r2, r2, r3
 8006e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	0019      	movs	r1, r3
 8006e68:	0010      	movs	r0, r2
 8006e6a:	f7f9 f94b 	bl	8000104 <__udivsi3>
 8006e6e:	0003      	movs	r3, r0
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8006e74:	e144      	b.n	8007100 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d043      	beq.n	8006f06 <UART_SetConfig+0xb32>
 8006e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d03d      	beq.n	8006f02 <UART_SetConfig+0xb2e>
 8006e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d037      	beq.n	8006efe <UART_SetConfig+0xb2a>
 8006e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d031      	beq.n	8006efa <UART_SetConfig+0xb26>
 8006e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d02b      	beq.n	8006ef6 <UART_SetConfig+0xb22>
 8006e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	2b05      	cmp	r3, #5
 8006ea4:	d025      	beq.n	8006ef2 <UART_SetConfig+0xb1e>
 8006ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	2b06      	cmp	r3, #6
 8006eac:	d01f      	beq.n	8006eee <UART_SetConfig+0xb1a>
 8006eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	2b07      	cmp	r3, #7
 8006eb4:	d019      	beq.n	8006eea <UART_SetConfig+0xb16>
 8006eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d013      	beq.n	8006ee6 <UART_SetConfig+0xb12>
 8006ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	2b09      	cmp	r3, #9
 8006ec4:	d00d      	beq.n	8006ee2 <UART_SetConfig+0xb0e>
 8006ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	2b0a      	cmp	r3, #10
 8006ecc:	d007      	beq.n	8006ede <UART_SetConfig+0xb0a>
 8006ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	2b0b      	cmp	r3, #11
 8006ed4:	d101      	bne.n	8006eda <UART_SetConfig+0xb06>
 8006ed6:	4b3f      	ldr	r3, [pc, #252]	; (8006fd4 <UART_SetConfig+0xc00>)
 8006ed8:	e016      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006eda:	4b3f      	ldr	r3, [pc, #252]	; (8006fd8 <UART_SetConfig+0xc04>)
 8006edc:	e014      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006ede:	4b3f      	ldr	r3, [pc, #252]	; (8006fdc <UART_SetConfig+0xc08>)
 8006ee0:	e012      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006ee2:	4b3f      	ldr	r3, [pc, #252]	; (8006fe0 <UART_SetConfig+0xc0c>)
 8006ee4:	e010      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006ee6:	4b3f      	ldr	r3, [pc, #252]	; (8006fe4 <UART_SetConfig+0xc10>)
 8006ee8:	e00e      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006eea:	4b3f      	ldr	r3, [pc, #252]	; (8006fe8 <UART_SetConfig+0xc14>)
 8006eec:	e00c      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006eee:	4b3f      	ldr	r3, [pc, #252]	; (8006fec <UART_SetConfig+0xc18>)
 8006ef0:	e00a      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006ef2:	4b3f      	ldr	r3, [pc, #252]	; (8006ff0 <UART_SetConfig+0xc1c>)
 8006ef4:	e008      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006ef6:	4b3f      	ldr	r3, [pc, #252]	; (8006ff4 <UART_SetConfig+0xc20>)
 8006ef8:	e006      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006efa:	4b3f      	ldr	r3, [pc, #252]	; (8006ff8 <UART_SetConfig+0xc24>)
 8006efc:	e004      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006efe:	4b3f      	ldr	r3, [pc, #252]	; (8006ffc <UART_SetConfig+0xc28>)
 8006f00:	e002      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006f02:	4b3f      	ldr	r3, [pc, #252]	; (8007000 <UART_SetConfig+0xc2c>)
 8006f04:	e000      	b.n	8006f08 <UART_SetConfig+0xb34>
 8006f06:	4b34      	ldr	r3, [pc, #208]	; (8006fd8 <UART_SetConfig+0xc04>)
 8006f08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f0a:	6852      	ldr	r2, [r2, #4]
 8006f0c:	0852      	lsrs	r2, r2, #1
 8006f0e:	189a      	adds	r2, r3, r2
 8006f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	0019      	movs	r1, r3
 8006f16:	0010      	movs	r0, r2
 8006f18:	f7f9 f8f4 	bl	8000104 <__udivsi3>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8006f22:	e0ed      	b.n	8007100 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f24:	f7fe f92e 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d100      	bne.n	8006f36 <UART_SetConfig+0xb62>
 8006f34:	e066      	b.n	8007004 <UART_SetConfig+0xc30>
 8006f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d03e      	beq.n	8006fbc <UART_SetConfig+0xbe8>
 8006f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d038      	beq.n	8006fb8 <UART_SetConfig+0xbe4>
 8006f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d032      	beq.n	8006fb4 <UART_SetConfig+0xbe0>
 8006f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d02c      	beq.n	8006fb0 <UART_SetConfig+0xbdc>
 8006f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	2b05      	cmp	r3, #5
 8006f5c:	d026      	beq.n	8006fac <UART_SetConfig+0xbd8>
 8006f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	2b06      	cmp	r3, #6
 8006f64:	d020      	beq.n	8006fa8 <UART_SetConfig+0xbd4>
 8006f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b07      	cmp	r3, #7
 8006f6c:	d01a      	beq.n	8006fa4 <UART_SetConfig+0xbd0>
 8006f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d014      	beq.n	8006fa0 <UART_SetConfig+0xbcc>
 8006f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b09      	cmp	r3, #9
 8006f7c:	d00e      	beq.n	8006f9c <UART_SetConfig+0xbc8>
 8006f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	2b0a      	cmp	r3, #10
 8006f84:	d008      	beq.n	8006f98 <UART_SetConfig+0xbc4>
 8006f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	2b0b      	cmp	r3, #11
 8006f8c:	d102      	bne.n	8006f94 <UART_SetConfig+0xbc0>
 8006f8e:	2380      	movs	r3, #128	; 0x80
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	e038      	b.n	8007006 <UART_SetConfig+0xc32>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e036      	b.n	8007006 <UART_SetConfig+0xc32>
 8006f98:	2380      	movs	r3, #128	; 0x80
 8006f9a:	e034      	b.n	8007006 <UART_SetConfig+0xc32>
 8006f9c:	2340      	movs	r3, #64	; 0x40
 8006f9e:	e032      	b.n	8007006 <UART_SetConfig+0xc32>
 8006fa0:	2320      	movs	r3, #32
 8006fa2:	e030      	b.n	8007006 <UART_SetConfig+0xc32>
 8006fa4:	2310      	movs	r3, #16
 8006fa6:	e02e      	b.n	8007006 <UART_SetConfig+0xc32>
 8006fa8:	230c      	movs	r3, #12
 8006faa:	e02c      	b.n	8007006 <UART_SetConfig+0xc32>
 8006fac:	230a      	movs	r3, #10
 8006fae:	e02a      	b.n	8007006 <UART_SetConfig+0xc32>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	e028      	b.n	8007006 <UART_SetConfig+0xc32>
 8006fb4:	2306      	movs	r3, #6
 8006fb6:	e026      	b.n	8007006 <UART_SetConfig+0xc32>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	e024      	b.n	8007006 <UART_SetConfig+0xc32>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e022      	b.n	8007006 <UART_SetConfig+0xc32>
 8006fc0:	000aaa00 	.word	0x000aaa00
 8006fc4:	000ccc00 	.word	0x000ccc00
 8006fc8:	00155500 	.word	0x00155500
 8006fcc:	000002ff 	.word	0x000002ff
 8006fd0:	000fffff 	.word	0x000fffff
 8006fd4:	0001e848 	.word	0x0001e848
 8006fd8:	01e84800 	.word	0x01e84800
 8006fdc:	0003d090 	.word	0x0003d090
 8006fe0:	0007a120 	.word	0x0007a120
 8006fe4:	000f4240 	.word	0x000f4240
 8006fe8:	001e8480 	.word	0x001e8480
 8006fec:	0028b0aa 	.word	0x0028b0aa
 8006ff0:	0030d400 	.word	0x0030d400
 8006ff4:	003d0900 	.word	0x003d0900
 8006ff8:	00516154 	.word	0x00516154
 8006ffc:	007a1200 	.word	0x007a1200
 8007000:	00f42400 	.word	0x00f42400
 8007004:	2301      	movs	r3, #1
 8007006:	0019      	movs	r1, r3
 8007008:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800700a:	f7f9 f87b 	bl	8000104 <__udivsi3>
 800700e:	0003      	movs	r3, r0
 8007010:	005a      	lsls	r2, r3, #1
 8007012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	18d2      	adds	r2, r2, r3
 800701a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	0019      	movs	r1, r3
 8007020:	0010      	movs	r0, r2
 8007022:	f7f9 f86f 	bl	8000104 <__udivsi3>
 8007026:	0003      	movs	r3, r0
 8007028:	b29b      	uxth	r3, r3
 800702a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800702c:	e068      	b.n	8007100 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800702e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	d04c      	beq.n	80070d0 <UART_SetConfig+0xcfc>
 8007036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	2b01      	cmp	r3, #1
 800703c:	d045      	beq.n	80070ca <UART_SetConfig+0xcf6>
 800703e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	2b02      	cmp	r3, #2
 8007044:	d03e      	beq.n	80070c4 <UART_SetConfig+0xcf0>
 8007046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	2b03      	cmp	r3, #3
 800704c:	d038      	beq.n	80070c0 <UART_SetConfig+0xcec>
 800704e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	2b04      	cmp	r3, #4
 8007054:	d031      	beq.n	80070ba <UART_SetConfig+0xce6>
 8007056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b05      	cmp	r3, #5
 800705c:	d02b      	beq.n	80070b6 <UART_SetConfig+0xce2>
 800705e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	2b06      	cmp	r3, #6
 8007064:	d025      	beq.n	80070b2 <UART_SetConfig+0xcde>
 8007066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	2b07      	cmp	r3, #7
 800706c:	d01e      	beq.n	80070ac <UART_SetConfig+0xcd8>
 800706e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b08      	cmp	r3, #8
 8007074:	d017      	beq.n	80070a6 <UART_SetConfig+0xcd2>
 8007076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	2b09      	cmp	r3, #9
 800707c:	d010      	beq.n	80070a0 <UART_SetConfig+0xccc>
 800707e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	2b0a      	cmp	r3, #10
 8007084:	d009      	beq.n	800709a <UART_SetConfig+0xcc6>
 8007086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	2b0b      	cmp	r3, #11
 800708c:	d102      	bne.n	8007094 <UART_SetConfig+0xcc0>
 800708e:	2380      	movs	r3, #128	; 0x80
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	e01f      	b.n	80070d4 <UART_SetConfig+0xd00>
 8007094:	2380      	movs	r3, #128	; 0x80
 8007096:	025b      	lsls	r3, r3, #9
 8007098:	e01c      	b.n	80070d4 <UART_SetConfig+0xd00>
 800709a:	2380      	movs	r3, #128	; 0x80
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	e019      	b.n	80070d4 <UART_SetConfig+0xd00>
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	e016      	b.n	80070d4 <UART_SetConfig+0xd00>
 80070a6:	2380      	movs	r3, #128	; 0x80
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	e013      	b.n	80070d4 <UART_SetConfig+0xd00>
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	015b      	lsls	r3, r3, #5
 80070b0:	e010      	b.n	80070d4 <UART_SetConfig+0xd00>
 80070b2:	4bb7      	ldr	r3, [pc, #732]	; (8007390 <UART_SetConfig+0xfbc>)
 80070b4:	e00e      	b.n	80070d4 <UART_SetConfig+0xd00>
 80070b6:	4bb7      	ldr	r3, [pc, #732]	; (8007394 <UART_SetConfig+0xfc0>)
 80070b8:	e00c      	b.n	80070d4 <UART_SetConfig+0xd00>
 80070ba:	2380      	movs	r3, #128	; 0x80
 80070bc:	019b      	lsls	r3, r3, #6
 80070be:	e009      	b.n	80070d4 <UART_SetConfig+0xd00>
 80070c0:	4bb5      	ldr	r3, [pc, #724]	; (8007398 <UART_SetConfig+0xfc4>)
 80070c2:	e007      	b.n	80070d4 <UART_SetConfig+0xd00>
 80070c4:	2380      	movs	r3, #128	; 0x80
 80070c6:	01db      	lsls	r3, r3, #7
 80070c8:	e004      	b.n	80070d4 <UART_SetConfig+0xd00>
 80070ca:	2380      	movs	r3, #128	; 0x80
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	e001      	b.n	80070d4 <UART_SetConfig+0xd00>
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	025b      	lsls	r3, r3, #9
 80070d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070d6:	6852      	ldr	r2, [r2, #4]
 80070d8:	0852      	lsrs	r2, r2, #1
 80070da:	189a      	adds	r2, r3, r2
 80070dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	0019      	movs	r1, r3
 80070e2:	0010      	movs	r0, r2
 80070e4:	f7f9 f80e 	bl	8000104 <__udivsi3>
 80070e8:	0003      	movs	r3, r0
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80070ee:	e007      	b.n	8007100 <UART_SetConfig+0xd2c>
      default:
        ret = HAL_ERROR;
 80070f0:	231b      	movs	r3, #27
 80070f2:	2258      	movs	r2, #88	; 0x58
 80070f4:	4694      	mov	ip, r2
 80070f6:	44bc      	add	ip, r7
 80070f8:	4463      	add	r3, ip
 80070fa:	2201      	movs	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
        break;
 80070fe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007102:	2b0f      	cmp	r3, #15
 8007104:	d920      	bls.n	8007148 <UART_SetConfig+0xd74>
 8007106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007108:	4aa4      	ldr	r2, [pc, #656]	; (800739c <UART_SetConfig+0xfc8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d81c      	bhi.n	8007148 <UART_SetConfig+0xd74>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800710e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007110:	b29a      	uxth	r2, r3
 8007112:	200e      	movs	r0, #14
 8007114:	2458      	movs	r4, #88	; 0x58
 8007116:	193b      	adds	r3, r7, r4
 8007118:	181b      	adds	r3, r3, r0
 800711a:	210f      	movs	r1, #15
 800711c:	438a      	bics	r2, r1
 800711e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007122:	085b      	lsrs	r3, r3, #1
 8007124:	b29b      	uxth	r3, r3
 8007126:	2207      	movs	r2, #7
 8007128:	4013      	ands	r3, r2
 800712a:	b299      	uxth	r1, r3
 800712c:	193b      	adds	r3, r7, r4
 800712e:	181b      	adds	r3, r3, r0
 8007130:	193a      	adds	r2, r7, r4
 8007132:	1812      	adds	r2, r2, r0
 8007134:	8812      	ldrh	r2, [r2, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800713a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	193a      	adds	r2, r7, r4
 8007140:	1812      	adds	r2, r2, r0
 8007142:	8812      	ldrh	r2, [r2, #0]
 8007144:	60da      	str	r2, [r3, #12]
 8007146:	e1d3      	b.n	80074f0 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8007148:	231b      	movs	r3, #27
 800714a:	2258      	movs	r2, #88	; 0x58
 800714c:	4694      	mov	ip, r2
 800714e:	44bc      	add	ip, r7
 8007150:	4463      	add	r3, ip
 8007152:	2201      	movs	r2, #1
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	e1cb      	b.n	80074f0 <UART_SetConfig+0x111c>
    }
  }
  else
  {
    switch (clocksource)
 8007158:	2323      	movs	r3, #35	; 0x23
 800715a:	2258      	movs	r2, #88	; 0x58
 800715c:	4694      	mov	ip, r2
 800715e:	44bc      	add	ip, r7
 8007160:	4463      	add	r3, ip
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d100      	bne.n	800716a <UART_SetConfig+0xd96>
 8007168:	e06c      	b.n	8007244 <UART_SetConfig+0xe70>
 800716a:	dc02      	bgt.n	8007172 <UART_SetConfig+0xd9e>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <UART_SetConfig+0xdac>
 8007170:	e1a3      	b.n	80074ba <UART_SetConfig+0x10e6>
 8007172:	2b04      	cmp	r3, #4
 8007174:	d100      	bne.n	8007178 <UART_SetConfig+0xda4>
 8007176:	e0bc      	b.n	80072f2 <UART_SetConfig+0xf1e>
 8007178:	2b08      	cmp	r3, #8
 800717a:	d100      	bne.n	800717e <UART_SetConfig+0xdaa>
 800717c:	e13d      	b.n	80073fa <UART_SetConfig+0x1026>
 800717e:	e19c      	b.n	80074ba <UART_SetConfig+0x10e6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007180:	f7fe f88c 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8007184:	0003      	movs	r3, r0
 8007186:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	d044      	beq.n	800721a <UART_SetConfig+0xe46>
 8007190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	2b01      	cmp	r3, #1
 8007196:	d03e      	beq.n	8007216 <UART_SetConfig+0xe42>
 8007198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	2b02      	cmp	r3, #2
 800719e:	d038      	beq.n	8007212 <UART_SetConfig+0xe3e>
 80071a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d032      	beq.n	800720e <UART_SetConfig+0xe3a>
 80071a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d02c      	beq.n	800720a <UART_SetConfig+0xe36>
 80071b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b4:	2b05      	cmp	r3, #5
 80071b6:	d026      	beq.n	8007206 <UART_SetConfig+0xe32>
 80071b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	2b06      	cmp	r3, #6
 80071be:	d020      	beq.n	8007202 <UART_SetConfig+0xe2e>
 80071c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	2b07      	cmp	r3, #7
 80071c6:	d01a      	beq.n	80071fe <UART_SetConfig+0xe2a>
 80071c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d014      	beq.n	80071fa <UART_SetConfig+0xe26>
 80071d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	2b09      	cmp	r3, #9
 80071d6:	d00e      	beq.n	80071f6 <UART_SetConfig+0xe22>
 80071d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	2b0a      	cmp	r3, #10
 80071de:	d008      	beq.n	80071f2 <UART_SetConfig+0xe1e>
 80071e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	2b0b      	cmp	r3, #11
 80071e6:	d102      	bne.n	80071ee <UART_SetConfig+0xe1a>
 80071e8:	2380      	movs	r3, #128	; 0x80
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	e016      	b.n	800721c <UART_SetConfig+0xe48>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e014      	b.n	800721c <UART_SetConfig+0xe48>
 80071f2:	2380      	movs	r3, #128	; 0x80
 80071f4:	e012      	b.n	800721c <UART_SetConfig+0xe48>
 80071f6:	2340      	movs	r3, #64	; 0x40
 80071f8:	e010      	b.n	800721c <UART_SetConfig+0xe48>
 80071fa:	2320      	movs	r3, #32
 80071fc:	e00e      	b.n	800721c <UART_SetConfig+0xe48>
 80071fe:	2310      	movs	r3, #16
 8007200:	e00c      	b.n	800721c <UART_SetConfig+0xe48>
 8007202:	230c      	movs	r3, #12
 8007204:	e00a      	b.n	800721c <UART_SetConfig+0xe48>
 8007206:	230a      	movs	r3, #10
 8007208:	e008      	b.n	800721c <UART_SetConfig+0xe48>
 800720a:	2308      	movs	r3, #8
 800720c:	e006      	b.n	800721c <UART_SetConfig+0xe48>
 800720e:	2306      	movs	r3, #6
 8007210:	e004      	b.n	800721c <UART_SetConfig+0xe48>
 8007212:	2304      	movs	r3, #4
 8007214:	e002      	b.n	800721c <UART_SetConfig+0xe48>
 8007216:	2302      	movs	r3, #2
 8007218:	e000      	b.n	800721c <UART_SetConfig+0xe48>
 800721a:	2301      	movs	r3, #1
 800721c:	0019      	movs	r1, r3
 800721e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007220:	f7f8 ff70 	bl	8000104 <__udivsi3>
 8007224:	0003      	movs	r3, r0
 8007226:	001a      	movs	r2, r3
 8007228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	18d2      	adds	r2, r2, r3
 8007230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	0019      	movs	r1, r3
 8007236:	0010      	movs	r0, r2
 8007238:	f7f8 ff64 	bl	8000104 <__udivsi3>
 800723c:	0003      	movs	r3, r0
 800723e:	b29b      	uxth	r3, r3
 8007240:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8007242:	e142      	b.n	80074ca <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	d043      	beq.n	80072d4 <UART_SetConfig+0xf00>
 800724c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	2b01      	cmp	r3, #1
 8007252:	d03d      	beq.n	80072d0 <UART_SetConfig+0xefc>
 8007254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	2b02      	cmp	r3, #2
 800725a:	d037      	beq.n	80072cc <UART_SetConfig+0xef8>
 800725c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	2b03      	cmp	r3, #3
 8007262:	d031      	beq.n	80072c8 <UART_SetConfig+0xef4>
 8007264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	2b04      	cmp	r3, #4
 800726a:	d02b      	beq.n	80072c4 <UART_SetConfig+0xef0>
 800726c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2b05      	cmp	r3, #5
 8007272:	d025      	beq.n	80072c0 <UART_SetConfig+0xeec>
 8007274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	2b06      	cmp	r3, #6
 800727a:	d01f      	beq.n	80072bc <UART_SetConfig+0xee8>
 800727c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	2b07      	cmp	r3, #7
 8007282:	d019      	beq.n	80072b8 <UART_SetConfig+0xee4>
 8007284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b08      	cmp	r3, #8
 800728a:	d013      	beq.n	80072b4 <UART_SetConfig+0xee0>
 800728c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	2b09      	cmp	r3, #9
 8007292:	d00d      	beq.n	80072b0 <UART_SetConfig+0xedc>
 8007294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	2b0a      	cmp	r3, #10
 800729a:	d007      	beq.n	80072ac <UART_SetConfig+0xed8>
 800729c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	2b0b      	cmp	r3, #11
 80072a2:	d101      	bne.n	80072a8 <UART_SetConfig+0xed4>
 80072a4:	4b3e      	ldr	r3, [pc, #248]	; (80073a0 <UART_SetConfig+0xfcc>)
 80072a6:	e016      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072a8:	4b3e      	ldr	r3, [pc, #248]	; (80073a4 <UART_SetConfig+0xfd0>)
 80072aa:	e014      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072ac:	4b3e      	ldr	r3, [pc, #248]	; (80073a8 <UART_SetConfig+0xfd4>)
 80072ae:	e012      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072b0:	4b3e      	ldr	r3, [pc, #248]	; (80073ac <UART_SetConfig+0xfd8>)
 80072b2:	e010      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072b4:	4b3e      	ldr	r3, [pc, #248]	; (80073b0 <UART_SetConfig+0xfdc>)
 80072b6:	e00e      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072b8:	4b3e      	ldr	r3, [pc, #248]	; (80073b4 <UART_SetConfig+0xfe0>)
 80072ba:	e00c      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072bc:	4b3e      	ldr	r3, [pc, #248]	; (80073b8 <UART_SetConfig+0xfe4>)
 80072be:	e00a      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072c0:	4b3e      	ldr	r3, [pc, #248]	; (80073bc <UART_SetConfig+0xfe8>)
 80072c2:	e008      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072c4:	4b3e      	ldr	r3, [pc, #248]	; (80073c0 <UART_SetConfig+0xfec>)
 80072c6:	e006      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072c8:	4b3e      	ldr	r3, [pc, #248]	; (80073c4 <UART_SetConfig+0xff0>)
 80072ca:	e004      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072cc:	4b3e      	ldr	r3, [pc, #248]	; (80073c8 <UART_SetConfig+0xff4>)
 80072ce:	e002      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072d0:	4b3e      	ldr	r3, [pc, #248]	; (80073cc <UART_SetConfig+0xff8>)
 80072d2:	e000      	b.n	80072d6 <UART_SetConfig+0xf02>
 80072d4:	4b33      	ldr	r3, [pc, #204]	; (80073a4 <UART_SetConfig+0xfd0>)
 80072d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072d8:	6852      	ldr	r2, [r2, #4]
 80072da:	0852      	lsrs	r2, r2, #1
 80072dc:	189a      	adds	r2, r3, r2
 80072de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	0019      	movs	r1, r3
 80072e4:	0010      	movs	r0, r2
 80072e6:	f7f8 ff0d 	bl	8000104 <__udivsi3>
 80072ea:	0003      	movs	r3, r0
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80072f0:	e0eb      	b.n	80074ca <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072f2:	f7fd ff47 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 80072f6:	0003      	movs	r3, r0
 80072f8:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d100      	bne.n	8007304 <UART_SetConfig+0xf30>
 8007302:	e065      	b.n	80073d0 <UART_SetConfig+0xffc>
 8007304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b01      	cmp	r3, #1
 800730a:	d03e      	beq.n	800738a <UART_SetConfig+0xfb6>
 800730c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2b02      	cmp	r3, #2
 8007312:	d038      	beq.n	8007386 <UART_SetConfig+0xfb2>
 8007314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	2b03      	cmp	r3, #3
 800731a:	d032      	beq.n	8007382 <UART_SetConfig+0xfae>
 800731c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	2b04      	cmp	r3, #4
 8007322:	d02c      	beq.n	800737e <UART_SetConfig+0xfaa>
 8007324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	2b05      	cmp	r3, #5
 800732a:	d026      	beq.n	800737a <UART_SetConfig+0xfa6>
 800732c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	2b06      	cmp	r3, #6
 8007332:	d020      	beq.n	8007376 <UART_SetConfig+0xfa2>
 8007334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	2b07      	cmp	r3, #7
 800733a:	d01a      	beq.n	8007372 <UART_SetConfig+0xf9e>
 800733c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	2b08      	cmp	r3, #8
 8007342:	d014      	beq.n	800736e <UART_SetConfig+0xf9a>
 8007344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	2b09      	cmp	r3, #9
 800734a:	d00e      	beq.n	800736a <UART_SetConfig+0xf96>
 800734c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b0a      	cmp	r3, #10
 8007352:	d008      	beq.n	8007366 <UART_SetConfig+0xf92>
 8007354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b0b      	cmp	r3, #11
 800735a:	d102      	bne.n	8007362 <UART_SetConfig+0xf8e>
 800735c:	2380      	movs	r3, #128	; 0x80
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	e037      	b.n	80073d2 <UART_SetConfig+0xffe>
 8007362:	2301      	movs	r3, #1
 8007364:	e035      	b.n	80073d2 <UART_SetConfig+0xffe>
 8007366:	2380      	movs	r3, #128	; 0x80
 8007368:	e033      	b.n	80073d2 <UART_SetConfig+0xffe>
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	e031      	b.n	80073d2 <UART_SetConfig+0xffe>
 800736e:	2320      	movs	r3, #32
 8007370:	e02f      	b.n	80073d2 <UART_SetConfig+0xffe>
 8007372:	2310      	movs	r3, #16
 8007374:	e02d      	b.n	80073d2 <UART_SetConfig+0xffe>
 8007376:	230c      	movs	r3, #12
 8007378:	e02b      	b.n	80073d2 <UART_SetConfig+0xffe>
 800737a:	230a      	movs	r3, #10
 800737c:	e029      	b.n	80073d2 <UART_SetConfig+0xffe>
 800737e:	2308      	movs	r3, #8
 8007380:	e027      	b.n	80073d2 <UART_SetConfig+0xffe>
 8007382:	2306      	movs	r3, #6
 8007384:	e025      	b.n	80073d2 <UART_SetConfig+0xffe>
 8007386:	2304      	movs	r3, #4
 8007388:	e023      	b.n	80073d2 <UART_SetConfig+0xffe>
 800738a:	2302      	movs	r3, #2
 800738c:	e021      	b.n	80073d2 <UART_SetConfig+0xffe>
 800738e:	46c0      	nop			; (mov r8, r8)
 8007390:	00001554 	.word	0x00001554
 8007394:	00001998 	.word	0x00001998
 8007398:	00002aaa 	.word	0x00002aaa
 800739c:	0000ffff 	.word	0x0000ffff
 80073a0:	0000f424 	.word	0x0000f424
 80073a4:	00f42400 	.word	0x00f42400
 80073a8:	0001e848 	.word	0x0001e848
 80073ac:	0003d090 	.word	0x0003d090
 80073b0:	0007a120 	.word	0x0007a120
 80073b4:	000f4240 	.word	0x000f4240
 80073b8:	00145855 	.word	0x00145855
 80073bc:	00186a00 	.word	0x00186a00
 80073c0:	001e8480 	.word	0x001e8480
 80073c4:	0028b0aa 	.word	0x0028b0aa
 80073c8:	003d0900 	.word	0x003d0900
 80073cc:	007a1200 	.word	0x007a1200
 80073d0:	2301      	movs	r3, #1
 80073d2:	0019      	movs	r1, r3
 80073d4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80073d6:	f7f8 fe95 	bl	8000104 <__udivsi3>
 80073da:	0003      	movs	r3, r0
 80073dc:	001a      	movs	r2, r3
 80073de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	18d2      	adds	r2, r2, r3
 80073e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	0019      	movs	r1, r3
 80073ec:	0010      	movs	r0, r2
 80073ee:	f7f8 fe89 	bl	8000104 <__udivsi3>
 80073f2:	0003      	movs	r3, r0
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80073f8:	e067      	b.n	80074ca <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d04b      	beq.n	800749a <UART_SetConfig+0x10c6>
 8007402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	2b01      	cmp	r3, #1
 8007408:	d044      	beq.n	8007494 <UART_SetConfig+0x10c0>
 800740a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	2b02      	cmp	r3, #2
 8007410:	d03d      	beq.n	800748e <UART_SetConfig+0x10ba>
 8007412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	2b03      	cmp	r3, #3
 8007418:	d037      	beq.n	800748a <UART_SetConfig+0x10b6>
 800741a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	2b04      	cmp	r3, #4
 8007420:	d030      	beq.n	8007484 <UART_SetConfig+0x10b0>
 8007422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	2b05      	cmp	r3, #5
 8007428:	d02a      	beq.n	8007480 <UART_SetConfig+0x10ac>
 800742a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	2b06      	cmp	r3, #6
 8007430:	d024      	beq.n	800747c <UART_SetConfig+0x10a8>
 8007432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2b07      	cmp	r3, #7
 8007438:	d01d      	beq.n	8007476 <UART_SetConfig+0x10a2>
 800743a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	2b08      	cmp	r3, #8
 8007440:	d016      	beq.n	8007470 <UART_SetConfig+0x109c>
 8007442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b09      	cmp	r3, #9
 8007448:	d00f      	beq.n	800746a <UART_SetConfig+0x1096>
 800744a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	2b0a      	cmp	r3, #10
 8007450:	d008      	beq.n	8007464 <UART_SetConfig+0x1090>
 8007452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b0b      	cmp	r3, #11
 8007458:	d101      	bne.n	800745e <UART_SetConfig+0x108a>
 800745a:	2380      	movs	r3, #128	; 0x80
 800745c:	e01f      	b.n	800749e <UART_SetConfig+0x10ca>
 800745e:	2380      	movs	r3, #128	; 0x80
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	e01c      	b.n	800749e <UART_SetConfig+0x10ca>
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	e019      	b.n	800749e <UART_SetConfig+0x10ca>
 800746a:	2380      	movs	r3, #128	; 0x80
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	e016      	b.n	800749e <UART_SetConfig+0x10ca>
 8007470:	2380      	movs	r3, #128	; 0x80
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	e013      	b.n	800749e <UART_SetConfig+0x10ca>
 8007476:	2380      	movs	r3, #128	; 0x80
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	e010      	b.n	800749e <UART_SetConfig+0x10ca>
 800747c:	4b28      	ldr	r3, [pc, #160]	; (8007520 <UART_SetConfig+0x114c>)
 800747e:	e00e      	b.n	800749e <UART_SetConfig+0x10ca>
 8007480:	4b28      	ldr	r3, [pc, #160]	; (8007524 <UART_SetConfig+0x1150>)
 8007482:	e00c      	b.n	800749e <UART_SetConfig+0x10ca>
 8007484:	2380      	movs	r3, #128	; 0x80
 8007486:	015b      	lsls	r3, r3, #5
 8007488:	e009      	b.n	800749e <UART_SetConfig+0x10ca>
 800748a:	4b27      	ldr	r3, [pc, #156]	; (8007528 <UART_SetConfig+0x1154>)
 800748c:	e007      	b.n	800749e <UART_SetConfig+0x10ca>
 800748e:	2380      	movs	r3, #128	; 0x80
 8007490:	019b      	lsls	r3, r3, #6
 8007492:	e004      	b.n	800749e <UART_SetConfig+0x10ca>
 8007494:	2380      	movs	r3, #128	; 0x80
 8007496:	01db      	lsls	r3, r3, #7
 8007498:	e001      	b.n	800749e <UART_SetConfig+0x10ca>
 800749a:	2380      	movs	r3, #128	; 0x80
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074a0:	6852      	ldr	r2, [r2, #4]
 80074a2:	0852      	lsrs	r2, r2, #1
 80074a4:	189a      	adds	r2, r3, r2
 80074a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	0019      	movs	r1, r3
 80074ac:	0010      	movs	r0, r2
 80074ae:	f7f8 fe29 	bl	8000104 <__udivsi3>
 80074b2:	0003      	movs	r3, r0
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80074b8:	e007      	b.n	80074ca <UART_SetConfig+0x10f6>
      default:
        ret = HAL_ERROR;
 80074ba:	231b      	movs	r3, #27
 80074bc:	2258      	movs	r2, #88	; 0x58
 80074be:	4694      	mov	ip, r2
 80074c0:	44bc      	add	ip, r7
 80074c2:	4463      	add	r3, ip
 80074c4:	2201      	movs	r2, #1
 80074c6:	701a      	strb	r2, [r3, #0]
        break;
 80074c8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074cc:	2b0f      	cmp	r3, #15
 80074ce:	d908      	bls.n	80074e2 <UART_SetConfig+0x110e>
 80074d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074d2:	4a16      	ldr	r2, [pc, #88]	; (800752c <UART_SetConfig+0x1158>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d804      	bhi.n	80074e2 <UART_SetConfig+0x110e>
    {
      huart->Instance->BRR = usartdiv;
 80074d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80074de:	60da      	str	r2, [r3, #12]
 80074e0:	e006      	b.n	80074f0 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 80074e2:	231b      	movs	r3, #27
 80074e4:	2258      	movs	r2, #88	; 0x58
 80074e6:	4694      	mov	ip, r2
 80074e8:	44bc      	add	ip, r7
 80074ea:	4463      	add	r3, ip
 80074ec:	2201      	movs	r2, #1
 80074ee:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f2:	226a      	movs	r2, #106	; 0x6a
 80074f4:	2101      	movs	r1, #1
 80074f6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80074f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074fa:	2268      	movs	r2, #104	; 0x68
 80074fc:	2101      	movs	r1, #1
 80074fe:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007502:	2200      	movs	r2, #0
 8007504:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007508:	2200      	movs	r2, #0
 800750a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800750c:	231b      	movs	r3, #27
 800750e:	2258      	movs	r2, #88	; 0x58
 8007510:	4694      	mov	ip, r2
 8007512:	44bc      	add	ip, r7
 8007514:	4463      	add	r3, ip
 8007516:	781b      	ldrb	r3, [r3, #0]
}
 8007518:	0018      	movs	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	b021      	add	sp, #132	; 0x84
 800751e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007520:	00000aaa 	.word	0x00000aaa
 8007524:	00000ccc 	.word	0x00000ccc
 8007528:	00001555 	.word	0x00001555
 800752c:	0000ffff 	.word	0x0000ffff

08007530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	2201      	movs	r2, #1
 800753e:	4013      	ands	r3, r2
 8007540:	d00b      	beq.n	800755a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	4a4a      	ldr	r2, [pc, #296]	; (8007674 <UART_AdvFeatureConfig+0x144>)
 800754a:	4013      	ands	r3, r2
 800754c:	0019      	movs	r1, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755e:	2202      	movs	r2, #2
 8007560:	4013      	ands	r3, r2
 8007562:	d00b      	beq.n	800757c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	4a43      	ldr	r2, [pc, #268]	; (8007678 <UART_AdvFeatureConfig+0x148>)
 800756c:	4013      	ands	r3, r2
 800756e:	0019      	movs	r1, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007580:	2204      	movs	r2, #4
 8007582:	4013      	ands	r3, r2
 8007584:	d00b      	beq.n	800759e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4a3b      	ldr	r2, [pc, #236]	; (800767c <UART_AdvFeatureConfig+0x14c>)
 800758e:	4013      	ands	r3, r2
 8007590:	0019      	movs	r1, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	2208      	movs	r2, #8
 80075a4:	4013      	ands	r3, r2
 80075a6:	d00b      	beq.n	80075c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	4a34      	ldr	r2, [pc, #208]	; (8007680 <UART_AdvFeatureConfig+0x150>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	0019      	movs	r1, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	2210      	movs	r2, #16
 80075c6:	4013      	ands	r3, r2
 80075c8:	d00b      	beq.n	80075e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	4a2c      	ldr	r2, [pc, #176]	; (8007684 <UART_AdvFeatureConfig+0x154>)
 80075d2:	4013      	ands	r3, r2
 80075d4:	0019      	movs	r1, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e6:	2220      	movs	r2, #32
 80075e8:	4013      	ands	r3, r2
 80075ea:	d00b      	beq.n	8007604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	4a25      	ldr	r2, [pc, #148]	; (8007688 <UART_AdvFeatureConfig+0x158>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	0019      	movs	r1, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	2240      	movs	r2, #64	; 0x40
 800760a:	4013      	ands	r3, r2
 800760c:	d01d      	beq.n	800764a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	4a1d      	ldr	r2, [pc, #116]	; (800768c <UART_AdvFeatureConfig+0x15c>)
 8007616:	4013      	ands	r3, r2
 8007618:	0019      	movs	r1, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800762a:	2380      	movs	r3, #128	; 0x80
 800762c:	035b      	lsls	r3, r3, #13
 800762e:	429a      	cmp	r2, r3
 8007630:	d10b      	bne.n	800764a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	4a15      	ldr	r2, [pc, #84]	; (8007690 <UART_AdvFeatureConfig+0x160>)
 800763a:	4013      	ands	r3, r2
 800763c:	0019      	movs	r1, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764e:	2280      	movs	r2, #128	; 0x80
 8007650:	4013      	ands	r3, r2
 8007652:	d00b      	beq.n	800766c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4a0e      	ldr	r2, [pc, #56]	; (8007694 <UART_AdvFeatureConfig+0x164>)
 800765c:	4013      	ands	r3, r2
 800765e:	0019      	movs	r1, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	605a      	str	r2, [r3, #4]
  }
}
 800766c:	46c0      	nop			; (mov r8, r8)
 800766e:	46bd      	mov	sp, r7
 8007670:	b002      	add	sp, #8
 8007672:	bd80      	pop	{r7, pc}
 8007674:	fffdffff 	.word	0xfffdffff
 8007678:	fffeffff 	.word	0xfffeffff
 800767c:	fffbffff 	.word	0xfffbffff
 8007680:	ffff7fff 	.word	0xffff7fff
 8007684:	ffffefff 	.word	0xffffefff
 8007688:	ffffdfff 	.word	0xffffdfff
 800768c:	ffefffff 	.word	0xffefffff
 8007690:	ff9fffff 	.word	0xff9fffff
 8007694:	fff7ffff 	.word	0xfff7ffff

08007698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af02      	add	r7, sp, #8
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2288      	movs	r2, #136	; 0x88
 80076a4:	2100      	movs	r1, #0
 80076a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80076a8:	f7fb fe58 	bl	800335c <HAL_GetTick>
 80076ac:	0003      	movs	r3, r0
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2208      	movs	r2, #8
 80076b8:	4013      	ands	r3, r2
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d10d      	bne.n	80076da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	2380      	movs	r3, #128	; 0x80
 80076c2:	0399      	lsls	r1, r3, #14
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4b18      	ldr	r3, [pc, #96]	; (8007728 <UART_CheckIdleState+0x90>)
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	0013      	movs	r3, r2
 80076cc:	2200      	movs	r2, #0
 80076ce:	f000 f82d 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 80076d2:	1e03      	subs	r3, r0, #0
 80076d4:	d001      	beq.n	80076da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e021      	b.n	800771e <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2204      	movs	r2, #4
 80076e2:	4013      	ands	r3, r2
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d10d      	bne.n	8007704 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	2380      	movs	r3, #128	; 0x80
 80076ec:	03d9      	lsls	r1, r3, #15
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <UART_CheckIdleState+0x90>)
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	0013      	movs	r3, r2
 80076f6:	2200      	movs	r2, #0
 80076f8:	f000 f818 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 80076fc:	1e03      	subs	r3, r0, #0
 80076fe:	d001      	beq.n	8007704 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e00c      	b.n	800771e <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2280      	movs	r2, #128	; 0x80
 8007708:	2120      	movs	r1, #32
 800770a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2284      	movs	r2, #132	; 0x84
 8007710:	2120      	movs	r1, #32
 8007712:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	227c      	movs	r2, #124	; 0x7c
 8007718:	2100      	movs	r1, #0
 800771a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	0018      	movs	r0, r3
 8007720:	46bd      	mov	sp, r7
 8007722:	b004      	add	sp, #16
 8007724:	bd80      	pop	{r7, pc}
 8007726:	46c0      	nop			; (mov r8, r8)
 8007728:	01ffffff 	.word	0x01ffffff

0800772c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	1dfb      	adds	r3, r7, #7
 800773a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773c:	e02b      	b.n	8007796 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	3301      	adds	r3, #1
 8007742:	d028      	beq.n	8007796 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007744:	f7fb fe0a 	bl	800335c <HAL_GetTick>
 8007748:	0002      	movs	r2, r0
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	429a      	cmp	r2, r3
 8007752:	d302      	bcc.n	800775a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d11d      	bne.n	8007796 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4916      	ldr	r1, [pc, #88]	; (80077c0 <UART_WaitOnFlagUntilTimeout+0x94>)
 8007766:	400a      	ands	r2, r1
 8007768:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2101      	movs	r1, #1
 8007776:	438a      	bics	r2, r1
 8007778:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2280      	movs	r2, #128	; 0x80
 800777e:	2120      	movs	r1, #32
 8007780:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2284      	movs	r2, #132	; 0x84
 8007786:	2120      	movs	r1, #32
 8007788:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	227c      	movs	r2, #124	; 0x7c
 800778e:	2100      	movs	r1, #0
 8007790:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e00f      	b.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	4013      	ands	r3, r2
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	425a      	negs	r2, r3
 80077a6:	4153      	adcs	r3, r2
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	001a      	movs	r2, r3
 80077ac:	1dfb      	adds	r3, r7, #7
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d0c4      	beq.n	800773e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	0018      	movs	r0, r3
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b004      	add	sp, #16
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	46c0      	nop			; (mov r8, r8)
 80077c0:	fffffe5f 	.word	0xfffffe5f

080077c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	227c      	movs	r2, #124	; 0x7c
 80077d0:	5c9b      	ldrb	r3, [r3, r2]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_UARTEx_DisableFifoMode+0x16>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e027      	b.n	800782a <HAL_UARTEx_DisableFifoMode+0x66>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	227c      	movs	r2, #124	; 0x7c
 80077de:	2101      	movs	r1, #1
 80077e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2280      	movs	r2, #128	; 0x80
 80077e6:	2124      	movs	r1, #36	; 0x24
 80077e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2101      	movs	r1, #1
 80077fe:	438a      	bics	r2, r1
 8007800:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4a0b      	ldr	r2, [pc, #44]	; (8007834 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007806:	4013      	ands	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2280      	movs	r2, #128	; 0x80
 800781c:	2120      	movs	r1, #32
 800781e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	227c      	movs	r2, #124	; 0x7c
 8007824:	2100      	movs	r1, #0
 8007826:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	0018      	movs	r0, r3
 800782c:	46bd      	mov	sp, r7
 800782e:	b004      	add	sp, #16
 8007830:	bd80      	pop	{r7, pc}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	dfffffff 	.word	0xdfffffff

08007838 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	227c      	movs	r2, #124	; 0x7c
 8007846:	5c9b      	ldrb	r3, [r3, r2]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800784c:	2302      	movs	r3, #2
 800784e:	e02e      	b.n	80078ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	227c      	movs	r2, #124	; 0x7c
 8007854:	2101      	movs	r1, #1
 8007856:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2280      	movs	r2, #128	; 0x80
 800785c:	2124      	movs	r1, #36	; 0x24
 800785e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2101      	movs	r1, #1
 8007874:	438a      	bics	r2, r1
 8007876:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	08d9      	lsrs	r1, r3, #3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	0018      	movs	r0, r3
 8007890:	f000 f854 	bl	800793c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2280      	movs	r2, #128	; 0x80
 80078a0:	2120      	movs	r1, #32
 80078a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	227c      	movs	r2, #124	; 0x7c
 80078a8:	2100      	movs	r1, #0
 80078aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	0018      	movs	r0, r3
 80078b0:	46bd      	mov	sp, r7
 80078b2:	b004      	add	sp, #16
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	227c      	movs	r2, #124	; 0x7c
 80078c6:	5c9b      	ldrb	r3, [r3, r2]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e02f      	b.n	8007930 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	227c      	movs	r2, #124	; 0x7c
 80078d4:	2101      	movs	r1, #1
 80078d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2280      	movs	r2, #128	; 0x80
 80078dc:	2124      	movs	r1, #36	; 0x24
 80078de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2101      	movs	r1, #1
 80078f4:	438a      	bics	r2, r1
 80078f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	4a0e      	ldr	r2, [pc, #56]	; (8007938 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007900:	4013      	ands	r3, r2
 8007902:	0019      	movs	r1, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	0018      	movs	r0, r3
 8007912:	f000 f813 	bl	800793c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2280      	movs	r2, #128	; 0x80
 8007922:	2120      	movs	r1, #32
 8007924:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	227c      	movs	r2, #124	; 0x7c
 800792a:	2100      	movs	r1, #0
 800792c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	0018      	movs	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	b004      	add	sp, #16
 8007936:	bd80      	pop	{r7, pc}
 8007938:	f1ffffff 	.word	0xf1ffffff

0800793c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800793c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800793e:	b089      	sub	sp, #36	; 0x24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007944:	2314      	movs	r3, #20
 8007946:	18fb      	adds	r3, r7, r3
 8007948:	4a2f      	ldr	r2, [pc, #188]	; (8007a08 <UARTEx_SetNbDataToProcess+0xcc>)
 800794a:	ca03      	ldmia	r2!, {r0, r1}
 800794c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800794e:	230c      	movs	r3, #12
 8007950:	18fb      	adds	r3, r7, r3
 8007952:	4a2e      	ldr	r2, [pc, #184]	; (8007a0c <UARTEx_SetNbDataToProcess+0xd0>)
 8007954:	ca03      	ldmia	r2!, {r0, r1}
 8007956:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800795c:	2b00      	cmp	r3, #0
 800795e:	d108      	bne.n	8007972 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	226a      	movs	r2, #106	; 0x6a
 8007964:	2101      	movs	r1, #1
 8007966:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2268      	movs	r2, #104	; 0x68
 800796c:	2101      	movs	r1, #1
 800796e:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007970:	e046      	b.n	8007a00 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007972:	261f      	movs	r6, #31
 8007974:	19bb      	adds	r3, r7, r6
 8007976:	2208      	movs	r2, #8
 8007978:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800797a:	201e      	movs	r0, #30
 800797c:	183b      	adds	r3, r7, r0
 800797e:	2208      	movs	r2, #8
 8007980:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	0e5b      	lsrs	r3, r3, #25
 800798a:	b2da      	uxtb	r2, r3
 800798c:	241d      	movs	r4, #29
 800798e:	193b      	adds	r3, r7, r4
 8007990:	2107      	movs	r1, #7
 8007992:	400a      	ands	r2, r1
 8007994:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	0f5b      	lsrs	r3, r3, #29
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	251c      	movs	r5, #28
 80079a2:	197b      	adds	r3, r7, r5
 80079a4:	2107      	movs	r1, #7
 80079a6:	400a      	ands	r2, r1
 80079a8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80079aa:	183b      	adds	r3, r7, r0
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	197a      	adds	r2, r7, r5
 80079b0:	7812      	ldrb	r2, [r2, #0]
 80079b2:	2114      	movs	r1, #20
 80079b4:	1879      	adds	r1, r7, r1
 80079b6:	5c8a      	ldrb	r2, [r1, r2]
 80079b8:	435a      	muls	r2, r3
 80079ba:	0010      	movs	r0, r2
 80079bc:	197b      	adds	r3, r7, r5
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	250c      	movs	r5, #12
 80079c2:	197a      	adds	r2, r7, r5
 80079c4:	5cd3      	ldrb	r3, [r2, r3]
 80079c6:	0019      	movs	r1, r3
 80079c8:	f7f8 fc26 	bl	8000218 <__divsi3>
 80079cc:	0003      	movs	r3, r0
 80079ce:	b299      	uxth	r1, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	226a      	movs	r2, #106	; 0x6a
 80079d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80079d6:	19bb      	adds	r3, r7, r6
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	193a      	adds	r2, r7, r4
 80079dc:	7812      	ldrb	r2, [r2, #0]
 80079de:	2114      	movs	r1, #20
 80079e0:	1879      	adds	r1, r7, r1
 80079e2:	5c8a      	ldrb	r2, [r1, r2]
 80079e4:	435a      	muls	r2, r3
 80079e6:	0010      	movs	r0, r2
 80079e8:	193b      	adds	r3, r7, r4
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	197a      	adds	r2, r7, r5
 80079ee:	5cd3      	ldrb	r3, [r2, r3]
 80079f0:	0019      	movs	r1, r3
 80079f2:	f7f8 fc11 	bl	8000218 <__divsi3>
 80079f6:	0003      	movs	r3, r0
 80079f8:	b299      	uxth	r1, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2268      	movs	r2, #104	; 0x68
 80079fe:	5299      	strh	r1, [r3, r2]
}
 8007a00:	46c0      	nop			; (mov r8, r8)
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b009      	add	sp, #36	; 0x24
 8007a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a08:	08008400 	.word	0x08008400
 8007a0c:	08008408 	.word	0x08008408

08007a10 <__errno>:
 8007a10:	4b01      	ldr	r3, [pc, #4]	; (8007a18 <__errno+0x8>)
 8007a12:	6818      	ldr	r0, [r3, #0]
 8007a14:	4770      	bx	lr
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	2000000c 	.word	0x2000000c

08007a1c <__libc_init_array>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	2600      	movs	r6, #0
 8007a20:	4d0c      	ldr	r5, [pc, #48]	; (8007a54 <__libc_init_array+0x38>)
 8007a22:	4c0d      	ldr	r4, [pc, #52]	; (8007a58 <__libc_init_array+0x3c>)
 8007a24:	1b64      	subs	r4, r4, r5
 8007a26:	10a4      	asrs	r4, r4, #2
 8007a28:	42a6      	cmp	r6, r4
 8007a2a:	d109      	bne.n	8007a40 <__libc_init_array+0x24>
 8007a2c:	2600      	movs	r6, #0
 8007a2e:	f000 fcc9 	bl	80083c4 <_init>
 8007a32:	4d0a      	ldr	r5, [pc, #40]	; (8007a5c <__libc_init_array+0x40>)
 8007a34:	4c0a      	ldr	r4, [pc, #40]	; (8007a60 <__libc_init_array+0x44>)
 8007a36:	1b64      	subs	r4, r4, r5
 8007a38:	10a4      	asrs	r4, r4, #2
 8007a3a:	42a6      	cmp	r6, r4
 8007a3c:	d105      	bne.n	8007a4a <__libc_init_array+0x2e>
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
 8007a40:	00b3      	lsls	r3, r6, #2
 8007a42:	58eb      	ldr	r3, [r5, r3]
 8007a44:	4798      	blx	r3
 8007a46:	3601      	adds	r6, #1
 8007a48:	e7ee      	b.n	8007a28 <__libc_init_array+0xc>
 8007a4a:	00b3      	lsls	r3, r6, #2
 8007a4c:	58eb      	ldr	r3, [r5, r3]
 8007a4e:	4798      	blx	r3
 8007a50:	3601      	adds	r6, #1
 8007a52:	e7f2      	b.n	8007a3a <__libc_init_array+0x1e>
 8007a54:	0800855c 	.word	0x0800855c
 8007a58:	0800855c 	.word	0x0800855c
 8007a5c:	0800855c 	.word	0x0800855c
 8007a60:	08008560 	.word	0x08008560

08007a64 <memset>:
 8007a64:	0003      	movs	r3, r0
 8007a66:	1812      	adds	r2, r2, r0
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d100      	bne.n	8007a6e <memset+0xa>
 8007a6c:	4770      	bx	lr
 8007a6e:	7019      	strb	r1, [r3, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	e7f9      	b.n	8007a68 <memset+0x4>

08007a74 <_puts_r>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	0005      	movs	r5, r0
 8007a78:	000e      	movs	r6, r1
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d004      	beq.n	8007a88 <_puts_r+0x14>
 8007a7e:	6983      	ldr	r3, [r0, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <_puts_r+0x14>
 8007a84:	f000 fa24 	bl	8007ed0 <__sinit>
 8007a88:	69ab      	ldr	r3, [r5, #24]
 8007a8a:	68ac      	ldr	r4, [r5, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <_puts_r+0x22>
 8007a90:	0028      	movs	r0, r5
 8007a92:	f000 fa1d 	bl	8007ed0 <__sinit>
 8007a96:	4b24      	ldr	r3, [pc, #144]	; (8007b28 <_puts_r+0xb4>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	d10f      	bne.n	8007abc <_puts_r+0x48>
 8007a9c:	686c      	ldr	r4, [r5, #4]
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	071b      	lsls	r3, r3, #28
 8007aa2:	d502      	bpl.n	8007aaa <_puts_r+0x36>
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d11f      	bne.n	8007aea <_puts_r+0x76>
 8007aaa:	0021      	movs	r1, r4
 8007aac:	0028      	movs	r0, r5
 8007aae:	f000 f8a1 	bl	8007bf4 <__swsetup_r>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d019      	beq.n	8007aea <_puts_r+0x76>
 8007ab6:	2001      	movs	r0, #1
 8007ab8:	4240      	negs	r0, r0
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	4b1b      	ldr	r3, [pc, #108]	; (8007b2c <_puts_r+0xb8>)
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d101      	bne.n	8007ac6 <_puts_r+0x52>
 8007ac2:	68ac      	ldr	r4, [r5, #8]
 8007ac4:	e7eb      	b.n	8007a9e <_puts_r+0x2a>
 8007ac6:	4b1a      	ldr	r3, [pc, #104]	; (8007b30 <_puts_r+0xbc>)
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d1e8      	bne.n	8007a9e <_puts_r+0x2a>
 8007acc:	68ec      	ldr	r4, [r5, #12]
 8007ace:	e7e6      	b.n	8007a9e <_puts_r+0x2a>
 8007ad0:	3601      	adds	r6, #1
 8007ad2:	60a3      	str	r3, [r4, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	da04      	bge.n	8007ae2 <_puts_r+0x6e>
 8007ad8:	69a2      	ldr	r2, [r4, #24]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	dc16      	bgt.n	8007b0c <_puts_r+0x98>
 8007ade:	290a      	cmp	r1, #10
 8007ae0:	d014      	beq.n	8007b0c <_puts_r+0x98>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	6022      	str	r2, [r4, #0]
 8007ae8:	7019      	strb	r1, [r3, #0]
 8007aea:	68a3      	ldr	r3, [r4, #8]
 8007aec:	7831      	ldrb	r1, [r6, #0]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	2900      	cmp	r1, #0
 8007af2:	d1ed      	bne.n	8007ad0 <_puts_r+0x5c>
 8007af4:	60a3      	str	r3, [r4, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da0f      	bge.n	8007b1a <_puts_r+0xa6>
 8007afa:	0022      	movs	r2, r4
 8007afc:	310a      	adds	r1, #10
 8007afe:	0028      	movs	r0, r5
 8007b00:	f000 f822 	bl	8007b48 <__swbuf_r>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d0d6      	beq.n	8007ab6 <_puts_r+0x42>
 8007b08:	200a      	movs	r0, #10
 8007b0a:	e7d6      	b.n	8007aba <_puts_r+0x46>
 8007b0c:	0022      	movs	r2, r4
 8007b0e:	0028      	movs	r0, r5
 8007b10:	f000 f81a 	bl	8007b48 <__swbuf_r>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d1e8      	bne.n	8007aea <_puts_r+0x76>
 8007b18:	e7cd      	b.n	8007ab6 <_puts_r+0x42>
 8007b1a:	200a      	movs	r0, #10
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	6022      	str	r2, [r4, #0]
 8007b22:	7018      	strb	r0, [r3, #0]
 8007b24:	e7c9      	b.n	8007aba <_puts_r+0x46>
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	08008514 	.word	0x08008514
 8007b2c:	08008534 	.word	0x08008534
 8007b30:	080084f4 	.word	0x080084f4

08007b34 <puts>:
 8007b34:	b510      	push	{r4, lr}
 8007b36:	4b03      	ldr	r3, [pc, #12]	; (8007b44 <puts+0x10>)
 8007b38:	0001      	movs	r1, r0
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	f7ff ff9a 	bl	8007a74 <_puts_r>
 8007b40:	bd10      	pop	{r4, pc}
 8007b42:	46c0      	nop			; (mov r8, r8)
 8007b44:	2000000c 	.word	0x2000000c

08007b48 <__swbuf_r>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	0005      	movs	r5, r0
 8007b4c:	000e      	movs	r6, r1
 8007b4e:	0014      	movs	r4, r2
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d004      	beq.n	8007b5e <__swbuf_r+0x16>
 8007b54:	6983      	ldr	r3, [r0, #24]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <__swbuf_r+0x16>
 8007b5a:	f000 f9b9 	bl	8007ed0 <__sinit>
 8007b5e:	4b22      	ldr	r3, [pc, #136]	; (8007be8 <__swbuf_r+0xa0>)
 8007b60:	429c      	cmp	r4, r3
 8007b62:	d12d      	bne.n	8007bc0 <__swbuf_r+0x78>
 8007b64:	686c      	ldr	r4, [r5, #4]
 8007b66:	69a3      	ldr	r3, [r4, #24]
 8007b68:	60a3      	str	r3, [r4, #8]
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	071b      	lsls	r3, r3, #28
 8007b6e:	d531      	bpl.n	8007bd4 <__swbuf_r+0x8c>
 8007b70:	6923      	ldr	r3, [r4, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d02e      	beq.n	8007bd4 <__swbuf_r+0x8c>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	6922      	ldr	r2, [r4, #16]
 8007b7a:	b2f7      	uxtb	r7, r6
 8007b7c:	1a98      	subs	r0, r3, r2
 8007b7e:	6963      	ldr	r3, [r4, #20]
 8007b80:	b2f6      	uxtb	r6, r6
 8007b82:	4283      	cmp	r3, r0
 8007b84:	dc05      	bgt.n	8007b92 <__swbuf_r+0x4a>
 8007b86:	0021      	movs	r1, r4
 8007b88:	0028      	movs	r0, r5
 8007b8a:	f000 f933 	bl	8007df4 <_fflush_r>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d126      	bne.n	8007be0 <__swbuf_r+0x98>
 8007b92:	68a3      	ldr	r3, [r4, #8]
 8007b94:	3001      	adds	r0, #1
 8007b96:	3b01      	subs	r3, #1
 8007b98:	60a3      	str	r3, [r4, #8]
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	6022      	str	r2, [r4, #0]
 8007ba0:	701f      	strb	r7, [r3, #0]
 8007ba2:	6963      	ldr	r3, [r4, #20]
 8007ba4:	4283      	cmp	r3, r0
 8007ba6:	d004      	beq.n	8007bb2 <__swbuf_r+0x6a>
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	07db      	lsls	r3, r3, #31
 8007bac:	d51a      	bpl.n	8007be4 <__swbuf_r+0x9c>
 8007bae:	2e0a      	cmp	r6, #10
 8007bb0:	d118      	bne.n	8007be4 <__swbuf_r+0x9c>
 8007bb2:	0021      	movs	r1, r4
 8007bb4:	0028      	movs	r0, r5
 8007bb6:	f000 f91d 	bl	8007df4 <_fflush_r>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d012      	beq.n	8007be4 <__swbuf_r+0x9c>
 8007bbe:	e00f      	b.n	8007be0 <__swbuf_r+0x98>
 8007bc0:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <__swbuf_r+0xa4>)
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	d101      	bne.n	8007bca <__swbuf_r+0x82>
 8007bc6:	68ac      	ldr	r4, [r5, #8]
 8007bc8:	e7cd      	b.n	8007b66 <__swbuf_r+0x1e>
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <__swbuf_r+0xa8>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	d1ca      	bne.n	8007b66 <__swbuf_r+0x1e>
 8007bd0:	68ec      	ldr	r4, [r5, #12]
 8007bd2:	e7c8      	b.n	8007b66 <__swbuf_r+0x1e>
 8007bd4:	0021      	movs	r1, r4
 8007bd6:	0028      	movs	r0, r5
 8007bd8:	f000 f80c 	bl	8007bf4 <__swsetup_r>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d0ca      	beq.n	8007b76 <__swbuf_r+0x2e>
 8007be0:	2601      	movs	r6, #1
 8007be2:	4276      	negs	r6, r6
 8007be4:	0030      	movs	r0, r6
 8007be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be8:	08008514 	.word	0x08008514
 8007bec:	08008534 	.word	0x08008534
 8007bf0:	080084f4 	.word	0x080084f4

08007bf4 <__swsetup_r>:
 8007bf4:	4b36      	ldr	r3, [pc, #216]	; (8007cd0 <__swsetup_r+0xdc>)
 8007bf6:	b570      	push	{r4, r5, r6, lr}
 8007bf8:	681d      	ldr	r5, [r3, #0]
 8007bfa:	0006      	movs	r6, r0
 8007bfc:	000c      	movs	r4, r1
 8007bfe:	2d00      	cmp	r5, #0
 8007c00:	d005      	beq.n	8007c0e <__swsetup_r+0x1a>
 8007c02:	69ab      	ldr	r3, [r5, #24]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d102      	bne.n	8007c0e <__swsetup_r+0x1a>
 8007c08:	0028      	movs	r0, r5
 8007c0a:	f000 f961 	bl	8007ed0 <__sinit>
 8007c0e:	4b31      	ldr	r3, [pc, #196]	; (8007cd4 <__swsetup_r+0xe0>)
 8007c10:	429c      	cmp	r4, r3
 8007c12:	d10f      	bne.n	8007c34 <__swsetup_r+0x40>
 8007c14:	686c      	ldr	r4, [r5, #4]
 8007c16:	230c      	movs	r3, #12
 8007c18:	5ee2      	ldrsh	r2, [r4, r3]
 8007c1a:	b293      	uxth	r3, r2
 8007c1c:	0719      	lsls	r1, r3, #28
 8007c1e:	d42d      	bmi.n	8007c7c <__swsetup_r+0x88>
 8007c20:	06d9      	lsls	r1, r3, #27
 8007c22:	d411      	bmi.n	8007c48 <__swsetup_r+0x54>
 8007c24:	2309      	movs	r3, #9
 8007c26:	2001      	movs	r0, #1
 8007c28:	6033      	str	r3, [r6, #0]
 8007c2a:	3337      	adds	r3, #55	; 0x37
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	81a3      	strh	r3, [r4, #12]
 8007c30:	4240      	negs	r0, r0
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	4b28      	ldr	r3, [pc, #160]	; (8007cd8 <__swsetup_r+0xe4>)
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d101      	bne.n	8007c3e <__swsetup_r+0x4a>
 8007c3a:	68ac      	ldr	r4, [r5, #8]
 8007c3c:	e7eb      	b.n	8007c16 <__swsetup_r+0x22>
 8007c3e:	4b27      	ldr	r3, [pc, #156]	; (8007cdc <__swsetup_r+0xe8>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	d1e8      	bne.n	8007c16 <__swsetup_r+0x22>
 8007c44:	68ec      	ldr	r4, [r5, #12]
 8007c46:	e7e6      	b.n	8007c16 <__swsetup_r+0x22>
 8007c48:	075b      	lsls	r3, r3, #29
 8007c4a:	d513      	bpl.n	8007c74 <__swsetup_r+0x80>
 8007c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	d008      	beq.n	8007c64 <__swsetup_r+0x70>
 8007c52:	0023      	movs	r3, r4
 8007c54:	3344      	adds	r3, #68	; 0x44
 8007c56:	4299      	cmp	r1, r3
 8007c58:	d002      	beq.n	8007c60 <__swsetup_r+0x6c>
 8007c5a:	0030      	movs	r0, r6
 8007c5c:	f000 fa38 	bl	80080d0 <_free_r>
 8007c60:	2300      	movs	r3, #0
 8007c62:	6363      	str	r3, [r4, #52]	; 0x34
 8007c64:	2224      	movs	r2, #36	; 0x24
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	4393      	bics	r3, r2
 8007c6a:	81a3      	strh	r3, [r4, #12]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	6063      	str	r3, [r4, #4]
 8007c70:	6923      	ldr	r3, [r4, #16]
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	2308      	movs	r3, #8
 8007c76:	89a2      	ldrh	r2, [r4, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	81a3      	strh	r3, [r4, #12]
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10b      	bne.n	8007c9a <__swsetup_r+0xa6>
 8007c82:	21a0      	movs	r1, #160	; 0xa0
 8007c84:	2280      	movs	r2, #128	; 0x80
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	0089      	lsls	r1, r1, #2
 8007c8a:	0092      	lsls	r2, r2, #2
 8007c8c:	400b      	ands	r3, r1
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d003      	beq.n	8007c9a <__swsetup_r+0xa6>
 8007c92:	0021      	movs	r1, r4
 8007c94:	0030      	movs	r0, r6
 8007c96:	f000 f9d7 	bl	8008048 <__smakebuf_r>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	89a2      	ldrh	r2, [r4, #12]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	d011      	beq.n	8007cc6 <__swsetup_r+0xd2>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60a3      	str	r3, [r4, #8]
 8007ca6:	6963      	ldr	r3, [r4, #20]
 8007ca8:	425b      	negs	r3, r3
 8007caa:	61a3      	str	r3, [r4, #24]
 8007cac:	2000      	movs	r0, #0
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	4283      	cmp	r3, r0
 8007cb2:	d1be      	bne.n	8007c32 <__swsetup_r+0x3e>
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	5ee2      	ldrsh	r2, [r4, r3]
 8007cb8:	0613      	lsls	r3, r2, #24
 8007cba:	d5ba      	bpl.n	8007c32 <__swsetup_r+0x3e>
 8007cbc:	2340      	movs	r3, #64	; 0x40
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	3801      	subs	r0, #1
 8007cc4:	e7b5      	b.n	8007c32 <__swsetup_r+0x3e>
 8007cc6:	0792      	lsls	r2, r2, #30
 8007cc8:	d400      	bmi.n	8007ccc <__swsetup_r+0xd8>
 8007cca:	6963      	ldr	r3, [r4, #20]
 8007ccc:	60a3      	str	r3, [r4, #8]
 8007cce:	e7ed      	b.n	8007cac <__swsetup_r+0xb8>
 8007cd0:	2000000c 	.word	0x2000000c
 8007cd4:	08008514 	.word	0x08008514
 8007cd8:	08008534 	.word	0x08008534
 8007cdc:	080084f4 	.word	0x080084f4

08007ce0 <__sflush_r>:
 8007ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ce2:	898a      	ldrh	r2, [r1, #12]
 8007ce4:	0005      	movs	r5, r0
 8007ce6:	000c      	movs	r4, r1
 8007ce8:	0713      	lsls	r3, r2, #28
 8007cea:	d460      	bmi.n	8007dae <__sflush_r+0xce>
 8007cec:	684b      	ldr	r3, [r1, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	dc04      	bgt.n	8007cfc <__sflush_r+0x1c>
 8007cf2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	dc01      	bgt.n	8007cfc <__sflush_r+0x1c>
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007cfc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007cfe:	2f00      	cmp	r7, #0
 8007d00:	d0fa      	beq.n	8007cf8 <__sflush_r+0x18>
 8007d02:	2300      	movs	r3, #0
 8007d04:	682e      	ldr	r6, [r5, #0]
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	2380      	movs	r3, #128	; 0x80
 8007d0a:	015b      	lsls	r3, r3, #5
 8007d0c:	6a21      	ldr	r1, [r4, #32]
 8007d0e:	401a      	ands	r2, r3
 8007d10:	d034      	beq.n	8007d7c <__sflush_r+0x9c>
 8007d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	075b      	lsls	r3, r3, #29
 8007d18:	d506      	bpl.n	8007d28 <__sflush_r+0x48>
 8007d1a:	6863      	ldr	r3, [r4, #4]
 8007d1c:	1ac0      	subs	r0, r0, r3
 8007d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <__sflush_r+0x48>
 8007d24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d26:	1ac0      	subs	r0, r0, r3
 8007d28:	0002      	movs	r2, r0
 8007d2a:	6a21      	ldr	r1, [r4, #32]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	0028      	movs	r0, r5
 8007d30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007d32:	47b8      	blx	r7
 8007d34:	89a1      	ldrh	r1, [r4, #12]
 8007d36:	1c43      	adds	r3, r0, #1
 8007d38:	d106      	bne.n	8007d48 <__sflush_r+0x68>
 8007d3a:	682b      	ldr	r3, [r5, #0]
 8007d3c:	2b1d      	cmp	r3, #29
 8007d3e:	d830      	bhi.n	8007da2 <__sflush_r+0xc2>
 8007d40:	4a2b      	ldr	r2, [pc, #172]	; (8007df0 <__sflush_r+0x110>)
 8007d42:	40da      	lsrs	r2, r3
 8007d44:	07d3      	lsls	r3, r2, #31
 8007d46:	d52c      	bpl.n	8007da2 <__sflush_r+0xc2>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	6063      	str	r3, [r4, #4]
 8007d4c:	6923      	ldr	r3, [r4, #16]
 8007d4e:	6023      	str	r3, [r4, #0]
 8007d50:	04cb      	lsls	r3, r1, #19
 8007d52:	d505      	bpl.n	8007d60 <__sflush_r+0x80>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d102      	bne.n	8007d5e <__sflush_r+0x7e>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d100      	bne.n	8007d60 <__sflush_r+0x80>
 8007d5e:	6560      	str	r0, [r4, #84]	; 0x54
 8007d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d62:	602e      	str	r6, [r5, #0]
 8007d64:	2900      	cmp	r1, #0
 8007d66:	d0c7      	beq.n	8007cf8 <__sflush_r+0x18>
 8007d68:	0023      	movs	r3, r4
 8007d6a:	3344      	adds	r3, #68	; 0x44
 8007d6c:	4299      	cmp	r1, r3
 8007d6e:	d002      	beq.n	8007d76 <__sflush_r+0x96>
 8007d70:	0028      	movs	r0, r5
 8007d72:	f000 f9ad 	bl	80080d0 <_free_r>
 8007d76:	2000      	movs	r0, #0
 8007d78:	6360      	str	r0, [r4, #52]	; 0x34
 8007d7a:	e7be      	b.n	8007cfa <__sflush_r+0x1a>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	0028      	movs	r0, r5
 8007d80:	47b8      	blx	r7
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	d1c6      	bne.n	8007d14 <__sflush_r+0x34>
 8007d86:	682b      	ldr	r3, [r5, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0c3      	beq.n	8007d14 <__sflush_r+0x34>
 8007d8c:	2b1d      	cmp	r3, #29
 8007d8e:	d001      	beq.n	8007d94 <__sflush_r+0xb4>
 8007d90:	2b16      	cmp	r3, #22
 8007d92:	d101      	bne.n	8007d98 <__sflush_r+0xb8>
 8007d94:	602e      	str	r6, [r5, #0]
 8007d96:	e7af      	b.n	8007cf8 <__sflush_r+0x18>
 8007d98:	2340      	movs	r3, #64	; 0x40
 8007d9a:	89a2      	ldrh	r2, [r4, #12]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	e7ab      	b.n	8007cfa <__sflush_r+0x1a>
 8007da2:	2340      	movs	r3, #64	; 0x40
 8007da4:	430b      	orrs	r3, r1
 8007da6:	2001      	movs	r0, #1
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	4240      	negs	r0, r0
 8007dac:	e7a5      	b.n	8007cfa <__sflush_r+0x1a>
 8007dae:	690f      	ldr	r7, [r1, #16]
 8007db0:	2f00      	cmp	r7, #0
 8007db2:	d0a1      	beq.n	8007cf8 <__sflush_r+0x18>
 8007db4:	680b      	ldr	r3, [r1, #0]
 8007db6:	600f      	str	r7, [r1, #0]
 8007db8:	1bdb      	subs	r3, r3, r7
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	0792      	lsls	r2, r2, #30
 8007dc0:	d100      	bne.n	8007dc4 <__sflush_r+0xe4>
 8007dc2:	694b      	ldr	r3, [r1, #20]
 8007dc4:	60a3      	str	r3, [r4, #8]
 8007dc6:	9b01      	ldr	r3, [sp, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dc00      	bgt.n	8007dce <__sflush_r+0xee>
 8007dcc:	e794      	b.n	8007cf8 <__sflush_r+0x18>
 8007dce:	9b01      	ldr	r3, [sp, #4]
 8007dd0:	003a      	movs	r2, r7
 8007dd2:	6a21      	ldr	r1, [r4, #32]
 8007dd4:	0028      	movs	r0, r5
 8007dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dd8:	47b0      	blx	r6
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	dc03      	bgt.n	8007de6 <__sflush_r+0x106>
 8007dde:	2340      	movs	r3, #64	; 0x40
 8007de0:	89a2      	ldrh	r2, [r4, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	e7df      	b.n	8007da6 <__sflush_r+0xc6>
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	183f      	adds	r7, r7, r0
 8007dea:	1a1b      	subs	r3, r3, r0
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	e7ea      	b.n	8007dc6 <__sflush_r+0xe6>
 8007df0:	20400001 	.word	0x20400001

08007df4 <_fflush_r>:
 8007df4:	690b      	ldr	r3, [r1, #16]
 8007df6:	b570      	push	{r4, r5, r6, lr}
 8007df8:	0005      	movs	r5, r0
 8007dfa:	000c      	movs	r4, r1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <_fflush_r+0x10>
 8007e00:	2000      	movs	r0, #0
 8007e02:	bd70      	pop	{r4, r5, r6, pc}
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d004      	beq.n	8007e12 <_fflush_r+0x1e>
 8007e08:	6983      	ldr	r3, [r0, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <_fflush_r+0x1e>
 8007e0e:	f000 f85f 	bl	8007ed0 <__sinit>
 8007e12:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <_fflush_r+0x4c>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	d109      	bne.n	8007e2c <_fflush_r+0x38>
 8007e18:	686c      	ldr	r4, [r5, #4]
 8007e1a:	220c      	movs	r2, #12
 8007e1c:	5ea3      	ldrsh	r3, [r4, r2]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0ee      	beq.n	8007e00 <_fflush_r+0xc>
 8007e22:	0021      	movs	r1, r4
 8007e24:	0028      	movs	r0, r5
 8007e26:	f7ff ff5b 	bl	8007ce0 <__sflush_r>
 8007e2a:	e7ea      	b.n	8007e02 <_fflush_r+0xe>
 8007e2c:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <_fflush_r+0x50>)
 8007e2e:	429c      	cmp	r4, r3
 8007e30:	d101      	bne.n	8007e36 <_fflush_r+0x42>
 8007e32:	68ac      	ldr	r4, [r5, #8]
 8007e34:	e7f1      	b.n	8007e1a <_fflush_r+0x26>
 8007e36:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <_fflush_r+0x54>)
 8007e38:	429c      	cmp	r4, r3
 8007e3a:	d1ee      	bne.n	8007e1a <_fflush_r+0x26>
 8007e3c:	68ec      	ldr	r4, [r5, #12]
 8007e3e:	e7ec      	b.n	8007e1a <_fflush_r+0x26>
 8007e40:	08008514 	.word	0x08008514
 8007e44:	08008534 	.word	0x08008534
 8007e48:	080084f4 	.word	0x080084f4

08007e4c <std>:
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	b510      	push	{r4, lr}
 8007e50:	0004      	movs	r4, r0
 8007e52:	6003      	str	r3, [r0, #0]
 8007e54:	6043      	str	r3, [r0, #4]
 8007e56:	6083      	str	r3, [r0, #8]
 8007e58:	8181      	strh	r1, [r0, #12]
 8007e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e5c:	81c2      	strh	r2, [r0, #14]
 8007e5e:	6103      	str	r3, [r0, #16]
 8007e60:	6143      	str	r3, [r0, #20]
 8007e62:	6183      	str	r3, [r0, #24]
 8007e64:	0019      	movs	r1, r3
 8007e66:	2208      	movs	r2, #8
 8007e68:	305c      	adds	r0, #92	; 0x5c
 8007e6a:	f7ff fdfb 	bl	8007a64 <memset>
 8007e6e:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <std+0x38>)
 8007e70:	6224      	str	r4, [r4, #32]
 8007e72:	6263      	str	r3, [r4, #36]	; 0x24
 8007e74:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <std+0x3c>)
 8007e76:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e78:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <std+0x40>)
 8007e7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e7c:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <std+0x44>)
 8007e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	46c0      	nop			; (mov r8, r8)
 8007e84:	08008245 	.word	0x08008245
 8007e88:	0800826d 	.word	0x0800826d
 8007e8c:	080082a5 	.word	0x080082a5
 8007e90:	080082d1 	.word	0x080082d1

08007e94 <_cleanup_r>:
 8007e94:	b510      	push	{r4, lr}
 8007e96:	4902      	ldr	r1, [pc, #8]	; (8007ea0 <_cleanup_r+0xc>)
 8007e98:	f000 f88c 	bl	8007fb4 <_fwalk_reent>
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	08007df5 	.word	0x08007df5

08007ea4 <__sfmoreglue>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	2568      	movs	r5, #104	; 0x68
 8007ea8:	1e4a      	subs	r2, r1, #1
 8007eaa:	4355      	muls	r5, r2
 8007eac:	000e      	movs	r6, r1
 8007eae:	0029      	movs	r1, r5
 8007eb0:	3174      	adds	r1, #116	; 0x74
 8007eb2:	f000 f957 	bl	8008164 <_malloc_r>
 8007eb6:	1e04      	subs	r4, r0, #0
 8007eb8:	d008      	beq.n	8007ecc <__sfmoreglue+0x28>
 8007eba:	2100      	movs	r1, #0
 8007ebc:	002a      	movs	r2, r5
 8007ebe:	6001      	str	r1, [r0, #0]
 8007ec0:	6046      	str	r6, [r0, #4]
 8007ec2:	300c      	adds	r0, #12
 8007ec4:	60a0      	str	r0, [r4, #8]
 8007ec6:	3268      	adds	r2, #104	; 0x68
 8007ec8:	f7ff fdcc 	bl	8007a64 <memset>
 8007ecc:	0020      	movs	r0, r4
 8007ece:	bd70      	pop	{r4, r5, r6, pc}

08007ed0 <__sinit>:
 8007ed0:	6983      	ldr	r3, [r0, #24]
 8007ed2:	b513      	push	{r0, r1, r4, lr}
 8007ed4:	0004      	movs	r4, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d128      	bne.n	8007f2c <__sinit+0x5c>
 8007eda:	6483      	str	r3, [r0, #72]	; 0x48
 8007edc:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007ede:	6503      	str	r3, [r0, #80]	; 0x50
 8007ee0:	4b13      	ldr	r3, [pc, #76]	; (8007f30 <__sinit+0x60>)
 8007ee2:	4a14      	ldr	r2, [pc, #80]	; (8007f34 <__sinit+0x64>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6282      	str	r2, [r0, #40]	; 0x28
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	4298      	cmp	r0, r3
 8007eec:	d101      	bne.n	8007ef2 <__sinit+0x22>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	6183      	str	r3, [r0, #24]
 8007ef2:	0020      	movs	r0, r4
 8007ef4:	f000 f820 	bl	8007f38 <__sfp>
 8007ef8:	6060      	str	r0, [r4, #4]
 8007efa:	0020      	movs	r0, r4
 8007efc:	f000 f81c 	bl	8007f38 <__sfp>
 8007f00:	60a0      	str	r0, [r4, #8]
 8007f02:	0020      	movs	r0, r4
 8007f04:	f000 f818 	bl	8007f38 <__sfp>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	60e0      	str	r0, [r4, #12]
 8007f0c:	2104      	movs	r1, #4
 8007f0e:	6860      	ldr	r0, [r4, #4]
 8007f10:	f7ff ff9c 	bl	8007e4c <std>
 8007f14:	2201      	movs	r2, #1
 8007f16:	2109      	movs	r1, #9
 8007f18:	68a0      	ldr	r0, [r4, #8]
 8007f1a:	f7ff ff97 	bl	8007e4c <std>
 8007f1e:	2202      	movs	r2, #2
 8007f20:	2112      	movs	r1, #18
 8007f22:	68e0      	ldr	r0, [r4, #12]
 8007f24:	f7ff ff92 	bl	8007e4c <std>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	61a3      	str	r3, [r4, #24]
 8007f2c:	bd13      	pop	{r0, r1, r4, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	080084f0 	.word	0x080084f0
 8007f34:	08007e95 	.word	0x08007e95

08007f38 <__sfp>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	4b1c      	ldr	r3, [pc, #112]	; (8007fac <__sfp+0x74>)
 8007f3c:	0007      	movs	r7, r0
 8007f3e:	681e      	ldr	r6, [r3, #0]
 8007f40:	69b3      	ldr	r3, [r6, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <__sfp+0x14>
 8007f46:	0030      	movs	r0, r6
 8007f48:	f7ff ffc2 	bl	8007ed0 <__sinit>
 8007f4c:	3648      	adds	r6, #72	; 0x48
 8007f4e:	68b4      	ldr	r4, [r6, #8]
 8007f50:	6873      	ldr	r3, [r6, #4]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	d504      	bpl.n	8007f60 <__sfp+0x28>
 8007f56:	6833      	ldr	r3, [r6, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d007      	beq.n	8007f6c <__sfp+0x34>
 8007f5c:	6836      	ldr	r6, [r6, #0]
 8007f5e:	e7f6      	b.n	8007f4e <__sfp+0x16>
 8007f60:	220c      	movs	r2, #12
 8007f62:	5ea5      	ldrsh	r5, [r4, r2]
 8007f64:	2d00      	cmp	r5, #0
 8007f66:	d00d      	beq.n	8007f84 <__sfp+0x4c>
 8007f68:	3468      	adds	r4, #104	; 0x68
 8007f6a:	e7f2      	b.n	8007f52 <__sfp+0x1a>
 8007f6c:	2104      	movs	r1, #4
 8007f6e:	0038      	movs	r0, r7
 8007f70:	f7ff ff98 	bl	8007ea4 <__sfmoreglue>
 8007f74:	6030      	str	r0, [r6, #0]
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d1f0      	bne.n	8007f5c <__sfp+0x24>
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	0004      	movs	r4, r0
 8007f7e:	603b      	str	r3, [r7, #0]
 8007f80:	0020      	movs	r0, r4
 8007f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f84:	0020      	movs	r0, r4
 8007f86:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <__sfp+0x78>)
 8007f88:	6665      	str	r5, [r4, #100]	; 0x64
 8007f8a:	6025      	str	r5, [r4, #0]
 8007f8c:	6065      	str	r5, [r4, #4]
 8007f8e:	60a5      	str	r5, [r4, #8]
 8007f90:	60e3      	str	r3, [r4, #12]
 8007f92:	6125      	str	r5, [r4, #16]
 8007f94:	6165      	str	r5, [r4, #20]
 8007f96:	61a5      	str	r5, [r4, #24]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	0029      	movs	r1, r5
 8007f9c:	305c      	adds	r0, #92	; 0x5c
 8007f9e:	f7ff fd61 	bl	8007a64 <memset>
 8007fa2:	6365      	str	r5, [r4, #52]	; 0x34
 8007fa4:	63a5      	str	r5, [r4, #56]	; 0x38
 8007fa6:	64a5      	str	r5, [r4, #72]	; 0x48
 8007fa8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007faa:	e7e9      	b.n	8007f80 <__sfp+0x48>
 8007fac:	080084f0 	.word	0x080084f0
 8007fb0:	ffff0001 	.word	0xffff0001

08007fb4 <_fwalk_reent>:
 8007fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fb6:	0004      	movs	r4, r0
 8007fb8:	0007      	movs	r7, r0
 8007fba:	2600      	movs	r6, #0
 8007fbc:	9101      	str	r1, [sp, #4]
 8007fbe:	3448      	adds	r4, #72	; 0x48
 8007fc0:	2c00      	cmp	r4, #0
 8007fc2:	d101      	bne.n	8007fc8 <_fwalk_reent+0x14>
 8007fc4:	0030      	movs	r0, r6
 8007fc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	68a5      	ldr	r5, [r4, #8]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	9b00      	ldr	r3, [sp, #0]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	d501      	bpl.n	8007fda <_fwalk_reent+0x26>
 8007fd6:	6824      	ldr	r4, [r4, #0]
 8007fd8:	e7f2      	b.n	8007fc0 <_fwalk_reent+0xc>
 8007fda:	89ab      	ldrh	r3, [r5, #12]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d908      	bls.n	8007ff2 <_fwalk_reent+0x3e>
 8007fe0:	220e      	movs	r2, #14
 8007fe2:	5eab      	ldrsh	r3, [r5, r2]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	d004      	beq.n	8007ff2 <_fwalk_reent+0x3e>
 8007fe8:	0029      	movs	r1, r5
 8007fea:	0038      	movs	r0, r7
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	4798      	blx	r3
 8007ff0:	4306      	orrs	r6, r0
 8007ff2:	3568      	adds	r5, #104	; 0x68
 8007ff4:	e7eb      	b.n	8007fce <_fwalk_reent+0x1a>
	...

08007ff8 <__swhatbuf_r>:
 8007ff8:	b570      	push	{r4, r5, r6, lr}
 8007ffa:	000e      	movs	r6, r1
 8007ffc:	001d      	movs	r5, r3
 8007ffe:	230e      	movs	r3, #14
 8008000:	5ec9      	ldrsh	r1, [r1, r3]
 8008002:	b096      	sub	sp, #88	; 0x58
 8008004:	0014      	movs	r4, r2
 8008006:	2900      	cmp	r1, #0
 8008008:	da07      	bge.n	800801a <__swhatbuf_r+0x22>
 800800a:	2300      	movs	r3, #0
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	89b3      	ldrh	r3, [r6, #12]
 8008010:	061b      	lsls	r3, r3, #24
 8008012:	d411      	bmi.n	8008038 <__swhatbuf_r+0x40>
 8008014:	2380      	movs	r3, #128	; 0x80
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	e00f      	b.n	800803a <__swhatbuf_r+0x42>
 800801a:	466a      	mov	r2, sp
 800801c:	f000 f984 	bl	8008328 <_fstat_r>
 8008020:	2800      	cmp	r0, #0
 8008022:	dbf2      	blt.n	800800a <__swhatbuf_r+0x12>
 8008024:	22f0      	movs	r2, #240	; 0xf0
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	0212      	lsls	r2, r2, #8
 800802a:	4013      	ands	r3, r2
 800802c:	4a05      	ldr	r2, [pc, #20]	; (8008044 <__swhatbuf_r+0x4c>)
 800802e:	189b      	adds	r3, r3, r2
 8008030:	425a      	negs	r2, r3
 8008032:	4153      	adcs	r3, r2
 8008034:	602b      	str	r3, [r5, #0]
 8008036:	e7ed      	b.n	8008014 <__swhatbuf_r+0x1c>
 8008038:	2340      	movs	r3, #64	; 0x40
 800803a:	2000      	movs	r0, #0
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	b016      	add	sp, #88	; 0x58
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	ffffe000 	.word	0xffffe000

08008048 <__smakebuf_r>:
 8008048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800804a:	2602      	movs	r6, #2
 800804c:	898b      	ldrh	r3, [r1, #12]
 800804e:	0005      	movs	r5, r0
 8008050:	000c      	movs	r4, r1
 8008052:	4233      	tst	r3, r6
 8008054:	d006      	beq.n	8008064 <__smakebuf_r+0x1c>
 8008056:	0023      	movs	r3, r4
 8008058:	3347      	adds	r3, #71	; 0x47
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	6123      	str	r3, [r4, #16]
 800805e:	2301      	movs	r3, #1
 8008060:	6163      	str	r3, [r4, #20]
 8008062:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008064:	ab01      	add	r3, sp, #4
 8008066:	466a      	mov	r2, sp
 8008068:	f7ff ffc6 	bl	8007ff8 <__swhatbuf_r>
 800806c:	9900      	ldr	r1, [sp, #0]
 800806e:	0007      	movs	r7, r0
 8008070:	0028      	movs	r0, r5
 8008072:	f000 f877 	bl	8008164 <_malloc_r>
 8008076:	2800      	cmp	r0, #0
 8008078:	d108      	bne.n	800808c <__smakebuf_r+0x44>
 800807a:	220c      	movs	r2, #12
 800807c:	5ea3      	ldrsh	r3, [r4, r2]
 800807e:	059a      	lsls	r2, r3, #22
 8008080:	d4ef      	bmi.n	8008062 <__smakebuf_r+0x1a>
 8008082:	2203      	movs	r2, #3
 8008084:	4393      	bics	r3, r2
 8008086:	431e      	orrs	r6, r3
 8008088:	81a6      	strh	r6, [r4, #12]
 800808a:	e7e4      	b.n	8008056 <__smakebuf_r+0xe>
 800808c:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <__smakebuf_r+0x84>)
 800808e:	62ab      	str	r3, [r5, #40]	; 0x28
 8008090:	2380      	movs	r3, #128	; 0x80
 8008092:	89a2      	ldrh	r2, [r4, #12]
 8008094:	6020      	str	r0, [r4, #0]
 8008096:	4313      	orrs	r3, r2
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	9b00      	ldr	r3, [sp, #0]
 800809c:	6120      	str	r0, [r4, #16]
 800809e:	6163      	str	r3, [r4, #20]
 80080a0:	9b01      	ldr	r3, [sp, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00d      	beq.n	80080c2 <__smakebuf_r+0x7a>
 80080a6:	230e      	movs	r3, #14
 80080a8:	5ee1      	ldrsh	r1, [r4, r3]
 80080aa:	0028      	movs	r0, r5
 80080ac:	f000 f94e 	bl	800834c <_isatty_r>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d006      	beq.n	80080c2 <__smakebuf_r+0x7a>
 80080b4:	2203      	movs	r2, #3
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	4393      	bics	r3, r2
 80080ba:	001a      	movs	r2, r3
 80080bc:	2301      	movs	r3, #1
 80080be:	4313      	orrs	r3, r2
 80080c0:	81a3      	strh	r3, [r4, #12]
 80080c2:	89a0      	ldrh	r0, [r4, #12]
 80080c4:	4338      	orrs	r0, r7
 80080c6:	81a0      	strh	r0, [r4, #12]
 80080c8:	e7cb      	b.n	8008062 <__smakebuf_r+0x1a>
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	08007e95 	.word	0x08007e95

080080d0 <_free_r>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	0005      	movs	r5, r0
 80080d4:	2900      	cmp	r1, #0
 80080d6:	d010      	beq.n	80080fa <_free_r+0x2a>
 80080d8:	1f0c      	subs	r4, r1, #4
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	da00      	bge.n	80080e2 <_free_r+0x12>
 80080e0:	18e4      	adds	r4, r4, r3
 80080e2:	0028      	movs	r0, r5
 80080e4:	f000 f958 	bl	8008398 <__malloc_lock>
 80080e8:	4a1d      	ldr	r2, [pc, #116]	; (8008160 <_free_r+0x90>)
 80080ea:	6813      	ldr	r3, [r2, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d105      	bne.n	80080fc <_free_r+0x2c>
 80080f0:	6063      	str	r3, [r4, #4]
 80080f2:	6014      	str	r4, [r2, #0]
 80080f4:	0028      	movs	r0, r5
 80080f6:	f000 f950 	bl	800839a <__malloc_unlock>
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	d909      	bls.n	8008114 <_free_r+0x44>
 8008100:	6821      	ldr	r1, [r4, #0]
 8008102:	1860      	adds	r0, r4, r1
 8008104:	4283      	cmp	r3, r0
 8008106:	d1f3      	bne.n	80080f0 <_free_r+0x20>
 8008108:	6818      	ldr	r0, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	1841      	adds	r1, r0, r1
 800810e:	6021      	str	r1, [r4, #0]
 8008110:	e7ee      	b.n	80080f0 <_free_r+0x20>
 8008112:	0013      	movs	r3, r2
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	2a00      	cmp	r2, #0
 8008118:	d001      	beq.n	800811e <_free_r+0x4e>
 800811a:	42a2      	cmp	r2, r4
 800811c:	d9f9      	bls.n	8008112 <_free_r+0x42>
 800811e:	6819      	ldr	r1, [r3, #0]
 8008120:	1858      	adds	r0, r3, r1
 8008122:	42a0      	cmp	r0, r4
 8008124:	d10b      	bne.n	800813e <_free_r+0x6e>
 8008126:	6820      	ldr	r0, [r4, #0]
 8008128:	1809      	adds	r1, r1, r0
 800812a:	1858      	adds	r0, r3, r1
 800812c:	6019      	str	r1, [r3, #0]
 800812e:	4282      	cmp	r2, r0
 8008130:	d1e0      	bne.n	80080f4 <_free_r+0x24>
 8008132:	6810      	ldr	r0, [r2, #0]
 8008134:	6852      	ldr	r2, [r2, #4]
 8008136:	1841      	adds	r1, r0, r1
 8008138:	6019      	str	r1, [r3, #0]
 800813a:	605a      	str	r2, [r3, #4]
 800813c:	e7da      	b.n	80080f4 <_free_r+0x24>
 800813e:	42a0      	cmp	r0, r4
 8008140:	d902      	bls.n	8008148 <_free_r+0x78>
 8008142:	230c      	movs	r3, #12
 8008144:	602b      	str	r3, [r5, #0]
 8008146:	e7d5      	b.n	80080f4 <_free_r+0x24>
 8008148:	6821      	ldr	r1, [r4, #0]
 800814a:	1860      	adds	r0, r4, r1
 800814c:	4282      	cmp	r2, r0
 800814e:	d103      	bne.n	8008158 <_free_r+0x88>
 8008150:	6810      	ldr	r0, [r2, #0]
 8008152:	6852      	ldr	r2, [r2, #4]
 8008154:	1841      	adds	r1, r0, r1
 8008156:	6021      	str	r1, [r4, #0]
 8008158:	6062      	str	r2, [r4, #4]
 800815a:	605c      	str	r4, [r3, #4]
 800815c:	e7ca      	b.n	80080f4 <_free_r+0x24>
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	2000030c 	.word	0x2000030c

08008164 <_malloc_r>:
 8008164:	2303      	movs	r3, #3
 8008166:	b570      	push	{r4, r5, r6, lr}
 8008168:	1ccd      	adds	r5, r1, #3
 800816a:	439d      	bics	r5, r3
 800816c:	3508      	adds	r5, #8
 800816e:	0006      	movs	r6, r0
 8008170:	2d0c      	cmp	r5, #12
 8008172:	d21e      	bcs.n	80081b2 <_malloc_r+0x4e>
 8008174:	250c      	movs	r5, #12
 8008176:	42a9      	cmp	r1, r5
 8008178:	d81d      	bhi.n	80081b6 <_malloc_r+0x52>
 800817a:	0030      	movs	r0, r6
 800817c:	f000 f90c 	bl	8008398 <__malloc_lock>
 8008180:	4a25      	ldr	r2, [pc, #148]	; (8008218 <_malloc_r+0xb4>)
 8008182:	6814      	ldr	r4, [r2, #0]
 8008184:	0021      	movs	r1, r4
 8008186:	2900      	cmp	r1, #0
 8008188:	d119      	bne.n	80081be <_malloc_r+0x5a>
 800818a:	4c24      	ldr	r4, [pc, #144]	; (800821c <_malloc_r+0xb8>)
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d103      	bne.n	800819a <_malloc_r+0x36>
 8008192:	0030      	movs	r0, r6
 8008194:	f000 f844 	bl	8008220 <_sbrk_r>
 8008198:	6020      	str	r0, [r4, #0]
 800819a:	0029      	movs	r1, r5
 800819c:	0030      	movs	r0, r6
 800819e:	f000 f83f 	bl	8008220 <_sbrk_r>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	d12b      	bne.n	80081fe <_malloc_r+0x9a>
 80081a6:	230c      	movs	r3, #12
 80081a8:	0030      	movs	r0, r6
 80081aa:	6033      	str	r3, [r6, #0]
 80081ac:	f000 f8f5 	bl	800839a <__malloc_unlock>
 80081b0:	e003      	b.n	80081ba <_malloc_r+0x56>
 80081b2:	2d00      	cmp	r5, #0
 80081b4:	dadf      	bge.n	8008176 <_malloc_r+0x12>
 80081b6:	230c      	movs	r3, #12
 80081b8:	6033      	str	r3, [r6, #0]
 80081ba:	2000      	movs	r0, #0
 80081bc:	bd70      	pop	{r4, r5, r6, pc}
 80081be:	680b      	ldr	r3, [r1, #0]
 80081c0:	1b5b      	subs	r3, r3, r5
 80081c2:	d419      	bmi.n	80081f8 <_malloc_r+0x94>
 80081c4:	2b0b      	cmp	r3, #11
 80081c6:	d903      	bls.n	80081d0 <_malloc_r+0x6c>
 80081c8:	600b      	str	r3, [r1, #0]
 80081ca:	18cc      	adds	r4, r1, r3
 80081cc:	6025      	str	r5, [r4, #0]
 80081ce:	e003      	b.n	80081d8 <_malloc_r+0x74>
 80081d0:	684b      	ldr	r3, [r1, #4]
 80081d2:	428c      	cmp	r4, r1
 80081d4:	d10d      	bne.n	80081f2 <_malloc_r+0x8e>
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	0030      	movs	r0, r6
 80081da:	f000 f8de 	bl	800839a <__malloc_unlock>
 80081de:	0020      	movs	r0, r4
 80081e0:	2207      	movs	r2, #7
 80081e2:	300b      	adds	r0, #11
 80081e4:	1d23      	adds	r3, r4, #4
 80081e6:	4390      	bics	r0, r2
 80081e8:	1ac3      	subs	r3, r0, r3
 80081ea:	d0e7      	beq.n	80081bc <_malloc_r+0x58>
 80081ec:	425a      	negs	r2, r3
 80081ee:	50e2      	str	r2, [r4, r3]
 80081f0:	e7e4      	b.n	80081bc <_malloc_r+0x58>
 80081f2:	6063      	str	r3, [r4, #4]
 80081f4:	000c      	movs	r4, r1
 80081f6:	e7ef      	b.n	80081d8 <_malloc_r+0x74>
 80081f8:	000c      	movs	r4, r1
 80081fa:	6849      	ldr	r1, [r1, #4]
 80081fc:	e7c3      	b.n	8008186 <_malloc_r+0x22>
 80081fe:	2303      	movs	r3, #3
 8008200:	1cc4      	adds	r4, r0, #3
 8008202:	439c      	bics	r4, r3
 8008204:	42a0      	cmp	r0, r4
 8008206:	d0e1      	beq.n	80081cc <_malloc_r+0x68>
 8008208:	1a21      	subs	r1, r4, r0
 800820a:	0030      	movs	r0, r6
 800820c:	f000 f808 	bl	8008220 <_sbrk_r>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d1db      	bne.n	80081cc <_malloc_r+0x68>
 8008214:	e7c7      	b.n	80081a6 <_malloc_r+0x42>
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	2000030c 	.word	0x2000030c
 800821c:	20000310 	.word	0x20000310

08008220 <_sbrk_r>:
 8008220:	2300      	movs	r3, #0
 8008222:	b570      	push	{r4, r5, r6, lr}
 8008224:	4c06      	ldr	r4, [pc, #24]	; (8008240 <_sbrk_r+0x20>)
 8008226:	0005      	movs	r5, r0
 8008228:	0008      	movs	r0, r1
 800822a:	6023      	str	r3, [r4, #0]
 800822c:	f7fa fc58 	bl	8002ae0 <_sbrk>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d103      	bne.n	800823c <_sbrk_r+0x1c>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d000      	beq.n	800823c <_sbrk_r+0x1c>
 800823a:	602b      	str	r3, [r5, #0]
 800823c:	bd70      	pop	{r4, r5, r6, pc}
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	20000840 	.word	0x20000840

08008244 <__sread>:
 8008244:	b570      	push	{r4, r5, r6, lr}
 8008246:	000c      	movs	r4, r1
 8008248:	250e      	movs	r5, #14
 800824a:	5f49      	ldrsh	r1, [r1, r5]
 800824c:	f000 f8a6 	bl	800839c <_read_r>
 8008250:	2800      	cmp	r0, #0
 8008252:	db03      	blt.n	800825c <__sread+0x18>
 8008254:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008256:	181b      	adds	r3, r3, r0
 8008258:	6563      	str	r3, [r4, #84]	; 0x54
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	4a02      	ldr	r2, [pc, #8]	; (8008268 <__sread+0x24>)
 8008260:	4013      	ands	r3, r2
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	e7f9      	b.n	800825a <__sread+0x16>
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	ffffefff 	.word	0xffffefff

0800826c <__swrite>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	001f      	movs	r7, r3
 8008270:	898b      	ldrh	r3, [r1, #12]
 8008272:	0005      	movs	r5, r0
 8008274:	000c      	movs	r4, r1
 8008276:	0016      	movs	r6, r2
 8008278:	05db      	lsls	r3, r3, #23
 800827a:	d505      	bpl.n	8008288 <__swrite+0x1c>
 800827c:	230e      	movs	r3, #14
 800827e:	5ec9      	ldrsh	r1, [r1, r3]
 8008280:	2200      	movs	r2, #0
 8008282:	2302      	movs	r3, #2
 8008284:	f000 f874 	bl	8008370 <_lseek_r>
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	4a05      	ldr	r2, [pc, #20]	; (80082a0 <__swrite+0x34>)
 800828c:	0028      	movs	r0, r5
 800828e:	4013      	ands	r3, r2
 8008290:	81a3      	strh	r3, [r4, #12]
 8008292:	0032      	movs	r2, r6
 8008294:	230e      	movs	r3, #14
 8008296:	5ee1      	ldrsh	r1, [r4, r3]
 8008298:	003b      	movs	r3, r7
 800829a:	f000 f81f 	bl	80082dc <_write_r>
 800829e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a0:	ffffefff 	.word	0xffffefff

080082a4 <__sseek>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	000c      	movs	r4, r1
 80082a8:	250e      	movs	r5, #14
 80082aa:	5f49      	ldrsh	r1, [r1, r5]
 80082ac:	f000 f860 	bl	8008370 <_lseek_r>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	1c42      	adds	r2, r0, #1
 80082b4:	d103      	bne.n	80082be <__sseek+0x1a>
 80082b6:	4a05      	ldr	r2, [pc, #20]	; (80082cc <__sseek+0x28>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	bd70      	pop	{r4, r5, r6, pc}
 80082be:	2280      	movs	r2, #128	; 0x80
 80082c0:	0152      	lsls	r2, r2, #5
 80082c2:	4313      	orrs	r3, r2
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	6560      	str	r0, [r4, #84]	; 0x54
 80082c8:	e7f8      	b.n	80082bc <__sseek+0x18>
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	ffffefff 	.word	0xffffefff

080082d0 <__sclose>:
 80082d0:	b510      	push	{r4, lr}
 80082d2:	230e      	movs	r3, #14
 80082d4:	5ec9      	ldrsh	r1, [r1, r3]
 80082d6:	f000 f815 	bl	8008304 <_close_r>
 80082da:	bd10      	pop	{r4, pc}

080082dc <_write_r>:
 80082dc:	b570      	push	{r4, r5, r6, lr}
 80082de:	0005      	movs	r5, r0
 80082e0:	0008      	movs	r0, r1
 80082e2:	0011      	movs	r1, r2
 80082e4:	2200      	movs	r2, #0
 80082e6:	4c06      	ldr	r4, [pc, #24]	; (8008300 <_write_r+0x24>)
 80082e8:	6022      	str	r2, [r4, #0]
 80082ea:	001a      	movs	r2, r3
 80082ec:	f7fa fbaf 	bl	8002a4e <_write>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d103      	bne.n	80082fc <_write_r+0x20>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d000      	beq.n	80082fc <_write_r+0x20>
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	bd70      	pop	{r4, r5, r6, pc}
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	20000840 	.word	0x20000840

08008304 <_close_r>:
 8008304:	2300      	movs	r3, #0
 8008306:	b570      	push	{r4, r5, r6, lr}
 8008308:	4c06      	ldr	r4, [pc, #24]	; (8008324 <_close_r+0x20>)
 800830a:	0005      	movs	r5, r0
 800830c:	0008      	movs	r0, r1
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	f7fa fbb9 	bl	8002a86 <_close>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d103      	bne.n	8008320 <_close_r+0x1c>
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d000      	beq.n	8008320 <_close_r+0x1c>
 800831e:	602b      	str	r3, [r5, #0]
 8008320:	bd70      	pop	{r4, r5, r6, pc}
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	20000840 	.word	0x20000840

08008328 <_fstat_r>:
 8008328:	2300      	movs	r3, #0
 800832a:	b570      	push	{r4, r5, r6, lr}
 800832c:	4c06      	ldr	r4, [pc, #24]	; (8008348 <_fstat_r+0x20>)
 800832e:	0005      	movs	r5, r0
 8008330:	0008      	movs	r0, r1
 8008332:	0011      	movs	r1, r2
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	f7fa fbb0 	bl	8002a9a <_fstat>
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	d103      	bne.n	8008346 <_fstat_r+0x1e>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d000      	beq.n	8008346 <_fstat_r+0x1e>
 8008344:	602b      	str	r3, [r5, #0]
 8008346:	bd70      	pop	{r4, r5, r6, pc}
 8008348:	20000840 	.word	0x20000840

0800834c <_isatty_r>:
 800834c:	2300      	movs	r3, #0
 800834e:	b570      	push	{r4, r5, r6, lr}
 8008350:	4c06      	ldr	r4, [pc, #24]	; (800836c <_isatty_r+0x20>)
 8008352:	0005      	movs	r5, r0
 8008354:	0008      	movs	r0, r1
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	f7fa fbad 	bl	8002ab6 <_isatty>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d103      	bne.n	8008368 <_isatty_r+0x1c>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d000      	beq.n	8008368 <_isatty_r+0x1c>
 8008366:	602b      	str	r3, [r5, #0]
 8008368:	bd70      	pop	{r4, r5, r6, pc}
 800836a:	46c0      	nop			; (mov r8, r8)
 800836c:	20000840 	.word	0x20000840

08008370 <_lseek_r>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	0005      	movs	r5, r0
 8008374:	0008      	movs	r0, r1
 8008376:	0011      	movs	r1, r2
 8008378:	2200      	movs	r2, #0
 800837a:	4c06      	ldr	r4, [pc, #24]	; (8008394 <_lseek_r+0x24>)
 800837c:	6022      	str	r2, [r4, #0]
 800837e:	001a      	movs	r2, r3
 8008380:	f7fa fba2 	bl	8002ac8 <_lseek>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d103      	bne.n	8008390 <_lseek_r+0x20>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d000      	beq.n	8008390 <_lseek_r+0x20>
 800838e:	602b      	str	r3, [r5, #0]
 8008390:	bd70      	pop	{r4, r5, r6, pc}
 8008392:	46c0      	nop			; (mov r8, r8)
 8008394:	20000840 	.word	0x20000840

08008398 <__malloc_lock>:
 8008398:	4770      	bx	lr

0800839a <__malloc_unlock>:
 800839a:	4770      	bx	lr

0800839c <_read_r>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	0005      	movs	r5, r0
 80083a0:	0008      	movs	r0, r1
 80083a2:	0011      	movs	r1, r2
 80083a4:	2200      	movs	r2, #0
 80083a6:	4c06      	ldr	r4, [pc, #24]	; (80083c0 <_read_r+0x24>)
 80083a8:	6022      	str	r2, [r4, #0]
 80083aa:	001a      	movs	r2, r3
 80083ac:	f7fa fb32 	bl	8002a14 <_read>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d103      	bne.n	80083bc <_read_r+0x20>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d000      	beq.n	80083bc <_read_r+0x20>
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	bd70      	pop	{r4, r5, r6, pc}
 80083be:	46c0      	nop			; (mov r8, r8)
 80083c0:	20000840 	.word	0x20000840

080083c4 <_init>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	46c0      	nop			; (mov r8, r8)
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr

080083d0 <_fini>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	46c0      	nop			; (mov r8, r8)
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr
